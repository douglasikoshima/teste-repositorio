
#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw/tuxfw.h>
#include <Defines/Defines.h>
#include <Campanha/Campanha.hpp>
#include <string.h>

EXEC SQL INCLUDE SQLCA;

CCampanha::CCampanha()
{

}

CCampanha::~CCampanha()
{

}

void CCampanha::consultarCampanhas(char*ddd,char*idTipoLinha,char*idSegmentacao,char*nrLinha,XMLGen* xml_g)
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	struct param{
		VARCHAR m_idCampanha[256];
		VARCHAR m_nmCampanha[256];
		VARCHAR m_cdSGP[16];
		VARCHAR m_cdSGPConsulta[16];
		VARCHAR m_inPrecedente[10];
		VARCHAR m_tpCampanha[2];
	}m_param;
	struct iparam{
		short m_idCampanha;
		short m_nmCampanha;
		short m_cdSGP;
		short m_cdSGPConsulta;
		short m_inPrecedente;
		short m_tpCampanha;
	}m_iparam;
	int countMailingIphone = 0;
	char cDdd[3];
	char cIdTipoLinha[22];
	char cIdSegmentacao[22];
	char cNrLinha[22];
	VARCHAR idCampanha[22];
	short iIdCampanha = 0;
	EXEC SQL END DECLARE SECTION;

	strNullCpy(cDdd,ddd);
	strNullCpy(cIdTipoLinha,idTipoLinha);
	strNullCpy(cIdSegmentacao,idSegmentacao);
	strNullCpy(cNrLinha,nrLinha);
	memset(&idCampanha,0,sizeof(idCampanha));


	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
	SELECT COUNT(1) INTO :countMailingIphone
	FROM VOL.MAILINGIPHONE WHERE NRLINHA = TO_NUMBER(:cNrLinha) AND CDAREAREGISTRO = TO_NUMBER(:cDdd);

	EXEC SQL
	SELECT IDCAMPANHA INTO :idCampanha:iIdCampanha
	FROM VOL.CAMPANHACE CAMPANHACE WHERE LOWER(CDSGP) = LOWER('IPHONE01');

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
	EXEC SQL DECLARE LSTCAMPANHAS CURSOR FOR
		SELECT 
		DISTINCT CAMPANHACE.IDCAMPANHA,
		CAMPANHACE.NMCAMPANHA,
		CAMPANHACE.CDSGP,
		CAMPANHACE.CDSGPCONSULTA,
		CAMPANHACE.INPRECEDENTE,
		CAMPANHACE.TPCAMPANHA
		FROM
		VOL.CAMPANHACE CAMPANHACE,
		VOL.CAMPANHACETIPOLINHA CAMPANHACETIPOLINHA,
		VOL.CAMPANHACEDDD CAMPANHACEDDD,
		VOL.CAMPANHACESEGMENTACAO CAMPANHACESEGMENTACAO,
		APOIO.AREAREGISTRO AREAREGISTRO
		WHERE
		CAMPANHACE.IDCAMPANHA = CAMPANHACETIPOLINHA.IDCAMPANHA AND
		CAMPANHACE.IDCAMPANHA = CAMPANHACEDDD.IDCAMPANHA AND
		CAMPANHACE.IDCAMPANHA = CAMPANHACESEGMENTACAO.IDCAMPANHA AND
		CAMPANHACEDDD.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
		(AREAREGISTRO.CDAREAREGISTRO = :cDdd	OR :cDdd = -1) AND
		(CAMPANHACETIPOLINHA.IDTIPOLINHA = :cIdTipoLinha OR :cIdTipoLinha = -1) AND
		(CAMPANHACESEGMENTACAO.IDSEGMENTACAO = :cIdSegmentacao OR :cIdSegmentacao = -1 ) AND
		CAMPANHACE.DTINICIO <= TRUNC(SYSDATE) AND
		CAMPANHACE.DTTERMINO >= TRUNC(SYSDATE)
		ORDER BY
		CAMPANHACE.NMCAMPANHA ASC;
		

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTCAMPANHAS;

	xml_g->createTag("ListaCampanhaVO");
	xml_g->addProp( "xmlns", "promocoes.vol.vivo.com.br/vo" );
	for( ;; ) {
		// varre todos os registros para criar a lista com os bancos
		memset(&m_param,0,sizeof(m_param));
		memset(&m_iparam,0,sizeof(m_iparam));

		EXEC SQL FETCH LSTCAMPANHAS INTO
			m_param:m_iparam;

		if((countMailingIphone == 1 && strcmp((char*)m_param.m_idCampanha.arr,(char*)idCampanha.arr) == 0) ||
		  strcmp((char*)m_param.m_idCampanha.arr,(char*)idCampanha.arr) != 0)
		{
		xml_g->createTag("CampanhaVO");
		xml_g->addItem("idCampanha",(char*)m_param.m_idCampanha.arr);	
		xml_g->addItem("nmCampanha",(char*)m_param.m_nmCampanha.arr);
		xml_g->addItem("cdSGP",(char*)m_param.m_cdSGP.arr);
			xml_g->addItem("cdSGPConsulta",(char*)m_param.m_cdSGPConsulta.arr);
			xml_g->addItem("inPrecedente",(char*)m_param.m_inPrecedente.arr);
		xml_g->addItem("tpCampanha",(char*)m_param.m_tpCampanha.arr);

		xml_g->closeTag();
		}
	}

	EXEC SQL CLOSE LSTCAMPANHAS;

	xml_g->closeTag();

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CCampanha::consultarCampanha(char* iIdCampanha,XMLGen* xml_g)
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	struct param{
		VARCHAR m_idCampanha[256];
		VARCHAR m_nmCampanha[256];
		VARCHAR m_dsCampanha[2000+1];
		VARCHAR m_dsRegulamento[2000+1];
		VARCHAR m_inExibeTermo[256];
		VARCHAR m_cdSGP[256];
		VARCHAR m_cdSGPConsulta[256];
		VARCHAR m_idContato[256];
		VARCHAR m_nmHistoricoRelac[256];
		VARCHAR m_dtInicio[25];
		VARCHAR m_dtTermino[25];
		VARCHAR m_inExibeCupom[256];
		VARCHAR m_inExibePremio[2];
		VARCHAR m_inExibeQuestionario[2];
		VARCHAR m_inPrecedente[2];
		VARCHAR m_tpCampanha[2];
		VARCHAR m_idItemMenu[10];
		VARCHAR m_dsUrlAutenticador[210];
		VARCHAR m_dsUrlFinal[210];			
		VARCHAR m_dsTextoExplicativo[310];
		VARCHAR m_dsPergunta[210];
		VARCHAR m_dsRespostaCorreta[55];
		VARCHAR m_dsRespostaIncorreta[55];
	}m_param;
	struct iparam{
		short m_idCampanha;
		short m_nmCampanha;
		short m_dsCampanha;
		short m_dsRegulamento;
		short m_inExibeTermo;
		short m_cdSGP;
		short m_cdSGPConsulta;
		short m_idContato;
		short m_nmHistoricoRelac;
		short m_dtInicio;
		short m_dtTermino;
		short m_inExibeCupom;
		short m_inExibePremio;
		short m_inExibeQuestionario;
		short m_inPrecedente;
		short m_tpCampanha;
		short m_idItemMenu;
		short m_dsUrlAutenticador;
		short m_dsUrlFinal;
		short m_dsTextoExplicativo;
		short m_dsPergunta;
		short m_dsRespostaCorreta;
		short m_dsRespostaIncorreta;
	}m_iparam;
	char*idCampanha = iIdCampanha;
	EXEC SQL END DECLARE SECTION;

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
	EXEC SQL DECLARE LSTCAMPANHA CURSOR FOR

		SELECT
			campanha.idCampanha,
			NVL(campanha.nmCampanha, ' ') AS nmCampanha,
			NVL(campanha.dsCampanha, ' ') AS dsCampanha,
			NVL(campanha.dsRegulamento, ' ') AS dsRegulamento,
			campanha.inExibeTermo,
			NVL(campanha.cdSGP, ' ') AS cdSGP,
			NVL(campanha.cdSGPConsulta, ' ') AS cdSGPConsulta,
			campanha.idContato,
			campanha.nmHistoricoRelac,
			TO_CHAR(campanha.dtInicio,'dd/mm/yyyy'),
			TO_CHAR(campanha.dtTermino,'dd/mm/yyyy'),
			campanha.inExibeCupom,
			campanha.inExibePremio,
			campanha.inExibeQuestionario,
			campanha.inPrecedente,
			campanha.tpCampanha,
			DECODE (campanha.iditemmenu, NULL, 0, campanha.iditemmenu),
			NVL(campanha.dsUrlAutenticador, ' '),
			NVL(campanha.dsUrlFinal, ' '),
			NVL(campanha.dsTextoExplicativo, ' '),
			NVL(campanha.dsPergunta, ' '),
			NVL(campanha.dsRespostaCorreta, ' '),
			NVL (campanha.dsRespostaIncorreta, ' ')
		FROM
			vol.campanhace  campanha
		WHERE
			campanha.idcampanha = :idCampanha;

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTCAMPANHA;

	xml_g->createTag("CampanhaVO");
	xml_g->addProp( "xmlns", "promocoes.vol.vivo.com.br/vo" );
	for( ;; ) {
		// varre todos os registros para criar a lista com os bancos
		memset(&m_param,0,sizeof(m_param));
		memset(&m_iparam,0,sizeof(m_iparam));

		EXEC SQL FETCH LSTCAMPANHA INTO
			m_param:m_iparam;

		xml_g->addItem("idCampanha",(char*)m_param.m_idCampanha.arr);
		xml_g->addItem("nmCampanha",(char*)m_param.m_nmCampanha.arr);
		xml_g->addItem("dsCampanha",(char*)m_param.m_dsCampanha.arr);
		xml_g->addItem("dsRegulamento",(char*)m_param.m_dsRegulamento.arr);
		xml_g->addItem("inExibeTermo",(char*)m_param.m_inExibeTermo.arr);
		xml_g->addItem("cdSGP",(char*)m_param.m_cdSGP.arr);
		xml_g->addItem("cdSGPConsulta",(char*)m_param.m_cdSGPConsulta.arr);
		xml_g->addItem("idContato",(char*)m_param.m_idContato.arr);
		xml_g->addItem("nmHistoricoRelac",(char*)m_param.m_nmHistoricoRelac.arr);
		xml_g->addItem("dtInicio",(char*)m_param.m_dtInicio.arr);
		xml_g->addItem("dtTermino",(char*)m_param.m_dtTermino.arr);
		xml_g->addItem("inExibeCupom",(char*)m_param.m_inExibeCupom.arr);
		xml_g->addItem("inExibePremio",(char*)m_param.m_inExibePremio.arr);
		xml_g->addItem("inExibeQuestionario",(char*)m_param.m_inExibeQuestionario.arr);
		xml_g->addItem("inPrecedente",(char*)m_param.m_inPrecedente.arr);
		xml_g->addItem("tpCampanha", (char*)m_param.m_tpCampanha.arr);		
		xml_g->addItem("iditemmenu", (char*)m_param.m_idItemMenu.arr);
		xml_g->addItem("dsUrlAutenticador",(char*)m_param.m_dsUrlAutenticador.arr);
		xml_g->addItem("dsUrlFinal",(char*)m_param.m_dsUrlFinal.arr);
		xml_g->addItem("dsTextoExplicativo",(char*)m_param.m_dsTextoExplicativo.arr);
		xml_g->addItem("dsPergunta",(char*)m_param.m_dsPergunta.arr);
		xml_g->addItem("dsRespostaCorreta",(char*)m_param.m_dsRespostaCorreta.arr);
		xml_g->addItem("dsRespostaIncorreta",(char*)m_param.m_dsRespostaIncorreta.arr);
	}



	EXEC SQL CLOSE LSTCAMPANHA;

	xml_g->closeTag();

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CCampanha::strNullCpy(char*destino,char*origem)
{
	if(origem != NULL && strlen(origem) > 0)
		strcpy(destino,origem);
	else
		strcpy(destino,"-1");
}