#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CContatoTipoRelacionamento.h"

CContatoTipoRelacionamento::CContatoTipoRelacionamento()
{
}

CContatoTipoRelacionamento::~CContatoTipoRelacionamento()
{
}

int CContatoTipoRelacionamento::Insert( 
								char* cidContato,
								char* cidTipoRelacionamento,
								char* cidUsuarioAlteracao
							 )
{
    ULOG_START("CContatoTipoRelacionamento::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		char* cAuxidTipoRelacionamento = cidTipoRelacionamento;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL 
			INSERT INTO CONTATOADM.CONTATOTIPORELACIONAMENTO
			(	IDCONTATOTIPORELACIONAMENTO,
				IDCONTATO,
				IDTIPORELACIONAMENTO,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES 
			(	CONTATOADM.CONTATOTIPORELACIONAMENTOSQ.NEXTVAL,
				:cAuxidContato,
				:cAuxidTipoRelacionamento,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
			
        ULOG_END("CContatoTipoRelacionamento::Insert()");
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoTipoRelacionamento::InsertSelect( 
								              char* cidContatoOrigem,
								              char* cidContatoDestino,
								              char* cidUsuarioAlteracao
							                 )
{
    ULOG_START("CContatoTipoRelacionamento::InsertSelect()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidContatoOrigemAux = cidContatoOrigem;
		char* cidContatoDestinoAux = cidContatoDestino;
		char* cidUsuarioAlteracaoAux = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsertSelect;
	
	//Realiza a copia de um contato de origem para um de destino
	EXEC SQL 
	INSERT INTO CONTATOADM.CONTATOTIPORELACIONAMENTO
	(	
		IDCONTATOTIPORELACIONAMENTO,
		IDCONTATO,
		IDTIPORELACIONAMENTO,
		IDUSUARIOALTERACAO,
		DTULTIMAALTERACAO
	)
	SELECT
		CONTATOADM.CONTATOTIPORELACIONAMENTOSQ.NEXTVAL,
		:cidContatoDestinoAux,
		IDTIPORELACIONAMENTO,
		:cidUsuarioAlteracaoAux,
		SYSDATE
	FROM
		CONTATOADM.CONTATOTIPORELACIONAMENTO
	WHERE
		IDCONTATO = :cidContatoOrigemAux;
		
    ULOG_END("CContatoTipoRelacionamento::InsertSelect()");
    
	return 0;//Sucesso
	
GotoInsertSelect:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoTipoRelacionamento::Update( 
								char* cidContatoTipoRelacionamento,
								char* cidContato,
								char* cidTipoRelacionamento,
								char* cidUsuarioAlteracao 
							 )
{
    ULOG_START("CContatoTipoRelacionamento::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoTipoRelacionamento = cidContatoTipoRelacionamento;
		char* cAuxidContato = cidContato;
		char* cAuxidTipoRelacionamento = cidTipoRelacionamento;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE CONTATOADM.CONTATOTIPORELACIONAMENTO
			SET
				IDCONTATO = :cAuxidContato,
				IDTIPORELACIONAMENTO = :cAuxidTipoRelacionamento,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDCONTATOTIPORELACIONAMENTO = :cAuxidContatoTipoRelacionamento;
		
		ULOG_END("CContatoTipoRelacionamento::Update()");
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoTipoRelacionamento::Delete( char* cidContatoTipoRelacionamento )
{
    ULOG_START("CContatoTipoRelacionamento::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContatoTipoRelacionamento = cidContatoTipoRelacionamento; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.CONTATOTIPORELACIONAMENTO
			WHERE 
				IDCONTATOTIPORELACIONAMENTO = :cAuxidContatoTipoRelacionamento;
		
		ULOG_END("CContatoTipoRelacionamento::Delete()");
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if( sqlca.sqlcode == -2292 )
		return 1;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoTipoRelacionamento::ListId( char* cidContatoTipoRelacionamento ) 
{
    ULOG_START("CContatoTipoRelacionamento::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoTipoRelacionamento = cidContatoTipoRelacionamento; 
		struct
		{
			VARCHAR stidContatoTipoRelacionamento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoRelacionamento[21+1];
		} stContatoTipoRelacionamentoRegistro;
		struct
		{
			short iidContatoTipoRelacionamento;
			short iidContato;
			short iidTipoRelacionamento;
		} stContatoTipoRelacionamentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorContatoTipoRelacionamentoId CURSOR FOR 
   			SELECT 	
   				IDCONTATOTIPORELACIONAMENTO,
				IDCONTATO,
				IDTIPORELACIONAMENTO
			FROM 
				CONTATOADM.CONTATOTIPORELACIONAMENTO
			WHERE 
				IDCONTATOTIPORELACIONAMENTO = :cAuxidContatoTipoRelacionamento;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoTipoRelacionamentoId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoTipoRelacionamentoRegistro, 0, sizeof(stContatoTipoRelacionamentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorContatoTipoRelacionamentoId INTO :stContatoTipoRelacionamentoRegistro:stContatoTipoRelacionamentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoTipoRelacionamentoRegistro.stidContatoTipoRelacionamento.arr,
				(char*)stContatoTipoRelacionamentoRegistro.stidContato.arr, 
				(char*)stContatoTipoRelacionamentoRegistro.stidTipoRelacionamento.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorContatoTipoRelacionamentoId;
		
		ULOG_END("CContatoTipoRelacionamento::ListId()");

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoTipoRelacionamento::ListAll( void )
{
    ULOG_START("CContatoTipoRelacionamento::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContatoTipoRelacionamento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoRelacionamento[21+1];
		} stContatoTipoRelacionamentoRegistro;
		struct
		{
			short iidContatoTipoRelacionamento;
			short iidContato;
			short iidTipoRelacionamento;
		} stContatoTipoRelacionamentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorContatoTipoRelacionamentoAll CURSOR FOR
   			SELECT 	
   				IDCONTATOTIPORELACIONAMENTO,
				IDCONTATO,
				IDTIPORELACIONAMENTO
			FROM 
				CONTATOADM.CONTATOTIPORELACIONAMENTO
			WHERE
				IDCONTATOTIPORELACIONAMENTO > 0; 

		//Abre o cursor
		EXEC SQL OPEN CursorContatoTipoRelacionamentoAll;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoTipoRelacionamentoRegistro, 0, sizeof(stContatoTipoRelacionamentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorContatoTipoRelacionamentoAll INTO :stContatoTipoRelacionamentoRegistro:stContatoTipoRelacionamentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoTipoRelacionamentoRegistro.stidContatoTipoRelacionamento.arr,
				(char*)stContatoTipoRelacionamentoRegistro.stidContato.arr, 
				(char*)stContatoTipoRelacionamentoRegistro.stidTipoRelacionamento.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o cursor
		EXEC SQL CLOSE CursorContatoTipoRelacionamentoAll;
		
		ULOG_END("CContatoTipoRelacionamento::ListAll()");
		
	}
	catch(...)
	{
		throw;
	}
	//Retorna a quantidade de registros
	return iCont;

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CContatoTipoRelacionamento::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContatoTipoRelacionamento", Registro(x)->cidContatoTipoRelacionamento );
				xml->addItem("idContato", Registro(x)->cidContato ); 
				xml->addItem("idTipoRelacionamento", Registro(x)->cidTipoRelacionamento ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CContatoTipoRelacionamento::RelacaoPorIdContato( char* cidContato ) 
{
    ULOG_START("CContatoTipoRelacionamento::RelacaoPorIdContato()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContatoTipoRelacionamento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoRelacionamento[21+1];
		} stContatoTipoRelacionamentoRegistro;
		struct
		{
			short iidContatoTipoRelacionamento;
			short iidContato;
			short iidTipoRelacionamento;
		} stContatoTipoRelacionamentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoRelacionamento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacaoPorIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorRelacaoPorIdContato CURSOR FOR 
   			SELECT 	
   				IDCONTATOTIPORELACIONAMENTO,
				IDCONTATO,
				IDTIPORELACIONAMENTO
			FROM 
				CONTATOADM.CONTATOTIPORELACIONAMENTO
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorRelacaoPorIdContato;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoTipoRelacionamentoRegistro, 0, sizeof(stContatoTipoRelacionamentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorRelacaoPorIdContato INTO :stContatoTipoRelacionamentoRegistro:stContatoTipoRelacionamentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoTipoRelacionamentoRegistro.stidContatoTipoRelacionamento.arr,
				(char*)stContatoTipoRelacionamentoRegistro.stidContato.arr, 
				(char*)stContatoTipoRelacionamentoRegistro.stidTipoRelacionamento.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorRelacaoPorIdContato;
		
		ULOG_END("CContatoTipoRelacionamento::RelacaoPorIdContato()");

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoRelacaoPorIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}
