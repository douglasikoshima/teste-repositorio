#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/COH.h"

// Precisamos deste include para a atualização do DSPATH da Organização
#include <COrg.h>


COrganizacaoHierarquia::COrganizacaoHierarquia()
{
}

COrganizacaoHierarquia::~COrganizacaoHierarquia()
{
}

int COrganizacaoHierarquia::Insert( 
			char* cidOrganizacao,
			char* cidOrganizacaoPai,
			char* cidUsuarioAlteracao )
{
    ULOG_START("COrganizacaoHierarquia::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidOrganizacao = cidOrganizacao;
		char* cAuxidOrganizacaoPai = cidOrganizacaoPai;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraOrganizacaoHierarquia();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL INSERT INTO ORGANOGRAMA.ORGANIZACAOHIERARQUIA
		(	idOrganizacao,
			idOrganizacaoPai,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidOrganizacao,
			:cAuxidOrganizacaoPai,
			:cAuxidUsuarioAlteracao,
			SYSDATE);

		// Precisamos atualizar o PATH
		COrganizacao oOrg;
		oOrg.atualizaPath(cAuxidOrganizacao);
        ULOG_END("COrganizacaoHierarquia::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int COrganizacaoHierarquia::Delete( char* cidOrganizacao )
{
    ULOG_START("COrganizacaoHierarquia::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidOrganizacao = cidOrganizacao; 
		int iCont = 0;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraOrganizacaoHierarquia();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;

		EXEC SQL SELECT COUNT( idOrganizacao )
		INTO :iCont
		FROM organograma.OrganizacaoHierarquia
		WHERE idOrganizacaoPai = :cAuxidOrganizacao;
				
		//Caso existe esta relacao, deve-se remover os relacionamentos antes
		if( iCont > 0 )
		{
			SetErro( "Organizacao tem dependencias, primeiro apague a relacao para depois apagar este item" );
			ULOG_END("COrganizacaoHierarquia::Delete()");
			return -1;
		}

		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.OrganizacaoHierarquia
		WHERE (idOrganizacao = :cAuxidOrganizacao);

		// Precisamos atualizar o PATH
		COrganizacao oOrg;
		oOrg.atualizaPath(cAuxidOrganizacao);
		ULOG_END("COrganizacaoHierarquia::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
		{
			if (sqlca.sqlcode ==1403)
			{ //No tiene filhos. Es Raiz. 
				return 1;
			}
			else
				return 0;//Erro
		}
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int COrganizacaoHierarquia::ListId( char* cidOrganizacao ) 
{
    ULOG_START("COrganizacaoHierarquia::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidOrganizacao = cidOrganizacao; 
		struct
		{
			VARCHAR stidOrganizacao[21+1];
			VARCHAR stidOrganizacaoPai[21+1];
		} stOrganizacaoHierarquiaRegistro;
		struct
		{
			short iidOrganizacao;
			short iidOrganizacaoPai;
		} stOrganizacaoHierarquiaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraOrganizacaoHierarquia();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorOrganizacaoHierarquiaId CURSOR FOR 
   		SELECT 	idOrganizacao,
	            idOrganizacaoPai
		FROM organograma.OrganizacaoHierarquia
		WHERE idOrganizacao = :cAuxidOrganizacao;

		//Abre o cursor
		EXEC SQL OPEN CursorOrganizacaoHierarquiaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("COrganizacaoHierarquia::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stOrganizacaoHierarquiaRegistro, 0, sizeof(stOrganizacaoHierarquiaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorOrganizacaoHierarquiaId INTO :stOrganizacaoHierarquiaRegistro:stOrganizacaoHierarquiaIndicator;
				//Adiciona a classe
				Add( 	(char*)stOrganizacaoHierarquiaRegistro.stidOrganizacao.arr,
				(char*)stOrganizacaoHierarquiaRegistro.stidOrganizacaoPai.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorOrganizacaoHierarquiaId;
		}
		ULOG_END("COrganizacaoHierarquia::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int COrganizacaoHierarquia::ListAll( void )
{
    ULOG_START("COrganizacaoHierarquia::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidOrganizacao[21+1];
			VARCHAR stidOrganizacaoPai[21+1];
		} stOrganizacaoHierarquiaRegistro;
		struct
		{
			short iidOrganizacao;
			short iidOrganizacaoPai;
		} stOrganizacaoHierarquiaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraOrganizacaoHierarquia();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorOrganizacaoHierarquiaAll CURSOR FOR
   		SELECT 	idOrganizacao,
		idOrganizacaoPai
		FROM organograma.OrganizacaoHierarquia; 

		//Abre o cursor
		EXEC SQL OPEN CursorOrganizacaoHierarquiaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("COrganizacaoHierarquia::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stOrganizacaoHierarquiaRegistro, 0, sizeof(stOrganizacaoHierarquiaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorOrganizacaoHierarquiaAll INTO :stOrganizacaoHierarquiaRegistro:stOrganizacaoHierarquiaIndicator;
				//Adiciona a classe
				Add( 	(char*)stOrganizacaoHierarquiaRegistro.stidOrganizacao.arr,
				(char*)stOrganizacaoHierarquiaRegistro.stidOrganizacaoPai.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorOrganizacaoHierarquiaAll;
		}
		ULOG_END("COrganizacaoHierarquia::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}


void COrganizacaoHierarquia::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idOrganizacao", Registro(x)->cidOrganizacao );
				xml->addItem("idOrganizacaoPai", Registro(x)->cidOrganizacaoPai ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

void COrganizacaoHierarquia::GetXml( char* cNomeTagArray, char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Caso nao tenha recebido uma tag padrao, deixa sem
		if( strlennull( cNomeTagArray ) > 0 ) {
			xml->createTag(cNomeTagArray);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
		}
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 ) {
				xml->createTag(cNomeTag);
				//Adiciona a propriedade necessaria para o xml
				xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idOrganizacao", Registro(x)->cidOrganizacao );
				xml->addItem("idOrganizacaoPai", Registro(x)->cidOrganizacaoPai ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
		//So fecha um tag se abriu anteriormente
		if( strlennull( cNomeTagArray ) > 0 )
			xml->closeTag();
	}
}
