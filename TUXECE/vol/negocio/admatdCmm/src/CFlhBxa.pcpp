#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFlhBxa.h"

CContatoFolhaBaixa::CContatoFolhaBaixa()
{
}

CContatoFolhaBaixa::~CContatoFolhaBaixa()
{
}

int CContatoFolhaBaixa::Insert( 
								char* cidContato,
								char* cidBaixa,
								char* cidUsuarioAlteracao 
			                  )
{
    ULOG_START("CContatoFolhaBaixa::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidContatoFolhaBaixa[21+1];
		char* cAuxidContato = cidContato;
		char* cAuxidBaixa = cidBaixa;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();
		
		memset( &cAuxidContatoFolhaBaixa, 0, sizeof(cAuxidContatoFolhaBaixa) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.ContatoFolhaBaixaSQ.NEXTVAL INTO :cAuxidContatoFolhaBaixa FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.ContatoFolhaBaixa
		(	idContatoFolhaBaixa,
			idContato,
			idBaixa,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidContatoFolhaBaixa,
			:cAuxidContato,
			:cAuxidBaixa,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CContatoFolhaBaixa::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoFolhaBaixa::Delete( char* cidContatoFolhaBaixa )
{
    ULOG_START("CContatoFolhaBaixa::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContatoFolhaBaixa = cidContatoFolhaBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoFolhaBaixa
		WHERE (idContatoFolhaBaixa = :cAuxidContatoFolhaBaixa);
		ULOG_END("CContatoFolhaBaixa::Delete()");
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaBaixa::Delete( char* cidContato, char* cidBaixa )
{
    ULOG_START("CContatoFolhaBaixa::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
		char* cAuxidBaixa = cidBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				contatoadm.ContatoFolhaBaixa
			WHERE 
				IDBAIXA = :cAuxidBaixa
			AND
				IDCONTATO = :cAuxidContato;
				
		ULOG_END("CContatoFolhaBaixa::Delete()");
		
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaBaixa::EraseFlh( char* cidContato ) 
{
    ULOG_START("CContatoFolhaBaixa::EraseFlh()");
    
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoFolhaBaixa
		WHERE (idContato = :cAuxidContato);
		
		ULOG_END("CContatoFolhaBaixa::EraseFlh()");
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaBaixa::EraseBxa( char* cidBaixa ) 
{
    ULOG_START("CContatoFolhaBaixa::EraseBxa()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidBaixa = cidBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoFolhaBaixa
		WHERE (idBaixa = :cAuxidBaixa);
		ULOG_END("CContatoFolhaBaixa::EraseBxa()");
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaBaixa::ListId( char* cidContatoFolhaBaixa ) 
{
    ULOG_START("CContatoFolhaBaixa::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoFolhaBaixa = cidContatoFolhaBaixa; 
		struct
		{
			VARCHAR stidContatoFolhaBaixa[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidBaixa[21+1];
		} stContatoFolhaBaixaRegistro;
		struct
		{
			short iidContatoFolhaBaixa;
			short iidContato;
			short iidBaixa;
		} stContatoFolhaBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorContatoFolhaBaixaId CURSOR FOR 
	   		SELECT 	
	   			IDCONTATOFOLHABAIXA,
				IDCONTATO,
				IDBAIXA
			FROM 
				CONTATOADM.CONTATOFOLHABAIXA
			WHERE 
				IDCONTATOFOLHABAIXA = :cAuxidContatoFolhaBaixa;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoFolhaBaixaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CContatoFolhaBaixa::ListId()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaBaixaRegistro, 0, sizeof(stContatoFolhaBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoFolhaBaixaId INTO :stContatoFolhaBaixaRegistro:stContatoFolhaBaixaIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stContatoFolhaBaixaRegistro.stidContatoFolhaBaixa.arr,
					(char*)stContatoFolhaBaixaRegistro.stidContato.arr,
					(char*)stContatoFolhaBaixaRegistro.stidBaixa.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorContatoFolhaBaixaId;
		}
		ULOG_END("CContatoFolhaBaixa::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoFolhaBaixa::ListIdContato( char* cidContato ) 
{
    ULOG_START("CContatoFolhaBaixa::ListIdContato()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContatoFolhaBaixa[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidBaixa[21+1];
		} stContatoFolhaBaixaRegistro;
		struct
		{
			short iidContatoFolhaBaixa;
			short iidContato;
			short iidBaixa;
		} stContatoFolhaBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorListIdContato CURSOR FOR 
	   		SELECT 	
	   			IDCONTATOFOLHABAIXA,
				IDCONTATO,
				IDBAIXA
			FROM 
				CONTATOADM.CONTATOFOLHABAIXA
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorListIdContato;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_START("CContatoFolhaBaixa::ListIdContato()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaBaixaRegistro, 0, sizeof(stContatoFolhaBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListIdContato INTO :stContatoFolhaBaixaRegistro:stContatoFolhaBaixaIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stContatoFolhaBaixaRegistro.stidContatoFolhaBaixa.arr,
					(char*)stContatoFolhaBaixaRegistro.stidContato.arr,
					(char*)stContatoFolhaBaixaRegistro.stidBaixa.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListIdContato;
		}
		ULOG_END("CContatoFolhaBaixa::ListIdContato()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoFolhaBaixa::ListId( char* cidContato, char* cidBaixa ) 
{
    ULOG_START("CContatoFolhaBaixa::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char*  cAuxidContato = cidContato; 
		char*  cAuxidBaixa = cidBaixa; 
		struct
		{
			VARCHAR stidContatoFolhaBaixa[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidBaixa[21+1];
		} stContatoFolhaBaixaRegistro;
		struct
		{
			short iidContatoFolhaBaixa;
			short iidContato;
			short iidBaixa;
		} stContatoFolhaBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId2;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorContatoFolhaBaixaId2 CURSOR FOR 
   			SELECT 	
				IDCONTATOFOLHABAIXA,
				IDCONTATO,
				IDBAIXA
			FROM
				contatoadm.ContatoFolhaBaixa
			WHERE 
				IDCONTATO = :cAuxidContato
			AND
				IDBAIXA = :cAuxidBaixa
			AND
				IDCONTATOFOLHABAIXA > 0;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoFolhaBaixaId2;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoFolhaBaixa::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaBaixaRegistro, 0, sizeof(stContatoFolhaBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoFolhaBaixaId2 INTO :stContatoFolhaBaixaRegistro:stContatoFolhaBaixaIndicator;
				//Adiciona a classe
				Add(
					(char*)stContatoFolhaBaixaRegistro.stidContatoFolhaBaixa.arr,
					(char*)stContatoFolhaBaixaRegistro.stidContato.arr,
					(char*)stContatoFolhaBaixaRegistro.stidBaixa.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorContatoFolhaBaixaId2;
		}
		ULOG_END("CContatoFolhaBaixa::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId2:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoFolhaBaixa::ListAll( void )
{
    ULOG_START("CContatoFolhaBaixa::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContatoFolhaBaixa[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidBaixa[21+1];
		} stContatoFolhaBaixaRegistro;
		struct
		{
			short iidContatoFolhaBaixa;
			short iidContato;
			short iidBaixa;
		} stContatoFolhaBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorContatoFolhaBaixaAll CURSOR FOR
   		SELECT 	idContatoFolhaBaixa,
		idContato,
		idBaixa
		FROM contatoadm.ContatoFolhaBaixa; 

		//Abre o cursor
		EXEC SQL OPEN CursorContatoFolhaBaixaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoFolhaBaixa::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaBaixaRegistro, 0, sizeof(stContatoFolhaBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoFolhaBaixaAll INTO :stContatoFolhaBaixaRegistro:stContatoFolhaBaixaIndicator;
				//Adiciona a classe
				Add( 	(char*)stContatoFolhaBaixaRegistro.stidContatoFolhaBaixa.arr,
				(char*)stContatoFolhaBaixaRegistro.stidContato.arr,
				(char*)stContatoFolhaBaixaRegistro.stidBaixa.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorContatoFolhaBaixaAll;
		}
		ULOG_END("CContatoFolhaBaixa::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoFolhaBaixa::ContaBaixa( char* cidContato )
{
    ULOG_START("CContatoFolhaBaixa::ContaBaixa()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidContatoAux = cidContato;
		int   iCont = 0;
	EXEC SQL END DECLARE SECTION;

	//Ativa as acoes decorrentes de erros ORACLE
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoContaBaixa;
	sqlca.sqlcode=0;

	
	//Conta quantas baixa ativas existe associadas a uma folha de contato
	EXEC SQL
	SELECT 	
        COUNT(1)
	INTO
		:iCont
	FROM 
		CONTATOADM.CONTATOFOLHABAIXA CONTATOFOLHABAIXA,
        CONTATOADM.BAIXA BAIXA
	WHERE 
        CONTATOFOLHABAIXA.IDBAIXA = BAIXA.IDBAIXA
    AND
        BAIXA.INDISPONIBILIDADE = 1
    AND
		CONTATOFOLHABAIXA.IDCONTATO = :cidContatoAux;
		
    ULOG_END("CContatoFolhaBaixa::ContaBaixa()");
	return iCont;

GotoContaBaixa:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CContatoFolhaBaixa::GetXml( char* cNomeTag, XMLGen*xml )
{
   	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContatoFolhaBaixa", Registro(x)->cidContatoFolhaBaixa );
				xml->addItem("idContato", Registro(x)->cidContato );
				xml->addItem("idBaixa", Registro(x)->cidBaixa ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
