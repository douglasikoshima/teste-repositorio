#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>
#include "tuxfw.h"
#include "../include/CHUP.h"

EXEC SQL BEGIN DECLARE SECTION;

/*******************************************************************************
 * Definição de tamanhos de campos
 *******************************************************************************/
#define LEN_ID          22
#define LEN_DATE_ORA    8
#define LEN_EOS         1

/*******************************************************************************
 * Macros para manipulacao de dados ProC/C++
 *******************************************************************************/
#define STRCPY_TO_ORA(dest, source) \
{ \
    dest.len = (unsigned short) strlen(source);\
    strncpy((char *) dest.arr, (const char *) source, (size_t)dest.len); \
}

#define STRCPY_FROM_ORA(dest, source) \
{ \
    dest[source.len] = 0; \
    strncpy((char *)dest,(const char *)source.arr, source.len); \
}

EXEC SQL END DECLARE SECTION;

CHierarquiaDeptoPessoa::CHierarquiaDeptoPessoa()
{
    // Inicializa as estruturas do objeto.
    memset( &tHierarquiaDeptoPessoa, 0x00, sizeof( THierarquiaDeptoPessoa ) );
}

CHierarquiaDeptoPessoa::~CHierarquiaDeptoPessoa()
{
}

// Métodos de SET.
void  CHierarquiaDeptoPessoa::setIdUsuarioAlteracao( char* pszIdUsuarioAlteracao )
{
    strcpy( tHierarquiaDeptoPessoa.szIdUsuarioAlteracao, pszIdUsuarioAlteracao );
}

void  CHierarquiaDeptoPessoa::setIdHierarquiaDeptoPessoa( char* pszIdHierarquiaDeptoPessoa )
{
    strcpy( tHierarquiaDeptoPessoa.szIdHierarquiaDeptoPessoa, pszIdHierarquiaDeptoPessoa );
}

void  CHierarquiaDeptoPessoa::setIdNivelCargo( char* pszIdNivelCargo )
{
    strcpy( tHierarquiaDeptoPessoa.szIdNivelCargo, pszIdNivelCargo );
}

void  CHierarquiaDeptoPessoa::setIdPessoa( char* pszIdPessoa )
{
    strcpy( tHierarquiaDeptoPessoa.szIdPessoa, pszIdPessoa );
}

void  CHierarquiaDeptoPessoa::setIdOrganizacaoDepartamento( char* pszIdOrganizacaoDepartamento )
{
    strcpy( tHierarquiaDeptoPessoa.szIdOrganizacaoDepartamento, pszIdOrganizacaoDepartamento );
}

void  CHierarquiaDeptoPessoa::setDtUltimaAlteracao( char* pszDtUltimaAlteracao )
{
    strcpy( tHierarquiaDeptoPessoa.szDtUltimaAlteracao, pszDtUltimaAlteracao );
}

// Métodos de GET.

// Métodos de negócio.
/*******************************************************************************/
/*******************************************************************************/
void  CHierarquiaDeptoPessoa::atualizaHierarquiaDeptoPessoa( void )
{
    ULOG_START("CHierarquiaDeptoPessoa::atualizaHierarquiaDeptoPessoa()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdHierarquiaDeptoPessoa[ LEN_ID ];
        VARCHAR oszIdNivelCargo[ LEN_ID ];
        VARCHAR oszIdPessoa[ LEN_ID ];
        VARCHAR oszIdOrganizacaoDepartamento[ LEN_ID ];
        VARCHAR oszIdUsuarioAlteracao[ LEN_ID ];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA( oszIdHierarquiaDeptoPessoa  , tHierarquiaDeptoPessoa.szIdHierarquiaDeptoPessoa   );
    STRCPY_TO_ORA( oszIdNivelCargo             , tHierarquiaDeptoPessoa.szIdNivelCargo              );
    STRCPY_TO_ORA( oszIdPessoa                 , tHierarquiaDeptoPessoa.szIdPessoa                  );
    STRCPY_TO_ORA( oszIdOrganizacaoDepartamento, tHierarquiaDeptoPessoa.szIdOrganizacaoDepartamento );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao       , tHierarquiaDeptoPessoa.szIdUsuarioAlteracao        );

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;

    // Bloco de definição e execução do SQL.
    EXEC SQL UPDATE organograma.hierarquiadeptopessoa
                SET idhierarquiadeptopessoa    = :oszIdHierarquiaDeptoPessoa
                  , idnivelcargo               = :oszIdNivelCargo
                  , idpessoa                   = :oszIdPessoa
                  , idorganizacaodepartamento  = :oszIdOrganizacaoDepartamento
                  , idusuarioalteracao         = :oszIdUsuarioAlteracao
                  , dtultimaalteracao          = SYSDATE
              WHERE idhierarquiadeptopessoa    = :oszIdHierarquiaDeptoPessoa;
              
    ULOG_END("CHierarquiaDeptoPessoa::atualizaHierarquiaDeptoPessoa()");

    return;

    erro:
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);

}

/*******************************************************************************/
/*******************************************************************************/
void  CHierarquiaDeptoPessoa::insereHierarquiaDeptoPessoa( void )
{
    ULOG_START("CHierarquiaDeptoPessoa::insereHierarquiaDeptoPessoa()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdHierarquiaDeptoPessoa[ LEN_ID ];
        VARCHAR oszIdNivelCargo[ LEN_ID ];
        VARCHAR oszIdPessoa[ LEN_ID ];
        VARCHAR oszIdOrganizacaoDepartamento[ LEN_ID ];
        VARCHAR oszIdUsuarioAlteracao[ LEN_ID ];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA( oszIdNivelCargo             , tHierarquiaDeptoPessoa.szIdNivelCargo              );
    STRCPY_TO_ORA( oszIdPessoa                 , tHierarquiaDeptoPessoa.szIdPessoa                  );
    STRCPY_TO_ORA( oszIdOrganizacaoDepartamento, tHierarquiaDeptoPessoa.szIdOrganizacaoDepartamento );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao       , tHierarquiaDeptoPessoa.szIdUsuarioAlteracao        );

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;

    // Busca a sequence de HierarquiaDeptoPessoa
    EXEC SQL SELECT organograma.hierarquiadeptopessoasq.nextval 
               INTO :oszIdHierarquiaDeptoPessoa 
               FROM DUAL;

    // Bloco de definição e execução do SQL.
    EXEC SQL INSERT INTO organograma.hierarquiadeptopessoa
                  ( idhierarquiadeptopessoa
                  , idnivelcargo
                  , idpessoa
                  , idorganizacaodepartamento
                  , idusuarioalteracao
                  , dtultimaalteracao )
           VALUES ( :oszIdHierarquiaDeptoPessoa
                  , :oszIdNivelCargo
                  , :oszIdPessoa
                  , :oszIdOrganizacaoDepartamento
                  , :oszIdUsuarioAlteracao
                  , SYSDATE );

    ULOG_END("CHierarquiaDeptoPessoa::insereHierarquiaDeptoPessoa()");
    return;

    erro:
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);

}

/*******************************************************************************/
/*******************************************************************************/
bool  CHierarquiaDeptoPessoa::buscaIdOrganizacaoDepartamento( char* pszIdOrganizacao, char* pszIdDepartamento )
{
    ULOG_START("CHierarquiaDeptoPessoa::buscaIdOrganizacaoDepartamento()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdDepartamento[ LEN_ID ];
        VARCHAR oszIdOrganizacao[ LEN_ID ];
        VARCHAR oszIdOrganizacaoDepartamento[ LEN_ID ];

        short   osiIdOrganizacaoDepartamentoIND    = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA( oszIdOrganizacao,  pszIdOrganizacao  );
    STRCPY_TO_ORA( oszIdDepartamento, pszIdDepartamento );

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // Bloco de definição e execução do SQL.
    EXEC SQL SELECT idorganizacaodepartamento
               INTO :oszIdOrganizacaoDepartamento:osiIdOrganizacaoDepartamentoIND
               FROM organograma.organizacaodepartamento
              WHERE iddepartamento = :oszIdDepartamento
                AND idorganizacao  = :oszIdOrganizacao;

    // Copias os dados ProC para a estrutura C++.
    if( osiIdOrganizacaoDepartamentoIND  != -1 )
        STRCPY_FROM_ORA( tHierarquiaDeptoPessoa.szIdOrganizacaoDepartamento, oszIdOrganizacaoDepartamento );

    ULOG_END("CHierarquiaDeptoPessoa::buscaIdOrganizacaoDepartamento()");
    return true;

    naoexiste:
        return false;

    erro:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************/
/*******************************************************************************/
bool  CHierarquiaDeptoPessoa::buscaIdNivelCargo( char* pszIdNivel, char* pszIdCargo )
{
    ULOG_START("CHierarquiaDeptoPessoa::buscaIdNivelCargo()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdNivelCargo[ LEN_ID ];
        VARCHAR oszIdCargo[ LEN_ID ];
        VARCHAR oszIdNivel[ LEN_ID ];

        short   osiIdNivelCargoIND    = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA( oszIdNivel, pszIdNivel );
    STRCPY_TO_ORA( oszIdCargo, pszIdCargo );

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // Bloco de definição e execução do SQL.
    EXEC SQL SELECT idnivelcargo
               INTO :oszIdNivelCargo:osiIdNivelCargoIND
               FROM organograma.nivelcargo
              WHERE idcargo = :oszIdCargo
                AND idnivel = :oszIdNivel;

    // Copias os dados ProC para a estrutura C++.
    if( osiIdNivelCargoIND  != -1 )
        STRCPY_FROM_ORA( tHierarquiaDeptoPessoa.szIdNivelCargo, oszIdNivelCargo );
        
    ULOG_END("CHierarquiaDeptoPessoa::buscaIdNivelCargo()");
    
    return true;

    naoexiste:
        return false;

    erro:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************/
/*******************************************************************************/
bool  CHierarquiaDeptoPessoa::buscaPorIdPessoa( void )
{
    ULOG_END("CHierarquiaDeptoPessoa::buscaPorIdPessoa()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdHierarquiaDeptoPessoa[ LEN_ID ];
        VARCHAR oszIdPessoa[ LEN_ID ];

        short   osiIdHierarquiaDeptoPessoaIND    = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA( oszIdPessoa, tHierarquiaDeptoPessoa.szIdPessoa );

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // Bloco de definição e execução do SQL.
    EXEC SQL SELECT TO_CHAR( idhierarquiadeptopessoa )
               INTO :oszIdHierarquiaDeptoPessoa:osiIdHierarquiaDeptoPessoaIND
               FROM organograma.hierarquiadeptopessoa
              WHERE idpessoa = TO_NUMBER( :oszIdPessoa );

    // Copias os dados ProC para a estrutura C++.
    if( osiIdHierarquiaDeptoPessoaIND  != -1 )
        STRCPY_FROM_ORA( tHierarquiaDeptoPessoa.szIdHierarquiaDeptoPessoa, oszIdHierarquiaDeptoPessoa );
        
    ULOG_END("CHierarquiaDeptoPessoa::buscaPorIdPessoa()");
    return true;

    naoexiste:
        return false;

    erro:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

}


/*********************************************************************************************************************/


int CHierarquiaDeptoPessoa::Insert( 
			char* cidNivelCargo,
			char* cidPessoa,
			char* cidOrganizacaoDepartamento,
			char* cidUsuarioAlteracao )
{
    
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidHierarquiaDeptoPessoa[21+1];
		char* cAuxidNivelCargo = cidNivelCargo;
		char* cAuxidPessoa = cidPessoa;
		char* cAuxidOrganizacaoDepartamento = cidOrganizacaoDepartamento;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();
		
		memset( &cAuxidHierarquiaDeptoPessoa, 0, sizeof(cAuxidHierarquiaDeptoPessoa) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT organograma.HierarquiaDeptoPessoaSQ.NEXTVAL INTO :cAuxidHierarquiaDeptoPessoa FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO organograma.HierarquiaDeptoPessoa
		(	idHierarquiaDeptoPessoa,
			idNivelCargo,
			idPessoa,
			idOrganizacaoDepartamento,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidHierarquiaDeptoPessoa,
			:cAuxidNivelCargo,
			:cAuxidPessoa,
			:cAuxidOrganizacaoDepartamento,
			:cAuxidUsuarioAlteracao,
			SYSDATE);

        
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return -1;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::Delete( char* cidHierarquiaDeptoPessoa )
{
    ULOG_START("CHierarquiaDeptoPessoa::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidHierarquiaDeptoPessoa = cidHierarquiaDeptoPessoa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.HierarquiaDeptoPessoa
		WHERE (idHierarquiaDeptoPessoa = :cAuxidHierarquiaDeptoPessoa);
		
		ULOG_END("CHierarquiaDeptoPessoa::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return -1;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return -2292;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::RelacionaPss( char*cidPessoa, char*cNomeIdTag, char*cidUsuarioAlteracao, DOMNode*dnode )
{
    ULOG_END("CHierarquiaDeptoPessoa::RelacionaPss()");
	//Auxiliares
	int iCont;
	TuxHelper tuxHelper;
	
	//Consistencia
	if ( strlennull( cidPessoa ) <=0 )
		return -1;
	
	//Apaga todas as relacionadas ao id recebido
	ErasePss( cidPessoa );
	
	//Adiciona as novas relacoes
	for(iCont = 0;;iCont++)
	{
		
	char* cidNivelCargo = tuxHelper.walkTree(dnode,"idNivelCargo",0);
	char* cidPessoa = tuxHelper.walkTree(dnode,"idPessoa",0);
	char* cidOrganizacaoDepartamento = tuxHelper.walkTree(dnode,"idOrganizacaoDepartamento",0);

		if ((strlennull(cidNivelCargo)<=0)||(strlennull(cidPessoa)<=0)||(strlennull(cidOrganizacaoDepartamento)<=0))
			break;
		Insert(  cidNivelCargo, cidPessoa, cidOrganizacaoDepartamento, cidUsuarioAlteracao );
    }
    ULOG_END("CHierarquiaDeptoPessoa::RelacionaPss()");
	return iCont;
}
int CHierarquiaDeptoPessoa::ErasePss( char* cidPessoa ) 
{
    ULOG_START("CHierarquiaDeptoPessoa::ErasePss()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPessoa = cidPessoa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.HierarquiaDeptoPessoa
		WHERE (idPessoa = :cAuxidPessoa);
		
 	    ULOG_END("CHierarquiaDeptoPessoa::ErasePss()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return -1;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return -2292;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::RelacionaNvl( char*cidNivel, char*cNomeIdTag, char*cidUsuarioAlteracao, DOMNode*dnode )
{
    ULOG_START("CHierarquiaDeptoPessoa::RelacionaNvl()");
	//Auxiliares
	int iCont;
	TuxHelper tuxHelper;
	
	//Consistencia
	if ( strlennull( cidNivel ) <=0 )
		return -1;
	
	//Apaga todas as relacionadas ao id recebido
	EraseNvl( cidNivel );
	
	//Adiciona as novas relacoes
	for(iCont = 0;;iCont++)
	{
		
	char* cidNivelCargo = tuxHelper.walkTree(dnode,"idNivelCargo",0);
	char* cidPessoa = tuxHelper.walkTree(dnode,"idPessoa",0);
	char* cidOrganizacaoDepartamento = tuxHelper.walkTree(dnode,"idOrganizacaoDepartamento",0);

		if ((strlennull(cidNivelCargo)<=0)||(strlennull(cidPessoa)<=0)||(strlennull(cidOrganizacaoDepartamento)<=0))
			break;

		Insert(  cidNivelCargo, cidPessoa, cidOrganizacaoDepartamento, cidUsuarioAlteracao );
	}
	
    ULOG_END("CHierarquiaDeptoPessoa::RelacionaNvl()");
	return iCont;
}
int CHierarquiaDeptoPessoa::EraseNvl( char* cidNivel ) 
{
    ULOG_START("CHierarquiaDeptoPessoa::EraseNvl()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidNivel = cidNivel; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.HierarquiaDeptoPessoa
		WHERE (idNivel = :cAuxidNivel);
		
		ULOG_END("CHierarquiaDeptoPessoa::EraseNvl()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return -1;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return -2292;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::RelacionaOrg( char*cidOrganizacao, char*cNomeIdTag, char*cidUsuarioAlteracao, DOMNode*dnode )
{
    ULOG_START("CHierarquiaDeptoPessoa::RelacionaOrg()");
	//Auxiliares
	int iCont;
	TuxHelper tuxHelper;
	
	//Consistencia
	if ( strlennull( cidOrganizacao ) <=0 )
		return -1;
	
	//Apaga todas as relacionadas ao id recebido
	EraseOrg( cidOrganizacao );
	
	//Adiciona as novas relacoes
	for(iCont = 0;;iCont++)
	{
		
	char* cidNivelCargo = tuxHelper.walkTree(dnode,"idNivelCargo",0);
	char* cidPessoa = tuxHelper.walkTree(dnode,"idPessoa",0);
	char* cidOrganizacaoDepartamento = tuxHelper.walkTree(dnode,"idOrganizacaoDepartamento",0);

		if ((strlennull(cidNivelCargo)<=0)||(strlennull(cidPessoa)<=0)||(strlennull(cidOrganizacaoDepartamento)<=0))
			break;

		Insert(  cidNivelCargo, cidPessoa, cidOrganizacaoDepartamento, cidUsuarioAlteracao );
		
	}
	ULOG_END("CHierarquiaDeptoPessoa::RelacionaOrg()");
	return iCont;
}
int CHierarquiaDeptoPessoa::EraseOrg( char* cidOrganizacao )
{
    ULOG_START("CHierarquiaDeptoPessoa::EraseOrg()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidOrganizacao = cidOrganizacao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM2;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.HierarquiaDeptoPessoa
		WHERE (idOrganizacao = :cAuxidOrganizacao);
		
		ULOG_END("CHierarquiaDeptoPessoa::EraseOrg()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return -1;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM2:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return -2292;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::List( 
			char* cidHierarquiaDeptoPessoa,
			char* cidNivelCargo,
			char* cidPessoa,
			char* cidOrganizacaoDepartamento,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CHierarquiaDeptoPessoa::List()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char cAuxidHierarquiaDeptoPessoa[21+1];
			char cAuxidNivelCargo[21+1];
			char cAuxidPessoa[21+1];
			char cAuxidOrganizacaoDepartamento[21+1];
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		struct
		{
			VARCHAR stidHierarquiaDeptoPessoa[21+1];
			VARCHAR stidNivelCargo[21+1];
			VARCHAR stidPessoa[21+1];
			VARCHAR stidOrganizacaoDepartamento[21+1];
		} stHierarquiaDeptoPessoaRegistro;
		struct
		{
			short iidHierarquiaDeptoPessoa;
			short iidNivelCargo;
			short iidPessoa;
			short iidOrganizacaoDepartamento;
		} stHierarquiaDeptoPessoaIndicator;
	EXEC SQL END DECLARE SECTION;


	if ( strlennull( cidHierarquiaDeptoPessoa ) <= 0 )
		strcpy(cAuxidHierarquiaDeptoPessoa,"-1");
		else
		strcpy(cAuxidHierarquiaDeptoPessoa,cidHierarquiaDeptoPessoa);
	
	if ( strlennull( cidNivelCargo ) <= 0 )
		strcpy(cAuxidNivelCargo,"-1");
		else
		strcpy(cAuxidNivelCargo,cidNivelCargo);
	
	if ( strlennull( cidPessoa ) <= 0 )
		strcpy(cAuxidPessoa,"-1");
		else
		strcpy(cAuxidPessoa,cidPessoa);
	
	if ( strlennull( cidOrganizacaoDepartamento ) <= 0 )
		strcpy(cAuxidOrganizacaoDepartamento,"-1");
		else
		strcpy(cAuxidOrganizacaoDepartamento,cidOrganizacaoDepartamento);
	

	//Processamento Principal
	try
	{

		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os Registros
   		EXEC SQL DECLARE CursorHierarquiaDeptoPessoa CURSOR FOR 
   		SELECT 	idHierarquiaDeptoPessoa,
	            idNivelCargo,
	            idPessoa,
	            idOrganizacaoDepartamento
		FROM organograma.HierarquiaDeptoPessoa
		WHERE ( ((idHierarquiaDeptoPessoa = :cAuxidHierarquiaDeptoPessoa) OR ('-1' = :cAuxidHierarquiaDeptoPessoa))
	        AND ((idNivelCargo = :cAuxidNivelCargo) OR ('-1' = :cAuxidNivelCargo))
	        AND ((idPessoa = :cAuxidPessoa) OR ('-1' = :cAuxidPessoa))
	        AND ((idOrganizacaoDepartamento = :cAuxidOrganizacaoDepartamento) OR ('-1' = :cAuxidOrganizacaoDepartamento)) );

		// Abre o cursor
		EXEC SQL OPEN CursorHierarquiaDeptoPessoa;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CHierarquiaDeptoPessoa::List()");
			return -1;//Erro
	    }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stHierarquiaDeptoPessoaRegistro, 0, sizeof(stHierarquiaDeptoPessoaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorHierarquiaDeptoPessoa INTO :stHierarquiaDeptoPessoaRegistro:stHierarquiaDeptoPessoaIndicator;
				//Adiciona a classe
				Add( 	(char*)stHierarquiaDeptoPessoaRegistro.stidHierarquiaDeptoPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidNivelCargo.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidOrganizacaoDepartamento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorHierarquiaDeptoPessoa;
		}
		ULOG_END("CHierarquiaDeptoPessoa::List()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::ListId( char* cidHierarquiaDeptoPessoa ) 
{
    ULOG_END("CHierarquiaDeptoPessoa::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidHierarquiaDeptoPessoa = cidHierarquiaDeptoPessoa; 
		struct
		{
			VARCHAR stidHierarquiaDeptoPessoa[21+1];
			VARCHAR stidNivelCargo[21+1];
			VARCHAR stidPessoa[21+1];
			VARCHAR stidOrganizacaoDepartamento[21+1];
		} stHierarquiaDeptoPessoaRegistro;
		struct
		{
			short iidHierarquiaDeptoPessoa;
			short iidNivelCargo;
			short iidPessoa;
			short iidOrganizacaoDepartamento;
		} stHierarquiaDeptoPessoaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorHierarquiaDeptoPessoaId CURSOR FOR 
   		SELECT 	idHierarquiaDeptoPessoa,
	            idNivelCargo,
	            idPessoa,
	            idOrganizacaoDepartamento
		FROM organograma.HierarquiaDeptoPessoa
		WHERE idHierarquiaDeptoPessoa = :cAuxidHierarquiaDeptoPessoa;

		//Abre o cursor
		EXEC SQL OPEN CursorHierarquiaDeptoPessoaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CHierarquiaDeptoPessoa::ListId()");
			return -1;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stHierarquiaDeptoPessoaRegistro, 0, sizeof(stHierarquiaDeptoPessoaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorHierarquiaDeptoPessoaId INTO :stHierarquiaDeptoPessoaRegistro:stHierarquiaDeptoPessoaIndicator;
				//Adiciona a classe
				Add( 	(char*)stHierarquiaDeptoPessoaRegistro.stidHierarquiaDeptoPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidNivelCargo.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidOrganizacaoDepartamento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorHierarquiaDeptoPessoaId;
		}
		ULOG_END("CHierarquiaDeptoPessoa::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHierarquiaDeptoPessoa::ListAll( void )
{
    ULOG_START("CHierarquiaDeptoPessoa::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidHierarquiaDeptoPessoa[21+1];
			VARCHAR stidNivelCargo[21+1];
			VARCHAR stidPessoa[21+1];
			VARCHAR stidOrganizacaoDepartamento[21+1];
		} stHierarquiaDeptoPessoaRegistro;
		struct
		{
			short iidHierarquiaDeptoPessoa;
			short iidNivelCargo;
			short iidPessoa;
			short iidOrganizacaoDepartamento;
		} stHierarquiaDeptoPessoaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHierarquiaDeptoPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorHierarquiaDeptoPessoaAll CURSOR FOR
   		SELECT 	idHierarquiaDeptoPessoa,
		idNivelCargo,
		idPessoa,
		idOrganizacaoDepartamento
		FROM organograma.HierarquiaDeptoPessoa; 

		//Abre o cursor
		EXEC SQL OPEN CursorHierarquiaDeptoPessoaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CHierarquiaDeptoPessoa::ListAll()");
			return -1;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stHierarquiaDeptoPessoaRegistro, 0, sizeof(stHierarquiaDeptoPessoaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorHierarquiaDeptoPessoaAll INTO :stHierarquiaDeptoPessoaRegistro:stHierarquiaDeptoPessoaIndicator;
				//Adiciona a classe
				Add( 	(char*)stHierarquiaDeptoPessoaRegistro.stidHierarquiaDeptoPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidNivelCargo.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidPessoa.arr,
				(char*)stHierarquiaDeptoPessoaRegistro.stidOrganizacaoDepartamento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorHierarquiaDeptoPessoaAll;
		}
		ULOG_END("CHierarquiaDeptoPessoa::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CHierarquiaDeptoPessoa::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idHierarquiaDeptoPessoa", Registro(x)->cidHierarquiaDeptoPessoa );
				xml->addItem("idNivelCargo", Registro(x)->cidNivelCargo );
				xml->addItem("idPessoa", Registro(x)->cidPessoa );
				xml->addItem("idOrganizacaoDepartamento", Registro(x)->cidOrganizacaoDepartamento ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

void CHierarquiaDeptoPessoa::GetXml( char* cNomeTagArray, char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Caso nao tenha recebido uma tag padrao, deixa sem
		if( strlennull( cNomeTagArray ) > 0 ) {
			xml->createTag(cNomeTagArray);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
		}
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 ) {
				xml->createTag(cNomeTag);
				//Adiciona a propriedade necessaria para o xml
				xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idHierarquiaDeptoPessoa", Registro(x)->cidHierarquiaDeptoPessoa );
				xml->addItem("idNivelCargo", Registro(x)->cidNivelCargo );
				xml->addItem("idPessoa", Registro(x)->cidPessoa );
				xml->addItem("idOrganizacaoDepartamento", Registro(x)->cidOrganizacaoDepartamento ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
		//So fecha um tag se abriu anteriormente
		if( strlennull( cNomeTagArray ) > 0 )
			xml->closeTag();
	}
}
