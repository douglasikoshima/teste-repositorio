#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CAvs.h"

CMensagemAviso::CMensagemAviso()
{
}

CMensagemAviso::~CMensagemAviso()
{
}

int CMensagemAviso::Insert(
			char* cdsMensagemAviso,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CMensagemAviso::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR stidMensagemAviso[21+1];
		VARCHAR stdsMensagemAviso[255+1];
		char* cAuxdsMensagemAviso = cdsMensagemAviso;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMensagemAviso();

		memset( &stidMensagemAviso, 0, sizeof(stidMensagemAviso) );
		memset( &stdsMensagemAviso, 0, sizeof(stdsMensagemAviso) );

		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;

		//Antes de inserir, verifica se já existe a mensagem
		EXEC SQL
			SELECT
				IDMENSAGEMAVISO
			   ,DSMENSAGEMAVISO
			INTO
				:stidMensagemAviso
			   ,:stdsMensagemAviso
			FROM
				CONTATOADM.MENSAGEMAVISO
			WHERE
				UPPER(DSMENSAGEMAVISO) = UPPER(:cAuxdsMensagemAviso);

		if( stidMensagemAviso.len <= 0 )
		{
			//Pega um id unico e sequencia para a insercao
			EXEC SQL SELECT CONTATOADM.MENSAGEMAVISOSQ.NEXTVAL INTO :stidMensagemAviso FROM DUAL;

			//Realiza o insert
			EXEC SQL INSERT INTO CONTATOADM.MENSAGEMAVISO
			(	IDMENSAGEMAVISO,
				DSMENSAGEMAVISO,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO)
			VALUES
			(	:stidMensagemAviso,
				:cAuxdsMensagemAviso,
				:cAuxidUsuarioAlteracao,
				SYSDATE);
		}//if( stidMensagemAviso.len <= 0 )
		else
		{
			cAuxdsMensagemAviso = (char*)stdsMensagemAviso.arr;
		}//else if( stidMensagemAviso.len <= 0 )


		Add( (char*)stidMensagemAviso.arr,
		     cAuxdsMensagemAviso );

		ULOG_END("CMensagemAviso::Insert()");

		return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CMensagemAviso::Update(
			char* cidMensagemAviso,
			char* cdsMensagemAviso,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CMensagemAviso::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;

			char* cAuxidMensagemAviso = cidMensagemAviso;
			char* cAuxdsMensagemAviso = cdsMensagemAviso;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;

		//Executa a instrucao de update
		EXEC SQL
		UPDATE contatoadm.MensagemAviso
		SET 	dsMensagemAviso = :cAuxdsMensagemAviso,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idMensagemAviso = :cAuxidMensagemAviso;

		ULOG_END("CMensagemAviso::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CMensagemAviso::Delete( char* cidMensagemAviso )
{
    ULOG_START("CMensagemAviso::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidMensagemAviso = cidMensagemAviso;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;

		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.MensagemAviso
		WHERE (idMensagemAviso = :cAuxidMensagemAviso);

		ULOG_END("CMensagemAviso::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CMensagemAviso::ListId( char* cidMensagemAviso )
{
    ULOG_START("CMensagemAviso::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidMensagemAviso = cidMensagemAviso;
		struct
		{
			VARCHAR stidMensagemAviso[21+1];
			VARCHAR stdsMensagemAviso[255+1];
		} stMensagemAvisoRegistro;
		struct
		{
			short iidMensagemAviso;
			short idsMensagemAviso;
		} stMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorMensagemAvisoId CURSOR FOR
   			SELECT
					IDMENSAGEMAVISO,
					DSMENSAGEMAVISO
				FROM
					CONTATOADM.MENSAGEMAVISO
				WHERE
					IDMENSAGEMAVISO = :cAuxidMensagemAviso
				ORDER BY
					DSMENSAGEMAVISO;

		//Abre o cursor
		EXEC SQL OPEN CursorMensagemAvisoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stMensagemAvisoRegistro, 0, sizeof(stMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorMensagemAvisoId INTO :stMensagemAvisoRegistro:stMensagemAvisoIndicator;
				//Adiciona a classe
				Add( (char*)stMensagemAvisoRegistro.stidMensagemAviso.arr,
				     (char*)stMensagemAvisoRegistro.stdsMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorMensagemAvisoId;
		}
		//Retorna a quantidade de registros
		ULOG_END("CMensagemAviso::ListId()");
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CMensagemAviso::ListAll( void )
{
    ULOG_START("CMensagemAviso::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidMensagemAviso[21+1];
			VARCHAR stdsMensagemAviso[255+1];
		} stMensagemAvisoRegistro;
		struct
		{
			short iidMensagemAviso;
			short idsMensagemAviso;
		} stMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorMensagemAvisoAll CURSOR FOR
   			SELECT
					IDMENSAGEMAVISO,
					DSMENSAGEMAVISO
				FROM
					CONTATOADM.MENSAGEMAVISO
				ORDER BY
					DSMENSAGEMAVISO;

		//Abre o cursor
		EXEC SQL OPEN CursorMensagemAvisoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stMensagemAvisoRegistro, 0, sizeof(stMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorMensagemAvisoAll INTO :stMensagemAvisoRegistro:stMensagemAvisoIndicator;
				//Adiciona a classe
				Add( 	(char*)stMensagemAvisoRegistro.stidMensagemAviso.arr,
				(char*)stMensagemAvisoRegistro.stdsMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorMensagemAvisoAll;
		}
		ULOG_END("CMensagemAviso::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CMensagemAviso::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{
				//Adiciona as tags necessarias
				xml->addItem("idMensagemAviso", Registro(x)->cidMensagemAviso );
				xml->addItem("dsMensagemAviso", Registro(x)->cdsMensagemAviso );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
