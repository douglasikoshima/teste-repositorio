#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CNvl.h"

CNivel::CNivel()
{
}

CNivel::~CNivel()
{
}

int CNivel::Insert( 
					char* cdsNivel,
					char* cidUsuarioAlteracao )
{
    ULOG_START("CNivel::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidNivel[21+1];
		int iCont = 0;
		char* cAuxdsNivel = cdsNivel;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;

		int	iIdNivel = 0;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		EXEC SQL SELECT	COUNT(dsNivel) 
		INTO :iCont 
		FROM organograma.Nivel
		WHERE UPPER(dsNivel) = UPPER(TRIM(:cAuxdsNivel));
		if( iCont > 0 )
		{
		   ULOG_END("CNivel::Insert()");
			return -1;//Ja exite
		}

		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT organograma.NivelSQ.NEXTVAL INTO :cAuxidNivel FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO organograma.Nivel
		(	idNivel,
			dsNivel,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidNivel,
			TRIM(:cAuxdsNivel),
			:cAuxidUsuarioAlteracao,
			SYSDATE);

		cAuxidNivel.arr[cAuxidNivel.len] = 0;
		Add( (char*)cAuxidNivel.arr
			,""
			,""
			,""
			,0 );

        ULOG_END("CNivel::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNivel::RelacaoNC( char* cid, char* cNomeIdTag, char* cNomeTag, char* cNomeTagAssociadasExterna, char* cNomeTagAssociadas, char* cNomeTagExistentesExterna, char* cNomeTagExistentes, XMLGen*xml )
{
	//Reader
	xml->createTag( cNomeTag );
	xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );

	//Consistencia	
	if( strlennull( cid ) <= 0 )
		return 0; //Retorno com erro

	//Registros
	xml->addItem( cNomeIdTag, cid );
	
	//Outros itens
	
	//Associados
	RelacaoNC( cid );
	GetXml( cNomeTagAssociadasExterna, cNomeTagAssociadas, xml );
	
	//Existentes
	ExistemNC( cid );
	GetXml( cNomeTagExistentesExterna, cNomeTagExistentes, xml );
	
	//Reader
	xml->closeTag();

	//Retorno com sucesso
	return 1;
}
int CNivel::RelacaoNC( char* cidCargo )
{
    ULOG_START("CNivel::RelacaoNC()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidCargo = cidCargo; 
		struct
		{
			VARCHAR stidNivel[21+1];
			VARCHAR stdsNivel[255+1];
		} stNivelRegistro;
		struct
		{
			short iidNivel;
			short idsNivel;
		} stNivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraNivel();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros

/*   		SELECT organograma.Nivel.idNivel, organograma.Nivel.dsNivel 
		FROM organograma.Nivel, organograma.NivelCargoBZEROUM
		WHERE	organograma.Nivel.idNivel = organograma.NivelCargoBZEROUM.idNivel AND 
				organograma.NivelCargoBZEROUM.idCargo = :cAuxidCargo
		ORDER BY upper(trim(organograma.Nivel.dsNivel));*/

	/*REMOVENDO BZEROUM
	 TCOSTA 18/06/2007 MPOG
	*/

	EXEC SQL DECLARE CursorNivelRelacao_00 CURSOR FOR
		SELECT
            NIVEL.IDNIVEL, 
            NIVEL.DSNIVEL 
		FROM
            ORGANOGRAMA.NIVEL NIVEL,
            ORGANOGRAMA.NIVELCARGO NIVELCARGO
		WHERE
            NIVEL.IDNIVEL = NIVELCARGO.IDNIVEL 
		AND	NIVELCARGO.IDCARGO = :cAuxidCargo
		ORDER BY 
            UPPER(TRIM(NIVEL.DSNIVEL));

    EXEC SQL WHENEVER SQLERROR GOTO GotoRelacao;

		EXEC SQL OPEN CursorNivelRelacao_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNivel::RelacaoNC()");
			return -1;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNivelRelacao_00 INTO :stNivelRegistro:stNivelIndicator;
				//Adiciona a classe
				Add( 	(char*)stNivelRegistro.stidNivel.arr,
				"",
				(char*)stNivelRegistro.stdsNivel.arr,
				"",
				0);

				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorNivelRelacao_00;
		}
		ULOG_END("CNivel::RelacaoNC()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoRelacao:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CNivel::ExistemNC( char* cidCargo )
{
    ULOG_START("CNivel::ExistemNC()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidCargo = cidCargo; 
		struct
		{
			VARCHAR stidNivel[21+1];
			VARCHAR stdsNivel[255+1];
		} stNivelRegistro;
		struct
		{
			short iidNivel;
			short idsNivel;
		} stNivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraNivel();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros

/*   		SELECT organograma.Nivel.idNivel, organograma.Nivel.dsNivel 
		FROM organograma.Nivel
		WHERE organograma.Nivel.idNivel 
			NOT IN ( SELECT organograma.Nivel.idNivel 
						FROM organograma.Nivel, organograma.NivelCargoBZEROUM 
						WHERE organograma.Nivel.idNivel = organograma.NivelCargoBZEROUM.idNivel
						AND organograma.NivelCargoBZEROUM.idCargo = :cAuxidCargo)
		ORDER BY upper(trim(organograma.Nivel.dsNivel));*/

	/*REMOVENDO BZEROUM
	 TCOSTA 18/06/2007 MPOG
	*/
   		EXEC SQL DECLARE CursorNivelExistem_00 CURSOR FOR 
		SELECT organograma.Nivel.idNivel, 
			   organograma.Nivel.dsNivel 
		FROM   organograma.Nivel
		WHERE  organograma.Nivel.idNivel NOT IN ( SELECT idnivel FROM organograma.NivelCargo 
													 WHERE idCargo = :cAuxidCargo)
		ORDER BY UPPER(trim(organograma.Nivel.dsNivel));

		EXEC SQL WHENEVER SQLERROR GOTO GotoExistem;

		EXEC SQL OPEN CursorNivelExistem_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNivel::ExistemNC()");
			return -1;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNivelExistem_00 INTO :stNivelRegistro:stNivelIndicator;
				//Adiciona a classe
				Add( 	(char*)stNivelRegistro.stidNivel.arr,
						"",
						(char*)stNivelRegistro.stdsNivel.arr, 
						"",
						0);

				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorNivelExistem_00;
		}
		ULOG_END("CNivel::ExistemNC()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoExistem:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CNivel::Update( 
					char* cidNivel,
					char* cdsNivel,
					char* cidUsuarioAlteracao )
{
    ULOG_START("CNivel::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNivel = cidNivel;
		char* cAuxdsNivel = cdsNivel;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		int iCont = 0;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;

		EXEC SQL SELECT	COUNT(dsNivel) 
		INTO :iCont 
		FROM organograma.Nivel
		WHERE TRIM(UPPER(dsNivel)) = TRIM(UPPER(:cAuxdsNivel))
		AND idNivel != :cAuxidNivel;

		if( iCont > 0 )
		{
		    ULOG_END("CNivel::Update()");
			return -1;//Ja exite
		}

		//Executa a instrucao de update
		EXEC SQL 
		UPDATE organograma.Nivel
		SET
				dsNivel = TRIM(:cAuxdsNivel),
				idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
				dtUltimaAlteracao = SYSDATE
		WHERE 	idNivel = :cAuxidNivel;   
		
		ULOG_END("CNivel::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
		
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CNivel::Delete( char* cidNivel )
{
    ULOG_START("CNivel::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidNivel = cidNivel; 
		int	iCont = 0;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		EXEC SQL SELECT COUNT( idNivel )
		INTO :iCont
		FROM organograma.NivelCargo
		WHERE idNivel = :cAuxidNivel;
				
		//Caso existe esta relacao, deve-se remover os relacionamentos antes
		if( iCont > 0 )
		{
			SetErro( "Nivel relacionada com Cargo, primeiro apague a relação para depois apagar este item" );
			ULOG_END("CNivel::Delete()");
			return -1;
		}
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.Nivel
		WHERE (idNivel = :cAuxidNivel);
		
		ULOG_END("CNivel::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return sqlca.sqlcode;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CNivel::ListId( char* cidNivel ) 
{
    ULOG_END("CNivel::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNivel = cidNivel; 
		struct
		{
			VARCHAR stidNivel[21+1];
			VARCHAR stidNivelPai[21+1];
			VARCHAR stdsNivel[255+1];
			int     iLevel;
		} stNivelRegistro;
		struct
		{
			short iidNivel;
			short idsNivel;
		} stNivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorNivelId CURSOR FOR 
   		//SELECT 	idNivel, dsNivel
			SELECT 		idNivel,
		   		        0 idNivelPAI,			            
			            dsNivel,
			            0 ILEVEL
		FROM organograma.Nivel
		WHERE idNivel = :cAuxidNivel;

		//Abre o cursor
		EXEC SQL OPEN CursorNivelId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNivel::ListId()");
			return sqlca.sqlcode;//Retorna codigo Oracle 
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNivelId INTO :stNivelRegistro:stNivelIndicator;
				//Adiciona a classe
				Add( 	(char*)stNivelRegistro.stidNivel.arr,
						(char*)stNivelRegistro.stidNivelPai.arr,
						(char*)stNivelRegistro.stdsNivel.arr,
						""
						,stNivelRegistro.iLevel );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorNivelId;
		}
		ULOG_END("CNivel::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE("ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CNivel::ListAll( void )
{
    ULOG_START("CNivel::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidNivel;
		struct
		{
			VARCHAR stidNivel[21+1];
			VARCHAR stidNivelPai[21+1];
			VARCHAR stdsNivel[255+1];
			int     iLevel;
			VARCHAR stdsPath[1024+1];
		} stNivelRegistro;
		struct
		{
			short iidNivel;
			short iidNivelPai;
			short idsNivel;
			short iLevel;
			short idsPath;
		} stNivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();
		memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Retorna a raiz da arvore de Nivel
   		/*SELECT Nivel.idNivel,
   			0 idNivelPAI,
		        Nivel.dsNivel,
		        0 ILEVEL,
		        '' PATH
		INTO :stNivelRegistro:stNivelIndicator
		FROM organograma.NivelBZEROUM Nivel
		WHERE Nivel.idNivel 
		   NOT IN ( SELECT Hierarquia.idNivel
		            FROM organograma.NivelHierarquia Hierarquia
		            WHERE Hierarquia.idNivel > 0 )
             	AND ROWNUM <= 1;*/

	/*REMOVENDO BZEROUM
	 TCOSTA 18/06/2007 MPOG
	*/

	EXEC SQL 
		SELECT Nivel.idNivel,
			   0 idNivelPAI,
			   Nivel.dsNivel,
			   0 ILEVEL,
			  '' PATH
		INTO :stNivelRegistro:stNivelIndicator
		FROM organograma.Nivel Nivel
		WHERE Nivel.idNivel  NOT IN ( SELECT Hierarquia.idNivel  FROM organograma.NivelHierarquia Hierarquia
									  WHERE Hierarquia.idNivel > 0 )
		AND ROWNUM <= 1;	

		if(sqlca.sqlcode)
		{
			SetErro( "Não existe uma raiz para árvore de Nível" );
			ULOG_END("CNivel::ListAll()");
			return sqlca.sqlcode;//Erro
		}
		else
			Add( (char*)stNivelRegistro.stidNivel.arr
			    ,(char*)stNivelRegistro.stidNivelPai.arr
			    ,(char*)stNivelRegistro.stdsNivel.arr
				,(char*)stNivelRegistro.stdsPath.arr
			    ,stNivelRegistro.iLevel );
			    
		cidNivel = Registro(0)->cidNivel;
		
		//Declara um cursor para listar todos os registros
   		EXEC SQL 
   			DECLARE CursorListAll CURSOR FOR 
			    SELECT Hierarquia.idNivel
			    	  ,Hierarquia.idNivelPai
			    	  ,Hierarquia.dsNivel dsNivel
			    	  ,LEVEL
		              ,SYS_CONNECT_BY_PATH(REPLACE(Hierarquia.dsNivel, '/', '\'), '/') PATH
			      FROM organograma.NivelHierarquiaV01 Hierarquia
			START WITH Hierarquia.idNivelPai = :cidNivel
			CONNECT BY Hierarquia.idNivelPai = PRIOR Hierarquia.idNivel;

		//Abre o cursor
		EXEC SQL OPEN CursorListAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNivel::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListAll INTO :stNivelRegistro:stNivelIndicator;
				//Adiciona a classe
				Add( (char*)stNivelRegistro.stidNivel.arr
				    ,(char*)stNivelRegistro.stidNivelPai.arr
				    ,(char*)stNivelRegistro.stdsNivel.arr
		            ,(char*)stNivelRegistro.stdsPath.arr
				    ,stNivelRegistro.iLevel );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorListAll;
		}
		ULOG_END("CNivel::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

/* Criacao: 11/09/2004 - JSM */
int CNivel::ListarTodosNivelOrganograma( void )
{
    ULOG_START("CNivel::ListarTodosNivelOrganograma()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidNivel[21+1];
			VARCHAR stidNivelPai[21+1];
			VARCHAR stdsNivel[255+1];
		} stNivelRegistro;
		struct
		{
			short iidNivel;
			short iidNivelPai;
			short idsNivel;
		} stNivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListarTodosNivelOrganograma;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
        // Bloco de definição e execução do SQL.
   		EXEC SQL DECLARE cNivelOrganograma CURSOR FOR
             SELECT nivel.idnivel
                  , nivelhierarquia.idnivelpai
                  , nivel.dsnivel
               FROM organograma.nivel nivel
                  , organograma.nivelhierarquia nivelhierarquia
              WHERE nivelhierarquia.idnivel = nivel.idnivel
			 ORDER BY UPPER(TRIM(nivel.dsnivel));

		//Abre o cursor
		EXEC SQL OPEN cNivelOrganograma;

		//Verifica se nao houve erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNivel::ListarTodosNivelOrganograma()");
			return -1;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;

			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNivelRegistro, 0, sizeof(stNivelRegistro) );

				//Pega um registro no CURSOR
				EXEC SQL FETCH cNivelOrganograma INTO :stNivelRegistro:stNivelIndicator;

				//Adiciona a classe
				Add( (char*)stNivelRegistro.stidNivel.arr,
                     (char*)stNivelRegistro.stidNivelPai.arr,
				     (char*)stNivelRegistro.stdsNivel.arr,
					  "",0);

				//conta quantos existem
				iCont++;
			}

			//Fecha o cursor
			EXEC SQL CLOSE cNivelOrganograma;
		}
		
        ULOG_END("CNivel::ListarTodosNivelOrganograma()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListarTodosNivelOrganograma:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}


void CNivel::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idNivel", Registro(x)->cidNivel );
				xml->addItem("dsNivel", Registro(x)->cdsNivel ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

void CNivel::GetXml2(char* cNomeTagArray,  char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Caso nao tenha recebido uma tag padrao, deixa sem
		if( strlennull( cNomeTagArray ) > 0 ) {
			xml->createTag(cNomeTagArray);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
		}

		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idNivel", Registro(x)->cidNivel );
				xml->addItem("dsNivel", Registro(x)->cdsNivel ); 
				xml->addItem("idNivelPai", Registro(x)->cidNivelPai );
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
		//So fecha um tag se abriu anteriormente
		if( strlennull( cNomeTagArray ) > 0 )
			xml->closeTag();
	}
}


void CNivel::GetXml( char* cNomeTagArray, char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() >= 0 )
	{
		//Caso nao tenha recebido uma tag padrao, deixa sem
		if( strlennull( cNomeTagArray ) > 0 ) {
			xml->createTag(cNomeTagArray);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
		}
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 ) {
				xml->createTag(cNomeTag);
				//Adiciona a propriedade necessaria para o xml
				xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idNivel", Registro(x)->cidNivel );
				xml->addItem("dsNivel", Registro(x)->cdsNivel ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
		//So fecha um tag se abriu anteriormente
		if( strlennull( cNomeTagArray ) > 0 )
			xml->closeTag();
	}
}
