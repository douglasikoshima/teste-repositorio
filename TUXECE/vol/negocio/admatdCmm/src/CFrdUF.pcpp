#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFrdUF.h"

CUFFeriado::CUFFeriado()
{
}

CUFFeriado::~CUFFeriado()
{
}

int CUFFeriado::Insert( 
			char* cidUF,
			char* cidFeriado,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CUFFeriado::Insert()");        
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidUFFeriado[21+1];
		char* cAuxidUF = cidUF;
		char* cAuxidFeriado = cidFeriado;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();
		
		memset( &cAuxidUFFeriado, 0, sizeof(cAuxidUFFeriado) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL 
			SELECT 
				CALENDARIO.UFFERIADOSQ.NEXTVAL 
			INTO 
				:cAuxidUFFeriado 
			FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO CALENDARIO.UFFERIADO
		(	IDUFFERIADO,
			IDUF,
			IDFERIADO,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO) 
		VALUES 
		(	:cAuxidUFFeriado,
			:cAuxidUF,
			:cAuxidFeriado,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CUFFeriado::Insert()");        
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUFFeriado::Delete( char* cidUFFeriado )
{
    ULOG_START("CUFFeriado::Delete()");        
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidUFFeriado = cidUFFeriado; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM calendario.UFFeriado
		WHERE (idUFFeriado = :cAuxidUFFeriado);
		
		ULOG_END("CUFFeriado::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUFFeriado::EraseFrd( char* cidFeriado ) 
{
    ULOG_START("CUFFeriado::EraseFrd()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidFeriado = cidFeriado; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoEraseFrd;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM CALENDARIO.UFFERIADO
		WHERE 
			idFeriado = :cAuxidFeriado;
			
		ULOG_END("CUFFeriado::EraseFrd()");
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoEraseFrd:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUFFeriado::EraseUF( char* cidUF ) 
{
    ULOG_START("CUFFeriado::EraseUF()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidUF = cidUF; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM calendario.UFFeriado
		WHERE (idUF = :cAuxidUF);
		
		ULOG_END("CUFFeriado::EraseUF()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUFFeriado::ListId( char* cidUFFeriado ) 
{
    ULOG_START("CUFFeriado::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidUFFeriado = cidUFFeriado; 
		struct
		{
			VARCHAR stidUFFeriado[21+1];
			VARCHAR stidUF[21+1];
			VARCHAR stidFeriado[21+1];
		} stUFFeriadoRegistro;
		struct
		{
			short iidUFFeriado;
			short iidUF;
			short iidFeriado;
		} stUFFeriadoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorUFFeriadoId CURSOR FOR 
   		SELECT 	idUFFeriado,
	            idUF,
	            idFeriado
		FROM calendario.UFFeriado
		WHERE idUFFeriado = :cAuxidUFFeriado;

		//Abre o cursor
		EXEC SQL OPEN CursorUFFeriadoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CUFFeriado::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFFeriadoRegistro, 0, sizeof(stUFFeriadoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFFeriadoId INTO :stUFFeriadoRegistro:stUFFeriadoIndicator;
				//Adiciona a classe
				Add( 	(char*)stUFFeriadoRegistro.stidUFFeriado.arr,
				(char*)stUFFeriadoRegistro.stidUF.arr,
				(char*)stUFFeriadoRegistro.stidFeriado.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorUFFeriadoId;
		}
		ULOG_END("CUFFeriado::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUFFeriado::ListAll( void )
{
    ULOG_START("CUFFeriado::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidUFFeriado[21+1];
			VARCHAR stidUF[21+1];
			VARCHAR stidFeriado[21+1];
		} stUFFeriadoRegistro;
		struct
		{
			short iidUFFeriado;
			short iidUF;
			short iidFeriado;
		} stUFFeriadoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUFFeriado();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorUFFeriadoAll CURSOR FOR
   		SELECT 	idUFFeriado,
		idUF,
		idFeriado
		FROM calendario.UFFeriado; 

		//Abre o cursor
		EXEC SQL OPEN CursorUFFeriadoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CUFFeriado::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFFeriadoRegistro, 0, sizeof(stUFFeriadoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFFeriadoAll INTO :stUFFeriadoRegistro:stUFFeriadoIndicator;
				//Adiciona a classe
				Add( 	(char*)stUFFeriadoRegistro.stidUFFeriado.arr,
				(char*)stUFFeriadoRegistro.stidUF.arr,
				(char*)stUFFeriadoRegistro.stidFeriado.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorUFFeriadoAll;
		}
		ULOG_END("CUFFeriado::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CUFFeriado::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idUFFeriado", Registro(x)->cidUFFeriado );
				xml->addItem("idUF", Registro(x)->cidUF );
				xml->addItem("idFeriado", Registro(x)->cidFeriado ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
