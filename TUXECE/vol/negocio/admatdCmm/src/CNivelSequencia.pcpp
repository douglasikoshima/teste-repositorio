#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CNivelSequencia.h"

CNivelSequencia::CNivelSequencia()
{
}

CNivelSequencia::~CNivelSequencia()
{
}

int CNivelSequencia::Insert( 
								char* cidSequenciaMandatoria,
								char* cidSequencia,
								char* cnrNivel,
								char* csqOrdem,
								char* cidUsuarioAlteracao
							 )
{
    ULOG_START("CNivelSequencia::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSequenciaMandatoria = cidSequenciaMandatoria;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		char* cAuxidSequencia = cidSequencia;
		char* cAuxsqOrdem = csqOrdem;
		char* cAuxnrNivel = cnrNivel;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL 
			INSERT INTO CONTATOADM.NIVELSEQUENCIA
			(	IDNIVELSEQUENCIA,
				IDSEQUENCIAMANDATORIA,
				IDSEQUENCIA,
				NRNIVEL,
				SQORDEM,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES 
			(	CONTATOADM.NIVELSEQUENCIASQ.NEXTVAL,
				:cAuxidSequenciaMandatoria,
				:cAuxidSequencia,
				:cAuxnrNivel,
				:cAuxsqOrdem,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
			
        ULOG_END("CNivelSequencia::Insert()");
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNivelSequencia::Update( 
								char* cidNivelSequencia,
								char* cidSequenciaMandatoria,
								char* cidSequencia,
								char* cnrNivel,
								char* csqOrdem,
								char* cidUsuarioAlteracao 
							 )
{
    ULOG_START("CNivelSequencia::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNivelSequencia = cidNivelSequencia;
		char* cAuxidSequenciaMandatoria = cidSequenciaMandatoria;
		char* cAuxidSequencia = cidSequencia;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		char* cAuxsqOrdem = csqOrdem;
		char* cAuxnrNivel = cnrNivel;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE CONTATOADM.NIVELSEQUENCIA
			SET
				IDSEQUENCIAMANDATORIA = :cAuxidSequenciaMandatoria,
				IDSEQUENCIA = :cAuxidSequencia,
				NRNIVEL = :cAuxnrNivel,
				SQORDEM = :cAuxsqOrdem,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDNIVELSEQUENCIA = :cAuxidNivelSequencia;
		ULOG_END("CNivelSequencia::Update()");
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNivelSequencia::Delete( char* cidNivelSequencia )
{
    ULOG_START("CNivelSequencia::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidNivelSequencia = cidNivelSequencia; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.NIVELSEQUENCIA
			WHERE 
				IDNIVELSEQUENCIA = :cAuxidNivelSequencia;
				
		ULOG_END("CNivelSequencia::Delete()");
		
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if( sqlca.sqlcode == -2292 )
		return 1;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
}

int CNivelSequencia::ListId( char* cidNivelSequencia ) 
{
    ULOG_START("CNivelSequencia::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNivelSequencia = cidNivelSequencia; 
		struct
		{
			VARCHAR stidNivelSequencia[21+1];
			VARCHAR stidSequenciaMandatoria[21+1];
			VARCHAR stidSequencia[21+1];
			VARCHAR stnrNivel[21+1];
			VARCHAR stsqOrdem[21+1];
		} stNivelSequenciaRegistro;
		struct
		{
			short iidNivelSequencia;
			short iidSequenciaMandatoria;
			short iidSequencia;
			short inrNivel;
			short isqOrdem;
		} stNivelSequenciaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorNivelSequenciaId CURSOR FOR 
   			SELECT 	
   				IDNIVELSEQUENCIA,
				IDSEQUENCIAMANDATORIA,
				IDSEQUENCIA,
				NRNIVEL,
				SQORDEM
			FROM 
				CONTATOADM.NIVELSEQUENCIA
			WHERE 
				IDNIVELSEQUENCIA = :cAuxidNivelSequencia;

		//Abre o cursor
		EXEC SQL OPEN CursorNivelSequenciaId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stNivelSequenciaRegistro, 0, sizeof(stNivelSequenciaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorNivelSequenciaId INTO :stNivelSequenciaRegistro:stNivelSequenciaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stNivelSequenciaRegistro.stidNivelSequencia.arr,
				(char*)stNivelSequenciaRegistro.stidSequenciaMandatoria.arr, 
				(char*)stNivelSequenciaRegistro.stidSequencia.arr,
				(char*)stNivelSequenciaRegistro.stnrNivel.arr,
				(char*)stNivelSequenciaRegistro.stsqOrdem.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorNivelSequenciaId;
		
		ULOG_END("CNivelSequencia::ListId()");

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CNivelSequencia::ListAll( void )
{
    ULOG_START("CNivelSequencia::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidNivelSequencia[21+1];
			VARCHAR stidSequenciaMandatoria[21+1];
			VARCHAR stidSequencia[21+1];
			VARCHAR stnrNivel[21+1];
			VARCHAR stsqOrdem[21+1];
		} stNivelSequenciaRegistro;
		struct
		{
			short iidNivelSequencia;
			short iidSequenciaMandatoria;
			short iidSequencia;
			short inrNivel;
			short isqOrdem;
		} stNivelSequenciaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorNivelSequenciaAll CURSOR FOR
   			SELECT 	
   				IDNIVELSEQUENCIA,
				IDSEQUENCIAMANDATORIA,
				IDSEQUENCIA,
				NRNIVEL,
				SQORDEM
			FROM 
				CONTATOADM.NIVELSEQUENCIA
			WHERE
				IDNIVELSEQUENCIA > 0; 

		//Abre o cursor
		EXEC SQL OPEN CursorNivelSequenciaAll;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stNivelSequenciaRegistro, 0, sizeof(stNivelSequenciaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorNivelSequenciaAll INTO :stNivelSequenciaRegistro:stNivelSequenciaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stNivelSequenciaRegistro.stidNivelSequencia.arr,
				(char*)stNivelSequenciaRegistro.stidSequenciaMandatoria.arr, 
				(char*)stNivelSequenciaRegistro.stidSequencia.arr,
				(char*)stNivelSequenciaRegistro.stnrNivel.arr,
				(char*)stNivelSequenciaRegistro.stsqOrdem.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o cursor
		EXEC SQL CLOSE CursorNivelSequenciaAll;
		
		ULOG_END("CNivelSequencia::ListAll()");
		
	}
	catch(...)
	{
		throw;
	}
	//Retorna a quantidade de registros
	return iCont;

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CNivelSequencia::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idNivelSequencia", Registro(x)->cidNivelSequencia );
				xml->addItem("idSequenciaMandatoria", Registro(x)->cidSequenciaMandatoria ); 
				xml->addItem("idSequencia", Registro(x)->cidSequencia ); 
				xml->addItem("nrNivel", Registro(x)->cnrNivel ); 
				xml->addItem("sqOrdem", Registro(x)->csqOrdem ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CNivelSequencia::RelacaoPoridSequenciaMandatoria( char* cidSequenciaMandatoria ) 
{
    ULOG_START("CNivelSequencia::RelacaoPoridSequenciaMandatoria()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSequenciaMandatoria = cidSequenciaMandatoria; 
		struct
		{
			VARCHAR stidNivelSequencia[21+1];
			VARCHAR stidSequenciaMandatoria[21+1];
			VARCHAR stidSequencia[21+1];
			VARCHAR stnrNivel[21+1];
			VARCHAR stsqOrdem[21+1];
		} stNivelSequenciaRegistro;
		struct
		{
			short iidNivelSequencia;
			short iidSequenciaMandatoria;
			short iidSequencia;
			short inrNivel;
			short isqOrdem;
		} stNivelSequenciaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNivelSequencia();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacaoPoridSequenciaMandatoria;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorRelacaoPoridSequenciaMandatoria CURSOR FOR 
   			SELECT 	
   				IDNIVELSEQUENCIA,
				IDSEQUENCIAMANDATORIA,
				IDSEQUENCIA,
				NRNIVEL,
				SQORDEM
			FROM 
				CONTATOADM.NIVELSEQUENCIA
			WHERE 
				IDSEQUENCIAMANDATORIA = :cAuxidSequenciaMandatoria;

		//Abre o cursor
		EXEC SQL OPEN CursorRelacaoPoridSequenciaMandatoria;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stNivelSequenciaRegistro, 0, sizeof(stNivelSequenciaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorRelacaoPoridSequenciaMandatoria INTO :stNivelSequenciaRegistro:stNivelSequenciaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stNivelSequenciaRegistro.stidNivelSequencia.arr,
				(char*)stNivelSequenciaRegistro.stidSequenciaMandatoria.arr, 
				(char*)stNivelSequenciaRegistro.stidSequencia.arr,
				(char*)stNivelSequenciaRegistro.stnrNivel.arr,
				(char*)stNivelSequenciaRegistro.stsqOrdem.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorRelacaoPoridSequenciaMandatoria;

	}
	catch(...)
	{
		throw;
	}
    ULOG_END("CNivelSequencia::RelacaoPoridSequenciaMandatoria()");
	//Retorna a quantidade de registros
	return iCont;
GotoRelacaoPoridSequenciaMandatoria:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}
