#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CTap.h"

CTipoApresentacaoPergunta::CTipoApresentacaoPergunta()
{
}

CTipoApresentacaoPergunta::~CTipoApresentacaoPergunta()
{
}

int CTipoApresentacaoPergunta::ListId( char* cidTipoApresentacaoPergunta ) 
{
    ULOG_START("CTipoApresentacaoPergunta::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoApresentacaoPergunta = cidTipoApresentacaoPergunta; 
		struct
		{
			VARCHAR stidTipoApresentacaoPergunta[21+1];
			VARCHAR stsgTipoApresentacaoPergunta[255+1];
			VARCHAR stdsTipoApresentacaoPergunta[255+1];
		} stTipoApresentacaoPerguntaRegistro;
		struct
		{
			short iidTipoApresentacaoPergunta;
			short isgTipoApresentacaoPergunta;
			short idsTipoApresentacaoPergunta;
		} stTipoApresentacaoPerguntaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoApresentacaoPergunta();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorTipoApresentacaoPerguntaId CURSOR FOR 
   			SELECT 	
   				IDTIPOAPRESENTACAOPERGUNTA,
				SGTIPOAPRESENTACAOPERGUNTA,
				DSTIPOAPRESENTACAOPERGUNTA
			FROM 
				APOIO.TIPOAPRESENTACAOPERGUNTA
			WHERE 
				IDTIPOAPRESENTACAOPERGUNTA = :cAuxidTipoApresentacaoPergunta;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoApresentacaoPerguntaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CTipoApresentacaoPergunta::ListId()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoApresentacaoPerguntaRegistro, 0, sizeof(stTipoApresentacaoPerguntaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoApresentacaoPerguntaId INTO :stTipoApresentacaoPerguntaRegistro:stTipoApresentacaoPerguntaIndicator;
				//Adiciona a classe
				Add( (char*)stTipoApresentacaoPerguntaRegistro.stidTipoApresentacaoPergunta.arr,
					 (char*)stTipoApresentacaoPerguntaRegistro.stsgTipoApresentacaoPergunta.arr,
					 (char*)stTipoApresentacaoPerguntaRegistro.stdsTipoApresentacaoPergunta.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoApresentacaoPerguntaId;
		}
		ULOG_END("CTipoApresentacaoPergunta::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoApresentacaoPergunta::ListAll( void )
{
    ULOG_START("CTipoApresentacaoPergunta::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoApresentacaoPergunta[21+1];
			VARCHAR stsgTipoApresentacaoPergunta[255+1];
			VARCHAR stdsTipoApresentacaoPergunta[255+1];
		} stTipoApresentacaoPerguntaRegistro;
		struct
		{
			short iidTipoApresentacaoPergunta;
			short isgTipoApresentacaoPergunta;
			short idsTipoApresentacaoPergunta;
		} stTipoApresentacaoPerguntaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoApresentacaoPergunta();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
   			DECLARE 
   				CursorTipoApresentacaoPerguntaAll CURSOR FOR
   			SELECT
   				IDTIPOAPRESENTACAOPERGUNTA,
				SGTIPOAPRESENTACAOPERGUNTA,
				DSTIPOAPRESENTACAOPERGUNTA
			FROM 
				APOIO.TIPOAPRESENTACAOPERGUNTA
			ORDER BY
				DSTIPOAPRESENTACAOPERGUNTA; 

		//Abre o cursor
		EXEC SQL OPEN CursorTipoApresentacaoPerguntaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CTipoApresentacaoPergunta::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoApresentacaoPerguntaRegistro, 0, sizeof(stTipoApresentacaoPerguntaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoApresentacaoPerguntaAll INTO :stTipoApresentacaoPerguntaRegistro:stTipoApresentacaoPerguntaIndicator;
				//Adiciona a classe
				Add( (char*)stTipoApresentacaoPerguntaRegistro.stidTipoApresentacaoPergunta.arr,
					 (char*)stTipoApresentacaoPerguntaRegistro.stsgTipoApresentacaoPergunta.arr,
					 (char*)stTipoApresentacaoPerguntaRegistro.stdsTipoApresentacaoPergunta.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoApresentacaoPerguntaAll;
		}
		ULOG_END("CTipoApresentacaoPergunta::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoApresentacaoPergunta::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoApresentacaoPergunta", Registro(x)->cidTipoApresentacaoPergunta );
				xml->addItem("sgTipoApresentacaoPergunta", Registro(x)->csgTipoApresentacaoPergunta );
				xml->addItem("dsTipoApresentacaoPergunta", Registro(x)->cdsTipoApresentacaoPergunta );
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

