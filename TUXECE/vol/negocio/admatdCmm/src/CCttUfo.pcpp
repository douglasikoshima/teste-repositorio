#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CCttUfo.h"

CContatoUfoperadora::CContatoUfoperadora()
{
}

CContatoUfoperadora::~CContatoUfoperadora()
{
}

int CContatoUfoperadora::Insert( 
			char* cidContato,
			char* cidUFOperadora,
			char* cdtInicioVigencia,
			char* cdtFimVigencia,
			char* cinDisponibilidade,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CContatoUfoperadora::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR stidContatoUFOperadora[21+1];
		char* cAuxidContato = cidContato;
		char* cAuxidUFOperadora = cidUFOperadora;
		char* cAuxdtInicioVigencia = cdtInicioVigencia;
		char* cAuxdtFimVigencia = cdtFimVigencia;
		char* cAuxinDisponibilidade = cinDisponibilidade;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		//ZeraContatoUfoperadora();
		memset( &stidContatoUFOperadora, 0 , sizeof( stidContatoUFOperadora ) );
		
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;

		EXEC SQL
			SELECT
				CONTATOADM.CONTATOUFOPERADORASQ.NEXTVAL
			INTO
				:stidContatoUFOperadora
			FROM
				DUAL;
		
		if( strlennull( cAuxdtFimVigencia ) > 0 )
		{
			//Realiza o insert com data de fim
			EXEC SQL INSERT INTO CONTATOADM.CONTATOUFOPERADORA
			(	IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				DTINICIOVIGENCIA,
				DTFIMVIGENCIA,
				INDISPONIBILIDADE,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO) 
			VALUES 
			(	:stidContatoUFOperadora,
				:cAuxidContato,
				:cAuxidUFOperadora,
				TO_DATE(:cAuxdtInicioVigencia, 'DD/MM/YYYY'),
				TO_DATE(:cAuxdtFimVigencia, 'DD/MM/YYYY'),
				:cAuxinDisponibilidade,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
		} //if( strlennull( cAuxdtFimVigencia ) > 0 )
		else
		{
			//Realiza o insert
			EXEC SQL INSERT INTO CONTATOADM.CONTATOUFOPERADORA
			(	IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				DTINICIOVIGENCIA,
				INDISPONIBILIDADE,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO) 
			VALUES 
			(	:stidContatoUFOperadora,
				:cAuxidContato,
				:cAuxidUFOperadora,
				TO_DATE(:cAuxdtInicioVigencia, 'DD/MM/YYYY'),
				:cAuxinDisponibilidade,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
		}// else if( strlennull( cAuxdtFimVigencia ) > 0 )

		Add( (char*)stidContatoUFOperadora.arr
			,cAuxidContato
			,cAuxidUFOperadora
			,""
			,cAuxdtInicioVigencia
			,cAuxdtFimVigencia
			,cAuxinDisponibilidade
			,"" );
			
        ULOG_END("CContatoUfoperadora::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoUfoperadora::Update( 
			char* cidContatoUFOperadora,
			char* cidContato,
			char* cidUFOperadora,
			char* cdtInicioVigencia,
			char* cdtFimVigencia,
			char* cinDisponibilidade,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CContatoUfoperadora::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
			char* cAuxidContatoUFOperadora = cidContatoUFOperadora;
			char* cAuxidContato = cidContato;
			char* cAuxidUFOperadora = cidUFOperadora;
			char* cAuxdtInicioVigencia = cdtInicioVigencia;
			char* cAuxdtFimVigencia = cdtFimVigencia;
			char* cAuxinDisponibilidade = cinDisponibilidade;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		//ZeraContatoUfoperadora();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		if( strlennull( cAuxdtFimVigencia ) > 0 )
		{
			//Executa a instrucao de update
			EXEC SQL 
				UPDATE 
					CONTATOADM.CONTATOUFOPERADORA
				SET	
					DTINICIOVIGENCIA = TO_DATE(:cAuxdtInicioVigencia, 'DD/MM/YYYY'),
					DTFIMVIGENCIA = TO_DATE( :cAuxdtFimVigencia, 'DD/MM/YYYY'),
					INDISPONIBILIDADE = :cAuxinDisponibilidade,
					IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
					DTULTIMAALTERACAO = SYSDATE
				WHERE
					idUFOperadora = :cAuxidUFOperadora
				AND
					idcontato = :cAuxidContato;
		}
		else
		{
			//Executa a instrucao de update
			EXEC SQL 
				UPDATE 
					CONTATOADM.CONTATOUFOPERADORA
				SET	
					DTINICIOVIGENCIA = TO_DATE(:cAuxdtInicioVigencia, 'DD/MM/YYYY'),
					DTFIMVIGENCIA = NULL,
					INDISPONIBILIDADE = :cAuxinDisponibilidade,
					IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
					DTULTIMAALTERACAO = SYSDATE
				WHERE
					idUFOperadora = :cAuxidUFOperadora
				AND
					idcontato = :cAuxidContato;
		}

		Add( ""
			,cAuxidContato
			,cAuxidUFOperadora
			,""
			,cAuxdtInicioVigencia
			,cAuxdtFimVigencia
			,cAuxinDisponibilidade
			,"" );
			
		ULOG_END("CContatoUfoperadora::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoUfoperadora::Delete( char* cidContatoUFOperadora )
{
    ULOG_START("CContatoUfoperadora::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContatoUFOperadora = cidContatoUFOperadora; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		//ZeraContatoUfoperadora();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.CONTATOUFOPERADORA
			WHERE 
				IDCONTATOUFOPERADORA = :cAuxidContatoUFOperadora;
		ULOG_END("CContatoUfoperadora::Delete()");
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoUfoperadora::EraseFlh( char* cidContato ) 
{
    ULOG_START("CContatoUfoperadora::EraseFlh()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.CONTATOUFOPERADORA
			WHERE IDCONTATO = :cAuxidContato;
		
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CContatoUfoperadora::EraseFlh()");
	return 1;

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoUfoperadora::EraseUfo( char* cidUFOperadora ) 
{
    ULOG_START("CContatoUfoperadora::EraseUfo()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidUFOperadora = cidUFOperadora; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoUfoperadora
		WHERE (idUFOperadora = :cAuxidUFOperadora);
		
		ULOG_END("CContatoUfoperadora::EraseUfo()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoUfoperadora::ListId( char* cidContatoUFOperadora ) 
{
    ULOG_START("CContatoUfoperadora::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoUFOperadora = cidContatoUFOperadora; 
		struct
		{
			VARCHAR stidContatoUFOperadora[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[265+1];
			VARCHAR stdtInicioVigencia[12+1];
			VARCHAR stdtFimVigencia[12+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stsgUF[255+1];
		} stContatoUfoperadoraRegistro;
		struct
		{
			short iidContatoUFOperadora;
			short iidContato;
			short iidUFOperadora;
			short idsUFOperadora;
			short idtInicioVigencia;
			short idtFimVigencia;
			short iinDisponibilidade;
			short isgUF;
		} stContatoUfoperadoraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
        /* remoção de views bzeroum -- cassio -- jun/2007
   		EXEC SQL 
   			DECLARE 
   				CursorContatoUfoperadoraId CURSOR FOR 
	   		SELECT
		   		IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				SGUF || ' - ' || NMPESSOA,
				TO_CHAR(DTINICIOVIGENCIA, 'DD/MM/YYYY'),
				TO_CHAR(DTFIMVIGENCIA, 'DD/MM/YYYY'),
				INDISPONIBILIDADE,
				SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORAbzeroum
			WHERE 
				IDCONTATOUFOPERADORA = :cAuxidContatoUFOperadora
			ORDER BY
				SGUF, NMPESSOA;
            */

		EXEC SQL 
			DECLARE 
				CursorContatoUfoperadoraId CURSOR FOR 
			SELECT
				CONTATOUFOPERADORA.IDCONTATOUFOPERADORA,
				CONTATOUFOPERADORA.IDCONTATO,
				CONTATOUFOPERADORA.IDUFOPERADORA,
				(UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS OPERADORA,
				TO_CHAR(CONTATOUFOPERADORA.DTINICIOVIGENCIA, 'DD/MM/YYYY') AS DTINICIOVIGENCIA,
				TO_CHAR(CONTATOUFOPERADORA.DTFIMVIGENCIA, 'DD/MM/YYYY') AS DTFIMVIGENCIA,
				CONTATOUFOPERADORA.INDISPONIBILIDADE,
				UF.SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORA CONTATOUFOPERADORA,
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.PESSOADEPARA PESSOADEPARA,
				CUSTOMER.PESSOA PESSOA,
				APOIO.UF UF
			WHERE 
				CONTATOUFOPERADORA.IDCONTATOUFOPERADORA = :cAuxidContatoUFOperadora
			AND CONTATOUFOPERADORA.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
			AND UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
			AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
			ORDER BY
				UF.SGUF, UPPER(PESSOA.NMPESSOA);

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoUfoperadora::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoUfoperadoraRegistro, 0, sizeof(stContatoUfoperadoraRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoUfoperadoraId INTO :stContatoUfoperadoraRegistro:stContatoUfoperadoraIndicator;
				//Adiciona a classe
				Add( (char*)stContatoUfoperadoraRegistro.stidContatoUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidContato.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtInicioVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtFimVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stinDisponibilidade.arr
				    ,(char*)stContatoUfoperadoraRegistro.stsgUF.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorContatoUfoperadoraId;
		}
		ULOG_END("CContatoUfoperadora::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoUfoperadora::ListIdContato( char* cidContato ) 
{
    ULOG_START("CContatoUfoperadora::ListIdContato()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContatoUFOperadora[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[265+1];
			VARCHAR stdtInicioVigencia[12+1];
			VARCHAR stdtFimVigencia[12+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stsgUF[255+1];
		} stContatoUfoperadoraRegistro;
		struct
		{
			short iidContatoUFOperadora;
			short iidContato;
			short iidUFOperadora;
			short idsUFOperadora;
			short idtInicioVigencia;
			short idtFimVigencia;
			short iinDisponibilidade;
			short isgUF;
		} stContatoUfoperadoraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
        /* remoção de views bzeroum -- cassio -- jun/2007
   		EXEC SQL 
   			DECLARE 
   				CursorListIdContato CURSOR FOR 
	   		SELECT
		   		IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				SGUF || ' - ' || NMPESSOA,
				TO_CHAR(DTINICIOVIGENCIA, 'DD/MM/YYYY'),
				TO_CHAR(DTFIMVIGENCIA, 'DD/MM/YYYY'),
				INDISPONIBILIDADE,
				SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORAbzeroum
			WHERE 
				IDCONTATO = :cAuxidContato;
        */

		EXEC SQL 
			DECLARE 
				CursorListIdContato CURSOR FOR 
			SELECT
				CONTATOUFOPERADORA.IDCONTATOUFOPERADORA,
				CONTATOUFOPERADORA.IDCONTATO,
				CONTATOUFOPERADORA.IDUFOPERADORA,
				(UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS OPERADORA,
				TO_CHAR(CONTATOUFOPERADORA.DTINICIOVIGENCIA, 'DD/MM/YYYY') AS DTINICIOVIGENCIA,
				TO_CHAR(CONTATOUFOPERADORA.DTFIMVIGENCIA, 'DD/MM/YYYY') AS DTFIMVIGENCIA,
				CONTATOUFOPERADORA.INDISPONIBILIDADE,
				UF.SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORA CONTATOUFOPERADORA,
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.PESSOADEPARA PESSOADEPARA,
				CUSTOMER.PESSOA PESSOA,
				APOIO.UF UF
			WHERE 
				CONTATOUFOPERADORA.IDCONTATO = :cAuxidContato
			AND CONTATOUFOPERADORA.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
			AND UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
			AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
			ORDER BY
				UF.SGUF, UPPER(PESSOA.NMPESSOA);

		//Abre o cursor
		EXEC SQL OPEN CursorListIdContato;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoUfoperadora::ListIdContato()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoUfoperadoraRegistro, 0, sizeof(stContatoUfoperadoraRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListIdContato INTO :stContatoUfoperadoraRegistro:stContatoUfoperadoraIndicator;
				//Adiciona a classe
				Add( (char*)stContatoUfoperadoraRegistro.stidContatoUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidContato.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtInicioVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtFimVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stinDisponibilidade.arr
				    ,(char*)stContatoUfoperadoraRegistro.stsgUF.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListIdContato;
		}
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoUfoperadora::ListAll( void )
{
    ULOG_START("CContatoUfoperadora::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContatoUFOperadora[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[265+1];
			VARCHAR stdtInicioVigencia[12+1];
			VARCHAR stdtFimVigencia[12+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stsgUF[255+1];
		} stContatoUfoperadoraRegistro;
		struct
		{
			short iidContatoUFOperadora;
			short iidContato;
			short iidUFOperadora;
			short idsUFOperadora;
			short idtInicioVigencia;
			short idtFimVigencia;
			short iinDisponibilidade;
			short isgUF;
		} stContatoUfoperadoraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
        /* remoção de views bzeroum -- cassio -- jun/2007
   		EXEC SQL 
   			DECLARE 
   				CursorContatoUfoperadoraAll CURSOR FOR
	   		SELECT
		   		IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				SGUF || ' - ' || NMPESSOA,
				TO_CHAR(DTINICIOVIGENCIA, 'DD/MM/YYYY'),
				TO_CHAR(DTFIMVIGENCIA, 'DD/MM/YYYY'),
				INDISPONIBILIDADE,
				SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORAbzeroum
			ORDER BY
				SGUF, NMPESSOA; 
        */

		EXEC SQL 
			DECLARE 
				CursorContatoUfoperadoraAll CURSOR FOR
			SELECT
				CONTATOUFOPERADORA.IDCONTATOUFOPERADORA,
				CONTATOUFOPERADORA.IDCONTATO,
				CONTATOUFOPERADORA.IDUFOPERADORA,
				(UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS OPERADORA,
				TO_CHAR(CONTATOUFOPERADORA.DTINICIOVIGENCIA, 'DD/MM/YYYY') AS DTINICIOVIGENCIA,
				TO_CHAR(CONTATOUFOPERADORA.DTFIMVIGENCIA, 'DD/MM/YYYY') AS DTFIMVIGENCIA,
				CONTATOUFOPERADORA.INDISPONIBILIDADE,
				UF.SGUF
			FROM
				CONTATOADM.CONTATOUFOPERADORA CONTATOUFOPERADORA,
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.PESSOADEPARA PESSOADEPARA,
				CUSTOMER.PESSOA PESSOA,
				APOIO.UF UF
			WHERE
				CONTATOUFOPERADORA.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
			AND UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
			AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
			ORDER BY
				UF.SGUF, UPPER(PESSOA.NMPESSOA);

		//Abre o cursor
		EXEC SQL OPEN CursorContatoUfoperadoraAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoUfoperadora::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoUfoperadoraRegistro, 0, sizeof(stContatoUfoperadoraRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoUfoperadoraAll INTO :stContatoUfoperadoraRegistro:stContatoUfoperadoraIndicator;
				//Adiciona a classe
				Add( (char*)stContatoUfoperadoraRegistro.stidContatoUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidContato.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtInicioVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtFimVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stinDisponibilidade.arr
				    ,(char*)stContatoUfoperadoraRegistro.stsgUF.arr );
				//conta quantos existem                                       
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorContatoUfoperadoraAll;
		}
		ULOG_END("CContatoUfoperadora::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CContatoUfoperadora::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContatoUFOperadora", Registro(x)->cidContatoUFOperadora );
				xml->addItem("idUFOperadora", Registro(x)->cidUFOperadora );
				xml->addItem("dtInicioVigencia", Registro(x)->cdtInicioVigencia );
				xml->addItem("dtFimVigencia", Registro(x)->cdtFimVigencia );
				xml->addItem("inDisponibilidade", Registro(x)->cinDisponibilidade ); 
				xml->addItem("sgUf", Registro(x)->cdsUFOperadora ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

int CContatoUfoperadora::Relacionadas( char* cidContato )
{
    ULOG_START("CContatoUfoperadora::Relacionadas()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		struct
		{
			VARCHAR stidContatoUFOperadora[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[265+1];
			VARCHAR stdtInicioVigencia[12+1];
			VARCHAR stdtFimVigencia[12+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stsgUF[255+1];
		} stContatoUfoperadoraRegistro;
		struct
		{
			short iidContatoUFOperadora;
			short iidContato;
			short iidUFOperadora;
			short idsUFOperadora;
			short idtInicioVigencia;
			short idtFimVigencia;
			short iinDisponibilidade;
			short isgUF;
		} stContatoUfoperadoraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacionadas;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
        /* remoção de views bzeroum -- cassio -- jun/2007
   		EXEC SQL 
   			DECLARE 
   				CursorRelacionadas CURSOR FOR
	   		SELECT
		   		IDCONTATOUFOPERADORA,
				IDCONTATO,
				IDUFOPERADORA,
				SGUF || ' - ' || NMPESSOA OPERADORA,
				TO_CHAR(DTINICIOVIGENCIA,'DD/MM/YYYY'),
				TO_CHAR(DTFIMVIGENCIA,'DD/MM/YYYY'),
				INDISPONIBILIDADE,
				SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORAbzeroum
			WHERE
				IDCONTATO = :cAuxidContato
			ORDER BY
				SGUF, NMPESSOA; 
        */

		EXEC SQL 
			DECLARE 
				CursorRelacionadas CURSOR FOR
			SELECT
				CONTATOUFOPERADORA.IDCONTATOUFOPERADORA,
				CONTATOUFOPERADORA.IDCONTATO,
				CONTATOUFOPERADORA.IDUFOPERADORA,
				(UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS OPERADORA,
				TO_CHAR(CONTATOUFOPERADORA.DTINICIOVIGENCIA,'DD/MM/YYYY') AS DTINICIOVIGENCIA,
				TO_CHAR(CONTATOUFOPERADORA.DTFIMVIGENCIA,'DD/MM/YYYY') AS DTFIMVIGENCIA,
				CONTATOUFOPERADORA.INDISPONIBILIDADE,
				UF.SGUF
			FROM 
				CONTATOADM.CONTATOUFOPERADORA CONTATOUFOPERADORA,
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.PESSOADEPARA PESSOADEPARA,
				CUSTOMER.PESSOA PESSOA,
				APOIO.UF UF
			WHERE
				CONTATOUFOPERADORA.IDCONTATO = :cAuxidContato
			AND CONTATOUFOPERADORA.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
			AND UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
			AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
			ORDER BY
				UF.SGUF, UPPER(PESSOA.NMPESSOA);

		//Abre o cursor
		EXEC SQL OPEN CursorRelacionadas;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoUfoperadora::Relacionadas()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoUfoperadoraRegistro, 0, sizeof(stContatoUfoperadoraRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorRelacionadas INTO :stContatoUfoperadoraRegistro:stContatoUfoperadoraIndicator;
				//Adiciona a classe
				Add( (char*)stContatoUfoperadoraRegistro.stidContatoUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidContato.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtInicioVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtFimVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stinDisponibilidade.arr
				    ,(char*)stContatoUfoperadoraRegistro.stsgUF.arr );
				//conta quantos existem                                       
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorRelacionadas;
		}
		ULOG_END("CContatoUfoperadora::Relacionadas()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoRelacionadas:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoUfoperadora::NaoRelacionadas( char* cidContato )
{
    ULOG_START("CContatoUfoperadora::NaoRelacionadas()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		struct
		{
			VARCHAR stidContatoUFOperadora[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[265+1];
			VARCHAR stdtInicioVigencia[12+1];
			VARCHAR stdtFimVigencia[12+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stsgUF[255+1];
		} stContatoUfoperadoraRegistro;
		struct
		{
			short iidContatoUFOperadora;
			short iidContato;
			short iidUFOperadora;
			short idsUFOperadora;
			short idtInicioVigencia;
			short idtFimVigencia;
			short iinDisponibilidade;
			short isgUF;
		} stContatoUfoperadoraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoUfoperadora();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoNaoRelacionadas;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
        /* remoção de views bzeroum -- cassio -- jun/2007
   		EXEC SQL 
   			DECLARE 
   				CursorNaoRelacionadas CURSOR FOR
	   		SELECT
		   		0 IDCONTATOUFOPERADORA,
				0 IDCONTATO,
				IDUFOPERADORA,
				SGUF || ' - ' || NMPESSOA,
				'' DTINICIOVIGENCIA,
				'' DTFIMVIGENCIA,
				0,
				SGUF
			FROM 
				CUSTOMER.UFOPERADORAbzeroum
			WHERE
				IDUFOPERADORA NOT IN
				(
			   		SELECT
						IDUFOPERADORA
					FROM 
						CONTATOADM.CONTATOUFOPERADORA
					WHERE
						IDCONTATO = :cAuxidContato
				)
			ORDER BY
				SGUF, NMPESSOA; 
        */

		EXEC SQL 
			DECLARE 
				CursorNaoRelacionadas CURSOR FOR
			SELECT
				0 AS IDCONTATOUFOPERADORA,
				0 AS IDCONTATO,
				UFOPERADORA.IDUFOPERADORA,
				(UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS OPERADORA,
				'' AS DTINICIOVIGENCIA,
				'' AS DTFIMVIGENCIA,
				0 AS INDISPONIBILIDADE,
				UF.SGUF
			FROM
				CUSTOMER.OPERADORA OPERADORA,
				APOIO.UF UF,
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.PESSOADEPARA PESSOADEPARA,
				CUSTOMER.PESSOA PESSOA
			WHERE
				UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
			AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
			AND UFOPERADORA.IDUFOPERADORA NOT IN
				(
					SELECT
						CONTATOUFOPERADORA.IDUFOPERADORA
					FROM
						CONTATOADM.CONTATOUFOPERADORA
					WHERE
					CONTATOUFOPERADORA.IDCONTATO = :cAuxidContato
				)
			ORDER BY
				UF.SGUF, UPPER(PESSOA.NMPESSOA);

		//Abre o cursor
		EXEC SQL OPEN CursorNaoRelacionadas;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoUfoperadora::NaoRelacionadas()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoUfoperadoraRegistro, 0, sizeof(stContatoUfoperadoraRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNaoRelacionadas INTO :stContatoUfoperadoraRegistro:stContatoUfoperadoraIndicator;
				//Adiciona a classe
				Add( (char*)stContatoUfoperadoraRegistro.stidContatoUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidContato.arr
				    ,(char*)stContatoUfoperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtInicioVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stdtFimVigencia.arr
				    ,(char*)stContatoUfoperadoraRegistro.stinDisponibilidade.arr
				    ,(char*)stContatoUfoperadoraRegistro.stsgUF.arr );
				//conta quantos existem                                       
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorNaoRelacionadas;
		}
		ULOG_END("CContatoUfoperadora::NaoRelacionadas()");
		//Retorna a quantidade de registros
		
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoNaoRelacionadas:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}


int CContatoUfoperadora::Relacao( char* cidContato, XMLGen*xml )
{
    ULOG_START("CContatoUfoperadora::Relacao()");
	xml->createTag( "AdmOperadorasVO" );
	xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
	
	if( strlennull( cidContato ) <= 0 )
	{
	    ULOG_END("CContatoUfoperadora::Relacao()");
		return 0;
	}

	
	if( Relacionadas( cidContato ) > 0 )
	{
		xml->addItem( "idContato", cidContato );
		if( strlennull( Registro(0)->cdtFimVigencia ) > 0 )
			xml->addItem( "indeterminado", 0 );
		else
			xml->addItem( "indeterminado", 1 );
		xml->addItem( "dtInicioVigencia", Registro(0)->cdtInicioVigencia );
		xml->addItem( "dtFimVigencia", Registro(0)->cdtFimVigencia );
		
	}
	else
	{
		xml->addItem( "idContato", cidContato );
		xml->addItem( "indeterminado", 0 );
		xml->addItem( "dtInicioVigencia", "" );
		xml->addItem( "dtFimVigencia", "" );
	}
	//Relacionadas
	xml->createTag( "operadorasAssociadas" );
	GetXml( "AdmContatoUFOperadoraVO", xml );
	xml->closeTag();//operadorasAssociadas
	
	//Nao Relacionadas
	NaoRelacionadas( cidContato );
	xml->createTag( "operadorasExistentes" );
	GetXml( "AdmContatoUFOperadoraVO", xml );
	xml->closeTag();//operadorasExistentes
	
	xml->createTag( "AdmContatoUFOperadorasVO" );
	ListIdContato( cidContato );
	GetXml( "AdmContatoUFOperadoraVO", xml );
	xml->closeTag();//AdmContatoUFOperadorasVO

	xml->closeTag();//AdmOperadorasVO
	
    ULOG_END("CContatoUfoperadora::Relacao()");
	return 1;
}

int CContatoUfoperadora::Find( char* cidContato, char* cidUFOperadora )
{
   
	int iRet = -1;
	if( Quantidade() > 0 )
	{
		for( int x = 0; x<Quantidade(); x++ )
		{
			if( ( strcmp( cidContato, Registro(x)->cidContato ) == 0 )
			 && ( strcmp( cidUFOperadora, Registro(x)->cidUFOperadora ) == 0 ) )
			{
				iRet = x;
				break;
			}
		}
	}
	return iRet;
}

void CContatoUfoperadora::Adicionar( char* cidContatoUFOperadora,
		                             char* cidContato,
					                 char* cidUFOperadora )
{
	Add( cidContatoUFOperadora
		,cidContato
		,cidUFOperadora
		,""
		,""
		,""
		,""
		,"" );
}
