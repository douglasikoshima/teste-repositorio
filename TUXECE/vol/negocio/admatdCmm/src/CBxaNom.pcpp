#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CBxaNom.h"

CNomeBaixa::CNomeBaixa()
{
}

CNomeBaixa::~CNomeBaixa()
{
}

int CNomeBaixa::Insert( 
			char* cnmBaixa,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CNomeBaixa::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidNomeBaixa[255+1];
		char* cAuxnmBaixa = cnmBaixa;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNomeBaixa();
		
		memset( &cAuxidNomeBaixa, 0, sizeof(cAuxidNomeBaixa) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.NomeBaixaSQ.NEXTVAL INTO :cAuxidNomeBaixa FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO CONTATOADM.NOMEBAIXA
		(	IDNOMEBAIXA,
			NMBAIXA,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO) 
		VALUES 
		(	:cAuxidNomeBaixa,
			TRIM(SUBSTR(:cAuxnmBaixa,1,255)),
			:cAuxidUsuarioAlteracao,
			SYSDATE);

        
        ULOG_END("CNomeBaixa::Insert()");	
        
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
  		   return 0;//Erro
        else   		   
     	   return 1;
		
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNomeBaixa::Update( 
			char* cidNomeBaixa,
			char* cnmBaixa,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CNomeBaixa::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidNomeBaixa = cidNomeBaixa;
			char* cAuxnmBaixa = cnmBaixa;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNomeBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE CONTATOADM.NOMEBAIXA
		SET   NMBAIXA = :cAuxnmBaixa,
		      IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
		      DTULTIMAALTERACAO = SYSDATE
		WHERE IDNOMEBAIXA = :cAuxidNomeBaixa;   
		
		ULOG_END("CNomeBaixa::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
		
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNomeBaixa::Delete( char* cidNomeBaixa )
{
    ULOG_START("CNomeBaixa::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidNomeBaixa = cidNomeBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNomeBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.NomeBaixa
		WHERE (idNomeBaixa = :cAuxidNomeBaixa);
		ULOG_END("CNomeBaixa::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CNomeBaixa::ListId( char* cidNomeBaixa ) 
{
    ULOG_START("CNomeBaixa::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNomeBaixa = cidNomeBaixa; 
		struct
		{
			VARCHAR stidNomeBaixa[21+1];
			VARCHAR stnmBaixa[255+1];
		} stNomeBaixaRegistro;
		struct
		{
			short iidNomeBaixa;
			short inmBaixa;
		} stNomeBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNomeBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorNomeBaixaId CURSOR FOR 
   			SELECT 	
					IDNOMEBAIXA,
					NMBAIXA
				FROM 
					CONTATOADM.NOMEBAIXA
				WHERE 
					IDNOMEBAIXA = :cAuxidNomeBaixa
				ORDER BY 
					NMBAIXA;

		//Abre o cursor
		EXEC SQL OPEN CursorNomeBaixaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNomeBaixa::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNomeBaixaRegistro, 0, sizeof(stNomeBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNomeBaixaId INTO :stNomeBaixaRegistro:stNomeBaixaIndicator;
				//Adiciona a classe
				Add( 	(char*)stNomeBaixaRegistro.stidNomeBaixa.arr,
				(char*)stNomeBaixaRegistro.stnmBaixa.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorNomeBaixaId;
		}
		
		ULOG_END("CNomeBaixa::ListId()");
		
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CNomeBaixa::ListAll( void )
{
    ULOG_START("CNomeBaixa::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidNomeBaixa[21+1];
			VARCHAR stnmBaixa[255+1];
		} stNomeBaixaRegistro;
		struct
		{
			short iidNomeBaixa;
			short inmBaixa;
		} stNomeBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraNomeBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
				DECLARE CursorNomeBaixaAll CURSOR FOR
   			SELECT 	
					IDNOMEBAIXA,
					NMBAIXA
				FROM 
					CONTATOADM.NOMEBAIXA
				ORDER BY 
					NMBAIXA; 

		//Abre o cursor
		EXEC SQL OPEN CursorNomeBaixaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CNomeBaixa::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stNomeBaixaRegistro, 0, sizeof(stNomeBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorNomeBaixaAll INTO :stNomeBaixaRegistro:stNomeBaixaIndicator;
				//Adiciona a classe
				Add( 	(char*)stNomeBaixaRegistro.stidNomeBaixa.arr,
				(char*)stNomeBaixaRegistro.stnmBaixa.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorNomeBaixaAll;
		}
		
		ULOG_END("CNomeBaixa::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CNomeBaixa::ListPar( char* cnmBaixa ) 
{
    ULOG_START("CNomeBaixa::ListPar()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char cAuxnmBaixa[256+1]; 
		struct
		{
			VARCHAR stidNomeBaixa[21+1];
			VARCHAR stnmBaixa[255+1];
		} stNomeBaixaRegistro;
		struct
		{
			short iidNomeBaixa;
			short inmBaixa;
		} stNomeBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Zera a estrutura da classe
	ZeraNomeBaixa();
	
	if( strlennull( cnmBaixa ) > 0 )
		sprintf( cAuxnmBaixa, "%s%%", cnmBaixa );
	else
		strcpy( cAuxnmBaixa, "-1" );

	//Ativa as acoes decorrentes de erros ORACLE
	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListPar;

	memset( &sqlca, 0, sizeof(sqlca) );

	//Declara um cursor para listar os IDs
	EXEC SQL 
		DECLARE 
			CursorListPar CURSOR FOR 
		SELECT 	
			IDNOMEBAIXA,
			NMBAIXA
		FROM 
			CONTATOADM.NOMEBAIXA
		WHERE 
			UPPER(NMBAIXA) LIKE UPPER(:cAuxnmBaixa)
		OR
			:cAuxnmBaixa = '-1';

	//Abre o cursor
	EXEC SQL OPEN CursorListPar;

	//Caso inexista registros sair do loop
	EXEC SQL WHENEVER NOT FOUND DO break;
	for(;;)
	{
		//Zera a estrutura de restorno
		memset( &stNomeBaixaRegistro, 0, sizeof(stNomeBaixaRegistro) );
		//Pega um registro no CURSOR
		EXEC SQL FETCH CursorListPar INTO :stNomeBaixaRegistro:stNomeBaixaIndicator;
		//Adiciona a classe
		Add(
			(char*)stNomeBaixaRegistro.stidNomeBaixa.arr,
			(char*)stNomeBaixaRegistro.stnmBaixa.arr
		);
	}
	//Fecha o CURSOR
	EXEC SQL CLOSE CursorListPar;

    ULOG_END("CNomeBaixa::ListPar()");
	//Retorna a quantidade de registros
	return Quantidade();

GotoListPar:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CNomeBaixa::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idNomeBaixa", Registro(x)->cidNomeBaixa );
				xml->addItem("nmBaixa", Registro(x)->cnmBaixa ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
