#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CCttFch.h"

CTipoFechamentoContato::CTipoFechamentoContato()
{
}

CTipoFechamentoContato::~CTipoFechamentoContato()
{
}

int CTipoFechamentoContato::Insert( 
			char* cnmTipoFechamentoContato,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CTipoFechamentoContato::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidTipoFechamentoContato[255+1];
		char* cAuxnmTipoFechamentoContato = cnmTipoFechamentoContato;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoFechamentoContato();
		
		memset( &cAuxidTipoFechamentoContato, 0, sizeof(cAuxidTipoFechamentoContato) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.TipoFechamentoContatoSQ.NEXTVAL INTO :cAuxidTipoFechamentoContato FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.TipoFechamentoContato
		(	idTipoFechamentoContato,
			nmTipoFechamentoContato,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidTipoFechamentoContato,
			:cAuxnmTipoFechamentoContato,
			:cAuxidUsuarioAlteracao,
			SYSDATE);

        ULOG_END("CTipoFechamentoContato::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CTipoFechamentoContato::Update( 
			char* cidTipoFechamentoContato,
			char* cnmTipoFechamentoContato,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CTipoFechamentoContato::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidTipoFechamentoContato = cidTipoFechamentoContato;
			char* cAuxnmTipoFechamentoContato = cnmTipoFechamentoContato;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoFechamentoContato();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE contatoadm.TipoFechamentoContato
		SET 	nmTipoFechamentoContato = :cAuxnmTipoFechamentoContato,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idTipoFechamentoContato = :cAuxidTipoFechamentoContato;   
		
		ULOG_END("CTipoFechamentoContato::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CTipoFechamentoContato::Delete( char* cidTipoFechamentoContato )
{
    ULOG_END("CTipoFechamentoContato::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidTipoFechamentoContato = cidTipoFechamentoContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoFechamentoContato();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.TipoFechamentoContato
		WHERE (idTipoFechamentoContato = :cAuxidTipoFechamentoContato);
		
		ULOG_END("CTipoFechamentoContato::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CTipoFechamentoContato::ListId( char* cidTipoFechamentoContato ) 
{
    ULOG_START("CTipoFechamentoContato::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoFechamentoContato = cidTipoFechamentoContato; 
		struct
		{
			VARCHAR stidTipoFechamentoContato[21+1];
			VARCHAR stnmTipoFechamentoContato[255+1];
		} stTipoFechamentoContatoRegistro;
		struct
		{
			short iidTipoFechamentoContato;
			short inmTipoFechamentoContato;
		} stTipoFechamentoContatoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoFechamentoContato();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorTipoFechamentoContatoId CURSOR FOR 
   		SELECT 	idTipoFechamentoContato,
	nmTipoFechamentoContato
		FROM contatoadm.TipoFechamentoContato
		WHERE idTipoFechamentoContato = :cAuxidTipoFechamentoContato;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoFechamentoContatoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CTipoFechamentoContato::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoFechamentoContatoRegistro, 0, sizeof(stTipoFechamentoContatoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoFechamentoContatoId INTO :stTipoFechamentoContatoRegistro:stTipoFechamentoContatoIndicator;
				//Adiciona a classe
				Add( 	(char*)stTipoFechamentoContatoRegistro.stidTipoFechamentoContato.arr,
				(char*)stTipoFechamentoContatoRegistro.stnmTipoFechamentoContato.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoFechamentoContatoId;
		}
		ULOG_END("CTipoFechamentoContato::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CTipoFechamentoContato::ListAll( void )
{
    ULOG_START("CTipoFechamentoContato::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoFechamentoContato[21+1];
			VARCHAR stnmTipoFechamentoContato[255+1];
		} stTipoFechamentoContatoRegistro;
		struct
		{
			short iidTipoFechamentoContato;
			short inmTipoFechamentoContato;
		} stTipoFechamentoContatoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoFechamentoContato();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorTipoFechamentoContatoAll CURSOR FOR
   		SELECT 	idTipoFechamentoContato,
		nmTipoFechamentoContato
		FROM contatoadm.TipoFechamentoContato; 

		//Abre o cursor
		EXEC SQL OPEN CursorTipoFechamentoContatoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CTipoFechamentoContato::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoFechamentoContatoRegistro, 0, sizeof(stTipoFechamentoContatoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoFechamentoContatoAll INTO :stTipoFechamentoContatoRegistro:stTipoFechamentoContatoIndicator;
				//Adiciona a classe
				Add( 	(char*)stTipoFechamentoContatoRegistro.stidTipoFechamentoContato.arr,
				(char*)stTipoFechamentoContatoRegistro.stnmTipoFechamentoContato.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoFechamentoContatoAll;
		}
		ULOG_END("CTipoFechamentoContato::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CTipoFechamentoContato::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoFechamentoContato", Registro(x)->cidTipoFechamentoContato );
				xml->addItem("nmTipoFechamentoContato", Registro(x)->cnmTipoFechamentoContato ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
