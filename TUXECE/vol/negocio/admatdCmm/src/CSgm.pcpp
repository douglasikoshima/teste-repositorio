#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CSgm.h"

CSegmentacao::CSegmentacao()
{
}

CSegmentacao::~CSegmentacao()
{
}

int CSegmentacao::RelacaoFlhPrz( char* cidContato )
{
    ULOG_START("CSegmentacao::RelacaoFlhPrz()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stsgSegmentacao[255+1];
			VARCHAR stdsSegmentacao[255+1];
			VARCHAR stvlPeso[21+1];
		} stSegmentacaoRegistro;
		struct
		{
			short iidSegmentacao;
			short isgSegmentacao;
			short idsSegmentacao;
			short ivlPeso;
		} stSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraSegmentacao();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros
   	/*	SELECT apoio.Segmentacao.idSegmentacao, apoio.Segmentacao.idSegmentacao, apoio.Segmentacao.idSegmentacao, apoio.Segmentacao.idSegmentacao 
		FROM apoio.Segmentacao, contatoadm.PrazoAtendimentoBZEROUM
		WHERE apoio.Segmentacao.idSegmentacao = contatoadm.PrazoAtendimentoBZEROUM.idContato AND contatoadm.PrazoAtendimentoBZEROUM.idContato = :cAuxidContato ;*/

		/*REMOVENDO BZEROUM
		 TCOSTA 18/06/2007 MPOG
		*/
		EXEC SQL DECLARE CursorSegmentacaoRelacao_00 CURSOR FOR
		SELECT segmentacao.idsegmentacao, 
			   segmentacao.sgsegmentacao,
			   segmentacao.dssegmentacao, 
			   segmentacao.vlpeso
		  FROM apoio.segmentacao segmentacao, 
			   CONTATOADM.CONTATOSEGMENTACAO CONTATOSEGMENTACAO
		 WHERE segmentacao.idsegmentacao =CONTATOSEGMENTACAO.IDSEGMENTACAO
		   AND CONTATOSEGMENTACAO.idcontato = :cAuxidContato;
   	
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacao;

		EXEC SQL OPEN CursorSegmentacaoRelacao_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CSegmentacao::RelacaoFlhPrz()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSegmentacaoRegistro, 0, sizeof(stSegmentacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSegmentacaoRelacao_00 INTO :stSegmentacaoRegistro:stSegmentacaoIndicator;
				//Adiciona a classe
				Add( 	(char*)stSegmentacaoRegistro.stidSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stsgSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stdsSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stvlPeso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorSegmentacaoRelacao_00;
		}
		ULOG_END("CSegmentacao::RelacaoFlhPrz()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoRelacao:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CSegmentacao::ExistemFlhPrz( char* cidContato )
{
    ULOG_START("CSegmentacao::ExistemFlhPrz()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stsgSegmentacao[255+1];
			VARCHAR stdsSegmentacao[255+1];
			VARCHAR stvlPeso[21+1];
		} stSegmentacaoRegistro;
		struct
		{
			short iidSegmentacao;
			short isgSegmentacao;
			short idsSegmentacao;
			short ivlPeso;
		} stSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraSegmentacao();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros

   		/*SELECT apoio.Segmentacao.idSegmentacao
		      ,apoio.Segmentacao.idSegmentacao
			  ,apoio.Segmentacao.idSegmentacao
			  ,apoio.Segmentacao.idSegmentacao 
		FROM apoio.Segmentacao
		WHERE apoio.Segmentacao.idSegmentacao NOT IN ( SELECT apoio.Segmentacao.idSegmentacao 
		                                                    FROM apoio.Segmentacao
															   , contatoadm.PrazoAtendimentoBZEROUM
														   WHERE apoio.Segmentacao.idSegmentacao = contatoadm.PrazoAtendimentoBZEROUM.idContato 
														     AND contatoadm.PrazoAtendimentoBZEROUM.idContato = :cAuxidContato  ); */

		/*REMOVENDO BZEROUM
		 TCOSTA 18/06/2007 MPOG
		*/
		EXEC SQL DECLARE CursorSegmentacaoExistem_00 CURSOR FOR 
	    SELECT segmentacao.idsegmentacao, 
	   		   segmentacao.sgsegmentacao,
       		   segmentacao.dssegmentacao, 
	   		   segmentacao.vlpeso
		FROM apoio.Segmentacao Segmentacao
		WHERE Segmentacao.idSegmentacao NOT IN ( SELECT CONTATOSEGMENTACAO.idSegmentacao 
		                                                    FROM CONTATOADM.CONTATOSEGMENTACAO CONTATOSEGMENTACAO 
														   WHERE CONTATOSEGMENTACAO.idContato = :cAuxidContato  );

		EXEC SQL WHENEVER SQLERROR GOTO GotoExistem;

		EXEC SQL OPEN CursorSegmentacaoExistem_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CSegmentacao::ExistemFlhPrz()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSegmentacaoRegistro, 0, sizeof(stSegmentacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSegmentacaoExistem_00 INTO :stSegmentacaoRegistro:stSegmentacaoIndicator;
				//Adiciona a classe
				Add( 	(char*)stSegmentacaoRegistro.stidSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stsgSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stdsSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stvlPeso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorSegmentacaoExistem_00;
		}
		ULOG_END("CSegmentacao::ExistemFlhPrz()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoExistem:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CSegmentacao::ListId( char* cidSegmentacao ) 
{
    ULOG_START("CSegmentacao::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSegmentacao = cidSegmentacao; 
		struct
		{
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stsgSegmentacao[255+1];
			VARCHAR stdsSegmentacao[255+1];
			VARCHAR stvlPeso[21+1];
		} stSegmentacaoRegistro;
		struct
		{
			short iidSegmentacao;
			short isgSegmentacao;
			short idsSegmentacao;
			short ivlPeso;
		} stSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraSegmentacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorSegmentacaoId CURSOR FOR 
   		SELECT 	idSegmentacao,
	            sgSegmentacao,
	            dsSegmentacao,
	            vlPeso
		FROM apoio.Segmentacao
		WHERE idSegmentacao = :cAuxidSegmentacao;

		//Abre o cursor
		EXEC SQL OPEN CursorSegmentacaoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CSegmentacao::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSegmentacaoRegistro, 0, sizeof(stSegmentacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSegmentacaoId INTO :stSegmentacaoRegistro:stSegmentacaoIndicator;
				//Adiciona a classe
				Add( 	(char*)stSegmentacaoRegistro.stidSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stsgSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stdsSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stvlPeso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorSegmentacaoId;
		}
		ULOG_END("CSegmentacao::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CSegmentacao::ListAll( void )
{
    ULOG_END("CSegmentacao::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stsgSegmentacao[255+1];
			VARCHAR stdsSegmentacao[255+1];
			VARCHAR stvlPeso[21+1];
		} stSegmentacaoRegistro;
		struct
		{
			short iidSegmentacao;
			short isgSegmentacao;
			short idsSegmentacao;
			short ivlPeso;
		} stSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraSegmentacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorSegmentacaoAll CURSOR FOR
   		SELECT 	idSegmentacao,
		sgSegmentacao,
		dsSegmentacao,
		vlPeso
		FROM apoio.Segmentacao; 

		//Abre o cursor
		EXEC SQL OPEN CursorSegmentacaoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CSegmentacao::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSegmentacaoRegistro, 0, sizeof(stSegmentacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSegmentacaoAll INTO :stSegmentacaoRegistro:stSegmentacaoIndicator;
				//Adiciona a classe
				Add( 	(char*)stSegmentacaoRegistro.stidSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stsgSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stdsSegmentacao.arr,
				(char*)stSegmentacaoRegistro.stvlPeso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorSegmentacaoAll;
		}
		ULOG_END("CSegmentacao::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CSegmentacao::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idSegmentacao", Registro(x)->cidSegmentacao );
				xml->addItem("sgSegmentacao", Registro(x)->csgSegmentacao );
				xml->addItem("dsSegmentacao", Registro(x)->cdsSegmentacao );
				xml->addItem("vlPeso", Registro(x)->cvlPeso ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
