#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CCmpFse.h"

#define CONVIND(O,I) \
{\
	if (I == -1) { \
		##O.arr[0]=0; \
	} else { \
		##O.arr[##O.len]=0; \
	} \
}

#define endOraStr(varstr)      varstr.arr[varstr.len]= '\0'
#define oraToStr(bstr,vchar)   if(!bstr) strncpy(bstr,vchar.arr,vchar.len)
#define strToOra(vchar,bstr)   vchar.len = strlen(bstr);strncpy((char *)vchar.arr,bstr,vchar.len);vchar.arr[vchar.len] = 0

CFaseProcesso::CFaseProcesso()
{
}

CFaseProcesso::~CFaseProcesso()
{
}

int CFaseProcesso::Insert( 
			char* cnmFaseProcesso,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CFaseProcesso::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidFaseProcesso[255+1];
		char* cAuxnmFaseProcesso = cnmFaseProcesso;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFaseProcesso();
		
		memset( &cAuxidFaseProcesso, 0, sizeof(cAuxidFaseProcesso) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.FaseProcessoSQ.NEXTVAL INTO :cAuxidFaseProcesso FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.FaseProcesso
		(	idFaseProcesso,
			nmFaseProcesso,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidFaseProcesso,
			:cAuxnmFaseProcesso,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CFaseProcesso::Insert()");

		if(sqlca.sqlcode) {
			return 0;
		}
		else {
			return 1;
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CFaseProcesso::Update( 
			char* cidFaseProcesso,
			char* cnmFaseProcesso,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CFaseProcesso::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidFaseProcesso = cidFaseProcesso;
			char* cAuxnmFaseProcesso = cnmFaseProcesso;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFaseProcesso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE contatoadm.FaseProcesso
		SET 	nmFaseProcesso = :cAuxnmFaseProcesso,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idFaseProcesso = :cAuxidFaseProcesso;   
		
		ULOG_END("CFaseProcesso::Update()");
		
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CFaseProcesso::Delete( char* cidFaseProcesso )
{
    ULOG_START("CFaseProcesso::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidFaseProcesso = cidFaseProcesso; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFaseProcesso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.FaseProcesso
		WHERE (idFaseProcesso = :cAuxidFaseProcesso);
		
		ULOG_END("CFaseProcesso::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CFaseProcesso::ListId( char* cidFaseProcesso ) 
{
    ULOG_START("CFaseProcesso::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidFaseProcesso = cidFaseProcesso; 
		struct
		{
			VARCHAR stidFaseProcesso[21+1];
			VARCHAR stnmFaseProcesso[255+1];
		} stFaseProcessoRegistro;
		struct
		{
			short iidFaseProcesso;
			short inmFaseProcesso;
		} stFaseProcessoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFaseProcesso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorFaseProcessoId CURSOR FOR 
   			SELECT
   				IDFASEPROCESSO,
				NMFASEPROCESSO
			FROM 
				CONTATOADM.FASEPROCESSO
			WHERE 
				IDFASEPROCESSO = :cAuxidFaseProcesso;

		//Abre o cursor
		EXEC SQL OPEN CursorFaseProcessoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stFaseProcessoRegistro, 0, sizeof(stFaseProcessoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorFaseProcessoId INTO :stFaseProcessoRegistro:stFaseProcessoIndicator;
				//Adiciona a classe
				Add( (char*)stFaseProcessoRegistro.stidFaseProcesso.arr,
				     (char*)stFaseProcessoRegistro.stnmFaseProcesso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorFaseProcessoId;
		}
		ULOG_END("CFaseProcesso::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CFaseProcesso::ListAll( void )
{
    ULOG_START("CFaseProcesso::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidFaseProcesso[21+1];
			VARCHAR stnmFaseProcesso[255+1];
		} stFaseProcessoRegistro;
		struct
		{
			short iidFaseProcesso;
			short inmFaseProcesso;
		} stFaseProcessoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFaseProcesso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
   			DECLARE 
   				CursorFaseProcessoAll CURSOR FOR
   			SELECT
   				IDFASEPROCESSO,
				NMFASEPROCESSO
			FROM 
				CONTATOADM.FASEPROCESSO
			WHERE
				IDFASEPROCESSO > 0;

		//Abre o cursor
		EXEC SQL OPEN CursorFaseProcessoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stFaseProcessoRegistro, 0, sizeof(stFaseProcessoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorFaseProcessoAll INTO :stFaseProcessoRegistro:stFaseProcessoIndicator;
				//Adiciona a classe
				Add( (char*)stFaseProcessoRegistro.stidFaseProcesso.arr,
				     (char*)stFaseProcessoRegistro.stnmFaseProcesso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorFaseProcessoAll;
		}
		ULOG_END("CFaseProcesso::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}



int CFaseProcesso::ListaFases( XMLGen * xml )
{
    ULOG_START( "CFaseProcesso::ListaFases" );
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		
		unsigned long idFase;
		VARCHAR nmFase[256];
		short i_nmFase = -1;
		
	EXEC SQL END DECLARE SECTION;

	try
	{

		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListaFases;

   		EXEC SQL 
   			DECLARE 
   				CursorFases CURSOR FOR
   			SELECT
   				IDFASEPROCESSO,
				NMFASEPROCESSO
			FROM 
				CONTATOADM.FASEPROCESSO
			WHERE
				IDFASEPROCESSO > 0;

		EXEC SQL OPEN CursorFases;

		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			EXEC SQL FETCH CursorFases INTO :idFase ,
				                            :nmFase:i_nmFase;

		    CONVIND( nmFase,i_nmFase );
			xml->createTag("AdmFaseProcessoVO");
				xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
				xml->addItem("idFaseProcesso", idFase );
				xml->addItem("nmFaseProcesso", (char *)nmFase.arr ); 
			xml->closeTag();

		}

		EXEC SQL CLOSE CursorFases;

		ULOG_END( "CFaseProcesso::ListaFases" );

		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoListaFases:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	ULOG_END( "CFaseProcesso::ListaFases" );
	throw TuxBasicOraException(sqlca.sqlcode);

}



void CFaseProcesso::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag) > 0 )
			{
				xml->createTag(cNomeTag);
				//Adiciona a proprieda necessaria para o Weblogic
				xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idFaseProcesso", Registro(x)->cidFaseProcesso );
				xml->addItem("nmFaseProcesso", Registro(x)->cnmFaseProcesso ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag) > 0 )
				xml->closeTag();
		}
	}
}
