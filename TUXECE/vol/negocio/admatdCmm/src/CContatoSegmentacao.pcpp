#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CContatoSegmentacao.h"

CContatoSegmentacao::CContatoSegmentacao()
{
}

CContatoSegmentacao::~CContatoSegmentacao()
{
}

int CContatoSegmentacao::Insert( 
								char* cidContato,
								char* cidSegmentacao,
								char* cidUsuarioAlteracao
							 )
{
    ULOG_START("CContatoSegmentacao::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		char* cAuxidSegmentacao = cidSegmentacao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL 
			INSERT INTO CONTATOADM.CONTATOSEGMENTACAO
			(	IDCONTATOSEGMENTACAO,
				IDCONTATO,
				IDSEGMENTACAO,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES 
			(	CONTATOADM.CONTATOSEGMENTACAOSQ.NEXTVAL,
				:cAuxidContato,
				:cAuxidSegmentacao,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
			
        ULOG_END("CContatoSegmentacao::Insert()");
        
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoSegmentacao::Update( 
								char* cidContatoSegmentacao,
								char* cidContato,
								char* cidSegmentacao,
								char* cidUsuarioAlteracao 
							 )
{
    ULOG_START("CContatoSegmentacao::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoSegmentacao = cidContatoSegmentacao;
		char* cAuxidContato = cidContato;
		char* cAuxidSegmentacao = cidSegmentacao;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE CONTATOADM.CONTATOSEGMENTACAO
			SET
				IDCONTATO = :cAuxidContato,
				IDSEGMENTACAO = :cAuxidSegmentacao,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDCONTATOSEGMENTACAO = :cAuxidContatoSegmentacao;
		
		ULOG_END("CContatoSegmentacao::Update()");
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoSegmentacao::Delete( char* cidContatoSegmentacao )
{
    ULOG_START("CContatoSegmentacao::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContatoSegmentacao = cidContatoSegmentacao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.CONTATOSEGMENTACAO
			WHERE 
				IDCONTATOSEGMENTACAO = :cAuxidContatoSegmentacao;
				
		ULOG_END("CContatoSegmentacao::Delete()");
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if( sqlca.sqlcode == -2292 )
		return 1;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoSegmentacao::ListId( char* cidContatoSegmentacao ) 
{
    ULOG_START("CContatoSegmentacao::Delete()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoSegmentacao = cidContatoSegmentacao; 
		struct
		{
			VARCHAR stidContatoSegmentacao[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
		} stContatoSegmentacaoRegistro;
		struct
		{
			short iidContatoSegmentacao;
			short iidContato;
			short iidSegmentacao;
		} stContatoSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorContatoSegmentacaoId CURSOR FOR 
   			SELECT 	
   				IDCONTATOSEGMENTACAO,
				IDCONTATO,
				IDSEGMENTACAO
			FROM 
				CONTATOADM.CONTATOSEGMENTACAO
			WHERE 
				IDCONTATOSEGMENTACAO = :cAuxidContatoSegmentacao;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoSegmentacaoId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoSegmentacaoRegistro, 0, sizeof(stContatoSegmentacaoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorContatoSegmentacaoId INTO :stContatoSegmentacaoRegistro:stContatoSegmentacaoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoSegmentacaoRegistro.stidContatoSegmentacao.arr,
				(char*)stContatoSegmentacaoRegistro.stidContato.arr, 
				(char*)stContatoSegmentacaoRegistro.stidSegmentacao.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorContatoSegmentacaoId;

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoSegmentacao::ListAll( void )
{
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContatoSegmentacao[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
		} stContatoSegmentacaoRegistro;
		struct
		{
			short iidContatoSegmentacao;
			short iidContato;
			short iidSegmentacao;
		} stContatoSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorContatoSegmentacaoAll CURSOR FOR
   			SELECT 	
   				IDCONTATOSEGMENTACAO,
				IDCONTATO,
				IDSEGMENTACAO
			FROM 
				CONTATOADM.CONTATOSEGMENTACAO
			WHERE
				IDCONTATOSEGMENTACAO > 0; 

		//Abre o cursor
		EXEC SQL OPEN CursorContatoSegmentacaoAll;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoSegmentacaoRegistro, 0, sizeof(stContatoSegmentacaoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorContatoSegmentacaoAll INTO :stContatoSegmentacaoRegistro:stContatoSegmentacaoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoSegmentacaoRegistro.stidContatoSegmentacao.arr,
				(char*)stContatoSegmentacaoRegistro.stidContato.arr, 
				(char*)stContatoSegmentacaoRegistro.stidSegmentacao.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o cursor
		EXEC SQL CLOSE CursorContatoSegmentacaoAll;
	}
	catch(...)
	{
		throw;
	}
	//Retorna a quantidade de registros
	return iCont;

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CContatoSegmentacao::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContatoSegmentacao", Registro(x)->cidContatoSegmentacao );
				xml->addItem("idContato", Registro(x)->cidContato ); 
				xml->addItem("idSegmentacao", Registro(x)->cidSegmentacao ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CContatoSegmentacao::RelacaoPorIdContato( char* cidContato ) 
{
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContatoSegmentacao[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
		} stContatoSegmentacaoRegistro;
		struct
		{
			short iidContatoSegmentacao;
			short iidContato;
			short iidSegmentacao;
		} stContatoSegmentacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoSegmentacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacaoPorIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorRelacaoPorIdContato CURSOR FOR 
   			SELECT 	
   				IDCONTATOSEGMENTACAO,
				IDCONTATO,
				IDSEGMENTACAO
			FROM 
				CONTATOADM.CONTATOSEGMENTACAO
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorRelacaoPorIdContato;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stContatoSegmentacaoRegistro, 0, sizeof(stContatoSegmentacaoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorRelacaoPorIdContato INTO :stContatoSegmentacaoRegistro:stContatoSegmentacaoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stContatoSegmentacaoRegistro.stidContatoSegmentacao.arr,
				(char*)stContatoSegmentacaoRegistro.stidContato.arr, 
				(char*)stContatoSegmentacaoRegistro.stidSegmentacao.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorRelacaoPorIdContato;

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoRelacaoPorIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}
