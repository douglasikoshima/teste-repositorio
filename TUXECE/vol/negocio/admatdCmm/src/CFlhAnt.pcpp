#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFlhAnt.h"

CIndicadorContatoFolha::CIndicadorContatoFolha()
{
}

CIndicadorContatoFolha::~CIndicadorContatoFolha()
{
}

int CIndicadorContatoFolha::Insert( char* cidContato
								  ,char* cidIndicadorAnatel
								  ,char* cidUsuarioAlteracao )
{
    ULOG_START("CIndicadorContatoFolha::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidIndicadorContatoFolha[21+1];
		char* cAuxidContato = cidContato;
		char* cAuxidIndicadorAnatel = cidIndicadorAnatel;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();
		
		memset( &cAuxidIndicadorContatoFolha, 0, sizeof(cAuxidIndicadorContatoFolha) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.IndicadorContatoFolhaSQ.NEXTVAL INTO :cAuxidIndicadorContatoFolha FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO CONTATOADM.INDICADORCONTATOFOLHA
		(	IDINDICADORCONTATOFOLHA,
			IDCONTATO,
			IDINDICADORANATEL,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO) 
		VALUES 
		(	:cAuxidIndicadorContatoFolha,
			:cAuxidContato,
			:cAuxidIndicadorAnatel,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
        ULOG_END("CIndicadorContatoFolha::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::Delete( char* cidIndicadorContatoFolha )
{
    ULOG_START("CIndicadorContatoFolha::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidIndicadorContatoFolha = cidIndicadorContatoFolha; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.INDICADORCONTATOFOLHA
			WHERE 
				idIndicadorContatoFolha = :cAuxidIndicadorContatoFolha;
				
				
    ULOG_END("CIndicadorContatoFolha::Delete()");		
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::EraseCtt( char* cidContato ) 
{
    ULOG_START("CIndicadorContatoFolha::EraseCtt()");		
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.INDICADORCONTATOFOLHA
			WHERE 
				IDCONTATO = :cAuxidContato;
    ULOG_END("CIndicadorContatoFolha::EraseCtt()");				
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::EraseAnt( char* cidIndicadorAnatel ) 
{
    ULOG_START("CIndicadorContatoFolha::EraseAnt()");		
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidIndicadorAnatel = cidIndicadorAnatel; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.INDICADORCONTATOFOLHA
			WHERE 
				IDINDICADORANATEL = :cAuxidIndicadorAnatel;
				
	ULOG_END("CIndicadorContatoFolha::EraseAnt()");			
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::ListId( char* cidIndicadorContatoFolha ) 
{
    ULOG_START("CIndicadorContatoFolha::ListId()");		
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidIndicadorContatoFolha = cidIndicadorContatoFolha; 
		struct
		{
			VARCHAR stidIndicadorContatoFolha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorContatoFolhaRegistro;
		struct
		{
			short iidIndicadorContatoFolha;
			short iidContato;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorContatoFolhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   
   		/*	SELECT 
   				IDINDICADORCONTATOFOLHA
	           ,IDCONTATO
	           ,IDINDICADORANATEL
	           ,SGINDICADOR
	           ,DSINDICADOR
			FROM
				CONTATOADM.INDICADORCONTATOFOLHABZEROUM
			WHERE 
				IDINDICADORCONTATOFOLHA = :cAuxidIndicadorContatoFolha
			ORDER BY 
				DSINDICADOR;*/

		/*REMOVENDO BZEROUM
		 TCOSTA 18/06/2007 MPOG
		*/
		EXEC SQL
		DECLARE CursorIndicadorContatoFolhaId CURSOR FOR 
		SELECT 		INDICADORCONTATOFOLHA.IDINDICADORCONTATOFOLHA
				   ,INDICADORCONTATOFOLHA.IDCONTATO
				   ,INDICADORCONTATOFOLHA.IDINDICADORANATEL
				   ,INDICADORANATEL.SGINDICADOR
				   ,INDICADORANATEL.DSINDICADOR
		FROM
			CONTATOADM.INDICADORCONTATOFOLHA INDICADORCONTATOFOLHA,
			APOIO.INDICADORANATEL INDICADORANATEL				
		WHERE 
			  INDICADORANATEL.IDINDICADORANATEL= INDICADORCONTATOFOLHA.IDINDICADORANATEL
		AND
			INDICADORCONTATOFOLHA.IDINDICADORCONTATOFOLHA = :cAuxidIndicadorContatoFolha
		ORDER BY 
			DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorContatoFolhaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorContatoFolha::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorContatoFolhaRegistro, 0, sizeof(stIndicadorContatoFolhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorContatoFolhaId INTO :stIndicadorContatoFolhaRegistro:stIndicadorContatoFolhaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorContatoFolhaRegistro.stidIndicadorContatoFolha.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidContato.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorContatoFolhaId;
		}
		ULOG_END("CIndicadorContatoFolha::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::ListIdContatoFolhaRel( char* cidContato ) 
{
    ULOG_START("CIndicadorContatoFolha::ListIdContatoFolhaRel()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidIndicadorContatoFolha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorContatoFolhaRegistro;
		struct
		{
			short iidIndicadorContatoFolha;
			short iidContato;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorContatoFolhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs

   			/*SELECT 
   				IDINDICADORCONTATOFOLHA
	           ,IDCONTATO
	           ,IDINDICADORANATEL
	           ,SGINDICADOR
	           ,DSINDICADOR
			FROM
				CONTATOADM.INDICADORCONTATOFOLHABZEROUM
			WHERE 
				IDCONTATO = :cAuxidContato
			ORDER BY 
				DSINDICADOR;*/
		/*REMOVENDO BZEROUM
		 TCOSTA 18/06/2007 MPOG
		*/
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorContatoFolhaIdContato CURSOR FOR 
		SELECT 		INDICADORCONTATOFOLHA.IDINDICADORCONTATOFOLHA
		           ,INDICADORCONTATOFOLHA.IDCONTATO
			       ,INDICADORCONTATOFOLHA.IDINDICADORANATEL
				   ,INDICADORANATEL.SGINDICADOR
				   ,INDICADORANATEL.DSINDICADOR
			FROM
				CONTATOADM.INDICADORCONTATOFOLHA INDICADORCONTATOFOLHA,
				APOIO.INDICADORANATEL INDICADORANATEL				
			WHERE 
				  INDICADORANATEL.IDINDICADORANATEL= INDICADORCONTATOFOLHA.IDINDICADORANATEL
			AND
				INDICADORCONTATOFOLHA.IDCONTATO = :cAuxidContato
			ORDER BY 
				DSINDICADOR;
		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorContatoFolhaIdContato;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorContatoFolha::ListIdContatoFolhaRel()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorContatoFolhaRegistro, 0, sizeof(stIndicadorContatoFolhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorContatoFolhaIdContato INTO :stIndicadorContatoFolhaRegistro:stIndicadorContatoFolhaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorContatoFolhaRegistro.stidIndicadorContatoFolha.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidContato.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorContatoFolhaIdContato;
		}
		ULOG_END("CIndicadorContatoFolha::ListIdContatoFolhaRel()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CIndicadorContatoFolha::ListIdContatoFolhaNaoRel( char* cidContato ) 
{
    ULOG_START("CIndicadorContatoFolha::ListIdContatoFolhaNaoRel()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidIndicadorContatoFolha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorContatoFolhaRegistro;
		struct
		{
			short iidIndicadorContatoFolha;
			short iidContato;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorContatoFolhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContatoNr;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorContatoFolhaIdContatoNr CURSOR FOR 
			SELECT 
				 0 IDINDICADORCONTATOFOLHA
			    ,0 IDCONTATO
			    ,IDINDICADORANATEL
			    ,SGINDICADOR
			    ,DSINDICADOR
			FROM 
				APOIO.INDICADORANATEL
			WHERE 
				IDINDICADORANATEL 
			NOT IN
			( 
				SELECT 
					IDINDICADORANATEL
				FROM
					CONTATOADM.INDICADORCONTATOFOLHA
				WHERE 
					IDCONTATO = :cAuxidContato
			)
			ORDER BY 
				DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorContatoFolhaIdContatoNr;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorContatoFolha::ListIdContatoFolhaNaoRel()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorContatoFolhaRegistro, 0, sizeof(stIndicadorContatoFolhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorContatoFolhaIdContatoNr INTO :stIndicadorContatoFolhaRegistro:stIndicadorContatoFolhaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorContatoFolhaRegistro.stidIndicadorContatoFolha.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidContato.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorContatoFolhaIdContato;
		}
		ULOG_END("CIndicadorContatoFolha::ListIdContatoFolhaNaoRel()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContatoNr:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::ListAll( void )
{
    ULOG_START("CIndicadorContatoFolha::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidIndicadorContatoFolha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorContatoFolhaRegistro;
		struct
		{
			short iidIndicadorContatoFolha;
			short iidContato;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorContatoFolhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorContatoFolhaAll CURSOR FOR
			SELECT 
				 0 IDINDICADORCONTATOFOLHA
			    ,0 CONTATO
			    ,IDINDICADORANATEL
			    ,SGINDICADOR
			    ,DSINDICADOR
			FROM 
				APOIO.INDICADORANATEL
			WHERE 
				IDINDICADORANATEL > 0
			ORDER BY 
				DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorContatoFolhaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorContatoFolha::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorContatoFolhaRegistro, 0, sizeof(stIndicadorContatoFolhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorContatoFolhaAll INTO :stIndicadorContatoFolhaRegistro:stIndicadorContatoFolhaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorContatoFolhaRegistro.stidIndicadorContatoFolha.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidContato.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorIndicadorContatoFolhaAll;
		}
		ULOG_END("CIndicadorContatoFolha::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorContatoFolha::ListIdContatoFolha( char* cidContato )
{
    ULOG_START("CIndicadorContatoFolha::ListIdContatoFolha()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		struct
		{
			VARCHAR stidIndicadorContatoFolha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorContatoFolhaRegistro;
		struct
		{
			short iidIndicadorContatoFolha;
			short iidContato;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorContatoFolhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorContatoFolha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContatoFolha;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL
   			DECLARE 
   				CursorListIdContatoFolha CURSOR FOR
			SELECT 
				 INDICADORCONTATOFOLHA.IDINDICADORCONTATOFOLHA
			    ,INDICADORCONTATOFOLHA.IDCONTATO
			    ,INDICADORANATEL.IDINDICADORANATEL
			    ,INDICADORANATEL.SGINDICADOR
			    ,INDICADORANATEL.DSINDICADOR
			FROM 
				CONTATOADM.INDICADORCONTATOFOLHA INDICADORCONTATOFOLHA,
                APOIO.INDICADORANATEL INDICADORANATEL
			WHERE 
                INDICADORCONTATOFOLHA.IDINDICADORANATEL = INDICADORANATEL.IDINDICADORANATEL
            AND
                INDICADORCONTATOFOLHA.IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorListIdContatoFolha;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorContatoFolha::ListIdContatoFolha()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorContatoFolhaRegistro, 0, sizeof(stIndicadorContatoFolhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListIdContatoFolha INTO :stIndicadorContatoFolhaRegistro:stIndicadorContatoFolhaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorContatoFolhaRegistro.stidIndicadorContatoFolha.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidContato.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorContatoFolhaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorListIdContatoFolha;
		}
		ULOG_END("CIndicadorContatoFolha::ListIdContatoFolha()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContatoFolha:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}


void CIndicadorContatoFolha::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
			{
				xml->createTag(cNomeTag);
				//Adiciona a proprieda necessaria para o Weblogic
				xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idIndicador", Registro(x)->cidIndicadorAnatel );
				xml->addItem("nmIndicador", Registro(x)->cdsIndicador ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}
