#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CBxaAnt.h"

CIndicadorAnatelBaixa::CIndicadorAnatelBaixa()
{
}

CIndicadorAnatelBaixa::~CIndicadorAnatelBaixa()
{
}

int CIndicadorAnatelBaixa::Insert( char* cidBaixa
								  ,char* cidIndicadorAnatel
								  ,char* cidUsuarioAlteracao )
{
    ULOG_START("CIndicadorAnatelBaixa::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidIndicadorAnatelBaixa[21+1];
		char* cAuxidBaixa = cidBaixa;
		char* cAuxidIndicadorAnatel = cidIndicadorAnatel;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();
		
		memset( &cAuxidIndicadorAnatelBaixa, 0, sizeof(cAuxidIndicadorAnatelBaixa) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.IndicadorAnatelBaixaSQ.NEXTVAL INTO :cAuxidIndicadorAnatelBaixa FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO CONTATOADM.INDICADORANATELBAIXA
		(	IDINDICADORANATELBAIXA,
			IDBAIXA,
			IDINDICADORANATEL,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO)
		VALUES 
		(	:cAuxidIndicadorAnatelBaixa,
			:cAuxidBaixa,
			:cAuxidIndicadorAnatel,
			:cAuxidUsuarioAlteracao,
			SYSDATE);

        ULOG_END("CIndicadorAnatelBaixa::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CIndicadorAnatelBaixa::Delete( char* cidIndicadorAnatelBaixa )
{
    ULOG_START("CIndicadorAnatelBaixa::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidIndicadorAnatelBaixa = cidIndicadorAnatelBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM CONTATOADM.INDICADORANATELBAIXA
		WHERE IDINDICADORANATELBAIXA = :cAuxidIndicadorAnatelBaixa;
		
		ULOG_END("CIndicadorAnatelBaixa::Delete()");
		
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorAnatelBaixa::EraseBxa( char* cidBaixa ) 
{
    ULOG_START("CIndicadorAnatelBaixa::EraseBxa()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidBaixa = cidBaixa; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM CONTATOADM.INDICADORANATELBAIXA
		WHERE IDBAIXA = :cAuxidBaixa;
		
		ULOG_END("CIndicadorAnatelBaixa::EraseBxa()");
		
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorAnatelBaixa::EraseAnt( char* cidIndicadorAnatel ) 
{
    ULOG_START("CIndicadorAnatelBaixa::EraseAnt()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidIndicadorAnatel = cidIndicadorAnatel; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM CONTATOADM.INDICADORANATELBAIXA
		WHERE IDINDICADORANATEL = :cAuxidIndicadorAnatel;
		
		ULOG_END("CIndicadorAnatelBaixa::EraseAnt()");
		
	return 1;
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CIndicadorAnatelBaixa::ListId( char* cidIndicadorAnatelBaixa ) 
{
    ULOG_START("CIndicadorAnatelBaixa::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidIndicadorAnatelBaixa = cidIndicadorAnatelBaixa; 
		struct
		{
			VARCHAR stidIndicadorAnatelBaixa[21+1];
			VARCHAR stidBaixa[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorAnatelBaixaRegistro;
		struct
		{
			short iidIndicadorAnatelBaixa;
			short iidBaixa;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorAnatelBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
/*
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaId CURSOR FOR 
   			SELECT 
   				IDINDICADORANATELBAIXA
	           ,IDBAIXA
	           ,IDINDICADORANATEL
	           ,SGINDICADOR
	           ,DSINDICADOR
			FROM
				CONTATOADM.INDICADORANATELBAIXABZEROUM
			WHERE 
				IDINDICADORANATELBAIXA = :cAuxidIndicadorAnatelBaixa
			ORDER BY 
				DSINDICADOR;
*/				
				
		//Declara um cursor para listar os IDs
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaId CURSOR FOR 
   			SELECT 
   				INDICADORANATELBAIXA.IDINDICADORANATELBAIXA
	           ,BAIXA.IDBAIXA
	           ,INDICADORANATEL.IDINDICADORANATEL
	           ,INDICADORANATEL.SGINDICADOR
	           ,INDICADORANATEL.DSINDICADOR
			FROM 
			    CONTATOADM.BAIXA                BAIXA,
			    APOIO.INDICADORANATEL           INDICADORANATEL,
			    CONTATOADM.INDICADORANATELBAIXA INDICADORANATELBAIXA
			WHERE 
				INDICADORANATELBAIXA.IDINDICADORANATEL = INDICADORANATEL.IDINDICADORANATEL
			AND 
				INDICADORANATELBAIXA.IDBAIXA = BAIXA.IDBAIXA
			AND 
				INDICADORANATELBAIXA.IDINDICADORANATELBAIXA = :cAuxidIndicadorAnatelBaixa
			ORDER BY 
				INDICADORANATEL.DSINDICADOR;
				

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorAnatelBaixaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CIndicadorAnatelBaixa::ListId()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorAnatelBaixaRegistro, 0, sizeof(stIndicadorAnatelBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorAnatelBaixaId INTO :stIndicadorAnatelBaixaRegistro:stIndicadorAnatelBaixaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatelBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorAnatelBaixaId;
		}
		
		ULOG_END("CIndicadorAnatelBaixa::ListId()");
		
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CIndicadorAnatelBaixa::ListIdBaixaRel( char* cidBaixa ) 
{
    ULOG_START("CIndicadorAnatelBaixa::ListIdBaixaRel()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidBaixa = cidBaixa; 
		struct
		{
			VARCHAR stidIndicadorAnatelBaixa[21+1];
			VARCHAR stidBaixa[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorAnatelBaixaRegistro;
		struct
		{
			short iidIndicadorAnatelBaixa;
			short iidBaixa;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorAnatelBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdBaixa;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs 
		/*
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaIdBaixa CURSOR FOR 
   			SELECT 
   				IDINDICADORANATELBAIXA
	           ,IDBAIXA
	           ,IDINDICADORANATEL
	           ,SGINDICADOR
	           ,DSINDICADOR
			FROM
				CONTATOADM.INDICADORANATELBAIXABZEROUM
			WHERE 
				IDBAIXA = :cAuxidBaixa
			ORDER BY
				DSINDICADOR;
        */

		//Declara um cursor para listar os IDs
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaIdBaixa CURSOR FOR 
			SELECT 
				INDICADORANATELBAIXA.IDINDICADORANATELBAIXA
	           ,BAIXA.IDBAIXA
	           ,INDICADORANATEL.IDINDICADORANATEL
	           ,INDICADORANATEL.SGINDICADOR
	           ,INDICADORANATEL.DSINDICADOR
			FROM 
			    CONTATOADM.BAIXA                BAIXA,
			    APOIO.INDICADORANATEL           INDICADORANATEL,
			    CONTATOADM.INDICADORANATELBAIXA INDICADORANATELBAIXA
			WHERE 
				INDICADORANATELBAIXA.IDINDICADORANATEL = INDICADORANATEL.IDINDICADORANATEL
			AND 
				INDICADORANATELBAIXA.IDBAIXA = BAIXA.IDBAIXA
			AND 
				INDICADORANATELBAIXA.IDBAIXA = :cAuxidBaixa
			ORDER BY 
				INDICADORANATEL.DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorAnatelBaixaIdBaixa;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CIndicadorAnatelBaixa::ListIdBaixaRel()");
		   return 0;//Erro
		}   
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorAnatelBaixaRegistro, 0, sizeof(stIndicadorAnatelBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorAnatelBaixaIdBaixa INTO :stIndicadorAnatelBaixaRegistro:stIndicadorAnatelBaixaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatelBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorAnatelBaixaIdBaixa;
		}
		ULOG_END("CIndicadorAnatelBaixa::ListIdBaixaRel()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdBaixa:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CIndicadorAnatelBaixa::ListIdBaixaNaoRel( char* cidBaixa ) 
{
    ULOG_START("CIndicadorAnatelBaixa::ListIdBaixaNaoRel()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidBaixa = cidBaixa; 
		struct
		{
			VARCHAR stidIndicadorAnatelBaixa[21+1];
			VARCHAR stidBaixa[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorAnatelBaixaRegistro;
		struct
		{
			short iidIndicadorAnatelBaixa;
			short iidBaixa;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorAnatelBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdBaixaNr;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaIdBaixaNr CURSOR FOR 
			SELECT 
				 0 IDINDICADORANATELBAIXA
			    ,0 IDBAIXA
			    ,IDINDICADORANATEL
			    ,SGINDICADOR
			    ,DSINDICADOR
			FROM 
				APOIO.INDICADORANATEL
			WHERE 
				IDINDICADORANATEL 
			NOT IN
			( 
				SELECT 
					IDINDICADORANATEL
				FROM
					CONTATOADM.INDICADORANATELBAIXA
				WHERE 
					IDBAIXA = :cAuxidBaixa
			)
			ORDER BY
				DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorAnatelBaixaIdBaixaNr;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorAnatelBaixa::ListIdBaixaNaoRel()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorAnatelBaixaRegistro, 0, sizeof(stIndicadorAnatelBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorAnatelBaixaIdBaixaNr INTO :stIndicadorAnatelBaixaRegistro:stIndicadorAnatelBaixaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatelBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorIndicadorAnatelBaixaIdBaixa;
		}
		ULOG_END("CIndicadorAnatelBaixa::ListIdBaixaNaoRel()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdBaixaNr:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CIndicadorAnatelBaixa::ListAll( void )
{
    ULOG_START("CIndicadorAnatelBaixa::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidIndicadorAnatelBaixa[21+1];
			VARCHAR stidBaixa[21+1];
			VARCHAR stidIndicadorAnatel[21+1];
			VARCHAR stsgIndicador[255+1];
			VARCHAR stdsIndicador[255+1];
		} stIndicadorAnatelBaixaRegistro;
		struct
		{
			short iidIndicadorAnatelBaixa;
			short iidBaixa;
			short iidIndicadorAnatel;
			short isgIndicador;
			short idsIndicador;
		} stIndicadorAnatelBaixaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraIndicadorAnatelBaixa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
		/*
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaAll CURSOR FOR
   			SELECT IDINDICADORANATELBAIXA
	              ,IDBAIXA
	              ,IDINDICADORANATEL
	              ,SGINDICADOR
	              ,DSINDICADOR
			FROM
				CONTATOADM.INDICADORANATELBAIXABZEROUM
			ORDER BY
				DSINDICADOR;
        */
        
   		EXEC SQL
   			DECLARE 
   				CursorIndicadorAnatelBaixaAll CURSOR FOR
   			SELECT 
   				INDICADORANATELBAIXA.IDINDICADORANATELBAIXA
	           ,BAIXA.IDBAIXA
	           ,INDICADORANATEL.IDINDICADORANATEL
	           ,INDICADORANATEL.SGINDICADOR
	           ,INDICADORANATEL.DSINDICADOR
			FROM 
			    CONTATOADM.BAIXA                BAIXA,
			    APOIO.INDICADORANATEL           INDICADORANATEL,
			    CONTATOADM.INDICADORANATELBAIXA INDICADORANATELBAIXA
			WHERE 
				INDICADORANATELBAIXA.IDINDICADORANATEL = INDICADORANATEL.IDINDICADORANATEL
			AND 
				INDICADORANATELBAIXA.IDBAIXA = BAIXA.IDBAIXA
			ORDER BY 
				INDICADORANATEL.DSINDICADOR;

		//Abre o cursor
		EXEC SQL OPEN CursorIndicadorAnatelBaixaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CIndicadorAnatelBaixa::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stIndicadorAnatelBaixaRegistro, 0, sizeof(stIndicadorAnatelBaixaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorIndicadorAnatelBaixaAll INTO :stIndicadorAnatelBaixaRegistro:stIndicadorAnatelBaixaIndicator;
				//Adiciona a classe
				Add( (char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatelBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidBaixa.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stidIndicadorAnatel.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stsgIndicador.arr
				    ,(char*)stIndicadorAnatelBaixaRegistro.stdsIndicador.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorIndicadorAnatelBaixaAll;
		}
		ULOG_END("CIndicadorAnatelBaixa::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CIndicadorAnatelBaixa::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
			{
				xml->createTag(cNomeTag);
				//Adiciona a proprieda necessaria para o Weblogic
				xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idIndicador", Registro(x)->cidIndicadorAnatel );
				xml->addItem("nmIndicador", Registro(x)->cdsIndicador ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}
