#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CCttLin.h"

CContatoTipoLinha::CContatoTipoLinha()
{
}

CContatoTipoLinha::~CContatoTipoLinha()
{
}

int CContatoTipoLinha::Insert( 
			char* cidContato,
			char* cidTipoLinha,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CContatoTipoLinha::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidContatoTipoLinha[21+1];
		char* cAuxidContato = cidContato;
		char* cAuxidTipoLinha = cidTipoLinha;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();
		
		memset( &cAuxidContatoTipoLinha, 0, sizeof(cAuxidContatoTipoLinha) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.ContatoTipoLinhaSQ.NEXTVAL INTO :cAuxidContatoTipoLinha FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.ContatoTipoLinha
		(	idContatoTipoLinha,
			idContato,
			idTipoLinha,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidContatoTipoLinha,
			:cAuxidContato,
			:cAuxidTipoLinha,
			:cAuxidUsuarioAlteracao,
			SYSDATE);

        ULOG_END("CContatoTipoLinha::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CContatoTipoLinha::Delete( char* cidContatoTipoLinha )
{
    ULOG_START("CContatoTipoLinha::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContatoTipoLinha = cidContatoTipoLinha; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoTipoLinha
		WHERE (idContatoTipoLinha = :cAuxidContatoTipoLinha);
		
		ULOG_END("CContatoTipoLinha::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoTipoLinha::EraseFlh( char* cidContato ) 
{
    ULOG_START("CContatoTipoLinha::EraseFlh()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoTipoLinha
		WHERE (idContato = :cAuxidContato);
		
		ULOG_END("CContatoTipoLinha::EraseFlh()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoTipoLinha::EraseLin( char* cidTipoLinha ) 
{
    ULOG_START("CContatoTipoLinha::EraseLin()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidTipoLinha = cidTipoLinha; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoTipoLinha
		WHERE (idTipoLinha = :cAuxidTipoLinha);
		ULOG_END("CContatoTipoLinha::EraseLin()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoTipoLinha::ListId( char* cidContatoTipoLinha ) 
{
    ULOG_START("CContatoTipoLinha::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContatoTipoLinha = cidContatoTipoLinha; 
		struct
		{
			VARCHAR stidContatoTipoLinha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoLinha[21+1];
		} stContatoTipoLinhaRegistro;
		struct
		{
			short iidContatoTipoLinha;
			short iidContato;
			short iidTipoLinha;
		} stContatoTipoLinhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorContatoTipoLinhaId CURSOR FOR 
   		SELECT 	idContatoTipoLinha,
	            idContato,
	            idTipoLinha
		FROM contatoadm.ContatoTipoLinha
		WHERE idContatoTipoLinha = :cAuxidContatoTipoLinha;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoTipoLinhaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoTipoLinha::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoTipoLinhaRegistro, 0, sizeof(stContatoTipoLinhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoTipoLinhaId INTO :stContatoTipoLinhaRegistro:stContatoTipoLinhaIndicator;
				//Adiciona a classe
				Add( 	(char*)stContatoTipoLinhaRegistro.stidContatoTipoLinha.arr,
				(char*)stContatoTipoLinhaRegistro.stidContato.arr,
				(char*)stContatoTipoLinhaRegistro.stidTipoLinha.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorContatoTipoLinhaId;
		}
		ULOG_END("CContatoTipoLinha::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoTipoLinha::ListIdContato( char* cidContato ) 
{
    ULOG_START("CContatoTipoLinha::ListIdContato()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContatoTipoLinha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoLinha[21+1];
		} stContatoTipoLinhaRegistro;
		struct
		{
			short iidContatoTipoLinha;
			short iidContato;
			short iidTipoLinha;
		} stContatoTipoLinhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorListIdContato CURSOR FOR 
   			SELECT 	
   				IDCONTATOTIPOLINHA,
				IDCONTATO,
				IDTIPOLINHA
			FROM 
				CONTATOADM.CONTATOTIPOLINHA
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorListIdContato;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoTipoLinha::ListIdContato()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoTipoLinhaRegistro, 0, sizeof(stContatoTipoLinhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListIdContato INTO :stContatoTipoLinhaRegistro:stContatoTipoLinhaIndicator;
				//Adiciona a classe
				Add(
					(char*)stContatoTipoLinhaRegistro.stidContatoTipoLinha.arr,
					(char*)stContatoTipoLinhaRegistro.stidContato.arr,
					(char*)stContatoTipoLinhaRegistro.stidTipoLinha.arr 
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListIdContato;
		}
		ULOG_END("CContatoTipoLinha::ListIdContato()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CContatoTipoLinha::ListAll( void )
{
    ULOG_START("CContatoTipoLinha::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContatoTipoLinha[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidTipoLinha[21+1];
		} stContatoTipoLinhaRegistro;
		struct
		{
			short iidContatoTipoLinha;
			short iidContato;
			short iidTipoLinha;
		} stContatoTipoLinhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoTipoLinha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorContatoTipoLinhaAll CURSOR FOR
   		SELECT 	idContatoTipoLinha,
		idContato,
		idTipoLinha
		FROM contatoadm.ContatoTipoLinha; 

		//Abre o cursor
		EXEC SQL OPEN CursorContatoTipoLinhaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoTipoLinha::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoTipoLinhaRegistro, 0, sizeof(stContatoTipoLinhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoTipoLinhaAll INTO :stContatoTipoLinhaRegistro:stContatoTipoLinhaIndicator;
				//Adiciona a classe
				Add( 	(char*)stContatoTipoLinhaRegistro.stidContatoTipoLinha.arr,
				(char*)stContatoTipoLinhaRegistro.stidContato.arr,
				(char*)stContatoTipoLinhaRegistro.stidTipoLinha.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorContatoTipoLinhaAll;
		}
		ULOG_END("CContatoTipoLinha::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CContatoTipoLinha::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContatoTipoLinha", Registro(x)->cidContatoTipoLinha );
				xml->addItem("idContato", Registro(x)->cidContato );
				xml->addItem("idTipoLinha", Registro(x)->cidTipoLinha ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
