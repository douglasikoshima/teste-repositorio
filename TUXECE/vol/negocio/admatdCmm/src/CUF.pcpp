#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CUF.h"

CUF::CUF()
{
}

CUF::~CUF()
{
}

int CUF::RelacaoFrdUF( char* cidFeriado )
{
    ULOG_START("CUF::RelacaoFrdUF()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidFeriado = cidFeriado; 
		struct
		{
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
			VARCHAR stnrFusoHorario[21+1];
		} stUFRegistro;
		struct
		{
			short iidUF;
			short isgUF;
			short inmUF;
			short inrFusoHorario;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraUF();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros
		EXEC SQL 
			DECLARE 
				CursorUFRelacao_00 CURSOR FOR
   			SELECT 
				UF.IDUF,
				UF.SGUF,
				UF.NMUF,
				UF.NRFUSOHORARIO
			FROM 
				APOIO.UF UF, 
				CALENDARIO.UFFERIADO
			WHERE 
				UF.IDUF = CALENDARIO.UFFERIADO.IDFERIADO 
			AND 
				CALENDARIO.UFFERIADO.IDFERIADO = :cAuxidFeriado
			ORDER BY
				UF.NMUF;

		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacao;

		EXEC SQL OPEN CursorUFRelacao_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CUF::RelacaoFrdUF()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFRelacao_00 INTO :stUFRegistro:stUFIndicator;
				//Adiciona a classe
				Add( 
					(char*)stUFRegistro.stidUF.arr,
					(char*)stUFRegistro.stsgUF.arr,
					(char*)stUFRegistro.stnmUF.arr,
					(char*)stUFRegistro.stnrFusoHorario.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorUFRelacao_00;
		}
		ULOG_END("CUF::RelacaoFrdUF()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoRelacao:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUF::ExistemFrdUF( char* cidFeriado )
{
    ULOG_START("CUF::ExistemFrdUF()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidFeriado = cidFeriado; 
		struct
		{
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
			VARCHAR stnrFusoHorario[21+1];
		} stUFRegistro;
		struct
		{
			short iidUF;
			short isgUF;
			short inmUF;
			short inrFusoHorario;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		ZeraUF();

		sqlca.sqlcode=0;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		//Declara um cursor para listar os Registros
   		/*EXEC SQL 
			DECLARE 
				CursorUFExistem_00 CURSOR FOR 
   			SELECT 
				UF.IDUF,
				UF.SGUF,
				UF.NMUF,
				UF.NRFUSOHORARIO
			FROM 
				APOIO.UF UF
			WHERE 
				UF.IDUF NOT IN 
				( 
					SELECT 
						APOIO.UF.IDUF 
					FROM 
						APOIO.UF, 
						CALENDARIO.UFFERIADOZEROUM
					WHERE 
						APOIO.UF.IDUF = CALENDARIO.UFFERIADOZEROUM.IDFERIADO 
					AND 
						CALENDARIO.UFFERIADOZEROUM.IDFERIADO = :cAuxidFeriado  
				)
				AND
					UF.IDUF > 0
				ORDER BY
					UF.NMUF; */


/*REMOVIDO BZEROUM
  TCOSTA =>MPOG*/
EXEC SQL 
	DECLARE CursorUFExistem_00 CURSOR FOR 
		SELECT 	UF.IDUF,
				UF.SGUF,
				UF.NMUF,
				UF.NRFUSOHORARIO
		FROM   APOIO.UF UF
		WHERE  UF.IDUF NOT IN( SELECT APOIO.UF.IDUF 
								FROM  APOIO.UF, 
									  CALENDARIO.UFFERIADO
								WHERE APOIO.UF.IDUF = CALENDARIO.UFFERIADO.IDFERIADO 
								AND CALENDARIO.UFFERIADO.IDFERIADO = :cAuxidFeriado )
		AND	UF.IDUF > 0
		ORDER BY UF.NMUF; 

		EXEC SQL WHENEVER SQLERROR GOTO GotoExistem;

		EXEC SQL OPEN CursorUFExistem_00;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CUF::ExistemFrdUF()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFExistem_00 INTO :stUFRegistro:stUFIndicator;
				//Adiciona a classe
				Add(
					(char*)stUFRegistro.stidUF.arr,
					(char*)stUFRegistro.stsgUF.arr,
					(char*)stUFRegistro.stnmUF.arr,
					(char*)stUFRegistro.stnrFusoHorario.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorUFExistem_00;
		}
		ULOG_END("CUF::ExistemFrdUF()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoExistem:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CUF::ListId( char* cidUF ) 
{
    ULOG_START("CUF::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidUF = cidUF; 
		struct
		{
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
			VARCHAR stnrFusoHorario[21+1];
		} stUFRegistro;
		struct
		{
			short iidUF;
			short isgUF;
			short inmUF;
			short inrFusoHorario;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUF();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorUFId CURSOR FOR 
   			SELECT 	
				IDUF,
				SGUF,
				NMUF,
				NRFUSOHORARIO
			FROM 
				APOIO.UF
			WHERE 
				IDUF = :cAuxidUF;

		//Abre o cursor
		EXEC SQL OPEN CursorUFId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CUF::ListId()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFId INTO :stUFRegistro:stUFIndicator;
				//Adiciona a classe
				Add(
					(char*)stUFRegistro.stidUF.arr,
					(char*)stUFRegistro.stsgUF.arr,
					(char*)stUFRegistro.stnmUF.arr,
					(char*)stUFRegistro.stnrFusoHorario.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorUFId;
		}
		ULOG_END("CUF::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CUF::ListAll( void )
{
    ULOG_START("CUF::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
			VARCHAR stnrFusoHorario[21+1];
		} stUFRegistro;
		struct
		{
			short iidUF;
			short isgUF;
			short inmUF;
			short inrFusoHorario;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraUF();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorUFAll CURSOR FOR
   			SELECT 	
				UF.IDUF,
				UF.SGUF,
				UF.NMUF,
				UF.NRFUSOHORARIO
			FROM 
				APOIO.UF UF
			WHERE
				UF.IDUF > 0
			ORDER BY
				UF.NMUF;

		//Abre o cursor
		EXEC SQL OPEN CursorUFAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CUF::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorUFAll INTO :stUFRegistro:stUFIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stUFRegistro.stidUF.arr,
					(char*)stUFRegistro.stsgUF.arr,
					(char*)stUFRegistro.stnmUF.arr,
					(char*)stUFRegistro.stnrFusoHorario.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorUFAll;
		}
		ULOG_END("CUF::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CUF::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idUF", Registro(x)->cidUF );
				xml->addItem("sgUF", Registro(x)->csgUF );
				xml->addItem("nmUF", Registro(x)->cnmUF );
				xml->addItem("nrFusoHorario", Registro(x)->cnrFusoHorario ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
