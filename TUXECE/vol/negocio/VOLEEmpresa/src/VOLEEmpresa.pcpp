/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *   [A0003] - Marcelo Nunes - Julho/2016 
 *             VAFEI-62662 - INC000001945471 - Falha na lógica executada no serviço EMPRESAS 20
 *             Correcao no metodo: ListaCNPJMasterProCNovo()
 *
 */

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
#include <string>
#include <list>
#include <iterator>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

 
list<string>::iterator itLst_nrDoc;
typedef list<string> LST_DOCS;

 
#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#define strToOra(vchar,bstr)   vchar.len = strlen(bstr);strncpy((char *)vchar.arr,bstr,vchar.len);vchar.arr[vchar.len] = 0

char * rtrim( char * pStr );
char * ltrim( char * pStr );
char * trim( char * pStr );
void BuscarGestoresDeContaR( char * idPessoaGestorPrm, char *CNPJ, XMLGen * xml_g );
void getCJNPJsByIdGestor_GC( char * idPessoaGestorPrm, char* nrDocumentoPrm, XMLGen * xml_g );
int  getCJNPJsByIdGestor_GM( char * idPessoaGestorPrm, XMLGen * xml_g );
void getCNPJsVinculoIdGestor( char * idPessoaGestorPrm, XMLGen * xml_g );
void doAtualizaInPrimeiroAcesso( char * idPessoaGestorPrm, XMLGen * xml_g );

int obterParametro( char * cdParametro, char * dsValorParametro);
int ListaCNPJMasterProC( char * idGestorPrm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  );
int ListaCNPJMasterProCNovo( char * idGestorPrm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  );
int DetalheCNPJMasterProC( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  );
int DetalheCNPJMasterProCRank( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  );
int DetalheCNPJ_ConsolidadoProC( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  );

int ListaContasProC( char * idPessoaGestorPrm, 
                      char * nrDocumentoPrm, 
                      char * pszNrPagina, 
                      char * qtdMaxLin, 
                      XMLGen * xml_g ) ;

int DetalheCNPJMasterUnicoProC( char * nrCNPJ_Prm, XMLGen * xml_g  );
long QtdeCNPJsMaster( char * nrCNPJPrm );
long QtdeDetCNPJsMaster( char * nrCNPJPrm );
long QtdeDetCNPJsMasterRank( char * nrCNPJPrm );
long QtdeContasCNPJ( char * idPessoaGestorPrm , char * nrCNPJPrm );
int GestoresDeContaR( char * idPessoaGestorPrm, char * CNPJ, char * pszNrPagina, char * qtdMaxLin, XMLGen* xml_g);
long QtdeContasGC( char * idPessoaGestorPrm , char * nrCNPJPrm );
int GestoresDeContaUnicoR( char * idPessoaGestorPrm, char * CNPJ, char * cdContaPrm, XMLGen * xml_g );
int ListaContaUnicoProC( char * idPessoaGestorPrm , char * nrDocumentoPrm , char * cdContaPrm , XMLGen * xml_g );

void doAtualizaInPrimeiroAcesso( char * idPessoaGestorPrm, XMLGen * xml_g )
{
	ULOG_START( "doAtualizaInPrimeiroAcesso()" );

	//ULOG( "idPessoaGestorPrm [%s]", idPessoaGestorPrm );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[42];

    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

    EXEC SQL
    	UPDATE CUSTOMER.PESSOAGESTOR
    	SET INPRIMEIROACESSO = 1
    	WHERE IDPESSOAGESTOR = :idPessoaGestor
    	;

    EXEC SQL COMMIT;

	ULOG_END( "doAtualizaInPrimeiroAcesso()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);
}



void getEmpresasByIdGestor( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getEmpresasByIdGestor()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[42];

       char idpessoa[43];
       char nmpessoa[256];
       char sgtipopessoa[64];
       char idconta[43];
       char idcontasistemaorigem[43];
       char idpessoadepara[43];
       char idsegmentacao[43];
       char idufoperadora[43];
       char sguf[64];
       char idtipocarteira[43];
       char idpessodeparaconta[43];
	   char nmConta[256];
       
       short i_idpessoa = -1;
       short i_nmpessoa = -1;
       short i_sgtipopessoa = -1;
       short i_idconta = -1;
       short i_idcontasistemaorigem = -1;
       short i_idpessoadepara = -1;
       short i_idsegmentacao = -1;
       short i_idufoperadora = -1;
       short i_sguf = -1;
       short i_idtipocarteira = -1;
       short i_idpessodeparaconta = -1;
	   short i_nmConta = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    /*
    EXEC SQL
    SELECT
       COUNT(IDPESSOAGESTOR)
    INTO
       :inExisteGestor
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;
    
    if ( inExisteGestor == 0 )
    {
    }
    */
    
    EXEC SQL DECLARE csr_1 CURSOR FOR
    select 
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from
       VOL.EMPRESAGESTORV01
    where
       idpessoagestor = :idPessoaGestor    
    and rownum < 11	   
    union
    select
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from
       VOL.EMPRESAGESTORV01
    where
       idpessoagestor = :idPessoaGestor    
    and idconta in (select cg.idconta 
                            from vole.contagestor cg 
                           where cg.idpessoagestor = :idPessoaGestor )
    and rownum < 11 ;


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_1;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_1 INTO
           :idpessoa:i_idpessoa ,
           :nmpessoa:i_nmpessoa ,
           :sgtipopessoa:i_sgtipopessoa ,
           :idconta:i_idconta ,
           :idcontasistemaorigem:i_idcontasistemaorigem ,
           :idpessoadepara:i_idpessoadepara ,
           :idsegmentacao:i_idsegmentacao ,
           :idufoperadora:i_idufoperadora ,
           :sguf:i_sguf ,
           :idtipocarteira:i_idtipocarteira ,
           :idpessodeparaconta:i_idpessodeparaconta,
		   :nmConta:i_nmConta;

        xml_g->createTag( "EmpresasByIdGestorVO" );
            xml_g->addItem( "idPessoa"             , trim(idpessoa) );
            xml_g->addItem( "nmPessoa"             , trim(nmpessoa) );
            xml_g->addItem( "sgTipoPessoa"         , trim(sgtipopessoa) );
            xml_g->addItem( "idConta"              , trim(idconta) );
            xml_g->addItem( "idContaSistemaOrigem" , trim(idcontasistemaorigem) );
            xml_g->addItem( "idPessoaDePara"       , trim(idpessoadepara) );
            xml_g->addItem( "idSegmentacao"        , trim(idsegmentacao) );
            xml_g->addItem( "idUFOperadora"        , trim(idufoperadora) );
            xml_g->addItem( "sgUF"                 , trim(sguf) );
            xml_g->addItem( "idTipoCarteira"       , trim(idtipocarteira) );
            xml_g->addItem( "idPessoDeParaConta"   , trim(idpessodeparaconta) );
			xml_g->addItem( "nmConta"   , trim(nmConta) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_1;

    ULOG_END( "getEmpresasByIdGestor()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCNPJ( char * idPessoaPrm, XMLGen* xml_g )
{
    ULOG_START( "getCNPJ()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoa[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoa, idPessoaPrm );
    
    ULOG( "idPessoa [%s]", idPessoa );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_2 CURSOR FOR
    select 
       d.nrdocumento 
	from 
       customer.pessoadocumento pd, 
	   customer.documento d, 
	   apoio.tipodocumento td 
	where 
       pd.iddocumento = d.iddocumento  
    and td.idtipodocumento = d.idtipodocumento 
    and td.sgclassificacao ='CNPJ' 
    and pd.idpessoa = :idPessoa ;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_2;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_2 INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "getCNPJVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_2;

    ULOG_END( "getCNPJ()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getEmpresaByAccountNumber( char * idSistemaOrigemPrm, XMLGen* xml_g )
{
    ULOG_START( "getEmpresaByAccountNumber()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idSistemaOrigem[43];

       char idpessoa[43];
       char nmpessoa[256];
       char sgtipopessoa[64];
       char idconta[43];
       char idcontasistemaorigem[43];
       char idpessoadepara[43];
       char idsegmentacao[43];
       char idufoperadora[43];
       char sguf[64];
       char idtipocarteira[43];
       char idpessodeparaconta[43];
	   char nmConta[256];
       
       short i_idpessoa = -1;
       short i_nmpessoa = -1;
       short i_sgtipopessoa = -1;
       short i_idconta = -1;
       short i_idcontasistemaorigem = -1;
       short i_idpessoadepara = -1;
       short i_idsegmentacao = -1;
       short i_idufoperadora = -1;
       short i_sguf = -1;
       short i_idtipocarteira = -1;
       short i_idpessodeparaconta = -1;
	   short i_nmConta = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idSistemaOrigem, idSistemaOrigemPrm );
    
    ULOG( "idSistemaOrigem [%s]", idSistemaOrigem );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_3 CURSOR FOR
    select 
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from 
       vol.empresacontav01
    where
       idconta = (select idconta 
                     from customer.conta 
                     where idcontasistemaorigem = :idSistemaOrigem ) ;


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_3;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_3 INTO
           :idpessoa:i_idpessoa ,
           :nmpessoa:i_nmpessoa ,
           :sgtipopessoa:i_sgtipopessoa ,
           :idconta:i_idconta ,
           :idcontasistemaorigem:i_idcontasistemaorigem ,
           :idpessoadepara:i_idpessoadepara ,
           :idsegmentacao:i_idsegmentacao ,
           :idufoperadora:i_idufoperadora ,
           :sguf:i_sguf ,
           :idtipocarteira:i_idtipocarteira ,
           :idpessodeparaconta:i_idpessodeparaconta,
		   :nmConta:i_nmConta;

        xml_g->createTag( "EmpresaByAccountNumberVO" );
            xml_g->addItem( "idPessoa"             , trim(idpessoa) );
            xml_g->addItem( "nmPessoa"             , trim(nmpessoa) );
            xml_g->addItem( "sgTipoPessoa"         , trim(sgtipopessoa) );
            xml_g->addItem( "idConta"              , trim(idconta) );
            xml_g->addItem( "idContaSistemaOrigem" , trim(idcontasistemaorigem) );
            xml_g->addItem( "idPessoaDePara"       , trim(idpessoadepara) );
            xml_g->addItem( "idSegmentacao"        , trim(idsegmentacao) );
            xml_g->addItem( "idUFOperadora"        , trim(idufoperadora) );
            xml_g->addItem( "sgUF"                 , trim(sguf) );
            xml_g->addItem( "idTipoCarteira"       , trim(idtipocarteira) );
            xml_g->addItem( "idPessoDeParaConta"   , trim(idpessodeparaconta) );
			xml_g->addItem( "nmConta"   , trim(nmConta) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_3;

    ULOG_END( "getEmpresaByAccountNumber()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor_VOLE( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_4_VOLE CURSOR FOR
    select 
       distinct(nrdocumento) 
    from 
       vole.contagestor contagestor, 
       customer.pessoaconta pessoaconta, 
       customer.pessoadocumento pessoadocumento, 
       customer.documento documento, 
       apoio.tipodocumento tipodocumento, 
       customer.pessoadepara pessoadepara     
    where 
       pessoadocumento.iddocumento = documento.iddocumento 
    and tipodocumento.idtipodocumento = documento.idtipodocumento 
    and tipodocumento.sgclassificacao = 'CNPJ' 
    and pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
    and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
    and contagestor.idconta=pessoaconta.idconta     
    and pessoaconta.IDTIPORELACIONAMENTO = 2     
    and contagestor.IDPESSOAGESTOR = :idPessoaGestor ;
                
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_4_VOLE;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_4_VOLE INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "CJNPJByIdGestorVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_4_VOLE;

    ULOG_END( "getCJNPJsByIdGestor_VOLE()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor()" );
    
   LST_DOCS     pDocs;
    string       nrCNPJ;
    char   MsgRet[16];
   
    struct sqlca sqlca;
	int ACESSO_GESTOR_DE_CONTA=0;


    EXEC SQL BEGIN DECLARE SECTION;

        int ctGestorMaster;
        char idPessoaGestor[43];

        VARCHAR nrCPF[65];
        short i_nrCPF = -1;
        
        VARCHAR nrDocumento[65];
        short i_nrDocumento = -1;
        
        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;
        
        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
       
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
		
       
        VARCHAR idPessoa[65];
        short   i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa = -1;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa = -1;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara = -1;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao = -1;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora = -1;
        VARCHAR sgUF[256];
        short   i_sgUF = -1;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR idPessoDeParaConta[256];
        short   i_idPessoDeParaConta = -1;
        
		VARCHAR parametroValor[256];
		const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
		short i_parametroValor = -1;
        
    EXEC SQL END DECLARE SECTION;	
    
    memset( &nrCPF, 0x0, sizeof(nrCPF) );
    memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
    memset( &idConta    , 0x0, sizeof(idConta) );
    memset( &cdConta    , 0x0, sizeof(cdConta) );
    memset( &sgPermissao, 0x0, sizeof(sgPermissao) );

    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
	EXEC SQL
    SELECT
		DSVALORPARAMETRO 
	INTO 
		:parametroValor:i_parametroValor
    FROM 
		APOIO.PARAMETRO
    WHERE  
		CDPARAMETRO = :parametro;

	if(i_parametroValor != -1)
	{
		ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
	}
	else
	{
		ACESSO_GESTOR_DE_CONTA = 1;
    }
    
    EXEC SQL
    SELECT
       NRDOCUMENTO
    INTO
       :nrCPF:i_nrCPF
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;

    CONVIND( nrCPF, i_nrCPF );
    
    ULOG( "@@@ Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

    EXEC SQL
    SELECT
       COUNT(NRDOCUMENTOGESTOR)
    INTO
       :ctGestorMaster
    FROM
       CUSTOMER.PESSOAGESTORMASTER
    WHERE
       NRDOCUMENTOGESTOR = :nrCPF ;
    
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    ULOG( "ctGestorMaster [%d]", ctGestorMaster );

    if ( ctGestorMaster > 0 )
    {
        ULOG( "*** Encontrou Gestor Master, realizando busca..." );
    
         EXEC SQL DECLARE csr_GestorMaster CURSOR FOR
		   SELECT   eg.idpessoa,
						eg.nmpessoa,
						eg.sgtipopessoa,
						eg.idpessoadepara,
						eg.idsegmentacao,
						eg.idufoperadora,
						eg.sguf,
						eg.idtipocarteira,
						eg.nrCNPJ
		   FROM VOL.EMPRESAGESTOR_GM_V01 eg
		   WHERE     eg.nrCPF = :nrCPF
			AND eg.inAssociacao = 1;		

         
         EXEC SQL OPEN csr_GestorMaster;
        for( ;; ) 
         {
            memset( &idPessoa       , 0x0, sizeof(idPessoa) );
            memset( &nmPessoa       , 0x0, sizeof(nmPessoa) );
            memset( &sgTipoPessoa   , 0x0, sizeof(sgTipoPessoa) );
            memset( &idPessoaDePara , 0x0, sizeof(idPessoaDePara) );
            memset( &idSegmentacao  , 0x0, sizeof(idSegmentacao) );
            memset( &idUFOperadora  , 0x0, sizeof(idUFOperadora) );
            memset( &sgUF           , 0x0, sizeof(sgUF) );
            memset( &idTipoCarteira , 0x0, sizeof(idTipoCarteira) );
            memset( &nrDocumento    , 0x0, sizeof(nrDocumento) );
            
            EXEC SQL FETCH csr_GestorMaster INTO
                :idPessoa:i_idPessoa ,
                :nmPessoa:i_nmPessoa , 
                :sgTipoPessoa:i_sgTipoPessoa ,
                :idPessoaDePara:i_idPessoaDePara ,
                :idSegmentacao:i_idSegmentacao ,
                :idUFOperadora:i_idUFOperadora ,
                :sgUF:i_sgUF ,
                :idTipoCarteira:i_idTipoCarteira ,
                :nrDocumento:i_nrDocumento ;

            CONVIND( idPessoa       , i_idPessoa );
            CONVIND( nmPessoa       , i_nmPessoa );
            CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
            CONVIND( idPessoaDePara , i_idPessoaDePara );
            CONVIND( idSegmentacao  , i_idSegmentacao );
            CONVIND( idUFOperadora  , i_idUFOperadora );
            CONVIND( sgUF           , i_sgUF );
            CONVIND( idTipoCarteira , i_idTipoCarteira );
            CONVIND( nrDocumento    , i_nrDocumento );
            
            ULOG( "*** idPessoa       [%s]",(char*)idPessoa.arr );
            ULOG( "*** nmPessoa       [%s]",(char*)nmPessoa.arr );
            ULOG( "*** sgTipoPessoa   [%s]",(char*)sgTipoPessoa.arr );
            ULOG( "*** idPessoaDePara [%s]",(char*)idPessoaDePara.arr );
               
            ULOG( "--- Relacionamento com CNPJ [%s]", (char*)nrDocumento.arr );
               
            pDocs.push_back( (char*)nrDocumento.arr );

               xml_g->createTag( "CJNPJByIdGestorVO" );
                xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
                   xml_g->addItem( "tpGestor", "GM" );
                xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                xml_g->addItem( "sgUF", (char*)sgUF.arr );
                xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
               xml_g->closeTag();

            }

         EXEC SQL CLOSE csr_GestorMaster;
         ULOG( "*** Finalizando busca de documentos para Gestor Master..." );

   }
   
   EXEC SQL DECLARE csr_4 CURSOR FOR
   select
		   distinct(nrdocumento) 
      from
         vole.contagestor contagestor, 
         customer.pessoaconta pessoaconta, 
         customer.pessoadocumento pessoadocumento, 
		   customer.documento documento, 
		   apoio.tipodocumento tipodocumento, 
         customer.pessoadepara pessoadepara
      where
		   pessoadocumento.iddocumento = documento.iddocumento 
		and tipodocumento.idtipodocumento = documento.idtipodocumento 
		and tipodocumento.DSTIPODOCUMENTO = 'CNPJ' 
		and pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
      and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
      and contagestor.idconta=pessoaconta.idconta     
      and pessoaconta.IDTIPORELACIONAMENTO = 2     
		and contagestor.IDPESSOAGESTOR = :idPessoaGestor ;
                
   ULOG( "!!! Buscando GC para idPessoaGestor [%s]", idPessoaGestor );
		ULOG( "/// csr_GC_Only_2 alterado..." );
   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   EXEC SQL OPEN csr_4;
		

   for( ;; ) 
   {
			memset( &nrDocumento    , 0x0, 60 );
			
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			
      EXEC SQL FETCH csr_4 INTO
         :nrDocumento:i_nrDocumento ;
        
      CONVIND( nrDocumento, i_nrDocumento );
      ULOG( "*** Gestor de Conta para o CNPJ => [%s]", (char*)nrDocumento.arr );

			if( ACESSO_GESTOR_DE_CONTA == 1)
			{
					ULOG( "/// ACESSO_GESTOR_DE_CONTA = 1" );
      if ( !pDocs.empty() )  // Testa se este Gestor eh Master de outros CNPJs
      {
         ULOG( "/// Validando pois eh Gestor Master" );
            
         for ( itLst_nrDoc = pDocs.begin(); itLst_nrDoc != pDocs.end(); itLst_nrDoc++ )
         {

             nrCNPJ = *itLst_nrDoc;
             /*
              *  Aqui compara se o gestor eh MASTER
              *  do CNPJ encontrado. Se for vai para proxima ocorrencia.
              *  Serah mostrado apenas se for Gestor de Conta nesta situacao.
              */
            if ( !strcmp((char*)nrDocumento.arr, nrCNPJ.c_str()) )
            {
								continue;
            }
							else
         {
            xml_g->createTag( "CJNPJByIdGestorVO" );
               xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
               xml_g->addItem( "tpGestor", "GC" );
						
									//EXEC SQL DECLARE csr_GC CURSOR FOR
									//SELECT DISTINCT
									//    PG.SGPERMISSAOGESTOR ,
									//    C.IDCONTA ,
									//    C.CDCONTA ,
									//    C.NMCONTA ,
									//    PDP.IDPESSOADEPARA ,
									//    C.IDCONTASISTEMAORIGEM
									//FROM 
									//    APOIO.PERMISSAOGESTOR      PG ,
									//    CUSTOMER.CONTA             C , 
									//    CUSTOMER.PESSOACONTA       PC ,
									//    CUSTOMER.PESSOADEPARA      PDP ,
									//    CUSTOMER.PESSOADOCUMENTO   PD ,
									//    CUSTOMER.DOCUMENTO         D ,
									//    VOLE.CONTAGESTOR           CG 
									//WHERE  
									//    PC.IDCONTA = CG.IDCONTA
									//AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
									//AND PDP.IDPESSOA = PD.IDPESSOA
									//AND PD.IDDOCUMENTO = D.IDDOCUMENTO
									//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
									//AND C.IDCONTA = CG.IDCONTA
									//AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
									//AND CG.IDPESSOAGESTOR = :idPessoaGestor ;

									
									//EXEC SQL DECLARE csr_GC CURSOR FOR
									//SELECT DISTINCT
									//	PG.SGPERMISSAOGESTOR ,
									//	C.IDCONTA ,
									//	C.CDCONTA ,
									//	C.NMCONTA ,
									//	//PD.IDPESSOA ,
									//	C.IDCONTASISTEMAORIGEM,
									//	C.INCONTROLEPJ
									//FROM 
									//	APOIO.PERMISSAOGESTOR      PG ,
									//	CUSTOMER.CONTA             C , 
									//	CUSTOMER.DOCUMENTO         D ,
									//	CUSTOMER.PESSOADOCUMENTO   PD 
									//WHERE  
									//	PD.IDDOCUMENTO = D.IDDOCUMENTO
									//AND D.NRDOCUMENTO = :nrDocumento   // CNPJ da Empresa com Contas   
									//and exists
									//(
									//	select
									//		pc.IDCONTA
									//	from   
									//		CUSTOMER.PESSOACONTA       PC ,
									//		CUSTOMER.PESSOADEPARA      PDP ,
									//		APOIO.PERMISSAOGESTOR      PG ,
									//		VOLE.CONTAGESTOR           CG  
									//	where
									//			PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
									//		AND PC.IDCONTA = CG.IDCONTA
									//		AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
									//		AND CG.IDPESSOAGESTOR = :idPessoaGestor
									//		and C.IDCONTA = pc.idconta
									//		and pc.idtiporelacionamento = 2
									//) ;
									
									
               EXEC SQL DECLARE csr_GC CURSOR FOR
									SELECT DISTINCT
											PG2.SGPERMISSAOGESTOR ,
                  C.IDCONTA ,
                  C.CDCONTA ,
                  C.NMCONTA ,
                  C.IDCONTASISTEMAORIGEM,
				  NVL(C.INCONTROLEPJ,0)
               FROM
											APOIO.PERMISSAOGESTOR      PG2,
                  CUSTOMER.CONTA             C ,
                  CUSTOMER.DOCUMENTO         D ,
                  CUSTOMER.PESSOADOCUMENTO   PD,
											CUSTOMER.PESSOADEPARA      PDP,
                  CUSTOMER.PESSOACONTA       PC,
											VOLE.CONTAGESTOR           CG2  
               WHERE
											CG2.IDPERMISSAOGESTOR = PG2.IDPERMISSAOGESTOR(+) AND
											C.IDCONTA = CG2.IDCONTA AND
											PC.IDCONTA = CG2.IDCONTA AND
											PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
											PD.IDPESSOA = PDP.IDPESSOA AND
											PD.IDDOCUMENTO = D.IDDOCUMENTO AND
											PC.idtiporelacionamento = 2 AND
											D.NRDOCUMENTO = :nrDocumento    AND 
											CG2.IDPESSOAGESTOR = :idPessoaGestor;
                  
                  memset( &idConta    , 0x0, sizeof(idConta) );
                  memset( &cdConta    , 0x0, sizeof(cdConta) );
                  memset( &nmConta    , 0x0, sizeof(nmConta) );
                  memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
                  memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
									memset( &inControlePJ, 0x0, sizeof(inControlePJ) );
									
									EXEC SQL OPEN csr_GC;
									
									bool bPrimeiroLoop = true;
									for( ;; ) 
									{

                  EXEC SQL FETCH csr_GC INTO
										   :sgPermissao:i_sgPermissao ,
                     :idConta:i_idConta ,
                     :cdConta:i_cdConta ,
                     :nmConta:i_nmConta ,
										   //:idPessoaAux:i_idPessoaAux ,
										   :idContaSistemaOrigem:i_idContaSistemaOrigem,
										   :inControlePJ:i_inControlePJ;
										
										//CONVIND( idPessoaAux, i_idPessoaAux );
								
										/*
										exec sql
										select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
										  from customer.pessoadepara where idpessoa = :idPessoaAux;
										CONVIND( idPessoaDePara, i_idPessoaDePara );
										*/

										CONVIND( sgPermissao, i_sgPermissao );
										CONVIND( idConta, i_idConta );
										CONVIND( cdConta, i_cdConta );
										CONVIND( nmConta, i_nmConta );
										CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
										CONVIND( inControlePJ, i_inControlePJ );
										
										
										ULOG( ">>> Conta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
										ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

										EXEC SQL
										SELECT 
										   idpessoa, 
										   nmpessoa, 
										   sgtipopessoa, 
										   idsegmentacao, 
										   idufoperadora, 
										   sguf, 
										   idtipocarteira 
										INTO
                     :idPessoa:i_idPessoa ,
                     :nmPessoa:i_nmPessoa , 
                     :sgTipoPessoa:i_sgTipoPessoa ,
                     :idSegmentacao:i_idSegmentacao ,
                     :idUFOperadora:i_idUFOperadora ,
                     :sgUF:i_sgUF ,
										  :idTipoCarteira:i_idTipoCarteira 
										FROM
										   VOL.EMPRESAGESTOR_GC_V01
										WHERE
										   idpessoagestor = :idPessoaGestor    
										AND
										   idconta = :idConta 
										AND ROWNUM < 2;
                               
                  CONVIND( idPessoa       , i_idPessoa );
                  CONVIND( nmPessoa       , i_nmPessoa );
                  CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
                  CONVIND( idSegmentacao  , i_idSegmentacao );
                  CONVIND( idUFOperadora  , i_idUFOperadora );
                  CONVIND( sgUF           , i_sgUF );
                  CONVIND( idTipoCarteira , i_idTipoCarteira );
						
										exec sql
										select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
										  from customer.pessoadepara where idpessoa = :idPessoa;
                  CONVIND( idPessoaDePara, i_idPessoaDePara );
                           
										if ( bPrimeiroLoop == true )
                  {

                     xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                     xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                     xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                     xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                     xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                     xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                     xml_g->addItem( "sgUF", (char*)sgUF.arr );
                     xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
                  
                     bPrimeiroLoop = false;
                  }							
                        
                  xml_g->createTag( "ContaVO" );
                     xml_g->addItem( "idConta", (char*)idConta.arr );
                     xml_g->addItem( "cdConta", (char*)cdConta.arr );
                     if ( i_sgPermissao != -1 )
                     {
                        xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                     }
                     xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                     xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                     xml_g->addItem( "nmConta", (char*)nmConta.arr );
							xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
                  xml_g->closeTag();
               }
               EXEC SQL CLOSE csr_GC;
                        
               xml_g->closeTag();
						
         }
						}
      }
      else  // Eh apenas Gestor de Contas
      {
         ULOG( "/// Eh apenas Gestor de Contas" );
         
         xml_g->createTag( "CJNPJByIdGestorVO" );
            xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
            xml_g->addItem( "tpGestor", "GC" );
             
							//EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							//SELECT DISTINCT
							//    PG.SGPERMISSAOGESTOR ,
							//    C.IDCONTA ,
							//    C.CDCONTA ,
							//    C.NMCONTA ,
							//    PDP.IDPESSOADEPARA ,
							//    C.IDCONTASISTEMAORIGEM
							//FROM 
							//    APOIO.PERMISSAOGESTOR      PG ,
							//    CUSTOMER.CONTA             C , 
							//    CUSTOMER.PESSOACONTA       PC ,
							//    CUSTOMER.PESSOADEPARA      PDP ,
							//    CUSTOMER.PESSOADOCUMENTO   PD ,
							//    CUSTOMER.DOCUMENTO         D ,
							//    VOLE.CONTAGESTOR           CG 
							//WHERE  
							//    PC.IDCONTA = CG.IDCONTA
							//AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
							//AND PDP.IDPESSOA = PD.IDPESSOA
							//AND PD.IDDOCUMENTO = D.IDDOCUMENTO
							//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
							//AND C.IDCONTA = CG.IDCONTA
							//AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
							//AND CG.IDPESSOAGESTOR = :idPessoaGestor ;
							
							
							//EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							//SELECT DISTINCT
							//	PG.SGPERMISSAOGESTOR ,
							//	C.IDCONTA ,
							//	C.CDCONTA ,
							//	C.NMCONTA ,
							//	//PD.IDPESSOA ,
							//	C.IDCONTASISTEMAORIGEM,
							//	C.INCONTROLEPJ
							//FROM 
							//	APOIO.PERMISSAOGESTOR      PG ,
							//	CUSTOMER.CONTA             C , 
							//	CUSTOMER.DOCUMENTO         D ,
							//	CUSTOMER.PESSOADOCUMENTO   PD 
							//WHERE  
							//	PD.IDDOCUMENTO = D.IDDOCUMENTO
							//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
							//and exists
							//(
							//	select
							//		pc.IDCONTA
							//	from   
							//		CUSTOMER.PESSOACONTA       PC ,
							//		CUSTOMER.PESSOADEPARA      PDP ,
							//		APOIO.PERMISSAOGESTOR      PG ,
							//		VOLE.CONTAGESTOR           CG  
							//	where
							//			PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
							//		AND PC.IDCONTA = CG.IDCONTA
							//		AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
							//		AND CG.IDPESSOAGESTOR = :idPessoaGestor
							//		and C.IDCONTA = pc.idconta
							//		and pc.idtiporelacionamento = 2
							//) ;
							
            EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							SELECT DISTINCT
								PG2.SGPERMISSAOGESTOR ,
               C.IDCONTA ,
               C.CDCONTA ,
               C.NMCONTA ,
               C.IDCONTASISTEMAORIGEM,
               NVL(C.INCONTROLEPJ,0)			   
            FROM
								APOIO.PERMISSAOGESTOR      PG2,
               CUSTOMER.CONTA             C ,
               CUSTOMER.DOCUMENTO         D ,
               CUSTOMER.PESSOADOCUMENTO   PD,
								CUSTOMER.PESSOADEPARA      PDP,
               CUSTOMER.PESSOACONTA       PC,
								VOLE.CONTAGESTOR           CG2  
            WHERE
								CG2.IDPERMISSAOGESTOR = PG2.IDPERMISSAOGESTOR(+) AND
								C.IDCONTA = CG2.IDCONTA AND
								PC.IDCONTA = CG2.IDCONTA AND
								PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
								PD.IDPESSOA = PDP.IDPESSOA AND
								PD.IDDOCUMENTO = D.IDDOCUMENTO AND
								PC.idtiporelacionamento = 2 AND
								D.NRDOCUMENTO = :nrDocumento    AND 
								CG2.IDPESSOAGESTOR = :idPessoaGestor;	
								
							
							memset( &idConta             , 0x0, sizeof(idConta) );
							memset( &cdConta             , 0x0, sizeof(cdConta) );
							memset( &nmConta             , 0x0, sizeof(nmConta) );
							memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
							memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
							memset( &inControlePJ        , 0x0, sizeof(inControlePJ) );
							
         
            bool bPrimeiroLoop = true;
               
            EXEC SQL OPEN csr_GC_Only;
            for( ;; ) 
            {

								EXEC SQL FETCH csr_GC_Only INTO
								   :sgPermissao:i_sgPermissao ,
								   :idConta:i_idConta ,
								   :cdConta:i_cdConta ,
								   :nmConta:i_nmConta ,
								   //:idPessoaAux:i_idPessoaAux ,
								   :idContaSistemaOrigem:i_idContaSistemaOrigem,
								   :inControlePJ:i_inControlePJ;
								
								CONVIND( sgPermissao, i_sgPermissao );
								CONVIND( idConta, i_idConta );
								CONVIND( cdConta, i_cdConta );
								CONVIND( nmConta, i_nmConta );
								//CONVIND( idPessoaAux, i_idPessoaAux );
								CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
								CONVIND( inControlePJ, i_inControlePJ );
								
								
								/*
								exec sql
								select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
								  from customer.pessoadepara where idpessoa = :idPessoaAux;
								CONVIND( idPessoaDePara, i_idPessoaDePara );
								*/
								
								ULOG( ">>> Conta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );

								ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

								EXEC SQL
								SELECT 
								   idpessoa, 
								   nmpessoa, 
								   sgtipopessoa, 
								   idsegmentacao, 
								   idufoperadora, 
								   sguf, 
								   idtipocarteira 
								INTO
								  :idPessoa:i_idPessoa ,
								  :nmPessoa:i_nmPessoa , 
								  :sgTipoPessoa:i_sgTipoPessoa ,
								  :idSegmentacao:i_idSegmentacao ,
								  :idUFOperadora:i_idUFOperadora ,
								  :sgUF:i_sgUF ,
								  :idTipoCarteira:i_idTipoCarteira 
								FROM
								   VOL.EMPRESAGESTOR_GC_V01
								WHERE
								   idpessoagestor = :idPessoaGestor    
								AND
								   idconta = :idConta 
								AND ROWNUM < 2;
								   
								CONVIND( idPessoa       , i_idPessoa );
								CONVIND( nmPessoa       , i_nmPessoa );
								CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
								CONVIND( idSegmentacao  , i_idSegmentacao );
								CONVIND( idUFOperadora  , i_idUFOperadora );
								CONVIND( sgUF           , i_sgUF );
								CONVIND( idTipoCarteira , i_idTipoCarteira );
				
								exec sql
								select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
								  from customer.pessoadepara where idpessoa = :idPessoa;
								CONVIND( idPessoaDePara, i_idPessoaDePara );

								if (bPrimeiroLoop == true)
								{
									xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
									xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
									xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
									xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
									xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
									xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
									xml_g->addItem( "sgUF", (char*)sgUF.arr );
									xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
									
									bPrimeiroLoop = false;
								}
										
								xml_g->createTag( "ContaVO" );
									xml_g->addItem( "idConta", (char*)idConta.arr );
									xml_g->addItem( "cdConta", (char*)cdConta.arr );
									if ( i_sgPermissao != -1 )
									{
									   xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
									}
									xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
									xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
									xml_g->addItem( "nmConta", (char*)nmConta.arr );
									xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
								xml_g->closeTag();
							}
							EXEC SQL CLOSE csr_GC_Only;
						
						xml_g->closeTag();
					}
					
			}
			else //ACESSO_GESTOR_DE_CONTA == 2
			{
				nrCNPJ  = (char *)nrDocumento.arr;
				BuscarGestoresDeContaR((char *)idPessoaGestorPrm, (char *)nrCNPJ.c_str(), xml_g);
			}
		} // for(;;)
		EXEC SQL CLOSE csr_4;
	
    ULOG_END( "getCJNPJsByIdGestor()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void BuscarGestoresDeContaR(char * idPessoaGestorPrm, char *CNPJ, XMLGen* xml_g)
{
	ULOG_START( "BuscarGestoresDeContaR()" );
	
/*    LST_DOCS     pDocs;
    string       nrCNPJ;
    char   MsgRet[16];
*/
    struct sqlca sqlca;
	
	
    EXEC SQL BEGIN DECLARE SECTION;

		char idPessoaGestor[43];
	
		char nrDocumentoEmpresa[43];
		short i_nrDocumentoEmpresa = -1;
		
		VARCHAR idConta[65];
		short   i_idConta = -1;
		VARCHAR cdConta[65];
		short   i_cdConta = -1;
		VARCHAR nmConta[65];
		short   i_nmConta = -1;
		
		VARCHAR sgPermissao[256];
		short   i_sgPermissao = -1;
		VARCHAR idPermissao[256];
		short   i_idPermissao = -1;
		
		VARCHAR idPessoa[65];
		short   i_idPessoa = -1;
		VARCHAR nmPessoa[256];
		short   i_nmPessoa = -1;
		VARCHAR sgTipoPessoa[65];
		short   i_sgTipoPessoa = -1;
		VARCHAR idPessoaAux[65];
		short   i_idPessoaAux = -1;
		VARCHAR idPessoaDePara[65];
		short   i_idPessoaDePara = -1;
		VARCHAR idSegmentacao[65];
		short   i_idSegmentacao = -1;
		VARCHAR idUFOperadora[65];
		short   i_idUFOperadora = -1;
		VARCHAR sgUF[256];
		short   i_sgUF = -1;
		VARCHAR idTipoCarteira[65];
		short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
		
				
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
      
    EXEC SQL END DECLARE SECTION;	
	
    memset( &nrDocumentoEmpresa, 0x0, sizeof(nrDocumentoEmpresa) );
               memset( &idConta             , 0x0, sizeof(idConta) );
               memset( &cdConta             , 0x0, sizeof(cdConta) );
    memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
	memset( &idPermissao, 0x0, sizeof(idPermissao) );
	
    memset( &idPessoa, 0x0, sizeof(idPessoa) );	
    memset( &nmPessoa, 0x0, sizeof(nmPessoa) );	
    memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );	
    memset( &idPessoaAux, 0x0, sizeof(idPessoaAux) );	
    memset( &idPessoaDePara, 0x0, sizeof(idPessoaDePara) );	
    memset( &idSegmentacao, 0x0, sizeof(idSegmentacao) );	
    memset( &idUFOperadora, 0x0, sizeof(idUFOperadora) );	
    memset( &sgUF, 0x0, sizeof(sgUF) );	
    memset( &idTipoCarteira, 0x0, sizeof(idTipoCarteira) );	
	memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );	
		
    strcpy( idPessoaGestor, (const char*)idPessoaGestorPrm );
    strcpy( nrDocumentoEmpresa, (const char*)CNPJ );
    memset( &inControlePJ, 0x0, sizeof(inControlePJ) );	
	
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );	
	
	xml_g->createTag( "CJNPJByIdGestorVO" );
		xml_g->addItem( "nrDocumento", nrDocumentoEmpresa );
		xml_g->addItem( "tpGestor", "GC" );
		
		ULOG( ">>> Executando query para idPessoaGestor [%s] relacionada ao CNPJ [%s]", idPessoaGestor, nrDocumentoEmpresa  );
		
		EXEC SQL DECLARE csr_GC_R CURSOR FOR
				SELECT DISTINCT
					CG.IDPERMISSAOGESTOR,
					C.IDCONTA,
					C.CDCONTA,
					C.NMCONTA,
					C.IDCONTASISTEMAORIGEM,
					C.INCONTROLEPJ
				FROM 
					CUSTOMER.DOCUMENTO         D ,
					CUSTOMER.PESSOADOCUMENTO   PD,
					CUSTOMER.PESSOADEPARA      PDP,
					CUSTOMER.PESSOACONTA       PC,
					CUSTOMER.CONTA             C, 
					VOLE.CONTAGESTOR           CG,
					CUSTOMER.PESSOAGESTORCONTA PGC
				WHERE  
					D.NRDOCUMENTO = :nrDocumentoEmpresa  
				AND PD.IDDOCUMENTO = D.IDDOCUMENTO
				AND PD.IDPESSOA = PDP.IDPESSOA
				AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
				AND PC.IDCONTA = C.IDCONTA
				AND PC.IDTIPORELACIONAMENTO = 2
				AND C.IDCONTA = CG.IDCONTA
				AND PGC.IDCONTA = C.IDCONTA
				AND CG.IDPESSOAGESTOR = :idPessoaGestor
				AND PGC.IDPESSOAGESTOR = CG.IDPESSOAGESTOR;

		bool bPrimeiroLoop = true;
		EXEC SQL OPEN csr_GC_R;
		for( ;; ) 
		{
			memset( &idConta             , 0x0, sizeof(idConta) );
			memset( &cdConta             , 0x0, sizeof(cdConta) );
			memset( &nmConta             , 0x0, sizeof(nmConta) );
			memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
			memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
			memset( &idPermissao         , 0x0, sizeof(idPermissao) );
			memset( &inControlePJ		 , 0x0, sizeof(inControlePJ) );

			
			i_idPermissao = -1;
			
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
                       
			EXEC SQL FETCH csr_GC_R INTO
			   :idPermissao:i_idPermissao ,
               :idConta:i_idConta ,
               :cdConta:i_cdConta ,
               :nmConta:i_nmConta ,
			   //:idPessoaAux:i_idPessoaAux ,
			   :idContaSistemaOrigem:i_idContaSistemaOrigem,
			   :inControlePJ:i_inControlePJ;
			   
			
			CONVIND( idPermissao, i_idPermissao );
			CONVIND( idConta, i_idConta );
			CONVIND( cdConta, i_cdConta );
			CONVIND( nmConta, i_nmConta );
			//CONVIND( idPessoaAux, i_idPessoaAux );
			CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
			CONVIND( inControlePJ, i_inControlePJ );
			
			ULOG( ">>> CDConta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
			ULOG( ">>> IdConta [%s] relacionada ao GC [%s]", (char*)idConta.arr, idPessoaGestor );
			ULOG( ">>> inControlePJ [%s]", (char*)inControlePJ.arr);
			ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

			EXEC SQL WHENEVER NOT FOUND CONTINUE;
			
			EXEC SQL 
				SELECT 
					NVL(PG.SGPERMISSAOGESTOR,'ND') SGPERMISSAOGESTOR
				INTO
					:sgPermissao:i_sgPermissao
				FROM 
					APOIO.PERMISSAOGESTOR PG
				WHERE  
					PG.IDPERMISSAOGESTOR = :idPermissao AND ROWNUM < 2;
					
			ULOG( ">>> SGPERMISSAOGESTOR [%s] relacionada ao GC [%s]", (char*)sgPermissao.arr, idPessoaGestor );
			
			EXEC SQL
			SELECT 
			   idpessoa, 
			   nmpessoa, 
			   sgtipopessoa, 
			   idsegmentacao, 
			   idufoperadora, 
			   sguf, 
			   idtipocarteira 
			INTO
               :idPessoa:i_idPessoa ,
               :nmPessoa:i_nmPessoa , 
               :sgTipoPessoa:i_sgTipoPessoa ,
               :idSegmentacao:i_idSegmentacao ,
               :idUFOperadora:i_idUFOperadora ,
               :sgUF:i_sgUF ,
			  :idTipoCarteira:i_idTipoCarteira 
			FROM
			   VOL.EMPRESAGESTOR_GC_V01
			WHERE
			   idpessoagestor = :idPessoaGestor    
			AND
			   idconta = :idConta 
			AND ROWNUM < 2;
                        
               CONVIND( idPessoa       , i_idPessoa );
               CONVIND( nmPessoa       , i_nmPessoa );
               CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
               CONVIND( idSegmentacao  , i_idSegmentacao );
               CONVIND( idUFOperadora  , i_idUFOperadora );
               CONVIND( sgUF           , i_sgUF );
               CONVIND( idTipoCarteira , i_idTipoCarteira );

			exec sql
			select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
			  from customer.pessoadepara where idpessoa = :idPessoa;
               CONVIND( idPessoaDePara, i_idPessoaDePara );

               if (bPrimeiroLoop == true)
               {
                  xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                  xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                  xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                  xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                  xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                  xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                  xml_g->addItem( "sgUF", (char*)sgUF.arr );
                  xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
            
                  bPrimeiroLoop = false;
               }
                               
               xml_g->createTag( "ContaVO" );
                  xml_g->addItem( "idConta", (char*)idConta.arr );
                  xml_g->addItem( "cdConta", (char*)cdConta.arr );
                  if ( i_sgPermissao != -1 )
                  {
                     xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                  }
                  xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                  xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                  xml_g->addItem( "nmConta", (char*)nmConta.arr );
				  xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
               xml_g->closeTag();
            }
		EXEC SQL CLOSE csr_GC_R;
               
            xml_g->closeTag();

    ULOG_END( "BuscarGestoresDeContaR()" );

   return;

   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getInscricaoEstadualByEmpresa( char * idPessoaPrm, XMLGen* xml_g )
{
    ULOG_START( "getInscricaoEstadualByEmpresa()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoa[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoa, idPessoaPrm );
    
    ULOG( "idPessoa [%s]", idPessoa );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_5 CURSOR FOR
    select 
       d.nrdocumento 
    from 
       customer.pessoadocumento pd, 
       customer.documento d, 
       apoio.tipodocumento td 
    where 
       pd.iddocumento = d.iddocumento  
    and td.idtipodocumento = d.idtipodocumento 
    and td.sgclassificacao ='IE' 
    and pd.idpessoa = :idPessoa ;

                
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_5;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_5 INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "IEByEmpresaVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_5;

    ULOG_END( "getInscricaoEstadualByEmpresa()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int getCJNPJsByIdGestor_GM( char * idPessoaGestorPrm, XMLGen * xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor_GM()" );

    long j;

    struct sqlca sqlca;

    char bf[256];

    EXEC SQL BEGIN DECLARE SECTION;

        int ctGestorMaster;
        char idPessoaGestor[43];

        VARCHAR nrCPF[65];
        short i_nrCPF = -1;

        VARCHAR nrDocumento_gm[65];
        short i_nrDocumento_gm;


        VARCHAR idPessoa_gm[65];
        short   i_idPessoa_gm;
        VARCHAR idPessoa[65];
        short   i_idPessoa;

        VARCHAR nmPessoa_gm[256];
        short   i_nmPessoa_gm;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa;

        VARCHAR sgTipoPessoa_gm[65];
        short   i_sgTipoPessoa_gm;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa;

        VARCHAR idPessoaDePara_gm[65];
        short   i_idPessoaDePara_gm;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara;

        VARCHAR idSegmentacao_gm[65];
        short   i_idSegmentacao_gm;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao;

        VARCHAR idUFOperadora_gm[65];
        short   i_idUFOperadora_gm;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora;

        VARCHAR sgUF_gm[256];
        short   i_sgUF_gm;
        VARCHAR sgUF[256];
        short   i_sgUF;

        VARCHAR idTipoCarteira_gm[65];
        short   i_idTipoCarteira_gm;

        VARCHAR INASSOCIACAO[1];
        short   i_INASSOCIACAO;

    EXEC SQL END DECLARE SECTION;

    char cnpj_anterior[65];
    memset( cnpj_anterior, 0x0, sizeof(cnpj_anterior) );
     

    memset( &nrCPF, 0x0, sizeof(nrCPF) );
    memset( &INASSOCIACAO, 0x0, sizeof(INASSOCIACAO) );
    memset( &i_INASSOCIACAO, -1, sizeof(i_INASSOCIACAO) );

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    SELECT
        PGM.NRDOCUMENTOGESTOR
    INTO
        :nrCPF:i_nrCPF
    FROM
        CUSTOMER.PESSOAGESTOR          PG,
        CUSTOMER.PESSOAGESTORMASTER   PGM
    WHERE
        PG.IDPESSOAGESTOR = :idPessoaGestor 
    AND PGM.NRDOCUMENTOGESTOR = PG.NRDOCUMENTO
    AND ROWNUM < 2;
   
   
    CONVIND( nrCPF, i_nrCPF );

    ULOG( "/// Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    if ( nrCPF.len > 0 )
    {
        ULOG( "*** Eh Gestor Master, realizando busca..." );
      
        /*
        EXEC SQL DECLARE csr_Empresas_GM CURSOR FOR
        SELECT
              pgm.nrdocumentoempresa, p.idpessoa, p.nmpessoa, auf.sguf, NVL(pgm.inassociacao, '0')
          FROM customer.pessoagestormaster pgm,
               customer.documento documento,
               customer.pessoadocumento pessoadocumento,
               apoio.tipodocumento tipodocumento,
               customer.pessoadepara pdp,
               customer.pessoaconta pc,
               customer.pessoa p,
               customer.pessoaendereco pe,
               apoio.uf auf,
               customer.ufoperadora uf,
               customer.contaendereco ce
        WHERE pgm.nrdocumentogestor = :nrCPF
           AND pgm.nrdocumentoempresa = documento.nrdocumento
           AND documento.iddocumento = pessoadocumento.iddocumento
           AND pessoadocumento.idpessoa = pdp.idpessoa
           AND pessoadocumento.idpessoa = p.idpessoa
           AND pe.idpessoaendereco = ce.idpessoaendereco
           AND pdp.idpessoa = p.idpessoa
           AND pdp.idpessoadepara = pc.idpessoadepara
           AND tipodocumento.idtipodocumento = documento.idtipodocumento
           AND tipodocumento.sgclassificacao = 'CNPJ'
           AND p.idtipopessoa = 2
           AND pdp.idpessoa = pe.idpessoa
           AND pe.idpessoa = pessoadocumento.idpessoa
           AND pe.idpessoa = p.idpessoa
           AND pe.iduf = auf.iduf
           AND pe.iduf = uf.iduf
           AND auf.iduf = uf.iduf
        GROUP BY pgm.nrdocumentoempresa, p.idpessoa, p.nmpessoa, auf.sguf, pgm.inassociacao ;
        ORDER BY pgm.nrdocumentoempresa, p.idpessoa ;   */
        
        EXEC SQL DECLARE csr_Empresas_GM CURSOR FOR
        SELECT      /*+ first_rows(1) */
              pgm.nrdocumentoempresa, p.idpessoa, p.nmpessoa, auf.sguf, NVL(pgm.inassociacao, '0')
          FROM customer.pessoagestormaster pgm,
               customer.documento documento,
               customer.pessoadepara pdp,
               customer.pessoa p,
               customer.pessoaendereco pe,
               apoio.uf auf
        WHERE pgm.nrdocumentogestor = :nrCPF
           AND pgm.nrdocumentoempresa = documento.nrdocumento
           AND pdp.idpessoa = p.idpessoa
           AND exists ( select 1 from customer.pessoaconta pc where pdp.idpessoadepara = pc.idpessoadepara )
           and exists ( select 1 from apoio.tipodocumento tipodocumento where tipodocumento.idtipodocumento = documento.idtipodocumento
                                 AND tipodocumento.sgclassificacao = 'CNPJ' )
           AND p.idtipopessoa = 2
           AND pdp.idpessoa = pe.idpessoa
           AND pe.idpessoa = p.idpessoa
           and exists ( select 1 from customer.ufoperadora uf where pe.iduf = uf.iduf AND auf.iduf = uf.iduf )
           AND pe.iduf = auf.iduf
           and exists ( select 1 from customer.contaendereco ce where pe.idpessoaendereco = ce.idpessoaendereco )
           and exists ( select   1 from customer.pessoadocumento pessoadocumento where documento.iddocumento = pessoadocumento.iddocumento
                                 AND pessoadocumento.idpessoa = pdp.idpessoa
                                 AND pessoadocumento.idpessoa = p.idpessoa
                                 AND pe.idpessoa = pessoadocumento.idpessoa )
        GROUP BY pgm.nrdocumentoempresa, p.idpessoa, p.nmpessoa, auf.sguf, pgm.inassociacao
        ORDER BY pgm.nrdocumentoempresa, p.idpessoa ;
        
     
        // myList.clear();
        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL OPEN csr_Empresas_GM;
        for ( j=0;;j++ )
        {

            EXEC SQL FETCH csr_Empresas_GM INTO
                :nrDocumento_gm:i_nrDocumento_gm ,
                :idPessoa_gm:i_idPessoa_gm ,
                :nmPessoa_gm:i_nmPessoa_gm ,
                :sgUF_gm:i_sgUF_gm ,
                :INASSOCIACAO:i_INASSOCIACAO ;

            CONVIND( nrDocumento_gm, i_nrDocumento_gm );
            CONVIND( idPessoa_gm, i_idPessoa_gm );
            CONVIND( nmPessoa_gm, i_nmPessoa_gm );
            CONVIND( sgUF_gm, i_sgUF_gm );
            CONVIND( INASSOCIACAO, i_INASSOCIACAO );

            if ( strcmp(cnpj_anterior,(char*)nrDocumento_gm.arr) )
            {
                if ( j > 0 )
                {
                   xml_g->closeTag();   // FECHA   xml_g->createTag( "list" );
                   xml_g->closeTag();   // FECHA   xml_g->createTag( "empresa" );
                }
                xml_g->createTag( "empresa" );
                   xml_g->addItem( "cnpj",(char*)nrDocumento_gm.arr );
                   xml_g->addItem( "inAssociacao", (char*)INASSOCIACAO.arr );
                   xml_g->addItem( "nome", (char*)nmPessoa_gm.arr );
                   xml_g->createTag( "list" );
                      xml_g->createTag( "p" );
                        xml_g->addItem( "id", (char*)idPessoa_gm.arr );
                        xml_g->addItem( "uf", (char*)sgUF_gm.arr );
                      xml_g->closeTag();
                   strcpy( cnpj_anterior,(char*)nrDocumento_gm.arr );
            }
            else
            {
                xml_g->createTag( "p" );
                   xml_g->addItem( "id", (char*)idPessoa_gm.arr );
                   xml_g->addItem( "uf", (char*)sgUF_gm.arr );
                xml_g->closeTag();
            }
            
        }   // for ( ;; )

        EXEC SQL CLOSE csr_Empresas_GM;
        EXEC SQL WHENEVER NOT FOUND CONTINUE;
      
        ULOG( "*** Finalizando busca de documentos para Gestor Master..." );
        
    }
    else
    {
        EXEC SQL
        SELECT
            count(PGM.NRDOCUMENTOGESTOR)
        INTO
            :ctGestorMaster
        FROM
            CUSTOMER.PESSOAGESTOR          PG,
            CUSTOMER.PESSOAGESTORMASTER   PGM
        WHERE
            PG.IDPESSOAGESTOR = :idPessoaGestor 
        AND PGM.NRDOCUMENTOGESTOR = PG.NRDOCUMENTO;
      
        if ( ctGestorMaster > 0 )
        {
            ULOG( "*** Gestor Master não tem associacao." );
            ULOG_END( "getCJNPJsByIdGestor_GM()" );
            return -1;
        }

    }
    
   ULOG_END( "getCJNPJsByIdGestor_GM()" );

   return 0;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCNPJsVinculoIdGestor( char * idPessoaGestorPrm, XMLGen * xml_g )
{
   ULOG_START( "getCNPJsVinculoIdGestor()" );
   
   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      char idPessoaGestor[43];

      VARCHAR nrDocumento[65];
      short i_nrDocumento;
        
   EXEC SQL END DECLARE SECTION;	
    
   memset( &nrDocumento , 0x0, sizeof(nrDocumento) );
   strcpy( idPessoaGestor, idPessoaGestorPrm );
    
   ULOG( "### Pesquisando CNPJs para idPessoaGestor [%s]", idPessoaGestor );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
   EXEC SQL DECLARE csr_CNPJs_Gestor CURSOR FOR
   select 
      nrdocumento 
   from 
      customer.documento documento 
   where 
      documento.iddocumento
   in
   (
      select
         pessoadocumento.iddocumento
      from 
       vole.contagestor contagestor, 
       customer.pessoaconta pessoaconta, 
       customer.pessoadocumento pessoadocumento, 
       customer.pessoadepara pessoadepara     
      where 
         pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
      and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
      and contagestor.idconta=pessoaconta.idconta     
      and pessoaconta.IDTIPORELACIONAMENTO = 2     
      and contagestor.IDPESSOAGESTOR = :idPessoaGestor 
   ) 
   and documento.idtipodocumento = 2;
    
   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   xml_g->createTag( "CJNPJByIdGestorVO" );
      xml_g->addItem( "idPessoaGestor", idPessoaGestor );
      xml_g->createTag( "CNPJ" );
      EXEC SQL OPEN csr_CNPJs_Gestor;
      for( ;; ) 
      {
         EXEC SQL FETCH csr_CNPJs_Gestor INTO
           :nrDocumento:i_nrDocumento ;
           
         CONVIND( nrDocumento, i_nrDocumento );
         ULOG( "*** Encontrado CNPJ => [%s]", (char*)nrDocumento.arr );

         xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
      }
      EXEC SQL CLOSE csr_CNPJs_Gestor;
      xml_g->closeTag();
   xml_g->closeTag();
   
   ULOG_END( "getCNPJsVinculoIdGestor()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor_GC( char * idPessoaGestorPrm, char* nrDocumentoPrm, XMLGen * xml_g )
{
   ULOG_START( "getCJNPJsByIdGestor_GC()" );
    
   int j;
   
   char   MsgRet[16];
   char   idPessoaAnter[65];
   char   idContaAnter[256];
   int    ACESSO_GESTOR_DE_CONTA=0;

   struct sqlca sqlca;
    
   EXEC SQL BEGIN DECLARE SECTION;

      char idPessoaGestor[43];

      char  nrDocumento[65];

      VARCHAR idConta[65];
      short   i_idConta = -1;
      VARCHAR cdConta[65];
      short   i_cdConta = -1;
      VARCHAR nmConta[65];
      short   i_nmConta = -1;

      VARCHAR sgPermissao[256];
      short   i_sgPermissao = -1;

      VARCHAR idPessoa[65];
      short   i_idPessoa;

      VARCHAR nmPessoa[256];
      short   i_nmPessoa;

      VARCHAR sgTipoPessoa[65];
      short   i_sgTipoPessoa;

      VARCHAR idPessoaAux[65];
      short   i_idPessoaAux = -1;

      VARCHAR idPessoaDePara[65];
      short   i_idPessoaDePara;

      VARCHAR idSegmentacao[65];
      short   i_idSegmentacao;

      VARCHAR idUFOperadora[65];
      short   i_idUFOperadora;

      VARCHAR sgUF[256];
      short   i_sgUF;

      VARCHAR idTipoCarteira[65];
      short   i_idTipoCarteira;

      VARCHAR idContaSistemaOrigem[256];
      short   i_idContaSistemaOrigem = -1;

      VARCHAR inControlePJ[256];
      short   i_inControlePJ = -1;
      
		VARCHAR parametroValor[256];
		const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
		short i_parametroValor = -1;

   EXEC SQL END DECLARE SECTION;	

    memset( &idConta     , 0x0, sizeof(idConta) );
    memset( &cdConta     , 0x0, sizeof(cdConta) );
    memset( &sgPermissao , 0x0, sizeof(sgPermissao) );
    memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );
    memset( idContaAnter , 0x0, sizeof(idContaAnter) );
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( nrDocumento, nrDocumentoPrm );
    
   ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );
   ULOG( "*** Gestor de Conta para o CNPJ => [%s]", nrDocumento );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
   	EXEC SQL
    SELECT
		DSVALORPARAMETRO 
	INTO 
		:parametroValor:i_parametroValor
    FROM 
		APOIO.PARAMETRO
    WHERE  
		CDPARAMETRO = :parametro;
	CONVIND( idConta, i_idConta );

	if(i_parametroValor != -1)
	{
		ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
	}
	else
	{
		ACESSO_GESTOR_DE_CONTA = 1;
    }

   
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	if( ACESSO_GESTOR_DE_CONTA == 1)
	{
   xml_g->createTag( "CJNPJByIdGestorVO" );
       xml_g->addItem( "nrDocumento", nrDocumento );
       xml_g->addItem( "tpGestor", "GC" );
                
      EXEC SQL DECLARE csr_Contas_GC CURSOR FOR
         SELECT DISTINCT
            C.IDCONTA,
            C.CDCONTA,
            C.NMCONTA,
            C.IDCONTASISTEMAORIGEM,
            NVL(C.INCONTROLEPJ,0) ,
            GC_V01.idpessoa, 
            GC_V01.nmpessoa, 
            GC_V01.sgtipopessoa, 
            GC_V01.idsegmentacao, 
            GC_V01.idufoperadora, 
            GC_V01.sguf, 
            GC_V01.idtipocarteira,
            pG.SGPERMISSAOGESTOR,
            PDP.IDPESSOADEPARA 
         FROM 
            VOL.EMPRESAGESTOR_GC_V01   GC_V01,
            APOIO.PERMISSAOGESTOR      PG ,
            CUSTOMER.CONTA             C ,
            CUSTOMER.DOCUMENTO         D ,
            CUSTOMER.PESSOADOCUMENTO   PD,
            CUSTOMER.PESSOACONTA       PC,
            CUSTOMER.PESSOADEPARA      PDP,
            VOLE.CONTAGESTOR           CG
         WHERE  
            PC.IDTIPORELACIONAMENTO = 2
         AND gc_V01.idpessoagestor = CG.IDPESSOAGESTOR
         and cg.IDPERMISSAOGESTOR = pg.IDPERMISSAOGESTOR(+)    
         AND gc_V01.idconta = C.IDCONTA
         AND PD.IDDOCUMENTO = D.IDDOCUMENTO
         AND PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA
         AND PDP.IDPESSOA = PD.IDPESSOA
         AND PC.IDCONTA = CG.IDCONTA
         AND PC.IDCONTA = C.IDCONTA
         AND D.NRDOCUMENTO = :nrDocumento
         AND CG.IDPESSOAGESTOR = :idPessoaGestor ;
      
         
      bool bPrimeiroLoop = true;
      EXEC SQL WHENEVER NOT FOUND DO BREAK;
      EXEC SQL OPEN csr_Contas_GC;
      
      for( ;; ) 
      {
         i_sgPermissao = -1;

         memset( &idConta             , 0x0, sizeof(idConta) );
         memset( &cdConta             , 0x0, sizeof(cdConta) );
         memset( &nmConta             , 0x0, sizeof(nmConta) );
         memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
         memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
         memset( &idPessoa            , 0x0, sizeof(idPessoa) );
         memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
         memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
         memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
         memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
         memset( &sgUF                , 0x0, sizeof(sgUF) );
         memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
         memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );
                 
         EXEC SQL FETCH csr_Contas_GC INTO
            :idConta:i_idConta ,
            :cdConta:i_cdConta ,
            :nmConta:i_nmConta ,
            :idContaSistemaOrigem:i_idContaSistemaOrigem ,
            :inControlePJ:i_inControlePJ ,
            :idPessoa:i_idPessoa ,
            :nmPessoa:i_nmPessoa , 
            :sgTipoPessoa:i_sgTipoPessoa ,
            :idSegmentacao:i_idSegmentacao ,
            :idUFOperadora:i_idUFOperadora ,
            :sgUF:i_sgUF ,
            :idTipoCarteira:i_idTipoCarteira ,
            :sgPermissao:i_sgPermissao ,
            :idPessoaDePara:i_idPessoaDePara ;
            
         CONVIND( idConta, i_idConta );
         CONVIND( sgPermissao, i_sgPermissao );
         CONVIND( cdConta, i_cdConta );
         CONVIND( nmConta, i_nmConta );
         CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
         CONVIND( inControlePJ, i_inControlePJ );
         CONVIND( idPessoa       , i_idPessoa );
         CONVIND( nmPessoa       , i_nmPessoa );
         CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
         CONVIND( idSegmentacao  , i_idSegmentacao );
         CONVIND( idUFOperadora  , i_idUFOperadora );
         CONVIND( sgUF           , i_sgUF );
         CONVIND( idTipoCarteira , i_idTipoCarteira );
         CONVIND( idPessoaDePara, i_idPessoaDePara );
         
         if ( !strcmp( idPessoaAnter, (char*)idPessoa.arr ) )
         {
            bPrimeiroLoop = false;
         }
         else
         {
            bPrimeiroLoop = true;
            strcpy( idPessoaAnter, (char*)idPessoa.arr );
         }
         
         if (bPrimeiroLoop == true)
         {
            xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
            xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
            xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
            xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
            xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
            xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
            xml_g->addItem( "sgUF", (char*)sgUF.arr );
            xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
                        
            // bPrimeiroLoop = false;
         }
                           
         if ( strcmp(idContaAnter,(char*)idConta.arr) )
         {
             xml_g->createTag( "ContaVO" );
                xml_g->addItem( "idConta", (char*)idConta.arr );
                xml_g->addItem( "cdConta", (char*)cdConta.arr );
                if ( i_sgPermissao != -1 )
                {
                   xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                }
                xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                xml_g->addItem( "nmConta", (char*)nmConta.arr );
                xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
             xml_g->closeTag();
             strcpy( idContaAnter, (char*)idConta.arr );
         }
      }
      EXEC SQL CLOSE csr_Contas_GC;

   xml_g->closeTag();
	}
	else //ACESSO_GESTOR_DE_CONTA == 2
	{
		BuscarGestoresDeContaR((char *)idPessoaGestorPrm, nrDocumentoPrm, xml_g);
	}

   ULOG_END( "getCJNPJsByIdGestor_GC()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int ListaCNPJMasterProC( char * idGestorPrm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  )
{
    ULOG_START( "ListaCNPJMasterProC()" );

    struct sqlca sqlca;
    const int MAX_REG_CNPJ_MASTER = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
	bool temCNPJ = false;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idGestor = idGestorPrm;
        int ctGestorMaster;

        long qtLinhasRetornar;
        int linInicial;
        int linFinal;

        VARCHAR nrCPF[65];
        short i_nrCPF = -1;
        VARCHAR nrDocumento[65];
        short i_nrDocumento= -1;
        VARCHAR inAssociacao[2];
        short   i_inAssociacao = -1;

    EXEC SQL END DECLARE SECTION;
    
    memset( &nrCPF       , 0x0, sizeof(nrCPF) );
    memset( &nrDocumento , 0x0, sizeof(nrDocumento) );
    memset( &inAssociacao, 0x0, sizeof(inAssociacao) );
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
        PGM.NRDOCUMENTOGESTOR
    INTO
        :nrCPF:i_nrCPF
    FROM
        CUSTOMER.PESSOAGESTORMASTER   PGM
    WHERE
    EXISTS
    (
       SELECT 1 FROM CUSTOMER.PESSOAGESTOR PG WHERE PG.NRDOCUMENTO = PGM.NRDOCUMENTOGESTOR AND PG.IDPESSOAGESTOR = :idGestor
    ) AND ROWNUM < 2 ;
    
    CONVIND( nrCPF, i_nrCPF );
    qtLinhasRetornar = QtdeCNPJsMaster( (char*)nrCPF.arr );
    
    ULOG( "Total de registros recuperados [%ld]", qtLinhasRetornar );
    
    if ( qtMaxLinhas > MAX_REG_CNPJ_MASTER )
        qtMaxLinhas = MAX_REG_CNPJ_MASTER;
    
    linInicial = (nrPagina-1)*qtMaxLinhas+1;
    linFinal = (nrPagina*qtMaxLinhas);

    ULOG("linInicial = [%d]",linInicial);
    ULOG("  linFinal = [%d]",linFinal);
    
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    if ( i_nrCPF != -1 )
    {
        EXEC SQL DECLARE csr_CNPJ_GM CURSOR FOR
        SELECT
           CNPJ ,
           INASSOCIACAO
        FROM
           (
            SELECT   --+ full(pgm)   
               PGM.NRDOCUMENTOEMPRESA AS CNPJ, 
               NVL(PGM.INASSOCIACAO, '0') as INASSOCIACAO ,
               ROWNUM AS NRLINHA
            FROM 
               CUSTOMER.PESSOAGESTORMASTER PGM
            WHERE 
               PGM.NRDOCUMENTOGESTOR = :nrCPF
            AND EXISTS ( SELECT 1 FROM customer.pessoadocumento pessoadocumento ,
                                       customer.pessoa p ,
                                       customer.documento documento ,
                                       apoio.tipodocumento tipodocumento ,
                                       customer.contaendereco ce ,
                                       customer.ufoperadora uf ,
                                       customer.pessoaconta pc ,
                                       customer.pessoadepara pdp ,
                                       apoio.uf auf ,
                                       customer.pessoaendereco pe 
                                  WHERE documento.iddocumento = pessoadocumento.iddocumento
                                    AND pessoadocumento.idpessoa = pdp.idpessoa
                                    AND tipodocumento.idtipodocumento = documento.idtipodocumento
                                    AND tipodocumento.sgclassificacao = 'CNPJ'
                                    AND pgm.nrdocumentoempresa = documento.nrdocumento
                                    AND pessoadocumento.idpessoa = p.idpessoa
                                    AND pe.idpessoa = p.idpessoa
                                    AND pdp.idpessoa = pe.idpessoa
                                    AND pdp.idpessoa = p.idpessoa
                                    AND auf.iduf = uf.iduf
                                    AND pe.iduf = uf.iduf
                                    AND p.idtipopessoa = 2
                                    AND pe.iduf = auf.iduf
                                    AND pdp.idpessoadepara = pc.idpessoadepara
                                    AND pe.idpessoaendereco = ce.idpessoaendereco
                                    AND pe.idpessoa = pessoadocumento.idpessoa )
            )
            WHERE
                NRLINHA >= :linInicial AND NRLINHA <= :linFinal                                
            ORDER BY CNPJ ;

        int regCorrente = 0;
        EXEC SQL OPEN csr_CNPJ_GM;

        xml_g->createTag( "ListaCNPJ" );
        for ( int j=0;;j++ )
        {

            EXEC SQL FETCH csr_CNPJ_GM INTO
                :nrDocumento:i_nrDocumento ,
                :inAssociacao:i_inAssociacao ;
            
            regCorrente++;


            CONVIND( nrDocumento , i_nrDocumento );
            CONVIND( inAssociacao, i_inAssociacao );
			temCNPJ = true;
            xml_g->createTag( "empresa" );
               xml_g->addItem( "cnpj",(char*)nrDocumento.arr );
               xml_g->addItem( "inAssociacao", (char*)inAssociacao.arr );
            xml_g->closeTag();
            
        }   // for ( ;; )
        EXEC SQL CLOSE csr_CNPJ_GM;

        //xml_g->closeTag();  Fecha a ListaCNPJ
        if (temCNPJ)  // Conforme solicitacao da Compasso, informa controle de paginacao
        { 
        if ( linFinal < qtLinhasRetornar )
            xml_g->addItem( "hasNext", "S" );
        else
            xml_g->addItem( "hasNext", "N" );
        
        xml_g->addItem( "NrPagina", nrPagina );
        xml_g->addItem( "NrLinhas", regCorrente );
		}
        
        xml_g->closeTag();
    }
    else
    {
        EXEC SQL WHENEVER NOT FOUND CONTINUE;
        EXEC SQL
        SELECT
            count(PGM.NRDOCUMENTOGESTOR)
        INTO
            :ctGestorMaster
        FROM
            CUSTOMER.PESSOAGESTOR          PG,
            CUSTOMER.PESSOAGESTORMASTER   PGM
        WHERE
            PG.IDPESSOAGESTOR = :idGestor 
        AND PGM.NRDOCUMENTOGESTOR = PG.NRDOCUMENTO;
      
		xml_g->createTag( "ListaCNPJ" );
        xml_g->closeTag();
        if ( ctGestorMaster > 0 )
        {
            ULOG( "*** Gestor Master não tem associacao." );
            ULOG_END( "ListaCNPJMasterProC()" );
            return -1 ;
        }
        else
        {
            ULOG( "*** Nao eh Gestor Master." );
            ULOG_END( "ListaCNPJMasterProC()" );
            return -5 ;
        }

    }

    ULOG_END( "ListaCNPJMasterProC()" );
    return 0 ;
 
    ErrorORA:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "ListaCNPJMasterProC()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
    
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
// Maximo de 40 registros por pagina, para o buffer tuxedo
long QtdeCNPJsMaster( char * nrCPFPrm )
{
     struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCPF = nrCPFPrm ;
        long    qtRegistros;
        
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_QtdeCNPJsMaster;
        
    EXEC SQL
    SELECT   --+ full(pgm)   
       count (1) 
    INTO
       :qtRegistros
    FROM 
       CUSTOMER.PESSOAGESTORMASTER PGM
    WHERE 
       PGM.NRDOCUMENTOGESTOR = :nrCPF
    AND EXISTS ( SELECT 1 FROM customer.pessoadocumento pessoadocumento ,
                               customer.pessoa p ,
                               customer.documento documento ,
                               customer.contaendereco ce ,
                               customer.ufoperadora uf ,
                               customer.pessoaconta pc ,
                               customer.pessoadepara pdp ,
                               apoio.tipodocumento td ,
                               apoio.uf auf ,
                               customer.pessoaendereco pe 
                          WHERE documento.iddocumento = pessoadocumento.iddocumento
                            AND pessoadocumento.idpessoa = pdp.idpessoa
                            AND documento.idtipodocumento = td.idtipodocumento
                            AND TD.SGCLASSIFICACAO = 'CNPJ'
                            AND pgm.nrdocumentoempresa = documento.nrdocumento
                            AND pessoadocumento.idpessoa = p.idpessoa
                            AND pe.idpessoa = p.idpessoa
                            AND pdp.idpessoa = pe.idpessoa
                            AND pdp.idpessoa = p.idpessoa
                            AND auf.iduf = uf.iduf
                            AND pe.iduf = uf.iduf
                            AND p.idtipopessoa = 2
                            AND pe.iduf = auf.iduf
                            AND pdp.idpessoadepara = pc.idpessoadepara
                            AND pe.idpessoaendereco = ce.idpessoaendereco
                            AND pe.idpessoa = pessoadocumento.idpessoa ) ;
    
    return qtRegistros ;   // 40

    ErrorORA_QtdeCNPJsMaster:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "QtdeCNPJsMaster()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 

}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
long QtdeDetCNPJsMaster( char * nrCNPJPrm )
{
     struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJPrm ;
        long    qtRegistros;
        
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA;
        
     EXEC SQL
    SELECT COUNT (1)
      INTO :qtRegistros
      FROM (SELECT   p.idpessoa AS idpessoa, p.nmpessoa AS nmpessoa,
                     auf.sguf AS sguf
                FROM customer.pessoagestormaster pgm,
                     customer.documento documento,
                     customer.pessoadepara pdp,
                     customer.pessoa p,
                     customer.pessoaendereco pe,
                     apoio.uf auf
               WHERE pgm.nrdocumentoempresa = :nrCNPJ
                 AND pgm.nrdocumentoempresa = documento.nrdocumento
                 AND pdp.idpessoa = p.idpessoa
                 /*
                 AND EXISTS (SELECT 1
                               FROM customer.pessoaconta pc
                              WHERE pdp.idpessoadepara = pc.idpessoadepara)
                 */
                AND exists 
                ( 
                     select 1 from customer.pessoaconta pc ,
                                   customer.conta 
                     where pdp.idpessoadepara = pc.idpessoadepara 
                     and conta.IDCONTA = pc.IDCONTA
                     and
                     ( 
                         (
                            conta.IDSTATUSCONTA = 0
                            and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))
                         )
                         or
                         (
                            conta.IDSTATUSCONTA = 1
                            and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))
                         )
                         or conta.IDSTATUSCONTA in (5,10)
                     )
                )
                 AND EXISTS (
                        SELECT 1
                          FROM apoio.tipodocumento tipodocumento
                         WHERE tipodocumento.idtipodocumento =
                                                         documento.idtipodocumento
                           AND tipodocumento.sgclassificacao = 'CNPJ')
                 AND p.idtipopessoa = 2
                 AND pdp.idpessoa = pe.idpessoa
                 AND pe.idpessoa = p.idpessoa
                 AND EXISTS (SELECT 1
                               FROM customer.ufoperadora uf
                              WHERE pe.iduf = uf.iduf AND auf.iduf = uf.iduf)
                 AND pe.iduf = auf.iduf
                 AND EXISTS (SELECT 1
                               FROM customer.contaendereco ce
                              WHERE pe.idpessoaendereco = ce.idpessoaendereco)
                 AND EXISTS (
                        SELECT 1
                          FROM customer.pessoadocumento pessoadocumento
                         WHERE documento.iddocumento = pessoadocumento.iddocumento
                           AND pessoadocumento.idpessoa = pdp.idpessoa
                           AND pessoadocumento.idpessoa = p.idpessoa
                           AND pe.idpessoa = pessoadocumento.idpessoa)
            GROUP BY p.idpessoa, p.nmpessoa, auf.sguf, pgm.inassociacao);
            
    return qtRegistros ;   // 40

    ErrorORA:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "QtdeDetCNPJsMaster()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
 
}


/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
long QtdeDetCNPJsMasterRank( char * nrCNPJPrm )
{
     struct sqlca sqlca;
	 string stmt;
    char buffer[256];
	char queryBuffer[5000];

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJPrm ;
        long    qtRegistros;
		char * query;
        
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA;
        
	stmt = " Select "
              " count(1) "
            " From   "
            " ("
            "    Select"
            "       idPessoa ,"
            "       nmPessoa ,"
            "       sgUF ,"
            "       RowNum as nrLinha"
            "    From"
            "       ("
            "           SELECT  distinct    "
            "               p.idpessoa as idPessoa , "
            "               p.nmpessoa as nmPessoa , "
            "               auf.sguf as sgUF,"
            "                DENSE_RANK() OVER (PARTITION BY p.idpessoa, p.nmpessoa, auf.sguf ORDER BY p.rowid ASC) RANK             "
            "           FROM customer.pessoagestormaster pgm,"
            "                customer.documento documento,"
            "                customer.pessoadepara pdp,"
            "                customer.pessoa p,"
            "                customer.pessoaendereco pe,"
            "                apoio.uf auf";
			memset( &queryBuffer  , 0x0, sizeof(queryBuffer));
			sprintf(queryBuffer	," WHERE pgm.nrdocumentoempresa = '%s' ", nrCNPJ);
			stmt += queryBuffer;
			
            stmt +=  "   AND pgm.nrdocumentoempresa = documento.nrdocumento"
            "            AND pdp.idpessoa = p.idpessoa"
            "            AND exists "
            "             ( "
            "                  select 1 from customer.pessoaconta pc ,"
            "                                customer.conta "
            "                  where pdp.idpessoadepara = pc.idpessoadepara "
            "                  and conta.IDCONTA = pc.IDCONTA"
            "                  and"
            "                  ( "
            "                      ("
            "                         conta.IDSTATUSCONTA = 0"
            "                         and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))"
            "                      )"
            "                      or"
            "                      ("
            "                         conta.IDSTATUSCONTA = 1"
            "                         and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))"
            "                      )"
            "                      or conta.IDSTATUSCONTA in (5,10)"
            "                  )"
            "            )"
            "            and exists ( select 1 from apoio.tipodocumento tipodocumento where tipodocumento.idtipodocumento = documento.idtipodocumento"
            "                                  AND tipodocumento.sgclassificacao = 'CNPJ' )"
            "            AND p.idtipopessoa = 2"
            "            AND pdp.idpessoa = pe.idpessoa"
            "            AND pe.idpessoa = p.idpessoa"
            "            and exists ( select 1 from customer.ufoperadora uf where pe.iduf = uf.iduf AND auf.iduf = uf.iduf and auf.iduf > 0 and auf.INPREENCHELISTA = 1 )"
            "            AND pe.iduf = auf.iduf"
            "            and exists ( select 1 from customer.contaendereco ce where pe.idpessoaendereco = ce.idpessoaendereco )"
            "            and exists ( select   1 from customer.pessoadocumento pessoadocumento where documento.iddocumento = pessoadocumento.iddocumento"
            "                                  AND pessoadocumento.idpessoa = pdp.idpessoa"
            "                                  AND pessoadocumento.idpessoa = p.idpessoa"
            "                                  AND pe.idpessoa = pessoadocumento.idpessoa )"
            "         ORDER BY p.nmpessoa, auf.sgUF ,RANK)"
            "                  wHERE RANK = 1)";
			memset( &queryBuffer  , 0x0, sizeof(queryBuffer));			
			stmt += queryBuffer;			
			ULOG("### query com rank = [%s]", (char *)stmt.c_str() );			
			query = (char *)stmt.c_str();     
			
			EXEC SQL PREPARE COUNTCNPJ FROM :query;
			EXEC SQL DECLARE cCOUNTCNPJ CURSOR FOR COUNTCNPJ;
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			EXEC SQL OPEN cCOUNTCNPJ;		
			for( ;; ) 
			{
				EXEC SQL FETCH cCOUNTCNPJ INTO :qtRegistros;
			}			
			EXEC SQL CLOSE cCOUNTCNPJ;		

			ULOG("### COUNT do denserank = [%d]", qtRegistros );	

			return qtRegistros;

    ErrorORA:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "QtdeDetCNPJsMaster()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
 
}


/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int DetalheCNPJMasterUnicoProC( char * nrCNPJ_Prm, XMLGen * xml_g  )   // Operacao 22 Unico
{
    ULOG_START( "DetalheCNPJMasterUnicoProC()" );

    int retorno = 0;
    
    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJ_Prm;

        VARCHAR idPessoa[256];
        short i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short i_nmPessoa = -1;
        VARCHAR sgUF[3];
        short i_sgUF = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    struct sqlca sqlca;
    
    memset( &idPessoa     , 0x0, sizeof(idPessoa) );
    memset( &nmPessoa     , 0x0, sizeof(nmPessoa) );
    memset( &sgUF         , 0x0, sizeof(sgUF) );
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_CNPJMasterUnico;
    
    EXEC SQL 
    SELECT   
        idpessoa, 
        nmpessoa, 
        sguf 
      INTO
        :idPessoa:i_idPessoa ,
        :nmPessoa:i_nmPessoa ,
        :sgUF:i_sgUF 
    FROM 
        CUSTOMER.DOCUMENTOCONSOLIDADO
    WHERE 
        nrdocumento = :nrCNPJ
    AND inTipoPessoa = 2
    AND ROWNUM < 2;
    
    if ( i_idPessoa == -1 )
    {
    
        EXEC SQL 
          SELECT      
              p.idpessoa as idPessoa , 
              p.nmpessoa as nmPessoa , 
              auf.sguf as sgUF
          INTO
            :idPessoa:i_idPessoa ,
            :nmPessoa:i_nmPessoa ,
            :sgUF:i_sgUF 
          FROM customer.pessoagestormaster pgm,
               customer.documento documento,
               customer.pessoadepara pdp,
               customer.pessoa p,
               customer.pessoaendereco pe,
               apoio.uf auf
        WHERE pgm.nrdocumentoempresa = :nrCNPJ
           AND pgm.nrdocumentoempresa = documento.nrdocumento
           AND pdp.idpessoa = p.idpessoa
           AND exists 
            ( 
                 select 1 from customer.pessoaconta pc ,
                               customer.conta 
                 where pdp.idpessoadepara = pc.idpessoadepara 
                 and conta.IDCONTA = pc.IDCONTA
                 and
                 ( 
                     (
                        conta.IDSTATUSCONTA = 0
                        and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))
                     )
                     or
                     (
                        conta.IDSTATUSCONTA = 1
                        and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))
                     )
                     or conta.IDSTATUSCONTA in (5,10)
                 )
           )
           and exists ( select 1 from apoio.tipodocumento tipodocumento where tipodocumento.idtipodocumento = documento.idtipodocumento
                                 AND tipodocumento.sgclassificacao = 'CNPJ' )
           AND p.idtipopessoa = 2
           AND pdp.idpessoa = pe.idpessoa
           AND pe.idpessoa = p.idpessoa
           and exists ( select 1 from customer.ufoperadora uf where pe.iduf = uf.iduf AND auf.iduf = uf.iduf )
           AND pe.iduf = auf.iduf
           and exists ( select 1 from customer.contaendereco ce where pe.idpessoaendereco = ce.idpessoaendereco )
           and exists ( select   1 from customer.pessoadocumento pessoadocumento where documento.iddocumento = pessoadocumento.iddocumento
                                 AND pessoadocumento.idpessoa = pdp.idpessoa
                                 AND pessoadocumento.idpessoa = p.idpessoa
                                 AND pe.idpessoa = pessoadocumento.idpessoa )
               AND ROWNUM < 2 ;
    }
                                             
    CONVIND( idPessoa    , i_idPessoa );
    CONVIND( nmPessoa    , i_nmPessoa );
    CONVIND( sgUF        , i_sgUF );

    xml_g->createTag( "DetalheCNPJ" );
    if ( i_idPessoa != -1 )
    {
        xml_g->createTag( "empresa" );
            xml_g->addItem( "cnpj", nrCNPJ );
            xml_g->addItem( "nome", (char*)nmPessoa.arr );
            xml_g->createTag( "list" );
              xml_g->createTag( "p" );
                xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                xml_g->addItem( "sgUF", (char*)sgUF.arr );
              xml_g->closeTag();
            xml_g->closeTag();
        xml_g->closeTag();
        xml_g->addItem( "hasNext", "N" );
        xml_g->addItem( "NrPagina", 1 );
        xml_g->addItem( "NrLinhas", 1 );
    }
    else
    {
        xml_g->addItem( "hasNext", "N" );
        xml_g->addItem( "NrPagina", 1 );
        xml_g->addItem( "NrLinhas", 0 );
        retorno = -11 ;
    }
    xml_g->closeTag();   // xml_g->createTag( "DetalheCNPJ" );

    ULOG_END( "DetalheCNPJMasterUnicoProC()" );
    return retorno;

    ErrorORA_CNPJMasterUnico:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "DetalheCNPJMasterUnicoProC()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
    
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int ListaContasProC( char * idPessoaGestorPrm, 
                     char * nrDocumentoPrm, 
                     char * pszNrPagina, 
                     char * qtdMaxLin, 
                     XMLGen * xml_g )   // Operacao 25
{
    ULOG_START( "ListaContasProC()" );
    
    int j;
    char   idPessoaAnter[65];
    char   idContaAnter[256];
    int    ACESSO_GESTOR_DE_CONTA=0;

    const int MAX_REG_CNPJ_MASTER = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int regCorrente;
    
    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm;
        char * nrDocumento = nrDocumentoPrm ;
        long qtLinhasRetornar;
        int linInicial;
        int linFinal;
        
        int retorno = 0;
        
        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;
        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
        VARCHAR idPessoa[65];
        short   i_idPessoa;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora;
        VARCHAR sgUF[256];
        short   i_sgUF;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
        VARCHAR parametroValor[256];
        const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
        short i_parametroValor = -1;

    EXEC SQL END DECLARE SECTION;

    memset( &idConta     , 0x0, sizeof(idConta) );
    memset( &cdConta     , 0x0, sizeof(cdConta) );
    memset( &sgPermissao , 0x0, sizeof(sgPermissao) );
    memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );
    memset( idContaAnter , 0x0, sizeof(idContaAnter) );
    
    
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "*** Gestor de Conta para o CNPJ => [%s]", nrDocumento );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    SELECT
        DSVALORPARAMETRO 
    INTO 
        :parametroValor:i_parametroValor
    FROM 
        APOIO.PARAMETRO
    WHERE  
        CDPARAMETRO = :parametro;

    CONVIND( idConta, i_idConta );

    if(i_parametroValor != -1)
    {
        ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
    }
    else
    {
        ACESSO_GESTOR_DE_CONTA = 1;
    }

   
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    if( ACESSO_GESTOR_DE_CONTA == 1)
    {
        qtLinhasRetornar = QtdeContasCNPJ( idPessoaGestor , nrDocumento );
        
        ULOG( "Total de registros recuperados [%ld]", qtLinhasRetornar );
        
        if ( qtLinhasRetornar > 0 )
        {
            if ( qtMaxLinhas > MAX_REG_CNPJ_MASTER )
                qtMaxLinhas = MAX_REG_CNPJ_MASTER;
        
            linInicial = (nrPagina-1)*qtMaxLinhas+1;  
            linFinal = (nrPagina*qtMaxLinhas);

            ULOG("linInicial = [%d]",linInicial);
            ULOG("  linFinal = [%d]",linFinal);

            xml_g->createTag( "ListaContas" );
            xml_g->addItem( "nrDocumento", nrDocumento );
            xml_g->addItem( "tpGestor", "GC" );
                    
            EXEC SQL DECLARE csr_ListaContas CURSOR FOR
            SELECT idconta, cdconta, nmconta, idcontasistemaorigem, incontrolepj,
                   idpessoa, nmpessoa, sgtipopessoa, idsegmentacao, idufoperadora, sguf,
                   idtipocarteira, sgpermissaogestor, idpessoadepara
              FROM (SELECT idconta, cdconta, nmconta, idcontasistemaorigem, incontrolepj,
                           idpessoa, nmpessoa, sgtipopessoa, idsegmentacao, idufoperadora,
                           sguf, idtipocarteira, sgpermissaogestor, idpessoadepara,
                           ROWNUM AS nrlinha
                      FROM (SELECT DISTINCT c.idconta AS idconta, c.cdconta AS cdconta,
                                            c.nmconta AS nmconta,
                                            c.idcontasistemaorigem
                                                                  AS idcontasistemaorigem,
                                            NVL (c.incontrolepj, 0) AS incontrolepj,
                                            gc_v01.idpessoa AS idpessoa,
                                            gc_v01.nmpessoa AS nmpessoa,
                                            gc_v01.sgtipopessoa AS sgtipopessoa,
                                            gc_v01.idsegmentacao AS idsegmentacao,
                                            gc_v01.idufoperadora AS idufoperadora,
                                            gc_v01.sguf AS sguf,
                                            gc_v01.idtipocarteira AS idtipocarteira,
                                            pg.sgpermissaogestor AS sgpermissaogestor,
                                            pdp.idpessoadepara AS idpessoadepara
                                       FROM vol.empresagestor_gc_v01 gc_v01,
                                            apoio.permissaogestor pg,
                                            customer.conta c,
                                            customer.documento d,
                                            customer.pessoadocumento pd,
                                            customer.pessoaconta pc,
                                            customer.pessoadepara pdp,
                                            vole.contagestor cg
                                      WHERE pc.idtiporelacionamento = 2
                                        AND gc_v01.idpessoagestor = cg.idpessoagestor
                                        AND cg.idpermissaogestor = pg.idpermissaogestor(+)
                                        AND gc_v01.idconta = c.idconta
                                        AND pd.iddocumento = d.iddocumento
                                        AND pc.idpessoadepara = pdp.idpessoadepara
                                        AND pdp.idpessoa = pd.idpessoa
                                        AND pc.idconta = cg.idconta
                                        AND pc.idconta = c.idconta
                                        AND d.nrdocumento = :nrDocumento
                                        AND cg.idpessoagestor = :idPessoaGestor))
             WHERE NRLINHA >= :linInicial AND NRLINHA <= :linFinal ;
             
            bool bPrimeiroLoop = true;
            EXEC SQL WHENEVER NOT FOUND DO BREAK;
            
            regCorrente = 0;
            EXEC SQL OPEN csr_ListaContas;
            for( ;; ) 
            {
                i_sgPermissao = -1;

                memset( &idConta             , 0x0, sizeof(idConta) );
                memset( &cdConta             , 0x0, sizeof(cdConta) );
                memset( &nmConta             , 0x0, sizeof(nmConta) );
                memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
                memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
                memset( &idPessoa            , 0x0, sizeof(idPessoa) );
                memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
                memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
                memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
                memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
                memset( &sgUF                , 0x0, sizeof(sgUF) );
                memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
                memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );
                     
                EXEC SQL FETCH csr_ListaContas INTO
                    :idConta:i_idConta ,
                    :cdConta:i_cdConta ,
                    :nmConta:i_nmConta ,
                    :idContaSistemaOrigem:i_idContaSistemaOrigem ,
                    :inControlePJ:i_inControlePJ ,
                    :idPessoa:i_idPessoa ,
                    :nmPessoa:i_nmPessoa , 
                    :sgTipoPessoa:i_sgTipoPessoa ,
                    :idSegmentacao:i_idSegmentacao ,
                    :idUFOperadora:i_idUFOperadora ,
                    :sgUF:i_sgUF ,
                    :idTipoCarteira:i_idTipoCarteira ,
                    :sgPermissao:i_sgPermissao ,
                    :idPessoaDePara:i_idPessoaDePara ;
                
                CONVIND( idConta, i_idConta );
                CONVIND( sgPermissao, i_sgPermissao );
                CONVIND( cdConta, i_cdConta );
                CONVIND( nmConta, i_nmConta );
                CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
                CONVIND( inControlePJ, i_inControlePJ );
                CONVIND( idPessoa       , i_idPessoa );
                CONVIND( nmPessoa       , i_nmPessoa );
                CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
                CONVIND( idSegmentacao  , i_idSegmentacao );
                CONVIND( idUFOperadora  , i_idUFOperadora );
                CONVIND( sgUF           , i_sgUF );
                CONVIND( idTipoCarteira , i_idTipoCarteira );
                CONVIND( idPessoaDePara, i_idPessoaDePara );
                regCorrente++;
             
                if ( !strcmp( idPessoaAnter, (char*)idPessoa.arr ) )
                {
                    bPrimeiroLoop = false;
                }
                else
                {
                    bPrimeiroLoop = true;
                    strcpy( idPessoaAnter, (char*)idPessoa.arr );
                }
                 
                if (bPrimeiroLoop == true)
                {
                    xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                    xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                    xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                    xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                    xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                    xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                    xml_g->addItem( "sgUF", (char*)sgUF.arr );
                    xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
                }
                               
                if ( strcmp(idContaAnter,(char*)idConta.arr) )
                {
                     xml_g->createTag( "Conta" );
                        xml_g->addItem( "idConta", (char*)idConta.arr );
                        xml_g->addItem( "cdConta", (char*)cdConta.arr );
                        if ( i_sgPermissao != -1 )
                        {
                           xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                        }
                        xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                        xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                        xml_g->addItem( "nmConta", (char*)nmConta.arr );
                        xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
                     xml_g->closeTag();
                     strcpy( idContaAnter, (char*)idConta.arr );
                }
            }

            EXEC SQL CLOSE csr_ListaContas;
            
            if ( linFinal < qtLinhasRetornar )
                xml_g->addItem( "hasNext", "S" );
            else
                xml_g->addItem( "hasNext", "N" );
            
            if ( qtLinhasRetornar > 0 )
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", regCorrente );
            }
            else
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", 0 );
                ULOG( "*** Nao foram encontrados registros para idPessoaGestor [%s], CNPJ [%s]", idPessoaGestor, nrDocumento );
                ULOG_END( "ListaContasProC()" );
                retorno = -11 ;
            }
            
            
            xml_g->closeTag();
        }
        

    }
    else //ACESSO_GESTOR_DE_CONTA == 2
    {
        ULOG( "*** Direcionando para GestoresDeContaR() ***" );
        ULOG_END( "ListaContasProC()" );
        ULOG( "Passando valores idPessoaGestor [%s], nrDocumentoPrm [%s], pszNrPagina [%s], qtdMaxLin [%s]", idPessoaGestor, nrDocumentoPrm, pszNrPagina, qtdMaxLin );
        return GestoresDeContaR( idPessoaGestor, nrDocumentoPrm, pszNrPagina, qtdMaxLin, xml_g);
    }

    ULOG_END( "ListaContasProC()" );
    return retorno;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 

}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int ListaContaUnicoProC( char * idPessoaGestorPrm , 
                         char * nrDocumentoPrm , 
                         char * cdContaPrm ,
                         XMLGen * xml_g )   // Operacao 25
{
    ULOG_START( "ListaContaUnicoProC()" );
    
    int j;
    char   idPessoaAnter[65];
    char   idContaAnter[256];
    int    ACESSO_GESTOR_DE_CONTA=0;

    const int MAX_REG_CNPJ_MASTER = 40;
    
    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm;
        char * nrDocumento = nrDocumentoPrm ;
        char * cdContaSql = cdContaPrm ;
        long qtLinhasRetornar;
        int linInicial;
        int linFinal;
        
        int retorno = 0;
        
        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;
        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
        VARCHAR idPessoa[65];
        short   i_idPessoa;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora;
        VARCHAR sgUF[256];
        short   i_sgUF;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
        VARCHAR parametroValor[256];
        const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
        short i_parametroValor = -1;

    EXEC SQL END DECLARE SECTION;

    
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "*** Gestor de Conta para o CNPJ => [%s]", nrDocumento );
    ULOG( "*** Codigo da Conta             => [%s]", cdContaSql );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorContaUnico;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    SELECT
        DSVALORPARAMETRO 
    INTO 
        :parametroValor:i_parametroValor
    FROM 
        APOIO.PARAMETRO
    WHERE  
        CDPARAMETRO = :parametro;

    if(i_parametroValor != -1)
    {
        ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
    }
    else
    {
        ACESSO_GESTOR_DE_CONTA = 1;
    }

    if( ACESSO_GESTOR_DE_CONTA == 1)
    {
        i_sgPermissao = -1;

        memset( &idConta             , 0x0, sizeof(idConta) );
        memset( &cdConta             , 0x0, sizeof(cdConta) );
        memset( &nmConta             , 0x0, sizeof(nmConta) );
        memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
        memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
        memset( &idPessoa            , 0x0, sizeof(idPessoa) );
        memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
        memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
        memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
        memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
        memset( &sgUF                , 0x0, sizeof(sgUF) );
        memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
        memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );

        EXEC SQL 
        SELECT 
            c.idconta AS idconta, 
            c.cdconta AS cdconta,
            c.nmconta AS nmconta,
            c.idcontasistemaorigem AS idcontasistemaorigem,
            NVL (c.incontrolepj, 0) AS incontrolepj,
            gc_v01.idpessoa AS idpessoa,
            gc_v01.nmpessoa AS nmpessoa,
            gc_v01.sgtipopessoa AS sgtipopessoa,
            gc_v01.idsegmentacao AS idsegmentacao,
            gc_v01.idufoperadora AS idufoperadora,
            gc_v01.sguf AS sguf,
            gc_v01.idtipocarteira AS idtipocarteira,
            pg.sgpermissaogestor AS sgpermissaogestor,
            pdp.idpessoadepara AS idpessoadepara
        INTO
            :idConta:i_idConta ,
            :cdConta:i_cdConta ,
            :nmConta:i_nmConta ,
            :idContaSistemaOrigem:i_idContaSistemaOrigem ,
            :inControlePJ:i_inControlePJ ,
            :idPessoa:i_idPessoa ,
            :nmPessoa:i_nmPessoa , 
            :sgTipoPessoa:i_sgTipoPessoa ,
            :idSegmentacao:i_idSegmentacao ,
            :idUFOperadora:i_idUFOperadora ,
            :sgUF:i_sgUF ,
            :idTipoCarteira:i_idTipoCarteira ,
            :sgPermissao:i_sgPermissao ,
            :idPessoaDePara:i_idPessoaDePara 
        FROM 
           vol.empresagestor_gc_v01 gc_v01,
           apoio.permissaogestor pg,
           customer.conta c,
           customer.documento d,
           customer.pessoadocumento pd,
           customer.pessoaconta pc,
           customer.pessoadepara pdp,
           vole.contagestor cg
        WHERE 
           pc.idtiporelacionamento = 2
        AND gc_v01.idpessoagestor = cg.idpessoagestor
        AND cg.idpermissaogestor = pg.idpermissaogestor(+)
        AND gc_v01.idconta = c.idconta
        AND pd.iddocumento = d.iddocumento
        AND pc.idpessoadepara = pdp.idpessoadepara
        AND pdp.idpessoa = pd.idpessoa
        AND pc.idconta = cg.idconta
        AND pc.idconta = c.idconta
        AND c.cdConta = :cdContaSql
        AND d.nrdocumento = :nrDocumento
        AND cg.idpessoagestor = :idPessoaGestor 
        AND ROWNUM < 2;
        
        if ( i_idConta != -1 )
        {
            CONVIND( idConta             , i_idConta );
            CONVIND( sgPermissao         , i_sgPermissao );
            CONVIND( cdConta             , i_cdConta );
            CONVIND( nmConta             , i_nmConta );
            CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
            CONVIND( inControlePJ        , i_inControlePJ );
            CONVIND( idPessoa            , i_idPessoa );
            CONVIND( nmPessoa            , i_nmPessoa );
            CONVIND( sgTipoPessoa        , i_sgTipoPessoa );
            CONVIND( idSegmentacao       , i_idSegmentacao );
            CONVIND( idUFOperadora       , i_idUFOperadora );
            CONVIND( sgUF                , i_sgUF );
            CONVIND( idTipoCarteira      , i_idTipoCarteira );
            CONVIND( idPessoaDePara      , i_idPessoaDePara );

            xml_g->createTag( "ListaContas" );
                xml_g->addItem( "nrDocumento", nrDocumento );
                xml_g->addItem( "tpGestor", "GC" );
                xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                xml_g->addItem( "sgUF", (char*)sgUF.arr );
                xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
                xml_g->createTag( "Conta" );
                    xml_g->addItem( "idConta", (char*)idConta.arr );
                    xml_g->addItem( "cdConta", (char*)cdConta.arr );
                    if ( i_sgPermissao != -1 )
                    {
                       xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                    }
                    xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                    xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                    xml_g->addItem( "nmConta", (char*)nmConta.arr );
                    xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
                xml_g->closeTag();
                xml_g->addItem( "hasNext", "N" );
                xml_g->addItem( "NrPagina", 1 );
                xml_g->addItem( "NrLinhas", 1 );
            
            xml_g->closeTag();   // xml_g->createTag( "ListaContas" );

        }
        else
        {
            xml_g->addItem( "NrPagina", 1 );
            xml_g->addItem( "NrLinhas", 0 );
            ULOG( "*** Nao foram encontrados registros para idPessoaGestor [%s], CNPJ [%s] e cdConta [%s]", idPessoaGestor, nrDocumento, cdContaSql );
            ULOG_END( "ListaContaUnicoProC()" );
            retorno = -11 ;
        }
            
    }
    else //ACESSO_GESTOR_DE_CONTA == 2
    {
        ULOG( "*** Direcionando para GestoresDeContaR() ***" );
        ULOG_END( "ListaContaUnicoProC()" );
        ULOG( "Passando valores idPessoaGestor [%s], nrDocumentoPrm [%s], cdConta [%s]", idPessoaGestor, nrDocumentoPrm, cdContaSql );
        return GestoresDeContaUnicoR( idPessoaGestor, nrDocumentoPrm, cdContaSql, xml_g);
    }

    ULOG_END( "ListaContaUnicoProC()" );
    return retorno;
 
   sqlErrorContaUnico:
      throw TuxBasicOraException(sqlca.sqlcode); 

}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int DetalheCNPJMasterProC( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  )   // Operacao 22
{
    ULOG_START( "DetalheCNPJMasterProC()" );

    bool flgExiste = false ;
    const int MAX_REG_DET_CNPJ = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int regCorrente = 0;
    int retorno = 0;

    string stmt;
    char buffer[256];

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJ_Prm;
        int inConsolidado = 0;
        char * query;
        
        VARCHAR idPessoa[256];
        short i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short i_nmPessoa = -1;
        VARCHAR sgUF[256];
        short i_sgUF = -1;
        long linInicial ;
        long linFinal ;
        
    EXEC SQL END DECLARE SECTION;
    
    struct sqlca sqlca;
    long qtLinhasRetornar ;
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_DetalheCNPJMaster;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("** Consultar CNPJ [%s]", nrCNPJ );
    // Identifa CNPJs consolidados para fazer a consulta demorada
    EXEC SQL
    SELECT COUNT(NRDOCUMENTO) 
       INTO :inConsolidado 
    FROM 
       CUSTOMER.DOCUMENTOCONSOLIDADO 
    WHERE 
       NRDOCUMENTO = :nrCNPJ 
    AND INTIPOPESSOA = 2
    AND ROWNUM < 2;
    if ( inConsolidado > 0 )
    {
        ULOG("** Desviando fluxo para consultar tabela consolidada ***" );
        DetalheCNPJ_ConsolidadoProC( nrCNPJ_Prm, pszNrPagina, qtdMaxLin, xml_g  );
        ULOG_END( "DetalheCNPJMasterProC()" );
        return 0 ;
    }
    else  // Efetua consulta sem consolidacao, eh um CNPJ com poucas linhas
    {
    
        memset( &idPessoa     , 0x0, sizeof(idPessoa) );
        memset( &nmPessoa     , 0x0, sizeof(nmPessoa) );
        memset( &sgUF         , 0x0, sizeof(sgUF) );

        if ( qtMaxLinhas > MAX_REG_DET_CNPJ )
            qtMaxLinhas = MAX_REG_DET_CNPJ;
        
        qtLinhasRetornar = QtdeDetCNPJsMaster( nrCNPJ );
        linInicial = (nrPagina-1)*qtMaxLinhas+1;
        linFinal = (nrPagina*qtMaxLinhas);

        ULOG(" linInicial = [%ld]",linInicial);
        ULOG("  linFinal  = [%ld]",linFinal);
        ULOG("### Linhas existentes na base = [%ld]", qtLinhasRetornar );
        
        //if ( qtLinhasRetornar > 0 )
        //{
            EXEC SQL DECLARE csrDetalheCNPJ CURSOR FOR   
            Select
              idPessoa ,
              nmPessoa ,
              sgUF 
            From   
            (
               Select
                  idPessoa ,
                  nmPessoa ,
                  sgUF ,
                  RowNum as nrLinha
               From
                  (
                      SELECT      
                          p.idpessoa as idPessoa , 
                          p.nmpessoa as nmPessoa , 
                          auf.sguf as sgUF
                      FROM customer.pessoagestormaster pgm,
                           customer.documento documento,
                           customer.pessoadepara pdp,
                           customer.pessoa p,
                           customer.pessoaendereco pe,
                           apoio.uf auf
                    WHERE pgm.nrdocumentoempresa = :nrCNPJ
                       AND pgm.nrdocumentoempresa = documento.nrdocumento
                       AND pdp.idpessoa = p.idpessoa
                       /*   AND exists ( select 1 from customer.pessoaconta pc where pdp.idpessoadepara = pc.idpessoadepara )   */
                        AND exists 
                        ( 
                             select 1 from customer.pessoaconta pc ,
                                           customer.conta 
                             where pdp.idpessoadepara = pc.idpessoadepara 
                             and conta.IDCONTA = pc.IDCONTA
                             and
                             ( 
                                 (
                                    conta.IDSTATUSCONTA = 0
                                    and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))
                                 )
                                 or
                                 (
                                    conta.IDSTATUSCONTA = 1
                                    and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))
                                 )
                                 or conta.IDSTATUSCONTA in (5,10)
                             )
                       )
                       and exists ( select 1 from apoio.tipodocumento tipodocumento where tipodocumento.idtipodocumento = documento.idtipodocumento
                                             AND tipodocumento.sgclassificacao = 'CNPJ' )
                       AND p.idtipopessoa = 2
                       AND pdp.idpessoa = pe.idpessoa
                       AND pe.idpessoa = p.idpessoa
                       and exists ( select 1 from customer.ufoperadora uf where pe.iduf = uf.iduf AND auf.iduf = uf.iduf and auf.iduf > 0 and auf.INPREENCHELISTA = 1 )
                       AND pe.iduf = auf.iduf
                       and exists ( select 1 from customer.contaendereco ce where pe.idpessoaendereco = ce.idpessoaendereco )
                       and exists ( select   1 from customer.pessoadocumento pessoadocumento where documento.iddocumento = pessoadocumento.iddocumento
                                             AND pessoadocumento.idpessoa = pdp.idpessoa
                                             AND pessoadocumento.idpessoa = p.idpessoa
                                             AND pe.idpessoa = pessoadocumento.idpessoa )
                    GROUP BY p.idpessoa, p.nmpessoa, auf.sguf
                    ORDER BY p.nmpessoa, auf.sgUF
                ) ) Where nrLinha >= :linInicial AND nrLinha <= :linFinal ;
            
         
            EXEC SQL WHENEVER NOT FOUND DO BREAK;

            EXEC SQL OPEN csrDetalheCNPJ;
            xml_g->createTag( "DetalheCNPJ" );
            for( ;; ) 
            {
                EXEC SQL FETCH csrDetalheCNPJ INTO
                       :idPessoa:i_idPessoa ,
                       :nmPessoa:i_nmPessoa ,
                       :sgUF:i_sgUF ;
                       
                CONVIND( idPessoa    , i_idPessoa );
                CONVIND( nmPessoa    , i_nmPessoa );
                CONVIND( sgUF        , i_sgUF );
                
                ULOG( "idPessoa [%s]",(char*)idPessoa.arr );
                ULOG( "nmPessoa [%s]",(char*)nmPessoa.arr );
                ULOG( "sgUF     [%s]",(char*)sgUF.arr );
                
                if ( flgExiste == false )
                {
                    xml_g->createTag( "empresa" );
                    xml_g->addItem( "cnpj", nrCNPJ );
                    xml_g->addItem( "nome", (char*)nmPessoa.arr );
                    xml_g->createTag( "list" );
                    flgExiste = true ;
                }
                   
                xml_g->createTag( "p" );
                    xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                    xml_g->addItem( "sgUF", (char*)sgUF.arr );
                    regCorrente++;
                xml_g->closeTag();
            }
            
            EXEC SQL CLOSE csrDetalheCNPJ;
            
            if ( flgExiste == true )
            {
                xml_g->closeTag();   // list
                xml_g->closeTag();   // empresa
            }
            
            if ( linFinal < qtLinhasRetornar )
                xml_g->addItem( "hasNext", "S" );
            else
                xml_g->addItem( "hasNext", "N" );
            
            ULOG( "regCorrente [%d]", regCorrente );
            if ( regCorrente > 0 )
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", regCorrente );
            }
            else
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", 0 );
                ULOG( "*** Nao encontrou registros para o documento [%s]", nrCNPJ );
                retorno = -11 ;
            }
            
            xml_g->closeTag();   // Fecha DetalheCNPJ

        //}   // if ( qtLinhasRetornar > 0 )
            

        ULOG_END( "DetalheCNPJMasterProC()" );
        return retorno ;

        ErrorORA_DetalheCNPJMaster:
            ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
            ULOG_END( "DetalheCNPJMasterProC()" );
            throw TuxBasicOraException( sqlca.sqlcode ); 
    } // else // Efetua consulta sem consolidacao, eh um CNPJ com poucas linhas
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 */
int DetalheCNPJMasterProCRank( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  )   // Operacao 22
{
    ULOG_START( "DetalheCNPJMasterProCRank()" );

    bool flgExiste = false ;
    const int MAX_REG_DET_CNPJ = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int regCorrente = 0;
    int retorno = 0;

    string stmt;
    char buffer[256];
	char queryBuffer[5000];

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJ_Prm;
        int inConsolidado = 0;
        char * query;
        
        VARCHAR idPessoa[256];
        short i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short i_nmPessoa = -1;
        VARCHAR sgUF[256];
        short i_sgUF = -1;
        long linInicial ;
        long linFinal ;
        
    EXEC SQL END DECLARE SECTION;
    
    struct sqlca sqlca;
    long qtLinhasRetornar ;
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_DetalheCNPJMaster;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("** Consultar CNPJ [%s]", nrCNPJ );
    // Identifa CNPJs consolidados para fazer a consulta demorada
    EXEC SQL
    SELECT COUNT(NRDOCUMENTO) 
       INTO :inConsolidado 
    FROM 
       CUSTOMER.DOCUMENTOCONSOLIDADO 
    WHERE 
       NRDOCUMENTO = :nrCNPJ 
    AND INTIPOPESSOA = 2
    AND ROWNUM < 2;
    if ( inConsolidado > 0 )
    {
        ULOG("** Desviando fluxo para consultar tabela consolidada ***" );
        DetalheCNPJ_ConsolidadoProC( nrCNPJ_Prm, pszNrPagina, qtdMaxLin, xml_g  );
        ULOG_END( "DetalheCNPJMasterProCRank()" );
        return 0 ;
    }
    else  // Efetua consulta sem consolidacao, eh um CNPJ com poucas linhas
    {
    
        memset( &idPessoa     , 0x0, sizeof(idPessoa) );
        memset( &nmPessoa     , 0x0, sizeof(nmPessoa) );
        memset( &sgUF         , 0x0, sizeof(sgUF) );
		memset( &queryBuffer  , 0x0, sizeof(queryBuffer));

        if ( qtMaxLinhas > MAX_REG_DET_CNPJ )
            qtMaxLinhas = MAX_REG_DET_CNPJ;
        
        qtLinhasRetornar = QtdeDetCNPJsMasterRank( nrCNPJ );
        linInicial = (nrPagina-1)*qtMaxLinhas+1;
        linFinal = (nrPagina*qtMaxLinhas);

        ULOG(" linInicial = [%ld]",linInicial);
        ULOG("  linFinal  = [%ld]",linFinal);
        ULOG("### Linhas existentes na base = [%ld]", qtLinhasRetornar );
        
        stmt = " Select "
              " idPessoa ,"
              " nmPessoa ,"
              " sgUF "
            " From   "
            " ("
            "    Select"
            "       idPessoa ,"
            "       nmPessoa ,"
            "       sgUF ,"
            "       RowNum as nrLinha"
            "    From"
            "       ("
            "           SELECT  distinct    "
            "               p.idpessoa as idPessoa , "
            "               p.nmpessoa as nmPessoa , "
            "               auf.sguf as sgUF,"
            "                DENSE_RANK() OVER (PARTITION BY p.idpessoa, p.nmpessoa, auf.sguf ORDER BY p.rowid ASC) RANK             "
            "           FROM customer.pessoagestormaster pgm,"
            "                customer.documento documento,"
            "                customer.pessoadepara pdp,"
            "                customer.pessoa p,"
            "                customer.pessoaendereco pe,"
            "                apoio.uf auf";
			memset( &queryBuffer  , 0x0, sizeof(queryBuffer));
			sprintf(queryBuffer	," WHERE pgm.nrdocumentoempresa = '%s' ", nrCNPJ);
			stmt += queryBuffer;
			
            stmt +=  "   AND pgm.nrdocumentoempresa = documento.nrdocumento"
            "            AND pdp.idpessoa = p.idpessoa"
            "            AND exists "
            "             ( "
            "                  select 1 from customer.pessoaconta pc ,"
            "                                customer.conta "
            "                  where pdp.idpessoadepara = pc.idpessoadepara "
            "                  and conta.IDCONTA = pc.IDCONTA"
            "                  and"
            "                  ( "
            "                      ("
            "                         conta.IDSTATUSCONTA = 0"
            "                         and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))"
            "                      )"
            "                      or"
            "                      ("
            "                         conta.IDSTATUSCONTA = 1"
            "                         and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))"
            "                      )"
            "                      or conta.IDSTATUSCONTA in (5,10)"
            "                  )"
            "            )"
            "            and exists ( select 1 from apoio.tipodocumento tipodocumento where tipodocumento.idtipodocumento = documento.idtipodocumento"
            "                                  AND tipodocumento.sgclassificacao = 'CNPJ' )"
            "            AND p.idtipopessoa = 2"
            "            AND pdp.idpessoa = pe.idpessoa"
            "            AND pe.idpessoa = p.idpessoa"
            "            and exists ( select 1 from customer.ufoperadora uf where pe.iduf = uf.iduf AND auf.iduf = uf.iduf and auf.iduf > 0 and auf.INPREENCHELISTA = 1 )"
            "            AND pe.iduf = auf.iduf"
            "            and exists ( select 1 from customer.contaendereco ce where pe.idpessoaendereco = ce.idpessoaendereco )"
            "            and exists ( select   1 from customer.pessoadocumento pessoadocumento where documento.iddocumento = pessoadocumento.iddocumento"
            "                                  AND pessoadocumento.idpessoa = pdp.idpessoa"
            "                                  AND pessoadocumento.idpessoa = p.idpessoa"
            "                                  AND pe.idpessoa = pessoadocumento.idpessoa )"
            "         ORDER BY p.nmpessoa, auf.sgUF ,RANK)"
            "                  wHERE RANK = 1)";
			memset( &queryBuffer  , 0x0, sizeof(queryBuffer));
			sprintf(queryBuffer	," Where nrLinha >= %d AND nrLinha <= %d ", linInicial, linFinal);
			stmt += queryBuffer;			
			ULOG("### query com rank = [%s]", (char *)stmt.c_str() );			
			query = (char *)stmt.c_str();
			
			EXEC SQL PREPARE DETALHECNPJ FROM :query;
			EXEC SQL DECLARE cDETALHECNPJ CURSOR FOR DETALHECNPJ;
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			EXEC SQL OPEN cDETALHECNPJ;		         

            xml_g->createTag( "DetalheCNPJ" );
            for( ;; ) 
            {
                EXEC SQL FETCH cDETALHECNPJ INTO
                       :idPessoa:i_idPessoa ,
                       :nmPessoa:i_nmPessoa ,
                       :sgUF:i_sgUF ;
                       
                CONVIND( idPessoa    , i_idPessoa );
                CONVIND( nmPessoa    , i_nmPessoa );
                CONVIND( sgUF        , i_sgUF );
                
                ULOG( "idPessoa [%s]",(char*)idPessoa.arr );
                ULOG( "nmPessoa [%s]",(char*)nmPessoa.arr );
                ULOG( "sgUF     [%s]",(char*)sgUF.arr );
                
                if ( flgExiste == false )
                {
                    xml_g->createTag( "empresa" );
                    xml_g->addItem( "cnpj", nrCNPJ );
                    xml_g->addItem( "nome", (char*)nmPessoa.arr );
                    xml_g->createTag( "list" );
                    flgExiste = true ;
                }
                   
                xml_g->createTag( "p" );
                    xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                    xml_g->addItem( "sgUF", (char*)sgUF.arr );
                    regCorrente++;
                xml_g->closeTag();
            }
            
            EXEC SQL CLOSE cDETALHECNPJ;
            
            if ( flgExiste == true )
            {
                xml_g->closeTag();   // list
                xml_g->closeTag();   // empresa
            }
            
            if ( linFinal < qtLinhasRetornar )
                xml_g->addItem( "hasNext", "S" );
            else
                xml_g->addItem( "hasNext", "N" );
            
            ULOG( "regCorrente [%d]", regCorrente );
            if ( regCorrente > 0 )
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", regCorrente );
            }
            else
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", 0 );
                ULOG( "*** Nao encontrou registros para o documento [%s]", nrCNPJ );
                retorno = -11 ;
            }
            
            xml_g->closeTag();   // Fecha DetalheCNPJ

        //}   // if ( qtLinhasRetornar > 0 )
            

        ULOG_END( "DetalheCNPJMasterProCRank()" );
        return retorno ;

        ErrorORA_DetalheCNPJMaster:
            ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
            ULOG_END( "DetalheCNPJMasterProCRank()" );
            throw TuxBasicOraException( sqlca.sqlcode ); 
    } // else // Efetua consulta sem consolidacao, eh um CNPJ com poucas linhas
}

/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int DetalheCNPJ_ConsolidadoProC( char * nrCNPJ_Prm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  )   // Operacao 22
{
    ULOG_START( "DetalheCNPJ_ConsolidadoProC()" );

    bool flgExiste = false ;
    const int MAX_REG_DET_CNPJ = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int regCorrente = 0;
    int retorno = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        char * nrCNPJ = nrCNPJ_Prm;
        long qtLinhasRetornar;

        VARCHAR idPessoa[256];
        short i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short i_nmPessoa = -1;
        VARCHAR sgUF[256];
        short i_sgUF = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    struct sqlca sqlca;
    long linInicial ;
    long linFinal ;
    
    ULOG("** Consultar CNPJ [%s]", nrCNPJ );
    
    memset( &idPessoa     , 0x0, sizeof(idPessoa) );
    memset( &nmPessoa     , 0x0, sizeof(nmPessoa) );
    memset( &sgUF         , 0x0, sizeof(sgUF) );

    if ( qtMaxLinhas > MAX_REG_DET_CNPJ )
        qtMaxLinhas = MAX_REG_DET_CNPJ;
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorDetalheCNPJ_Consolidado;
    EXEC SQL WHENEVER NOT FOUND CONTINUE ;

    EXEC SQL
    SELECT
       COUNT(idpessoa) 
    INTO 
       :qtLinhasRetornar 
    FROM 
       CUSTOMER.DOCUMENTOCONSOLIDADO
    WHERE nrdocumento = :nrCNPJ
    and inTipoPessoa = 2 ;
    
    linInicial = (nrPagina-1)*qtMaxLinhas+1;
    linFinal = (nrPagina*qtMaxLinhas);

    ULOG(" linInicial = [%ld]",linInicial);
    ULOG("  linFinal  = [%ld]",linFinal);
    ULOG("### Linhas existentes na base = [%ld]", qtLinhasRetornar );
    
    if ( qtLinhasRetornar > 0 )
    {
        EXEC SQL DECLARE csr_CNPJ_Consolidado CURSOR FOR
        SELECT idpessoa, nmpessoa, sguf
          FROM (SELECT idpessoa, nmpessoa, sguf, ROWNUM AS nrlinha
                  FROM (SELECT   idpessoa, nmpessoa, sguf 
                            FROM CUSTOMER.DOCUMENTOCONSOLIDADO
                           WHERE nrdocumento = :nrCNPJ
                           and inTipoPessoa = 2
                        ORDER BY nmpessoa, sguf))
         WHERE nrlinha >= :linInicial AND nrlinha <= :linFinal ;

        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL OPEN csr_CNPJ_Consolidado;
        xml_g->createTag( "DetalheCNPJ" );
        for( ;; ) 
        {
            EXEC SQL FETCH csr_CNPJ_Consolidado INTO
                   :idPessoa:i_idPessoa ,
                   :nmPessoa:i_nmPessoa ,
                   :sgUF:i_sgUF ;
                   
            CONVIND( idPessoa    , i_idPessoa );
            CONVIND( nmPessoa    , i_nmPessoa );
            CONVIND( sgUF        , i_sgUF );
            
            ULOG( "idPessoa [%s]",(char*)idPessoa.arr );
            ULOG( "nmPessoa [%s]",(char*)nmPessoa.arr );
            ULOG( "sgUF     [%s]",(char*)sgUF.arr );
            
            if ( flgExiste == false )
            {
                xml_g->createTag( "empresa" );
                xml_g->addItem( "cnpj", nrCNPJ );
                xml_g->addItem( "nome", (char*)nmPessoa.arr );
                xml_g->createTag( "list" );
                flgExiste = true ;
            }
               
            xml_g->createTag( "p" );
                xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                xml_g->addItem( "sgUF", (char*)sgUF.arr );
                regCorrente++;
            xml_g->closeTag();
        }
        
        EXEC SQL CLOSE csr_CNPJ_Consolidado ;
        
        if ( flgExiste == true )
        {
            xml_g->closeTag();   // list
            xml_g->closeTag();   // empresa
        }
        
        if ( linFinal < qtLinhasRetornar )
            xml_g->addItem( "hasNext", "S" );
        else
            xml_g->addItem( "hasNext", "N" );
        
        ULOG( "regCorrente [%d]", regCorrente );
        if ( regCorrente > 0 )
        {
            xml_g->addItem( "NrPagina", nrPagina );
            xml_g->addItem( "NrLinhas", regCorrente );
        }
        else
        {
            xml_g->addItem( "NrPagina", nrPagina );
            xml_g->addItem( "NrLinhas", 0 );
            ULOG( "*** Nao encontrou registros para o documento [%s]", nrCNPJ );
            retorno = -11 ;
        }
        
        xml_g->closeTag();
    }   // if ( qtLinhasRetornar > 0 )


    ULOG_END( "DetalheCNPJ_ConsolidadoProC()" );
    return retorno ;

    ErrorDetalheCNPJ_Consolidado:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "DetalheCNPJ_ConsolidadoProC()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
long QtdeContasCNPJ( char * idPessoaGestorPrm , char * nrCNPJPrm )
{
     struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm ;
        char * nrCNPJ = nrCNPJPrm ;
        long    qtRegistros;
        
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_ContasCNPJ;
        
     EXEC SQL
        SELECT COUNT (*)
          INTO :qtRegistros
          FROM (SELECT DISTINCT c.idconta, c.cdconta, c.nmconta,
                                c.idcontasistemaorigem, NVL (c.incontrolepj, 0),
                                gc_v01.idpessoa, gc_v01.nmpessoa, gc_v01.sgtipopessoa,
                                gc_v01.idsegmentacao, gc_v01.idufoperadora,
                                gc_v01.sguf, gc_v01.idtipocarteira,
                                pg.sgpermissaogestor, pdp.idpessoadepara
                           FROM vol.empresagestor_gc_v01 gc_v01,
                                apoio.permissaogestor pg,
                                customer.conta c,
                                customer.documento d,
                                customer.pessoadocumento pd,
                                customer.pessoaconta pc,
                                customer.pessoadepara pdp,
                                vole.contagestor cg
                          WHERE pc.idtiporelacionamento = 2
                            AND gc_v01.idpessoagestor = cg.idpessoagestor
                            AND cg.idpermissaogestor = pg.idpermissaogestor(+)
                            AND gc_v01.idconta = c.idconta
                            AND pd.iddocumento = d.iddocumento
                            AND pc.idpessoadepara = pdp.idpessoadepara
                            AND pdp.idpessoa = pd.idpessoa
                            AND pc.idconta = cg.idconta
                            AND pc.idconta = c.idconta
                            AND d.nrdocumento = :nrCNPJ
                            AND cg.idpessoagestor = :idPessoaGestor );
                    
    return qtRegistros ;   // 40

    ErrorORA_ContasCNPJ:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "ErrorORA_ContasCNPJ()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
 
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int GestoresDeContaR( char * idPessoaGestorPrm, char * CNPJ, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g )
{
    ULOG_START( "GestoresDeContaR()" );
    struct sqlca sqlca;

    const int MAX_REG_CNPJ_MASTER = 40;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int regCorrente;
    int retorno = 0;
    
    ULOG( "Parametro idPessoaGestorPrm [%s]", idPessoaGestorPrm );
    ULOG( "Parametro CNPJ [%s]", CNPJ );

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm;
        char * nrDocumentoEmpresa = CNPJ ;
        long qtLinhasRetornar;
        int linInicial;
        int linFinal;

        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;

        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
        VARCHAR idPermissao[256];
        short   i_idPermissao = -1;

        VARCHAR idPessoa[65];
        short   i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa = -1;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa = -1;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara = -1;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao = -1;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora = -1;
        VARCHAR sgUF[256];
        short   i_sgUF = -1;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
      
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlError_Contas_GC_R;

    memset( &idConta             , 0x0, sizeof(idConta) );
    memset( &cdConta             , 0x0, sizeof(cdConta) );
    memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
    memset( &idPermissao         , 0x0, sizeof(idPermissao) );
    memset( &idPessoa            , 0x0, sizeof(idPessoa) );
    memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
    memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
    memset( &idPessoaAux         , 0x0, sizeof(idPessoaAux) );
    memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );
    memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
    memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
    memset( &sgUF                , 0x0, sizeof(sgUF) );
    memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
    memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
    memset( &inControlePJ        , 0x0, sizeof(inControlePJ) );	

    xml_g->createTag( "ListaContas" );
        xml_g->addItem( "nrDocumento", nrDocumentoEmpresa );
        xml_g->addItem( "tpGestor", "GC" );
        
        ULOG( ">>> Executando query para idPessoaGestor [%s] relacionada ao CNPJ [%s]", idPessoaGestor, nrDocumentoEmpresa  );
        
        qtLinhasRetornar = QtdeContasGC( idPessoaGestor, nrDocumentoEmpresa );
        
        ULOG( "Total de registros recuperados [%ld]", qtLinhasRetornar );
        
        if ( qtLinhasRetornar > 0 )
        {
            if ( qtMaxLinhas > MAX_REG_CNPJ_MASTER )
                qtMaxLinhas = MAX_REG_CNPJ_MASTER;
            
            linInicial = (nrPagina-1)*qtMaxLinhas+1;
            linFinal = (nrPagina*qtMaxLinhas);

            ULOG("linInicial = [%d]",linInicial);
            ULOG("  linFinal = [%d]",linFinal);

            EXEC SQL DECLARE csr_ListaContas_R CURSOR FOR
            SELECT
                IDPERMISSAOGESTOR ,
                IDCONTA ,
                CDCONTA ,
                NMCONTA ,
                IDCONTASISTEMAORIGEM ,
                INCONTROLEPJ 
            FROM
                ( SELECT
                    IDPERMISSAOGESTOR ,
                    IDCONTA ,
                    CDCONTA ,
                    NMCONTA ,
                    IDCONTASISTEMAORIGEM ,
                    INCONTROLEPJ ,
                    ROWNUM AS NRLINHA
                FROM
                    ( SELECT DISTINCT
                        CG.IDPERMISSAOGESTOR AS IDPERMISSAOGESTOR ,
                        C.IDCONTA AS IDCONTA ,
                        C.CDCONTA AS CDCONTA ,
                        C.NMCONTA AS NMCONTA ,
                        C.IDCONTASISTEMAORIGEM AS IDCONTASISTEMAORIGEM ,
                        C.INCONTROLEPJ AS INCONTROLEPJ
                    FROM 
                        CUSTOMER.DOCUMENTO         D ,
                        CUSTOMER.PESSOADOCUMENTO   PD,
                        CUSTOMER.PESSOADEPARA      PDP,
                        CUSTOMER.PESSOACONTA       PC,
                        CUSTOMER.CONTA             C, 
                        VOLE.CONTAGESTOR           CG,
                        CUSTOMER.PESSOAGESTORCONTA PGC
                    WHERE  
                        D.NRDOCUMENTO = :nrDocumentoEmpresa  
                    AND PD.IDDOCUMENTO = D.IDDOCUMENTO
                    AND PD.IDPESSOA = PDP.IDPESSOA
                    AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
                    AND PC.IDCONTA = C.IDCONTA
                    AND PC.IDTIPORELACIONAMENTO = 2
                    AND C.IDCONTA = CG.IDCONTA
                    AND PGC.IDCONTA = C.IDCONTA
                    AND CG.IDPESSOAGESTOR = :idPessoaGestor
                    AND PGC.IDPESSOAGESTOR = CG.IDPESSOAGESTOR ))
            WHERE NRLINHA >= :linInicial AND NRLINHA <= :linFinal ;

            bool bPrimeiroLoop = true;
            regCorrente = 0;
            EXEC SQL OPEN csr_ListaContas_R;
            for( ;; ) 
            {
                memset( &idConta              , 0x0, sizeof(idConta) );
                memset( &cdConta              , 0x0, sizeof(cdConta) );
                memset( &nmConta              , 0x0, sizeof(nmConta) );
                memset( &idContaSistemaOrigem , 0x0, sizeof(idContaSistemaOrigem) );
                memset( &sgPermissao          , 0x0, sizeof(sgPermissao) );
                memset( &idPermissao          , 0x0, sizeof(idPermissao) );
                memset( &inControlePJ         , 0x0, sizeof(inControlePJ) );
                
                EXEC SQL WHENEVER NOT FOUND DO BREAK;
                           
                EXEC SQL FETCH csr_ListaContas_R INTO
                   :idPermissao:i_idPermissao ,
                   :idConta:i_idConta ,
                   :cdConta:i_cdConta ,
                   :nmConta:i_nmConta ,
                   :idContaSistemaOrigem:i_idContaSistemaOrigem,
                   :inControlePJ:i_inControlePJ;


                CONVIND( idPermissao, i_idPermissao );
                CONVIND( idConta, i_idConta );
                CONVIND( cdConta, i_cdConta );
                CONVIND( nmConta, i_nmConta );
                CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
                CONVIND( inControlePJ, i_inControlePJ );
                regCorrente++;

                ULOG( ">>> CDConta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
                ULOG( ">>> IdConta [%s] relacionada ao GC [%s]", (char*)idConta.arr, idPessoaGestor );
                ULOG( ">>> inControlePJ [%s]", (char*)inControlePJ.arr);
                ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

                EXEC SQL WHENEVER NOT FOUND CONTINUE;
                EXEC SQL 
                SELECT 
                    NVL(PG.SGPERMISSAOGESTOR,'ND') SGPERMISSAOGESTOR
                INTO
                    :sgPermissao:i_sgPermissao
                FROM 
                    APOIO.PERMISSAOGESTOR PG
                WHERE  
                    PG.IDPERMISSAOGESTOR = :idPermissao AND ROWNUM < 2;
                
                CONVIND( sgPermissao, i_sgPermissao );
                        
                ULOG( ">>> SGPERMISSAOGESTOR [%s] relacionada ao GC [%s]", (char*)sgPermissao.arr, idPessoaGestor );

                EXEC SQL
                SELECT 
                   idpessoa, 
                   nmpessoa, 
                   sgtipopessoa, 
                   idsegmentacao, 
                   idufoperadora, 
                   sguf, 
                   idtipocarteira 
                INTO
                   :idPessoa:i_idPessoa ,
                   :nmPessoa:i_nmPessoa , 
                   :sgTipoPessoa:i_sgTipoPessoa ,
                   :idSegmentacao:i_idSegmentacao ,
                   :idUFOperadora:i_idUFOperadora ,
                   :sgUF:i_sgUF ,
                   :idTipoCarteira:i_idTipoCarteira 
                FROM
                   VOL.EMPRESAGESTOR_GC_V01
                WHERE
                   idpessoagestor = :idPessoaGestor    
                AND
                   idconta = :idConta 
                AND ROWNUM < 2;
                            
                CONVIND( idPessoa       , i_idPessoa );
                CONVIND( nmPessoa       , i_nmPessoa );
                CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
                CONVIND( idSegmentacao  , i_idSegmentacao );
                CONVIND( idUFOperadora  , i_idUFOperadora );
                CONVIND( sgUF           , i_sgUF );
                CONVIND( idTipoCarteira , i_idTipoCarteira );

                EXEC SQL
                SELECT IDPESSOADEPARA INTO :idPessoaDePara:i_idPessoaDePara 
                  FROM CUSTOMER.PESSOADEPARA WHERE IDPESSOA = :idPessoa;

                CONVIND( idPessoaDePara, i_idPessoaDePara );

                if (bPrimeiroLoop == true)
                {
                    xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                    xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                    xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                    xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                    xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                    xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                    xml_g->addItem( "sgUF", (char*)sgUF.arr );
                    xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );

                    bPrimeiroLoop = false;
                }
                                   
                xml_g->createTag( "Conta" );
                    xml_g->addItem( "idConta", (char*)idConta.arr );
                    xml_g->addItem( "cdConta", (char*)cdConta.arr );
                    if ( i_sgPermissao != -1 )
                    {
                        xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                    }
                    xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                    xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                    xml_g->addItem( "nmConta", (char*)nmConta.arr );
                    xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
                xml_g->closeTag();
            }

            EXEC SQL CLOSE csr_ListaContas_R;
                   
            if ( linFinal < qtLinhasRetornar )
                xml_g->addItem( "hasNext", "S" );
            else
                xml_g->addItem( "hasNext", "N" );
        
            if ( qtLinhasRetornar > 0 )
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", regCorrente );
            }
            else
            {
                xml_g->addItem( "NrPagina", nrPagina );
                xml_g->addItem( "NrLinhas", 0 );
                ULOG( "*** Nao foram encontrados registros para idPessoaGestor [%s], CNPJ [%s]", idPessoaGestor, nrDocumentoEmpresa );
                ULOG_END( "GestoresDeContaR()" );
                retorno = -11;
            }

            xml_g->closeTag();
        }


        ULOG_END( "GestoresDeContaR()" );
        return retorno;

    sqlError_Contas_GC_R:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
long QtdeContasGC( char * idPessoaGestorPrm , char * nrCNPJPrm )
{
     struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm ;
        char * nrCNPJ = nrCNPJPrm ;
        long    qtRegistros;
        
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA_QtdeContasGC;
        
     EXEC SQL
            Select count(*) 
            Into :qtRegistros
            From
            ( SELECT
                IDPERMISSAOGESTOR ,
                IDCONTA ,
                CDCONTA ,
                NMCONTA ,
                IDCONTASISTEMAORIGEM ,
                INCONTROLEPJ 
            FROM
                ( SELECT DISTINCT
                    CG.IDPERMISSAOGESTOR AS IDPERMISSAOGESTOR ,
                    C.IDCONTA AS IDCONTA ,
                    C.CDCONTA AS CDCONTA ,
                    C.NMCONTA AS NMCONTA ,
                    C.IDCONTASISTEMAORIGEM AS IDCONTASISTEMAORIGEM ,
                    C.INCONTROLEPJ AS INCONTROLEPJ
                FROM 
                    CUSTOMER.DOCUMENTO         D ,
                    CUSTOMER.PESSOADOCUMENTO   PD,
                    CUSTOMER.PESSOADEPARA      PDP,
                    CUSTOMER.PESSOACONTA       PC,
                    CUSTOMER.CONTA             C, 
                    VOLE.CONTAGESTOR           CG,
                    CUSTOMER.PESSOAGESTORCONTA PGC
                WHERE  
                    D.NRDOCUMENTO = :nrCNPJ  
                AND PD.IDDOCUMENTO = D.IDDOCUMENTO
                AND PD.IDPESSOA = PDP.IDPESSOA
                AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
                AND PC.IDCONTA = C.IDCONTA
                AND PC.IDTIPORELACIONAMENTO = 2
                AND C.IDCONTA = CG.IDCONTA
                AND PGC.IDCONTA = C.IDCONTA
                AND CG.IDPESSOAGESTOR = :idPessoaGestor
                AND PGC.IDPESSOAGESTOR = CG.IDPESSOAGESTOR )) ;
                
    return qtRegistros ;   // 40

    ErrorORA_QtdeContasGC:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "ErrorQtdeContasGC()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
 
}



/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *
 */
int GestoresDeContaUnicoR( char * idPessoaGestorPrm, char * CNPJ, char * cdContaPrm, XMLGen * xml_g )
{
    ULOG_START( "GestoresDeContaUnicoR()" );
    struct sqlca sqlca;

    int retorno = 0;
    
    ULOG( "Parametro idPessoaGestorPrm [%s]", idPessoaGestorPrm );
    ULOG( "Parametro CNPJ              [%s]", CNPJ );
    ULOG( "Parametro cdConta           [%s]", cdContaPrm );

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm ;
        char * nrDocumentoEmpresa = CNPJ ;
        char * cdContaSql = cdContaPrm ;


        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;

        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
        VARCHAR idPermissao[256];
        short   i_idPermissao = -1;

        VARCHAR idPessoa[65];
        short   i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa = -1;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa = -1;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara = -1;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao = -1;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora = -1;
        VARCHAR sgUF[256];
        short   i_sgUF = -1;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
      
    EXEC SQL END DECLARE SECTION;
    
    memset( &idConta             , 0x0, sizeof(idConta) );
    memset( &cdConta             , 0x0, sizeof(cdConta) );
    memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
    memset( &idPermissao         , 0x0, sizeof(idPermissao) );
    memset( &idPessoa            , 0x0, sizeof(idPessoa) );
    memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
    memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
    memset( &idPessoaAux         , 0x0, sizeof(idPessoaAux) );
    memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );
    memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
    memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
    memset( &sgUF                , 0x0, sizeof(sgUF) );
    memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
    memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
    memset( &inControlePJ        , 0x0, sizeof(inControlePJ) );	

    EXEC SQL WHENEVER SQLERROR GOTO sqlError_ContasUnico_GC_R;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
    SELECT 
        CG.IDPERMISSAOGESTOR AS IDPERMISSAOGESTOR ,
        C.IDCONTA AS IDCONTA ,
        C.CDCONTA AS CDCONTA ,
        C.NMCONTA AS NMCONTA ,
        C.IDCONTASISTEMAORIGEM AS IDCONTASISTEMAORIGEM ,
        C.INCONTROLEPJ AS INCONTROLEPJ
    INTO
        :idPermissao:i_idPermissao ,
        :idConta:i_idConta ,
        :cdConta:i_cdConta ,
        :nmConta:i_nmConta ,
        :idContaSistemaOrigem:i_idContaSistemaOrigem ,
        :inControlePJ:i_inControlePJ
    FROM 
        CUSTOMER.DOCUMENTO         D ,
        CUSTOMER.PESSOADOCUMENTO   PD,
        CUSTOMER.PESSOADEPARA      PDP,
        CUSTOMER.PESSOACONTA       PC,
        CUSTOMER.CONTA             C, 
        VOLE.CONTAGESTOR           CG,
        CUSTOMER.PESSOAGESTORCONTA PGC
    WHERE  
        D.NRDOCUMENTO = :nrDocumentoEmpresa  
    AND PD.IDDOCUMENTO = D.IDDOCUMENTO
    AND PD.IDPESSOA = PDP.IDPESSOA
    AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
    AND PC.IDCONTA = C.IDCONTA
    AND PC.IDTIPORELACIONAMENTO = 2
    AND C.IDCONTA = CG.IDCONTA
    AND PGC.IDCONTA = C.IDCONTA
    AND CG.IDPESSOAGESTOR = :idPessoaGestor
    AND C.CDCONTA = :cdContaSql
    AND PGC.IDPESSOAGESTOR = CG.IDPESSOAGESTOR 
    AND ROWNUM < 2 ;

    CONVIND( idPermissao, i_idPermissao );
    CONVIND( idConta, i_idConta );
    CONVIND( cdConta, i_cdConta );
    CONVIND( nmConta, i_nmConta );
    CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
    CONVIND( inControlePJ, i_inControlePJ );

    if ( i_idConta != -1 )
    {
        ULOG( ">>> CDConta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
        ULOG( ">>> IdConta [%s] relacionada ao GC [%s]", (char*)idConta.arr, idPessoaGestor );
        ULOG( ">>> inControlePJ [%s]", (char*)inControlePJ.arr);
        ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

        EXEC SQL 
        SELECT 
            NVL(PG.SGPERMISSAOGESTOR,'ND') SGPERMISSAOGESTOR
        INTO
            :sgPermissao:i_sgPermissao
        FROM 
            APOIO.PERMISSAOGESTOR PG
        WHERE  
            PG.IDPERMISSAOGESTOR = :idPermissao AND ROWNUM < 2;
        
        CONVIND( sgPermissao, i_sgPermissao );
                
        ULOG( ">>> SGPERMISSAOGESTOR [%s] relacionada ao GC [%s]", (char*)sgPermissao.arr, idPessoaGestor );

        EXEC SQL
        SELECT 
           idpessoa, 
           nmpessoa, 
           sgtipopessoa, 
           idsegmentacao, 
           idufoperadora, 
           sguf, 
           idtipocarteira 
        INTO
           :idPessoa:i_idPessoa ,
           :nmPessoa:i_nmPessoa , 
           :sgTipoPessoa:i_sgTipoPessoa ,
           :idSegmentacao:i_idSegmentacao ,
           :idUFOperadora:i_idUFOperadora ,
           :sgUF:i_sgUF ,
           :idTipoCarteira:i_idTipoCarteira 
        FROM
           VOL.EMPRESAGESTOR_GC_V01
        WHERE
           idpessoagestor = :idPessoaGestor    
        AND
           idconta = :idConta 
        AND ROWNUM < 2;
                    
        CONVIND( idPessoa       , i_idPessoa );
        CONVIND( nmPessoa       , i_nmPessoa );
        CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
        CONVIND( idSegmentacao  , i_idSegmentacao );
        CONVIND( idUFOperadora  , i_idUFOperadora );
        CONVIND( sgUF           , i_sgUF );
        CONVIND( idTipoCarteira , i_idTipoCarteira );

        EXEC SQL
        SELECT IDPESSOADEPARA INTO :idPessoaDePara:i_idPessoaDePara 
          FROM CUSTOMER.PESSOADEPARA WHERE IDPESSOA = :idPessoa;

        CONVIND( idPessoaDePara, i_idPessoaDePara );

        xml_g->createTag( "ListaContas" );
            xml_g->addItem( "nrDocumento", nrDocumentoEmpresa );
            xml_g->addItem( "tpGestor", "GC" );
        
            xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
            xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
            xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
            xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
            xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
            xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
            xml_g->addItem( "sgUF", (char*)sgUF.arr );
            xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );

            xml_g->createTag( "Conta" );
                xml_g->addItem( "idConta", (char*)idConta.arr );
                xml_g->addItem( "cdConta", (char*)cdConta.arr );
                if ( i_sgPermissao != -1 )
                {
                    xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
                }
                xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
                xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
                xml_g->addItem( "nmConta", (char*)nmConta.arr );
                xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
            xml_g->closeTag();
            xml_g->addItem( "hasNext", "N" );
        
            xml_g->addItem( "NrPagina", 1 );
            xml_g->addItem( "NrLinhas", 1 );

        xml_g->closeTag();   // xml_g->createTag( "ListaContas" );
    }
    else
    {
        xml_g->addItem( "NrPagina", 1 );
        xml_g->addItem( "NrLinhas", 0 );
        ULOG( "*** Nao foram encontrados registros para idPessoaGestor [%s], CNPJ [%s]", idPessoaGestor, nrDocumentoEmpresa );
        ULOG_END( "GestoresDeContaUnicoR()" );
        retorno = -11;
    }

    ULOG_END( "GestoresDeContaUnicoR()" );
    return retorno;

    sqlError_ContasUnico_GC_R:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



char * rtrim( char * pStr )
{
    int rInd;

    if (pStr == NULL)
        return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0)
   {
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim( char * pStr )
{
    int lInd = 0;

    if (pStr == NULL)
        return NULL;

    while (isspace(pStr[lInd]))
    {
        lInd++;
    }

    pStr = pStr + lInd;
     
    return pStr;
}

char * trim( char * pStr )
{
    return ltrim(rtrim(pStr));
}


/*
 *
 *   147918 - Melhorias Login Meu Vivo Empresas V1.0
 *   [A0001] - Marcelo Nunes - Set/2015
 *   [A0002] - Marcelo Nunes - Jan/2016
 *   [A0003] - Marcelo Nunes - Julho/2016 - VAFEI-62662 - ListaCNPJMasterProCNovo 
 *
 */
int ListaCNPJMasterProCNovo( char * idGestorPrm, char * pszNrPagina, char * qtdMaxLin, XMLGen * xml_g  )
{
    ULOG_START( "ListaCNPJMasterProCNovo()" );

    struct sqlca sqlca;
    const int MAX_REG_CNPJ_MASTER = 1000;
    int nrPagina = atoi(pszNrPagina);
    int qtMaxLinhas = atoi(qtdMaxLin);
    int limite_cnpjs;
    bool temCNPJ = false;
    
    char mtzCNPJ[5000][32];
    char mtzCNPJ_Valid[5000][32];

    EXEC SQL BEGIN DECLARE SECTION;

        char * idGestor = idGestorPrm;
        int ctGestorMaster;

        long qtLinhasRetornar;
        int linInicial;
        int linFinal;
        int flgCNPJConsilda;

        VARCHAR nrCPF[65];
        short i_nrCPF = -1;
        VARCHAR nrDocumento[65];
        short i_nrDocumento= -1;
        VARCHAR inAssociacao[2];
        short   i_inAssociacao = -1;
        char v_cnpj[32];
        int inConsolidado;
        int isValido;

    EXEC SQL END DECLARE SECTION;
    
    memset( &nrCPF       , 0x0, sizeof(nrCPF) );
    memset( &nrDocumento , 0x0, sizeof(nrDocumento) );
    memset( &inAssociacao, 0x0, sizeof(inAssociacao) );
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
        PGM.NRDOCUMENTOGESTOR
    INTO
        :nrCPF:i_nrCPF
    FROM
        CUSTOMER.PESSOAGESTORMASTER   PGM
    WHERE
    EXISTS
    (
       SELECT 1 FROM CUSTOMER.PESSOAGESTOR PG WHERE PG.NRDOCUMENTO = PGM.NRDOCUMENTOGESTOR AND PG.IDPESSOAGESTOR = :idGestor
    ) AND ROWNUM < 2 ;
    
    CONVIND( nrCPF, i_nrCPF );
    
    /*
    qtLinhasRetornar = QtdeCNPJsMaster( (char*)nrCPF.arr );
    ULOG( "Total de registros recuperados [%ld]", qtLinhasRetornar );
    */
    
    if ( qtMaxLinhas > MAX_REG_CNPJ_MASTER )
        qtMaxLinhas = MAX_REG_CNPJ_MASTER;
    
    linInicial = (nrPagina-1)*qtMaxLinhas+1;
    linFinal = (nrPagina*qtMaxLinhas);

    ULOG("linInicial = [%d]",linInicial);
    ULOG("  linFinal = [%d]",linFinal);
    
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    if ( i_nrCPF != -1 )
    {
        EXEC SQL DECLARE csr_CNPJ_GM_Novo CURSOR FOR
        SELECT
           PGM.NRDOCUMENTOEMPRESA as CNPJ
        FROM 
           CUSTOMER.PESSOAGESTORMASTER PGM
        WHERE 
           PGM.NRDOCUMENTOGESTOR = :nrCPF
        ORDER BY CNPJ ;

        int k;
        int regCorrente = 0;
        for( k=0;k<5000;k++ )
        {
            memset( &mtzCNPJ[k], 0x0, 32 );
            memset( &mtzCNPJ_Valid[k], 0x0, 32 );
        }
        
        EXEC SQL OPEN csr_CNPJ_GM_Novo;
        for ( k=0;;k++ )
        {

            EXEC SQL FETCH csr_CNPJ_GM_Novo INTO
                :nrDocumento:i_nrDocumento ;

            CONVIND( nrDocumento , i_nrDocumento );

//ULOG(" === nrDocumento [%s]", (char*)nrDocumento.arr );
//ULOG(" === k           [%d]", k );

            
            sprintf( mtzCNPJ[k],"%s",(char*)&nrDocumento.arr );

        }   // for ( ;; )
        EXEC SQL CLOSE csr_CNPJ_GM_Novo;

        limite_cnpjs = 0;
        int idx;
        for ( idx=k=0;;k++ )
        {
//            ULOG(" === idx     [%d]", idx );
//            ULOG(" === k       [%d]", k );
//            ULOG(" === mtzCNPJ [%s]", mtzCNPJ[k] );
            
            if ( mtzCNPJ[k][0] == 0x0 )   // Nao existem mais registros
                break;
            
            sprintf( v_cnpj, "%s", mtzCNPJ[k] );
            
            EXEC SQL
            SELECT COUNT(*) INTO :flgCNPJConsilda FROM APOIO.CONSOLIDADOC WHERE NRDOCUMENTO = :v_cnpj AND INDOCUMENTO = 2 ;
            
            if ( flgCNPJConsilda > 0 )
            {
                EXEC SQL
                SELECT COUNT(NRDOCUMENTO) 
                   INTO :inConsolidado 
                FROM 
                   CUSTOMER.DOCUMENTOCONSOLIDADO 
                WHERE 
                   NRDOCUMENTO = :v_cnpj 
                AND INTIPOPESSOA = 2
                AND ROWNUM < 2;

                if ( inConsolidado > 0 )
                {
                    ULOG("### Esta Consolidado...");
                    sprintf( mtzCNPJ_Valid[idx++],"%s", v_cnpj );
                    limite_cnpjs++;
                }
                else
                {
                    continue ;
                }
            }
            else
            {
                ULOG("### NAO Esta Consolidado...");
                EXEC SQL
                SELECT /*+ first_rows(1)*/ count(*) as inValido 
                INTO :isValido
                FROM customer.pessoadocumento pessoadocumento ,
                     customer.pessoa p ,
                     customer.documento documento ,
                     apoio.tipodocumento tipodocumento ,
                     customer.contaendereco ce ,
                     customer.ufoperadora uf ,
                     customer.pessoaconta pc ,
                     customer.conta conta ,
                     customer.pessoadepara pdp ,
                     apoio.uf auf ,
                     customer.pessoaendereco pe 
                WHERE documento.iddocumento = pessoadocumento.iddocumento
                    AND pessoadocumento.idpessoa = pdp.idpessoa
                    AND tipodocumento.idtipodocumento = documento.idtipodocumento
                    AND tipodocumento.sgclassificacao = 'CNPJ'
                    AND documento.nrdocumento = :v_cnpj
                    AND pessoadocumento.idpessoa = p.idpessoa
                    AND pe.idpessoa = p.idpessoa
                    AND pdp.idpessoa = pe.idpessoa
                    AND pdp.idpessoa = p.idpessoa
                    AND auf.iduf = uf.iduf
                    AND pe.iduf = uf.iduf
                    AND p.idtipopessoa = 2
                    AND pe.iduf = auf.iduf
                    and conta.IDCONTA = pc.IDCONTA
                    and
                    ( 
                        (
                           conta.IDSTATUSCONTA = 0
                           and conta.IDTIPOCONTA IN ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'VZ','V','Z' ))
                        )
                        or
                        (
                           conta.IDSTATUSCONTA = 1
                           and conta.IDTIPOCONTA in ( select idtipoconta from apoio.tipoconta tipoconta where tipoconta.SGTIPOCONTA in ( 'J','C','D','E','G','H','I','P','V','R','U','X','Z','SO','Y','PJ','G1','F1','ZF','ZC','VV','VZ','VC','VF','V4','V8','V7','V6','V2','V5','V1','FC','V3','DE','DT','VB' ))
                        )
                        or conta.IDSTATUSCONTA in (5,10)
                    )
                    AND pdp.idpessoadepara = pc.idpessoadepara
                    AND pe.idpessoaendereco = ce.idpessoaendereco
                    AND pe.idpessoa = pessoadocumento.idpessoa 
					AND ROWNUM <= 1;
                
                if ( isValido > 0 )
                {
                    sprintf( mtzCNPJ_Valid[idx++],"%s", v_cnpj );
                    limite_cnpjs++;
                }

            }

        }   // for ( ;; )

    
//        ULOG(" === limite_cnpjs [%d]", limite_cnpjs );
//        ULOG(" === linInicial   [%d]", linInicial );
//        ULOG(" === linFinal     [%d]", linFinal );
        
        if ( limite_cnpjs < linFinal )
        {
            linFinal = limite_cnpjs;
        }
        
        xml_g->createTag( "ListaCNPJ" );
        for ( k = linInicial-1;k < linFinal;k++ )
        {
            sprintf ( v_cnpj, "%s", mtzCNPJ_Valid[k] );
            
            ULOG("### Consultando [%s]", v_cnpj );
            
            EXEC SQL
            SELECT
                NVL( PGM.INASSOCIACAO, 0 ) AS INASSOCIACAO
            INTO
               :inAssociacao:i_inAssociacao
            FROM
                CUSTOMER.PESSOAGESTORMASTER   PGM
            WHERE
               PGM.NRDOCUMENTOEMPRESA = :v_cnpj ;

            regCorrente++;

            CONVIND( inAssociacao, i_inAssociacao );
            temCNPJ = true;
            xml_g->createTag( "empresa" );
               xml_g->addItem( "cnpj", v_cnpj );
               xml_g->addItem( "inAssociacao", (char*)inAssociacao.arr );
            xml_g->closeTag();
            
        }   // for ( ;; )

        ULOG(" >>>>> limite_cnpjs [%d]", limite_cnpjs );
        
        if (temCNPJ)  // Conforme solicitacao da Compasso, informa controle de paginacao
        {                           // apenas se encontrar CNPJs validos
                                    // Eles deveriam controlar isto, mas...      
                                    //                                        Marcelo March/2016
			if ( limite_cnpjs > linFinal )
				xml_g->addItem( "hasNext", "S" );
			else
				xml_g->addItem( "hasNext", "N" );
			
			xml_g->addItem( "NrPagina", nrPagina );
			xml_g->addItem( "NrLinhas", regCorrente );
        }
        
        xml_g->closeTag();
    }
    else
    {
        EXEC SQL WHENEVER NOT FOUND CONTINUE;
        EXEC SQL
        SELECT
            count(PGM.NRDOCUMENTOGESTOR)
        INTO
            :ctGestorMaster
        FROM
            CUSTOMER.PESSOAGESTOR          PG,
            CUSTOMER.PESSOAGESTORMASTER   PGM
        WHERE
            PG.IDPESSOAGESTOR = :idGestor 
        AND PGM.NRDOCUMENTOGESTOR = PG.NRDOCUMENTO;
		
		xml_g->createTag( "ListaCNPJ" );
        xml_g->closeTag();
        if ( ctGestorMaster > 0 )
        {
            ULOG( "*** Gestor Master não tem associacao." );
            ULOG_END( "ListaCNPJMasterProCNovo()" );			
            return -1 ;
        }
        else
        {            
            ULOG( "*** Nao eh Gestor Master." );
            ULOG_END( "ListaCNPJMasterProCNovo()" );			
            return -5 ;
        }
				

    }

    ULOG_END( "ListaCNPJMasterProCNovo()" );
    return 0 ;
 
    ErrorORA:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "ListaCNPJMasterProCNovo()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 
    
}


int obterParametro( char * cdParametro, char * dsValorParametro)
{
    ULOG_START( "obterParametro()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * pcdParametro = cdParametro;        
        VARCHAR dsValorParametroChar[256];
        short i_dsValorParametroChar = -1;

    EXEC SQL END DECLARE SECTION;
    
    memset( &dsValorParametroChar       , 0x0, sizeof(dsValorParametroChar) );
    
    EXEC SQL WHENEVER SQLERROR GOTO ErrorORA;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
        DSVALORPARAMETRO
    INTO
        :dsValorParametroChar:i_dsValorParametroChar
    FROM
        APOIO.PARAMETRO
    WHERE
	CDPARAMETRO = :pcdParametro;       

	strcpy(dsValorParametro,(char*)dsValorParametroChar.arr);
	
    ULOG_END( "obterParametro()" );
    return 0 ;
 
    ErrorORA:
        ULOG( "!!! - ERRO ORACLE [%d] - [%s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc );
        ULOG_END( "obterParametro()" );
        throw TuxBasicOraException( sqlca.sqlcode ); 	
	
}
