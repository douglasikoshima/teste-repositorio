// TipoRecarga.cpp: implementation of the CTipoRecarga class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw/tuxfw.h>
#include <Defines/Defines.h>
#include <Util/Util.hpp>
#include <TipoRecarga/TipoRecarga.hpp>

EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CTipoRecarga::CTipoRecarga()
{  	   
	this->setIdTipoRecarga(-1);
	this->setDsTipoRecarga("");
	this->setDtValidade1("");
	this->setDtValidade2("");
	this->setVlTipoRecarga("");
}

CTipoRecarga::~CTipoRecarga() 
{

}

/*

  GETs

*/

int CTipoRecarga::getIdTipoRecarga() 
{
	return this->m_iIdTipoRecarga;
}

char * CTipoRecarga::getDsTipoRecarga() 
{
	return this->m_cDsTipoRecarga;
}

char * CTipoRecarga::getDtValidade1() 
{
	return this->m_cDtValidade1;
}

char * CTipoRecarga::getDtValidade2() 
{
	return this->m_cDtValidade2;
}

char * CTipoRecarga::getVlTipoRecarga() 
{
	return this->m_cVlTipoRecarga;
}

/*

   SETs

*/

void CTipoRecarga::setIdTipoRecarga(int value) 
{
	this->m_iIdTipoRecarga = value;
}

void CTipoRecarga::setDsTipoRecarga(char *value) 
{
	strcpy(this->m_cDsTipoRecarga, value);
}

void CTipoRecarga::setDtValidade1(char *value) 
{
	strcpy(this->m_cDtValidade1, value);
}

void CTipoRecarga::setDtValidade2(char *value) 
{
	strcpy(this->m_cDtValidade2, value);
}

void CTipoRecarga::setVlTipoRecarga(char *value) 
{
	strcpy(this->m_cVlTipoRecarga, value);
}

//Metodos de Negocio da Interface da Classe CTipoRecarga:

void CTipoRecarga::consultarTipoRecargas(int iCdAreaRegistro, list< CTipoRecarga > & listaRecargas, int idUFOperadora)
{
	CTipoRecarga::carregarTipoRecargasDB(iCdAreaRegistro, listaRecargas, idUFOperadora);
}

// Métodos de acesso a banco de dados
void CTipoRecarga::carregarTipoRecargasDB(int iCdAreaRegistro, list< CTipoRecarga > & listaRecargas, int idUFOperadora)
{ 
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	int  iCdAreaRegistroDB=0;
	int  iIdUFOperadoraDB=0;

	int  iIdTipoRecarga;
	char cDsTipoRecarga[56];
	char cDtValidade1[10+1];
	char cDtValidade2[10+1];
	//char cVlTipoRecarga[32];
	EXEC SQL END DECLARE SECTION;

	CTipoRecarga     oRecarga;

	// valores das chaves da consulta SQL
	iCdAreaRegistroDB = iCdAreaRegistro;
	iIdUFOperadoraDB = idUFOperadora;

	iCdAreaRegistroDB = iCdAreaRegistro < 0 ? 0 : iCdAreaRegistroDB;
	iIdUFOperadoraDB = idUFOperadora < 0 ? 0 : iIdUFOperadoraDB;

	if (iCdAreaRegistroDB <= 0 && iIdUFOperadoraDB <= 0)
		return;

	// garante que a lista esta vazia
	listaRecargas.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	if (iIdUFOperadoraDB <= 0)
	{
		EXEC SQL
			SELECT 
				idUFOperadora 
			INTO
				:iIdUFOperadoraDB
			FROM 
				apoio.AreaRegistro 
			WHERE 
				cdAreaRegistro  = :iCdAreaRegistroDB
			AND	ROWNUM			= 1;
	}

	EXEC SQL DECLARE LSTTIPORECARGAS CURSOR FOR
		SELECT
			a.idTipoRecarga,
			NVL(a.dsTipoRecarga, '') AS dsTipoRecarga,
			NVL(to_char(a.dtValidade1,'dd/mm/yyyy'),'01/01/0001'),
			NVL(to_char(a.dtValidade2,'dd/mm/yyyy'),'01/01/0001')
			//NVL(a.vlTipoRecarga, ' ') AS vlTipoRecarga
		FROM
			Apoio.TipoRecarga   a
		WHERE
			 a.idUFOperadora  = :iIdUFOperadoraDB;

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTTIPORECARGAS;

	for( ;; ) 
	{

		// varre todos os registros para criar a lista com os bancos

		EXEC SQL FETCH LSTTIPORECARGAS INTO
			:iIdTipoRecarga,
			:cDsTipoRecarga,
			:cDtValidade1,
			:cDtValidade2;


		if (!strcmp(CUtil::trim(cDtValidade1), "01/01/0001")) 
			strcpy(cDtValidade1 , "");
		if (!strcmp(CUtil::trim(cDtValidade2), "01/01/0001")) 
			strcpy(cDtValidade2 , "");

		oRecarga.setIdTipoRecarga(iIdTipoRecarga);		
		oRecarga.setDsTipoRecarga(CUtil::trim(cDsTipoRecarga));
		oRecarga.setDtValidade1(CUtil::trim(cDtValidade1));
		oRecarga.setDtValidade2(CUtil::trim(cDtValidade2));
		//oRecarga.setVlTipoRecarga(CUtil::trim(cVlTipoRecarga));

		listaRecargas.push_back(oRecarga);

	}

	EXEC SQL CLOSE LSTTIPORECARGAS;

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode); 

}