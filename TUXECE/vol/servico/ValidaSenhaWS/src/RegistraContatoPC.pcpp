/* $Id: RegistraContatoPC.pcpp,v 1.1.4.4 2009/06/18 21:28:17 mnunes Exp $ */

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>
#include "../include/RegistraContato.h"

    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stRegistraContato.h"
    EXEC SQL END DECLARE SECTION;

void sql_error_registracontato(sqlca*);


/*********************************************
* Grava no histórico a senha antiga do usuário
* ou a nova quando é gerada pela primeira vez
* a senha.
*********************************************/
bool proCRegistraContato(stRegistraContato* m_stDados) 
{

    ULOG_START("proCRegistraContato()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct stRegistraContato dadosoracle;
        int idHistoricoSenhaUsuario = 0;
    EXEC SQL END DECLARE SECTION;

    memcpy(&dadosoracle, m_stDados, sizeof(dadosoracle));

    EXEC SQL SELECT customer.historicosenhasq.nextval INTO :dadosoracle.idHistoricoSenha FROM dual;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_registracontato(&sqlca);

    // Grava no histórico de senhas a inclusão da nova senha.
    EXEC SQL 
        INSERT INTO
            customer.historicosenha
            (
                idHistoricoSenha,
                idTipoHistoricoSenha,
                idSenha,
                idTipoSenha,
                idTipoStatusSenha,
                idCanal,
                idPessoaUsuario,
                idTipoSistema,
                cdSenha,
                dtExpiracao,
                dtRegistroHistorico,
                obsRegistro,
                nmRepresentante,
				idTerminal
            )
            VALUES
            (
                :dadosoracle.idHistoricoSenha,
                :dadosoracle.idTipoHistoricoSenha,
                :dadosoracle.idSenha,
                :dadosoracle.idTipoSenha,
                :dadosoracle.idTipoStatusSenha,
                :dadosoracle.idCanal,
                :dadosoracle.idPessoaUsuario,
                :dadosoracle.idTipoSistema,
                :dadosoracle.cdSenha,
                :dadosoracle.dtExpiracao,
                sysdate,
                :dadosoracle.obsRegistro,
                :dadosoracle.nmRepresentante,
				DECODE(:dadosoracle.iIdTerminal, 0, NULL, :dadosoracle.iIdTerminal)			
            );
              
    ULOG_END("proCRegistraContato()");
    return true;    
}

bool proCRegistraContatoAlteracao(int idSenha, stRegistraContato* m_stDados) 
{

    ULOG_START("proCRegistraContatoAlteracao()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct stRegistraContato dadosoracle;
        int idHistoricoSenhaUsuario = 0;
        int idsenha                 = idSenha;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_registracontato(&sqlca);

    memcpy(&dadosoracle, m_stDados, sizeof(dadosoracle));

    if (dadosoracle.idPessoaLinha < 0)
        dadosoracle.idPessoaLinha = 0; 

    // Grava no histórico de senhas a inclusão da nova senha.
    EXEC SQL 
        INSERT INTO
            customer.historicosenha
            (
                idHistoricoSenha,
                idTipoHistoricoSenha,
                idSenha,
                idTipoSenha,
                idTipoStatusSenha,
                idCanal,
                idPessoaUsuario,
                idTipoSistema,
                cdSenha,
                dtExpiracao,
                dtRegistroHistorico,
                obsRegistro,
                nmRepresentante,
                idPessoaLinha,
				idTerminal
            )
            SELECT
                customer.historicosenhasQ.nextval,
                :dadosoracle.idTipoHistoricoSenha,
                idSenha,
                idTipoSenha,
                idTipoStatusSenha,
                :dadosoracle.idCanal,
                :dadosoracle.idPessoaUsuario,
                :dadosoracle.idTipoSistema,
                cdSenha,
                dtExpiracao,
                sysdate,
                :dadosoracle.obsRegistro,
                nmRepresentante,
                DECODE(:dadosoracle.idPessoaLinha, 0, NULL, :dadosoracle.idPessoaLinha),
				DECODE(:dadosoracle.iIdTerminal, 0, NULL, :dadosoracle.iIdTerminal)			
            FROM
                customer.Senha
            WHERE
                idSenha = :idsenha;


	ULOG("proCRegistraContatoAlteracao() %d\r\n", dadosoracle.iIdTerminal);

    ULOG_END("proCRegistraContatoAlteracao()");
              
    return true;    
}

void sql_error_registracontato(sqlca*sqlca)
{
//throw TuxBasicOraException(sqlca->sqlcode);
throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
