#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>
#include <tuxfw.h>

int ConsultaRelacionamentoSel( const char *idContatoParam , const char *idRetornoParam, XMLGen *Saida )
{
   ULOG_START("ConsultaRelacionamentoSel()");
   struct sqlca sqlca;
   sqlca.sqlcode=0 ;

   EXEC SQL BEGIN DECLARE SECTION;

      VARCHAR nmRetorno[256];
      unsigned long idRetorno;
      unsigned long idContato = atol(idContatoParam );
      unsigned long ORA_idRetorno = atol( idRetornoParam );
      
      short   i_nmRetorno;

   EXEC SQL END DECLARE SECTION;

   EXEC SQL DECLARE ReadSelTpRelac CURSOR FOR 
      SELECT 
        a.idTipoRelacionamento, 
        a.nmTipoRelacionamento
      FROM 
        Customer.TipoRelacionamento             a ,
        ContatoAdm.TipoPessoaTpRelacionamento   b ,
        ContatoAdm.ContatoTipoRetorno           c
      WHERE
        a.idTipoRelacionamento > 0
	  AND 
        a.idTipoRelacionamento = b.idTipoRelacionamento
      AND
        b.idContatoTipoRetorno = c.idContatoTipoRetorno
      AND
        c.idContato = :idContato
      AND 
        c.idTipoRetornoContato = :ORA_idRetorno
	  ORDER BY a.nmTipoRelacionamento;
          
    EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
    EXEC SQL WHENEVER NOT FOUND DO break;
   
    EXEC SQL OPEN ReadSelTpRelac;
    for( ;; )
    {
        EXEC SQL FETCH ReadSelTpRelac INTO :idRetorno, 
                                           :nmRetorno:i_nmRetorno;
        if ( i_nmRetorno < 0 )
            nmRetorno.arr[0] = 0x0;
        else
            nmRetorno.arr[ nmRetorno.len ] = 0x0;

        Saida->createTag( "AdmTipoClienteVO" );
            Saida->addItem( "idTipoCliente",idRetorno );
            Saida->addItem( "nmTipoCliente",(char*)nmRetorno.arr );
        Saida->closeTag();
        memset( (char *)nmRetorno.arr , 0x0 , sizeof(nmRetorno.arr) );
    }
    EXEC SQL CLOSE ReadSelTpRelac;
    
    ULOG_END("ConsultaRelacionamentoSel()");

    return 1;

UndefinedError:
        throw new TuxBasicOraException( sqlca.sqlcode,
                                        sqlca.sqlerrm.sqlerrmc,
                                        sqlca.sqlerrm.sqlerrml );

}

