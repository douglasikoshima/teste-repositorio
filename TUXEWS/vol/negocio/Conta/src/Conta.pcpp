// Conta.pcpp: implementation of the CConta class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw/tuxfw.h>
#include <Defines/Defines.h>
#include <Conta/Conta.hpp>

EXEC SQL INCLUDE SQLCA;

CConta::CConta()
{
	this->setIdConta(0);
	this->setIdTipoConta(0);
	this->setIdPessoaEnderecoAssociado(0);
	this->setUser(0);
	this->setCdConta("");
}

CConta::~CConta()
{

}

// Getters
int CConta::getIdConta()
{
	return this->m_iIdConta;
}

int CConta::getIdTipoConta()
{
	return this->m_iIdTipoConta;
}

int CConta::getIdSistemaOrigem()
{
	return this->m_iIdSistemaOrigem;
}

int CConta::getIdPessoaEnderecoAssociado()
{
	return this->m_iIdPessoaEnderecoAssociado;
}

int CConta::getIdTipoEnderecoCobranca()
{
	return this->m_iIdTipoEnderecoCobranca;
}

int CConta::getUser()
{
	return this->m_iUser;
}

char *CConta::getCdConta(char *cCdConta)
{
	strcpy(cCdConta, this->m_cCdConta);
	return cCdConta;
}

list<CStr> &CConta::getListaLinhas()
{
	return this->listaLinhas;
}

// Setters
void CConta::setIdConta(int value)
{
	this->m_iIdConta = value;
}

void CConta::setIdTipoConta(int value)
{
	this->m_iIdTipoConta = value;
}

void CConta::setIdSistemaOrigem(int value)
{
	this->m_iIdSistemaOrigem = value;
}

void CConta::setIdPessoaEnderecoAssociado(int value)
{
	this->m_iIdPessoaEnderecoAssociado = value;
}

void CConta::setIdTipoEnderecoCobranca(int value)
{
	this->m_iIdTipoEnderecoCobranca = value;
}

void CConta::setUser(int value)
{
	this->m_iUser = value;
}

void CConta::setCdConta(char *value)
{
	strcpy(this->m_cCdConta, value);
}

//Métodos de negócio
void CConta::inserirAssociacaoEndereco()
{
	this->inserirAssociacaoEnderecoDB();
}

void CConta::excluirAssociacaoEndereco()
{
	this->excluirAssociacaoEnderecoDB();
}

//Métodos de acesso ao DB
void CConta::inserirAssociacaoEnderecoDB()
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
	int  iIdConta;
	int  iIdPessoaEndereco;
	int  iIdUser;
	int  iIdTipoEnderecoCobranca;
	EXEC SQL END DECLARE SECTION;
	
	iIdConta = this->getIdConta();
	iIdPessoaEndereco = this->getIdPessoaEnderecoAssociado();
	iIdUser = this->getUser();

	if(this->getIdTipoEnderecoCobranca() > 0)
		iIdTipoEnderecoCobranca = this->getIdTipoEnderecoCobranca();
	else
		iIdTipoEnderecoCobranca = ID_TIPO_ENDERECO_COBRANCA_DEFAULT;
	
	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	EXEC SQL
		INSERT INTO customer.contaendereco
		(
			idContaEndereco,
			idPessoaEndereco,
			idConta,
			idUsuarioAlteracao,
			dtUltimaAlteracao,
			idTipoEnderecoCobranca
		)
		VALUES
		(
			customer.contaenderecoSQ.NEXTVAL,
			:iIdPessoaEndereco,
			:iIdConta,
			:iIdUser,
			SYSDATE,
			:iIdTipoEnderecoCobranca
		);
	
	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);

}

void CConta::excluirAssociacaoEnderecoDB()
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
	int  iIdConta;
	int  iIdPessoaEndereco;
	EXEC SQL END DECLARE SECTION;

	iIdConta = this->getIdConta();
	iIdPessoaEndereco = this->getIdPessoaEnderecoAssociado();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER NOT FOUND GOTO sqlErrorConstrutor;

	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	EXEC SQL
		DELETE FROM
			customer.contaendereco
		WHERE
			idConta = :iIdConta
		AND
			idPessoaEndereco = :iIdPessoaEndereco;

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);
}
