#include <CRetencaoConsolidada.h>


int CRetencaoConsolidada::Inserir(DOMNode *pdnode,char *pIduser,char *pidRetencao)
{
    char parm[255];
    int iOfaceita=0;
    int inmPessoa=0;
	int iPOG=0; //MPOG 23:10
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR       nmLoginUsuario[255];
        VARCHAR       nrLinha[255];
        VARCHAR       nmPessoa[255];
        short         i_nmPessoa = -1;
        VARCHAR       sgTipoOferta[16];
        VARCHAR       nmRespostaIntencao[255];
        VARCHAR       nmRespostaDestino[255];
        VARCHAR		  idRetencao[21+1];
        VARCHAR		  idGrupo[21+1];
        VARCHAR		  idUFOperadora[21+1];
        VARCHAR		  idSegmentacao[21+1];
        VARCHAR		  idResposta[21+1];
        VARCHAR		  idRespostaDestino[21+1];
        VARCHAR       sgTipoPessoa[4];
        VARCHAR		  idUser[21+1];
        VARCHAR       idTipoEncerramento[21+1]; 
        VARCHAR       idPessoaDePara[21+1];
        VARCHAR       dsRespostaIntencao[256];
        VARCHAR       nrDocumento[256];
        VARCHAR       nrProtocolo[256];
        VARCHAR       nrProtoAtd[256];
        short         i_nrProtoAtd = -1;
        short         i_dsRespostaIntencao = -1;
        VARCHAR       dsRespostaDestino[256];
        short         i_dsRespostaDestino = -1;
        int			  inOfertaAceita=-1;
		int			  inPortabilidade=0;
        int			  cdAreaRegistro=-1;
        int		      inExcecao=-1;
        int           inAtivaLegado = 0;
        int           idTipoLinha;
        int           idTipoPessoa;
        short         i_idTipoPessoa = -1;
        short         i_nrDocumento = -1;
    EXEC SQL END DECLARE SECTION;
    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    ULOG_START( "InsereRetencaoConsolidada()" );
	
    memset( &nrDocumento,0x0,sizeof(nrDocumento) );
    memset( &nmLoginUsuario,0x0,sizeof(nmLoginUsuario) );
    memset( &nrLinha,0x0,sizeof(nrLinha) );
    memset( &nmPessoa,0x0,sizeof(nmPessoa) );
    memset( &sgTipoOferta,0x0,sizeof(sgTipoOferta) );
    memset( &nmRespostaIntencao,0x0,sizeof(nmRespostaIntencao) );
    memset( &nmRespostaDestino,0x0,sizeof(nmRespostaDestino) );
    memset( &idRetencao,0x0,sizeof(idRetencao) );
    memset( &idGrupo,0x0,sizeof(idGrupo) );
    memset( &idUFOperadora,0x0,sizeof(idUFOperadora) );
    memset( &idSegmentacao,0x0,sizeof(idSegmentacao) );
    memset( &idResposta,0x0,sizeof(idResposta) );
    memset( &idRespostaDestino,0x0,sizeof(idRespostaDestino) );
    memset( &sgTipoPessoa,0x0,sizeof(sgTipoPessoa) );
    memset( &idUser,0x0,sizeof(idUser) );
    memset( &idTipoEncerramento,0x0,sizeof(idTipoEncerramento) );
    memset( &idPessoaDePara,0x0,sizeof(idPessoaDePara) );
    memset( &dsRespostaIntencao,0x0,sizeof(dsRespostaIntencao) );
    memset( &dsRespostaDestino,0x0,sizeof(dsRespostaDestino) );
    memset( &idSegmentacao,0x0,sizeof(idSegmentacao) );
    strToOra(idRetencao,pidRetencao);
    strToOra(idUser,pIduser);
    strToOra(idRetencao,pidRetencao);
    strToOra(idUser,pIduser);
    
    get_tag(parm,pdnode,"nrLinha",0,0); 
    strToOra(nrLinha,parm);
    get_tag(parm,pdnode,"idRespostaIntencao",0,0); 
    strToOra(idResposta,parm);

    EXEC SQL
    SELECT 
      DSRESPOSTA
    INTO
      :dsRespostaIntencao:i_dsRespostaIntencao
    FROM 
      QUESTIONARIO.RESPOSTA
    WHERE 
      IDRESPOSTA = :idResposta;
    endOraStr(dsRespostaIntencao);
       
    get_tag(parm,pdnode,"idRespostaDestino",0,0); 
    strToOra(idRespostaDestino,parm);
    EXEC SQL
    SELECT 
      DSRESPOSTA
    INTO
      :dsRespostaDestino:i_dsRespostaDestino
    FROM 
      QUESTIONARIO.RESPOSTA
    WHERE 
      IDRESPOSTA = :idRespostaDestino;
    endOraStr(dsRespostaDestino);

    get_tag(parm,pdnode,"idUFOperadora",0,0); 
    strToOra(idUFOperadora,parm);
    
    get_tag(parm,pdnode,"idGrupo",0,0); 
    strToOra(idGrupo,parm);
    
    get_tag(parm,pdnode,"nmLoginUsuario",0,0); 
    strToOra(nmLoginUsuario,parm);
    
    get_tag(parm,pdnode,"idTipoEncerramento",0,0); 
    strToOra(idTipoEncerramento,parm);
    
    get_tag(parm,pdnode,"idPessoaDePara",0,0); 
    strToOra(idPessoaDePara,parm);
    
    iOfaceita=get_tag(parm,pdnode,"sgOfertaAceita",0,-1); 

    if(iOfaceita!=-1) 
	{
        strToOra(sgTipoOferta,parm);
	}
	else
	{
      strToOra(sgTipoOferta," ");
    }
    /*
    inmPessoa = get_tag(parm,pdnode,"nmPessoa",0,-1); 
    if(inmPessoa!=-1)
        strToOra(nmPessoa,parm);
    else
        strToOra(nmPessoa," ");
    */

    parm[0] = 0x0;
    get_tag(parm,pdnode,"idSegmentacao",0,-1);
    if ( parm[0] != NULL )
        strToOra( idSegmentacao,parm );
	   	 
    parm[0] = 0x0;
    get_tag(parm,pdnode,"inExcecao",0,-1);
    if ( parm[0] != NULL )
        inExcecao = atoi(parm);
    
    if (get_tag(parm,pdnode,"idTipoLinha",0,0) != -1 )
        idTipoLinha = atoi(parm);

    inAtivaLegado = 0;
    
    EXEC SQL
    SELECT NVL (grpord.INATIVAOFERTA,0)
      INTO :inAtivaLegado
      FROM retencao.grupomotivoordem grpord
     WHERE grpord.idgrupo = :idGrupo;
    
    ULOG( "Passou...\n" );

    parm[0] = 0x0;

    iPOG=get_tag(parm,pdnode,"nrProtocoloPortabilidade",0,-1);
    ULOG( "Passou 2 ...\n" );
	
	inPortabilidade=(iPOG*-1);

	ULOG( "iPOG[%d]\n",iPOG );
	if (!iPOG)
	{
	   ULOG( "if (!iPOG)\n" );
       strToOra(nrProtocolo,parm);

	   EXEC SQL
			SELECT atendimento.idatendimentoprotocolo
			INTO :nrProtoAtd:i_nrProtoAtd
			FROM atendimento.atendimentopriorizacao atendimento
			WHERE atendimento.nrprotocoloPortabilidade = :nrProtocolo
			and   atendimento.sgtipoportabilidade='PORTOUT'
            and   rownum < 2;   

	   endOraStr(nrProtoAtd);   
	}
	else
	{
	    ULOG( "else\n" );
		strToOra(nrProtocolo,"0");
		strToOra(nrProtoAtd,"0");
	} 

    ULOG( "Passou 4 ...\n" );
    
	ULOG( "nrProtocolo [%s]",(char *)nrProtocolo.arr );
   
	ULOG( "nrProtoAtd [%s]",(char *)nrProtoAtd.arr );



    EXEC SQL
    SELECT pessoa.nmnome
      INTO :nmPessoa:i_nmPessoa
      FROM customer.pessoadepara pessoadepara, customer.pessoa pessoa
     WHERE pessoa.idpessoa = pessoadepara.idpessoa
       AND pessoadepara.idpessoadepara = :idPessoaDePara;
    ULOG( "Passou 5 ...\n" );

    endOraStr(nmPessoa);    
    ULOG( "Passou 6 ...\n" );
    
    EXEC SQL
    SELECT DISTINCT documento.nrdocumento ,
                    tipodocumento.idtipopessoa
               INTO :nrDocumento:i_nrDocumento,
                    :idTipoPessoa:i_idTipoPessoa
               FROM customer.pessoadocumento pessoadocumento,
                    customer.documento documento,
                    apoio.tipodocumento tipodocumento,
                    apoio.uf uf,
                    apoio.pais pais
              WHERE pessoadocumento.iddocumento = documento.iddocumento
                AND documento.idtipodocumento = tipodocumento.idtipodocumento
                AND documento.iduf = uf.iduf
                AND documento.idpais = pais.idpais
                AND tipodocumento.dstipodocumento IN ('CPF', 'CNPJ')
                AND pessoadocumento.idpessoa IN (
                                             SELECT idpessoaorigem
                                               FROM customer.pessoadepara
                                              WHERE idpessoadepara =
                                                                   :idPessoaDePara)
                AND ROWNUM < 2;
    ULOG( "Passou 7 ...\n" );
    endOraStr(nrDocumento);    
    ULOG( "Passou 8 ...\n" );
            
    ULOG( "idUser [%s]",(char *)idUser.arr );
    ULOG( "Passou 9 ...\n" );
    
    EXEC SQL
    INSERT INTO RETENCAO.RETENCAOCONSOLIDADA
    (
        IDUFOPERADORA      ,    
        IDGRUPO            ,    
        NMLOGINUSUARIO     ,    
        IDRETENCAO         ,    
        NRLINHA            ,    
        CDAREAREGISTRO     ,    
        NMPESSOA           ,    
        IDSEGMENTACAO      ,    
        IDRESPOSTAINTENCAO ,    
        IDRESPOSTADESTINO  ,    
        IDUSUARIOINCLUSAO  ,     
        IDTIPOPESSOA       ,    
        DTINCLUSAO         ,    
        SGTIPOOFERTA       ,    
        INEXCECAO          ,     
        INFIDELIZACAO      ,    
        DSRESPOSTAINTENCAO ,    
        DSRESPOSTADESTINO  , 
        IDTIPOENCERRAMENTO ,
        INOFERTAACEITA     ,   
        IDPESSOADEPARA     ,
        INATIVALEGADO      ,
        CDCPFCNPJ          ,
        IDTIPOLINHA		   ,
		INPORTABILIDADE	   ,	
		NRPROTOCOLO		
    )
    VALUES
    (
        :idUFOperadora,      
        :idGrupo,            
        :nmLoginUsuario,     
        :idRetencao,         
        :nrLinha,
        SUBSTR(:nrLinha,1,2),
        :nmPessoa,           
        :idSegmentacao,      
        nvl(:idResposta,0), 
        nvl(:idRespostaDestino,0),  
        :idUser,  
        :idTipoPessoa,
        SYSDATE ,            
        :sgTipoOferta,       
        :inExcecao,          
        1,      
        :dsRespostaIntencao, 
        :dsRespostaDestino,
        :idTipoEncerramento,
        1,
        :idPessoaDePara ,
        :inAtivaLegado ,
        :nrDocumento ,
        :idTipoLinha ,
		:inPortabilidade,
		:nrProtoAtd
    );
    ULOG( "Passou 10 ...\n" );

    ULOG_END( "InsereRetencaoConsolidada()" );

    return 1;
}

