//
// $Id: cad_pp.pcpp,v 1.1.2.17 2012/04/12 19:13:20 a5116174 Exp $
//

#include "../../negocio/fidutil/include/retencao.hpp"


char* trim(char *pStr);

int  cad_pp(int usuario, DOMNode*dnode,XMLGen*xml)
{
  char parm[50];
	ULOG_START( "cad_pp" );
  
  EXEC SQL BEGIN DECLARE SECTION;
  	
	char  I_IDOPERADORA[255]; 
	char  I_NRLINHA[255];
	char  I_INELEGIVEL[255]; //    NUMBER:=1;
	char  I_IDTIPOLINHA[255]; //    NUMBER:=1;
	char  I_IDCONTA[255]; //:=30002019;
	char  I_STCONTA [255]; //;
	char  I_TPDOCUMENTO[255]; //    NUMBER:=1;
	char  I_NRDOCUMENTO[255]; //    char2(11):='98356054168';
	char  I_IDCUSTOMER[255]; //     char2(16):='C_DOLH5CC088EFQ';
	char  I_STLINHA[255]; //:=2;
	char  I_DTHABILITACAO[255]; //  DATE:=to_date('20090611','YYYYMMDD');
	char  I_DTDESATIVACAO[255]; //  DATE;
	char  I_IDSUBSCRICAO[255]; //   NUMBER:=30002023;
	char  I_SGPLANO[255]; // char2(20):='VIVO MAIS 1400 TITRJ';
	char  I_IDCLIENTE[255]; //      NUMBER;
	char  I_STCLIENTE[255]; //      NUMBER;
	char  I_NMPESSOA[255]; // char2(23):='EDINEY MARTINS DA SILVA';
	char  I_SGTECNOLOGIA[255]; //   CHAR:='G';
	char  I_DTNASCIMENTO[255]; //   DATE:=to_date('19810819','YYYYMMDD');
	char  I_NMEMAIL[255]; // char2(20);
	char  I_SGSEGMENTO[255]; //     char2(2):='30';
	char  I_DTINICIORELACIONAMENTO[255]; //  DATE:=to_date('20110902','YYYYMMDD');
	char  I_DTCARGA[255]; // DATE;
	char  I_IDBILLING[255]; //      NUMBER;
	char  I_CDERRO[255]; //  NUMBER;
	char  I_CDPLANO[255]; // char2(20);
	char  I_NRPESQUISA[255]; //     char2(20);
	
	char  O_CDERRO[256];
	char  O_DSERRO[1024];
	
	char szProcedure[10000];
	char szProcedure2[10000];
	
	
	
	EXEC SQL END DECLARE SECTION;
	
	int iCDERRO = -1;	
	
    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
	
	ULOGE( "Entrando no servico CADPP." );		

	memset(I_IDOPERADORA,0,sizeof(I_IDOPERADORA));
	memset(I_NRLINHA,0,sizeof(I_NRLINHA));
	memset(I_NRDOCUMENTO,0,sizeof(I_NRDOCUMENTO));
	memset(I_NMPESSOA,0,sizeof(I_NMPESSOA));
	memset(I_SGPLANO,0,sizeof(I_SGPLANO));
	memset(szProcedure,0,sizeof(szProcedure));
	memset(szProcedure2,0,sizeof(szProcedure2));
	
	
	memset(O_CDERRO,0,sizeof(O_CDERRO));
	memset(O_DSERRO,0,sizeof(O_DSERRO));

	/*memset(I_NMEMAIL,0,sizeof(I_NMEMAIL));
	memset(I_IDTIPOLINHA,0,sizeof(I_IDTIPOLINHA));
	memset(I_IDCONTA,0,sizeof(I_IDCONTA));
	memset(I_STCONTA,0,sizeof(I_STCONTA));
	memset(I_TPDOCUMENTO,0,sizeof(I_TPDOCUMENTO));
	memset(I_IDCUSTOMER,0,sizeof(I_IDCUSTOMER));
	memset(I_STLINHA,0,sizeof(I_STLINHA));
	memset(I_DTHABILITACAO,0,sizeof(I_DTHABILITACAO));
	memset(I_DTDESATIVACAO,0,sizeof(I_DTDESATIVACAO));
	memset(I_IDSUBSCRICAO,0,sizeof(I_IDSUBSCRICAO));
	memset(I_IDCLIENTE,0,sizeof(I_IDCLIENTE));
	memset(I_STCLIENTE,0,sizeof(I_STCLIENTE));
	memset(I_SGTECNOLOGIA,0,sizeof(I_SGTECNOLOGIA));
	memset(I_DTNASCIMENTO,0,sizeof(I_DTNASCIMENTO));
	memset(I_SGSEGMENTO,0,sizeof(I_SGSEGMENTO));
	memset(I_SGPLANO,0,sizeof(I_SGPLANO));
	memset(I_DTINICIORELACIONAMENTO,0,sizeof(I_DTINICIORELACIONAMENTO));
	memset(I_DTCARGA,0,sizeof(I_DTCARGA));
	memset(I_IDBILLING,0,sizeof(I_IDBILLING));
	memset(I_CDERRO,0,sizeof(I_CDERRO));
	memset(I_CDPLANO,0,sizeof(I_CDPLANO));
	memset(I_NRPESQUISA,0,sizeof(I_NRPESQUISA));
	memset(O_CDERRO,0,sizeof(O_CDERRO));
	memset(O_DSERRO,0,sizeof(O_DSERRO));*/
	
	
    try{
      //  Obtendo dados do xml
/*
      	get_tag(parm, dnode, "IDOPERADORA", 0, 0);
		strcpy(I_IDOPERADORA,parm);
		get_tag(parm, dnode, "NRLINHA", 0, 0);
		strcpy(I_NRLINHA,parm);
		get_tag(parm, dnode, "INELEGIVEL", 0, 0);
		strcpy(I_INELEGIVEL,parm);
		get_tag(parm, dnode, "IDTIPOLINHA", 0, 0);
		strcpy(I_IDTIPOLINHA,parm);
		get_tag(parm, dnode, "IDCONTA", 0, 0);
		strcpy(I_IDCONTA,parm);
		get_tag(parm, dnode, "STCONTA", 0, 0);
		strcpy(I_STCONTA,parm);
		get_tag(parm, dnode, "TPDOCUMENTO", 0, 0);
		strcpy(I_TPDOCUMENTO,parm);
		get_tag(parm, dnode, "NRDOCUMENTO", 0, 0);
		strcpy(I_NRDOCUMENTO,parm);
		get_tag(parm, dnode, "IDCUSTOMER", 0, 0);
		strcpy(I_IDCUSTOMER,parm);
		get_tag(parm, dnode, "STLINHA", 0, 0);
		strcpy(I_STLINHA,parm);
		get_tag(parm, dnode, "DTHABILITACAO", 0, 0);
		strcpy(I_DTHABILITACAO,parm);
		get_tag(parm, dnode, "DTDESATIVACAO", 0, 0);
		strcpy(I_DTDESATIVACAO,parm);
		get_tag(parm, dnode, "IDSUBSCRICAO", 0, 0);
		strcpy(I_IDSUBSCRICAO,parm);
		get_tag(parm, dnode, "SGPLANO", 0, 0);
		strcpy(I_SGPLANO,parm);
		get_tag(parm, dnode, "IDCLIENTE", 0, 0);
		strcpy(I_IDCLIENTE,parm);
		get_tag(parm, dnode, "STCLIENTE", 0, 0);
		strcpy(I_STCLIENTE,parm);
		get_tag(parm, dnode, "NMPESSOA", 0, 0);
		strcpy(I_NMPESSOA,parm);
		get_tag(parm, dnode, "SGTECNOLOGIA", 0, 0);
		strcpy(I_SGTECNOLOGIA,parm);
		get_tag(parm, dnode, "DTNASCIMENTO", 0, 0);
		strcpy(I_DTNASCIMENTO,parm);
		get_tag(parm, dnode, "NMEMAIL", 0, 0);
		strcpy(I_NMEMAIL,parm);
		get_tag(parm, dnode, "SGSEGMENTO", 0, 0);
		strcpy(I_SGSEGMENTO,parm);
		get_tag(parm, dnode, "DTINICIORELACIONAMENTO", 0, 0);
		strcpy(I_DTINICIORELACIONAMENTO,parm);
		get_tag(parm, dnode, "DTCARGA", 0, 0);
		strcpy(I_DTCARGA,parm);
		get_tag(parm, dnode, "IDBILLING", 0, 0);
		strcpy(I_IDBILLING,parm);
		get_tag(parm, dnode, "CDERRO", 0, 0);
		strcpy(I_CDERRO,parm);
		get_tag(parm, dnode, "CDPLANO", 0, 0);
		strcpy(I_CDPLANO,parm);
		get_tag(parm, dnode, "NRPESQUISA", 0, 0);
		strcpy(I_NRPESQUISA,parm);
*/
//		oLog.logDebug( szTrunc );
//		EXEC SQL EXECUTE IMMEDIATE :szTrunc;	
		
      // Pegando id do usuario
    //  idPessoaUsuarioAlteracao = usuario;

      	get_tag(parm, dnode, "IDOPERADORA", 0, 0);
		strcpy(I_IDOPERADORA,parm);
		get_tag(parm, dnode, "NRLINHA", 0, 0);
		strcpy(I_NRLINHA,parm);
		get_tag(parm, dnode, "NRDOCUMENTO", 0, 0);
		strcpy(I_NRDOCUMENTO,parm);
		get_tag(parm, dnode, "NMPESSOA", 0, 0);
		strcpy(I_NMPESSOA,parm);	
		get_tag(parm, dnode, "SGPLANO", 0, 0);
		strcpy(I_SGPLANO,parm);
		get_tag(parm, dnode, "PROCEDURE", 0, 0);
		strcpy(szProcedure,parm);
		
		
		
		
/*      EXEC SQL 
		call CADASTRO.CADASTROONLINEVIVONET(  
							  :I_IDOPERADORA,
							  :I_NRLINHA,
							  :I_INELEGIVEL,
							  :I_IDTIPOLINHA,
							  :I_IDCONTA,
							  :I_STCONTA,
							  :I_TPDOCUMENTO,
							  :I_NRDOCUMENTO,
							  :I_IDCUSTOMER,
							  :I_STLINHA,
							  :I_DTHABILITACAO,
							  :I_DTDESATIVACAO,
							  :I_IDSUBSCRICAO,
							  :I_SGPLANO,
							  :I_IDCLIENTE,
							  :I_STCLIENTE,
							  :I_NMPESSOA,
							  :I_SGTECNOLOGIA,
							  :I_DTNASCIMENTO,
							  :I_NMEMAIL,
							  :I_SGSEGMENTO,
							  :I_DTINICIORELACIONAMENTO,
							  :I_DTCARGA,
							  :I_IDBILLING,
							  :I_CDERRO,
							  :I_CDPLANO ,
							  :I_NRPESQUISA,
							  :O_CDERRO,
							  :O_DSERRO
							);

		CADASTRO.CADASTROONLINEVIVONET
        execute immediate 'begin'||v_procname||'(:1); end;' using v_text;
		ospacename := 'tspace2';
		oprocstring := 'BEGIN '|| ospacename || '.proc1 (:b1,:b2,:b3); END;';
		execute immediate (oprocstring) USING 1, 2, 3;
		strcpy(szTrunc,"call linha.sp_limpalinhaoferta()");
		oLog.logDebug( szTrunc );
		EXEC SQL EXECUTE IMMEDIATE :szTrunc;
*/

//	  ULOGE( "Realizando chamada no DB do Programa de Pontos para os parametros.." );		

	
	  //sprintf(szProcedure2, "BEGIN %s END;",szProcedure);
	  sprintf(szProcedure2, "BEGIN %s END;",szProcedure);

	  ULOGE( "--------------------------------------------------------------------");  
	  
	  
	  ULOGE( "Realizando chamada no DB do Programa de Pontos para os parametros.." );
	  ULOGE( "Executando PLSQL[%s] no DB do Progrma de Pontos." , szProcedure2);
	  
	  
	  
	  EXEC SQL PREPARE CALLPROC FROM :szProcedure2;
	  
	  EXEC SQL EXECUTE CALLPROC USING :O_CDERRO, :O_DSERRO;
		

	  
	  
	  try
	  {
		trim(O_CDERRO);
		trim(O_DSERRO);
		
		if(O_CDERRO != NULL)
			ULOGE( "Retorno do CDERRO[%s]", O_CDERRO );
		if(O_DSERRO != NULL)
			ULOGE( "Retorno do DSERRO[%s]", O_DSERRO );
			
	
		iCDERRO = atoi(O_CDERRO);
	  }
	  catch(...)
	  {
      }
	
	  if ( iCDERRO != 0 )
	  {
		ULOGE( "ERRO no retorno da chamada da PROCEDURE");
		
	  }
	  ULOGE( "--------------------------------------------------------------------");  
	  
	  // Operacao OK
      xml->addItem("descricao","CADASTROONLINEVIVONET");
	  xml->addItem("O_CDERRO",O_CDERRO);
      xml->addItem("O_DSERRO",O_DSERRO);

    }
	catch(...)
	{
		
			throw;
	}
    
	  if ( iCDERRO != 0 )
	  {
		return -1;
		
		ULOGE( "ERRO no retorno da chamada da PROCEDURE");
	  }	
	  else
	  {
		return 1;
	  }
}

char* trim(char *pStr)
{
	int lInd = 0;
	int iSize = strlen(pStr);

	if (pStr == NULL)
			return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
	}

    strncpy(pStr,(pStr+lInd), iSize-lInd);
	pStr = pStr + lInd;

    register int iPos;

    for(iPos=strlen(pStr)-1; iPos >= 0; iPos--)
        if(pStr[iPos] == 0x20)
            pStr[iPos] = 0x00;
        else
            break;
   return pStr;
}





