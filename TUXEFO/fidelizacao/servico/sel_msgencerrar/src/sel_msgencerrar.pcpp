//
// $Id: sel_msgencerrar.pcpp,v 1.1 2009/07/31 15:34:13 a5110702 Exp $
//

#include "../../negocio/fidutil/include/retencao.hpp"

int sel_msgencerrar(char * usuario,DOMNode*dnode, XMLGen*xml)
{
  char parm[255];
  int  txFlag;
  int  tpFlag;
  int  swCase;

  EXEC SQL BEGIN DECLARE SECTION;
  int     idUfOperadora;
  int     idMsgEncerramento;
  int     idTpEncerramento;
  int	  idTipoEncerramento;
  VARCHAR dsMsgEncerramento[255];
  VARCHAR nmUf[255];
  VARCHAR dsTipoEncerramento[255];
  VARCHAR whClause[255];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
  EXEC SQL WHENEVER NOT FOUND DO break;

  //  Obtendo dados do xml
  get_tag(parm,dnode,"idUfOperadora",0,0);
  idUfOperadora = atoi(parm);

  get_tag(parm,dnode,"dsMsgEncerramento",0,0);
  sprintf((char *)whClause.arr,"%%%s%%",parm);
  whClause.len = strlen(parm) + 2;
  txFlag = (parm[0] != '*');

  get_tag(parm,dnode,"idTpEncerramento",0,0);
  idTpEncerramento = atoi(parm);
  tpFlag = (idTpEncerramento != 0);
 
  // Definicao dos cursores
  // swCase = txFlag(0) + tpFlag(0)
  EXEC SQL DECLARE crsMsg_00 CURSOR FOR
    select idMsgEncerramento,
		   dsMsgEncerramento,
		   nmUf,
		   idTipoEncerramento,
		   dsTipoEncerramento
    from   retencao.msgEncerramentoV01
    where  inAtivo != 0
    and    idUfOperadora = :idUfOperadora;

  // swCase = txFlag(0) + tpFlag(1)
  EXEC SQL DECLARE crsMsg_01 CURSOR FOR
    select idMsgEncerramento,
		   dsMsgEncerramento,
		   nmUf,
		   idTipoEncerramento,
		   dsTipoEncerramento
    from   retencao.msgEncerramentoV01
    where  inAtivo != 0
    and    idUfOperadora = :idUfOperadora
    and    idTipoEncerramento = :idTpEncerramento;
   
  // swCase = txFlag(1) + tpFlag(0)
  EXEC SQL DECLARE crsMsg_10 CURSOR FOR
    select idMsgEncerramento,
		   dsMsgEncerramento,
		   nmUf,
		   idTipoEncerramento,
		   dsTipoEncerramento
    from   retencao.msgEncerramentoV01
    where  inAtivo != 0
    and    idUfOperadora = :idUfOperadora
    and    upper(dsMsgEncerramento) like upper(:whClause);
  
  // swCase = txFlag(1) + tpFlag(1)
  EXEC SQL DECLARE crsMsg_11 CURSOR FOR
    select idMsgEncerramento,
		   dsMsgEncerramento,
		   nmUf,
		   idTipoEncerramento,
		   dsTipoEncerramento
    from   retencao.msgEncerramentoV01
    where  inAtivo != 0
    and    idUfOperadora = :idUfOperadora
    and    idTipoEncerramento = :idTpEncerramento
    and    upper(dsMsgEncerramento) like upper(:whClause);
 
  swCase = (txFlag * 2 + tpFlag);
  ULOG("crsMsg_%d%d\n",txFlag*2,tpFlag);
  switch(swCase)
  {
	case 0: EXEC SQL OPEN crsMsg_00; break;
	case 1: EXEC SQL OPEN crsMsg_01; break;
	case 2: EXEC SQL OPEN crsMsg_10; break;
	case 3: EXEC SQL OPEN crsMsg_11; break;
  }
    
  for(;;) 
  {
    if (swCase == 0)
	{
      ULOG("crsMsg_00\n");
      EXEC SQL FETCH crsMsg_00 
			into :idMsgEncerramento,dsMsgEncerramento,
				  :nmUf,:idTipoEncerramento,:dsTipoEncerramento;
    }
	else if (swCase == 1)
	{
      ULOG("crsMsg_01\n");
      EXEC SQL FETCH crsMsg_01
		into :idMsgEncerramento,dsMsgEncerramento,
			 :nmUf,:idTipoEncerramento,:dsTipoEncerramento;
    }
	else if (swCase == 2)
	{
      ULOG("crsMsg_10\n");
      EXEC SQL FETCH crsMsg_10
	  into :idMsgEncerramento,dsMsgEncerramento,
		   :nmUf,:idTipoEncerramento,:dsTipoEncerramento;
    }
	else
	{
      ULOG("crsMsg_10\n");
      EXEC SQL FETCH crsMsg_11
	into :idMsgEncerramento,dsMsgEncerramento,:nmUf,:idTipoEncerramento,:dsTipoEncerramento;
    }

    endOraStr(dsMsgEncerramento);
    endOraStr(nmUf);
    endOraStr(dsTipoEncerramento);

    
    xml->createTag("tns:mensagemResultadoVO");
    xml->addItem("dsRegional",(char *)nmUf.arr);
    xml->addItem("descricao",(char *)dsMsgEncerramento.arr);
    xml->addItem("idMensagemResultado",idMsgEncerramento);
	xml->addItem("idAcaoRetencao",idTipoEncerramento);
    xml->addItem("dsAcaoRetencao",(char *)dsTipoEncerramento.arr);
    xml->closeTag();
  }

  switch(swCase){
  case 0: EXEC SQL CLOSE crsMsg_00; break;
  case 1: EXEC SQL CLOSE crsMsg_01; break;
  case 2: EXEC SQL CLOSE crsMsg_10; break;
  case 3: EXEC SQL CLOSE crsMsg_11; break;
  }

  return 1;
}

