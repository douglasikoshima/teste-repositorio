//
// $Id: sinc_pp.pcpp,v 1.1.8.1.4.1 2015/11/09 16:23:10 a5110705 Exp $
//

#include "../../negocio/fidutil/include/retencao.hpp"


char* trim(char *pStr);

int  sinc_pp(int usuario, DOMNode*dnode,XMLGen*xml)
{
	ULOG_START( "sinc_pp" );
	
	char parm[255];
	char sgUF[255+1];
	char szTemp[8000+1];
	char nrLinha[255+1];
	char idTipoLinha[255+1];
	char stLinha[255+1];
	char nrDocumento[255+1];
	char idCustomer[255+1];
	char dtHabilitacao[255+1];
	char dtDesativacao[255+1];
	char idSubscricao[255+1];
	char sgPlano[255+1];
	char nmPessoa[255+1];
	char dtNascimento[255+1];
	char nmEmail[255+1];
	char sgSegmento[255+1];
	char dtInicioRelacionamento[255+1];
	char idTipoServico[255+1];
	char idBilling[255+1];
	char nrTelefone[20+1];
  
	EXEC SQL BEGIN DECLARE SECTION;
	char  O_CDERRO[256];
	char  O_DSERRO[1024];	
	char szProcedure[10000];	
	char szProcedure2[10000];		
	int i_inStatus = 0;
	EXEC SQL END DECLARE SECTION;
	
	int iCDERRO = -1;	
    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
	ULOGE( "Entrando no servico SINCPP." );		
	memset(O_CDERRO,0,sizeof(O_CDERRO));
	memset(O_DSERRO,0,sizeof(O_DSERRO));	
	memset(szProcedure,0,sizeof(szProcedure));
	memset(szProcedure2,0,sizeof(szProcedure2));
	memset(szTemp,0,sizeof(szTemp));
	memset(sgUF,0,sizeof(sgUF));
	memset(nrLinha,0,sizeof(nrLinha));
	memset(idTipoLinha,0,sizeof(idTipoLinha));
	memset(stLinha,0,sizeof(stLinha));
	memset(nrDocumento,0,sizeof(nrDocumento));
	memset(idCustomer,0,sizeof(idCustomer));
	memset(dtHabilitacao,0,sizeof(dtHabilitacao));
	memset(dtDesativacao,0,sizeof(dtDesativacao));
	memset(idSubscricao,0,sizeof(idSubscricao));
	memset(sgPlano,0,sizeof(sgPlano));
	memset(nmPessoa,0,sizeof(nmPessoa));
	memset(dtNascimento,0,sizeof(dtNascimento));
	memset(nmEmail,0,sizeof(nmEmail));
	memset(sgSegmento,0,sizeof(sgSegmento));
	memset(dtInicioRelacionamento,0,sizeof(dtInicioRelacionamento));
	memset(idTipoServico,0,sizeof(idTipoServico));
	memset(idBilling,0,sizeof(idBilling));
	memset(nrTelefone,0,sizeof(nrTelefone));
    try {
		// verificando se aplicação está bloqueada
		EXEC SQL 
			SELECT INSTATUS INTO :i_inStatus 
			  FROM SEGUR.APLICATIVO 
			 WHERE IDAPLICATIVO = 1;
			 
		if (i_inStatus == 0) {
			ULOGE( "Programa de Pontos bloqueado status = [%d]", i_inStatus );
			return -1;
		}
	
		get_tag(parm, dnode, "SGUF", 0, -1); strcpy(sgUF,parm);	memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "NRLINHA", 0, -1); strcpy(nrLinha,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "IDTIPOLINHA", 0, -1); strcpy(idTipoLinha,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "STLINHA", 0, -1); strcpy(stLinha,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "NRDOCUMENTO", 0, -1); strcpy(nrDocumento,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "IDCUSTOMER", 0, -1); strcpy(idCustomer,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "DTHABILITACAO", 0, -1); strcpy(dtHabilitacao,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "DTDESATIVACAO", 0, -1); strcpy(dtDesativacao,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "IDSUBSCRICAO", 0, -1); strcpy(idSubscricao,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "SGPLANO", 0, -1); strcpy(sgPlano,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "NMPESSOA", 0, -1); strcpy(nmPessoa,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "DTNASCIMENTO", 0, -1); strcpy(dtNascimento,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "NMEMAIL", 0, -1); strcpy(nmEmail,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "SGSEGMENTO", 0, -1); strcpy(sgSegmento,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "DTINICIORELACIONAMENTO", 0, -1); strcpy(dtInicioRelacionamento,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "IDTIPOSERVICO", 0, -1); strcpy(idTipoServico,parm); memset(parm,0,sizeof(parm));
		get_tag(parm, dnode, "IDBILLING", 0, -1); strcpy(idBilling,parm); memset(parm,0,sizeof(parm));		
		get_tag(parm, dnode, "NRTELEFONE", 0, -1); strcpy(nrTelefone,parm);	
		
		ULOGE( "TAG NRTELEFONE [%s] tamanho [%d]" , nrTelefone, strlen(nrTelefone));
		
		if (strlen(nrTelefone) > 0) {
			sprintf(szTemp,"PONTOS.CADASTRO.CANCELARLINHA('%s',", nrTelefone); strcpy(szProcedure,szTemp);			
			sprintf(szTemp,"%s,", ":O_CDERRO"); strcat(szProcedure,szTemp);
			sprintf(szTemp,"%s);", ":O_DSERRO"); strcat(szProcedure,szTemp);	
		} else {		
		sprintf(szTemp,"PONTOS.CADASTRO.CADASTROONLINEVIVONET('%s',", sgUF); strcpy(szProcedure,szTemp);
		sprintf(szTemp,"%s,", nrLinha); strcat(szProcedure,szTemp);
		strcat(szProcedure,"NULL,"); // inelegivel
		sprintf(szTemp,"%s,", idTipoLinha); strcat(szProcedure,szTemp);
		strcat(szProcedure,"NULL,"); // idconta
		strcat(szProcedure,"NULL,"); // stConta
		strcat(szProcedure,"1,"); // tpDocumento
		sprintf(szTemp,"'%s',", nrDocumento); strcat(szProcedure,szTemp);
		sprintf(szTemp,"'%s',", idCustomer); strcat(szProcedure,szTemp);
		sprintf(szTemp,"%s,", stLinha); strcat(szProcedure,szTemp);
		sprintf(szTemp,"TO_DATE('%s','DD/MM/YYYY'),", dtHabilitacao); strcat(szProcedure,szTemp);
		sprintf(szTemp,"TO_DATE('%s','DD/MM/YYYY'),", dtDesativacao); strcat(szProcedure,szTemp);
		sprintf(szTemp,"%s,", idSubscricao); strcat(szProcedure,szTemp);
		sprintf(szTemp,"'%s',", sgPlano); strcat(szProcedure,szTemp);
		strcat(szProcedure,"NULL,"); // idcliente
		strcat(szProcedure,"NULL,"); // stCliente
		sprintf(szTemp,"'%s',", nmPessoa); strcat(szProcedure,szTemp);
		strcat(szProcedure,"NULL,"); // sgtecnologia
		sprintf(szTemp,"TO_DATE('%s','DD/MM/YYYY'),", dtNascimento); strcat(szProcedure,szTemp);
		sprintf(szTemp,"'%s',", nmEmail); strcat(szProcedure,szTemp);
		sprintf(szTemp,"'%s',", sgSegmento); strcat(szProcedure,szTemp);
		sprintf(szTemp,"TO_DATE('%s','DD/MM/YYYY'),", dtInicioRelacionamento); strcat(szProcedure,szTemp);
		sprintf(szTemp,"%s,", "SYSDATE"); strcat(szProcedure,szTemp);  // dtCarga
		sprintf(szTemp,"%s,", idBilling); strcat(szProcedure,szTemp);  // idbilling
		sprintf(szTemp,"'%s',", sgPlano); strcat(szProcedure,szTemp); // cdplano
		strcat(szProcedure,"NULL,"); // nrpesquisa
		sprintf(szTemp,"'%s',", idTipoServico); strcat(szProcedure,szTemp);
		sprintf(szTemp,"%s,", ":O_CDERRO"); strcat(szProcedure,szTemp);
		sprintf(szTemp,"%s);", ":O_DSERRO"); strcat(szProcedure,szTemp);
		}

	  sprintf(szProcedure2, "BEGIN %s END;",szProcedure);

	  ULOGE( "--------------------------------------------------------------------");  
	  
	  
	  ULOGE( "Realizando chamada no DB do Programa de Pontos para os parametros.." );
	  ULOGE( "Executando PLSQL[%s] no DB do Progrma de Pontos." , szProcedure);
	  
	  
	  
	  EXEC SQL PREPARE CALLPROC FROM :szProcedure2;
	  
	  EXEC SQL EXECUTE CALLPROC USING :O_CDERRO, :O_DSERRO;
	
	  try
	  {
		trim(O_CDERRO);
		trim(O_DSERRO);
		
		if(O_CDERRO != NULL)
			ULOGE( "Retorno do CDERRO[%s]", O_CDERRO );
		if(O_DSERRO != NULL)
			ULOGE( "Retorno do DSERRO[%s]", O_DSERRO );
			
	
		iCDERRO = atoi(O_CDERRO);
	  }
	  catch(...)
	  {
      }
	
	  if ( iCDERRO != 0 )
	  {
		ULOGE( "ERRO no retorno da chamada da PROCEDURE");
		
	  }
	  ULOGE( "--------------------------------------------------------------------");  
	  
	  // Operacao OK
      xml->addItem("descricao","CADASTROONLINEVIVONET");
	  xml->addItem("O_CDERRO",O_CDERRO);
      xml->addItem("O_DSERRO",O_DSERRO);

    }
	catch(...)
	{
		
			throw;
	}
    
	  if ( iCDERRO != 0 )
	  {
		return -1;
		
		ULOGE( "ERRO no retorno da chamada da PROCEDURE");
	  }	
	  else
	  {
		return 1;
	  }
}

char* trim(char *pStr)
{
	int lInd = 0;
	int iSize = strlen(pStr);

	if (pStr == NULL)
			return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
	}

    strncpy(pStr,(pStr+lInd), iSize-lInd);
	pStr = pStr + lInd;

    register int iPos;

    for(iPos=strlen(pStr)-1; iPos >= 0; iPos--)
        if(pStr[iPos] == 0x20)
            pStr[iPos] = 0x00;
        else
            break;
   return pStr;
}





