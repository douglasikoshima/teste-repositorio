
#include "../../negocio/fidutil/include/retencao.hpp"

int LstApDesc( int usuario, DOMNode * dnode, XMLGen * xml )
{
    char parm[256];
    memset( parm,0x0,sizeof(parm) );
    
    char vlDescNaoClassif[10];
    char vlDescDiamante1[10];
    char vlDescDiamante2[10];
    char vlDescDiamante3[10];
    char vlDescRubi1[10];
    char vlDescRubi2[10];
    char vlDescRubi3[10];
    char vlDescEsmeralda1[10];
    char vlDescEsmeralda2[10];
    char vlDescEsmeralda3[10];
    char vlDescSafira[10];
    
    EXEC SQL BEGIN DECLARE SECTION;
        
        int idSegmentacao;
        
        VARCHAR idaparelho[40];
        VARCHAR dsmodelo[256];
        VARCHAR vldesconto[16]; 
        
        VARCHAR idUsuario[40]; 
        VARCHAR idDesconto[40]; 
        VARCHAR dsDesconto[101]; 
        VARCHAR nmUsuario[256]; 
        VARCHAR dtUltimaAlteracao[64]; 

        short i_dsDesconto = -1;
        short i_idUsuario = -1;
        short i_nmUsuario = -1;
        short i_dtUltimaAlteracao = -1;

        short i_idaparelho = -1;
        short i_dsmodelo = -1;
        short i_vldesconto = -1;
        
    EXEC SQL END DECLARE SECTION;

    memset( &idaparelho , 0x0, sizeof(idaparelho) );
    memset( &dsmodelo   , 0x0, sizeof(dsmodelo) );
    memset( &vldesconto , 0x0, sizeof(vldesconto) );
    
    memset( &idUsuario        , 0x0, sizeof(idUsuario) );
    memset( &idDesconto       , 0x0, sizeof(idDesconto) );
    memset( &dsDesconto       , 0x0, sizeof(dsDesconto) );
    memset( &nmUsuario        , 0x0, sizeof(nmUsuario) );
    memset( &dtUltimaAlteracao, 0x0, sizeof(dtUltimaAlteracao) );
    
    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
  
    try
    {
        //  Obtendo dados do xml
        get_tag( parm, dnode, "idMatriz", 0, 0 );
        if ( parm[0] != 'N' )
        {
            if ( strlen(parm) > 0 )
            {
                strToOra( idDesconto, parm );
            }

            EXEC SQL
            SELECT desconto.dsdescontopercentual,
                   matrizaparelhodesconto.idusuarioalteracao,
                   TO_CHAR(matrizaparelhodesconto.dtultimaalteracao, 'DD/MM/YYYY HH24:MI:SS')
              INTO :dsDesconto:i_dsDesconto ,
                   :idUsuario:i_idUsuario ,
                   :dtUltimaAlteracao:i_dtUltimaAlteracao
              FROM retencao.desconto desconto,
                   retencao.matrizaparelhodesconto matrizaparelhodesconto
             WHERE desconto.inativo = 1
               AND matrizaparelhodesconto.inativo = 1
               AND matrizaparelhodesconto.iddesconto = desconto.iddesconto
               AND matrizaparelhodesconto.iddesconto = :idDesconto
               AND ROWNUM < 2;

            endOraStr( dsDesconto );
            endOraStr( idUsuario );
            endOraStr( dtUltimaAlteracao );

            EXEC SQL
            SELECT nmloginusuario
              INTO :nmUsuario:i_nmUsuario
              FROM acesso.usuario
             WHERE idpessoausuario = :idUsuario;        

            endOraStr( nmUsuario );
       
            xml->addItem("idMatriz",(char*)idDesconto.arr);
            xml->addItem("dsMatriz",(char*)dsDesconto.arr);
            xml->addItem("nmUsuario",(char*)nmUsuario.arr);
            xml->addItem("dtAlteracao",(char*)dtUltimaAlteracao.arr);
            
            EXEC SQL WHENEVER NOT FOUND DO BREAK;
            EXEC SQL DECLARE crsMtzApDesc CURSOR FOR
            SELECT distinct mtzapdesconto.idaparelho, 
                   (aparelho.dsmodelo || ' - ' || tipoaparelho.dstipoaparelho) as dsAparelho
              FROM retencao.matrizaparelhodesconto mtzapdesconto, 
                   retencao.aparelho aparelho ,
                   apoio.tipoaparelho tipoaparelho
             WHERE mtzapdesconto.iddesconto = :idDesconto
               AND mtzapdesconto.idaparelho = aparelho.idaparelho
               AND aparelho.inativo = 1
               AND mtzapdesconto.inativo = 1
               AND tipoaparelho.idtipoaparelho = aparelho.idtipoaparelho
            ORDER BY (dsAparelho);
               
            EXEC SQL OPEN crsMtzApDesc;
            for(;;)
            {
                EXEC SQL 
                FETCH crsMtzApDesc INTO :idaparelho:i_idaparelho ,
                                        :dsmodelo:i_dsmodelo ;

                endOraStr( idaparelho );
                endOraStr( dsmodelo );
ULOG( "Aparelho [%s]", (char*)dsmodelo.arr );

                memset(vlDescNaoClassif , 0x0, sizeof(vlDescNaoClassif));
                memset(vlDescDiamante1  , 0x0, sizeof(vlDescDiamante1));
                memset(vlDescDiamante2  , 0x0, sizeof(vlDescDiamante1));
                memset(vlDescDiamante3  , 0x0, sizeof(vlDescDiamante1));
                memset(vlDescRubi1      , 0x0, sizeof(vlDescRubi1));
                memset(vlDescRubi2      , 0x0, sizeof(vlDescRubi2));
                memset(vlDescRubi3      , 0x0, sizeof(vlDescRubi3));
                memset(vlDescEsmeralda1 , 0x0, sizeof(vlDescEsmeralda1));
                memset(vlDescEsmeralda2 , 0x0, sizeof(vlDescEsmeralda2));
                memset(vlDescEsmeralda3 , 0x0, sizeof(vlDescEsmeralda3));
                memset(vlDescSafira     , 0x0, sizeof(vlDescSafira));

                for (idSegmentacao=1;idSegmentacao<12;idSegmentacao++)
                {
                    memset(&vldesconto,0x0,sizeof(vldesconto));
                    i_vldesconto = -1;

                    
                    EXEC SQL WHENEVER NOT FOUND CONTINUE;
                    EXEC SQL 
                    SELECT trim(to_char(mtzapdesconto.vldesconto,'99999999')) 
                      INTO :vldesconto:i_vldesconto
                      FROM retencao.matrizaparelhodesconto mtzapdesconto
                     WHERE mtzapdesconto.iddesconto = :idDesconto
                       AND mtzapdesconto.idaparelho = :idaparelho
                       AND mtzapdesconto.inativo = 1
                       and mtzapdesconto.idsegmentacao = :idSegmentacao;

                    
                    if ( i_vldesconto != -1 ) 
                       endOraStr( vldesconto );
                       
                    switch( idSegmentacao )
                    {
                        case  1: if (i_vldesconto != -1) strcpy(vlDescDiamante1,(char*)vldesconto.arr);
                                break;
                        case  2: if (i_vldesconto != -1) strcpy(vlDescDiamante2,(char*)vldesconto.arr);
                                break;
                        case  3: if (i_vldesconto != -1) strcpy(vlDescDiamante3,(char*)vldesconto.arr);
                                break;
                        case  4: if (i_vldesconto != -1) strcpy(vlDescRubi1,(char*)vldesconto.arr);
                                break;
                        case  5: if (i_vldesconto != -1) strcpy(vlDescRubi2,(char*)vldesconto.arr);
                                break;
                        case  6: if (i_vldesconto != -1) strcpy(vlDescRubi3,(char*)vldesconto.arr);
                                break;
                        case  7: if (i_vldesconto != -1) strcpy(vlDescEsmeralda1,(char*)vldesconto.arr);
                                break;
                        case  8: if (i_vldesconto != -1) strcpy(vlDescEsmeralda2,(char*)vldesconto.arr);
                                break;
                        case  9: if (i_vldesconto != -1) strcpy(vlDescEsmeralda3,(char*)vldesconto.arr);
                                break;
                        case 10: if (i_vldesconto != -1) strcpy(vlDescSafira,(char*)vldesconto.arr);
                                break;
                        case 11: if (i_vldesconto != -1) strcpy(vlDescNaoClassif,(char*)vldesconto.arr);
                                break;
                    }
                }
                EXEC SQL WHENEVER NOT FOUND DO BREAK;

                xml->createTag("listaCadastroDesconto");
                    xml->addItem("idDesconto",(char*)idDesconto.arr);
                    xml->addItem("idAparelho",(char*)idaparelho.arr);
                    xml->addItem("dsAparelho",(char*)dsmodelo.arr);
                    xml->addItem("safira",vlDescSafira);
                    xml->addItem("esmeralda1",vlDescEsmeralda1);
                    xml->addItem("esmeralda2",vlDescEsmeralda2);
                    xml->addItem("esmeralda3",vlDescEsmeralda3);
                    xml->addItem("rubi1",vlDescRubi1);
                    xml->addItem("rubi2",vlDescRubi2);
                    xml->addItem("rubi3",vlDescRubi3);
                    xml->addItem("diamante1",vlDescDiamante1);
                    xml->addItem("diamante2",vlDescDiamante2);
                    xml->addItem("diamante3",vlDescDiamante3);
                    xml->addItem("naoClassificado",vlDescNaoClassif);
                xml->closeTag();
            }
            EXEC SQL CLOSE crsMtzApDesc;

            // xml->createTag("listaCadastroDesconto");
                // xml->addItem("idDesconto",(char*)idDesconto.arr);
                // xml->addItem("idAparelho",(char*)idaparelho.arr);
                // xml->addItem("dsAparelho",(char*)dsmodelo.arr);
                // xml->addItem("safira",vlDescSafira);
                // xml->addItem("esmeralda1",vlDescEsmeralda1);
                // xml->addItem("esmeralda2",vlDescEsmeralda2);
                // xml->addItem("esmeralda3",vlDescEsmeralda3);
                // xml->addItem("rubi1",vlDescRubi1);
                // xml->addItem("rubi2",vlDescRubi2);
                // xml->addItem("rubi3",vlDescRubi3);
                // xml->addItem("diamante1",vlDescDiamante1);
                // xml->addItem("diamante2",vlDescDiamante2);
                // xml->addItem("diamante3",vlDescDiamante3);
                // xml->addItem("naoClassificado",vlDescNaoClassif);
            // xml->closeTag();
            
            // Aparelhos Disponiveis
            EXEC SQL DECLARE crsMtzApDescDisp CURSOR FOR
            SELECT   aparelho.idaparelho, (aparelho.dsmodelo || ' - ' || tipoaparelho.dstipoaparelho) as dsAparelho
                FROM retencao.aparelho aparelho ,
                     apoio.tipoaparelho tipoaparelho
               WHERE aparelho.idaparelho NOT IN (SELECT idaparelho
                                                   FROM retencao.matrizaparelhodesconto
                                                  WHERE iddesconto = :idDesconto)
                 AND aparelho.inativo = 1
                 AND tipoaparelho.idtipoaparelho = aparelho.idtipoaparelho
            ORDER BY (dsAparelho);
               
            EXEC SQL OPEN crsMtzApDescDisp;
            for(;;)
            {
                EXEC SQL 
                FETCH crsMtzApDescDisp INTO :idaparelho:i_idaparelho ,
                                            :dsmodelo:i_dsmodelo ;

                endOraStr( idaparelho );
                endOraStr( dsmodelo );

                xml->createTag("listaCadastroDesconto");
                    xml->addItem("idAparelho",(char*)idaparelho.arr);
                    xml->addItem("dsAparelho",(char*)dsmodelo.arr);
                xml->closeTag();

            }
            EXEC SQL CLOSE crsMtzApDescDisp;
        }
        else
        {
        ULOG( "Traz somente lista de aparelhos" );
        
            EXEC SQL WHENEVER NOT FOUND DO BREAK;
            EXEC SQL DECLARE crsMtzAp CURSOR FOR
            SELECT aparelho.idaparelho, 
                   (aparelho.dsmodelo || ' - ' || tipoaparelho.dstipoaparelho) as dsAparelho
              FROM 
                   retencao.aparelho aparelho ,
                   apoio.tipoaparelho tipoaparelho
             WHERE 
                   aparelho.inativo = 1
             AND tipoaparelho.idtipoaparelho = aparelho.idtipoaparelho
            ORDER BY (dsAparelho);
               
            EXEC SQL OPEN crsMtzAp;
            for(;;)
            {
                EXEC SQL 
                FETCH crsMtzAp INTO :idaparelho:i_idaparelho ,
                                        :dsmodelo:i_dsmodelo ;

                endOraStr( idaparelho );
                endOraStr( dsmodelo );

                xml->createTag("listaCadastroDesconto");
                    //xml->addItem("idDesconto",(char*)idDesconto.arr);
                    xml->addItem("idAparelho",(char*)idaparelho.arr);
                    xml->addItem("dsAparelho",(char*)dsmodelo.arr);
                    // xml->addItem("safira",vlDescSafira);
                    // xml->addItem("esmeralda1",vlDescEsmeralda1);
                    // xml->addItem("esmeralda2",vlDescEsmeralda2);
                    // xml->addItem("esmeralda3",vlDescEsmeralda3);
                    // xml->addItem("rubi1",vlDescRubi1);
                    // xml->addItem("rubi2",vlDescRubi2);
                    // xml->addItem("rubi3",vlDescRubi3);
                    // xml->addItem("diamante1",vlDescDiamante1);
                    // xml->addItem("diamante2",vlDescDiamante2);
                    // xml->addItem("diamante3",vlDescDiamante3);
                    // xml->addItem("naoClassificado",vlDescNaoClassif);
                xml->closeTag();

            }
            EXEC SQL CLOSE crsMtzAp;

        }
    }
    catch(...)
    {
        throw;
    }
    
  return 1;
}
