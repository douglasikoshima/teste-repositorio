#include <string>
#include "../../negocio/fidutil/include/retencao.hpp"

#include <string>
#include <list>
#include <iterator>
using namespace std;

typedef list<int> LISTA_ID;
list<int>::iterator itRegional;
list<int>::iterator itCliente;
list<int>::iterator itSegmento;
list<int>::iterator itTpLinha;
list<int>::iterator itDestino;
list<int>::iterator itGrupo;
list<int>::iterator itOfertas;
list<int>::iterator itAparelho;
list<int>::iterator itMatrizAparelho;
list<int>::iterator itRespostaUnidade;
list<int>::iterator itRU;


EXEC SQL BEGIN DECLARE SECTION;
   #define  NRO_MAX_REG_ORA     40000
EXEC SQL END DECLARE SECTION;


// Prototipos
void RemoveScriptFilhos( char * idUsuarioPrm, char * idScriptPrm, XMLGen * xml );
void HabilitacaoScript( char * idUsuarioPrm, char * idScriptPrm, char * inHabilitaPrm, XMLGen * xml );
int  InclusaoScript( char * idUsuarioPrm, char * idScriptPrm, char * nmScriptPrm, XMLGen *xml );
void InclusaoScriptGrupo( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pGrupo, XMLGen * xml );
void InclusaoScriptOferta( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pOfertas, XMLGen * xml );
void InclusaoScriptSegmentacao( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pSegmento, XMLGen * xml );
void InclusaoScriptTpLinha( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pTpLinha, XMLGen * xml );
void InclusaoScriptTpPessoa( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pCliente, XMLGen * xml );
void InclusaoScriptUFOper( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pRegional, XMLGen * xml );
void InclusaoScriptDestino( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pDestino, XMLGen * xml );
void InclusaoScriptIntencao( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pRespostaUnidade, XMLGen * xml );


//void BuscaUFOperadora(int idRegional,int * idUFOperadora);
void RemoveOfertas( int idOfertaPrm, XMLGen *xml );
void InclusaoOfertas( int idUsuarioPrm, char * nmOfertaPrm, char * sgClassifPrm, XMLGen *xml );
void AlteracaoOfertas( int idUsuarioPrm, int idOfertaPrm, char * nmOfertaPrm, char * sgClassifPrm, XMLGen *xml );
void BuscaRespostaUnidade( LISTA_ID * pRegional,
                           LISTA_ID * pRespostaUnidade, 
                           int idRespostaIntencao, 
                           LISTA_ID * pDestino, 
                           LISTA_ID * pTpLinha, 
                           LISTA_ID * pCliente );
void InsereMatrizOferta( int nrElementosPrm ,
                         int nrTransacaoPrm ,
                         int idUsuarioPrm,
                         int idRespostaIntencaoPrm ,
                         LISTA_ID * pDestino ,
                         int inFidelizacaoPrm ,
                         LISTA_ID * pGrupo, 
                         LISTA_ID * pSegmento,
                         LISTA_ID * pOfertas,
                         LISTA_ID * pRespostaUnidade,
                         XMLGen *xml );

void InclusaoMatrizAparelho( int idUsuarioPrm, 
                             LISTA_ID * pCliente, 
                             LISTA_ID * pAparelho, 
                             LISTA_ID * pSegmento, 
                             LISTA_ID * pRegional, 
                             LISTA_ID * pGrupo, 
                             XMLGen   * xml );

void RemovePlanos( int idPlanoPrm, XMLGen *xml );
int  InclusaoPlanos( int idUsuarioPrm, int idTipoServicoPrm , int *idPlanoPrm, char * nmPlanoPrm, char * cdServicoPrm, XMLGen *xml );
int  AlteracaoPlanos( int idPlanoPrm, int idTpServico, int idUsuarioPrm, char * nmPlanoPrm, char * cdServicoPrm, XMLGen *xml );
void RemocaoMatrizPlanos( int idPlanoPrm );
void InclusaoMatrizPlanos( int idUsuarioPrm, LISTA_ID * pRegional, LISTA_ID * pCliente, int idTipoLinhaPrm, int idPlanoPrm, XMLGen *xml );

void RemoveBonus( int idBonusPrm, XMLGen *xml );
void InclusaoBonus(  int idUsuarioPrm, int idTipoLinhaPrm, int  * idBonusPrm, char * vlBonusPrm, char * nmBonusPrm, int qtDiasPrm, int idUnidadeOfertaPrm, int idTpServicoPrm, char * cdServicoPrm, XMLGen *xml );
int  AlteracaoBonus(  int idBonusPrm, int idUsuarioPrm, int idTipoBonusPrm, int idTipoLinhaPrm, int qtDiasPrm, char * vlBonusPrm, char * nmBonusPrm, char * cdServicoPrm, XMLGen *xml );
void InclusaoMatrizBonus( int idUsuarioPrm, LISTA_ID * pRegional, LISTA_ID * pCliente, LISTA_ID * pSegmento, int idBonusPrm, int idTipoLinhaPrm, XMLGen *xml );

void RemocaoMatrizBonus( int idBonusPrm );

void RemoveMigracao( int idMigracaoPrm );

void InclusaoMigracao( int idUsuarioPrm ,
                       char * dsMigracaoPrm ,
                       char * vlBonusPrm ,
                       int    vlValidadePrm ,
                       int    idUFPrm ,
                       int    idClientePrm ,
                       int    idTipoLinhaPrm ,
                       XMLGen *xml );


int  AlteracaoMigracao( int idMigracaoPrm, int idUsuarioPrm, int vlBonusPrm, int vlValidadePrm, char * dsMigracaoPrm, XMLGen *xml );
void InclusaoMatrizMigracao( int idUsuarioPrm, int pRegional, int pCliente, int pTpLinha, int idMigracaoPrm, XMLGen *xml );
void RemocaoMatrizMigracao( int idMigracaoPrm );

void InclusaoMatrizScript( int idUsuarioPrm, 
                           LISTA_ID * pRegional, 
                           LISTA_ID * pCliente, 
                           LISTA_ID * pTpLinha, 
                           LISTA_ID * pDestino, 
                           int idIntencaoPrm, 
                           XMLGen *xml );

void InclusaoMatrizOfertaFidelizacao( int idMatrizOfertaPrm );


using namespace std;

void AlteracaoOfertas( int idUsuarioPrm, int idOfertaPrm, char * nmOfertaPrm, char * sgClassifPrm, XMLGen *xml )
{
	ULOG_START( "AlteracaoOfertas()" );

	EXEC SQL BEGIN DECLARE SECTION;
	    
	    int idOferta   = idOfertaPrm;
	    int idUsuario  = idUsuarioPrm;
		VARCHAR  nmOferta[256];
		VARCHAR  sgClassif[5];
		int ctRegistros;
		short i_ctRegistros = -1;
		
	EXEC SQL END DECLARE SECTION;

	strToOra( nmOferta,nmOfertaPrm );
	strToOra( sgClassif,sgClassifPrm );
	
	ULOG( "idOferta  [%d]",idOferta );
	ULOG( "nmOferta  [%s]",(char *)nmOferta.arr );
	ULOG( "sgClassif [%s]",(char *)sgClassif.arr );

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT OFERTA.IDUNIDADEOFERTA INTO :ctRegistros:i_ctRegistros FROM RETENCAO.OFERTA OFERTA WHERE OFERTA.INATIVO = 1 AND TRIM(UPPER(OFERTA.NMOFERTA)) = TRIM(UPPER(:nmOferta));
		if ( i_ctRegistros != -1 )
		{
			if ( ctRegistros != idOferta )
			{
				xml->addItem( "msgError","O nome da oferta já existe cadastrado no sistema, por favor altere o nome para prosseguir na alteração." );
				xml->addItem( "codError",1 );
				ULOG_END( "AlteracaoOfertas()" );
				return;
			}
		}

		EXEC SQL
		UPDATE RETENCAO.OFERTA 
		SET NMOFERTA           = :nmOferta ,
		    SGCLASSIFICACAO    = :sgClassif ,
		    IDUSUARIOALTERACAO = :idUsuario ,
			DTULTIMAALTERACAO  = SYSDATE
	    WHERE
	        IDUNIDADEOFERTA = :idOferta;

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "AlteracaoOfertas()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao atualizar ofertas." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoOfertas()" );
		throw;
	}

}



void RemoveOfertas( int idOfertaPrm, XMLGen *xml )
{
	ULOG_START( "RemoveOfertas()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int  idOferta = idOfertaPrm;
		int  ctRegistros;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Removendo idOferta [%d]",idOferta );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		

		EXEC SQL
		SELECT COUNT(1) INTO :ctRegistros 
		FROM RETENCAO.OFERTAGRUPO OFERTAGRUPO 
		WHERE 1 = OFERTAGRUPO.INATIVO 
		AND OFERTAGRUPO.IDOFERTA = :idOferta;
		
		if ( ctRegistros > 0 )
		{
			xml->addItem( "msgError","Para excluir esta oferta é necessário remover da matriz de ofertas." );
			xml->addItem( "codError",1 );
			ULOG_END( "RemoveOfertas()" );
			return;
		}
               
		EXEC SQL
		UPDATE RETENCAO.OFERTA OFERTA SET OFERTA.INATIVO = 0 WHERE OFERTA.IDUNIDADEOFERTA = :idOferta;
		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "RemoveOfertas()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na remoção de ofertas." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: RemoveOfertas()" );
		throw;
	}

}



void InclusaoOfertas( int idUsuarioPrm, char * nmOfertaPrm, char * sgClassifPrm, XMLGen *xml )
{
	ULOG_START( "InclusaoOfertas()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario = idUsuarioPrm;
		VARCHAR  nmOferta[256];
		VARCHAR  sgClassif[5];
		int ctRegistros;
	EXEC SQL END DECLARE SECTION;

	strToOra( nmOferta,nmOfertaPrm );
	strToOra( sgClassif,sgClassifPrm );
	
	ULOG( "Incluindo idUsuario [%d], nmOferta[%s], sgClassif[%s]",idUsuario,(char*)nmOferta.arr,(char*)sgClassif.arr );

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT COUNT(1) INTO :ctRegistros FROM RETENCAO.OFERTA OFERTA WHERE OFERTA.INATIVO = 1 AND TRIM(UPPER(OFERTA.NMOFERTA)) = TRIM(UPPER(:nmOferta));
		if ( ctRegistros > 0 )
		{
			xml->addItem( "msgError","O nome da oferta já existe cadastrado no sistema, por favor altere o nome para prosseguir na gravação." );
			xml->addItem( "codError",1 );
			ULOG_END( "InclusaoOfertas()" );
			return;
		}
   			
		EXEC SQL
		INSERT INTO RETENCAO.OFERTA 
		(
			NMOFERTA ,
			IDPESSOAUSUARIOINCLUSAO ,
			DTINCLUSAO ,
			IDPESSOAUSUARIOALTERACAO ,
			DTALTERACAO ,
			INATIVO ,
			IDUNIDADEOFERTA ,
			SQORDEMOFERTA ,
			IDUSUARIOALTERACAO ,
			DTULTIMAALTERACAO ,
			SGCLASSIFICACAO
		)
		VALUES
		(
		   :nmOferta ,
		   :idUsuario ,
		    SYSDATE ,
		   :idUsuario ,
		    SYSDATE ,
		    1 ,
		    OfertaSQ.NextVal ,
		    1 ,
		   :idUsuario ,
		    SYSDATE ,
		   :sgClassif		    
		);
		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoOfertas()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar ofertas." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoOfertas()" );
		throw;
	}

}



void RemovePlanos( int idPlanoPrm, XMLGen *xml )
{
	ULOG_START( "RemovePlanos()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idPlano = idPlanoPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Removendo idPlano [%d]",idPlano );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		UPDATE RETENCAO.PLANO 
		SET INATIVO = 0
		WHERE IDPLANO = :idPlano;

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );

		ULOG_END( "RemovePlanos()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao remover plano." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: RemovePlanos()" );
		throw;
	}

}



int  AlteracaoPlanos( int idPlanoPrm ,
                      int idTpServicoPrm ,
                      int idUsuarioPrm , 
                      char * nmPlanoPrm , 
                      char * cdServicoPrm , 
                      XMLGen *xml )
{
	ULOG_START( "AlteracaoPlanos()" );

	EXEC SQL BEGIN DECLARE SECTION;
	    int idPlano       = idPlanoPrm;
	    int idUsuario     = idUsuarioPrm;
	    int idTpServico   = idTpServicoPrm;
	    int ctRegistros = 0;
		VARCHAR  nmPlano[256];
		VARCHAR  cdServico[128];
	EXEC SQL END DECLARE SECTION;

	strToOra( nmPlano  , nmPlanoPrm );
	strToOra( cdServico, cdServicoPrm );
	
	ULOG( "idPlano       [%d]", idPlano );
	ULOG( "idUsuario     [%d]", idUsuario );
	ULOG( "nmPlano       [%s]", (char *)nmPlano.arr );
	ULOG( "cdServico     [%s]", (char *)cdServico.arr );

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT 
		   COUNT(1) 
		INTO
		   :ctRegistros
		FROM 
		   RETENCAO.PLANO PLANO 
		WHERE
		   PLANO.IDPLANO <> :idPlano
		AND
		   TRIM(UPPER(PLANO.NMPLANO)) = TRIM(UPPER(:nmPlano));

		ULOG( "ctRegistros [%d]",ctRegistros);
		
		if ( ctRegistros > 0 )
		{
			xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
			xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
				xml->addItem( "msgError","O nome do plano já existe cadastrado no sistema, por favor altere o nome para prosseguir na alteração." );
				xml->addItem( "codError",1 );
			xml->closeTag();
			ULOG_END( "AlteracaoPlanos()" );
			return -1;
		}

		EXEC SQL
		UPDATE RETENCAO.PLANO 
			SET NMPLANO = :nmPlano ,
				IDTIPOSERVICO = :idTpServico ,
				DTALTERACAO = SYSDATE ,
				IDPESSOAUSUARIOALTERACAO = :idUsuario ,
				IDUSUARIOALTERACAO = :idUsuario ,
				DTULTIMAALTERACAO = SYSDATE ,
				CDSERVICO = :cdServico
		    WHERE
		        IDPLANO = :idPlano;

		ULOG_END( "AlteracaoPlanos()" );
		return 0;
	}
	catch(...)
	{
		xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
		xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
			xml->addItem( "msgError","Falha ao atualizar plano." );
			xml->addItem( "codError",1 );
		xml->closeTag();
		ULOGE( "*** SAIDA ANORMAL: AlteracaoPlanos()" );
		throw;
	}

}



void RemoveBonus( int idBonusPrm, XMLGen *xml )
{
	ULOG_START( "RemoveBonus()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idBonus = idBonusPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Removendo idBonus [%d]",idBonus );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		EXEC SQL
		UPDATE RETENCAO.BONUS 
		SET INATIVO = 0
		WHERE IDBONUS = :idBonus;

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "RemoveBonus()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na remoção de bonus." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: RemoveBonus()" );
		throw;
	}

}



int InclusaoPlanos( int idUsuarioPrm , 
                     int idTipoServicoPrm ,
                     int  * idPlanoPrm ,
                     char * nmPlanoPrm , 
                     char * cdServicoPrm , 
                     XMLGen *xml )
{
	ULOG_START( "InclusaoPlanos()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario     = idUsuarioPrm;
		int      idTipoServico = idTipoServicoPrm;
		int      ctRegistros = 0;
		int      idPlano;
		VARCHAR  nmPlano[512];
		VARCHAR  cdServico[512];
	EXEC SQL END DECLARE SECTION;
	
	strToOra( nmPlano  ,nmPlanoPrm );
	strToOra( cdServico,cdServicoPrm );
	
	ULOG( "Incluindo idUsuario [%d] ",idUsuario );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		EXEC SQL
		SELECT 
		  COUNT(1) 
		INTO :ctRegistros 
		FROM 
		  RETENCAO.PLANO PLANO 
		WHERE 
		  PLANO.INATIVO = 1 
		AND 
		  TRIM(UPPER(PLANO.NMPLANO)) = TRIM(UPPER(:nmPlano));

		if ( ctRegistros > 0 )
		{
			xml->createTag("FidelizacaoVO");
			xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
				xml->addItem( "msgError","O nome do plano já existe cadastrado no sistema, por favor altere o nome para prosseguir na inclusão." );
				xml->addItem( "codError",1 );
		    xml->closeTag();
			ULOG_END( "*** ERRO: InclusaoPlanos()" );
			return -1;
		}

		EXEC SQL
		SELECT PLANOSQ.NEXTVAL INTO :idPlano FROM DUAL;

        ULOG( "Obteve idPlano [%d]",idPlano );

		EXEC SQL
		INSERT INTO RETENCAO.PLANO 
		(
			IDPLANO ,
			IDTIPOSERVICO ,
			NMPLANO ,
			DTINCLUSAO ,
			DTALTERACAO ,
			IDPESSOAUSUARIOINCLUSAO ,
			IDPESSOAUSUARIOALTERACAO ,
			IDUSUARIOALTERACAO ,
			DTULTIMAALTERACAO ,
			CDSERVICO 
		)
		VALUES
		(
		   :idPlano ,
		   :idTipoServico ,
		   :nmPlano ,
		    SYSDATE ,
		    SYSDATE ,
		   :idUsuario ,
		   :idUsuario ,
		   :idUsuario ,
		    SYSDATE ,
		   :cdServico 
		);

		*idPlanoPrm = idPlano;

        ULOG( "Ajustando idPlano [%d]",*idPlanoPrm );

		ULOG_END( "InclusaoPlanos()" );
		return 0;
	}
	catch(...)
	{
		xml->createTag("FidelizacaoVO");
		xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
			xml->addItem( "msgError","Falha na inclusão de plano." );
			xml->addItem( "codError",1 );
	    xml->closeTag();

		ULOGE( "*** SAIDA ANORMAL: InclusaoPlanos()" );
		throw;
	}

}



void InclusaoMatrizPlanos( int idUsuarioPrm , 
                           LISTA_ID * pRegional, 
                           LISTA_ID * pCliente, 
                           int idTipoLinhaPrm ,
                           int idPlanoPrm , 
                           XMLGen *xml )
{
	ULOG_START( "InclusaoMatrizPlanos()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario[NRO_MAX_REG_ORA];
		int      idTipoLinha[NRO_MAX_REG_ORA];
		int      idPlano[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
		int      idUFOperadora[NRO_MAX_REG_ORA];
		int      idRegional;
		int      idTipoCliente[NRO_MAX_REG_ORA];
		int      idMatrizPlanos[NRO_MAX_REG_ORA];
	EXEC SQL END DECLARE SECTION;

	try
	{

        ULOG( "idPlano [%d]",idPlanoPrm );
        
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ )
		{
			for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ )
			{
				EXEC SQL
				SELECT MATRIZPLANOSSQ.NEXTVAL INTO :idMatrizPlanos[nrLinhas-1] FROM DUAL;
				
				idUsuario[nrLinhas-1] = idUsuarioPrm;
				idRegional = *itRegional;
				idTipoCliente[nrLinhas-1] = *itCliente;
				idPlano[nrLinhas-1] = idPlanoPrm;
				idTipoLinha[nrLinhas-1] = idTipoLinhaPrm;
				
				idUFOperadora[nrLinhas-1] = *itRegional;

				if ( nrLinhas == NRO_MAX_REG_ORA )
				{
					EXEC SQL FOR :nrLinhas
					INSERT INTO RETENCAO.MATRIZPLANOS 
					(
						IDMATRIZPLANOS ,
						IDUFOPERADORA ,
						IDTIPOPESSOA ,
						IDPLANO ,
						IDTIPOLINHA ,
						IDUSUARIOALTERACAO ,
						DTALTERACAO
						 
					)
					VALUES
					(
					   :idMatrizPlanos ,
					   :idUFOperadora ,
					   :idTipoCliente ,
					   :idPlano ,
					   :idTipoLinha ,
					   :idUsuario ,
					   SYSDATE
					);
					nrLinhas=1;
				}
				else
					nrLinhas++;
			}
		}

		if ( nrLinhas > 0 )
		{
			if ( nrLinhas > 1 )
				nrLinhas--;
			EXEC SQL FOR :nrLinhas
			INSERT INTO RETENCAO.MATRIZPLANOS 
			(
				IDMATRIZPLANOS ,
				IDUFOPERADORA ,
				IDTIPOPESSOA ,
				IDPLANO ,
				IDTIPOLINHA ,
				IDUSUARIOALTERACAO ,
				DTALTERACAO
				 
			)
			VALUES
			(
			   :idMatrizPlanos ,
			   :idUFOperadora ,
			   :idTipoCliente ,
			   :idPlano ,
			   :idTipoLinha ,
			   :idUsuario ,
			   SYSDATE
			);
		}
		

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoMatrizPlanos()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na inclusão de Matriz de planos." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizPlanos()" );
		throw;
	}
}



void RemocaoMatrizPlanos( int idPlanoPrm )
{
	ULOG_START( "RemocaoMatrizPlanos()" );


	EXEC SQL BEGIN DECLARE SECTION;
		int      idPlano = idPlanoPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Excluindo Matriz de Planos idPlano [%d]",idPlano );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		DELETE FROM RETENCAO.MATRIZPLANOS MATRIZPLANOS WHERE MATRIZPLANOS.IDPLANO = :idPlano;

		ULOG_END( "RemocaoMatrizPlanos()" );
	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: RemocaoMatrizPlanos()" );
		throw;
	}

}



void InclusaoBonus(  int idUsuarioPrm ,
                     int  * idBonusPrm ,
                     char * vlBonusPrm ,
                     char * nmBonusPrm ,
                     int qtDiasPrm ,
                     int idUnidadeOfertaPrm ,
                     int idTpServicoPrm ,
                     char * cdServicoPrm , 
                     XMLGen *xml )
{
	ULOG_START( "InclusaoBonus()" );


	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario   = idUsuarioPrm;
		int      idTpServico = idTpServicoPrm;
		int      idBonus;
		int      ctRegistros;
		int      qtDias = qtDiasPrm;
		int      idUnidadeOferta = idUnidadeOfertaPrm;
		VARCHAR  vlBonus[256];
		VARCHAR  nmBonus[256];
		VARCHAR  cdServico[126];
	EXEC SQL END DECLARE SECTION;
	

	strToOra( vlBonus  ,vlBonusPrm );
	strToOra( nmBonus  ,nmBonusPrm );
	strToOra( cdServico,cdServicoPrm );
	
	ULOG( "Incluindo idUsuario [%d] ",idUsuario );

	try
	{

		if ( idTpServico != 1 && idTpServico != 2 ) idTpServico = 1;
			
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT COUNT(1) INTO :ctRegistros FROM RETENCAO.BONUS BONUS WHERE TRIM(UPPER(BONUS.DSBONUS)) = TRIM(UPPER(:nmBonus));
		if ( ctRegistros > 0 )
		{
			xml->addItem( "msgError","O nome do bonus já existe cadastrado no sistema, por favor altere o nome para prosseguir na inclusão." );
			xml->addItem( "codError",1 );
			ULOG_END( "InclusaoBonus()" );
			return;
		}

		EXEC SQL
		SELECT BONUSSQ.NEXTVAL INTO :idBonus FROM DUAL;

		EXEC SQL
		INSERT INTO RETENCAO.BONUS 
		(
		    IDTIPOLINHA ,
		    IDTIPOSERVICO ,
			IDBONUS ,
			DSBONUS ,
			NRVALIDADE ,
			IDUNIDADEOFERTA ,
			VLBONUS ,
			CDSERVICO ,
			IDUSUARIOALTERACAO ,
			DTALTERACAO ,
			INATIVO 
		)
		VALUES
		(
		   1 ,
		   :idTpServico ,
		   :idBonus ,
		   :nmBonus ,
		   :qtDias ,
		   :idUnidadeOferta ,
		   :vlBonus ,
		   :cdServico ,
		   :idUsuario ,
		   SYSDATE ,
		   1
		);

		*idBonusPrm = idBonus;
		
		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoBonus()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na inclusão de bonus." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoBonus()" );
		throw;
	}

}



int  AlteracaoBonus(  int    idBonusPrm ,
                      int    idUsuarioPrm , 
                      int    idTipoBonusPrm ,
                      int    qtDiasPrm ,
                      char * vlBonusPrm ,
                      char * nmBonusPrm , 
                      char * cdServicoPrm , 
                      XMLGen *xml )
{
	ULOG_START( "AlteracaoBonus()" );

	EXEC SQL BEGIN DECLARE SECTION;
	    int idBonus       = idBonusPrm;
	    int idUsuario     = idUsuarioPrm;
	    int idTipoBonus   = idTipoBonusPrm;
	    int qtDias        = qtDiasPrm;
	    int ctRegistros;
		VARCHAR  nmBonus[256];
		VARCHAR  vlBonus[256];
		VARCHAR  cdServico[128];
	EXEC SQL END DECLARE SECTION;

	strToOra( nmBonus  , nmBonusPrm );
	strToOra( vlBonus  , vlBonusPrm );
	strToOra( cdServico, cdServicoPrm );
	
	ULOG( "idBonus       [%d]", idBonus );
	ULOG( "idUsuario     [%d]", idUsuario );
	ULOG( "idTipoBonus   [%d]", idTipoBonus );
	ULOG( "qtDias        [%d]", qtDias );
	ULOG( "nmBonus       [%s]", (char *)nmBonus.arr );
	ULOG( "vlBonus       [%s]", (char *)vlBonus.arr );
	ULOG( "cdServico     [%s]", (char *)cdServico.arr );

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT 
		   COUNT(1) 
		INTO 
		   :ctRegistros 
		FROM 
		   RETENCAO.BONUS BONUS 
		WHERE 
		   BONUS.IDBONUS <> :idBonus
		AND
		   TRIM(UPPER(BONUS.DSBONUS)) = TRIM(UPPER(:nmBonus));

		if ( ctRegistros > 0 )
		{
			xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
			xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
				xml->addItem( "msgError","O nome do bonus já existe cadastrado no sistema, por favor altere o nome para prosseguir na alteração." );
				xml->addItem( "codError",1 );
			xml->closeTag();
			ULOG_END( "AlteracaoBonus()" );
			return -1;
		}

		EXEC SQL
		UPDATE RETENCAO.BONUS 
		SET	DSBONUS  = :nmBonus ,
			NRVALIDADE = :qtDias ,
			IDUNIDADEOFERTA = :idTipoBonus ,
			VLBONUS = :vlBonus ,
			CDSERVICO = :cdServico
	    WHERE
	        IDBONUS = :idBonus;

		ULOG_END( "AlteracaoBonus()" );
		return 0;
	}
	catch(...)
	{
		xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
		xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
			xml->addItem( "msgError","Falha na atualização de bonus." );
			xml->addItem( "codError",1 );
		xml->closeTag();

		ULOGE( "*** SAIDA ANORMAL: AlteracaoBonus()" );
		throw;
	}

}



void InclusaoMatrizBonus( int idUsuarioPrm , 
                          LISTA_ID * pRegional, 
                          LISTA_ID * pCliente, 
                          LISTA_ID * pSegmento, 
                          int idBonusPrm , 
                          int idTpLinhaPrm ,
                          XMLGen *xml )
{
	ULOG_START( "InclusaoMatrizBonus()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      nrLinhas = 1;
		/*
		int      idUsuario[NRO_MAX_REG_ORA];
		int      idUFOperadora[NRO_MAX_REG_ORA];
		int      idTpLinha[NRO_MAX_REG_ORA];
		int      idTipoCliente[NRO_MAX_REG_ORA];
		int      idSegmentacao[NRO_MAX_REG_ORA];
		int      idBonus[NRO_MAX_REG_ORA];
		int      idMatrizBonus[NRO_MAX_REG_ORA];
		*/
		int      idUsuario;
		int      idUFOperadora;
		int      idTpLinha;
		int      idTipoCliente;
		int      idSegmentacao;
		int      idBonus;
		//int      idMatrizBonus[NRO_MAX_REG_ORA];

	EXEC SQL END DECLARE SECTION;

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ )
		{
			for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ )
			{
				for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ )
				{
					
					idUFOperadora = *itRegional;
					idUsuario = idUsuarioPrm;
					idTipoCliente = *itCliente;
					idSegmentacao = *itSegmento;
					idBonus = idBonusPrm;
					idTpLinha = idTpLinhaPrm;

					EXEC SQL
					UPDATE RETENCAO.MATRIZBONUS
					SET INATIVO = 1
					WHERE IDUFOPERADORA = :idUFOperadora
					AND IDTIPOPESSOA = :idTipoCliente
					AND IDBONUS = :idBonus
					AND IDSEGMENTACAO = :idSegmentacao
					AND IDTIPOLINHA = :idTpLinha;
		
			        if (sqlca.sqlerrd[2] == 0)
			        {
						EXEC SQL
						INSERT INTO RETENCAO.MATRIZBONUS 
						(
							IDMATRIZBONUS ,
							IDBONUS ,
							IDUFOPERADORA ,
							IDTIPOPESSOA ,
							IDSEGMENTACAO ,
							IDTIPOLINHA ,
							IDUSUARIOALTERACAO ,
							DTALTERACAO ,
							INATIVO
						)
						VALUES
						(
						   MATRIZBONUSSQ.NEXTVAL ,
						   :idBonus ,
						   :idUFOperadora ,
						   :idTipoCliente ,
						   :idSegmentacao ,
						   :idTpLinha ,
						   :idUsuario ,
						   SYSDATE ,
						   1
						);
					}


					/*
					
					idUFOperadora[nrLinhas-1] = *itRegional;
					idUsuario[nrLinhas-1] = idUsuarioPrm;
					idTipoCliente[nrLinhas-1] = *itCliente;
					idSegmentacao[nrLinhas-1] = *itSegmento;
					idBonus[nrLinhas-1] = idBonusPrm;
					idTpLinha[nrLinhas-1]= idTpLinhaPrm;
					
					EXEC SQL 
					SELECT MATRIZBONUSSQ.NEXTVAL INTO :idMatrizBonus[nrLinhas-1] FROM DUAL;
					
					if ( nrLinhas == NRO_MAX_REG_ORA )
					{
						EXEC SQL FOR :nrLinhas
						INSERT INTO RETENCAO.MATRIZBONUS 
						(
							IDMATRIZBONUS ,
							IDBONUS ,
							IDUFOPERADORA ,
							IDTIPOPESSOA ,
							IDSEGMENTACAO ,
							IDTIPOLINHA ,
							IDUSUARIOALTERACAO ,
							DTALTERACAO ,
							INATIVO
						)
						VALUES
						(
						   :idMatrizBonus ,
						   :idBonus ,
						   :idUFOperadora ,
						   :idTipoCliente ,
						   :idSegmentacao ,
						   :idTpLinha ,
						   :idUsuario ,
						   SYSDATE ,
						   1
						);
						nrLinhas=1;
					}
					else
					   nrLinhas++;
				    
				    //ULOG( "nrLinhas [%d]",nrLinhas );
				    
				    */
					
				}
			}
		}
		
		/*
		
		if ( nrLinhas > 0 )
		{
			if ( nrLinhas > 1 )
				nrLinhas--;

			EXEC SQL FOR :nrLinhas
			UPDATE RETENCAO.MATRIZBONUS
			SET INATIVO = 1
			WHERE IDUFOPERADORA = :idUFOperadora
			AND IDTIPOPESSOA = :idTipoCliente
			AND IDBONUS = :idBonus
			AND IDSEGMENTACAO = :idSegmentacao
			AND IDTIPOLINHA = :idTpLinha;

	        if (sqlca.sqlerrd[2] == 0)
	        {
				EXEC SQL FOR :nrLinhas
				INSERT INTO RETENCAO.MATRIZBONUS 
				(
					IDMATRIZBONUS ,
					IDBONUS ,
					IDUFOPERADORA ,
					IDTIPOPESSOA ,
					IDSEGMENTACAO ,
					IDTIPOLINHA ,
					IDUSUARIOALTERACAO ,
					DTALTERACAO ,
					INATIVO
				)
				VALUES
				(
				   :idMatrizBonus ,
				   :idBonus ,
				   :idUFOperadora ,
				   :idTipoCliente ,
				   :idSegmentacao ,
				   :idTpLinha ,
				   :idUsuario ,
				   SYSDATE ,
				   1
				);
			}
		}
		
		*/

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoMatrizBonus()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na gravação de Matriz de Bonus." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizBonus()" );
		throw;
	}

}



void RemocaoMatrizBonus( int idBonusPrm )
{
	ULOG_START( "RemocaoMatrizBonus()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idBonus = idBonusPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Excluindo Matriz de Bonus idBonus [%d]",idBonus );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		/*
		EXEC SQL
		DELETE FROM RETENCAO.MATRIZBONUS 
		WHERE IDBONUS = :idBonus;
		*/
		
		EXEC SQL
		UPDATE RETENCAO.MATRIZBONUS
		SET INATIVO = 0
		WHERE IDBONUS = :idBonus;	

		ULOG_END( "RemocaoMatrizBonus()" );
	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: RemocaoMatrizBonus()" );
		throw;
	}

}



void RemoveMigracao( int idMigracaoPrm, XMLGen *xml  )
{
	ULOG_START( "RemoveMigracao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idMigracao = idMigracaoPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Removendo idMigracao [%d]",idMigracao );
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		UPDATE RETENCAO.MIGRACAO
		SET INATIVO = 0
		WHERE IDMIGRACAO = :idMigracao;

		xml->addItem( "msgError","Sucesso na Execução" );
		xml->addItem( "codError",0 );
		ULOG_END( "RemoveMigracao()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao remover migração." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: RemoveMigracao()" );
		throw;
	}

}



void InclusaoMigracao( int idUsuarioPrm ,
                       char * dsMigracaoPrm ,
                       char * vlBonusPrm ,
                       int    vlValidadePrm ,
                       int    idUFPrm ,
                       int    idClientePrm ,
                       int    idTipoLinhaPrm ,
                       XMLGen *xml )
{
	ULOG_START( "InclusaoMigracao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario    = idUsuarioPrm;
		VARCHAR  Bonus[64];
		VARCHAR  vlBonus[64];
		int      vlValidade   = vlValidadePrm;
		int      idUF = idUFPrm;
		int      idCliente = idClientePrm;
		int      idTipoLinha = idTipoLinhaPrm;
		int      idMigracao;
		int      ctRegistros;
		VARCHAR  dsMigracao[256];
	EXEC SQL END DECLARE SECTION;

	strToOra( Bonus, vlBonusPrm );
	strToOra( dsMigracao, dsMigracaoPrm );
	
	ULOG( "idUsuario  [%d] ",idUsuario );
	ULOG( "vlValidade [%d] ",vlValidade );
	ULOG( "vlBonus    [%s] ",(char *)Bonus.arr );
	ULOG( "dsMigracao [%s] ",(char *)dsMigracao.arr );
	
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
	    	
    	EXEC SQL
		SELECT COUNT(1) INTO :ctRegistros FROM RETENCAO.MIGRACAO MIGRACAO WHERE MIGRACAO.INATIVO = 1 AND TRIM(UPPER(MIGRACAO.DSMIGRACAO)) = TRIM(UPPER(:dsMigracao));
		if ( ctRegistros > 0 )
		{
			xml->addItem( "msgError","O nome da migração já existe cadastrado no sistema, por favor altere o nome para prosseguir na inclusão." );
			xml->addItem( "codError",1 );
			ULOG_END( "InclusaoMigracao()" );
			return;
		}

		EXEC SQL
	    SELECT MIGRACAOSQ.NEXTVAL INTO :idMigracao FROM DUAL;

		EXEC SQL
		INSERT INTO RETENCAO.MIGRACAO 
		(
			IDMIGRACAO ,
			DSMIGRACAO ,
			VLBONUS ,
			NRVALIDADE ,
			IDUSUARIOALTERACAO ,
			INATIVO ,
			DTALTERACAO 
		)
		VALUES
		(
		   :idMigracao ,
		   :dsMigracao ,
		   TO_NUMBER(:Bonus,'999999999D99') ,
		   :vlValidade ,
		   :idUsuario ,
		   1 ,
		   SYSDATE
		);

		EXEC SQL
		UPDATE RETENCAO.MATRIZMIGRACAO 
		SET INATIVO = 1
		WHERE IDUFOPERADORA = :idUF
		AND   IDTIPOPESSOA  = :idCliente
		AND   IDTIPOLINHA   = :idTipoLinha
		AND   IDMIGRACAO    = :idMigracao;
	    
        if (sqlca.sqlerrd[2] == 0)
        {
			EXEC SQL
			INSERT INTO RETENCAO.MATRIZMIGRACAO 
			(
				IDMATRIZMIGRACAO ,
				IDUFOPERADORA ,
				IDTIPOPESSOA ,
				IDTIPOLINHA ,
				IDMIGRACAO ,
				IDUSUARIOALTERACAO ,
				INATIVO ,
				DTALTERACAO
			)
			VALUES
			(
			   RETENCAO.MATRIZMIGRACAOSQ.NEXTVAL ,
			   :idUF ,
			   :idCliente ,
			   :idTipoLinha ,
			   :idMigracao ,
			   :idUsuario ,
			   1 ,
			   SYSDATE
			);
		}

		ULOG_END( "InclusaoMigracao()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao cadastrar migração." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMigracao()" );
		throw;
	}

}



void RemocaoMatrizMigracao( int idMigracaoPrm )
{
	ULOG_START( "RemocaoMatrizMigracao()" );


	EXEC SQL BEGIN DECLARE SECTION;
		int      idMigracao = idMigracaoPrm;
	EXEC SQL END DECLARE SECTION;

	ULOG( "Excluindo Matriz de Migracao idMigracao [%d]",idMigracao );
	try
	{
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		EXEC SQL
		UPDATE RETENCAO.MATRIZMIGRACAO 
		SET INATIVO = 0
		WHERE MATRIZMIGRACAO.IDMIGRACAO = :idMigracao;
		ULOG_END( "RemocaoMatrizMigracao()" );
	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: RemocaoMatrizMigracao()" );
		throw;
	}

}



void InclusaoMatrizMigracao( int idUsuarioPrm , 
                             int idUFPrm, 
                             int idClientePrm, 
                             int idTipoLinhaPrm, 
                             int idMigracaoPrm , 
                             XMLGen *xml )
{
	ULOG_START( "InclusaoMatrizMigracao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idUsuario = idUsuarioPrm;
		int      idUFOperadora = idUFPrm;
		int      idRegional = idUFPrm;
		int      idTipoCliente = idClientePrm;
		int      idTipoLinha = idTipoLinhaPrm;
		int      idMigracao = idMigracaoPrm;
	EXEC SQL END DECLARE SECTION;
	
	try
	{
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

		EXEC SQL WHENEVER NOT FOUND CONTINUE;
				   	
		   	
		EXEC SQL
		UPDATE RETENCAO.MATRIZMIGRACAO 
		SET INATIVO = 1
		WHERE IDUFOPERADORA = :idRegional
		AND   IDTIPOPESSOA  = :idTipoCliente
		AND   IDTIPOLINHA   = :idTipoLinha
		AND   IDMIGRACAO    = :idMigracao;
	    
        if (sqlca.sqlerrd[2] == 0)
        {
			EXEC SQL
			INSERT INTO RETENCAO.MATRIZMIGRACAO 
			(
				IDMATRIZMIGRACAO ,
				IDUFOPERADORA ,
				IDTIPOPESSOA ,
				IDTIPOLINHA ,
				IDMIGRACAO ,
				IDUSUARIOALTERACAO ,
				INATIVO ,
				DTALTERACAO
			)
			VALUES
			(
			   RETENCAO.MATRIZMIGRACAOSQ.NEXTVAL ,
			   :idRegional ,
			   :idTipoCliente ,
			   :idTipoLinha ,
			   :idMigracao ,
			   :idUsuario ,
			   1 ,
			   SYSDATE
			);
		}
					

		
		xml->addItem( "msgError","Sucesso na execução." );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoMatrizMigracao()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha na gravação de matriz de gravação." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizMigracao()" );
		throw;
	}
}



int AlteracaoMigracao( int idMigracaoPrm ,
                        int idUsuarioPrm , 
                        char * vlBonusPrm ,
                        int vlValidadePrm ,
                        char * dsMigracaoPrm , 
                        XMLGen *xml )
{
	ULOG_START( "AlteracaoMigracao()" );

	EXEC SQL BEGIN DECLARE SECTION;
	    int idMigracao = idMigracaoPrm;
	    int idUsuario  = idUsuarioPrm;
	    VARCHAR vlBonus[256];
	    int vlValidade = vlValidadePrm;
	    int ctRegistros;
	    short i_ctRegistros = -1;
		VARCHAR  dsMigracao[256];
	EXEC SQL END DECLARE SECTION;

	strToOra( vlBonus, vlBonusPrm );
	strToOra( dsMigracao, dsMigracaoPrm );
	
	ULOG( "idMigracao [%d]", idMigracao );
	ULOG( "idUsuario  [%d]", idUsuario );
	ULOG( "vlBonus    [%s]", (char *)vlBonus.arr );
	ULOG( "vlValidade [%d]", vlValidade );
	ULOG( "dsMigracao [%s]", (char *)dsMigracao.arr );

	try
	{
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
		SELECT 
		   COUNT(1) 
		INTO 
		   :ctRegistros 
		FROM 
		   RETENCAO.MIGRACAO MIGRACAO 
		WHERE
		   MIGRACAO.IDMIGRACAO <> :idMigracao
		AND
		   MIGRACAO.INATIVO = 1
		AND
		   TRIM(UPPER(MIGRACAO.DSMIGRACAO)) = TRIM(UPPER(:dsMigracao));

		if ( ctRegistros > 0 )
		{
			xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
			xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
				xml->addItem( "msgError","O nome da migração já existe cadastrado no sistema, por favor altere o nome para prosseguir na alteração." );
				xml->addItem( "codError",1 );
			xml->closeTag();
			ULOG_END( "AlteracaoMigracao()" );
			return -1;
		}

		EXEC SQL
		UPDATE RETENCAO.MIGRACAO 
		SET	DSMIGRACAO  = :dsMigracao ,
			VLBONUS     = :vlBonus ,
			NRVALIDADE  = :vlValidade 
	    WHERE
	        IDMIGRACAO = :idMigracao;

		ULOG_END( "AlteracaoMigracao()" );
		return 0;
	}
	catch(...)
	{
		xml->createTag("FidelizacaoVO");  // Servico acionado para trazer os filtros combo
		xml->addProp("xmlns","fidelizacao.fo.vivo.com.br/vo");
			xml->addItem( "msgError","Falha na alteração de migração." );
			xml->addItem( "codError",1 );
		xml->closeTag();
		ULOGE( "*** SAIDA ANORMAL: AlteracaoMigracao()" );
		throw;
	}

}



void InclusaoMatrizScript( int idUsuarioPrm, 
                           LISTA_ID * pRegional, 
                           LISTA_ID * pCliente, 
                           LISTA_ID * pTpLinha, 
                           LISTA_ID * pDestino, 
                           int idIntencaoPrm, 
                           XMLGen *xml )
{
	ULOG_START( "InclusaoMatrizScript()" );

	EXEC SQL BEGIN DECLARE SECTION;
	    int      nrLinhas = 1;
		int      idUsuario[NRO_MAX_REG_ORA];
		int      idIntencao[NRO_MAX_REG_ORA];
		int      idUFOperadora[NRO_MAX_REG_ORA];
		int      idTipoCliente[NRO_MAX_REG_ORA];
		int      idTipoLinha[NRO_MAX_REG_ORA];
		int      idDestino[NRO_MAX_REG_ORA];
		int      idRU[NRO_MAX_REG_ORA];
		int      nrTrans[NRO_MAX_REG_ORA];
		int      idResposta2;
		int      transacao;
	EXEC SQL END DECLARE SECTION;
	LISTA_ID  pRU;
	
	try
	{
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		EXEC SQL SELECT RETENCAO.RESPOSTAUNIDADETMPSQ.NEXTVAL INTO :transacao FROM DUAL;

		for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ )
		{
			for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ )
			{
				for ( itTpLinha = pTpLinha->begin(); itTpLinha != pTpLinha->end(); itTpLinha++ )
				{
					for ( itDestino = pDestino->begin(); itDestino != pDestino->end(); itDestino++ )
					{

						idUFOperadora[nrLinhas-1] = *itRegional;
						idTipoCliente[nrLinhas-1] = *itCliente;
						idTipoLinha[nrLinhas-1] = *itTpLinha;
						idDestino[nrLinhas-1] = *itDestino;
						idUsuario[nrLinhas-1] = idUsuarioPrm;
						idIntencao[nrLinhas-1] = idIntencaoPrm;
						nrTrans[nrLinhas-1] = transacao;
						

						if ( nrLinhas == NRO_MAX_REG_ORA )
						{
							EXEC SQL FOR :nrLinhas
							INSERT INTO RETENCAO.RESPOSTAUNIDADETMP 
							(
								IDRESPOSTA1 ,
								IDRESPOSTA2 ,
								IDUFOPERADORA ,
								INATIVO ,
								IDUSUARIOALTERACAO ,
								DTULTIMAALTERACAO ,
								IDTIPOPESSOA ,
								IDTIPOLINHA ,
								NRTRANS 
							)
							VALUES
							(
							   :idIntencao ,
							   :idDestino ,
							   :idUFOperadora ,
							   	1 ,
							   :idUsuario ,
							   	SYSDATE ,
							   :idTipoCliente ,
							   :idTipoLinha ,
							   :nrTrans
							);
							nrLinhas=1;
						}
						else
							nrLinhas++;

					}
				}
			}
		}

		if ( nrLinhas > 0 )
		{
			if ( nrLinhas > 1 )
				nrLinhas--;
			ULOG( "Inserindo %d Linhas...",nrLinhas);
			EXEC SQL FOR :nrLinhas
			INSERT INTO RETENCAO.RESPOSTAUNIDADETMP 
			(
				IDRESPOSTA1 ,
				IDRESPOSTA2 ,
				IDUFOPERADORA ,
				INATIVO ,
				IDUSUARIOALTERACAO ,
				DTULTIMAALTERACAO ,
				IDTIPOPESSOA ,
				IDTIPOLINHA ,
				NRTRANS 
			)
			VALUES
			(
			   :idIntencao ,
			   :idDestino ,
			   :idUFOperadora ,
			   	1 ,
			   :idUsuario ,
			   	SYSDATE ,
			   :idTipoCliente ,
			   :idTipoLinha ,
			   :nrTrans
			);
		}


		xml->addItem( "msgError","Sucesso na execução." );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoMatrizScript()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha de gravação em RespostaUnidade." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizScript()" );
		throw;
	}

}



void InclusaoMatrizAparelho( int idUsuarioPrm, 
                             LISTA_ID * pCliente, 
                             LISTA_ID * pAparelho, 
                             LISTA_ID * pSegmento, 
                             LISTA_ID * pRegional, 
                             LISTA_ID * pGrupo, 
                             XMLGen   * xml )
{
	ULOG_START( "InclusaoMatrizAparelho()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int  idUsuarioCad;
        int  idTmp;
		int  idTipoPessoaCad;
		int  idAparelhoCad;
        int  idSegmentacao;
		int  idSegmentacaoCad;
		int  idSegmentacaoDesconto;
		int  idRegionalCad;
		int  idUFOperadoraCad;
		int  idGrupoCad;
		int  idTipoLinhaCad;
	EXEC SQL END DECLARE SECTION;
	
	try
	{
		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

        /*
         *
         *  Identificando, se foi selecionado apenas uma variavel de cada.
         *
         */
        int ct = 0;
        bool bFlagDelete = false;
        for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ ) 
		{
            ct++;
        }
        if ( ct == 1 )
        {
            ct = 0;
            for ( itGrupo = pGrupo->begin(); itGrupo != pGrupo->end(); itGrupo++ ) 
            {
                ct++;
            }
            if ( ct == 1 )
            {
                ct = 0;
                for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ )
                {
                    ct++;
                }
                if ( ct == 1 )
                {
                    ct = 0;
                    for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ ) 
                    {
                        ct++;
                    }
                    if ( ct == 1)
                    {
                        bFlagDelete = true;
                    }
                }
            }
        }


        
        for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ ) 
        {
            for ( itAparelho = pAparelho->begin(); itAparelho != pAparelho->end(); itAparelho++ )
            {
                idUFOperadoraCad = *itRegional;
                idAparelhoCad = *itAparelho;
                idUsuarioCad = idUsuarioPrm;
                
                if ( bFlagDelete == true )
                {
                    ULOG( ">>> Removendo idUFOperadora [%d]\n",idUFOperadoraCad );
                    EXEC SQL
                    DELETE FROM RETENCAO.APARELHOUFOPERADORA
                    WHERE IDUFOPERADORA = :idUFOperadoraCad;
                    bFlagDelete = false;
                }

                ULOG( "*** Atualizando RETENCAO.APARELHOUFOPERADORA" );
                ULOG( "idAparelhoCad [%d] - idUFOperadoraCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idUFOperadoraCad, idUsuarioCad );
                EXEC SQL
                UPDATE RETENCAO.APARELHOUFOPERADORA
                SET IDUSUARIOALTERACAO = :idUsuarioCad ,
                    DTULTIMAALTERACAO = SYSDATE
                WHERE IDUFOPERADORA = :idUFOperadoraCad 
                and IDAPARELHO = :idAparelhoCad ;
                    

                if( sqlca.sqlerrd[2] == 0 )
                {
                    ULOG( "*** Inserindo RETENCAO.APARELHOUFOPERADORA" );
                    ULOG( "idAparelhoCad [%d] - idUFOperadoraCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idUFOperadoraCad, idUsuarioCad );
                    EXEC SQL
                    INSERT INTO RETENCAO.APARELHOUFOPERADORA
                    (
                        IDAPARELHO ,
                        IDUFOPERADORA ,
                        IDUSUARIOALTERACAO 
                    )
                    VALUES
                    (
                        :idAparelhoCad ,
                        :idUFOperadoraCad ,
                        :idUsuarioCad 
                    );
                }
            }
        }


        for ( itGrupo = pGrupo->begin(); itGrupo != pGrupo->end(); itGrupo++ ) 
        {
            for ( itAparelho = pAparelho->begin(); itAparelho != pAparelho->end(); itAparelho++ )
            {
                idGrupoCad = *itGrupo;	
                idAparelhoCad = *itAparelho;
                idUsuarioCad = idUsuarioPrm;

                /*
                if ( bFlagDelete == true )
                {
                    ULOG( ">>> Removendo idGrupo [%d]\n",idGrupoCad );
                    EXEC SQL
                    DELETE FROM RETENCAO.APARELHOGRUPO
                    WHERE IDGRUPO = :idGrupoCad;
                }
                */
        
                ULOG( "*** Atualizando RETENCAO.APARELHOGRUPO" );
                ULOG( "idAparelhoCad [%d] - idGrupoCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idGrupoCad, idUsuarioCad );
                EXEC SQL
                UPDATE RETENCAO.APARELHOGRUPO
                SET IDUSUARIOALTERACAO = :idUsuarioCad ,
                    DTULTIMAALTERACAO = SYSDATE
                WHERE IDAPARELHO = :idAparelhoCad 
                and IDGRUPO = :idGrupoCad ;
                    

                if(sqlca.sqlerrd[2] == 0)
                {
                    ULOG( "*** Inserindo RETENCAO.APARELHOGRUPO" );
                    ULOG( "idAparelhoCad [%d] - idGrupoCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idGrupoCad, idUsuarioCad );
                    EXEC SQL
                    INSERT INTO RETENCAO.APARELHOGRUPO
                    (
                        IDAPARELHO ,
                        IDGRUPO ,
                        IDUSUARIOALTERACAO 
                    )
                    VALUES
                    (
                        :idAparelhoCad ,
                        :idGrupoCad ,
                        :idUsuarioCad 
                    );
                }
            }
        }

        for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ )
        {
            for ( itAparelho = pAparelho->begin(); itAparelho != pAparelho->end(); itAparelho++ )
            {
                idSegmentacaoCad = *itSegmento;   
                idAparelhoCad = *itAparelho;
                idUsuarioCad = idUsuarioPrm;

                /*
                if ( bFlagDelete == true )
                {
                    ULOG( ">>> Removendo idSegmentacao [%d]\n",idSegmentacaoCad );
                    EXEC SQL
                    DELETE FROM RETENCAO.APARELHOSEGMENTACAO
                    WHERE IDSEGMENTACAO = :idSegmentacaoCad;
                }
                */

                ULOG( "*** Atualizando RETENCAO.APARELHOSEGMENTACAO" );
                EXEC SQL
                UPDATE RETENCAO.APARELHOSEGMENTACAO
                SET IDUSUARIOALTERACAO = :idUsuarioCad ,
                    DTULTIMAALTERACAO = SYSDATE
                WHERE IDAPARELHO = :idAparelhoCad 
                and IDSEGMENTACAO = :idSegmentacaoCad ;
                    
                
                if(sqlca.sqlerrd[2] == 0)
                {

                    EXEC SQL
                    SELECT RETENCAO.APARELHOSEGMENTACAOSQ.NEXTVAL INTO :idTmp FROM DUAL;
                    
                    idSegmentacaoDesconto = idTmp;
                    
                    ULOG( "*** Inserindo RETENCAO.APARELHOSEGMENTACAO" );
                    ULOG( "idSegmentacaoDesconto [%d] - idAparelhoCad [%d] - idSegmentacaoCad [%d] - idUsuarioCad [%d]", idSegmentacaoDesconto, idAparelhoCad, idSegmentacaoCad, idUsuarioCad );

                    EXEC SQL
                    INSERT INTO RETENCAO.APARELHOSEGMENTACAO
                    (
                        IDAPARELHOSEGMENTACAO ,
                        IDAPARELHO ,
                        IDSEGMENTACAO ,
                        IDUSUARIOALTERACAO 
                    )
                    VALUES
                    (
                        :idSegmentacaoDesconto ,
                        :idAparelhoCad ,
                        :idSegmentacaoCad ,
                        :idUsuarioCad 
                    );
                }

            }
        }



        for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ ) 
        {
            for ( itAparelho = pAparelho->begin(); itAparelho != pAparelho->end(); itAparelho++ )
            {
                idTipoPessoaCad = *itCliente;
                idAparelhoCad = *itAparelho;
                idUsuarioCad = idUsuarioPrm;

                /*
                if ( bFlagDelete == true )
                {
                    ULOG( ">>> Removendo idTipoPessoa [%d]\n",idTipoPessoaCad );
                    EXEC SQL
                    DELETE FROM RETENCAO.APARELHOTIPOPESSOA
                    WHERE IDTIPOPESSOA = :idTipoPessoaCad;
                    //bFlagDelete = false;
                }
                */
                
        
                ULOG( "*** Atualizando RETENCAO.APARELHOTIPOPESSOA" );
                ULOG( "idAparelhoCad [%d] - idTipoPessoaCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idTipoPessoaCad, idUsuarioCad );
                EXEC SQL
                UPDATE RETENCAO.APARELHOTIPOPESSOA
                SET IDUSUARIOALTERACAO = :idUsuarioCad ,
                    DTULTIMAALTERACAO = SYSDATE
                WHERE IDTIPOPESSOA = :idTipoPessoaCad
                and IDAPARELHO = :idAparelhoCad ;
                    
            
                if(sqlca.sqlerrd[2] == 0)
                {
                    ULOG( "*** Inserindo RETENCAO.APARELHOTIPOPESSOA" );
                    ULOG( "idAparelhoCad [%d] - idTipoPessoaCad [%d] - idUsuarioCad [%d]", idAparelhoCad, idTipoPessoaCad, idUsuarioCad );
                    EXEC SQL
                    INSERT INTO RETENCAO.APARELHOTIPOPESSOA
                    (
                        IDAPARELHO ,
                        IDTIPOPESSOA ,
                        IDUSUARIOALTERACAO 
                    )
                    VALUES
                    (
                        :idAparelhoCad ,
                        :idTipoPessoaCad ,
                        :idUsuarioCad 
                    );
                }

            }
        }

		
		xml->addItem( "msgError","Sucesso na execução." );
		xml->addItem( "codError",0 );
		ULOG_END( "InclusaoMatrizAparelho()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha de gravação em Matriz de Aparelhos." );
		xml->addItem( "codError",1 );
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizAparelho()" );
		throw;
	}

}



void InclusaoMatrizOfertaFidelizacao( int idMatrizOfertaPrm )
{
	ULOG_START( "InclusaoMatrizOfertaFidelizacao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int      idMatrizOferta = idMatrizOfertaPrm;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
		EXEC SQL
		INSERT INTO 
		RETENCAO.MATRIZOFERTAFIDELIZACAO ( IDMATRIZOFERTA ) VALUES ( :idMatrizOferta );

		ULOG_END( "InclusaoMatrizOfertaFidelizacao()" );
	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: InclusaoMatrizOfertaFidelizacao()" );
		throw;
	}

}



void InsereMatrizOferta( int nrElementosPrm ,
                         int nrTransacaoPrm ,
                         int idUsuarioPrm,
                         int idRespostaIntencaoPrm ,
                         LISTA_ID * pDestino ,
                         int inFidelizacaoPrm ,
                         LISTA_ID * pGrupo, 
                         LISTA_ID * pSegmento,
                         LISTA_ID * pOfertas,
                         LISTA_ID * pRespostaUnidade,
                         XMLGen *xml )
{
    
    
	 ULOG_START( "InsereMatrizOferta()" );


	EXEC SQL BEGIN DECLARE SECTION;
		int nrLinhas = 1;
		int idCadastrado;
		int idOferta[NRO_MAX_REG_ORA];
		int idRespostaIntencao[NRO_MAX_REG_ORA];
		int idUsuario[NRO_MAX_REG_ORA];
		int idSegmentacao[NRO_MAX_REG_ORA];
		int idRespostaDestino[NRO_MAX_REG_ORA];
		int idGrupo[NRO_MAX_REG_ORA];
		int idRespostaUnidade[NRO_MAX_REG_ORA];
		int inAtivo[NRO_MAX_REG_ORA];
		int nrTrans[NRO_MAX_REG_ORA];
		int id;
		int transacao;
		int idUpdate;
		int idOfertaGrupo[NRO_MAX_REG_ORA];
		int idSegmentoGrupo[NRO_MAX_REG_ORA];
		int idGrpOferta[NRO_MAX_REG_ORA];
		int idSegOferta[NRO_MAX_REG_ORA];
		int nrProcessados = 0;
		short i_nrProcessados = -1;
		int nrTransacao = nrTransacaoPrm;
		int nrElementos = nrElementosPrm;
   	EXEC SQL END DECLARE SECTION;
    
    int flagOferta = 0;

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		
		EXEC SQL
		SELECT 
		   NRPROCESSADOS 
		INTO 
		   :nrProcessados:i_nrProcessados
		FROM 
		   RETENCAO.CONTROLEMATRIZOFERTA
		WHERE
		   NRTRANSACAO = :nrTransacao
		AND 
		   NRPROCESSADOS < NRELEMENTOS;

        ULOG( "nrProcessados [%d], i_nrProcessados [%d]",nrProcessados,i_nrProcessados );
		
		if ( i_nrProcessados == -1 )
		   nrProcessados = 0;
		
		
		int k = 0;

    	nrLinhas = 1;
		for ( itOfertas = pOfertas->begin(); itOfertas != pOfertas->end(); itOfertas++ )
		{
            ULOG( "Achou idOferta [%d]",*itOfertas );
            flagOferta = *itOfertas;
            
			for ( itGrupo = pGrupo->begin(); itGrupo != pGrupo->end(); itGrupo++ ) 
			{
    			idGrpOferta[nrLinhas-1] = *itGrupo;
				idOferta[nrLinhas-1] = *itOfertas;
				idUsuario[nrLinhas-1] = idUsuarioPrm;
				nrLinhas++;
			}
		}

		if ( !nrProcessados )
		{
            nrLinhas = 1;
			for ( itGrupo = pGrupo->begin(); itGrupo != pGrupo->end(); itGrupo++ ) 
			{
    			idGrpOferta[nrLinhas-1] = *itGrupo;
				nrLinhas++;
            }
            if ( nrLinhas > 1 ) nrLinhas--;
            ULOG( "Zerando [%d] linhas em RETENCAO.OFERTAGRUPO",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		UPDATE RETENCAO.OFERTAGRUPO 
    		SET INATIVO = 0
    		WHERE IDGRUPO = :idGrpOferta;
	    }

		if ( flagOferta > 0 )
        {
            if ( nrLinhas > 1 ) nrLinhas--;
    		ULOG( "Vai inserir [%d] linhas em RETENCAO.OFERTAGRUPO",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		INSERT INTO RETENCAO.OFERTAGRUPO 
            (
                IDOFERTAGRUPO ,
                IDOFERTA ,
                IDGRUPO ,
                IDUSUARIOALTERACAO 
            )                							
            VALUES
    		(
    		    RETENCAO.OFERTAGRUPOSQ.NEXTVAL ,
    			:idOferta ,
    			:idGrpOferta ,
    			:idUsuario
    		);
        }

		nrLinhas = 1;
		for ( itOfertas = pOfertas->begin(); itOfertas != pOfertas->end(); itOfertas++ )
		{
			for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ )
    		{
    			idSegOferta[nrLinhas-1] = *itSegmento;
				idOferta[nrLinhas-1]    = *itOfertas;
				idUsuario[nrLinhas-1]   = idUsuarioPrm;
				nrLinhas++;
			}
		}

		if ( !nrProcessados )
		{
            nrLinhas = 1;
			for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ )
    		{
    			idSegOferta[nrLinhas-1] = *itSegmento;
				nrLinhas++;
            }
            if ( nrLinhas > 1 ) nrLinhas--;
            ULOG( "Zerando [%d] linhas em RETENCAO.OFERTASEGMENTACAO",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		UPDATE RETENCAO.OFERTASEGMENTACAO 
    		SET INATIVO = 0
    		WHERE IDSEGMENTACAO = :idSegOferta;
        }
		
		if ( flagOferta > 0 )
        {
    		if ( nrLinhas > 1 ) nrLinhas--;
    		ULOG( "Vai inserir [%d] linhas em RETENCAO.OFERTASEGMENTACAO",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		INSERT INTO RETENCAO.OFERTASEGMENTACAO 
            (
                IDOFERTASEGMENTACAO ,
                IDOFERTA ,
                IDSEGMENTACAO ,
                IDUSUARIOALTERACAO 

            )                							
            VALUES
    		(
    		    RETENCAO.OFERTASEGMENTACAOSQ.NEXTVAL ,
    			:idOferta ,
    			:idSegOferta ,
    			:idUsuario
    		);
        }
		
		nrLinhas = 1;
		for ( itOfertas = pOfertas->begin(); itOfertas != pOfertas->end(); itOfertas++ )
		{
			/*
    		for ( itRespostaUnidade = pDestino->begin(); itRespostaUnidade != pDestino->end(); itRespostaUnidade++ )
			{
    			ULOG( "RespostaUnidade [%d]",*itRespostaUnidade );
				idRespostaUnidade[nrLinhas-1]  = *itRespostaUnidade;
				idOferta[nrLinhas-1]    = *itOfertas;
				idUsuario[nrLinhas-1]   = idUsuarioPrm;
				nrLinhas++;
			}
            */
            
			for ( itRespostaUnidade = pRespostaUnidade->begin(); itRespostaUnidade != pRespostaUnidade->end(); itRespostaUnidade++ )
			{
    			ULOG( "RespostaUnidade [%d]",*itRespostaUnidade );
				idRespostaUnidade[nrLinhas-1]  = *itRespostaUnidade;
				idOferta[nrLinhas-1]    = *itOfertas;
				idUsuario[nrLinhas-1]   = idUsuarioPrm;
				nrLinhas++;
			}
		}

		if ( !nrProcessados )
		{
            nrLinhas = 1;
			for ( itRespostaUnidade = pRespostaUnidade->begin(); itRespostaUnidade != pRespostaUnidade->end(); itRespostaUnidade++ )
			{
				idRespostaUnidade[nrLinhas-1]  = *itRespostaUnidade;
				nrLinhas++;
            }
            if ( nrLinhas > 1 ) nrLinhas--;
            ULOG( "Zerando [%d] linhas em RETENCAO.OFERTARESPOSTAUNIDADE",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		UPDATE RETENCAO.OFERTARESPOSTAUNIDADE 
    		SET INATIVO = 0 ,
                DTULTIMAALTERACAO = sysdate
    		WHERE IDRESPOSTAUNIDADE = :idRespostaUnidade;
        }
    		
		if ( flagOferta > 0 )
        {
    		if ( nrLinhas > 1 ) nrLinhas--;
    		ULOG( "Vai inserir [%d] linhas em RETENCAO.OFERTARESPOSTAUNIDADE",nrLinhas );
    		EXEC SQL FOR :nrLinhas  
    		INSERT INTO RETENCAO.OFERTARESPOSTAUNIDADE
            (
                IDOFERTARESPOSTAUNIDADE ,
                IDOFERTA ,
                IDRESPOSTAUNIDADE ,
                IDUSUARIOALTERACAO 
            )                							
            VALUES
    		(
    		    RETENCAO.OFERTARESPOSTAUNIDADESQ.NEXTVAL ,
    			:idOferta ,
    			:idRespostaUnidade ,
    			:idUsuario
    		);
        }
		
		if (!nrProcessados)
		{
            EXEC SQL
            INSERT INTO RETENCAO.CONTROLEMATRIZOFERTA
            (
                NRTRANSACAO ,
                NRELEMENTOS ,
                NRPROCESSADOS
            )
            VALUES
            (
                :nrTransacao ,
                :nrElementos ,
                1
            );
		}
		else
		{
    		nrProcessados++;
            EXEC SQL
            UPDATE RETENCAO.CONTROLEMATRIZOFERTA
            SET NRPROCESSADOS = :nrProcessados
    		WHERE NRTRANSACAO = :nrTransacao;
	    }
		
		
		ULOG_END( "InsereMatrizOferta()" );
		xml->addItem( "msgError","Sucesso na gravação dos dados" );
		xml->addItem( "codError",0 );

	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: InsereMatrizOferta()" );
		xml->addItem( "msgError","Erro na gravação dos dados." );
		xml->addItem( "codError",1 );
		throw;
	}

}



/*
void BuscaUFOperadora(int idRegionalPrm, int * idUFOperadoraPrm )
{
	ULOG_START( "BuscaUFOperadora()" );
		
	EXEC SQL BEGIN DECLARE SECTION;
	    int idRegional = idRegionalPrm;
	    int idUFOperadora;
	EXEC SQL END DECLARE SECTION;

	
	try
	{
		EXEC SQL
		SELECT 
		   UFOPERADORA.IDUFOPERADORA 
		INTO 
		   :idUFOperadora
		FROM 
		   CUSTOMER.UFOPERADORA UFOPERADORA 
		WHERE 
		   UFOPERADORA.IDUF = :idRegional;
	
	    *idUFOperadoraPrm = idUFOperadora;
		
		ULOG_END( "BuscaUFOperadora()" );
	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: BuscaUFOperadora()" );
		throw;
	}

}
*/



void BuscaRespostaUnidade( LISTA_ID * pRegional, LISTA_ID * pRespostaUnidade, int idRespostaIntencao, LISTA_ID * pDestino, LISTA_ID * pTpLinha, LISTA_ID * pCliente )
{
	ULOG_START( "BuscaRespostaUnidade()" );

    string consulta;
    int j;
    char buffer[256];


	EXEC SQL BEGIN DECLARE SECTION;
	    char * query;
		int nrLinhas = 1;
		int idRespostaUnidade;
   	EXEC SQL END DECLARE SECTION;

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		consulta =
		"SELECT "
		   "RESPOSTAUNIDADE.IDRESPOSTAUNIDADE "
		"FROM "
		   "RETENCAO.RESPOSTAUNIDADE RESPOSTAUNIDADE "
		"WHERE "
		   "RESPOSTAUNIDADE.INATIVO = 1 "
		"AND "
		   "RESPOSTAUNIDADE.IDTIPOLINHA IN (";
		j=0;  
		for ( itTpLinha = pTpLinha->begin(); itTpLinha != pTpLinha->end(); itTpLinha++ )
		{
			if ( j > 0 ) consulta += ",";
			
			sprintf( buffer, "%d", *itTpLinha );
			consulta += buffer;
			j++;
		}
        consulta += ") ";

		consulta +=
		"AND "
		   "RESPOSTAUNIDADE.IDTIPOPESSOA IN (";
		j=0;  
		for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ )
		{
			if ( j > 0 ) consulta += ",";
			
			sprintf( buffer, "%d", *itCliente );
			consulta += buffer;
			j++;
		}
        consulta += ") ";

		consulta +=
		"AND "
		   "RESPOSTAUNIDADE.IDRESPOSTA1 = ";
		sprintf( buffer, "%d", idRespostaIntencao );
		consulta += buffer;

		consulta +=
		" AND "
		   "RESPOSTAUNIDADE.IDRESPOSTA2 IN (";
		j=0;  
		for ( itDestino = pDestino->begin(); itDestino != pDestino->end(); itDestino++ )
		{
			if ( j > 0 ) consulta += ",";
			
			sprintf( buffer, "%d", *itDestino );
			consulta += buffer;
			j++;
		}
        consulta += ")";

		consulta +=
		" AND "
		   "RESPOSTAUNIDADE.IDUFOPERADORA IN (";
		j=0;  
		for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ )
		{
			if ( j > 0 ) consulta += ",";
			
			sprintf( buffer, "%d", *itRegional );
			consulta += buffer;
			j++;
		}
        consulta += ")";

		query = (char *)consulta.c_str();
		
		ULOG( query );
		
		EXEC SQL PREPARE ConsultaRespostaUnidade FROM :query;
		EXEC SQL DECLARE crsRespostaUnidade CURSOR FOR ConsultaRespostaUnidade;

		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL OPEN crsRespostaUnidade;

		for( ;; )
		{
		    
		    EXEC SQL FETCH crsRespostaUnidade INTO 
		        :idRespostaUnidade ;
		    pRespostaUnidade->push_back(idRespostaUnidade);
		}
		
		EXEC SQL CLOSE crsRespostaUnidade;
    	ULOG_END( "BuscaRespostaUnidade()" );

	}
	catch(...)
	{
		ULOGE( "*** SAIDA ANORMAL: BuscaRespostaUnidade()" );
		throw;
	}

}



int InclusaoScript( char * idUsuarioPrm, char * idScriptPrm, char * nmScriptPrm, XMLGen * xml )
{
	ULOG_START( "InclusaoScript()" );

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR idUsuario[40];
		VARCHAR idScript[40];
		VARCHAR nmScript[256];
        
		int ctRegistros;
	EXEC SQL END DECLARE SECTION;

	strToOra( idUsuario,idUsuarioPrm );
	strToOra( nmScript,nmScriptPrm );
	
	ULOG( "Incluindo idUsuario [%s], nmScript[%s]",(char*)idUsuario.arr,(char*)nmScript.arr );

	try
	{

		EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL
        SELECT COUNT (1)
          INTO :ctRegistros
          FROM retencao.script
         WHERE TRIM (UPPER (nmscript)) = TRIM (UPPER (:nmScript));
         
        if ( ctRegistros > 0 )
		{
			xml->addItem( "msgError","O nome da script já existe cadastrado no sistema, por favor altere o nome para prosseguir na gravação." );
			xml->addItem( "codError",1 );
			ULOG_END( "*** ERRO:InclusaoScript()" );
			return -1;
		}
   			
        EXEC SQL
        SELECT retencao.scriptsq.NEXTVAL
          INTO :idScript
          FROM DUAL;
        endOraStr( idScript );
          
        EXEC SQL
        INSERT INTO retencao.script
                    (idscript, nmscript, idusuarioalteracao, dtalteracao
                    )
             VALUES ( :idScript, :nmScript, :idUsuario, SYSDATE
                    );

		strcpy( idScriptPrm,(char*)idScript.arr );
        ULOG_END( "InclusaoScript()" );
        return 0;
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar script." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScript()" );
		throw;
	}

}



void InclusaoScriptGrupo( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pGrupo, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptGrupo()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idGrupo[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itGrupo = pGrupo->begin(); itGrupo != pGrupo->end(); itGrupo++ ) 
        {
            idGrupo[nrLinhas-1] = *itGrupo;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scriptgrupo",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scriptgrupo
                    (idscriptgrupo, idgrupo, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scriptgruposq.NEXTVAL, :idGrupo, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptGrupo()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scriptGrupo." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptGrupo()" );
		throw;
	}

}



void InclusaoScriptOferta( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pOfertas, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptOferta()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idOferta[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itOfertas = pOfertas->begin(); itOfertas != pOfertas->end(); itOfertas++ ) 
        {
            idOferta[nrLinhas-1] = *itOfertas;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scriptoferta",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scriptoferta
                    (idscriptoferta, idoferta, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scriptofertasq.NEXTVAL, :idOferta, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptOferta()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scriptOferta." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptOferta()" );
		throw;
	}

}



void InclusaoScriptSegmentacao( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pSegmento, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptSegmentacao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idSegmento[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itSegmento = pSegmento->begin(); itSegmento != pSegmento->end(); itSegmento++ ) 
        {
            idSegmento[nrLinhas-1] = *itSegmento;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scriptsegmentacao",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scriptsegmentacao
                    (idscriptsegmentacao, idsegmentacao, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scriptsegmentacaosq.NEXTVAL, :idSegmento, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptSegmentacao()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scriptSegmentacao." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptSegmentacao()" );
		throw;
	}

}



void InclusaoScriptTpLinha( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pTpLinha, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptTpLinha()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idTipoLinha[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itTpLinha = pTpLinha->begin(); itTpLinha != pTpLinha->end(); itTpLinha++ ) 
        {
            idTipoLinha[nrLinhas-1] = *itTpLinha;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scripttipolinha",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scripttipolinha
                    (idscripttipolinha, idtipolinha, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scripttipolinhasq.NEXTVAL, :idTipoLinha, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptTpLinha()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scripttipolinha." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptTpLinha()" );
		throw;
	}

}



void InclusaoScriptTpPessoa( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pCliente, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptTpPessoa()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idTipoPessoa[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itCliente = pCliente->begin(); itCliente != pCliente->end(); itCliente++ ) 
        {
            idTipoPessoa[nrLinhas-1] = *itCliente;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scripttipolinha",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scripttipopessoa
                    (idscripttipopessoa, idtipopessoa, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scripttipopessoasq.NEXTVAL, :idTipoPessoa, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptTpPessoa()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scripttipopessoa." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptTpPessoa()" );
		throw;
	}

}



void InclusaoScriptUFOper( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pRegional, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptUFOper()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idUFOperadora[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itRegional = pRegional->begin(); itRegional != pRegional->end(); itRegional++ ) 
        {
            idUFOperadora[nrLinhas-1] = *itRegional;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.scriptufoperadora",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.scriptufoperadora
                    (idscriptufoperadora, idufoperadora, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.scriptufoperadorasq.NEXTVAL, :idUFOperadora, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptUFOper()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar scripttipopessoa." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptUFOper()" );
		throw;
	}

}



void InclusaoScriptDestino( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pDestino, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptDestino()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idDestino[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itDestino = pDestino->begin(); itDestino != pDestino->end(); itDestino++ ) 
        {
            idDestino[nrLinhas-1] = *itDestino;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.SCRIPTRESPOSTADESTINO",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.SCRIPTRESPOSTADESTINO
                    ( idSCRIPTRESPOSTADESTINO, idRESPOSTADESTINO, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.SCRIPTRESPOSTADESTINOsq.NEXTVAL, :idDestino, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptDestino()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar SCRIPTRESPOSTADESTINO." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptDestino()" );
		throw;
	}

}



void InclusaoScriptIntencao( char * idUsuarioPrm, char * idScriptPrm, LISTA_ID * pRespostaUnidade, XMLGen * xml )
{
	ULOG_START( "InclusaoScriptIntencao()" );

	EXEC SQL BEGIN DECLARE SECTION;
		int     idUsuario[NRO_MAX_REG_ORA];
		int     idScript[NRO_MAX_REG_ORA];
		int     idIntencao[NRO_MAX_REG_ORA];
		int      nrLinhas = 1;
	EXEC SQL END DECLARE SECTION;

	
	try
	{

        nrLinhas = 1;
        for ( itRU = pRespostaUnidade->begin(); itRU != pRespostaUnidade->end(); itRU++ ) 
        {
            idIntencao[nrLinhas-1] = *itRU;
            idScript[nrLinhas-1] = atoi(idScriptPrm);
            idUsuario[nrLinhas-1] = atoi(idUsuarioPrm);
            nrLinhas++;
        }

        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        if ( nrLinhas > 1 ) nrLinhas--;
        ULOG( "Vai inserir [%d] linhas em retencao.RESPOSTAINTENCAO",nrLinhas );
        EXEC SQL FOR :nrLinhas  
        INSERT INTO retencao.SCRIPTRESPOSTAINTENCAO
                    ( idSCRIPTRESPOSTAINTENCAO, idRESPOSTAINTENCAO, idusuarioalteracao, dtultimaalteracao,
                     idscript
                    )
             VALUES (retencao.SCRIPTRESPOSTAINTENCAOsq.NEXTVAL, :idIntencao, :idUsuario, SYSDATE,
                     :idScript
                    );

		ULOG_END( "InclusaoScriptIntencao()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao gravar SCRIPTRESPOSTAINTENCAO." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: InclusaoScriptIntencao()" );
		throw;
	}

}



void HabilitacaoScript( char * idUsuarioPrm, char * idScriptPrm, char * inHabilitaPrm, XMLGen * xml )
{
	ULOG_START( "HabilitacaoScript()" );

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR idUsuario[40];
		VARCHAR idScript[40];
        VARCHAR inHabilita[2];
	EXEC SQL END DECLARE SECTION;

	strToOra( idUsuario,idUsuarioPrm );
	strToOra( idScript,idScriptPrm );
	strToOra( inHabilita,inHabilitaPrm );
	try
	{


        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        EXEC SQL
        UPDATE retencao.script
           SET inativo = :inHabilita,
               idusuarioalteracao = :idUsuario,
               dtalteracao = SYSDATE
         WHERE idscript = :idScript;
 
		ULOG_END( "HabilitacaoScript()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao habilitar retencao.script." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: HabilitacaoScript()" );
		throw;
	}

}



void RemoveScriptFilhos( char * idUsuarioPrm, char * idScriptPrm, XMLGen * xml )
{
	ULOG_START( "RemoveScriptFilhos()" );

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR idUsuario[40];
		VARCHAR idScript[40];
	EXEC SQL END DECLARE SECTION;

	strToOra( idUsuario,idUsuarioPrm );
	strToOra( idScript,idScriptPrm );
	try
	{
        EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
   			
        EXEC SQL
        UPDATE retencao.script
           SET idusuarioalteracao = :idUsuario,
               dtalteracao = SYSDATE
         WHERE idscript = :idScript;
 
        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTGRUPO WHERE IDSCRIPT = :idScript;
        
        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTOFERTA WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTRESPOSTADESTINO WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTRESPOSTAINTENCAO WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTSEGMENTACAO WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTTIPOLINHA WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTTIPOPESSOA WHERE IDSCRIPT = :idScript;

        EXEC SQL
        DELETE FROM RETENCAO.SCRIPTUFOPERADORA WHERE IDSCRIPT = :idScript;

		ULOG_END( "RemoveScriptFilhos()" );
	}
	catch(...)
	{
		xml->addItem( "msgError","Falha ao remover retencao.script." );
		xml->addItem( "codError",1 );
		
		ULOGE( "*** SAIDA ANORMAL: RemoveScriptFilhos()" );
		throw;
	}

}
