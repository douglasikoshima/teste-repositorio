

#include "../../negocio/fidutil/include/retencao.hpp"
#include <string>

using namespace std;

/*#define EXISTE_REGISTRO    ( (!fimLista) )
#define MESMA_REGIONAL ( EXISTE_REGISTRO  && (idUFOperadora == idUFOperadoraOri))
#define MESMO_TPPESSOA ( MESMA_REGIONAL && (idTipoPessoa == idTipoPessoaOri))
#define MESMO_SEGMENTO ( MESMO_TPPESSOA && (idSegmentacao == idSegmentacaoOri))
*/

int get_arvaparelho(int usuario, DOMNode*dnode, XMLGen*xml)
{
    ULOG_START( "get_arvaparelho()" );
    
    //variaveis antigas
    int fimLista = 0;
    int counter=0;
    //variaveis novas
    char parm[255];
    int iCaso=0;
  
    EXEC SQL BEGIN DECLARE SECTION;
        char * query;
        int     idUFOperadora;
        int     idTipoPessoa;
        int     idSegmentacao;
        int     idAparelho;
        int	  idGrupo=0;
        int     idTpLinha = 0;

        //variaveis para teste;
        int idUFOperadoraOri = 0;
        int idTipoPessoaOri = 0;
        int idSegmentacaoOri = 0;
        int idGrupoOri=0;
        int idTpLinhaOri = 0; // Portabilidade

        VARCHAR nmUf[255];
        VARCHAR dsTipoPessoa[255];
        VARCHAR dsSegmentacao[255];
        VARCHAR dsModelo[255];
        VARCHAR nmGrupo[255];
        VARCHAR dsTpLinha[256];   // Portabilidade
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    EXEC SQL WHENEVER NOT FOUND DO break;
    try
    {
        //  Obtendo dados do xml
        idUFOperadoraOri=get_tag(parm,dnode,"idUF",0,-1);
        if(!idUFOperadoraOri)	idUFOperadora = atoi(parm);

        idTipoPessoaOri=get_tag(parm,dnode,"idTipoPessoa",0,-1);
        if(!idTipoPessoaOri)	idTipoPessoa=atoi(parm);
	
        idSegmentacaoOri=get_tag(parm,dnode,"idSegmentacao",0,-1);
        if(!idSegmentacaoOri)	idSegmentacao = atoi(parm);

        idGrupoOri=get_tag(parm,dnode,"idGrupo",0,-1);
        if(!idGrupoOri)		idGrupo = atoi(parm);

        /*idUFOperadoraOri=get_tag(parm,dnode,"idUF",0,-1); // Portabilidade
        if(!idUFOperadoraOri)	idUFOperadora = atoi(parm);

		idTpLinhaOri = get_tag(parm,dnode,"idTipoLinha",0,-1);
        if(!idTpLinhaOri)		idTpLinha = atoi(parm);*/

        //MAIS RÁPIDO
        iCaso=(idSegmentacaoOri!=-1)?4:(idTipoPessoaOri !=-1)?3:(idGrupoOri!=-1)?2:(idUFOperadoraOri!=-1)?1:0;
        //iCaso=(idSegmentacaoOri!=-1)?5:(idTpLinhaOri !=-1)?4:(idTipoPessoaOri!=-1)?3:(idGrupoOri!=-1)?2:(idUFOperadoraOri!=-1)?1:0;
	  
        xml->createTag("tns:ItemArvoreVO");
        xml->addProp("xmlns:tns","fidelizacao.fo.vivo.com.br/vo");
        xml->addProp("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
    
        ULOG_INT(iCaso);

        switch(iCaso)
        {
            case 0:
                ULOG( "case 0" );
                //#################################################################################
                //CABEÇALHO DA MATRIZ APARELHO
        		xml->addItem("nivel",0);
        		xml->addItem("id",0);
        		xml->addItem("descricao","Matriz Aparelho"); 
                //CURSOR DA UF
                // EXEC SQL DECLARE crsUFOfrt CURSOR FOR
                // SELECT ufo.IDUFOPERADORA,
                       // u.NMUF 
                // FROM apoio.uf u,
                     // customer.ufoperadora ufo
                // WHERE u.IDUF=ufo.IDUF
                // AND ufo.idUfOperadora IN(SELECT   idUfOperadora
                                     // FROM retencao.matrizaparelho
                                     // WHERE inAtivo != 0
                                     // AND  idAparelho NOT IN(SELECT IDAPARELHO FROM RETENCAO.APARELHO
                                                            // WHERE INATIVO=0))
                // ORDER BY UPPER(nmUf);

                //CURSOR DA UF
                EXEC SQL DECLARE crsUFOfrt CURSOR FOR
                SELECT   ufo.idufoperadora idufoperadora, u.nmuf nmuf
                    FROM apoio.uf u, customer.ufoperadora ufo
                   WHERE u.iduf = ufo.iduf
                     AND ufo.idufoperadora IN (
                             SELECT idufoperadora
                               FROM retencao.aparelhoufoperadora
                              WHERE inativo = 1
                                    AND idaparelho NOT IN (SELECT idaparelho
                                                             FROM retencao.aparelho
                                                            WHERE inativo = 0))
                ORDER BY UPPER (nmuf);
		
                EXEC SQL OPEN crsUFOfrt;
                for(;;)
				{
				  	EXEC SQL FETCH crsUFOfrt INTO :idUFOperadora,
												  :nmUf;
                    endOraStr(nmUf);
                    xml->createTag("tns:ItemArvoreVO");
                        xml->addItem("nivel",1);
                        xml->addItem("id",idUFOperadora);
                        xml->addItem("descricao",(char*)nmUf.arr);
                    xml->closeTag();
				}
                EXEC SQL CLOSE crsUFOfrt;
            break; 

            case 1:
                //#############################GRUPO_DE_USUARIO####################################################
                ULOG( "case 1" );
                // EXEC SQL DECLARE crsGrupo CURSOR FOR
                // SELECT  IDGRUPO,
                       // NMGRUPO
                // FROM   ACESSO.GRUPO
                // WHERE IDGRUPO 	   IN(SELECT IDGRUPO
                                       // FROM RETENCAO.matrizaparelho
                                       // WHERE INATIVO		= 1
                                       // AND   IDUFOPERADORA	=:idUFOperadora)
                // ORDER BY upper(NMGRUPO);
					   
                EXEC SQL DECLARE crsGrupo CURSOR FOR
                SELECT   idgrupo, nmgrupo
                    FROM acesso.grupo
                   WHERE idgrupo IN (
                            SELECT apgrupo.idgrupo
                              FROM retencao.aparelhogrupo apgrupo,
                                   retencao.aparelhoufoperadora apufoperadora
                             WHERE apgrupo.inativo = 1
                               AND apufoperadora.inativo = 1
                               AND apufoperadora.idaparelho = apgrupo.idaparelho
                               AND apufoperadora.idufoperadora = :idUFOperadora)
                ORDER BY UPPER (TRIM (nmgrupo));

                EXEC SQL OPEN crsGrupo;
                for(;;)
                {
                    EXEC SQL FETCH crsGrupo INTO	:idGrupo,
                                                    :nmGrupo;
                    //endOraStr(idGrupo);
                    endOraStr(nmGrupo);
                    xml->createTag("tns:ItemArvoreVO");
                    xml->addItem("nivel",2);
                    xml->addItem("id",idGrupo);
                    xml->addItem("descricao",(char*)nmGrupo.arr);
                    xml->closeTag();
                }
                EXEC SQL CLOSE crsGrupo;
            break;

            case 2:
                ULOG( "case 2" );
                EXEC SQL WHENEVER NOT FOUND DO break;
        		// EXEC SQL DECLARE crsPessoa CURSOR FOR
                // SELECT idTipoPessoa, 
                       // dsTipoPessoa
                // FROM  apoio.tipopessoa
                // WHERE idTipoPessoa IN(SELECT idtipopessoa
                                      // FROM retencao.matrizaparelho
                                      // WHERE inAtivo != 0
                                      // AND   idUfOperadora=:idUFOperadora
                                      // and   IDGRUPO		=:idGrupo
                                      // AND  idAparelho NOT IN(SELECT IDAPARELHO FROM RETENCAO.APARELHO
                                                             // WHERE INATIVO=0))
                // ORDER BY dsTipoPessoa;
                
        		EXEC SQL DECLARE crsPessoa CURSOR FOR
                SELECT   idtipopessoa, dstipopessoa
                    FROM apoio.tipopessoa
                   WHERE idtipopessoa IN (
                            SELECT aptipopessoa.idtipopessoa
                              FROM retencao.aparelhogrupo apgrupo,
                                   retencao.aparelhoufoperadora apufoperadora,
                                   retencao.aparelhotipopessoa aptipopessoa
                             WHERE apgrupo.inativo = 1
                               AND apufoperadora.inativo = 1
                               AND aptipopessoa.inativo = 1
                               AND apufoperadora.idaparelho = apgrupo.idaparelho
                               AND aptipopessoa.idaparelho = apgrupo.idaparelho
                               AND apufoperadora.idufoperadora = :idUFOperadora
                               AND apgrupo.idgrupo = :idGrupo
                               AND aptipopessoa.idaparelho NOT IN (SELECT idaparelho
                                                                     FROM retencao.aparelho
                                                                    WHERE inativo = 0))
                ORDER BY trim(upper(dstipopessoa));                

    			EXEC SQL OPEN crsPessoa;
                for(;;)
                {
                    EXEC SQL FETCH crsPessoa INTO :idTipoPessoa,
                                                  :dsTipoPessoa;
                      
                    endOraStr(dsTipoPessoa);
				
    				xml->createTag("tns:ItemArvoreVO");
        				xml->addItem("nivel",3);
        				xml->addItem("id",idTipoPessoa);
        				xml->addItem("descricao",(char*)dsTipoPessoa.arr);
    				xml->closeTag();
                }
                EXEC SQL CLOSE crsPessoa;
            break;
        	case 3:
                ULOG( "case 3" );
                // EXEC SQL DECLARE crsSegmentacao CURSOR FOR
                // SELECT idSegmentacao,
                       // dsSegmentacao
                // FROM  apoio.segmentacao
                // WHERE idSegmentacao IN(SELECT mtaparelho.idSegmentacao
                                         // FROM retencao.matrizaparelho mtaparelho 
                                       // WHERE mtaparelho.inAtivo != 0
                                       // AND  mtaparelho.idUfOperadora=:idUFOperadora
                                       // AND  mtaparelho.idTipoPessoa=:idTipoPessoa
                                       // and  mtaparelho.IDGRUPO =:idGrupo
                                       // AND  mtaparelho.idAparelho NOT IN(SELECT IDAPARELHO FROM RETENCAO.APARELHO
                                                                    // WHERE INATIVO=0))
                // ORDER BY upper(dsSegmentacao);
                
                EXEC SQL DECLARE crsSegmentacao CURSOR FOR
                SELECT   idsegmentacao, dssegmentacao
                    FROM apoio.segmentacao
                   WHERE idsegmentacao IN (
                            SELECT aptipopessoa.idtipopessoa
                              FROM retencao.aparelhogrupo apgrupo,
                                   retencao.aparelhoufoperadora apufoperadora,
                                   retencao.aparelhotipopessoa aptipopessoa,
                                   retencao.aparelhosegmentacao apsegmentacao
                             WHERE apgrupo.inativo = 1
                               AND apufoperadora.inativo = 1
                               AND aptipopessoa.inativo = 1
                               AND apsegmentacao.inativo = 1
                               AND apufoperadora.idaparelho = apgrupo.idaparelho
                               AND aptipopessoa.idaparelho = apgrupo.idaparelho
                               AND aptipopessoa.idaparelho = apsegmentacao.idaparelho
                               AND apufoperadora.idufoperadora = :idUFOperadora
                               AND apgrupo.idgrupo = :idGrupo
                               AND aptipopessoa.idtipopessoa = :idTipoPessoa
                               AND apgrupo.idaparelho NOT IN (SELECT idaparelho
                                                                FROM retencao.aparelho
                                                               WHERE inativo = 0))
                ORDER BY TRIM (UPPER (dssegmentacao));
                
                
                EXEC SQL OPEN crsSegmentacao;
                for(;;)
                {
                    EXEC SQL FETCH crsSegmentacao INTO :idSegmentacao,
                                              :dsSegmentacao;
                    endOraStr(dsSegmentacao);
                    xml->createTag("tns:ItemArvoreVO");
                    xml->addItem("nivel",4);
                    xml->addItem("id",idSegmentacao);
                    xml->addItem("descricao",(char*)dsSegmentacao.arr);
                    xml->closeTag();
                }
                EXEC SQL CLOSE crsSegmentacao;
        	break;

            case 4:
                ULOG( "case 4" );
                EXEC SQL WHENEVER NOT FOUND DO break;

                // EXEC SQL DECLARE crsAparelho CURSOR FOR
                // SELECT   MA.idmatrizaparelho,
                        // (CASE WHEN a.idtipoaparelho != 1 THEN
                        // A.dsModelo || ' - ' || atp.DSTIPOAPARELHO
                        // ELSE
                        // a.dsmodelo END) dsmodelo
                // FROM    RETENCAO.APARELHO    A,
                        // RETENCAO.MATRIZAPARELHO MA,
                        // apoio.tipoaparelho atp
                // WHERE A.IDAPARELHO=MA.IDAPARELHO
                // AND   a.IDTIPOAPARELHO=atp.IDTIPOAPARELHO
                // AND   A.INATIVO = 1
                // AND   MA.INATIVO = 1
                // AND   MA.idUfOperadora = :idUFOperadora
                // AND   MA.idTipoPessoa  = :idTipoPessoa
                // AND   MA.idSegmentacao = :idSegmentacao
                // AND   MA.IDGRUPO       = :idGrupo
                // ORDER BY TRIM(UPPER(dsModelo));
                
                EXEC SQL DECLARE crsAparelho CURSOR FOR
                SELECT   a.idaparelho idaparelho,
                         (CASE
                             WHEN a.idtipoaparelho != 1
                                THEN a.dsmodelo || ' - ' || atp.dstipoaparelho
                             ELSE a.dsmodelo
                          END
                         ) dsmodelo
                    FROM retencao.aparelho a,
                         apoio.tipoaparelho atp,
                         retencao.aparelhoufoperadora apufoperadora,
                         retencao.aparelhotipopessoa aptipopessoa,
                         retencao.aparelhosegmentacao apsegmentacao,
                         retencao.aparelhogrupo apgrupo
                   WHERE a.idaparelho = apgrupo.idaparelho
                     AND a.idtipoaparelho = atp.idtipoaparelho
                     AND apufoperadora.idaparelho = apgrupo.idaparelho
                     AND aptipopessoa.idaparelho = apgrupo.idaparelho
                     AND apsegmentacao.idaparelho = apgrupo.idaparelho
                     AND a.inativo = 1
                     AND apgrupo.inativo = 1
                     AND apsegmentacao.inativo = 1
                     AND aptipopessoa.inativo = 1
                     AND apufoperadora.inativo = 1
                     AND apufoperadora.idufoperadora = :idUFOperadora
                     AND aptipopessoa.idtipopessoa = :idTipoPessoa
                     AND apsegmentacao.idsegmentacao = :idSegmentacao
                     AND apgrupo.idgrupo = :idGrupo
                ORDER BY TRIM (UPPER (dsmodelo));                
                        
                EXEC SQL OPEN crsAparelho;
                for ( ;; )
                {
                    EXEC SQL FETCH crsAparelho INTO :idAparelho,
        								            :dsModelo;
                    endOraStr(dsModelo);
                    xml->createTag( "tns:ItemArvoreVO" );
                        xml->addItem( "nivel",5 );
                        xml->addItem( "id",idAparelho );
                        xml->addItem( "descricao",(char*)dsModelo.arr );
                    xml->closeTag();
                }
                EXEC SQL CLOSE crsAparelho;
            break;
        }
        xml->closeTag();//ItemArvoreVO
    }
    catch(...)
    {
        throw;
    }

    ULOG_END( "get_arvaparelho()" );
    return 1;
}

