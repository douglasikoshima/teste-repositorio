//
// $Id: get_linhas.pcpp,v 1.1.118.4 2013/03/08 18:42:13 a5114878 Exp $
//

#include "../../negocio/fidutil/include/retencao.hpp"
#include  "../../negocio/fidutil/include/CallTux.h"

#define CONVIND(O,I) \
{ \
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

int get_Atlys(char * idLinhaSistemaOrigem, char* idUser,struct retfid *pRetorno)
{
    int iRetorno=0;
    CCallTuxSrv TuxServico;
    const char *pMemBufId = "inputInfo";

    try
    {
        char szRetorno[2000];
        XMLGen oEntrada;

        oEntrada.addItem("ProxyLinha","");
        oEntrada.addItem("ProxyOperacao","getFidelizacao");
        oEntrada.addItem("idlinhasistemaorigem",idLinhaSistemaOrigem);

        ULOG("Criou objeto TuxServico");

        TuxServico.SetService("TuxProxyBE");

        TuxServico.SetUser(idUser);
        TuxServico.SetBody(&oEntrada);

        ULOG("Configurou objeto TuxServico");

        TuxServico.SetServiceName("TuxProxyBE");

        TuxServico.SetInputMessage();

        if(TuxServico.RemoteCall())
        {
            if( TuxServico.IsValidMessage())
            {
                ULOG("Entrou no IsValidMessage()");

                TuxServico.GetMessgeStr(szRetorno);

                XercesDOMParser pParser;
                MemBufInputSource pMemBuf((const XMLByte*)szRetorno,strlen(szRetorno),pMemBufId);
                //pParser =  new XercesDOMParser; (cadê o delete disso?? - removí do heap!!-cassio)
                //pMemBuf =  new MemBufInputSource( (const XMLByte*)szRetorno, strlen(szRetorno), pMemBufId);

                pParser.parse(pMemBuf);
                DOMNode* pDoc = pParser.getDocument();

                get_tag(pRetorno->szContrato,pDoc,"contrato",0,0);
                get_tag(pRetorno->szVMulta,pDoc,"valorMulta",0,0);

                get_tag(pRetorno->szDTFimCtr,pDoc,"dtFimContrato",0,0);

                iRetorno = 1;
            }
            else
            {
                ULOG("Mensagem nao e valida!");
            }
        }
        else
        {
            ULOG("Falha na Comunicaçao com o Sistema"); 
        }

    } 
    catch(...)
    {
        ULOG("erro especifico na chamadoa do TuxProxyBE");
    }

    return iRetorno;
}


void get_cntr(XMLGen*xml,struct retfid rt,int iComm)
{
    if(iComm)
    {
        xml->addItem("contrato",rt.szContrato);
        xml->addItem("valorMulta",rt.szVMulta);
        xml->addItem("dtFimContrato",rt.szDTFimCtr);
    }
    else
    {
        // todo: Chamar servico externo que fornecerá os dados
        xml->addItem("contrato","Nao Disponivel");
        xml->addItem("valorMulta","Nao Disponivel");
        xml->addItem("dtFimContrato","Nao Disponivel");
    }
}

int get_linhas(int usuario, DOMNode*dnode, XMLGen*xml)
{
    ULOG_START("get_linhas(int usuario, DOMNode*dnode, XMLGen*xml)");

    char buf[256]; 
    char parm[50];
    int existeReg = 1;
    int indicador;
    struct retfid stRetorno;
    int iCommAtlys=0;
    // char szCdAreaRegistro[21 + 1];

    EXEC SQL BEGIN DECLARE SECTION;

        double vlRentabilidade;

        int idLinhaTelefonica=0;
        long idPessoa;
        int idPessoaDePara=0;
        int idSegmentacao=0;
        int idServico=0;
        int idufoperadora;
		
		int prefixo = 0;
		int numero  = 0;

        VARCHAR dsSegmentacao[255];
        VARCHAR dtHabilitacao[25];
        VARCHAR idLinhaSistemaOrigem[255];
        VARCHAR nmServico[255];
        VARCHAR nrLinha[25];
        VARCHAR nrlinhaGambis[21+1];
        // VARCHAR oszCdAreaRegistro[21];
        VARCHAR oszInBloqueado[21];
        int idTipoLinha;

    EXEC SQL END DECLARE SECTION;
	
    char cConv[3];

    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    //EXEC SQL WHENEVER NOT FOUND DO BREAK;

    memset(&stRetorno,0,sizeof(stRetorno));

    try {
        //  Obtendo dados do xml
        get_tag(parm,dnode,"idCliente",0,0);
        idPessoa = atol(parm);

        get_tag(parm,dnode,"numeroLinha",0,0);
        strToOra(nrLinha,parm);
		
		ULOG("Buscando idlinhatelefonica da linha[%s].",nrLinha.arr);
	
		memset( &cConv, 0, sizeof( cConv ) );
		strncpy(cConv, (const char *)nrLinha.arr,2);
		cConv[2] = '\0';

		if ( (nrLinha.arr)[0]=='0' ) 
		{
			strncpy(cConv,((const char *)nrLinha.arr)+1,2);cConv[2]=0;
			prefixo = atoi(cConv);
			numero  = atoi(((const char *)nrLinha.arr)+3);
		}
		else
		{
			strncpy(cConv,(const char *)nrLinha.arr,2);cConv[2]=0;
			prefixo = atoi(cConv);
			numero  = atoi(((const char *)nrLinha.arr)+2);
		}		
		
		ULOG("DDD[%d] e Telefones[%d] separados da linha[%s].", prefixo, numero, (const char *)nrLinha.arr);
		
        if(idPessoa)
        {
            if(nrLinha.len)
            {
                ULOG("entrou no idPessoa && nrLinha");
				

                indicador=1;

				ULOG("Buscando idlinhatelefonica...");
				
                EXEC SQL SELECT
                        IDLINHATELEFONICA
					INTO 
						:idLinhaTelefonica
                    FROM
                        LINHA.LINHATELEFONICA LT,
                        LINHA.LINHABASE LB,
                        APOIO.AREAREGISTRO AR
                    WHERE
						LB.IDLINHABASE = LT.IDLINHABASE AND
                        LB.IDAREAREGISTRO = AR.IDAREAREGISTRO AND
                        LB.NRLINHA = :numero AND
                        AR.CDAREAREGISTRO = :prefixo;	
						
				EXEC SQL WHENEVER NOT FOUND DO BREAK;		

			    ULOG("idlinhatelefonica [%d]", idLinhaTelefonica);
						
                EXEC SQL DECLARE crsLnUsr CURSOR FOR
                    SELECT
                        IDPESSOADEPARA,
                        IDLINHATELEFONICA,
                        NRLINHA,
                        IDSEGMENTACAO,
                        DSSEGMENTACAO,
                        VLRENTABILIDADE,
                        IDSERVICO,
                        NMSERVICO,
                        DTHABILITACAO,
                        IDUFOPERADORA,
                        IDLINHASISTEMAORIGEM
                    FROM
                        RETENCAO.LINHATELEFONICAV01
                    WHERE
                        NRLINHA = :nrLinha
                    AND IDPESSOA = :idPessoa
					AND IDLINHATELEFONICA = :idLinhaTelefonica;

                EXEC SQL OPEN crsLnUsr;
            }
            else if(!nrLinha.len) 
            {
                ULOG("entrou no idPessoa && !nrLinha");

                indicador=0;

                EXEC SQL DECLARE crsLnUsr1 CURSOR FOR
                    SELECT
                        RLTV01.IDPESSOADEPARA,
                        RLTV01.IDLINHATELEFONICA,
                        RLTV01.NRLINHA,
                        RLTV01.IDSEGMENTACAO,
                        RLTV01.DSSEGMENTACAO,
                        RLTV01.VLRENTABILIDADE,
                        RLTV01.IDSERVICO,
                        RLTV01.NMSERVICO,
                        RLTV01.DTHABILITACAO,
                        RLTV01.IDUFOPERADORA,
                        RLTV01.IDLINHASISTEMAORIGEM
                    FROM
                        RETENCAO.LINHATELEFONICAV01 RLTV01
                    WHERE
                        RLTV01.IDPESSOA = :idPessoa
                    AND ROWNUM < 10;

                EXEC SQL OPEN crsLnUsr1; 
            }

            for(;;)
            {
                if(indicador)
                {
                    ULOG("primeiro FETCH");
                    EXEC SQL FETCH crsLnUsr INTO :idPessoaDePara,
                                                 :idLinhaTelefonica,
                                                 :nrlinhaGambis,
                                                 :idSegmentacao,
                                                 :dsSegmentacao,
                                                 :vlRentabilidade,
                                                 :idServico,
                                                 :nmServico,
                                                 :dtHabilitacao,
                                                 :idufoperadora,
                                                 :idLinhaSistemaOrigem;

                    ULOG_INT(idLinhaTelefonica);
                    ULOG_INT(idPessoaDePara);
                    ULOG_INT(indicador);
                }
                else
                {
                    ULOG("segundo FETCH");
                    EXEC SQL FETCH crsLnUsr1 INTO:idPessoaDePara,
                                                 :idLinhaTelefonica,
                                                 :nrlinhaGambis,
                                                 :idSegmentacao,
                                                 :dsSegmentacao,
                                                 :vlRentabilidade,
                                                 :idServico,
                                                 :nmServico,
                                                 :dtHabilitacao,
                                                 :idufoperadora,
                                                 :idLinhaSistemaOrigem;
                    
                    ULOG_INT(idLinhaTelefonica);
                    ULOG_INT(idPessoaDePara);
                    ULOG_INT(indicador);
                }
                
                EXEC SQL
                SELECT tipolinha.idtipolinha
                  INTO :idTipoLinha
				  FROM linha.linhatelefonica linhatelefonica, apoio.tipolinha tipolinha
				 WHERE tipolinha.idtipolinha = linhatelefonica.idtipolinha
				   AND linhatelefonica.idlinhatelefonica = :idLinhaTelefonica;

                ULOG_INT(idTipoLinha);

                ULOG("REALIZOU FETCH");

                endOraStr(dtHabilitacao);
                endOraStr(dsSegmentacao);
                endOraStr(nmServico);
                endOraStr(idLinhaSistemaOrigem);
                endOraStr(nrlinhaGambis);

                ULOG_INT(nrLinha);
                ULOG_VAR(dtHabilitacao);
                ULOG_VAR(nrlinhaGambis);
                ULOG_INT(idSegmentacao);
                ULOG_VAR(dsSegmentacao);
                ULOG_INT(vlRentabilidade);
                ULOG_INT(idServico);
                ULOG_VAR(nmServico);

                // memcpy(szCdAreaRegistro, nrlinhaGambis.arr, 2);
                // szCdAreaRegistro[2] = 0;
                // ULOG("szCdAreaRegistro[%s]", szCdAreaRegistro);
                // 
                // strToOra(oszCdAreaRegistro, szCdAreaRegistro);
                // 
                // EXEC SQL
                //     SELECT ar.inbloqueado
                //     INTO :oszInBloqueado
                //     FROM apoio.arearegistro ar
                //     WHERE ar.cdarearegistro = :oszCdAreaRegistro;
                // 
                // ULOG_VAR(oszInBloqueado);
                // 
                // if(memcmp(oszInBloqueado.arr, "0", 1))
                // {
                //     ULOG("LocalABC");
                //     continue;
                // }

                xml->createTag("tns:detalheLinhaVO");
                xml->addItem("idPessoaDePara",idPessoaDePara);
                xml->addItem("idLinha",idLinhaTelefonica);
                xml->addItem("numero",(char*)nrlinhaGambis.arr);
                xml->addItem("idSegmentacao",idSegmentacao);
                xml->addItem("segmentacao",(char *)dsSegmentacao.arr);
                xml->addItem("rentabilidade",vlRentabilidade);
                xml->addItem("idTipoLinha",idTipoLinha);

                // xml <- contrato,valorMulta,dtFimContrato
                //sprintf( buf, "%d", usuario );
                //iCommAtlys=get_Atlys((char *)idLinhaSistemaOrigem.arr,buf, &stRetorno);

                get_cntr(xml,stRetorno,iCommAtlys);

                xml->addItem("valorProRata","0,00");
                xml->addItem("idPlano",idServico);
                xml->addItem("plano",(char *)nmServico.arr);
                xml->addItem("dtHabilitacao",(char *)dtHabilitacao.arr);
                xml->addItem("idUFOperadora",idufoperadora);

                xml->closeTag();
            }

            if (indicador)
            {
                EXEC SQL CLOSE crsLnUsr;
            }
            else
            {
                EXEC SQL CLOSE crsLnUsr1;
            }
        } // if(idPessoa)
    }
    catch(...)
    {
        throw;
    }

    ULOG_END("get_linhas(int usuario, DOMNode*dnode, XMLGen*xml)");

    return 1;
}

int get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,int idPessoaUsuarioAtual)
{
    ULOG_START("get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,char *idPessoaUsuarioAtual)");

    char buf[256]; 
    char parm[50];
    int existeReg = 1;
    int indicador;
    struct retfid stRetorno;
    int iCommAtlys=0;

    EXEC SQL BEGIN DECLARE SECTION;
        char *pOraIdAtendimento = idAtendimento;
        int OraIdPessoaUsuarioAtual = idPessoaUsuarioAtual;
        char strOraNrLinha[21];
        int OraIdPessoa;
        VARCHAR OraNrAtendimentoAgrupado[21];
        int OraQuantidade;
        int OraIdAgrupamentoEstadoTpProc;
        VARCHAR OraIdLinhaTelefonica[21];

        struct
        {
            VARCHAR idPessoaDePara[21];
            VARCHAR idLinhaTelefonica[21];
            VARCHAR nrLinha[21];
            VARCHAR idSegmentacao[21];
            VARCHAR dsSegmentacao[256];
            VARCHAR vlRentabilidade[21];
            VARCHAR idServico[21];
            VARCHAR nmServico[256];
            VARCHAR dtHabilitacao[21];
            VARCHAR idUfOperadora[21];
            VARCHAR idLinhaSistemaOrigem[21];
            VARCHAR nrProtocoloPortabilidade[21];
            VARCHAR cdConta[101];
            VARCHAR idTipoLinha[21];
        } DadosOraLinha;

        struct
        {
            short idPessoaDePara;
            short idLinhaTelefonica;
            short nrLinha;
            short idSegmentacao;
            short dsSegmentacao;
            short vlRentabilidade;
            short idServico;
            short nmServico;
            short dtHabilitacao;
            short idUfOperadora;
            short idLinhaSistemaOrigem;
            short nrProtocoloPortabilidade;
            short cdConta;
            short idTipoLinha;
        } StatusOraLinha;

        short statOraIdAgrupamentoEstadoTpProc;
        short statOraNrAtendimentoAgrupado=-1;
        short statOraQuantidade;
        short statOraIdLinhaTelefonica = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&stRetorno,0,sizeof(stRetorno));
    memset(&OraIdLinhaTelefonica,0,sizeof(OraIdLinhaTelefonica));
    memset(&OraNrAtendimentoAgrupado,0,sizeof(OraNrAtendimentoAgrupado));

    try
    {
        // Obtendo dados do xml
        get_tag(parm,dnode,"idCliente",0,0);
        OraIdPessoa = atoi(parm);

        get_tag(parm,dnode,"numeroLinha",0,0);
        strcpy(strOraNrLinha,parm);

        if ( OraIdPessoa==0 )
        {
            ULOGW("idPessoa não informado");
            ULOG_END("get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,char *idPessoaUsuarioAtual)");
            return 0;
        }

        ULOG("Vai buscar o idLinhaTelefonica do processo '%s'",pOraIdAtendimento);
        EXEC SQL
            SELECT
                IDLINHATELEFONICA
            INTO
                :OraIdLinhaTelefonica:statOraIdLinhaTelefonica
            FROM
                ATENDIMENTO.ATENDIMENTOPRIORIZACAO
            WHERE
                IDATENDIMENTO =:pOraIdAtendimento;

        if ( sqlca.sqlcode )
        {
            ULOGW("processo '%s' não encontrado!",pOraIdAtendimento);
            ULOG_END("get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,char *idPessoaUsuarioAtual)");
            return 0;
        }

        CONVIND(OraIdLinhaTelefonica,statOraIdLinhaTelefonica);

        ULOG("Vai verificar se existem outros processos para o idLinhaTelefonica='%s'",OraIdLinhaTelefonica.arr);

        EXEC SQL
            SELECT
                ATENDIMENTOAGRUPADO.NRATENDIMENTOAGRUPADO
            INTO
                :OraNrAtendimentoAgrupado:statOraNrAtendimentoAgrupado
            FROM
                ATENDIMENTO.ATENDIMENTOAGRUPADO ATENDIMENTOAGRUPADO,
                ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO
            WHERE
                ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOAGRUPADO.IDATENDIMENTO
            AND ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA = :OraIdLinhaTelefonica
            AND ROWNUM < 2;

        if ( sqlca.sqlcode )
        {
            ULOGW("agrupamento do processo '%s' não encontrado!",pOraIdAtendimento);
            ULOG_END("get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,char *idPessoaUsuarioAtual)");
            return 0;
        }

        ULOG("nrAtendimentoAgrupado=%s",OraNrAtendimentoAgrupado.arr);

        ULOG("Vai verificar se existem outros processos associados ao processo '%s'",pOraIdAtendimento);

        EXEC SQL
            SELECT
                COUNT(1)
            INTO
                :OraQuantidade:statOraQuantidade
            FROM
                ATENDIMENTO.ATENDIMENTOAGRUPADO
            WHERE
                NRATENDIMENTOAGRUPADO = :OraNrAtendimentoAgrupado
            AND IDATENDIMENTO <> :pOraIdAtendimento
            AND ROWNUM < 2;

        ULOG("quantidade de outro(s) processo(s) associado(s)=%d",OraQuantidade);

        if ( OraQuantidade > 0 )
        { // se existem outros processos agrupados ao mesmo, então exibe

            ULOG("Vai buscar o estado atual do processo='%s'",pOraIdAtendimento);

            EXEC SQL
                SELECT
                    IDAGRUPAMENTOESTADOTPPROC
                INTO
                    :OraIdAgrupamentoEstadoTpProc:statOraIdAgrupamentoEstadoTpProc
                FROM
                    ATENDIMENTO.ATENDIMENTOPRIORIZACAO
                WHERE
                    IDATENDIMENTO = :pOraIdAtendimento;

            ULOG("idAgrupamentoEstadoTpProc=%d",OraIdAgrupamentoEstadoTpProc);

            EXEC SQL WHENEVER NOT FOUND DO BREAK;

            if( strOraNrLinha[0] )
            {
                ULOG("entrou no OraIdPessoa && strOraNrLinha[0]");

                indicador=1;

                EXEC SQL DECLARE crsPOLnUsr1 CURSOR FOR
                    SELECT
                        RLTV01.IDPESSOADEPARA,
                        RLTV01.IDLINHATELEFONICA,
                        RLTV01.NRLINHA,
                        RLTV01.IDSEGMENTACAO,
                        RLTV01.DSSEGMENTACAO,
                        RLTV01.VLRENTABILIDADE,
                        RLTV01.IDSERVICO,
                        RLTV01.NMSERVICO,
                        RLTV01.DTHABILITACAO,
                        RLTV01.IDUFOPERADORA,
                        RLTV01.IDLINHASISTEMAORIGEM,
                        ATENDIMENTOPRIORIZACAO.NRPROTOCOLOPORTABILIDADE,
                        ATENDIMENTOCONTA.CDCONTA,
                        TIPOLINHA.IDTIPOLINHA
                    FROM
                        RETENCAO.LINHATELEFONICAV01 RLTV01,
                        ATENDIMENTO.ATENDIMENTOAGRUPADO ATENDIMENTOAGRUPADO,
                        ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA,
                        ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
                        LINHA.LINHATELEFONICA LINHATELEFONICA,
                        APOIO.TIPOLINHA TIPOLINHA
                    WHERE
                        ATENDIMENTOAGRUPADO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO
                    AND ATENDIMENTOAGRUPADO.IDATENDIMENTO = ATENDIMENTOPRIORIZACAO.IDATENDIMENTO
                    AND ATENDIMENTOAGRUPADO.NRATENDIMENTOAGRUPADO = :OraNrAtendimentoAgrupado
                    AND ATENDIMENTOAGRUPADO.IDATENDIMENTO <> :pOraIdAtendimento
                    AND RLTV01.IDPESSOA = ATENDIMENTOAGRUPADO.IDPESSOA
                    AND ATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC = :OraIdAgrupamentoEstadoTpProc
                    AND NVL(ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL,:OraIdPessoaUsuarioAtual) = :OraIdPessoaUsuarioAtual
                    AND RLTV01.NRLINHA = :strOraNrLinha
                    AND RLTV01.IDPESSOA = :OraIdPessoa
                    AND ATENDIMENTOPRIORIZACAO.SGTIPOPORTABILIDADE = 'PORTOUT'
                    AND LINHATELEFONICA.IDLINHATELEFONICA = ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA
                    AND TIPOLINHA.IDTIPOLINHA = LINHATELEFONICA.IDTIPOLINHA;

                EXEC SQL OPEN crsPOLnUsr1;
            }
            else
            {
                ULOG("entrou no idPessoa && !nrLinha");

                indicador=2;

                EXEC SQL DECLARE crsPOLnUsr2 CURSOR FOR
                        SELECT
                            RLTV01.IDPESSOADEPARA,
                            RLTV01.IDLINHATELEFONICA,
                            TO_NUMBER(RLTV01.NRLINHA) AS NRLINHA,
                            RLTV01.IDSEGMENTACAO,
                            RLTV01.DSSEGMENTACAO,
                            RLTV01.VLRENTABILIDADE,
                            RLTV01.IDSERVICO,
                            RLTV01.NMSERVICO,
                            RLTV01.DTHABILITACAO,
                            RLTV01.IDUFOPERADORA,
                            RLTV01.IDLINHASISTEMAORIGEM,
                            ATENDIMENTOPRIORIZACAO.NRPROTOCOLOPORTABILIDADE,
                            ATENDIMENTOCONTA.CDCONTA,
                            TIPOLINHA.IDTIPOLINHA
                        FROM
                            RETENCAO.LINHATELEFONICAV01 RLTV01,
                            ATENDIMENTO.ATENDIMENTOAGRUPADO ATENDIMENTOAGRUPADO,
                            ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA,
                            ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
                            LINHA.LINHATELEFONICA LINHATELEFONICA,
                            APOIO.TIPOLINHA TIPOLINHA
                        WHERE
                            ATENDIMENTOAGRUPADO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO
                        AND ATENDIMENTOAGRUPADO.IDATENDIMENTO = ATENDIMENTOPRIORIZACAO.IDATENDIMENTO
                        AND ATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC = :OraIdAgrupamentoEstadoTpProc
                        AND NVL(ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL,:OraIdPessoaUsuarioAtual) = :OraIdPessoaUsuarioAtual
                        AND RLTV01.IDPESSOA = ATENDIMENTOAGRUPADO.IDPESSOA
                        AND ATENDIMENTOAGRUPADO.NRATENDIMENTOAGRUPADO = :OraNrAtendimentoAgrupado
                        AND ATENDIMENTOAGRUPADO.IDATENDIMENTO <> :pOraIdAtendimento
                        AND RLTV01.IDPESSOA = :OraIdPessoa
                        AND ATENDIMENTOPRIORIZACAO.SGTIPOPORTABILIDADE = 'PORTOUT'
                        AND LINHATELEFONICA.IDLINHATELEFONICA = ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA
                        AND TIPOLINHA.IDTIPOLINHA = LINHATELEFONICA.IDTIPOLINHA
                        AND ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA=RLTV01.IDLINHATELEFONICA;
                    //UNION
                    //    SELECT
                    //        NVL(TEMP1.IDPESSOADEPARA,TEMP2.IDPESSOADEPARA) AS IDPESSOADEPARA,
                    //        ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA,
                    //        LINHABASE.NRLINHA,
                    //        SEGMENTACAO.IDSEGMENTACAO,
                    //        SEGMENTACAO.DSSEGMENTACAO,
                    //        NULL AS VLRENTABILIDADE,
                    //        NULL AS IDSERVICO,
                    //        NULL AS NMSERVICO,
                    //        NULL AS DTHABILITACAO,
                    //        ATENDIMENTOPRIORIZACAO.IDUFOPERADORA,
                    //        NULL AS IDLINHASISTEMAORIGEM,
                    //        ATENDIMENTOPRIORIZACAO.NRPROTOCOLOPORTABILIDADE,
                    //        ATENDIMENTOCONTA.CDCONTA,
                    //        TIPOLINHA.IDTIPOLINHA
                    //    FROM
                    //        ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA,
                    //        ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
                    //        (
                    //            SELECT AP1.IDATENDIMENTO,AP1.IDPESSOADEPARA
                    //            FROM ATENDIMENTO.ATENDIMENTOPESSOA AP1
                    //            WHERE AP1.IDTIPORELACIONAMENTO = 2
                    //        ) TEMP1,
                    //        (
                    //            SELECT AP2.IDATENDIMENTO,AP2.IDPESSOADEPARA
                    //            FROM ATENDIMENTO.ATENDIMENTOPESSOA AP2
                    //            WHERE AP2.IDTIPORELACIONAMENTO NOT IN (1,2)
                    //        ) TEMP2,
                    //        LINHA.LINHATELEFONICA LINHATELEFONICA,
                    //        LINHA.LINHABASE LINHABASE,
                    //        APOIO.TIPOLINHA TIPOLINHA,
                    //        APOIO.SEGMENTACAO SEGMENTACAO 
                    //    WHERE
                    //        ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO
                    //    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = :pOraIdAtendimento
                    //    AND ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA (+) 
                    //    AND LINHATELEFONICA.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA (+)
                    //    AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE (+)
                    //    AND ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
                    //    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = TEMP1.IDATENDIMENTO(+)
                    //    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = TEMP2.IDATENDIMENTO(+);

                EXEC SQL OPEN crsPOLnUsr2;
            }

        } // if ( OraQuantidade > 0 )
        else
        {
            ULOG("entrou no pesquisa simples");

            indicador=3;

            EXEC SQL DECLARE crsPOLnUsr3 CURSOR FOR
                    SELECT
                        NVL(TEMP1.IDPESSOADEPARA,TEMP2.IDPESSOADEPARA) AS IDPESSOADEPARA,
                        ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA,
                        LINHABASE.NRLINHA,
                        SEGMENTACAO.IDSEGMENTACAO,
                        SEGMENTACAO.DSSEGMENTACAO,
                        NULL AS VLRENTABILIDADE,
                        NULL AS IDSERVICO,
                        NULL AS NMSERVICO,
                        NULL AS DTHABILITACAO,
                        ATENDIMENTOPRIORIZACAO.IDUFOPERADORA,
                        NULL AS IDLINHASISTEMAORIGEM,
                        ATENDIMENTOPRIORIZACAO.NRPROTOCOLOPORTABILIDADE,
                        ATENDIMENTOCONTA.CDCONTA,
                        TIPOLINHA.IDTIPOLINHA
                    FROM
                        ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA,
                        ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
                        (
                            SELECT AP1.IDATENDIMENTO,AP1.IDPESSOADEPARA
                            FROM ATENDIMENTO.ATENDIMENTOPESSOA AP1
                            WHERE AP1.IDTIPORELACIONAMENTO = 2
                        ) TEMP1,
                        (
                            SELECT AP2.IDATENDIMENTO,AP2.IDPESSOADEPARA
                            FROM ATENDIMENTO.ATENDIMENTOPESSOA AP2
                            WHERE AP2.IDTIPORELACIONAMENTO NOT IN (1,2)
                        ) TEMP2,
                        LINHA.LINHATELEFONICA LINHATELEFONICA,
                        LINHA.LINHABASE LINHABASE,
                        APOIO.TIPOLINHA TIPOLINHA,
                        APOIO.SEGMENTACAO SEGMENTACAO 
                    WHERE
                        ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO
                    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = -1 // desabilitado ! :pOraIdAtendimento
                    AND ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA (+) 
                    AND LINHATELEFONICA.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA (+)
                    AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE (+)
                    AND ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
                    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = TEMP1.IDATENDIMENTO(+)
                    AND ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = TEMP2.IDATENDIMENTO(+);

                EXEC SQL OPEN crsPOLnUsr3;
        }

        ULOG("indicador=%d",indicador);

        for(;;)
        {
            memset(&DadosOraLinha,0,sizeof(DadosOraLinha));
            memset(&StatusOraLinha,-1,sizeof(StatusOraLinha));

            if( 1==indicador )
            {
                EXEC SQL FETCH crsPOLnUsr1 INTO :DadosOraLinha:StatusOraLinha;
            }
            else if( 2==indicador )
            {
                EXEC SQL FETCH crsPOLnUsr2 INTO :DadosOraLinha:StatusOraLinha;
            }
            else if( 3==indicador )
            {
                EXEC SQL FETCH crsPOLnUsr3 INTO :DadosOraLinha:StatusOraLinha;
            }

            CONVIND(DadosOraLinha.idPessoaDePara,StatusOraLinha.idPessoaDePara);
            CONVIND(DadosOraLinha.idLinhaTelefonica,StatusOraLinha.idLinhaTelefonica);
            CONVIND(DadosOraLinha.idSegmentacao,StatusOraLinha.idSegmentacao);
            CONVIND(DadosOraLinha.dsSegmentacao,StatusOraLinha.dsSegmentacao);
            CONVIND(DadosOraLinha.vlRentabilidade,StatusOraLinha.vlRentabilidade);
            CONVIND(DadosOraLinha.idServico,StatusOraLinha.idServico);
            CONVIND(DadosOraLinha.nmServico,StatusOraLinha.nmServico);
            CONVIND(DadosOraLinha.dtHabilitacao,StatusOraLinha.dtHabilitacao);
            CONVIND(DadosOraLinha.idUfOperadora,StatusOraLinha.idUfOperadora);
            CONVIND(DadosOraLinha.idLinhaSistemaOrigem,StatusOraLinha.idLinhaSistemaOrigem);
            CONVIND(DadosOraLinha.nrProtocoloPortabilidade,StatusOraLinha.nrProtocoloPortabilidade);
            CONVIND(DadosOraLinha.cdConta,StatusOraLinha.cdConta);
            CONVIND(DadosOraLinha.idTipoLinha,StatusOraLinha.idTipoLinha);

            xml->createTag("tns:detalheLinhaVO");
            xml->addItem("idPessoaDePara",(char*)DadosOraLinha.idPessoaDePara.arr);
            xml->addItem("idLinha",(char*)DadosOraLinha.idLinhaTelefonica.arr);
            xml->addItem("numero",(char*)DadosOraLinha.nrLinha.arr);
            xml->addItem("idSegmentacao",(char*)DadosOraLinha.idSegmentacao.arr);
            xml->addItem("segmentacao",(char*)DadosOraLinha.dsSegmentacao.arr);
            xml->addItem("rentabilidade",(char*)DadosOraLinha.vlRentabilidade.arr);
            xml->addItem("idTipoLinha",(char*)DadosOraLinha.idTipoLinha.arr);

            // xml <- contrato,valorMulta,dtFimContrato
            // sprintf( buf, "%d", usuario );
            //iCommAtlys=get_Atlys((char *)idLinhaSistemaOrigem.arr,buf, &stRetorno);

            get_cntr(xml,stRetorno,iCommAtlys);

            xml->addItem("valorProRata","0,00");
            xml->addItem("idPlano",(char*)DadosOraLinha.idServico.arr);
            xml->addItem("plano",(char*)DadosOraLinha.nmServico.arr);
            xml->addItem("dtHabilitacao",(char*)DadosOraLinha.dtHabilitacao.arr);
            xml->addItem("idUFOperadora",(char*)DadosOraLinha.idUfOperadora.arr);
            xml->addItem("nrProtocoloPortabilidade",(char*)DadosOraLinha.nrProtocoloPortabilidade.arr);
            xml->addItem("nrConta",(char*)DadosOraLinha.cdConta.arr);

            xml->closeTag();
        }

        if ( 1 == indicador )
        {
            EXEC SQL CLOSE crsPOLnUsr1;
        }
        else if ( 2 == indicador )
        {
            EXEC SQL CLOSE crsPOLnUsr2;
        }
        else if ( 3 == indicador )
        {
            EXEC SQL CLOSE crsPOLnUsr3;
        }
    }
    catch(...)
    {
        throw;
    }

    ULOG_END("get_linhasPout(int usuario, DOMNode*dnode, XMLGen*xml,char *idAtendimento,char *idPessoaUsuarioAtual)");

    return 1;
}

/**
    Obtém parâmetros de portabilidade
*/
bool obterGrupoAberturaPortout(XMLGen*xml,const char *idAtendimento /*cdFuncionalidade*/)
{
    ULOG_START("bool obterGrupoAberturaPortout(XMLGen*xml,const char *idAtendimento)");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        //const char *pOraCdFuncionalidade = cdFuncionalidade;
        const char *pOraIdAtendimento = idAtendimento;
        VARCHAR idGrupoAbertura[32];
        short i_idGrupoAbertura;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    try
    {
        ULOG("idAtendimento = %s",pOraIdAtendimento);

        EXEC SQL
            SELECT
                IDGRUPOABERTURA
            INTO
                :idGrupoAbertura:i_idGrupoAbertura
            FROM
                ATENDIMENTO.ATENDIMENTO
            WHERE
                IDATENDIMENTO = :pOraIdAtendimento;

            //SELECT
            //    IDGRUPOABERTURA
            //INTO
            //    :idGrupoAbertura:i_idGrupoAbertura
            //FROM 
            //    CONTATOADM.CONTATOFUNCIONALIDADE
            //WHERE
            //    CDFUNCIONALIDADE = :pOraCdFuncionalidade;

        if ( 0 == sqlca.sqlcode )
        {
            CONVIND(idGrupoAbertura,i_idGrupoAbertura);

            ULOG("idGrupoAbertura = %s",(char*)idGrupoAbertura.arr);

            xml->addItem("idGrupoAbertura",(char*)idGrupoAbertura.arr);
        }
        else
        {
            xml->addItem("idGrupoAbertura","");

            ULOG("idGrupoAbertura NAO ENCONTRADO");
        }
    }
    catch(...)
    {
        throw;
    }

    ULOG_END("bool obterGrupoAberturaPortout(XMLGen*xml,const char *idAtendimento)");

    return sqlca.sqlcode == 0 ? true : false;
}
