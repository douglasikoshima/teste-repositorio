

#include "../../negocio/fidutil/include/retencao.hpp"
#include <string>

using namespace std;


// Prototipo
void procVolumeDiario( DOMNode * dnode, int * TotalAprovadosPrm, int * TotalReprovadosPrm );

/*
 *
 */
void procVolumeDiario( DOMNode * dnode, int * TotalAprovadosPrm, int * TotalReprovadosPrm )
{
    char parm[30];
    int idRegional = 0;
    int idSegmento = 0;
    int idGrupo = 0;
    char dtInicialPrm[15];
    char dtFinalPrm[15];
    string dyn_statement;
    char buffer[25];

    EXEC SQL BEGIN DECLARE SECTION;
        
        int i_TotalAprovados = 0;
        int i_TotalReprovados = 0;
        int idUsuarioFiltro = 0;
        char LoginUsuario[25];
        char * query;

    EXEC SQL END DECLARE SECTION;

    memset( parm        , 0x0, sizeof(parm) );
    memset( dtInicialPrm, 0x0, sizeof(dtInicialPrm) );
    memset( dtFinalPrm  , 0x0, sizeof(dtFinalPrm) );
    memset( LoginUsuario, 0x0, sizeof(LoginUsuario) );
    // Carrega Parametros de Filtro, vindos do XML de entrada
    get_tag( parm,dnode,"idsOperadoras",0,-1 );  // -1 Torna o elemento nao obrigatorio  
    if ( parm != NULL )
        idRegional = atoi( parm );

    memset( parm        , 0x0, sizeof(parm) );
    get_tag( parm,dnode,"Classificacao",0,-1 );  // -1 Torna o elemento nao obrigatorio
    if ( parm != NULL )
        idSegmento = atoi( parm );

    memset( parm        , 0x0, sizeof(parm) );
    get_tag( parm,dnode,"Grupo",0,-1 );  // -1 Torna o elemento nao obrigatorio
    if ( parm != NULL )
        idGrupo = atoi( parm );

    memset( parm        , 0x0, sizeof(parm) );
    get_tag( parm,dnode,"DataInicio",0,-1 );
    if ( parm != NULL )
        strcpy( dtInicialPrm, parm );

    memset( parm        , 0x0, sizeof(parm) );
    get_tag( parm,dnode,"DataFim",0,-1 );
    if ( parm != NULL )
        strcpy( dtFinalPrm, parm );

    memset( parm        , 0x0, sizeof(parm) );
    get_tag( parm,dnode,"Operador",0,-1 );
    if ( parm != NULL )
        strcpy( LoginUsuario, parm );


    EXEC SQL WHENEVER SQLERROR DO sql_error( NULL );

    if ( strlen(LoginUsuario) > 0 )
    {
       EXEC SQL
         SELECT 
            USUARIO.IDPESSOAUSUARIO
         INTO
            :idUsuarioFiltro
         FROM    
            ACESSO.USUARIO USUARIO
         WHERE
            UPPER(USUARIO.NMLOGINUSUARIO) = UPPER(:LoginUsuario);
    }

    if ( idUsuarioFiltro == 0 )
    {
       ULOGW( "Usuario [%s], nao foi encontrado...\n",LoginUsuario );
    }

    dyn_statement =
        "SELECT "
            "COUNT(1) "
        "FROM "
            "RETENCAO.RELANALISECREDITO "
        "WHERE "
            "INAPROVADO = 1 ";   // Aprovados

    if ( idRegional > 0 )
    {
        dyn_statement +=
            "AND "
               "IDREGIONAL = ";
        sprintf( buffer, "%d", idRegional );
        dyn_statement += buffer;

    }

    if ( idSegmento > 0 )
    {
        dyn_statement +=
            " AND "
               "IDSEGMENTACAO = ";
        sprintf( buffer, "%d", idSegmento );
        dyn_statement += buffer;
    }

    if ( idGrupo > 0 )
    {
        dyn_statement +=
            " AND "
               "IDGRUPO = ";
        sprintf( buffer, "%d", idGrupo );
        dyn_statement += buffer;
    }


    if ( idUsuarioFiltro > 0 )
    {
        dyn_statement +=
            " AND "
               "IDUSUARIOALTERACAO = ";
        sprintf( buffer, "%d", idUsuarioFiltro );
        dyn_statement += buffer;
    }

    if ( strlen(dtInicialPrm) > 0 )
    {
        dyn_statement +=
        " AND "
            "DTCONSULTA "
        "BETWEEN "
            "TO_DATE( '";
        dyn_statement += dtInicialPrm;
        dyn_statement += "','DD/MM/YYYY' )";

        dyn_statement +=
        " AND "
            "TO_DATE( '";
        dyn_statement += dtFinalPrm;
        dyn_statement += "','DD/MM/YYYY' )";
    }

    query = (char *)dyn_statement.c_str();
    ULOG( "Query Aprovados[%s]\n",query );

    EXEC SQL PREPARE crsAprovados FROM :query;
    EXEC SQL DECLARE consultaAprovados CURSOR FOR crsAprovados;

    EXEC SQL OPEN consultaAprovados;
    EXEC SQL FETCH consultaAprovados
         INTO :i_TotalAprovados;
    EXEC SQL CLOSE consultaAprovados;

    dyn_statement =
        "SELECT "
            "COUNT(1) "
        "FROM "
             "RETENCAO.RELANALISECREDITO "
        "WHERE "
            "INAPROVADO = 0 ";         // Reprovados

    if ( idRegional > 0 )
    {
        dyn_statement +=
            "AND "
               "IDREGIONAL = ";
        sprintf( buffer, "%d", idRegional );
        dyn_statement += buffer;

    }

    if ( idSegmento > 0 )
    {
        dyn_statement +=
            " AND "
               "IDSEGMENTACAO = ";
        sprintf( buffer, "%d", idSegmento );
        dyn_statement += buffer;
    }

    if ( idGrupo > 0 )
    {
        dyn_statement +=
            " AND "
               "IDGRUPO = ";
        sprintf( buffer, "%d", idGrupo );
        dyn_statement += buffer;
    }


    if ( idUsuarioFiltro > 0 )
    {
        dyn_statement +=
            " AND "
               "IDUSUARIOALTERACAO = ";
        sprintf( buffer, "%d", idUsuarioFiltro );
        dyn_statement += buffer;
    }

    if ( strlen(dtInicialPrm) > 0 )
    {
        dyn_statement +=
        " AND "
            "DTCONSULTA "
        "BETWEEN "
            "TO_DATE( '";
        dyn_statement += dtInicialPrm;
        dyn_statement += "','DD/MM/YYYY' )";

        dyn_statement +=
        " AND "
            "TO_DATE( '";
        dyn_statement += dtFinalPrm;
        dyn_statement += "','DD/MM/YYYY' )";
    }

    query = (char *)dyn_statement.c_str();
    ULOG( "Query Reprovados[%s]\n",query );

    EXEC SQL PREPARE crsReprovados FROM :query;
    EXEC SQL DECLARE consultaReprovados CURSOR FOR crsReprovados;

    EXEC SQL OPEN consultaReprovados;
    EXEC SQL FETCH consultaReprovados
         INTO :i_TotalReprovados;
    EXEC SQL CLOSE consultaReprovados;

    *TotalAprovadosPrm = i_TotalAprovados;
    *TotalReprovadosPrm = i_TotalReprovados;


}


