//
// $Id: ins_aparelho.pcpp,v 1.1.2.2.34.1 2011/08/29 19:10:22 a5114878 Exp $
//
#include "../../negocio/fidutil/include/retencao.hpp"


int ins_aparelho( int usuario, DOMNode * dnode, XMLGen * xml );
void InsPessoaParcela( int usuario, DOMNode * dnode, XMLGen * xml );


int ins_aparelho( int usuario, DOMNode * dnode, XMLGen * xml )
{
    char parm[256];
    char bf[11];
    int i = 0;
    int  iTipoAparelho = -1;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR   idAparelho[40];
        VARCHAR   idAparelhoCor[40];
        VARCHAR   idMarca[40];
        VARCHAR   dsModelo[256];
        int       idPessoaUsuarioInclusao;
        VARCHAR   idCor[40];
        VARCHAR   cdSAP[256];
        VARCHAR   vlPreco[64];
        
        int       inAtivo;
        int       inTipoAparelho = 1; // Aparelho CDMA
        short     i_idAparelho = -1;
        short     i_idAparelhoCor = -1;
    EXEC SQL END DECLARE SECTION;
    
    memset( &cdSAP,0x0,sizeof(cdSAP) );

    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    try
    {
        get_tag( parm,dnode,"idMarca", 0, 0 );
        strToOra( idMarca, parm );

        get_tag( parm,dnode,"dsModelo", 0, 0 );
        strToOra( dsModelo, parm );




        idPessoaUsuarioInclusao  = usuario;

        parm[0] = 0x0;
        get_tag( parm, dnode, "inTipoAparelho", 0, -1 );
        inTipoAparelho = (parm[0] != 0x0) ? atoi(parm):1;
    
		ULOG( "--> idMarca        [%s]", (char *)idMarca.arr );
		ULOG( "--> dsModelo       [%s]", (char *)dsModelo.arr );
		ULOG( "--> inTipoAparelho [%d]", inTipoAparelho );
        
		// Verificar existencia do aparelho
        EXEC SQL 
        SELECT 
            IDAPARELHO
        INTO  
            :idAparelho:i_idAparelho
        FROM  
            RETENCAO.APARELHO
        WHERE 
            IDMARCA = :idMarca
        AND   
            UPPER(TRIM(DSMODELO)) = UPPER(TRIM(:dsModelo))
        AND 
            IDTIPOAPARELHO = :inTipoAparelho
        AND 
            INATIVO = 1
        AND 
            ROWNUM < 2;
    
        // Se existe um aparelho ativo : gerar um erro 
        if ( i_idAparelho != -1 ) 
            throw new TuxBasicSvcException( NOKFID,"Aparelho jah existe" );
  
        ULOG("---- inserindo no Aparelho ---- \n");
        ULOG_VAR(idMarca);
        ULOG_VAR(dsModelo);
        ULOG_INT(idPessoaUsuarioInclusao);
  
        // Insercoes  
        if ( i_idAparelho == -1 )
        {
            ULOG( ">>> Realizando inclusao de aparelho.\n" );
            
            EXEC SQL 
            SELECT RETENCAO.APARELHOSQ.NEXTVAL INTO :idAparelho FROM DUAL;
            
            endOraStr( idAparelho );
            ULOG_VAR(idAparelho);
    
            EXEC SQL 
            INSERT INTO RETENCAO.APARELHO
            (
                IDAPARELHO,
                IDMARCA,
                DSMODELO,
                IDPESSOAUSUARIOINCLUSAO,
                DTINCLUSAO,
                IDPESSOAUSUARIOALTERACAO,
                DTALTERACAO,
                IDUSUARIOALTERACAO,
                DTULTIMAALTERACAO,
                INATIVO,
                IDTIPOAPARELHO
            )
            VALUES
            (
                :idAparelho, 
                :idMarca, 
                :dsModelo,
                :idPessoaUsuarioInclusao, 
                sysdate,
                :idPessoaUsuarioInclusao, 
                sysdate,
                :idPessoaUsuarioInclusao, 
                sysdate,
                1,
                :inTipoAparelho
            ); 
    
        }
        else
        { 
            ULOG( ">>> Aparelho encontrado na base, atualizando...\n" );
            EXEC SQL 
            UPDATE RETENCAO.APARELHO
            SET IDPESSOAUSUARIOINCLUSAO = :idPessoaUsuarioInclusao,
                DTINCLUSAO = SYSDATE,
                IDPESSOAUSUARIOALTERACAO = :idPessoaUsuarioInclusao,
                DTALTERACAO = SYSDATE,
                IDUSUARIOALTERACAO = :idPessoaUsuarioInclusao,
                DTULTIMAALTERACAO = SYSDATE,
                INATIVO = 1,
                IDMARCA = :idMarca,
                DSMODELO = :dsModelo,
                IDTIPOAPARELHO = :inTipoAparelho
           WHERE 
                IDAPARELHO = :idAparelho;
        }

        ULOG( ">>> Inserindo cores\n" );
        i= 0;
    
		TuxHelper txh;
		DOMNode* dnCoresIncluir=NULL;				
	
		int iIndex;
		for ( iIndex=0;;iIndex++ )
        {
			dnCoresIncluir = txh.walkDOM( dnode, "coresIncluir", iIndex );
			if ( dnCoresIncluir == NULL )
				break;

			get_tag(parm,dnCoresIncluir,"idIncluir",0,-1);
            strToOra( idCor,parm );

			get_tag( parm, dnCoresIncluir, "codigoSAP", 0, -1 );
			if ( parm[0] != 0x0 )
			{
				strToOra( cdSAP, parm );
				//ULOG_VAR( cdSAP );
			}

			get_tag( parm, dnCoresIncluir, "valorAparelho", 0, 0 );
			int j=0;
			memset( bf, 0x0, sizeof(bf) );
			for(i=0;i<11;i++)
			{
				if (parm[i] == '.')
				   continue;
				if (parm[i] == 0x0)
				   break;
				bf[j] = parm[i];
				j++;
			}
			strToOra( vlPreco, bf );
			ULOG_VAR( vlPreco );
			

            ULOG("*** Procurando aparelhoCor existente\n");
            EXEC SQL 
            SELECT 
                IDAPARELHOCOR 
            INTO 
                :idAparelhoCor:i_idAparelhoCor 
            FROM 
                RETENCAO.APARELHOCOR
            WHERE 
                IDAPARELHO = :idAparelho
            AND   
                IDCOR = :idCor;

            endOraStr( idAparelhoCor );
            ULOG_VAR( idAparelhoCor );

            if ( i_idAparelhoCor != -1 )
            {
                ULOG( ">>> AparelhoCor encontrado, realizando UPDATE\n" );

                EXEC SQL 
                UPDATE RETENCAO.APARELHOCOR
                SET IDPESSOAUSUARIOINCLUSAO = :idPessoaUsuarioInclusao,
                    DTINCLUSAO = SYSDATE,
                    IDPESSOAUSUARIOALTERACAO = :idPessoaUsuarioInclusao,
                    DTALTERACAO = SYSDATE,
                    IDUSUARIOALTERACAO = :idPessoaUsuarioInclusao,
                    DTULTIMAALTERACAO = SYSDATE,
                    INATIVO = 1,
                    CDSAPAPARELHO = :cdSAP,
                    VLAPARELHO = TO_NUMBER( :vlPreco, '9999999D99' )
                WHERE 
                    IDAPARELHOCOR = :idAparelhoCor;
            }
            else
            {
                ULOG( ">>> AparelhoCor nao encontrado -> INSERT\n" );
                EXEC SQL     
                INSERT INTO RETENCAO.APARELHOCOR
                (
                    IDAPARELHOCOR,
                    IDAPARELHO,
                    IDCOR,
                    IDPESSOAUSUARIOINCLUSAO,
                    DTINCLUSAO,
                    IDPESSOAUSUARIOALTERACAO,
                    DTALTERACAO,
                    IDUSUARIOALTERACAO,
                    DTULTIMAALTERACAO,
                    INATIVO,
                    CDSAPAPARELHO,
                    VLAPARELHO
                )
                values
                (
                    RETENCAO.APARELHOCORSQ.NEXTVAL, 
                    :idAparelho,
                    :idCor,
                    :idPessoaUsuarioInclusao,
                    sysdate,
                    :idPessoaUsuarioInclusao,
                    sysdate,
                    :idPessoaUsuarioInclusao,
                    sysdate,
                    1,
                    :cdSAP,
                    TO_NUMBER( replace(:vlPreco,',','.'), '9999999D99' )
                ); 
            }
        }

		ULOG( "Foram inseridos [%d] TAGs <coresIncluir>", iIndex );	
		xml->addItem("descricao","INSERIDO");
		xml->addItem("valor",iIndex);
        ULOG("Insert OK\n");

    }
    catch(...)
    {
        throw;
    }

  return 1;
}



void InsPessoaParcela( int usuario, DOMNode * dnode, XMLGen * xml )
{
    ULOG_START( "InsPessoaParcela()" );
    
    EXEC SQL BEGIN DECLARE SECTION;
        char idTipoPessoaPrm[64];
        char vlrMinimo[64];
        char idUsuarioAlteracao[64];
        char idTipoPessoa[100][64];
        char idParcela[100][64];
        char idUsuario[100][64];
        int  nrLinhas = 1;
    EXEC SQL END DECLARE SECTION;
    
    int i = 0;
    int idx;
    char parm[256];

    try
    {
		TuxHelper txh;
		DOMNode* dnParcelasIncluir=NULL;
        parm[0] = 0x0;
	
        get_tag( parm, dnode, "idTipoPessoa", 0, -1 );
        if ( parm[0] != 0x0 )
        {
            sprintf( idTipoPessoaPrm, "%s", parm );
            parm[0] = 0x0;

            EXEC SQL
            DELETE FROM RETENCAO.TIPOPESSOAPARCELA WHERE IDTIPOPESSOA = :idTipoPessoaPrm ;
            
            get_tag( parm, dnode, "valorMinimo", 0, -1 );
            sprintf( vlrMinimo, "%s", parm );
            parm[0] = 0x0;
            
            ULOG( "vlrMinimo [%s]", vlrMinimo );
            
            sprintf( idUsuarioAlteracao, "%d", usuario );
            
            if ( !strcmp(idTipoPessoaPrm,"1") )
            {
                EXEC SQL
                UPDATE APOIO.PARAMETRO
                   SET DSVALORPARAMETRO = :vlrMinimo ,
                       IDUSUARIOALTERACAO = :idUsuarioAlteracao ,
                       DTULTIMAALTERACAO = SYSDATE
                WHERE CDPARAMETRO = 'PF_VLR_PARC_MIN';
            }
            else
            {
                EXEC SQL
                UPDATE APOIO.PARAMETRO
                   SET DSVALORPARAMETRO = :vlrMinimo ,
                       IDUSUARIOALTERACAO = :idUsuarioAlteracao ,
                       DTULTIMAALTERACAO = SYSDATE
                WHERE CDPARAMETRO = 'PJ_VLR_PARC_MIN';
            }

            dnParcelasIncluir = txh.walkDOM( dnode, "Parcelas", 0 );
            
            for ( idx=0;;idx++ )
            {
                get_tag( parm, dnParcelasIncluir, "id", idx, -1 );
                if ( parm[0] != 0x0 )
                {
                    sprintf( idParcela[idx], "%s", parm );
                    sprintf( idTipoPessoa[idx], "%s", idTipoPessoaPrm );
                    sprintf( idUsuario[idx], "%d", usuario );

                    ULOG( "idTipoPessoa [%s] - Indice [%d]", idTipoPessoa[idx], idx );
                    ULOG( "idParcela    [%s] - Indice [%d]", idParcela[idx], idx );
                    ULOG( "idUsuario    [%s] - Indice [%d]", idUsuario[idx], idx );
                    parm[0] = 0x0;
                }
                else
                   break;
            }
        }
            
        nrLinhas = (idx > 1) ? idx-- : 1 ;
        
        ULOG( ">>> Inserindo %d registros", nrLinhas );
        
        EXEC SQL FOR :nrLinhas
        INSERT INTO RETENCAO.TIPOPESSOAPARCELA 
        (
          IDTIPOPESSOA ,
          IDPARCELA ,
          IDUSUARIOALTERACAO 
        )
        VALUES
        (
           :idTipoPessoa ,
           :idParcela ,
           :idUsuario
        );
		xml->addItem("descricao","INSERIDO");
		xml->addItem("valor",nrLinhas);
    }
    catch ( ... )
    {
        ULOG( ">>> ERRO AO ASSOCIAR AS PARCELAS" );
        ULOG_END( "*** InsPessoaParcela()" );
        throw;
    }

    ULOG_END( "InsPessoaParcela()" );
}
