#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "LinhaContapcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CLinhaContapc::proCInsereLinhaConta(TLinhaConta *ptLinhaConta)
{
    ULOG_START("CLinhaContapc::proCInsereLinhaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaConta[LEN_IDLINHACONTA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszDtLinhaConta[LEN_DTLINHACONTA];
        VARCHAR oszInLinhaMaster[LEN_INLINHAMASTER];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* copia os valores passados como parametro para as variaveis pro-c */
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptLinhaConta->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdConta, ptLinhaConta->szIdConta);
    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptLinhaConta->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszDtLinhaConta, ptLinhaConta->szDtLinhaConta);
    STRCPY_TO_ORA(oszInLinhaMaster, ptLinhaConta->szInLinhaMaster);
    STRCPY_TO_ORA(oszTsSincronismo, ptLinhaConta->szTsSincronismo);
    STRCPY_TO_ORA(oszSqSincronismo, ptLinhaConta->szSqSincronismo);
    STRCPY_TO_ORA(oszDtExpiracao, ptLinhaConta->szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptLinhaConta->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    
    EXEC SQL SELECT customer.linhacontasq.nextval INTO :oszIdLinhaConta FROM DUAL;
    STRCPY_FROM_ORA(ptLinhaConta->szIdLinhaConta, oszIdLinhaConta);

    EXEC SQL INSERT INTO customer.linhaconta
                       ( idlinhaconta
                       , idlinhatelefonica
                       , idconta
                       , idtiporelacionamento
                       , dtlinhaconta
                       , inlinhamaster
                       , tssincronismo
                       , sqsincronismo
                       , dtexpiracao
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( TO_NUMBER(:oszIdLinhaConta)
                       , TO_NUMBER(:oszIdLinhaTelefonica)
                       , TO_NUMBER(:oszIdConta)
                       , TO_NUMBER(:oszIdTipoRelacionamento)
                       , TO_DATE(:oszDtLinhaConta, 'YYYYMMDDHH24MISS')
                       , TO_NUMBER(:oszInLinhaMaster)
                       , TO_NUMBER(:oszTsSincronismo)
                       , TO_NUMBER(:oszSqSincronismo)
                       , TO_DATE( decode( length( :oszDtExpiracao ),  0, NULL
                                                                   ,  8, :oszDtExpiracao || TO_CHAR(SYSDATE,'hhMIss')
                                                                   , 14, :oszDtExpiracao
                                                                   , NULL ), 'YYYYMMDDHH24MISS' )
                       , TO_NUMBER(:oszIdUsuarioAlteracao)
                       , SYSDATE );


    ULOGI("Finalizando proCInsereLinhaConta <OK>");
    ULOG_END("CLinhaContapc::proCInsereLinhaConta");
    return;

    erro:
        ULOGE("Finalizando proCInsereLinhaConta <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CLinhaContapc::proCBuscaLinhaConta(TLinhaConta *ptLinhaConta)
{
    ULOG_START("CLinhaContapc::proCBuscaLinhaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaConta[LEN_IDLINHACONTA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszDtLinhaConta[LEN_DTLINHACONTA];
        VARCHAR oszInLinhaMaster[LEN_INLINHAMASTER];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdLinhaConta = 0;
        short iIdLinhaTelefonica = 0;
        short iIdConta = 0;
        short iIdTipoRelacionamento = 0;
        short iDtLinhaConta = 0;
        short iInLinhaMaster = 0;
        short iTsSincronismo = 0;
        short iSqSincronismo = 0;
        short iDtExpiracao = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptLinhaConta->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptLinhaConta->szIdTipoRelacionamento);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR(idlinhaconta)
                  , TO_CHAR(idlinhatelefonica)
                  , TO_CHAR(idconta)
                  , TO_CHAR(idtiporelacionamento)
                  , TO_CHAR(dtlinhaconta, 'YYYYMMDDHH24MISS')
                  , TO_CHAR(inlinhamaster)
                  , TO_CHAR(tssincronismo)
                  , TO_CHAR(sqsincronismo)
                  , TO_CHAR(dtexpiracao, 'YYYYMMDDHH24MISS')
                  , TO_CHAR(idusuarioalteracao)
                  , TO_CHAR(dtultimaalteracao, 'YYYYMMDDHH24MISS')
               INTO oszIdLinhaConta:iIdLinhaConta
                  , oszIdLinhaTelefonica:iIdLinhaTelefonica
                  , oszIdConta:iIdConta
                  , oszIdTipoRelacionamento:iIdTipoRelacionamento
                  , oszDtLinhaConta:iDtLinhaConta
                  , oszInLinhaMaster:iInLinhaMaster
                  , oszTsSincronismo:iTsSincronismo
                  , oszSqSincronismo:iSqSincronismo
                  , oszDtExpiracao:iDtExpiracao
                  , oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.LinhaConta
              WHERE idlinhatelefonica = TO_NUMBER(:oszIdLinhaTelefonica)
                AND idtiporelacionamento = TO_NUMBER(:oszIdTipoRelacionamento)
                AND NVL(dtexpiracao,SYSDATE) >= SYSDATE;
                //AND ((dtexpiracao is null) OR (dtexpiracao >= SYSDATE));

    /* copia os dados obtidos para a estrutura passada como parametro */
    if(iIdLinhaConta != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szIdLinhaConta, oszIdLinhaConta);
    }
    if(iIdLinhaTelefonica != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szIdLinhaTelefonica, oszIdLinhaTelefonica);
    }
    if(iIdConta != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szIdConta, oszIdConta);
    }
    if(iIdTipoRelacionamento != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szIdTipoRelacionamento, oszIdTipoRelacionamento);
    }
    if(iDtLinhaConta != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szDtLinhaConta, oszDtLinhaConta);
    }
    if(iInLinhaMaster != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szInLinhaMaster, oszInLinhaMaster);
    }
    if(iTsSincronismo != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szTsSincronismo, oszTsSincronismo);
    }
    if(iSqSincronismo != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szSqSincronismo, oszSqSincronismo);
    }
    if(iDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szDtExpiracao, oszDtExpiracao);
    }
    if(iIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if(iDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptLinhaConta->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }


    ULOGI("Finalizada proCBuscaLinhaConta <FOUND>");
    ULOG_END("CLinhaContapc::proCBuscaLinhaConta");
    return true;

    naoexiste:
        ULOGI("Finalizada proCBuscaLinhaConta <NOT FOUND>");
        ULOG_END("CLinhaContapc::proCBuscaLinhaConta");
        return false;

    erro:
        ULOGE("Finalizada proCBuscaLinhaConta <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CLinhaContapc::proCAtualizaLinhaConta(TLinhaConta tLinhaConta)
{
    ULOG_START("CLinhaContapc::proCAtualizaLinhaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaConta[LEN_IDLINHACONTA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszDtLinhaConta[LEN_DTLINHACONTA];
        VARCHAR oszInLinhaMaster[LEN_INLINHAMASTER];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaConta, tLinhaConta.szIdLinhaConta);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, tLinhaConta.szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdConta, tLinhaConta.szIdConta);
    STRCPY_TO_ORA(oszIdTipoRelacionamento, tLinhaConta.szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszDtLinhaConta, tLinhaConta.szDtLinhaConta);
    STRCPY_TO_ORA(oszInLinhaMaster, tLinhaConta.szInLinhaMaster);
    STRCPY_TO_ORA(oszTsSincronismo, tLinhaConta.szTsSincronismo);
    STRCPY_TO_ORA(oszSqSincronismo, tLinhaConta.szSqSincronismo);
    STRCPY_TO_ORA(oszDtExpiracao, tLinhaConta.szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tLinhaConta.szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    EXEC SQL UPDATE customer.linhaconta
                SET idlinhaconta         = TO_NUMBER(:oszIdLinhaConta)
                  , idlinhatelefonica    = TO_NUMBER(:oszIdLinhaTelefonica)
                  , idconta              = TO_NUMBER(:oszIdConta)
                  , idtiporelacionamento = TO_NUMBER(:oszIdTipoRelacionamento)
                  , dtlinhaconta         = TO_DATE(:oszDtLinhaConta, 'YYYYMMDDHH24MISS')
                  , inlinhamaster        = TO_NUMBER(:oszInLinhaMaster)
                  , tssincronismo        = TO_NUMBER(:oszTsSincronismo)
                  , sqsincronismo        = TO_NUMBER(:oszSqSincronismo)
                  , idusuarioalteracao   = TO_NUMBER(:oszIdUsuarioAlteracao)
                  , dtexpiracao          = TO_DATE( decode( length( :oszDtExpiracao ),  0, NULL
                                                                                     ,  8, :oszDtExpiracao || TO_CHAR(SYSDATE,'hhMIss')
                                                                                     , 14, :oszDtExpiracao
                                                                                     , NULL ), 'YYYYMMDDHH24MISS' )
                  , dtultimaalteracao    = SYSDATE
              WHERE idLinhaConta         = TO_NUMBER(:oszIdLinhaConta);

    ULOGI("Finalizando proCAtualizaLinhaConta <OK>");
    ULOG_END("CLinhaContapc::proCAtualizaLinhaConta");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaLinhaConta <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
