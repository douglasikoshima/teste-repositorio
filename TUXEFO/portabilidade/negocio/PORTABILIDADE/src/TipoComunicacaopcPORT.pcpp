#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "TipoComunicacaopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CTipoComunicacaopc::proCBuscaIdTipoComunicacao(TTipoComunicacao *ptTipoComunicacao)
{
    ULOG_START("CTipoComunicacaopc::proCBuscaIdTipoComunicacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszSgTipoComunicacao[LEN_SGTIPOCOMUNICACAO];
        VARCHAR oszDsTipoComunicacao[LEN_DSTIPOCOMUNICACAO + LEN_EOS];
        VARCHAR oszIdFormaRetorno[LEN_IDFORMARETORNO + LEN_EOS];
        VARCHAR oszSgClassificacao[LEN_SGCLASSIFICACAO + LEN_EOS];

        short iIdTipoComunicacao = 0;
        short iSgTipoComunicacao = 0;
        short iDsTipoComunicacao = 0;
        short iIdFormaRetorno = 0;
        short iSgClassificacao = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszSgTipoComunicacao, ptTipoComunicacao->szSgTipoComunicacao);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT
            atc.idtipocomunicacao,
            atc.sgtipocomunicacao,
            atc.dstipocomunicacao,
            atc.idformaretorno,
            atc.sgclassificacao
        INTO
            :oszIdTipoComunicacao:iIdTipoComunicacao,
            :oszSgTipoComunicacao:iSgTipoComunicacao,
            :oszDsTipoComunicacao:iDsTipoComunicacao,
            :oszIdFormaRetorno:iIdFormaRetorno,
            :oszSgClassificacao:iSgClassificacao
        FROM
            apoio.tipocomunicacao atc
        WHERE
            atc.sgclassificacao = 'TELEFONE'
        AND
            atc.sgtipocomunicacao = :oszSgTipoComunicacao;



    if(iIdTipoComunicacao != -1) {
        STRCPY_FROM_ORA(ptTipoComunicacao->szIdTipoComunicacao, oszIdTipoComunicacao);
    }

    if(iSgTipoComunicacao != -1) {
        STRCPY_FROM_ORA(ptTipoComunicacao->szSgTipoComunicacao, oszSgTipoComunicacao);
    }

    if(iDsTipoComunicacao != -1) {
        STRCPY_FROM_ORA(ptTipoComunicacao->szDsTipoComunicacao, oszDsTipoComunicacao);
    }

    if(iIdFormaRetorno != -1) {
        STRCPY_FROM_ORA(ptTipoComunicacao->szIdFormaRetorno, oszIdFormaRetorno);
    }

    if(iSgClassificacao != -1) {
        STRCPY_FROM_ORA(ptTipoComunicacao->szSgClassificacao, oszSgClassificacao);
    }


    ULOGI("Finalizando proCBuscaIdTipoComunicacao <OK>");
    ULOG_END("CTipoComunicacaopc::proCBuscaIdTipoComunicacao");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaIdTipoComunicacao <NOT FOUND>");
        ULOG_END("CTipoComunicacaopc::proCBuscaIdTipoComunicacao");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaIdTipoComunicacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
