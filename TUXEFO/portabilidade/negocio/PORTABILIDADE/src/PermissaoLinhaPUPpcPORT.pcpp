#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PermissaoLinhaPUPpcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CPermissaoLinhaPUPpc::proCInserePermissaoLinhaPUP(TPermissaoLinhaPUP *ptPermissaoLinhaPUP)
{
    ULOG_START("CPermissaoLinhaPUPpc::proCInserePermissaoLinhaPUP");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszSgPermissaoPUP[LEN_SGPERMISSAOPUP];
        VARCHAR oszInAtivo[LEN_INATIVO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
		VARCHAR oszInProcon[LEN_INPROCON];
		VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
		VARCHAR oszIdCanal[LEN_IDCANAL];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPermissaoLinhaPUP->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszSgPermissaoPUP, ptPermissaoLinhaPUP->szSgPermissaoPUP);
    STRCPY_TO_ORA(oszInAtivo, ptPermissaoLinhaPUP->szInAtivo);
    STRCPY_TO_ORA(oszDtExpiracao, ptPermissaoLinhaPUP->szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPermissaoLinhaPUP->szIdUsuarioAlteracao);
    STRCPY_TO_ORA(oszInProcon, ptPermissaoLinhaPUP->szInProcon);
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptPermissaoLinhaPUP->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszIdCanal, ptPermissaoLinhaPUP->szIdCanal);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL
        INSERT INTO LINHA.PERMISSAOLINHAPUP
    	( 
            IDLINHATELEFONICA,
            SGPERMISSAOPUP,
            INATIVO,
            DTEXPIRACAO,
            IDUSUARIOALTERACAO,
            DTULTIMAALTERACAO,
            INPROCON,
            IDSISTEMAORIGEM,
            IDCANAL
    	)
    	VALUES 
    	( 
            :oszIdLinhaTelefonica,
            :oszSgPermissaoPUP,
            :oszInAtivo,
            SYSDATE + :oszDtExpiracao,
            :oszIdUsuarioAlteracao,
            SYSDATE,
            :oszInProcon,
            :oszIdSistemaOrigem,
            :oszIdCanal
    	);

    ULOGI("Finalizando proCInserePermissaoLinhaPUP <OK>");
    ULOG_END("CPermissaoLinhaPUPpc::proCInserePermissaoLinhaPUP");
    return;

    erro:
        ULOGE("Finalizando proCInserePermissaoLinhaPUP <ERROR>");
        ULOG_END("CPermissaoLinhaPUPpc::proCInserePermissaoLinhaPUP");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPermissaoLinhaPUPpc::proCAlteraCadastroLinhaPUP(TPermissaoLinhaPUP *ptPermissaoLinhaPUP)
{
    ULOG_START("CPermissaoLinhaPUPpc::proCAlteraCadastroLinhaPUP");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPermissaoLinhaPUP->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPermissaoLinhaPUP->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL
        UPDATE LINHA.LINHATELEFONICA
        SET 
            DTCADASTROPUP = SYSDATE ,
			IDUSUARIOINCLUSAOPUP = :oszIdUsuarioAlteracao
	    WHERE
	        IDLINHATELEFONICA = :oszIdLinhaTelefonica;

    ULOGI("Finalizando proCAlteraCadastroLinhaPUP <OK>");
    ULOG_END("CPermissaoLinhaPUPpc::proCAlteraCadastroLinhaPUP");
    return;

    erro:
        ULOGE("Finalizando proCAlteraCadastroLinhaPUP <ERROR>");
        ULOG_END("CPermissaoLinhaPUPpc::proCAlteraCadastroLinhaPUP");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CPermissaoLinhaPUPpc::proCBuscaPermissaoLinhaPUP(TPermissaoLinhaPUP *ptPermissaoLinhaPUP)
{
    ULOG_START("CPermissaoLinhaPUPpc::proCBuscaPermissaoLinhaPUP");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszSgPermissaoPUP[LEN_SGPERMISSAOPUP];
        VARCHAR oszInAtivo[LEN_INATIVO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszInProcon[LEN_INPROCON];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdCanal[LEN_IDCANAL];

        short oiIdLinhaTelefonica=0;
        short oiSgPermissaoPUP=0;
        short oiInAtivo=0;
        short oiDtExpiracao=0;
        short oiIdUsuarioAlteracao=0;
		short oiInProcon=0;
		short oiIdSistemaOrigem=0;
		short oiIdCanal=0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPermissaoLinhaPUP->szIdLinhaTelefonica);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL 
    	SELECT
            IDLINHATELEFONICA,
            SGPERMISSAOPUP,
            INATIVO,
            DTEXPIRACAO,
            IDUSUARIOALTERACAO,
            INPROCON,
            IDSISTEMAORIGEM,
            IDCANAL
        INTO 
            :oszIdLinhaTelefonica:oiIdLinhaTelefonica,
            :oszSgPermissaoPUP:oiSgPermissaoPUP,
            :oszInAtivo:oiInAtivo,
            :oszDtExpiracao:oiDtExpiracao,
            :oszIdUsuarioAlteracao:oiIdUsuarioAlteracao,
            :oszInProcon:oiInProcon,
            :oszIdSistemaOrigem:oiIdSistemaOrigem,
            :oszIdCanal:oiIdCanal
        FROM 
            LINHA.PERMISSAOLINHAPUP
    	WHERE
    		IDLINHATELEFONICA = :oszIdLinhaTelefonica;


    if(oiIdLinhaTelefonica != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szIdLinhaTelefonica, oszIdLinhaTelefonica);
    }

    if(oiSgPermissaoPUP != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szSgPermissaoPUP, oszSgPermissaoPUP);
    }

    if(oiInAtivo != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szInAtivo, oszInAtivo);
    }

    if(oiDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szDtExpiracao, oszDtExpiracao);
    }

    if(oiIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }

    if(oiInProcon != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szInProcon, oszInProcon);
    }

    if(oiIdSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szIdSistemaOrigem, oszIdSistemaOrigem);
    }

    if(oiIdCanal != -1) {
        STRCPY_FROM_ORA(ptPermissaoLinhaPUP->szIdCanal, oszIdCanal);
    }

    ULOGI("Finalizando proCBuscaPermissaoLinhaPUP <FOUND>");
    ULOG_END("CPermissaoLinhaPUPpc::proCBuscaPermissaoLinhaPUP");
	return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPermissaoLinhaPUP <NOT FOUND>");
        ULOG_END("CPermissaoLinhaPUPpc::proCBuscaPermissaoLinhaPUP");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPermissaoLinhaPUP <ERROR>");
        ULOG_END("CPermissaoLinhaPUPpc::proCBuscaPermissaoLinhaPUP");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPermissaoLinhaPUPpc::proCApagaPermissaoLinhaPUP(TPermissaoLinhaPUP *ptPermissaoLinhaPUP)
{
    ULOG_START("CPermissaoLinhaPUPpc::proCApagaPermissaoLinhaPUP");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPermissaoLinhaPUP->szIdLinhaTelefonica);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL 
        DELETE FROM 
            LINHA.PERMISSAOLINHAPUP
    	WHERE
    		IDLINHATELEFONICA = :oszIdLinhaTelefonica;

    ULOGI("Finalizando proCApagaPermissaoLinhaPUP <FOUND>");
    ULOG_END("CPermissaoLinhaPUPpc::proCApagaPermissaoLinhaPUP");
	return;

    naoexiste:
        ULOGI("Finalizando proCApagaPermissaoLinhaPUP <NOT FOUND>");
        ULOG_END("CPermissaoLinhaPUPpc::proCApagaPermissaoLinhaPUP");
        return;

    erro:
        ULOGE("Finalizando proCApagaPermissaoLinhaPUP <ERROR>");
        ULOG_END("CPermissaoLinhaPUPpc::proCApagaPermissaoLinhaPUP");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
