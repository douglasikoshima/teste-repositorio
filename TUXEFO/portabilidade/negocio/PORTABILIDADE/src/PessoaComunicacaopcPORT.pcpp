#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaComunicacaopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CPessoaComunicacaopc::proCInserePessoaComunicacao(TPessoaComunicacao *ptPessoaComunicacao)
{
    ULOG_START("CPessoaComunicacaopc::proCInserePessoaComunicacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaComunicacao[LEN_IDPESSOACOMUNICACAO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszDsContato[LEN_DSCONTATO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszIdComunicacaoSistemaOrigem[LEN_IDCOMUNICACAOSISTEMAORIGEM];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszInComunicacaoPreferencial[LEN_INCOMUNICACAOPREFERENCIAL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        VARCHAR oszNmContato[LEN_NMCONTATO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA( oszIdPessoaComunicacao       , ptPessoaComunicacao->szIdPessoaComunicacao       );
    STRCPY_TO_ORA( oszIdPessoa                  , ptPessoaComunicacao->szIdPessoa                  );
    STRCPY_TO_ORA( oszIdTipoComunicacao         , ptPessoaComunicacao->szIdTipoComunicacao         );
    STRCPY_TO_ORA( oszNrSequencia               , ptPessoaComunicacao->szNrSequencia               );
    STRCPY_TO_ORA( oszDsContato                 , ptPessoaComunicacao->szDsContato                 );
    STRCPY_TO_ORA( oszTsSincronismo             , ptPessoaComunicacao->szTsSincronismo             );
    STRCPY_TO_ORA( oszSqSincronismo             , ptPessoaComunicacao->szSqSincronismo             );
    STRCPY_TO_ORA( oszDtCadastro                , ptPessoaComunicacao->szDtCadastro                );
    STRCPY_TO_ORA( oszIdComunicacaoSistemaOrigem, ptPessoaComunicacao->szIdComunicacaoSistemaOrigem);
    STRCPY_TO_ORA( oszIdSistemaOrigem           , ptPessoaComunicacao->szIdSistemaOrigem           );
    STRCPY_TO_ORA( oszDtExpiracao               , ptPessoaComunicacao->szDtExpiracao               );
    STRCPY_TO_ORA( oszInComunicacaoPreferencial , ptPessoaComunicacao->szInComunicacaoPreferencial );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao        , ptPessoaComunicacao->szIdUsuarioAlteracao        );
    STRCPY_TO_ORA( oszDtUltimaAlteracao         , ptPessoaComunicacao->szDtUltimaAlteracao         );
    STRCPY_TO_ORA( oszNmContato                 , ptPessoaComunicacao->szNmContato                 );

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT customer.pessoacomunicacaosq.nextval INTO :oszIdPessoaComunicacao FROM DUAL;

    STRCPY_FROM_ORA(ptPessoaComunicacao->szIdPessoaComunicacao, oszIdPessoaComunicacao);
    STRCPY_FROM_ORA(ptPessoaComunicacao->szIdComunicacaoSistemaOrigem, oszIdPessoaComunicacao);

    EXEC SQL INSERT INTO CUSTOMER.PESSOACOMUNICACAO
                       ( IDPESSOACOMUNICACAO
                       , IDPESSOA
                       , IDTIPOCOMUNICACAO
                       , NRSEQUENCIA
                       , DSCONTATO
                       , TSSINCRONISMO
                       , SQSINCRONISMO
                       , DTCADASTRO
                       , IDCOMUNICACAOSISTEMAORIGEM
                       , IDSISTEMAORIGEM
                       , DTEXPIRACAO
                       , INCOMUNICACAOPREFERENCIAL
                       , IDUSUARIOALTERACAO
                       , DTULTIMAALTERACAO
					   , NMCONTATO )
                VALUES ( :oszIdPessoaComunicacao
                       , :oszIdPessoa
                       , :oszIdTipoComunicacao
                       , :oszNrSequencia
                       , :oszDsContato
                       , :oszTsSincronismo
                       , :oszSqSincronismo
                       , TO_DATE( :oszDtCadastro, 'YYYYMMDDHH24MISS' )
                       , :oszIdPessoaComunicacao
                       , :oszIdSistemaOrigem
                       , TO_DATE( :oszDtExpiracao, 'YYYYMMDDHH24MISS' )
                       , :oszInComunicacaoPreferencial
                       , :oszIdUsuarioAlteracao
                       , SYSDATE
					   , :oszNmContato);


    ULOGI("Finalizando proCInserePessoaComunicacao <OK>");
    ULOG_END("CPessoaComunicacaopc::proCInserePessoaComunicacao");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaComunicacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPessoaComunicacaopc::proCAtualizaPessoaComunicacao( TPessoaComunicacao tDadosPessoaComunicacao )
{
    ULOG_START("CPessoaComunicacaopc::proCAtualizaPessoaComunicacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaComunicacao[LEN_IDPESSOACOMUNICACAO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszDsContato[LEN_DSCONTATO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszInComunicacaoPreferencial[LEN_INCOMUNICACAOPREFERENCIAL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        VARCHAR oszNmContato[LEN_NMCONTATO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA( oszIdPessoaComunicacao       , tDadosPessoaComunicacao.szIdPessoaComunicacao       );
    STRCPY_TO_ORA( oszIdPessoa                  , tDadosPessoaComunicacao.szIdPessoa                  );
    STRCPY_TO_ORA( oszIdTipoComunicacao         , tDadosPessoaComunicacao.szIdTipoComunicacao         );
    STRCPY_TO_ORA( oszNrSequencia               , tDadosPessoaComunicacao.szNrSequencia               );
    STRCPY_TO_ORA( oszDsContato                 , tDadosPessoaComunicacao.szDsContato                 );
    STRCPY_TO_ORA( oszTsSincronismo             , tDadosPessoaComunicacao.szTsSincronismo             );
    STRCPY_TO_ORA( oszSqSincronismo             , tDadosPessoaComunicacao.szSqSincronismo             );
    STRCPY_TO_ORA( oszDtCadastro                , tDadosPessoaComunicacao.szDtCadastro                );
    STRCPY_TO_ORA( oszDtExpiracao               , tDadosPessoaComunicacao.szDtExpiracao               );
    STRCPY_TO_ORA( oszInComunicacaoPreferencial , tDadosPessoaComunicacao.szInComunicacaoPreferencial );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao        , tDadosPessoaComunicacao.szIdUsuarioAlteracao        );
    STRCPY_TO_ORA( oszDtUltimaAlteracao         , tDadosPessoaComunicacao.szDtUltimaAlteracao         );
    STRCPY_TO_ORA( oszNmContato                 , tDadosPessoaComunicacao.szNmContato                 );

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL UPDATE Customer.PessoaComunicacao
                SET idpessoacomunicacao         = :oszIdPessoaComunicacao
                  , idpessoa                    = :oszIdPessoa
                  , idtipocomunicacao           = :oszIdTipoComunicacao
                  , nrsequencia                 = :oszNrSequencia
                  , dscontato                   = :oszDsContato
                  , tssincronismo               = :oszTsSincronismo
                  , sqsincronismo               = :oszSqSincronismo
                  , dtcadastro                  = TO_DATE( :oszDtCadastro, 'YYYYMMDDHH24MISS' )
                  , dtexpiracao                 = TO_DATE( :oszDtExpiracao, 'YYYYMMDDHH24MISS' )
                  , incomunicacaopreferencial   = :oszInComunicacaoPreferencial
                  , idusuarioalteracao          = :oszIdUsuarioAlteracao
                  , dtultimaalteracao           = SYSDATE
				  , NmContato                   = :oszNmContato
              WHERE idpessoacomunicacao         = TO_NUMBER( :oszIdPessoaComunicacao );

    ULOGI("Finalizando proCAtualizaPessoaComunicacao <OK>");
    ULOG_END("CPessoaComunicacaopc::proCAtualizaPessoaComunicacao");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaComunicacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CPessoaComunicacaopc::proCBuscaPessoaComunicacao(TPessoaComunicacao *ptPessoaComunicacao)
{
    ULOG_START("CPessoaComunicacaopc::proCBuscaPessoaComunicacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaComunicacao[LEN_IDPESSOACOMUNICACAO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszDsContato[LEN_DSCONTATO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszIdComunicacaoSistemaOrigem[LEN_IDCOMUNICACAOSISTEMAORIGEM];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszInComunicacaoPreferencial[LEN_INCOMUNICACAOPREFERENCIAL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        VARCHAR oszNmContato[LEN_NMCONTATO];

        // Declaração dos indicadores de NULL
        short osiIdPessoaComunicacaoIND         = 0;
        short osiIdPessoaIND                    = 0;
        short osiIdTipoComunicacaoIND           = 0;
        short osiNrSequenciaIND                 = 0;
        short osiDsContatoIND                   = 0;
        short osiTsSincronismoIND               = 0;
        short osiSqSincronismoIND               = 0;
        short osiDtCadastroIND                  = 0;
        short osiIdComunicacaoSistemaOrigemIND  = 0;
        short osiIdSistemaOrigemIND             = 0;
        short osiDtExpiracaoIND                 = 0;
        short osiInComunicacaoPreferencialIND   = 0;
        short osiIdUsuarioAlteracaoIND          = 0;
        short osiDtUltimaAlteracaoIND           = 0;
        short osiNmContato                      = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaComunicacao->szIdPessoa);
    STRCPY_TO_ORA(oszIdTipoComunicacao, ptPessoaComunicacao->szIdTipoComunicacao);
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptPessoaComunicacao->szIdSistemaOrigem);
    // STRCPY_TO_ORA(oszIdComunicacaoSistemaOrigem, ptPessoaComunicacao->szIdComunicacaoSistemaOrigem);

    EXEC SQL WHENEVER SQLERROR  goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL 
        SELECT TO_CHAR( IDPESSOACOMUNICACAO        )
            , TO_CHAR( IDPESSOA                   )
            , TO_CHAR( IDTIPOCOMUNICACAO          )
            , TO_CHAR( NRSEQUENCIA                )
            , TO_CHAR( DSCONTATO                  )
            , TO_CHAR( TSSINCRONISMO              )
            , TO_CHAR( SQSINCRONISMO              )
            , TO_CHAR( DTCADASTRO, 'DD/MM/YYYY' )
            , TO_CHAR( IDCOMUNICACAOSISTEMAORIGEM )
            , TO_CHAR( IDSISTEMAORIGEM            )
            , TO_CHAR( DTEXPIRACAO, 'DD/MM/YYYY' )
            , TO_CHAR( INCOMUNICACAOPREFERENCIAL  )
            , TO_CHAR( IDUSUARIOALTERACAO         )
            , TO_CHAR( DTULTIMAALTERACAO, 'DD/MM/YYYY' )
            , TO_CHAR( NMCONTATO                 )
        INTO :oszIdPessoaComunicacao:osiIdPessoaComunicacaoIND
            , :oszIdPessoa:osiIdPessoaIND
            , :oszIdTipoComunicacao:osiIdTipoComunicacaoIND
            , :oszNrSequencia:osiNrSequenciaIND
            , :oszDsContato:osiDsContatoIND
            , :oszTsSincronismo:osiTsSincronismoIND
            , :oszSqSincronismo:osiSqSincronismoIND
            , :oszDtCadastro:osiDtCadastroIND
            , :oszIdComunicacaoSistemaOrigem:osiIdComunicacaoSistemaOrigemIND
            , :oszIdSistemaOrigem:osiIdSistemaOrigemIND
            , :oszDtExpiracao:osiDtExpiracaoIND
            , :oszInComunicacaoPreferencial:osiInComunicacaoPreferencialIND
            , :oszIdUsuarioAlteracao:osiIdUsuarioAlteracaoIND
            , :oszDtUltimaAlteracao:osiDtUltimaAlteracaoIND
            , :oszNmContato:osiNmContato
        FROM CUSTOMER.PESSOACOMUNICACAO
        WHERE IDSISTEMAORIGEM             = TO_NUMBER( :oszIdSistemaOrigem )
        AND IDTIPOCOMUNICACAO           = TO_NUMBER( :oszIdTipoComunicacao )
//      AND IDCOMUNICACAOSISTEMAORIGEM  = :oszIdComunicacaoSistemaOrigem
        AND IDPESSOA                    = TO_NUMBER( :oszIdPessoa )
        AND NVL(DTEXPIRACAO,SYSDATE) >= SYSDATE;


    if( osiIdPessoaComunicacaoIND         != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdPessoaComunicacao, oszIdPessoaComunicacao );
    }

    if( osiIdPessoaIND                    != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdPessoa, oszIdPessoa );
    }

    if( osiIdTipoComunicacaoIND           != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdTipoComunicacao, oszIdTipoComunicacao );
    }

    if( osiNrSequenciaIND                 != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szNrSequencia, oszNrSequencia );
    }

    if( osiDsContatoIND                   != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szDsContato, oszDsContato );
    }

    if( osiTsSincronismoIND               != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szTsSincronismo, oszTsSincronismo );
    }

    if( osiSqSincronismoIND               != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szSqSincronismo, oszSqSincronismo );
    }

    if( osiDtCadastroIND                  != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szDtCadastro, oszDtCadastro );
    }

    if( osiIdComunicacaoSistemaOrigemIND  != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdComunicacaoSistemaOrigem, oszIdComunicacaoSistemaOrigem );
    }

    if( osiIdSistemaOrigemIND             != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdSistemaOrigem, oszIdSistemaOrigem );
    }

    if( osiDtExpiracaoIND                 != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szDtExpiracao, oszDtExpiracao );
    }

    if( osiInComunicacaoPreferencialIND   != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szInComunicacaoPreferencial, oszInComunicacaoPreferencial );
    }

    if( osiIdUsuarioAlteracaoIND          != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdUsuarioAlteracao, oszIdUsuarioAlteracao );
    }

    if( osiDtUltimaAlteracaoIND           != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szDtUltimaAlteracao, oszDtUltimaAlteracao );
    }

    if( osiNmContato                      != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szNmContato, oszNmContato );
    }

    ULOGI("Finalizando proCBuscaPessoaComunicacao <FOUND>");
    ULOG_END("CPessoaComunicacaopc::proCBuscaPessoaComunicacao");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaComunicacao <NOT FOUND>");
        ULOG_END("CPessoaComunicacaopc::proCBuscaPessoaComunicacao");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaComunicacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CPessoaComunicacaopc::proCBuscaPessoaComunicacaoIdPessoaSgClass(TPessoaComunicacao *ptPessoaComunicacao)
{
    ULOG_START("CPessoaComunicacaopc::proCBuscaPessoaComunicacaoIdPessoaSgClass");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdTipoComunicacaoIn[LEN_IDTIPOCOMUNICACAO];

        VARCHAR oszIdPessoaComunicacao[LEN_IDPESSOACOMUNICACAO];
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszDsContato[LEN_DSCONTATO];
        VARCHAR oszNmContato[LEN_NMCONTATO];


        short osiIdPessoaComunicacao = 0;
        short osiIdTipoComunicacao = 0;
        short osiDsContato = 0;
        short osiNmContato = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaComunicacao->szIdPessoa);
    STRCPY_TO_ORA(oszIdTipoComunicacaoIn, ptPessoaComunicacao->szIdTipoComunicacao);

    EXEC SQL WHENEVER SQLERROR  goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL 
        SELECT
            idpessoacomunicacao,
            idtipocomunicacao,
            dscontato,
            nmcontato
        INTO
            :oszIdPessoaComunicacao:osiIdPessoaComunicacao,
            :oszIdTipoComunicacao:osiIdTipoComunicacao,
            :oszDsContato:osiDsContato,
            :oszNmContato:osiNmContato
        FROM
        (            
            SELECT
                cpc.idpessoacomunicacao,
                cpc.idtipocomunicacao,
                cpc.dscontato,
                cpc.nmcontato
            FROM
                customer.pessoacomunicacao cpc
            WHERE
                cpc.idtipocomunicacao = :oszIdTipoComunicacaoIn
            AND
                cpc.idpessoa = :oszIdPessoa
            ORDER BY
                cpc.dtultimaalteracao desc
        )
        WHERE
            ROWNUM < 2;                     



    if( osiIdPessoaComunicacao != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdPessoaComunicacao, oszIdPessoaComunicacao );
    }

    if( osiIdTipoComunicacao != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szIdTipoComunicacao, oszIdTipoComunicacao );
    }

    if( osiDsContato != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szDsContato, oszDsContato );
    }

    if( osiNmContato != -1 )   {
        STRCPY_FROM_ORA( ptPessoaComunicacao->szNmContato, oszNmContato );
    }

    ULOGI("Finalizando proCBuscaPessoaComunicacaoIdPessoaSgClass <FOUND>");
    ULOG_END("CPessoaComunicacaopc::proCBuscaPessoaComunicacao");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaComunicacaoIdPessoaSgClass <NOT FOUND>");
        ULOG_END("CPessoaComunicacaopc::proCBuscaPessoaComunicacaoIdPessoaSgClass");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaComunicacaoIdPessoaSgClass <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
