#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaDocumentopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/**************************************************************************************/
void CPessoaDocumentopc::proCApagaPessoaDocumento(TPessoaDocumento *ptPessoaDocumento)
{
    ULOG_START("CPessoaDocumentopc::proCApagaPessoaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOADOCUMENTO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaDocumento->szIdPessoa);

    EXEC SQL DELETE
        FROM Customer.PessoaDocumento
        WHERE idpessoa = TO_NUMBER(:oszIdPessoa);

    ULOGI("Finalizando proCApagaPessoaDocumento <OK>");
    ULOG_END("CPessoaDocumentopc::proCApagaPessoaDocumento");
    return;

    erro:
        ULOGE("Finalizando proCApagaPessoaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/**************************************************************************************/
void CPessoaDocumentopc::proCInserePessoaDocumento(TPessoaDocumento *ptPessoaDocumento)
{
    ULOG_START("CPessoaDocumentopc::proCInserePessoaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDocumento[LEN_IDPESSOADOCUMENTO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdDocumentoSistemaOrigem[LEN_IDDOCUMENTOSISTEMAORIGEM];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* copia os valores da estrutura para as variaveis ProC */
    STRCPY_TO_ORA(oszIdPessoa, ptPessoaDocumento->szIdPessoa);
    STRCPY_TO_ORA(oszIdDocumento, ptPessoaDocumento->szIdDocumento);
    STRCPY_TO_ORA(oszTsSincronismo, ptPessoaDocumento->szTsSincronismo);
    STRCPY_TO_ORA(oszSqSincronismo, ptPessoaDocumento->szSqSincronismo);
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptPessoaDocumento->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszDtExpiracao, ptPessoaDocumento->szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaDocumento->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT customer.pessoadocumentosq.nextval INTO :oszIdPessoaDocumento FROM DUAL;

    STRCPY_FROM_ORA(ptPessoaDocumento->szIdPessoaDocumento, oszIdPessoaDocumento);
    STRCPY_TO_ORA(oszIdDocumentoSistemaOrigem, ptPessoaDocumento->szIdPessoaDocumento);

    EXEC SQL INSERT INTO Customer.PessoaDocumento
                       ( idpessoadocumento
                       , idpessoa
                       , iddocumento
                       , tssincronismo
                       , sqsincronismo
                       , idsistemaorigem
                       , iddocumentosistemaorigem
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoaDocumento
                       , :oszIdPessoa
                       , :oszIdDocumento
                       , :oszTsSincronismo
                       , :oszSqSincronismo
                       , :oszIdSistemaOrigem
                       , :oszIdDocumentoSistemaOrigem
                       , :oszIdUsuarioAlteracao
                       , SYSDATE);


    ULOGI("Finalizando proCInserePessoaDocumento <OK>");
    ULOG_END("CPessoaDocumentopc::proCInserePessoaDocumento");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/**************************************************************************************/
void CPessoaDocumentopc::proCAtualizaPessoaDocumento(TPessoaDocumento tPessoaDocumento)
{
    ULOG_START("CPessoaDocumentopc::proCAtualizaPessoaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDocumento[LEN_IDPESSOADOCUMENTO];
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;


    STRCPY_TO_ORA(oszIdPessoaDocumento, tPessoaDocumento.szIdPessoaDocumento);
    STRCPY_TO_ORA(oszIdDocumento, tPessoaDocumento.szIdDocumento);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tPessoaDocumento.szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;


    EXEC SQL UPDATE Customer.PessoaDocumento
                SET
                    iddocumento              = TO_NUMBER(:oszIdDocumento)
                  , idusuarioalteracao       = TO_NUMBER(:oszIdUsuarioAlteracao)
                  , dtultimaalteracao        = SYSDATE
              WHERE idpessoadocumento        = TO_NUMBER(:oszIdPessoaDocumento);

    ULOGI("Finalizando proCAtualizaPessoaDocumento <OK>");
    ULOG_END("CPessoaDocumentopc::proCAtualizaPessoaDocumento");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/**************************************************************************************/
bool CPessoaDocumentopc::proCBuscaPessoaDocumento(TPessoaDocumento *ptPessoaDocumento)
{
    ULOG_START("CPessoaDocumentopc::proCBuscaPessoaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDocumento[LEN_IDPESSOADOCUMENTO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdDocumentoSistemaOrigem[LEN_IDDOCUMENTOSISTEMAORIGEM];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];

        short iIdPessoaDocumento = 0;
        short iIdPessoa = 0;
        short iIdDocumento = 0;
        short iTsSincronismo = 0;
        short iSqSincronismo = 0;
        short iIdSistemaOrigem = 0;
        short iIdDocumentoSistemaOrigem = 0;
        short iDtExpiracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaDocumento->szIdPessoa);
    //STRCPY_TO_ORA(oszIdPessoaDocumento, ptPessoaDocumento->szIdPessoaDocumento);
    STRCPY_TO_ORA(oszIdDocumento, ptPessoaDocumento->szIdDocumento);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR(idpessoadocumento)
                  , TO_CHAR(idpessoa)
                  , TO_CHAR(iddocumento)
                  , TO_CHAR(tssincronismo)
                  , TO_CHAR(sqsincronismo)
                  , TO_CHAR(idsistemaorigem)
                  , iddocumentosistemaorigem
                  , TO_CHAR(dtexpiracao, 'DD/MM/YYYY')
               INTO :oszIdPessoaDocumento:iIdPessoaDocumento
                  , :oszIdPessoa:iIdPessoa
                  , :oszIdDocumento:iIdDocumento
                  , :oszTsSincronismo:iTsSincronismo
                  , :oszSqSincronismo:iSqSincronismo
                  , :oszIdSistemaOrigem:iIdSistemaOrigem
                  , :oszIdDocumentoSistemaOrigem:iIdDocumentoSistemaOrigem
                  , :oszDtExpiracao:iDtExpiracao
               FROM Customer.PessoaDocumento PessoaDocumento
              WHERE PessoaDocumento.iddocumento = TO_NUMBER(:oszIdDocumento)
              AND PessoaDocumento.idpessoa = TO_NUMBER(:oszIdPessoa);

    if(iIdPessoaDocumento != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szIdPessoaDocumento, oszIdPessoaDocumento);
    }

    if(iIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szIdPessoa, oszIdPessoa);
    }

    if(iIdDocumento != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szIdDocumento, oszIdDocumento);
    }

    if(iTsSincronismo != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szTsSincronismo, oszTsSincronismo);
    }

    if(iSqSincronismo != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szSqSincronismo, oszSqSincronismo);
    }

    if(iIdSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szIdSistemaOrigem, oszIdSistemaOrigem);
    }

    if(iIdDocumentoSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szIdDocumentoSistemaOrigem, oszIdDocumentoSistemaOrigem);
    }

    if(iDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptPessoaDocumento->szDtExpiracao, oszDtExpiracao);
    }

    ULOGI("Finalizando proCBuscaPessoaDocumento <OK>");
    ULOG_END("CPessoaDocumentopc::proCBuscaPessoaDocumento");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaDocumento <NOT FOUND>");
        ULOG_END("CPessoaDocumentopc::proCBuscaPessoaDocumento");
        return false;

    erro:
        ULOGI("Finalizando proCBuscaPessoaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

