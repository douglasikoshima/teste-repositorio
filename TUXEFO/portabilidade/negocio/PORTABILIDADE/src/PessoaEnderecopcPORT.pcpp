#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaEnderecopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CPessoaEnderecopc::proCInserePessoaEndereco(TPessoaEndereco* ptPessoaEndereco)
{
    ULOG_START("CPessoaEnderecopc::proCInserePessoaEndereco");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszNmMunicipio[LEN_NMMUNICIPIO];
        VARCHAR oszNmLocalidade[LEN_NMLOCALIDADE];
        VARCHAR oszNmBairro[LEN_NMBAIRRO];
        VARCHAR oszNmTipoLogradouro[LEN_NMTIPOLOGRADOURO];
        VARCHAR oszNmTituloLogradouro[LEN_NMTITULOLOGRADOURO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOURO];
        VARCHAR oszNrEndereco[LEN_NRENDERECO];
        VARCHAR oszDsEnderecoComplemento[LEN_DSENDERECOCOMPLEMENTO];
        VARCHAR oszInEnderecoPreferencial[LEN_INENDERECOPREFERENCIAL];
        VARCHAR oszNrCep[LEN_NRCEP];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszIdTipoEndereco[LEN_IDTIPOENDERECO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsAosCuidados[LEN_DSAOSCUIDADOS];
        VARCHAR oszCdCaixaPostal[LEN_CDCAIXAPOSTAL];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdEnderecoSistemaOrigem[LEN_IDENDERECOSISTEMAORIGEM];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA( oszIdPessoaEndereco         , ptPessoaEndereco->szIdPessoaEndereco          );
    STRCPY_TO_ORA( oszIdPessoa                 , ptPessoaEndereco->szIdPessoa                  );
    STRCPY_TO_ORA( oszNrSequencia              , ptPessoaEndereco->szNrSequencia               );
    STRCPY_TO_ORA( oszIdPais                   , ptPessoaEndereco->szIdPais                    );
    STRCPY_TO_ORA( oszNmMunicipio              , ptPessoaEndereco->szNmMunicipio               );
    STRCPY_TO_ORA( oszNmLocalidade             , ptPessoaEndereco->szNmLocalidade              );
    STRCPY_TO_ORA( oszNmBairro                 , ptPessoaEndereco->szNmBairro                  );
    STRCPY_TO_ORA( oszNmTipoLogradouro         , ptPessoaEndereco->szNmTipoLogradouro          );
    STRCPY_TO_ORA( oszNmTituloLogradouro       , ptPessoaEndereco->szNmTituloLogradouro        );
    STRCPY_TO_ORA( oszNmLogradouro             , ptPessoaEndereco->szNmLogradouro              );
    STRCPY_TO_ORA( oszNrEndereco               , ptPessoaEndereco->szNrEndereco                );
    STRCPY_TO_ORA( oszDsEnderecoComplemento    , ptPessoaEndereco->szDsEnderecoComplemento     );
    STRCPY_TO_ORA( oszInEnderecoPreferencial   , ptPessoaEndereco->szInEnderecoPreferencial    );
    STRCPY_TO_ORA( oszNrCep                    , ptPessoaEndereco->szNrCep                     );
    STRCPY_TO_ORA( oszDtCadastro               , ptPessoaEndereco->szDtCadastro                );
    STRCPY_TO_ORA( oszIdTipoEndereco           , ptPessoaEndereco->szIdTipoEndereco            );
    STRCPY_TO_ORA( oszTsSincronismo            , ptPessoaEndereco->szTsSincronismo             );
    STRCPY_TO_ORA( oszDtExpiracao              , ptPessoaEndereco->szDtExpiracao               );
    STRCPY_TO_ORA( oszSqSincronismo            , ptPessoaEndereco->szSqSincronismo             );
    STRCPY_TO_ORA( oszIdUF                     , ptPessoaEndereco->szIdUF                      );
    STRCPY_TO_ORA( oszDsAosCuidados            , ptPessoaEndereco->szDsAosCuidados             );
    STRCPY_TO_ORA( oszCdCaixaPostal            , ptPessoaEndereco->szCdCaixaPostal             );
    STRCPY_TO_ORA( oszIdSistemaOrigem          , ptPessoaEndereco->szIdSistemaOrigem           );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao       , ptPessoaEndereco->szIdUsuarioAlteracao        );


    EXEC SQL SELECT customer.pessoaenderecosq.nextval INTO :oszIdPessoaEndereco FROM DUAL;

    STRCPY_FROM_ORA(ptPessoaEndereco->szIdPessoaEndereco, oszIdPessoaEndereco);
    STRCPY_FROM_ORA(ptPessoaEndereco->szIdEnderecoSistemaOrigem, oszIdPessoaEndereco);

    EXEC SQL INSERT INTO customer.pessoaendereco
                       ( idpessoaendereco
                       , idpessoa
                       , nrsequencia
                       , idpais
                       , nmmunicipio
                       , nmlocalidade
                       , nmbairro
                       , nmtipologradouro
                       , nmtitulologradouro
                       , nmlogradouro
                       , nrendereco
                       , dsenderecocomplemento
                       , inenderecopreferencial
                       , nrcep
                       , dtcadastro
                       , idtipoendereco
                       , tssincronismo
                       , dtexpiracao
                       , sqsincronismo
                       , iduf
                       , dsaoscuidados
                       , cdcaixapostal
                       , idsistemaorigem
                       , idenderecosistemaorigem
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoaEndereco
                       , :oszIdPessoa
                       , :oszNrSequencia
                       , :oszIdPais
                       , :oszNmMunicipio
                       , :oszNmLocalidade
                       , :oszNmBairro
                       , :oszNmTipoLogradouro
                       , :oszNmTituloLogradouro
                       , :oszNmLogradouro
                       , :oszNrEndereco
                       , :oszDsEnderecoComplemento
                       , :oszInEnderecoPreferencial
                       , :oszNrCep
                       , TO_DATE(:oszDtCadastro,'YYYYMMDDHH24MISS')
                       , :oszIdTipoEndereco
                       , :oszTsSincronismo
                       , TO_DATE( decode( length( :oszDtExpiracao ),  0, NULL
                                                                   ,  8, :oszDtExpiracao || TO_CHAR(SYSDATE,'hhMIss')
                                                                   , 14, :oszDtExpiracao
                                                                   , NULL ), 'YYYYMMDDHH24MISS' )
                       , :oszSqSincronismo
                       , :oszIdUF
                       , :oszDsAosCuidados
                       , :oszCdCaixaPostal
                       , :oszIdSistemaOrigem
                       , :oszIdPessoaEndereco
                       , :oszIdUsuarioAlteracao
                       , SYSDATE );


    ULOGI("Finalizando proCInserePessoaEndereco <OK>");
    ULOG_END("CPessoaEnderecopc::proCInserePessoaEndereco");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaEndereco <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPessoaEnderecopc::proCEnderecoSujo(TPessoaEndereco* ptPessoaEndereco)
{
    ULOG_START("CPessoaEnderecopc::proCEnderecoSujo");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszInEnderecoSujo[LEN_INENDERECOSUJO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA( oszIdPessoaEndereco  , ptPessoaEndereco->szIdPessoaEndereco);
    STRCPY_TO_ORA( oszInEnderecoSujo, ptPessoaEndereco->szInEnderecoSujo);

	EXEC SQL UPDATE Customer.PessoaEndereco
                SET inenderecosujo      = :oszInEnderecoSujo
                  , dtultimaalteracao   = SYSDATE
              WHERE idpessoaendereco    = :oszIdPessoaEndereco;

    ULOGI("Finalizando proCEnderecoSujo <OK>");
    ULOG_END("CPessoaEnderecopc::proCEnderecoSujo");
    return;

    erro:
        ULOGE("Finalizando proCEnderecoSujo <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPessoaEnderecopc::proCApagaPessoaEndereco(TPessoaEndereco* ptPessoaEndereco)
{
    ULOG_START("CPessoaEnderecopc::proCApagaPessoaEndereco");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA( oszIdPessoaEndereco  , ptPessoaEndereco->szIdPessoaEndereco);
    STRCPY_TO_ORA( oszSqSincronismo     , ptPessoaEndereco->szSqSincronismo   );
    STRCPY_TO_ORA( oszTsSincronismo     , ptPessoaEndereco->szTsSincronismo   );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao, ptPessoaEndereco->szIdUsuarioAlteracao);

	EXEC SQL UPDATE Customer.PessoaEndereco
                SET dtexpiracao         = SYSDATE
                  , idusuarioalteracao  = :oszIdUsuarioAlteracao
                  , sqsincronismo       = TO_NUMBER(:oszSqSincronismo)
                  , tssincronismo       = TO_NUMBER(:oszTsSincronismo)
                  , dtultimaalteracao   = SYSDATE
              WHERE idpessoaendereco    = :oszIdPessoaEndereco;

    ULOGI("Finalizando proCApagaPessoaEndereco <OK>");
    ULOG_END("CPessoaEnderecopc::proCApagaPessoaEndereco");
    return;

    erro:
        ULOGE("Finalizando proCApagaPessoaEndereco <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPessoaEnderecopc::proCAtualizaPessoaEndereco(TPessoaEndereco* ptPessoaEndereco)
{
    ULOG_START("CPessoaEnderecopc::proCAtualizaPessoaEndereco");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszNmMunicipio[LEN_NMMUNICIPIO];
        VARCHAR oszNmLocalidade[LEN_NMLOCALIDADE];
        VARCHAR oszNmBairro[LEN_NMBAIRRO];
        VARCHAR oszNmTipoLogradouro[LEN_NMTIPOLOGRADOURO];
        VARCHAR oszNmTituloLogradouro[LEN_NMTITULOLOGRADOURO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOURO];
        VARCHAR oszNrEndereco[LEN_NRENDERECO];
        VARCHAR oszDsEnderecoComplemento[LEN_DSENDERECOCOMPLEMENTO];
        VARCHAR oszInEnderecoPreferencial[LEN_INENDERECOPREFERENCIAL];
        VARCHAR oszNrCep[LEN_NRCEP];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszIdTipoEndereco[LEN_IDTIPOENDERECO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsAosCuidados[LEN_DSAOSCUIDADOS];
        VARCHAR oszCdCaixaPostal[LEN_CDCAIXAPOSTAL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    STRCPY_TO_ORA( oszIdPessoaEndereco         , ptPessoaEndereco->szIdPessoaEndereco          );
    STRCPY_TO_ORA( oszIdPessoa                 , ptPessoaEndereco->szIdPessoa                  );
    STRCPY_TO_ORA( oszNrSequencia              , ptPessoaEndereco->szNrSequencia               );
    STRCPY_TO_ORA( oszIdPais                   , ptPessoaEndereco->szIdPais                    );
    STRCPY_TO_ORA( oszNmMunicipio              , ptPessoaEndereco->szNmMunicipio               );
    STRCPY_TO_ORA( oszNmLocalidade             , ptPessoaEndereco->szNmLocalidade              );
    STRCPY_TO_ORA( oszNmBairro                 , ptPessoaEndereco->szNmBairro                  );
    STRCPY_TO_ORA( oszNmTipoLogradouro         , ptPessoaEndereco->szNmTipoLogradouro          );
    STRCPY_TO_ORA( oszNmTituloLogradouro       , ptPessoaEndereco->szNmTituloLogradouro        );
    STRCPY_TO_ORA( oszNmLogradouro             , ptPessoaEndereco->szNmLogradouro              );
    STRCPY_TO_ORA( oszNrEndereco               , ptPessoaEndereco->szNrEndereco                );
    STRCPY_TO_ORA( oszDsEnderecoComplemento    , ptPessoaEndereco->szDsEnderecoComplemento     );
    STRCPY_TO_ORA( oszInEnderecoPreferencial   , ptPessoaEndereco->szInEnderecoPreferencial    );
    STRCPY_TO_ORA( oszNrCep                    , ptPessoaEndereco->szNrCep                     );
    STRCPY_TO_ORA( oszDtCadastro               , ptPessoaEndereco->szDtCadastro                );
    STRCPY_TO_ORA( oszIdTipoEndereco           , ptPessoaEndereco->szIdTipoEndereco            );
    STRCPY_TO_ORA( oszTsSincronismo            , ptPessoaEndereco->szTsSincronismo             );
    STRCPY_TO_ORA( oszDtExpiracao              , ptPessoaEndereco->szDtExpiracao               );
    STRCPY_TO_ORA( oszSqSincronismo            , ptPessoaEndereco->szSqSincronismo             );
    STRCPY_TO_ORA( oszIdUF                     , ptPessoaEndereco->szIdUF                      );
    STRCPY_TO_ORA( oszDsAosCuidados            , ptPessoaEndereco->szDsAosCuidados             );
    STRCPY_TO_ORA( oszCdCaixaPostal            , ptPessoaEndereco->szCdCaixaPostal             );
    STRCPY_TO_ORA( oszIdUsuarioAlteracao       , ptPessoaEndereco->szIdUsuarioAlteracao        );

	EXEC SQL UPDATE Customer.PessoaEndereco
                SET idpessoaendereco          = :oszIdPessoaEndereco
                  , idpessoa                  = :oszIdPessoa
                  , nrsequencia               = :oszNrSequencia
                  , idpais                    = :oszIdPais
                  , nmmunicipio               = :oszNmMunicipio
                  , nmlocalidade              = :oszNmLocalidade
                  , nmbairro                  = :oszNmBairro
                  , nmtipologradouro          = :oszNmTipoLogradouro
                  , nmtitulologradouro        = :oszNmTituloLogradouro
                  , nmlogradouro              = :oszNmLogradouro
                  , nrendereco                = :oszNrEndereco
                  , dsenderecocomplemento     = :oszDsEnderecoComplemento
                  , inenderecopreferencial    = :oszInEnderecoPreferencial
                  , nrcep                     = :oszNrCep
                  , dtcadastro                = TO_DATE( :oszDtCadastro,'YYYYMMDDHH24MISS' )
                  , idtipoendereco            = :oszIdTipoEndereco
                  , tssincronismo             = :oszTsSincronismo
                  , dtexpiracao              = TO_DATE( decode( length( :oszDtExpiracao ),  0, NULL
                                                                      ,  8, :oszDtExpiracao || TO_CHAR(SYSDATE,'hhMIss')
                                                                      , 14, :oszDtExpiracao
                                                                      , NULL ), 'YYYYMMDDHH24MISS' )
                  , sqsincronismo             = :oszSqSincronismo
                  , iduf                      = :oszIdUF
                  , dsaoscuidados             = :oszDsAosCuidados
                  , cdcaixapostal             = :oszCdCaixaPostal
                  , idusuarioalteracao        = :oszIdUsuarioAlteracao
                  , dtultimaalteracao         = SYSDATE
              WHERE idpessoaendereco          = TO_NUMBER( :oszIdPessoaEndereco );

    ULOGI("Finalizando proCAtualizaPessoaEndereco <OK>");
    ULOG_END("CPessoaEnderecopc::proCAtualizaPessoaEndereco");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaEndereco <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CPessoaEnderecopc::proCBuscaPessoaEndereco(TPessoaEndereco* ptPessoaEndereco)
{
    ULOG_START("CPessoaEnderecopc::proCBuscaPessoaEndereco");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNrSequencia[LEN_NRSEQUENCIA];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszNmMunicipio[LEN_NMMUNICIPIO];
        VARCHAR oszNmLocalidade[LEN_NMLOCALIDADE];
        VARCHAR oszNmBairro[LEN_NMBAIRRO];
        VARCHAR oszNmTipoLogradouro[LEN_NMTIPOLOGRADOURO];
        VARCHAR oszNmTituloLogradouro[LEN_NMTITULOLOGRADOURO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOURO];
        VARCHAR oszNrEndereco[LEN_NRENDERECO];
        VARCHAR oszDsEnderecoComplemento[LEN_DSENDERECOCOMPLEMENTO];
        VARCHAR oszInEnderecoPreferencial[LEN_INENDERECOPREFERENCIAL];
        VARCHAR oszNrCep[LEN_NRCEP];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszIdTipoEndereco[LEN_IDTIPOENDERECO];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsAosCuidados[LEN_DSAOSCUIDADOS];
        VARCHAR oszCdCaixaPostal[LEN_CDCAIXAPOSTAL];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdEnderecoSistemaOrigem[LEN_IDENDERECOSISTEMAORIGEM];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoaEndereco = 0;
        short iIdPessoa = 0;
        short iNrSequencia = 0;
        short iIdPais = 0;
        short iNmMunicipio = 0;
        short iNmLocalidade = 0;
        short iNmBairro = 0;
        short iNmTipoLogradouro = 0;
        short iNmTituloLogradouro = 0;
        short iNmLogradouro = 0;
        short iNrEndereco = 0;
        short iDsEnderecoComplemento = 0;
        short iInEnderecoPreferencial = 0;
        short iNrCep = 0;
        short iDtCadastro = 0;
        short iIdTipoEndereco = 0;
        short iTsSincronismo = 0;
        short iDtExpiracao = 0;
        short iSqSincronismo = 0;
        short iIdUf = 0;
        short iDsAosCuidados = 0;
        short iCdCaixaPostal = 0;
        short iIdSistemaOrigem = 0;
        short iIdEnderecoSistemaOrigem = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;


    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // STRCPY_TO_ORA( oszIdEnderecoSistemaOrigem, ptPessoaEndereco->szIdEnderecoSistemaOrigem );
    STRCPY_TO_ORA( oszIdSistemaOrigem        , ptPessoaEndereco->szIdSistemaOrigem         );
    STRCPY_TO_ORA( oszIdPessoa               , ptPessoaEndereco->szIdPessoa                );

	EXEC SQL 
        SELECT
              idpessoaendereco
            , idpessoa
            , nrsequencia
            , idpais
            , nmmunicipio
            , nmlocalidade
            , nmbairro
            , nmtipologradouro
            , nmtitulologradouro
            , nmlogradouro
            , nrendereco
            , dsenderecocomplemento
            , inenderecopreferencial
            , nrcep
            , TO_CHAR( dtcadastro, 'DD/MM/YYYY' )
            , idtipoendereco
            , tssincronismo
            , TO_CHAR( dtexpiracao, 'DD/MM/YYYY' )
            , sqsincronismo
            , iduf
            , dsaoscuidados
            , cdcaixapostal
            , idsistemaorigem
            , idenderecosistemaorigem
            , idusuarioalteracao
            , TO_CHAR( dtultimaalteracao, 'DD/MM/YYYY' )
        INTO 
            :oszIdPessoaEndereco:iIdPessoaEndereco
          , :oszIdPessoa:iIdPessoa
          , :oszNrSequencia:iNrSequencia
          , :oszIdPais:iIdPais
          , :oszNmMunicipio:iNmMunicipio
          , :oszNmLocalidade:iNmLocalidade
          , :oszNmBairro:iNmBairro
          , :oszNmTipoLogradouro:iNmTipoLogradouro
          , :oszNmTituloLogradouro:iNmTituloLogradouro
          , :oszNmLogradouro:iNmLogradouro
          , :oszNrEndereco:iNrEndereco
          , :oszDsEnderecoComplemento:iDsEnderecoComplemento
          , :oszInEnderecoPreferencial:iInEnderecoPreferencial
          , :oszNrCep:iNrCep
          , :oszDtCadastro:iDtCadastro
          , :oszIdTipoEndereco:iIdTipoEndereco
          , :oszTsSincronismo:iTsSincronismo
          , :oszDtExpiracao:iDtExpiracao
          , :oszSqSincronismo:iSqSincronismo
          , :oszIdUF:iIdUf
          , :oszDsAosCuidados:iDsAosCuidados
          , :oszCdCaixaPostal:iCdCaixaPostal
          , :oszIdSistemaOrigem:iIdSistemaOrigem
          , :oszIdEnderecoSistemaOrigem:iIdEnderecoSistemaOrigem
          , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
          , :oszDtUltimaAlteracao:iDtUltimaAlteracao
        FROM
            Customer.PessoaEndereco
        WHERE 
            idpessoa                = TO_NUMBER( :oszIdPessoa )
        AND idsistemaorigem         = TO_NUMBER( :oszIdSistemaOrigem )
//        AND idenderecosistemaorigem = :oszIdEnderecoSistemaOrigem
        AND NVL(dtexpiracao,SYSDATE) >= SYSDATE
        AND ROWNUM < 2;

	/* copia os dados obtidos para a estrutura passada como parametro */
    if(iIdPessoaEndereco != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdPessoaEndereco, oszIdPessoaEndereco);
    }
    if(iIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdPessoa, oszIdPessoa);
    }
    if(iNrSequencia != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNrSequencia, oszNrSequencia);
    }
    if(iIdPais != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdPais, oszIdPais);
    }
    if(iNmMunicipio != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmMunicipio, oszNmMunicipio);
    }
    if(iNmLocalidade != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmLocalidade, oszNmLocalidade);
    }
    if(iNmBairro != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmBairro, oszNmBairro);
    }
    if(iNmTipoLogradouro != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmTipoLogradouro, oszNmTipoLogradouro);
    }
    if(iNmTituloLogradouro != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmTituloLogradouro, oszNmTituloLogradouro);
    }
    if(iNmLogradouro != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNmLogradouro, oszNmLogradouro);
    }
    if(iNrEndereco != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNrEndereco, oszNrEndereco);
    }
    if(iDsEnderecoComplemento != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szDsEnderecoComplemento, oszDsEnderecoComplemento);
    }
    if(iInEnderecoPreferencial != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szInEnderecoPreferencial, oszInEnderecoPreferencial);
    }
    if(iNrCep != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szNrCep, oszNrCep);
    }
    if(iDtCadastro != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szDtCadastro, oszDtCadastro);
    }
    if(iIdTipoEndereco != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdTipoEndereco, oszIdTipoEndereco);
    }
    if(iTsSincronismo != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szTsSincronismo, oszTsSincronismo);
    }
    if(iDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szDtExpiracao, oszDtExpiracao);
    }
    if(iSqSincronismo != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szSqSincronismo, oszSqSincronismo);
    }
    if(iIdUf != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdUF, oszIdUF);
    }
    if(iDsAosCuidados != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szDsAosCuidados, oszDsAosCuidados);
    }
    if(iCdCaixaPostal != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szCdCaixaPostal, oszCdCaixaPostal);
    }
    if(iIdSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdSistemaOrigem, oszIdSistemaOrigem);
    }
    if(iIdEnderecoSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdEnderecoSistemaOrigem, oszIdEnderecoSistemaOrigem);
    }
    if(iIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if(iDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaEndereco->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOGI("Finalizando proCBuscaPessoaEndereco <FOUND>");
    ULOG_END("CPessoaEnderecopc::proCBuscaPessoaEndereco");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaEndereco <NOT FOUND>");
        ULOG_END("CPessoaEnderecopc::proCBuscaPessoaEndereco");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaEndereco <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
