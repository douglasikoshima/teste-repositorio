#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "ContatoFuncionalidadepcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CContatoFuncionalidadepc::proCBuscaContatoFuncionalidade(TContatoFuncionalidade *ptContatoFuncionalidade)
{
    ULOG_START("CContatoFuncionalidadepc::proCBuscaContatoFuncionalidade");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdContato[LEN_IDCONTATO];
        VARCHAR oszCdFuncionalidade[LEN_CDFUNCIONALIDADE];

        short iIdContato = 0;
        short iCdFuncionalidade = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszCdFuncionalidade, ptContatoFuncionalidade->szCdFuncionalidade);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT
            idcontato,
            cdfuncionalidade
        INTO
            :oszIdContato:iIdContato,
            :oszCdFuncionalidade:iCdFuncionalidade
        FROM
            CONTATOADM.CONTATOFUNCIONALIDADE
        WHERE
            cdfuncionalidade = :oszCdFuncionalidade;


    if(iIdContato != -1) {
        STRCPY_FROM_ORA(ptContatoFuncionalidade->szIdContato, oszIdContato);
    }


    ULOGI("Finalizando proCBuscaContatoFuncionalidade <OK>");
    ULOG_END("CContatoFuncionalidadepc::proCBuscaContatoFuncionalidade");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaContatoFuncionalidade <NOT FOUND>");
        ULOG_END("CContatoFuncionalidadepc::proCBuscaContatoFuncionalidade");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaContatoFuncionalidade <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
