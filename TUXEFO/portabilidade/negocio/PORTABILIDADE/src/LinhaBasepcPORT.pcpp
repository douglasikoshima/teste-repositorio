#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "LinhaBasepcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CLinhaBasepc::proCInsereLinhaBase(TLinhaBase *ptLinhaBase)
{
    ULOG_START("CLinhaBasepc::proCInsereLinhaBase");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaBase[LEN_IDLINHABASE];
        VARCHAR oszIdAreaRegistro[LEN_IDAREAREGISTRO];
        VARCHAR oszNrLinha[LEN_NRLINHA];
        VARCHAR oszNrMin[LEN_NRMIN];
        VARCHAR oszNrDigitoLinha[LEN_NRDIGITOLINHA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszIdEstadoLinha[LEN_IDESTADOLINHA];
        VARCHAR oszDtEstadoLinha[LEN_DTESTADOLINHA];
        VARCHAR oszDsMotivoEstado[LEN_DSMOTIVOESTADO];
        VARCHAR oszIdNumeroSistemaOrigem[LEN_IDNUMEROSISTEMAORIGEM];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdAreaRegistro, ptLinhaBase->szIdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, ptLinhaBase->szNrLinha);
    STRCPY_TO_ORA(oszNrMin, ptLinhaBase->szNrMin);
    STRCPY_TO_ORA(oszNrDigitoLinha, ptLinhaBase->szNrDigitoLinha);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptLinhaBase->szIdUsuarioAlteracao);
    STRCPY_TO_ORA(oszIdEstadoLinha, ptLinhaBase->szIdEstadoLinha);
    STRCPY_TO_ORA(oszDtEstadoLinha, ptLinhaBase->szDtEstadoLinha);
    STRCPY_TO_ORA(oszDsMotivoEstado, ptLinhaBase->szDsMotivoEstado);
    STRCPY_TO_ORA(oszIdNumeroSistemaOrigem, ptLinhaBase->szIdNumeroSistemaOrigem);
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptLinhaBase->szIdSistemaOrigem);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT linha.linhabasesq.nextval INTO :oszIdLinhaBase FROM DUAL;

    STRCPY_FROM_ORA(ptLinhaBase->szIdLinhaBase, oszIdLinhaBase);

    EXEC SQL INSERT INTO customer.linhabase
                        (   
                        idlinhabase,
                        idarearegistro,
                        nrlinha,
                        nrmin,
                        nrdigitolinha,
                        idusuarioalteracao,
                        dtultimaalteracao,
                        idestadolinha,
                        dtestadolinha,
                        dsmotivoestado,
                        idnumerosistemaorigem,
                        idsistemaorigem
                        )
                VALUES
                        (
                        :oszIdLinhaBase,
                        :oszIdAreaRegistro,
                        :oszNrLinha,
                        :oszNrMin,
                        :oszNrDigitoLinha,
                        :oszIdUsuarioAlteracao,
                        SYSDATE,
                        :oszIdEstadoLinha,
                        :oszDtEstadoLinha,
                        :oszDsMotivoEstado,
                        :oszIdNumeroSistemaOrigem,
                        :oszIdSistemaOrigem
                        );


    ULOGI("Finalizando proCInsereLinhaBase <OK>");
    ULOG_END("CLinhaBasepc::proCInsereLinhaBase");
    return;

    erro:
        ULOGE("Finalizando proCInsereLinhaBase <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
