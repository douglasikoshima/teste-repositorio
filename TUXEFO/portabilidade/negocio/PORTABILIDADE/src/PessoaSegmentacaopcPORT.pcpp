#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaSegmentacaopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/********************************************************************************/
void CPessoaSegmentacaopc::proCAtualizaPessoaSegmentacao(TPessoaSegmentacao *ptPessoaSegmentacao)
{
    ULOG_START("CPessoaSegmentacaopc::proCAtualizaPessoaSegmentacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdPessoaSegmentacao[LEN_IDPESSOASEGMENTACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaSegmentacao->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdPessoaSegmentacao, ptPessoaSegmentacao->szIdPessoaSegmentacao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaSegmentacao->szIdUsuarioAlteracao);


    EXEC SQL UPDATE Customer.PessoaSegmentacao
        SET      idpessoadepara       = :oszIdPessoaDePara
               , idpessoasegmentacao  = :oszIdPessoaSegmentacao
               , idusuarioalteracao   = :oszIdUsuarioAlteracao
               , dtultimaalteracao    = SYSDATE
        WHERE    idpessoadepara       = TO_NUMBER(:oszIdPessoaDePara);

    ULOGI("Finalizando proCAtualizaPessoaSegmentacao <OK>");
    ULOG_END("CPessoaSegmentacaopc::proCAtualizaPessoaSegmentacao");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaSegmentacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
 
/********************************************************************************/
void CPessoaSegmentacaopc::proCInserePessoaSegmentacao(TPessoaSegmentacao *ptPessoaSegmentacao)
{
    ULOG_START("CPessoaSegmentacaopc::proCInserePessoaSegmentacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdPessoaSegmentacao[LEN_IDPESSOASEGMENTACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaSegmentacao->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdPessoaSegmentacao, ptPessoaSegmentacao->szIdPessoaSegmentacao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaSegmentacao->szIdUsuarioAlteracao);


    EXEC SQL INSERT INTO customer.pessoasegmentacao
                       ( idpessoadepara
                       , idpessoasegmentacao
                       , idusuarioalteracao
                       , dtultimaalteracao)
                VALUES ( :oszIdPessoaDePara
                       , :oszIdPessoaSegmentacao
                       , :oszIdUsuarioAlteracao
                       , SYSDATE );

    ULOGI("Finalizando proCInserePessoaSegmentacao <OK>");
    ULOG_END("CPessoaSegmentacaopc::proCInserePessoaSegmentacao");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaSegmentacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
 
/********************************************************************************/
bool CPessoaSegmentacaopc::proCBuscaPessoaSegmentacao(TPessoaSegmentacao *ptPessoaSegmentacao)
{
    ULOG_START("CPessoaSegmentacaopc::proCBuscaPessoaSegmentacao");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdPessoaSegmentacao[LEN_IDPESSOASEGMENTACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoaDePara = 0;
        short iIdPessoaSegmentacao = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaSegmentacao->szIdPessoaDePara);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR( idpessoadepara       )
                  , TO_CHAR( idpessoasegmentacao  )
                  , TO_CHAR( idusuarioalteracao   )
                  , TO_CHAR( dtultimaalteracao    , 'DD/MM/YYYY')
               INTO :oszIdPessoaDePara:iIdPessoaDePara
                  , :oszIdPessoaSegmentacao:iIdPessoaSegmentacao
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.PessoaSegmentacao
              WHERE idpessoadepara = TO_NUMBER( :oszIdPessoaDePara );


    if( iIdPessoaDePara != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacao->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if( iIdPessoaSegmentacao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacao->szIdPessoaSegmentacao, oszIdPessoaSegmentacao);
    }
    if( iIdUsuarioAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacao->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if( iDtUltimaAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacao->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOGI("Finalizando proCBuscaPessoaSegmentacao <FOUND>");
    ULOG_END("CPessoaSegmentacaopc::proCBuscaPessoaSegmentacao");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaSegmentacao <NOT FOUND>");
        ULOG_END("CPessoaSegmentacaopc::proCBuscaPessoaSegmentacao");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaSegmentacao <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
