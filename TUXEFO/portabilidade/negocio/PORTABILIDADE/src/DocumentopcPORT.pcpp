#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "DocumentopcPORT.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalPORT.h"
EXEC SQL END DECLARE SECTION;

/*************************************************************************************/
void CDocumentopc::proCInsereDocumento(TDocumento *ptDocumento)
{
    ULOG_START("CDocumentopc::proCInsereDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszCdCpfCnpjBase[LEN_CDCPFCNPJBASE];
        VARCHAR oszCdCnpjFilial[LEN_CDCNPJFILIAL];
        VARCHAR oszCdCpfCnpjControle[LEN_CDCPFCNPJCONTROLE];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];
        VARCHAR oszSgOrgaoExpedidor[LEN_SGORGAOEXPEDIDOR];
        VARCHAR oszDtEmissao[LEN_DTEMISSAO];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszCdCpfCnpjBase, ptDocumento->szCdCpfCnpjBase);
    STRCPY_TO_ORA(oszCdCnpjFilial, ptDocumento->szCdCnpjFilial);
    STRCPY_TO_ORA(oszCdCpfCnpjControle, ptDocumento->szCdCpfCnpjControle);
    STRCPY_TO_ORA(oszNrDocumento, ptDocumento->szNrDocumento);
    STRCPY_TO_ORA(oszSgOrgaoExpedidor, ptDocumento->szSgOrgaoExpedidor);
    STRCPY_TO_ORA(oszDtEmissao, ptDocumento->szDtEmissao);
    STRCPY_TO_ORA(oszIdPais, ptDocumento->szIdPais);
    STRCPY_TO_ORA(oszIdUF, ptDocumento->szIdUF);
    STRCPY_TO_ORA(oszIdTipoDocumento, ptDocumento->szIdTipoDocumento);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptDocumento->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT customer.documentosq.nextval INTO :oszIdDocumento FROM DUAL;

    EXEC SQL INSERT INTO customer.documento
                       ( iddocumento
                       , cdcpfcnpjbase
                       , cdcnpjfilial
                       , cdcpfcnpjcontrole
                       , nrdocumento
                       , sgorgaoexpedidor
                       , dtemissao
                       , idpais
                       , iduf
                       , idtipodocumento
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdDocumento
                       , :oszCdCpfCnpjBase
                       , :oszCdCnpjFilial
                       , :oszCdCpfCnpjControle
                       , :oszNrDocumento
                       , :oszSgOrgaoExpedidor
                       , TO_DATE(:oszDtEmissao, 'YYYYMMDDHH24MISS')
                       , TO_NUMBER(:oszIdPais)
                       , TO_NUMBER(:oszIdUF)
                       , TO_NUMBER(:oszIdTipoDocumento)
                       , TO_NUMBER(:oszIdUsuarioAlteracao)
                       , SYSDATE);

    STRCPY_FROM_ORA(ptDocumento->szIdDocumento, oszIdDocumento);

    ULOGI("Finalizando proCInsereDocumento <OK>");
    ULOG_END("CDocumentopc::proCInsereDocumento");
    return;

    erro:
        ULOGE("Finalizando proCInsereDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/*************************************************************************************/
void CDocumentopc::proCAtualizaDocumento(TDocumento tDocumento)
{
    ULOG_START("CDocumentopc::proCAtualizaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszCdCpfCnpjBase[LEN_CDCPFCNPJBASE];
        VARCHAR oszCdCnpjFilial[LEN_CDCNPJFILIAL];
        VARCHAR oszCdCpfCnpjControle[LEN_CDCPFCNPJCONTROLE];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];
        VARCHAR oszSgOrgaoExpedidor[LEN_SGORGAOEXPEDIDOR];
        VARCHAR oszDtEmissao[LEN_DTEMISSAO];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdDocumento, tDocumento.szIdDocumento);
    STRCPY_TO_ORA(oszCdCpfCnpjBase, tDocumento.szCdCpfCnpjBase);
    STRCPY_TO_ORA(oszCdCnpjFilial, tDocumento.szCdCnpjFilial);
    STRCPY_TO_ORA(oszCdCpfCnpjControle, tDocumento.szCdCpfCnpjControle);
    STRCPY_TO_ORA(oszNrDocumento, tDocumento.szNrDocumento);
    STRCPY_TO_ORA(oszSgOrgaoExpedidor, tDocumento.szSgOrgaoExpedidor);
    STRCPY_TO_ORA(oszDtEmissao, tDocumento.szDtEmissao);
    STRCPY_TO_ORA(oszIdPais, tDocumento.szIdPais);
    STRCPY_TO_ORA(oszIdUF, tDocumento.szIdUF);
    STRCPY_TO_ORA(oszIdTipoDocumento, tDocumento.szIdTipoDocumento);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tDocumento.szIdUsuarioAlteracao);


    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL UPDATE customer.documento
                SET iddocumento         = :oszIdDocumento
                  , cdcpfcnpjbase       = :oszCdCpfCnpjBase
                  , cdcnpjfilial        = :oszCdCnpjFilial
                  , cdcpfcnpjcontrole   = :oszCdCpfCnpjControle
                  , nrdocumento         = :oszNrDocumento
                  , sgorgaoexpedidor    = :oszSgOrgaoExpedidor
                  , dtemissao           = TO_DATE(:oszDtEmissao, 'YYYYMMDDHH24MISS')
                  , idpais              = TO_NUMBER(:oszIdPais)
                  , iduf                = TO_NUMBER(:oszIdUF)
                  , idtipodocumento     = TO_NUMBER(:oszIdTipoDocumento)
                  , idusuarioalteracao  = TO_NUMBER(:oszIdUsuarioAlteracao)
                  , dtultimaalteracao   = SYSDATE
              WHERE iddocumento         = TO_NUMBER(:oszIdDocumento);

    ULOGI("Finalizando proCAtualizaDocumento <OK>");
    ULOG_END("CDocumentopc::proCAtualizaDocumento");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*************************************************************************************/
bool CDocumentopc::proCBuscaDocumento(TDocumento *ptDocumento)
{
    ULOG_START("CDocumentopc::proCBuscaDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszCdCpfCnpjBase[LEN_CDCPFCNPJBASE];
        VARCHAR oszCdCnpjFilial[LEN_CDCNPJFILIAL];
        VARCHAR oszCdCpfCnpjControle[LEN_CDCPFCNPJCONTROLE];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];
        VARCHAR oszSgOrgaoExpedidor[LEN_SGORGAOEXPEDIDOR];
        VARCHAR oszDtEmissao[LEN_DTEMISSAO];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];

        short iIdDocumento = 0;
        short iCdCpfCnpjBase = 0;
        short iCdCnpjFilial = 0;
        short iCdCpfCnpjControle = 0;
        short iNrDocumento = 0;
        short iSgOrgaoExpedidor = 0;
        short iDtEmissao = 0;
        short iIdPais = 0;
        short iIdUF = 0;
        short iIdTipoDocumento = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszNrDocumento, ptDocumento->szNrDocumento);
    STRCPY_TO_ORA(oszIdTipoDocumento, ptDocumento->szIdTipoDocumento);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR(iddocumento)
                  , cdcpfcnpjbase
                  , cdcnpjfilial
                  , cdcpfcnpjcontrole
                  , nrdocumento
                  , sgorgaoexpedidor
                  , TO_CHAR(dtemissao, 'DD/MM/YYYY')
                  , TO_CHAR(idpais)
                  , TO_CHAR(iduf)
                  , TO_CHAR(idtipodocumento)
               INTO :oszIdDocumento:iIdDocumento
                  , :oszCdCpfCnpjBase:iCdCpfCnpjBase
                  , :oszCdCnpjFilial:iCdCnpjFilial
                  , :oszCdCpfCnpjControle:iCdCpfCnpjControle
                  , :oszNrDocumento:iNrDocumento
                  , :oszSgOrgaoExpedidor:iSgOrgaoExpedidor
                  , :oszDtEmissao:iDtEmissao
                  , :oszIdPais:iIdPais
                  , :oszIdUF:iIdUF
                  , :oszIdTipoDocumento:iIdTipoDocumento
               FROM customer.documento
              WHERE nrdocumento = :oszNrDocumento
                AND idtipodocumento = TO_NUMBER(:oszIdTipoDocumento);

    if(iIdDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdDocumento, oszIdDocumento);
    }

    if(iCdCpfCnpjBase != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCpfCnpjBase, oszCdCpfCnpjBase);
    }

    if(iCdCnpjFilial != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCnpjFilial, oszCdCnpjFilial);
    }

    if(iCdCpfCnpjControle != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCpfCnpjControle, oszCdCpfCnpjControle);
    }

    if(iNrDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szNrDocumento, oszNrDocumento);
    }

    if(iSgOrgaoExpedidor != -1) {
        STRCPY_FROM_ORA(ptDocumento->szSgOrgaoExpedidor, oszSgOrgaoExpedidor);
    }

    if(iDtEmissao != -1) {
        STRCPY_FROM_ORA(ptDocumento->szDtEmissao, oszDtEmissao);
    }

    if(iIdPais != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdPais, oszIdPais);
    }

    if(iIdUF != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdUF, oszIdUF);
    }

    if(iIdTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdTipoDocumento, oszIdTipoDocumento);
    }

    ULOGI("Finalizando proCBuscaDocumento <OK>");
    ULOG_END("CDocumentopc::proCBuscaDocumento");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaDocumento <NOT FOUND>");
        ULOG_END("CDocumentopc::proCBuscaDocumento");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*************************************************************************************/
bool CDocumentopc::proCBuscaDocumentoChaveComposta(TDocumento *ptDocumento)
{
    ULOG_START("CDocumentopc::proCBuscaDocumentoChaveComposta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszCdCpfCnpjBase[LEN_CDCPFCNPJBASE];
        VARCHAR oszCdCnpjFilial[LEN_CDCNPJFILIAL];
        VARCHAR oszCdCpfCnpjControle[LEN_CDCPFCNPJCONTROLE];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];
        VARCHAR oszSgOrgaoExpedidor[LEN_SGORGAOEXPEDIDOR];
        VARCHAR oszDtEmissao[LEN_DTEMISSAO];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];

        short iIdDocumento = 0;
        short iCdCpfCnpjBase = 0;
        short iCdCnpjFilial = 0;
        short iCdCpfCnpjControle = 0;
        short iNrDocumento = 0;
        short iSgOrgaoExpedidor = 0;
        short iDtEmissao = 0;
        short iIdPais = 0;
        short iIdUF = 0;
        short iIdTipoDocumento = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    if(strlen(ptDocumento->szSgOrgaoExpedidor) == 0) {
        STRCPY_TO_ORA(oszSgOrgaoExpedidor, "-1");
    }
    else {
        STRCPY_TO_ORA(oszSgOrgaoExpedidor, ptDocumento->szSgOrgaoExpedidor);
    }

    if(strlen(ptDocumento->szDtEmissao) == 0) {
        STRCPY_TO_ORA(oszDtEmissao, "18000101000000");
    }
    else {
        STRCPY_TO_ORA(oszDtEmissao, ptDocumento->szDtEmissao);
    }


    STRCPY_TO_ORA(oszNrDocumento, ptDocumento->szNrDocumento);
    STRCPY_TO_ORA(oszIdTipoDocumento, ptDocumento->szIdTipoDocumento);
    STRCPY_TO_ORA(oszIdUF, ptDocumento->szIdUF);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

        
    EXEC SQL         
        SELECT
            iddocumento,
            cdcpfcnpjbase,
            cdcnpjfilial,
            cdcpfcnpjcontrole,
            nrdocumento,
            sgorgaoexpedidor,
            dtemissao,
            idpais,
            iduf,
            idtipodocumento
        INTO
              :oszIdDocumento:iIdDocumento
            , :oszCdCpfCnpjBase:iCdCpfCnpjBase
            , :oszCdCnpjFilial:iCdCnpjFilial
            , :oszCdCpfCnpjControle:iCdCpfCnpjControle
            , :oszNrDocumento:iNrDocumento
            , :oszSgOrgaoExpedidor:iSgOrgaoExpedidor
            , :oszDtEmissao:iDtEmissao
            , :oszIdPais:iIdPais
            , :oszIdUF:iIdUF
            , :oszIdTipoDocumento:iIdTipoDocumento
        FROM
        (
            SELECT
                TO_CHAR(iddocumento) as iddocumento
                , cd.cdcpfcnpjbase as cdcpfcnpjbase
                , cd.cdcnpjfilial as cdcnpjfilial
                , cd.cdcpfcnpjcontrole as cdcpfcnpjcontrole
                , cd.nrdocumento as nrdocumento
                , cd.sgorgaoexpedidor as sgorgaoexpedidor
                , TO_CHAR(cd.dtemissao, 'YYYYMMDDHH24MISS') as dtemissao
                , TO_CHAR(cd.idpais) as idpais
                , TO_CHAR(cd.iduf) as iduf
                , TO_CHAR(cd.idtipodocumento) as idtipodocumento
            FROM
                Customer.Documento cd,
                apoio.tipodocumento atd
            WHERE
                cd.nrdocumento = :oszNrDocumento
            AND
                cd.idtipodocumento = TO_NUMBER(:oszIdTipoDocumento)
            AND
                cd.iduf = :oszIdUF
            AND
                TO_CHAR(NVL(cd.sgorgaoexpedidor,'-1')) =  :oszSgOrgaoExpedidor
            AND
                NVL(TO_CHAR(cd.dtemissao , 'YYYYMMDDHH24MISS' ), '18000101000000' ) = TO_CHAR(TO_DATE(:oszDtEmissao, 'YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS')
            AND
                cd.idtipodocumento = atd.idtipodocumento
            ORDER BY
                atd.nrprioridade
        )
        WHERE
            ROWNUM < 2;


    if(iIdDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdDocumento, oszIdDocumento);
    }

    if(iCdCpfCnpjBase != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCpfCnpjBase, oszCdCpfCnpjBase);
    }

    if(iCdCnpjFilial != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCnpjFilial, oszCdCnpjFilial);
    }

    if(iCdCpfCnpjControle != -1) {
        STRCPY_FROM_ORA(ptDocumento->szCdCpfCnpjControle, oszCdCpfCnpjControle);
    }

    if(iNrDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szNrDocumento, oszNrDocumento);
    }

    if(iSgOrgaoExpedidor != -1) {
        STRCPY_FROM_ORA(ptDocumento->szSgOrgaoExpedidor, oszSgOrgaoExpedidor);
    }

    if(iDtEmissao != -1) {
        STRCPY_FROM_ORA(ptDocumento->szDtEmissao, oszDtEmissao);
    }

    if(iIdPais != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdPais, oszIdPais);
    }

    if(iIdUF != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdUF, oszIdUF);
    }

    if(iIdTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptDocumento->szIdTipoDocumento, oszIdTipoDocumento);
    }

    ULOGI("Finalizando proCBuscaDocumentoChaveComposta <OK>");
    ULOG_END("CDocumentopc::proCBuscaDocumentoChaveComposta");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaDocumentoChaveComposta <NOT FOUND>");
        ULOG_END("CDocumentopc::proCBuscaDocumentoChaveComposta");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaDocumentoChaveComposta <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
