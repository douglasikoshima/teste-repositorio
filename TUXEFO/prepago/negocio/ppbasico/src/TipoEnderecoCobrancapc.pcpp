///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  PrePago
 * @usecase TipoEnderecoCobranca
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:23 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "TipoEnderecoCobrancapc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CTipoEnderecoCobrancapc::proCBuscaTipoEnderecoCobranca(TTipoEnderecoCobranca *ptTipoEnderecoCobranca)
{

    ULOG_START("CTipoEnderecoCobrancapc::proCBuscaTipoEnderecoCobranca");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoEnderecoCobranca[LEN_IDTIPOENDERECOCOBRANCA];
        VARCHAR oszSgTipoEnderecoCobranca[LEN_SGTIPOENDERECOCOBRANCA];
        VARCHAR oszDsTipoEnderecoCobranca[LEN_DSTIPOENDERECOCOBRANCA];

        short iIdTipoEnderecoCobranca = 0;
        short iSgTipoEnderecoCobranca = 0;
        short iDsTipoEnderecoCobranca = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszSgTipoEnderecoCobranca, ptTipoEnderecoCobranca->szSgTipoEnderecoCobranca);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL SELECT idtipoenderecocobranca
	              , sgtipoenderecocobranca
	              , dstipoenderecocobranca
	           INTO :oszIdTipoEnderecoCobranca:iIdTipoEnderecoCobranca
	              , :oszSgTipoEnderecoCobranca:iSgTipoEnderecoCobranca
	              , :oszDsTipoEnderecoCobranca:iDsTipoEnderecoCobranca
	           FROM apoio.tipoenderecocobranca
	          WHERE sgtipoenderecocobranca = :oszSgTipoEnderecoCobranca;

    if(iIdTipoEnderecoCobranca != -1) {
        STRCPY_FROM_ORA(ptTipoEnderecoCobranca->szIdTipoEnderecoCobranca, oszIdTipoEnderecoCobranca);
    }
    if(iSgTipoEnderecoCobranca != -1) {
        STRCPY_FROM_ORA(ptTipoEnderecoCobranca->szSgTipoEnderecoCobranca, oszSgTipoEnderecoCobranca);
    }
    if(iDsTipoEnderecoCobranca != -1) {
        STRCPY_FROM_ORA(ptTipoEnderecoCobranca->szDsTipoEnderecoCobranca, oszDsTipoEnderecoCobranca);
    }

    ULOGI("Finalizando proCBuscaTipoEnderecoCobranca <OK>");
    ULOG_END("CTipoEnderecoCobrancapc::proCBuscaTipoEnderecoCobranca");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaTipoEnderecoCobranca <NOT FOUND>");
        ULOG_END("CTipoEnderecoCobrancapc::proCBuscaTipoEnderecoCobranca");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaTipoEnderecoCobranca <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
