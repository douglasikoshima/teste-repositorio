#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CSexo.h>

CSexo::CSexo()
{
}

CSexo::~CSexo()
{
}

int CSexo::ListId( char* cidSexo ) 
{
    ULOG_START("CSexo::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSexo = cidSexo; 
		struct
		{
			VARCHAR stidSexo[21+1];
			VARCHAR stsgSexo[255+1];
			VARCHAR stdsSexo[255+1];
		} stSexoRegistro;
		struct
		{
			short iidSexo;
			short isgSexo;
			short idsSexo;
		} stSexoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraSexo();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorSexoId CURSOR FOR 
   			SELECT 	
				IDSEXO,
				SGSEXO,
				DSSEXO
			FROM 
				APOIO.SEXO
			WHERE 
				IDSEXO = :cAuxidSexo;

		//Abre o cursor
		EXEC SQL OPEN CursorSexoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CSexo::ListId <ERROR>");
            ULOG_END("CSexo::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSexoRegistro, 0, sizeof(stSexoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSexoId INTO :stSexoRegistro:stSexoIndicator;
				//Adiciona a classe
				Add(
					(char*)stSexoRegistro.stidSexo.arr,
					(char*)stSexoRegistro.stsgSexo.arr,
					(char*)stSexoRegistro.stdsSexo.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorSexoId;
		}

        ULOGI("CSexo::ListId <OK>");
        ULOG_END("CSexo::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CSexo::ListAll( void )
{
    ULOG_START("CSexo::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidSexo[21+1];
			VARCHAR stsgSexo[255+1];
			VARCHAR stdsSexo[255+1];
		} stSexoRegistro;
		struct
		{
			short iidSexo;
			short isgSexo;
			short idsSexo;
		} stSexoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraSexo();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorSexoAll CURSOR FOR
   			SELECT 	
				IDSEXO,
				SGSEXO,
				DSSEXO
			FROM 
				APOIO.SEXO
			WHERE
				IDSEXO > 0
			ORDER BY
				DSSEXO;

		//Abre o cursor
		EXEC SQL OPEN CursorSexoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CSexo::ListAll <ERROR>");
            ULOG_END("CSexo::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSexoRegistro, 0, sizeof(stSexoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSexoAll INTO :stSexoRegistro:stSexoIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stSexoRegistro.stidSexo.arr,
					(char*)stSexoRegistro.stsgSexo.arr,
					(char*)stSexoRegistro.stdsSexo.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorSexoAll;
		}
        ULOGI("CSexo::ListAll <OK>");
        ULOG_END("CSexo::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CSexo::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idSexo", Registro(x)->cidSexo );
				xml->addItem("sgSexo", Registro(x)->csgSexo );
				xml->addItem("dsSexo", Registro(x)->cdsSexo );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CSexo::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idSexo", Registro(x)->cidSexo );
				xml->addItem("dsSexo", Registro(x)->cdsSexo );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
