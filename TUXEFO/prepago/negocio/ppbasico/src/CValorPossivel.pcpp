#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CValorPossivel.h>
#include <Global.h>

CValorPossivel::CValorPossivel()
{
}

CValorPossivel::~CValorPossivel()
{
}

int CValorPossivel::ListId( char* cidValorPossivel ) 
{
    ULOG_START("CValorPossivel::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidValorPossivel = cidValorPossivel; 
		struct
		{
			VARCHAR stidValorPossivel[21+1];
			VARCHAR stdsValorPossivel[255+1];
			VARCHAR stidAtributo[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stValorPossivelRegistro;
		struct
		{
			short stidValorPossivel;
			short stdsValorPossivel;
			short stidAtributo;
			short stsqApresentacao;
			short stinDisponibilidade;
		} stValorPossivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraValorPossivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorValorPossivelId CURSOR FOR 
   			SELECT 	
				IDVALORPOSSIVEL,
				DSVALORPOSSIVEL,
				IDATRIBUTO,
				SQAPRESENTACAO,
				INDISPONIBILIDADE
			FROM 
				CUSTOMER.VALORPOSSIVEL
			WHERE 
				IDVALORPOSSIVEL = :cAuxidValorPossivel;

		//Abre o cursor
		EXEC SQL OPEN CursorValorPossivelId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CValorPossivel::ListId <ERROR>");
            ULOG_END("CValorPossivel::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stValorPossivelRegistro, 0, sizeof(stValorPossivelRegistro) );
				memset( &stValorPossivelIndicator, -1, sizeof(stValorPossivelIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorValorPossivelId INTO :stValorPossivelRegistro:stValorPossivelIndicator;

                CONVIND(stValorPossivelRegistro.stidValorPossivel  ,stValorPossivelIndicator.stidValorPossivel);
                CONVIND(stValorPossivelRegistro.stdsValorPossivel  ,stValorPossivelIndicator.stdsValorPossivel);
                CONVIND(stValorPossivelRegistro.stidAtributo       ,stValorPossivelIndicator.stidAtributo);
                CONVIND(stValorPossivelRegistro.stsqApresentacao   ,stValorPossivelIndicator.stsqApresentacao);
                CONVIND(stValorPossivelRegistro.stinDisponibilidade,stValorPossivelIndicator.stinDisponibilidade);

				//Adiciona a classe
				Add(
					(char*)stValorPossivelRegistro.stidValorPossivel.arr,
					(char*)stValorPossivelRegistro.stdsValorPossivel.arr,
					(char*)stValorPossivelRegistro.stidAtributo.arr,
					(char*)stValorPossivelRegistro.stsqApresentacao.arr,
					(char*)stValorPossivelRegistro.stinDisponibilidade.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorValorPossivelId;
		}

        ULOGI("CValorPossivel::ListId <OK>");
        ULOG_END("CValorPossivel::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CValorPossivel::ListAll( void )
{
    ULOG_START("CValorPossivel::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidValorPossivel[21+1];
			VARCHAR stdsValorPossivel[255+1];
			VARCHAR stidAtributo[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stValorPossivelRegistro;
		struct
		{
			short stidValorPossivel;
			short stdsValorPossivel;
			short stidAtributo;
			short stsqApresentacao;
			short stinDisponibilidade;
		} stValorPossivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraValorPossivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorValorPossivelAll CURSOR FOR
   			SELECT 	
				IDVALORPOSSIVEL,
				DSVALORPOSSIVEL,
				IDATRIBUTO,
				SQAPRESENTACAO,
				INDISPONIBILIDADE
			FROM 
				CUSTOMER.VALORPOSSIVEL
			WHERE
				IDVALORPOSSIVEL > 0
			ORDER BY
				DSVALORPOSSIVEL;

		//Abre o cursor
		EXEC SQL OPEN CursorValorPossivelAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CValorPossivel::ListAll <ERROR>");
            ULOG_END("CValorPossivel::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stValorPossivelRegistro, 0, sizeof(stValorPossivelRegistro) );
				memset( &stValorPossivelIndicator, -1, sizeof(stValorPossivelIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorValorPossivelAll INTO :stValorPossivelRegistro:stValorPossivelIndicator;

                CONVIND(stValorPossivelRegistro.stidValorPossivel  ,stValorPossivelIndicator.stidValorPossivel);
                CONVIND(stValorPossivelRegistro.stdsValorPossivel  ,stValorPossivelIndicator.stdsValorPossivel);
                CONVIND(stValorPossivelRegistro.stidAtributo       ,stValorPossivelIndicator.stidAtributo);
                CONVIND(stValorPossivelRegistro.stsqApresentacao   ,stValorPossivelIndicator.stsqApresentacao);
                CONVIND(stValorPossivelRegistro.stinDisponibilidade,stValorPossivelIndicator.stinDisponibilidade);

				//Adiciona a classe
				Add(
					(char*)stValorPossivelRegistro.stidValorPossivel.arr,
					(char*)stValorPossivelRegistro.stdsValorPossivel.arr,
					(char*)stValorPossivelRegistro.stidAtributo.arr,
					(char*)stValorPossivelRegistro.stsqApresentacao.arr,
					(char*)stValorPossivelRegistro.stinDisponibilidade.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorValorPossivelAll;
		}
        ULOGI("CValorPossivel::ListAll <OK>");
        ULOG_END("CValorPossivel::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CValorPossivel::ListEscolaridade( void ) 
{
	return ListAtributo( PREPAGO_ID_ESCOLARIDADE );
}

int CValorPossivel::ListOcupacao( void ) 
{
	return ListAtributo( PREPAGO_ID_OCUPACAO );
}

int CValorPossivel::ListAtributo( char* cidAtributo ) 
{
    ULOG_START("CValorPossivel::ListAtributo");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidAtributo = cidAtributo; 
		struct
		{
			VARCHAR stidValorPossivel[21+1];
			VARCHAR stdsValorPossivel[255+1];
			VARCHAR stidAtributo[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stValorPossivelRegistro;
		struct
		{
			short stidValorPossivel;
			short stdsValorPossivel;
			short stidAtributo;
			short stsqApresentacao;
			short stinDisponibilidade;
		} stValorPossivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraValorPossivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAtributo;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorListAtributo CURSOR FOR 
   			SELECT 	
				IDVALORPOSSIVEL,
				DSVALORPOSSIVEL,
				IDATRIBUTO,
				SQAPRESENTACAO,
				INDISPONIBILIDADE
			FROM 
				CUSTOMER.VALORPOSSIVEL
			WHERE 
				IDATRIBUTO = :cAuxidAtributo;

		//Abre o cursor
		EXEC SQL OPEN CursorListAtributo;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CValorPossivel::ListAtributo <ERROR>");
            ULOG_END("CValorPossivel::ListAtributo");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stValorPossivelRegistro, 0, sizeof(stValorPossivelRegistro) );
				memset( &stValorPossivelIndicator, -1, sizeof(stValorPossivelIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListAtributo INTO :stValorPossivelRegistro:stValorPossivelIndicator;

                CONVIND(stValorPossivelRegistro.stidValorPossivel  ,stValorPossivelIndicator.stidValorPossivel);
                CONVIND(stValorPossivelRegistro.stdsValorPossivel  ,stValorPossivelIndicator.stdsValorPossivel);
                CONVIND(stValorPossivelRegistro.stidAtributo       ,stValorPossivelIndicator.stidAtributo);
                CONVIND(stValorPossivelRegistro.stsqApresentacao   ,stValorPossivelIndicator.stsqApresentacao);
                CONVIND(stValorPossivelRegistro.stinDisponibilidade,stValorPossivelIndicator.stinDisponibilidade);

				//Adiciona a classe
				Add(
					(char*)stValorPossivelRegistro.stidValorPossivel.arr,
					(char*)stValorPossivelRegistro.stdsValorPossivel.arr,
					(char*)stValorPossivelRegistro.stidAtributo.arr,
					(char*)stValorPossivelRegistro.stsqApresentacao.arr,
					(char*)stValorPossivelRegistro.stinDisponibilidade.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListAtributo;
		}

        ULOGI("CValorPossivel::ListAtributo <OK>");
        ULOG_END("CValorPossivel::ListAtributo");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAtributo:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CValorPossivel::ListEscolaridadePorIdPessoa( char* cidPessoa ) 
{
	return ListAtributoPorIdPessoa( PREPAGO_ID_ESCOLARIDADE, cidPessoa );
}

int CValorPossivel::ListOcupacaoPorIdPessoa( char* cidPessoa ) 
{
	return ListAtributoPorIdPessoa( PREPAGO_ID_OCUPACAO, cidPessoa );
}

int CValorPossivel::ListAtributoPorIdPessoa( char* cidAtributo, char* cidPessoa ) 
{
    ULOG_START("CValorPossivel::ListAtributoPorIdPessoa");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidAtributo = cidAtributo; 
		char* cAuxidPessoa = cidPessoa; 
		struct
		{
			VARCHAR stidValorPossivel[21+1];
			VARCHAR stdsValorPossivel[255+1];
			VARCHAR stidAtributo[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stValorPossivelRegistro;
		struct
		{
			short stidValorPossivel;
			short stdsValorPossivel;
			short stidAtributo;
			short stsqApresentacao;
			short stinDisponibilidade;
		} stValorPossivelIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraValorPossivel();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAtributoPorIdPessoa;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
		DECLARE 
			CursorListAtributoPorIdPessoa CURSOR FOR 
		SELECT 
			VALORPOSSIVEL.IDVALORPOSSIVEL,
			DSVALORPOSSIVEL,
			IDATRIBUTO,
			SQAPRESENTACAO,
			INDISPONIBILIDADE
		FROM
			CUSTOMER.PESSOAVALORPOSSIVEL PESSOAVALORPOSSIVEL,
			CUSTOMER.PESSOA PESSOA,
			CUSTOMER.VALORPOSSIVEL VALORPOSSIVEL		 
		WHERE
			PESSOAVALORPOSSIVEL.IDVALORPOSSIVEL = VALORPOSSIVEL.IDVALORPOSSIVEL
		AND
			PESSOAVALORPOSSIVEL.IDPESSOA = PESSOA.IDPESSOA
		AND
			IDATRIBUTO = :cAuxidAtributo
		AND
			PESSOA.IDPESSOA = :cAuxidPessoa
		AND
			NVL(DTEXCLUSAO,SYSDATE+1) > SYSDATE
			//( DTEXCLUSAO IS NULL OR DTEXCLUSAO > SYSDATE )
		ORDER BY 
			DTEXCLUSAO;

		//Abre o cursor
		EXEC SQL OPEN CursorListAtributoPorIdPessoa;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CValorPossivel::ListAtributoPorIdPessoa <ERROR>");
            ULOG_END("CValorPossivel::ListAtributoPorIdPessoa");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stValorPossivelRegistro, 0, sizeof(stValorPossivelRegistro) );
				memset( &stValorPossivelIndicator, -1, sizeof(stValorPossivelIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListAtributoPorIdPessoa INTO :stValorPossivelRegistro:stValorPossivelIndicator;

                CONVIND(stValorPossivelRegistro.stidValorPossivel  ,stValorPossivelIndicator.stidValorPossivel);
                CONVIND(stValorPossivelRegistro.stdsValorPossivel  ,stValorPossivelIndicator.stdsValorPossivel);
                CONVIND(stValorPossivelRegistro.stidAtributo       ,stValorPossivelIndicator.stidAtributo);
                CONVIND(stValorPossivelRegistro.stsqApresentacao   ,stValorPossivelIndicator.stsqApresentacao);
                CONVIND(stValorPossivelRegistro.stinDisponibilidade,stValorPossivelIndicator.stinDisponibilidade);

				//Adiciona a classe
				Add(
					(char*)stValorPossivelRegistro.stidValorPossivel.arr,
					(char*)stValorPossivelRegistro.stdsValorPossivel.arr,
					(char*)stValorPossivelRegistro.stidAtributo.arr,
					(char*)stValorPossivelRegistro.stsqApresentacao.arr,
					(char*)stValorPossivelRegistro.stinDisponibilidade.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListAtributoPorIdPessoa;
		}

        ULOGI("CValorPossivel::ListAtributoPorIdPessoa <OK>");
        ULOG_END("CValorPossivel::ListAtributoPorIdPessoa");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAtributoPorIdPessoa:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CValorPossivel::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idValorPossivel", Registro(x)->cidValorPossivel );
				xml->addItem("dsValorPossivel", Registro(x)->cdsValorPossivel );
				xml->addItem("idAtributo", Registro(x)->cidAtributo );
				xml->addItem("sqApresentacao", Registro(x)->csqApresentacao ); 
				xml->addItem("inDisponibilidade", Registro(x)->cinDisponibilidade ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CValorPossivel::getXmlCombo( char* cNomeTag,
                                  char* cidTag,
                                  char* cdsTag,
                                  XMLGen* xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem(cidTag, Registro(x)->cidValorPossivel );
				xml->addItem(cdsTag, Registro(x)->cdsValorPossivel );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
