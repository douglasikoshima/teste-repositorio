#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CTipoCarteira.h>
#include <Global.h>

CTipoCarteira::CTipoCarteira()
{
}

CTipoCarteira::~CTipoCarteira()
{
}

int CTipoCarteira::ListId( char* cidTipoCarteira ) 
{
    ULOG_START("CTipoCarteira::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoCarteira = cidTipoCarteira; 
		struct
		{
			VARCHAR stidTipoCarteira[21+1];
			VARCHAR stsgTipoCarteira[255+1];
			VARCHAR stdsTipoCarteira[255+1];
			VARCHAR stvlPeso[21+1];
			VARCHAR stinCorporativo[21+1];
		} stTipoCarteiraRegistro;
		struct
		{
			short stidTipoCarteira;
			short stsgTipoCarteira;
			short stdsTipoCarteira;
			short stvlPeso;
			short stinCorporativo;
		} stTipoCarteiraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoCarteira();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorTipoCarteiraId CURSOR FOR 
   			SELECT 	
				IDTIPOCARTEIRA,
				SGTIPOCARTEIRA,
				DSTIPOCARTEIRA,
				VLPESO,
				INCORPORATIVO
			FROM 
				APOIO.TIPOCARTEIRA
			WHERE 
				IDTIPOCARTEIRA = :cAuxidTipoCarteira;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoCarteiraId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoCarteira::ListId <ERROR>");
            ULOG_END("CTipoCarteira::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoCarteiraRegistro, 0, sizeof(stTipoCarteiraRegistro) );
				memset( &stTipoCarteiraIndicator,-1, sizeof(stTipoCarteiraIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoCarteiraId INTO :stTipoCarteiraRegistro:stTipoCarteiraIndicator;

                CONVIND(stTipoCarteiraRegistro.stidTipoCarteira,stTipoCarteiraIndicator.stidTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stsgTipoCarteira,stTipoCarteiraIndicator.stsgTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stdsTipoCarteira,stTipoCarteiraIndicator.stdsTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stvlPeso        ,stTipoCarteiraIndicator.stvlPeso        );
                CONVIND(stTipoCarteiraRegistro.stinCorporativo ,stTipoCarteiraIndicator.stinCorporativo );

				//Adiciona a classe
				Add(
					(char*)stTipoCarteiraRegistro.stidTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stsgTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stdsTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stvlPeso.arr,
					(char*)stTipoCarteiraRegistro.stinCorporativo.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoCarteiraId;
		}

        ULOGI("CTipoCarteira::ListId <OK>");
        ULOG_END("CTipoCarteira::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoCarteira::ListAll( void )
{
    ULOG_START("CTipoCarteira::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoCarteira[21+1];
			VARCHAR stsgTipoCarteira[255+1];
			VARCHAR stdsTipoCarteira[255+1];
			VARCHAR stvlPeso[21+1];
			VARCHAR stinCorporativo[21+1];
		} stTipoCarteiraRegistro;
		struct
		{
			short stidTipoCarteira;
			short stsgTipoCarteira;
			short stdsTipoCarteira;
			short stvlPeso;
			short stinCorporativo;
		} stTipoCarteiraIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoCarteira();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorTipoCarteiraAll CURSOR FOR
   			SELECT 	
				TIPOCARTEIRA.IDTIPOCARTEIRA,
				TIPOCARTEIRA.SGTIPOCARTEIRA,
				TIPOCARTEIRA.DSTIPOCARTEIRA,
				TIPOCARTEIRA.VLPESO,
				INCORPORATIVO
			FROM 
				APOIO.TIPOCARTEIRA TIPOCARTEIRA
			WHERE
				TIPOCARTEIRA.IDTIPOCARTEIRA > 0
			ORDER BY
				TIPOCARTEIRA.DSTIPOCARTEIRA;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoCarteiraAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoCarteira::ListAll <ERROR>");
            ULOG_END("CTipoCarteira::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoCarteiraRegistro, 0, sizeof(stTipoCarteiraRegistro) );
				memset( &stTipoCarteiraIndicator,-1, sizeof(stTipoCarteiraIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoCarteiraAll INTO :stTipoCarteiraRegistro:stTipoCarteiraIndicator;

                CONVIND(stTipoCarteiraRegistro.stidTipoCarteira,stTipoCarteiraIndicator.stidTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stsgTipoCarteira,stTipoCarteiraIndicator.stsgTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stdsTipoCarteira,stTipoCarteiraIndicator.stdsTipoCarteira);
                CONVIND(stTipoCarteiraRegistro.stvlPeso        ,stTipoCarteiraIndicator.stvlPeso        );
                CONVIND(stTipoCarteiraRegistro.stinCorporativo ,stTipoCarteiraIndicator.stinCorporativo );

				//Adiciona a classe
				Add( 	
					(char*)stTipoCarteiraRegistro.stidTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stsgTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stdsTipoCarteira.arr,
					(char*)stTipoCarteiraRegistro.stvlPeso.arr,
					(char*)stTipoCarteiraRegistro.stinCorporativo.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoCarteiraAll;
		}

        ULOGI("CTipoCarteira::ListAll <OK>");
        ULOG_END("CTipoCarteira::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoCarteira::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoCarteira", Registro(x)->cidTipoCarteira );
				xml->addItem("sgTipoCarteira", Registro(x)->csgTipoCarteira );
				xml->addItem("dsTipoCarteira", Registro(x)->cdsTipoCarteira );
				xml->addItem("vlPeso", Registro(x)->cvlPeso ); 
				xml->addItem("inCorporativo", Registro(x)->cinCorporativo ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CTipoCarteira::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idClassificacaoEmpresa", Registro(x)->cidTipoCarteira );
				xml->addItem("sgClassificacaoEmpresa", Registro(x)->csgTipoCarteira );
				xml->addItem("dsClassificacaoEmpresa", Registro(x)->cdsTipoCarteira );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
