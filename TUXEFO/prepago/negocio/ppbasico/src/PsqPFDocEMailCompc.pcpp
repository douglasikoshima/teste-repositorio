///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  PrePago
 * @usecase Pesquisa Dados de Pessoa Fisica Por Documento
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include <Global.h>
#include "../include/PsqPFDocDdsCttpc.h"
EXEC SQL END DECLARE SECTION;

// EXEC SQL BEGIN DECLARE SECTION;
// #include "../include/PsqPFDocDdsCttpc.h"
// //#include "../include/PsqPFDocDdsEmCompc.h"
// EXEC SQL END DECLARE SECTION;

/************************************************************************************/
bool proCBuscarPFEMailCom(const char *ptIdPessoa,
                          DadosPFEMailComercial *ptDadosPFEMailComercial,
                          StatusPFEMailComercial *ptStatusPFEMailComercial,
                          XMLGen *xml_g)
{
    ULOG_START("proCBuscarPFEMailCom");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *ptSqlIdPessoa = ptIdPessoa;
        struct DadosPFEMailComercial *ptSqlDadosPFEMailComercial = ptDadosPFEMailComercial;
        struct StatusPFEMailComercial *ptSqlptStatusPFEMailComercial = ptStatusPFEMailComercial;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL
        SELECT
            PESSOACOMUNICACAO.DSCONTATO,
            TO_CHAR(MAX(PESSOACOMUNICACAO.DTCADASTRO),'DD/MM/YYYY') AS DTCADASTRO
        INTO
            :ptSqlDadosPFEMailComercial:ptSqlptStatusPFEMailComercial
        FROM
            CUSTOMER.PESSOACOMUNICACAO PESSOACOMUNICACAO,
            APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO 
        WHERE
            PESSOACOMUNICACAO.IDPESSOA IN (SELECT PESSOADEPARA.IDPESSOAORIGEM 
                                             FROM CUSTOMER.PESSOADEPARA 
                                            WHERE PESSOADEPARA.IDPESSOA = :ptSqlIdPessoa)
        AND NVL(PESSOACOMUNICACAO.DTEXPIRACAO,SYSDATE) >= SYSDATE
        //AND NVL(PESSOACOMUNICACAO.INCOMUNICACAOPREFERENCIAL,1) = 1
        AND PESSOACOMUNICACAO.IDTIPOCOMUNICACAO = TIPOCOMUNICACAO.IDTIPOCOMUNICACAO
        AND UPPER(TIPOCOMUNICACAO.SGTIPOCOMUNICACAO) = 'EM COM'
        GROUP BY
            PESSOACOMUNICACAO.DSCONTATO,
            TIPOCOMUNICACAO.DSTIPOCOMUNICACAO;

	xml_g->createTag("PrePagoEMailComPFVO");
        xml_g->addItem("dsContato",ptSqlDadosPFEMailComercial->oszDSCONTATO);
        xml_g->addItem("dtCadastro",ptSqlDadosPFEMailComercial->oszDTCADASTRO);
	xml_g->closeTag();

    ULOGI("Finalizando proCBuscarPFEMailCom <FOUND>");
    ULOG_END("proCBuscarPFEMailCom");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscarPFEMailCom <NOT FOUND>");
        ULOG_END("proCBuscarPFEMailCom");
        return false;

    erro:
        ULOGE("Finalizando proCBuscarPFEMailCom <ERROR>");
        ULOGE("sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
