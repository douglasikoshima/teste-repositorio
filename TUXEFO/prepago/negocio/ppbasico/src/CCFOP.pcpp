#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CFOP.h>
#include <Global.h>

CCFOP::CCFOP()
{
}

CCFOP::~CCFOP()
{
}

int CCFOP::ListId( char* cidCFOP ) 
{
    ULOG_START("CCFOP::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidCFOP = cidCFOP; 
		struct
		{
			VARCHAR stidCFOP[21+1];
			VARCHAR stdsCFOP[255+1];
		} stCFOPRegistro;
		struct
		{
			short stidCFOP;
			short stdsCFOP;
		} stCFOPIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraCFOP();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorCFOPId CURSOR FOR 
   			SELECT 	
				IDCFOP,
				DSCFOP
			FROM 
				APOIO.CFOP
			WHERE 
				IDCFOP = :cAuxidCFOP;

		//Abre o cursor
		EXEC SQL OPEN CursorCFOPId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOG_END("CCFOP::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stCFOPRegistro, 0, sizeof(stCFOPRegistro) );
				memset( &stCFOPIndicator,-1, sizeof(stCFOPIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorCFOPId INTO :stCFOPRegistro:stCFOPIndicator;

                CONVIND(stCFOPRegistro.stidCFOP,stCFOPIndicator.stidCFOP);
                CONVIND(stCFOPRegistro.stdsCFOP,stCFOPIndicator.stdsCFOP);

				//Adiciona a classe
				Add(
					(char*)stCFOPRegistro.stidCFOP.arr,
					(char*)stCFOPRegistro.stdsCFOP.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorCFOPId;
		}

        ULOG_END("CCFOP::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CCFOP::ListAll( void )
{
    ULOG_START("CCFOP::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidCFOP[21+1];
			VARCHAR stdsCFOP[255+1];
		} stCFOPRegistro;
		struct
		{
			short stidCFOP;
			short stdsCFOP;
		} stCFOPIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraCFOP();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorCFOPAll CURSOR FOR
   			SELECT 	
				IDCFOP,
				DSCFOP
			FROM 
				APOIO.CFOP;

		//Abre o cursor
		EXEC SQL OPEN CursorCFOPAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CCFOP::ListAll <ERROR>");
            ULOG_END("CCFOP::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stCFOPRegistro, 0, sizeof(stCFOPRegistro) );
				memset( &stCFOPIndicator,-1, sizeof(stCFOPIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorCFOPAll INTO :stCFOPRegistro:stCFOPIndicator;

                CONVIND(stCFOPRegistro.stidCFOP,stCFOPIndicator.stidCFOP);
                CONVIND(stCFOPRegistro.stdsCFOP,stCFOPIndicator.stdsCFOP);

				//Adiciona a classe
				Add( 	
					(char*)stCFOPRegistro.stidCFOP.arr,
					(char*)stCFOPRegistro.stdsCFOP.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorCFOPAll;
		}

        ULOGI("CCFOP::ListAll <OK>");
        ULOG_END("CCFOP::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CCFOP::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idCFOP", Registro(x)->cidCFOP );
				xml->addItem("dsCFOP", Registro(x)->cdsCFOP );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CCFOP::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTributaria", Registro(x)->cidCFOP );
				xml->addItem("dsTributaria", Registro(x)->cdsCFOP );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
