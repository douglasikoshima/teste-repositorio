///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Prepago
 * @usecase RegistraContato
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "Global.h"
#include "RegistraContatopc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CRegistraContatopc::proCExisteRegistraContato(TRegistraContato tRegistraContato)
{
    ULOG_START("CRegistraContatopc::proCExisteRegistraContato");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTRO];
        VARCHAR oszNrLinha[LEN_NRLINHA];
        int iCount;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    /* atribui valores para as variaveis ProC */
    STRCPY_TO_ORA(oszCdAreaRegistro, tRegistraContato.szCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, tRegistraContato.szNrLinha);

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iCount
        FROM
            tibco_ow.p_registracontato
        WHERE
            cdarearegistro = :oszCdAreaRegistro
        AND
            nrlinha = :oszNrLinha;


    ULOG("iCount(%d)", iCount);
    ULOG_END("CRegistraContatopc::proCExisteRegistraContato");

    if(iCount > 0)
        return true;
     else
        return false;

    erro:
        ULOGE("Finalizando proCExisteRegistraContato <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CRegistraContatopc::proCIncluiRegistraContato(TRegistraContato *ptRegistraContato)
{
    ULOG_START("CRegistraContatopc::proCIncluiRegistraContato");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdRegistraContato[LEN_IDREGISTRACONTATO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTRO];
        VARCHAR oszNrLinha[LEN_NRLINHA];
        VARCHAR oszIdPessoaLinhaHistorico[LEN_IDPESSOALINHAHISTORICO];
        VARCHAR oszXML[LEN_XML_REGCONTATO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;
    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT tibco_ow.p_registracontatoSq.Nextval
               INTO :oszIdRegistraContato
               FROM DUAL;

    STRCPY_FROM_ORA(ptRegistraContato->szIdRegistraContato, oszIdRegistraContato);


    STRCPY_TO_ORA(oszIdPessoaDePara, ptRegistraContato->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptRegistraContato->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszCdAreaRegistro, ptRegistraContato->szCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, ptRegistraContato->szNrLinha);
    STRCPY_TO_ORA(oszIdPessoaLinhaHistorico, ptRegistraContato->szIdPessoaLinhaHistorico);
    STRCPY_TO_ORA(oszXML, ptRegistraContato->szXML);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptRegistraContato->szIdUsuarioAlteracao);


    EXEC SQL INSERT INTO tibco_ow.p_registracontato
        (
            idregistracontato,
            idpessoadepara,
            idlinhatelefonica,
            cdarearegistro,
            nrlinha,
            idpessoalinhahistorico,
            xml,
            idusuarioalteracao,
            dtultimaalteracao,
            ADB_SEQUENCE,
            ADB_OPCODE,
            ADB_L_DELIVERY_STATUS
        )
        VALUES
        (
            :oszIdRegistraContato,
            :oszIdPessoaDePara,
            :oszIdLinhaTelefonica,
            :oszCdAreaRegistro,
            :oszNrLinha,
            :oszIdPessoaLinhaHistorico,
            :oszXML,
            :oszIdUsuarioAlteracao,
            SYSDATE,
            :oszIdRegistraContato,
            '1',
            'N'
        );


    ULOGI("Finalizando proCIncluiRegistraContato <OK>");
    ULOG_END("CRegistraContatopc::proCIncluiRegistraContato");
    return;

    erro:
        ULOGE("Finalizando proCIncluiRegistraContato <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CRegistraContatopc::proCAtualizaRegistraContato(TRegistraContato tRegistraContato)
{
    ULOG_START("CRegistraContatopc::proCAtualizaXmlRegistraContato");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTRO];
        VARCHAR oszNrLinha[LEN_NRLINHA];
        VARCHAR oszIdPessoaLinhaHistorico[LEN_IDPESSOALINHAHISTORICO];
        VARCHAR oszXML[LEN_XML_REGCONTATO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;
    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdPessoaDePara, tRegistraContato.szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, tRegistraContato.szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszCdAreaRegistro, tRegistraContato.szCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, tRegistraContato.szNrLinha);
    STRCPY_TO_ORA(oszIdPessoaLinhaHistorico, tRegistraContato.szIdPessoaLinhaHistorico);
    STRCPY_TO_ORA(oszXML, tRegistraContato.szXML);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tRegistraContato.szIdUsuarioAlteracao);

    EXEC SQL UPDATE tibco_ow.p_registracontato
        SET
            idpessoadepara = :oszIdPessoaDePara,
            idlinhatelefonica = :oszIdLinhaTelefonica,
            idpessoalinhahistorico = :oszIdPessoaLinhaHistorico,
            xml = :oszXML,
            idusuarioalteracao = :oszIdUsuarioAlteracao,
            dtultimaalteracao = SYSDATE
        WHERE
            cdarearegistro = :oszCdAreaRegistro
        AND
            nrlinha = :oszNrLinha;

    ULOGI("Finalizando proCAtualizaXmlRegistraContato <OK>");
    ULOG_END("CRegistraContatopc::proCAtualizaXmlRegistraContato");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaXmlRegistraContato <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
