#undef SQLCA

#define SQLCA_NONE

#include<sqlca.h>

#include<sqlda.h>



#include <memory.h>

#include "tuxfw.h"

#include "PessoaAtendimentoFOpc.h"



EXEC SQL BEGIN DECLARE SECTION;

#include "Global.h"

EXEC SQL END DECLARE SECTION;



/****************************************************************************************/

bool PessoaAtendimentoFOpc::proCexistePessoaAtendimentoFO(TPessoaAtendimentoFO *ptPessoaAtendimentoFO)

{

    ULOG_START("PessoaAtendimentoFOpc::proCexistePessoaAtendimentoFO");



    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR oszIdPessoa[LEN_IDPESSOAATENDIMENTOFO];

        long olCount;

    EXEC SQL END DECLARE SECTION;



    struct sqlca sqlca;



    olCount = 0 ;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaAtendimentoFO->szIdPessoa);



    EXEC SQL WHENEVER SQLERROR goto erro;



    EXEC SQL SELECT COUNT(1)

               INTO :olCount

               FROM Customer.PessoaAtendimentoFO

              WHERE idpessoa = to_number(:oszIdPessoa);



    ULOGI("Quantidade de registros (%ld)", olCount);

    ULOGI("Finalizando proCexistePessoaAtendimentoFO <OK>");



    if(olCount > 0)

    {

        ULOG_END("PessoaAtendimentoFOpc::proCexistePessoaAtendimentoFO");

        return true;

    }

    else

    {

        ULOG_END("PessoaAtendimentoFOpc::proCexistePessoaAtendimentoFO");

        return false;

    }

    

    erro:

        ULOGE("Finalizando proCexistePessoaAtendimentoFO <ERROR>");

        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

}



/****************************************************************************************/

void PessoaAtendimentoFOpc::proCinserePessoaAtendimentoFO(TPessoaAtendimentoFO *ptPessoaAtendimentoFO)

{

    ULOG_START("PessoaAtendimentoFOpc::proCinserePessoaAtendimentoFO");



    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR oszIdPessoa[LEN_IDPESSOAATENDIMENTOFO];

    EXEC SQL END DECLARE SECTION;



    struct sqlca sqlca;



    STRCPY_TO_ORA(oszIdPessoa, ptPessoaAtendimentoFO->szIdPessoa);

 

    EXEC SQL WHENEVER SQLERROR goto erro;



    EXEC SQL

        INSERT INTO Customer.PessoaAtendimentoFO

        ( 

            idpessoa

        )

        VALUES

        ( 

            TO_NUMBER(:oszIdPessoa)

        );



    ULOGI("Finalizando proCinserePessoaAtendimentoFO <OK>");

    ULOG_END("PessoaAtendimentoFOpc::proCinserePessoaAtendimentoFO");

    return;



    erro:

        ULOGE("Finalizando proCinserePessoaAtendimentoFO <ERROR>");

        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

}

