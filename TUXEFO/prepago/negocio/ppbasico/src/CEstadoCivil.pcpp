#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CEstadoCivil.h>
#include <Global.h>

CEstadoCivil::CEstadoCivil()
{
}

CEstadoCivil::~CEstadoCivil()
{
}

int CEstadoCivil::ListId( char* cidEstadoCivil ) 
{
    ULOG_START("CEstadoCivil::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidEstadoCivil = cidEstadoCivil; 
		struct
		{
			VARCHAR stidEstadoCivil[21+1];
			VARCHAR stsgEstadoCivil[255+1];
			VARCHAR stdsEstadoCivil[255+1];
		} stEstadoCivilRegistro;
		struct
		{
			short stidEstadoCivil;
			short stsgEstadoCivil;
			short stdsEstadoCivil;
		} stEstadoCivilIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraEstadoCivil();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorEstadoCivilId CURSOR FOR 
   			SELECT 	
				IDESTADOCIVIL,
				SGESTADOCIVIL,
				DSESTADOCIVIL
			FROM 
				APOIO.ESTADOCIVIL
			WHERE 
				IDESTADOCIVIL = :cAuxidEstadoCivil;

		//Abre o cursor
		EXEC SQL OPEN CursorEstadoCivilId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CEstadoCivil::ListId <ERROR>");
            ULOG_END("CEstadoCivil::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stEstadoCivilRegistro, 0, sizeof(stEstadoCivilRegistro) );
				memset( &stEstadoCivilIndicator,-1, sizeof(stEstadoCivilIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorEstadoCivilId INTO :stEstadoCivilRegistro:stEstadoCivilIndicator;

                CONVIND(stEstadoCivilRegistro.stidEstadoCivil,stEstadoCivilIndicator.stidEstadoCivil);
                CONVIND(stEstadoCivilRegistro.stsgEstadoCivil,stEstadoCivilIndicator.stsgEstadoCivil);
                CONVIND(stEstadoCivilRegistro.stdsEstadoCivil,stEstadoCivilIndicator.stdsEstadoCivil);

				//Adiciona a classe
				Add(
					(char*)stEstadoCivilRegistro.stidEstadoCivil.arr,
					(char*)stEstadoCivilRegistro.stsgEstadoCivil.arr,
					(char*)stEstadoCivilRegistro.stdsEstadoCivil.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorEstadoCivilId;
		}

        ULOGI("CEstadoCivil::ListId <OK>");
        ULOG_END("CEstadoCivil::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CEstadoCivil::ListAll( void )
{
    ULOG_START("CEstadoCivil::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidEstadoCivil[21+1];
			VARCHAR stsgEstadoCivil[255+1];
			VARCHAR stdsEstadoCivil[255+1];
		} stEstadoCivilRegistro;
		struct
		{
			short stidEstadoCivil;
			short stsgEstadoCivil;
			short stdsEstadoCivil;
		} stEstadoCivilIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraEstadoCivil();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorEstadoCivilAll CURSOR FOR
   			SELECT 	
				IDESTADOCIVIL,
				SGESTADOCIVIL,
				DSESTADOCIVIL
			FROM 
				APOIO.ESTADOCIVIL
			WHERE
				IDESTADOCIVIL > 0
			ORDER BY
				DSESTADOCIVIL;

		//Abre o cursor
		EXEC SQL OPEN CursorEstadoCivilAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CEstadoCivil::ListAll <ERROR>");
            ULOG_END("CEstadoCivil::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stEstadoCivilRegistro, 0, sizeof(stEstadoCivilRegistro) );
				memset( &stEstadoCivilIndicator,-1, sizeof(stEstadoCivilIndicator) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorEstadoCivilAll INTO :stEstadoCivilRegistro:stEstadoCivilIndicator;

                CONVIND(stEstadoCivilRegistro.stidEstadoCivil,stEstadoCivilIndicator.stidEstadoCivil);
                CONVIND(stEstadoCivilRegistro.stsgEstadoCivil,stEstadoCivilIndicator.stsgEstadoCivil);
                CONVIND(stEstadoCivilRegistro.stdsEstadoCivil,stEstadoCivilIndicator.stdsEstadoCivil);

				//Adiciona a classe
				Add(
					(char*)stEstadoCivilRegistro.stidEstadoCivil.arr,
					(char*)stEstadoCivilRegistro.stsgEstadoCivil.arr,
					(char*)stEstadoCivilRegistro.stdsEstadoCivil.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorEstadoCivilAll;
		}

        ULOGI("CEstadoCivil::ListAll <OK>");
        ULOG_END("CEstadoCivil::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CEstadoCivil::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idEstadoCivil", Registro(x)->cidEstadoCivil );
				xml->addItem("sgEstadoCivil", Registro(x)->csgEstadoCivil );
				xml->addItem("dsEstadoCivil", Registro(x)->cdsEstadoCivil );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CEstadoCivil::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idEstadoCivil", Registro(x)->cidEstadoCivil );
				xml->addItem("dsEstadoCivil", Registro(x)->cdsEstadoCivil );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
