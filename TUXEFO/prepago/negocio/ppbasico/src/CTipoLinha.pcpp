#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CTipoLinha.h>

CTipoLinha::CTipoLinha()
{
}

CTipoLinha::~CTipoLinha()
{
}

int CTipoLinha::ListId( char* cidTipoLinha ) 
{
    ULOG_START("CTipoLinha::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoLinha = cidTipoLinha; 
		struct
		{
			VARCHAR stidTipoLinha[21+1];
			VARCHAR stsgTipoLinha[255+1];
			VARCHAR stdsTipoLinha[255+1];
			VARCHAR stvlPeso[21+1];
		} stTipoLinhaRegistro;
		struct
		{
			short iidTipoLinha;
			short isgTipoLinha;
			short idsTipoLinha;
			short ivlPeso;
		} stTipoLinhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoLinha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorTipoLinhaId CURSOR FOR 
   			SELECT 	
				IDTIPOLINHA,
				SGTIPOLINHA,
				DSTIPOLINHA,
				VLPESO
			FROM 
				APOIO.TIPOLINHA
			WHERE 
				IDTIPOLINHA = :cAuxidTipoLinha;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoLinhaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoLinha::ListId <ERROR>");
            ULOG_END("CTipoLinha::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoLinhaRegistro, 0, sizeof(stTipoLinhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoLinhaId INTO :stTipoLinhaRegistro:stTipoLinhaIndicator;
				//Adiciona a classe
				Add(
					(char*)stTipoLinhaRegistro.stidTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stsgTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stdsTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stvlPeso.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoLinhaId;
		}

        ULOGI("CTipoLinha::ListId <OK>");
        ULOG_END("CTipoLinha::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoLinha::ListAll( void )
{
    ULOG_START("CTipoLinha::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoLinha[21+1];
			VARCHAR stsgTipoLinha[255+1];
			VARCHAR stdsTipoLinha[255+1];
			VARCHAR stvlPeso[21+1];
		} stTipoLinhaRegistro;
		struct
		{
			short iidTipoLinha;
			short isgTipoLinha;
			short idsTipoLinha;
			short ivlPeso;
		} stTipoLinhaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoLinha();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorTipoLinhaAll CURSOR FOR
   			SELECT 	
				TIPOLINHA.IDTIPOLINHA,
				TIPOLINHA.SGTIPOLINHA,
				TIPOLINHA.DSTIPOLINHA,
				TIPOLINHA.VLPESO
			FROM 
				APOIO.TIPOLINHA TIPOLINHA
			WHERE
				TIPOLINHA.IDTIPOLINHA > 0
			ORDER BY
				TIPOLINHA.DSTIPOLINHA;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoLinhaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoLinha::ListAll <ERROR>");
            ULOG_END("CTipoLinha::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoLinhaRegistro, 0, sizeof(stTipoLinhaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoLinhaAll INTO :stTipoLinhaRegistro:stTipoLinhaIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stTipoLinhaRegistro.stidTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stsgTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stdsTipoLinha.arr,
					(char*)stTipoLinhaRegistro.stvlPeso.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoLinhaAll;
		}

        ULOGI("CTipoLinha::ListAll <OK>");
        ULOG_END("CTipoLinha::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoLinha::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoLinha", Registro(x)->cidTipoLinha );
				xml->addItem("sgTipoLinha", Registro(x)->csgTipoLinha );
				xml->addItem("dsTipoLinha", Registro(x)->cdsTipoLinha );
				xml->addItem("vlPeso", Registro(x)->cvlPeso ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CTipoLinha::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoTelefone", Registro(x)->cidTipoLinha );
				xml->addItem("dsTipoTelefone", Registro(x)->cdsTipoLinha );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
