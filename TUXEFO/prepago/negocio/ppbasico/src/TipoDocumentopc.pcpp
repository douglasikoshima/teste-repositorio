///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Prepago
 * @usecase TipoDocumento
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "TipoDocumentopc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CTipoDocumentopc::proCBuscaTipoDocumento(TTipoDocumento *ptTipoDocumento)
{
    ULOG_START("CTipoDocumentopc::proCBuscaTipoDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszSgTipoDocumento[LEN_SGTIPODOCUMENTO];
        VARCHAR oszDsTipoDocumento[LEN_DSTIPODOCUMENTO];
        VARCHAR oszIdTipoPessoa[LEN_IDTIPOPESSOA];
        VARCHAR oszNrPrioridade[LEN_NRPRIORIDADE];
        VARCHAR oszSgClassificacao[LEN_SGCLASSIFICACAO];

        short iIdTipoDocumento = 0;
        short iSgTipoDocumento = 0;
        short iDsTipoDocumento = 0;
        short iIdTipoPessoa = 0;
        short iNrPrioridade = 0;
        short iSgClassificacao = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;


	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszIdTipoDocumento, ptTipoDocumento->szIdTipoDocumento);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT    idtipodocumento
                , sgclassificacao
                , dstipodocumento
                , idtipopessoa
                , nrprioridade
                , sgclassificacao
        INTO      :oszIdTipoDocumento:iIdTipoDocumento
                , :oszSgTipoDocumento:iSgTipoDocumento
                , :oszDsTipoDocumento:iDsTipoDocumento
                , :oszIdTipoPessoa:iIdTipoPessoa
                , :oszNrPrioridade:iNrPrioridade
                , :oszSgClassificacao:iSgClassificacao
        FROM    apoio.tipodocumento
        WHERE   idtipodocumento = TO_NUMBER(:oszIdTipoDocumento);



    if(iIdTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szIdTipoDocumento, oszIdTipoDocumento);
    }
    if(iSgTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szSgTipoDocumento, oszSgTipoDocumento);
    }
    if(iDsTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szDsTipoDocumento, oszDsTipoDocumento);
    }
    if(iIdTipoPessoa != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szIdTipoPessoa, oszIdTipoPessoa);
    }
    if(iNrPrioridade != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szNrPrioridade, oszNrPrioridade);
    }
    if(iSgClassificacao != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szSgClassificacao, oszSgClassificacao);
    }

    ULOGI("Finalizando proCBuscaTipoDocumento <OK>");
    ULOG_END("CTipoDocumentopc::proCBuscaTipoDocumento");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaTipoDocumento <NOT FOUND>");
        ULOG_END("CTipoDocumentopc::proCBuscaTipoDocumento");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaTipoDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CTipoDocumentopc::proCBuscaIdTipoDocumento(TTipoDocumento *ptTipoDocumento)
{
    ULOG_START("CTipoDocumentopc::proCBuscaIdTipoDocumento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszSgClassificacao[LEN_SGCLASSIFICACAO];

        short iIdTipoDocumento = 0;
        short iSgClassificacao = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszSgClassificacao, ptTipoDocumento->szSgClassificacao);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT  idtipodocumento
        INTO    :oszIdTipoDocumento:iIdTipoDocumento
        FROM    apoio.tipodocumento
        WHERE   sgclassificacao = :oszSgClassificacao
        AND     invisualiza = 1
        AND     rownum < 2;


    if(iIdTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptTipoDocumento->szIdTipoDocumento, oszIdTipoDocumento);
    }

    ULOGI("Finalizando proCBuscaIdTipoDocumento <OK>");
    ULOG_END("CTipoDocumentopc::proCBuscaIdTipoDocumento");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaIdTipoDocumento <NOT FOUND>");
        ULOG_END("CTipoDocumentopc::proCBuscaIdTipoDocumento");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaIdTipoDocumento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
