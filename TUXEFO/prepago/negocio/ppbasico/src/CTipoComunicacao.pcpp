#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CTipoComunicacao.h>

CTipoComunicacao::CTipoComunicacao()
{
}

CTipoComunicacao::~CTipoComunicacao()
{
}

int CTipoComunicacao::ListId( char* cidTipoComunicacao ) 
{
    ULOG_START("CTipoComunicacao::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoComunicacao = cidTipoComunicacao; 
		struct
		{
			VARCHAR stidTipoComunicacao[21+1];
			VARCHAR stsgTipoComunicacao[255+1];
			VARCHAR stdsTipoComunicacao[255+1];
			VARCHAR stidFormaRetorno[21+1];
		} stTipoComunicacaoRegistro;
		struct
		{
			short iidTipoComunicacao;
			short isgTipoComunicacao;
			short idsTipoComunicacao;
			short iidFormaRetorno;
		} stTipoComunicacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoComunicacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorTipoComunicacaoId CURSOR FOR 
   			SELECT 	
				IDTIPOCOMUNICACAO,
				SGTIPOCOMUNICACAO,
				DSTIPOCOMUNICACAO,
				IDFORMARETORNO
			FROM 
				APOIO.TIPOCOMUNICACAO
			WHERE 
				IDTIPOCOMUNICACAO = :cAuxidTipoComunicacao;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoComunicacaoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoComunicacao::ListId <ERROR>");
            ULOG_END("CTipoComunicacao::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoComunicacaoRegistro, 0, sizeof(stTipoComunicacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoComunicacaoId INTO :stTipoComunicacaoRegistro:stTipoComunicacaoIndicator;
				//Adiciona a classe
				Add(
					(char*)stTipoComunicacaoRegistro.stidTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stsgTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stdsTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stidFormaRetorno.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoComunicacaoId;
		}

        ULOGI("CTipoComunicacao::ListId <OK>");
        ULOG_END("CTipoComunicacao::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoComunicacao::ListAll( void )
{
    ULOG_START("CTipoComunicacao::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoComunicacao[21+1];
			VARCHAR stsgTipoComunicacao[255+1];
			VARCHAR stdsTipoComunicacao[255+1];
			VARCHAR stidFormaRetorno[21+1];
		} stTipoComunicacaoRegistro;
		struct
		{
			short iidTipoComunicacao;
			short isgTipoComunicacao;
			short idsTipoComunicacao;
			short iidFormaRetorno;
		} stTipoComunicacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoComunicacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorTipoComunicacaoAll CURSOR FOR
   			SELECT 	
				TIPOCOMUNICACAO.IDTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.SGTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.DSTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.IDFORMARETORNO
			FROM 
				APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO
			WHERE
				TIPOCOMUNICACAO.IDTIPOCOMUNICACAO > 0
			ORDER BY
				TIPOCOMUNICACAO.DSTIPOCOMUNICACAO;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoComunicacaoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoComunicacao::ListAll <ERROR>");
            ULOG_END("CTipoComunicacao::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoComunicacaoRegistro, 0, sizeof(stTipoComunicacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoComunicacaoAll INTO :stTipoComunicacaoRegistro:stTipoComunicacaoIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stTipoComunicacaoRegistro.stidTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stsgTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stdsTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stidFormaRetorno.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoComunicacaoAll;
		}

        ULOGI("CTipoComunicacao::ListAll <OK>");
        ULOG_END("CTipoComunicacao::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoComunicacao::ListTipoTelefones( void )
{
    ULOG_START("CTipoComunicacao::ListTipoTelefones");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoComunicacao[21+1];
			VARCHAR stsgTipoComunicacao[255+1];
			VARCHAR stdsTipoComunicacao[255+1];
			VARCHAR stidFormaRetorno[21+1];
		} stTipoComunicacaoRegistro;
		struct
		{
			short iidTipoComunicacao;
			short isgTipoComunicacao;
			short idsTipoComunicacao;
			short iidFormaRetorno;
		} stTipoComunicacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoComunicacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListTipoTelefones;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorListTipoTelefones CURSOR FOR
   			SELECT 	
				TIPOCOMUNICACAO.IDTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.SGTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.DSTIPOCOMUNICACAO,
				TIPOCOMUNICACAO.IDFORMARETORNO
			FROM 
				APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO
			WHERE
				TIPOCOMUNICACAO.IDTIPOCOMUNICACAO > 0
			AND
				SGTIPOCOMUNICACAO IN ('CELULAR','TEL COM','TEL REC','TEL RES','HM','WK','BS','BC')
			ORDER BY
				TIPOCOMUNICACAO.DSTIPOCOMUNICACAO;

		//Abre o cursor
		EXEC SQL OPEN CursorListTipoTelefones;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoComunicacao::ListTipoTelefones <ERROR>");
            ULOG_END("CTipoComunicacao::ListTipoTelefones");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoComunicacaoRegistro, 0, sizeof(stTipoComunicacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListTipoTelefones INTO :stTipoComunicacaoRegistro:stTipoComunicacaoIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stTipoComunicacaoRegistro.stidTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stsgTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stdsTipoComunicacao.arr,
					(char*)stTipoComunicacaoRegistro.stidFormaRetorno.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorListTipoTelefones;
		}

        ULOGI("CTipoComunicacao::ListTipoTelefones <OK>");
        ULOG_END("CTipoComunicacao::ListTipoTelefones");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListTipoTelefones:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoComunicacao::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoComunicacao", Registro(x)->cidTipoComunicacao );
				xml->addItem("sgTipoComunicacao", Registro(x)->csgTipoComunicacao );
				xml->addItem("dsTipoComunicacao", Registro(x)->cdsTipoComunicacao );
				xml->addItem("idFormaRetorno", Registro(x)->cidFormaRetorno ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CTipoComunicacao::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoTelefone", Registro(x)->cidTipoComunicacao );
				xml->addItem("dsTipoTelefone", Registro(x)->cdsTipoComunicacao );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CTipoComunicacao::getXmlCombo( char* cNomeTag
								   ,char* cidTipoComunicacao
								   ,char* csgTipoComunicacao
								   ,char* cdsTipoComunicacao
								   ,XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem(cidTipoComunicacao, Registro(x)->cidTipoComunicacao );
				xml->addItem(csgTipoComunicacao, Registro(x)->csgTipoComunicacao );
				xml->addItem(cdsTipoComunicacao, Registro(x)->cdsTipoComunicacao );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

int CTipoComunicacao::FindSigla( char* csgTipoComunicacao )
{
	int nRet = 0;
	for( int x = 0; x < Quantidade(); x++ )
	{
		if( strcmp( Registro(x)->csgTipoComunicacao, csgTipoComunicacao ) == 0 )
		{
			nRet = x;
			break;
		}
	}
	return nRet;
}
