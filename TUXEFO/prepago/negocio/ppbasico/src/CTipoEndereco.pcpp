#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CTipoEndereco.h>

CTipoEndereco::CTipoEndereco()
{
}

CTipoEndereco::~CTipoEndereco()
{
}

int CTipoEndereco::ListId( char* cidTipoEndereco ) 
{

    ULOG_START("CTipoEndereco::ListId");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoEndereco = cidTipoEndereco; 
		struct
		{
			VARCHAR stidTipoEndereco[21+1];
			VARCHAR stsgTipoEndereco[255+1];
			VARCHAR stdsTipoEndereco[255+1];
		} stTipoEnderecoRegistro;
		struct
		{
			short iidTipoEndereco;
			short isgTipoEndereco;
			short idsTipoEndereco;
		} stTipoEnderecoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoEndereco();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
			DECLARE 
				CursorTipoEnderecoId CURSOR FOR 
   			SELECT 	
				IDTIPOENDERECO,
				SGTIPOENDERECO,
				DSTIPOENDERECO
			FROM 
				APOIO.TIPOENDERECO
			WHERE 
				IDTIPOENDERECO = :cAuxidTipoEndereco;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoEnderecoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoEndereco::ListId <ERROR>");
            ULOG_END("CTipoEndereco::ListId");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoEnderecoRegistro, 0, sizeof(stTipoEnderecoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoEnderecoId INTO :stTipoEnderecoRegistro:stTipoEnderecoIndicator;
				//Adiciona a classe
				Add(
					(char*)stTipoEnderecoRegistro.stidTipoEndereco.arr,
					(char*)stTipoEnderecoRegistro.stsgTipoEndereco.arr,
					(char*)stTipoEnderecoRegistro.stdsTipoEndereco.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoEnderecoId;
		}

        ULOGI("CTipoEndereco::ListId <OK>");
        ULOG_END("CTipoEndereco::ListId");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoEndereco::ListAll( void )
{
    ULOG_START("CTipoEndereco::ListAll");

	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoEndereco[21+1];
			VARCHAR stsgTipoEndereco[255+1];
			VARCHAR stdsTipoEndereco[255+1];
		} stTipoEnderecoRegistro;
		struct
		{
			short iidTipoEndereco;
			short isgTipoEndereco;
			short idsTipoEndereco;
		} stTipoEnderecoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoEndereco();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
			DECLARE 
				CursorTipoEnderecoAll CURSOR FOR
   			
   			SELECT 	
                 IDTIPOENDERECO,  SGTIPOENDERECO, DSTIPOENDERECO
            FROM 
                 APOIO.TIPOENDERECO
            WHERE
                 IDTIPOENDERECO > 0
            AND
                (
                  SGTIPOENDERECO = 'COB'
                  OR
                  SGTIPOENDERECO = 'COM'  
                  OR
                  SGTIPOENDERECO = 'COR'        
                  OR
                  SGTIPOENDERECO = 'RES'  
                )
            ORDER BY DSTIPOENDERECO;
			

		//Abre o cursor
		EXEC SQL OPEN CursorTipoEnderecoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
        {
            ULOGE("CTipoEndereco::ListAll <ERROR>");
            ULOG_END("CTipoEndereco::ListAll");
			return 0;//Erro
        }
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoEnderecoRegistro, 0, sizeof(stTipoEnderecoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoEnderecoAll INTO :stTipoEnderecoRegistro:stTipoEnderecoIndicator;
				//Adiciona a classe
				Add( 	
					(char*)stTipoEnderecoRegistro.stidTipoEndereco.arr,
					(char*)stTipoEnderecoRegistro.stsgTipoEndereco.arr,
					(char*)stTipoEnderecoRegistro.stdsTipoEndereco.arr
				);
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoEnderecoAll;
		}

        ULOGI("CTipoEndereco::ListAll <OK>");
        ULOG_END("CTipoEndereco::ListAll");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoEndereco::getXmlBasico( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoEndereco", Registro(x)->cidTipoEndereco );
				xml->addItem("sgTipoEndereco", Registro(x)->csgTipoEndereco );
				xml->addItem("dsTipoEndereco", Registro(x)->cdsTipoEndereco );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}

void CTipoEndereco::getXmlLista( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoEndereco", Registro(x)->cidTipoEndereco );
				xml->addItem("dsTipoEndereco", Registro(x)->cdsTipoEndereco );
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
