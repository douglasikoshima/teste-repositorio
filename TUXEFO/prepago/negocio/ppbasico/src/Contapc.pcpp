///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Sincronismo
 * @usecase Conta
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "Global.h"
#include "Contapc.h"
#include "PrePagoException.h"


EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CContapc::proCApagaConta(TConta tConta)
{
    ULOG_START("CContapc::proCApagaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszSqSincronismoPrincipal[LEN_SQSINCRONISMOPRINCIPAL];
        VARCHAR oszTsSincronismoPrincipal[LEN_TSSINCRONISMOPRINCIPAL];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* atribuicao de valores para as variaveis ProC */
    STRCPY_TO_ORA(oszIdConta, tConta.szIdConta);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tConta.szIdUsuarioAlteracao );
    STRCPY_TO_ORA(oszSqSincronismoPrincipal, tConta.szSqSincronismoPrincipal);
    STRCPY_TO_ORA(oszTsSincronismoPrincipal, tConta.szTsSincronismoPrincipal);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL UPDATE Customer.Conta
                SET dtexpiracao                   = SYSDATE
                  , dtultimaalteracao             = SYSDATE
                  , sqsincronismoprincipal        = TO_NUMBER(:oszSqSincronismoPrincipal)
                  , tssincronismoprincipal        = TO_NUMBER(:oszTsSincronismoPrincipal)
                  , idusuarioalteracao            = TO_NUMBER(:oszIdUsuarioAlteracao)
              WHERE idconta                       = TO_NUMBER(:oszIdConta);

    ULOGI("Finalizando proCApagaConta <OK>");
    ULOG_END("CContapc::proCApagaConta");
    return true;

    erro:
        ULOGE("Finalizando proCApagaConta <ERROR>");
        ULOG_END("CContapc::proCApagaConta");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

    naoexiste:
        ULOGI("Finalizada proCApagaConta <INVALID SEQUENCE>");
        ULOG_END("CContapc::proCApagaConta");
        return false;
}

/****************************************************************************************/
bool CContapc::proCAtualizaConta(TConta tConta)
{
    ULOG_START("CContapc::proCAtualizaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdLayoutConta[LEN_IDLAYOUTCONTA];
        VARCHAR oszIdTipoConta[LEN_IDTIPOCONTA];
        VARCHAR oszCdConta[LEN_CDCONTA];
        VARCHAR oszCdDigitoConta[LEN_CDDIGITOCONTA];
        VARCHAR oszCdCicloFaturamento[LEN_CDCICLOFATURAMENTO];
        VARCHAR oszNrDiaVencimento[LEN_NRDIAVENCIMENTO];
        VARCHAR oszInContaPorEmail[LEN_INCONTAPOREMAIL];
        VARCHAR oszTsSincronismoPrincipal[LEN_TSSINCRONISMOPRINCIPAL];
        VARCHAR oszSqSincronismoPrincipal[LEN_SQSINCRONISMOPRINCIPAL];
        VARCHAR oszTsSincronismoCiclo[LEN_TSSINCRONISMOCICLO];
        VARCHAR oszSqSincronismoCiclo[LEN_SQSINCRONISMOCICLO];
        VARCHAR oszTsSincronismoStatus[LEN_TSSINCRONISMOSTATUS];
        VARCHAR oszSqSincronismoStatus[LEN_SQSINCRONISMOSTATUS];
        VARCHAR oszIdStatusConta[LEN_IDSTATUSCONTA];
        VARCHAR oszIdContaSistemaOrigem[LEN_IDCONTASISTEMAORIGEM];
        VARCHAR oszNrDiaPeriodoCicloDe[LEN_NRDIAPERIODOCICLODE];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* atribui valores para as variaveis ProC */
    STRCPY_TO_ORA(oszIdConta, tConta.szIdConta);
    STRCPY_TO_ORA(oszIdSistemaOrigem, tConta.szIdSistemaOrigem);
    STRCPY_TO_ORA(oszIdLayoutConta, tConta.szIdLayoutConta);
    STRCPY_TO_ORA(oszIdTipoConta, tConta.szIdTipoConta);
    STRCPY_TO_ORA(oszCdConta, tConta.szCdConta);
    STRCPY_TO_ORA(oszCdDigitoConta, tConta.szCdDigitoConta);
    STRCPY_TO_ORA(oszCdCicloFaturamento, tConta.szCdCicloFaturamento);
    STRCPY_TO_ORA(oszNrDiaVencimento, tConta.szNrDiaVencimento);
    STRCPY_TO_ORA(oszInContaPorEmail, tConta.szInContaPorEmail);
    STRCPY_TO_ORA(oszTsSincronismoPrincipal, tConta.szTsSincronismoPrincipal);
    STRCPY_TO_ORA(oszSqSincronismoPrincipal, tConta.szSqSincronismoPrincipal);
    STRCPY_TO_ORA(oszTsSincronismoCiclo, tConta.szTsSincronismoCiclo);
    STRCPY_TO_ORA(oszSqSincronismoCiclo, tConta.szSqSincronismoCiclo);
    STRCPY_TO_ORA(oszTsSincronismoStatus, tConta.szTsSincronismoStatus);
    STRCPY_TO_ORA(oszSqSincronismoStatus, tConta.szSqSincronismoStatus);
    STRCPY_TO_ORA(oszIdStatusConta, tConta.szIdStatusConta);
    STRCPY_TO_ORA(oszIdContaSistemaOrigem, tConta.szIdContaSistemaOrigem);
    STRCPY_TO_ORA(oszNrDiaPeriodoCicloDe, tConta.szNrDiaPeriodoCicloDe);
    STRCPY_TO_ORA(oszDtExpiracao, tConta.szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tConta.szIdUsuarioAlteracao );

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL UPDATE Customer.Conta
                SET idlayoutconta = TO_NUMBER(:oszIdLayoutConta)
                  , idtipoconta = TO_NUMBER(:oszIdTipoConta)
                  , cdconta = :oszCdConta
                  , cddigitoconta = :oszCdDigitoConta
                  , cdciclofaturamento = :oszCdCicloFaturamento
                  , nrdiavencimento = TO_NUMBER(:oszNrDiaVencimento)
                  , incontaporemail = TO_NUMBER(:oszInContaPorEmail)
                  , tssincronismoprincipal = TO_NUMBER(:oszTsSincronismoPrincipal)
                  , sqsincronismoprincipal = TO_NUMBER(:oszSqSincronismoPrincipal)
                  , tssincronismociclo = TO_NUMBER(:oszTsSincronismoCiclo)
                  , sqsincronismociclo = TO_NUMBER(:oszSqSincronismoCiclo)
                  , tssincronismostatus = TO_NUMBER(:oszTsSincronismoStatus)
                  , sqsincronismostatus = TO_NUMBER(:oszSqSincronismoStatus)
                  , idstatusconta = TO_NUMBER(:oszIdStatusConta)
                  , nrdiaperiodociclode = TO_NUMBER(:oszNrDiaPeriodoCicloDe)
                  , idusuarioalteracao = to_number(:oszIdUsuarioAlteracao)
                  , dtultimaalteracao = SYSDATE
              WHERE idconta = TO_NUMBER(:oszIdConta);

    ULOGI("Finalizando proCAtualizaConta <OK>");
    ULOG_END("CContapc::proCAtualizaConta");
    return true;

    erro:
        ULOGE("Finalizando proCAtualizaConta <ERROR>");
        ULOG_END("CContapc::proCAtualizaConta");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

    naoexiste:
        ULOGI("Finalizada proCAtualizaConta <INVALID SEQUENCE>");
        ULOG_END("CContapc::proCAtualizaConta");
        return false;
}

/****************************************************************************************/
void CContapc::proCInsereConta(TConta *ptConta)
{
    ULOG_START("CContapc::proCInsereConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdLayoutConta[LEN_IDLAYOUTCONTA];
        VARCHAR oszIdTipoConta[LEN_IDTIPOCONTA];
        VARCHAR oszCdConta[LEN_CDCONTA];
        VARCHAR oszCdDigitoConta[LEN_CDDIGITOCONTA];
        VARCHAR oszCdCicloFaturamento[LEN_CDCICLOFATURAMENTO];
        VARCHAR oszNrDiaVencimento[LEN_NRDIAVENCIMENTO];
        VARCHAR oszInContaPorEmail[LEN_INCONTAPOREMAIL];
        VARCHAR oszTsSincronismoPrincipal[LEN_TSSINCRONISMOPRINCIPAL];
        VARCHAR oszSqSincronismoPrincipal[LEN_SQSINCRONISMOPRINCIPAL];
        VARCHAR oszTsSincronismoCiclo[LEN_TSSINCRONISMOCICLO];
        VARCHAR oszSqSincronismoCiclo[LEN_SQSINCRONISMOCICLO];
        VARCHAR oszTsSincronismoStatus[LEN_TSSINCRONISMOSTATUS];
        VARCHAR oszSqSincronismoStatus[LEN_SQSINCRONISMOSTATUS];
        VARCHAR oszIdStatusConta[LEN_IDSTATUSCONTA];
        VARCHAR oszIdContaSistemaOrigem[LEN_IDCONTASISTEMAORIGEM];
        VARCHAR oszNrDiaPeriodoCicloDe[LEN_NRDIAPERIODOCICLODE];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtEfetivaStatus[LEN_DTEFETIVASTATUS];
        VARCHAR oszDtEfetivaCiclo[LEN_DTEFETIVACICLO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;


    /* atribui valores para as variaveis ProC */
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptConta->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszIdLayoutConta, ptConta->szIdLayoutConta);
    STRCPY_TO_ORA(oszIdTipoConta, ptConta->szIdTipoConta);
    STRCPY_TO_ORA(oszCdConta, ptConta->szCdConta);
    STRCPY_TO_ORA(oszCdDigitoConta, ptConta->szCdDigitoConta);
    STRCPY_TO_ORA(oszCdCicloFaturamento, ptConta->szCdCicloFaturamento);
    STRCPY_TO_ORA(oszNrDiaVencimento, ptConta->szNrDiaVencimento);
    STRCPY_TO_ORA(oszInContaPorEmail, ptConta->szInContaPorEmail);
    STRCPY_TO_ORA(oszTsSincronismoPrincipal, ptConta->szTsSincronismoPrincipal);
    STRCPY_TO_ORA(oszSqSincronismoPrincipal, ptConta->szSqSincronismoPrincipal);
    STRCPY_TO_ORA(oszTsSincronismoCiclo, ptConta->szTsSincronismoCiclo);
    STRCPY_TO_ORA(oszSqSincronismoCiclo, ptConta->szSqSincronismoCiclo);
    STRCPY_TO_ORA(oszTsSincronismoStatus, ptConta->szTsSincronismoStatus);
    STRCPY_TO_ORA(oszSqSincronismoStatus, ptConta->szSqSincronismoStatus);
    STRCPY_TO_ORA(oszIdStatusConta, ptConta->szIdStatusConta);
    STRCPY_TO_ORA(oszIdContaSistemaOrigem, ptConta->szIdContaSistemaOrigem);
    STRCPY_TO_ORA(oszNrDiaPeriodoCicloDe, ptConta->szNrDiaPeriodoCicloDe);
    STRCPY_TO_ORA(oszDtExpiracao, ptConta->szDtExpiracao);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptConta->szIdUsuarioAlteracao );
    STRCPY_TO_ORA(oszDtEfetivaStatus, ptConta->szDtEfetivaStatus);
    STRCPY_TO_ORA(oszDtEfetivaCiclo, ptConta->szDtEfetivaCiclo);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL SELECT Customer.Contasq.nextval
               INTO :oszIdConta
               FROM DUAL;

    STRCPY_FROM_ORA(ptConta->szIdConta, oszIdConta);

    EXEC SQL INSERT INTO Customer.Conta
                       ( idconta
                       , idsistemaorigem
                       , idlayoutconta
                       , idtipoconta
                       , cdconta
                       , cddigitoconta
                       , cdciclofaturamento
                       , nrdiavencimento
                       , incontaporemail
                       , tssincronismoprincipal
                       , sqsincronismoprincipal
                       , tssincronismociclo
                       , sqsincronismociclo
                       , tssincronismostatus
                       , sqsincronismostatus
                       , idstatusconta
                       , idcontasistemaorigem
                       , nrdiaperiodociclode
                       , idusuarioalteracao
                       , dtultimaalteracao
                       , dtefetivastatus
                       , dtefetivaciclo)
                VALUES ( :oszIdConta
                       , :oszIdSistemaOrigem
                       , :oszIdLayoutConta
                       , :oszIdTipoConta
                       , :oszCdConta
                       , :oszCdDigitoConta
                       , :oszCdCicloFaturamento
                       , :oszNrDiaVencimento
                       , :oszInContaPorEmail
                       , :oszTsSincronismoPrincipal
                       , :oszSqSincronismoPrincipal
                       , :oszTsSincronismoCiclo
                       , :oszSqSincronismoCiclo
                       , :oszTsSincronismoStatus
                       , :oszSqSincronismoStatus
                       , :oszIdStatusConta
                       , :oszIdContaSistemaOrigem
                       , :oszNrDiaPeriodoCicloDe
                       , :oszIdUsuarioAlteracao
                       , SYSDATE
                       , :oszDtEfetivaStatus
                       , :oszDtEfetivaCiclo);

    ULOGI("Finalizando proCInsereConta <OK>");
    ULOG_END("CContapc::proCInsereConta");
    return;

    erro:
        ULOGE("Finalizando proCInsereConta <ERROR>");
        ULOG_END("CContapc::proCInsereConta");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CContapc::proCBuscaConta(TConta *ptConta)
{
    ULOG_START("CContapc::proCBuscaConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdLayoutConta[LEN_IDLAYOUTCONTA];
        VARCHAR oszIdTipoConta[LEN_IDTIPOCONTA];
        VARCHAR oszCdConta[LEN_CDCONTA];
        VARCHAR oszCdDigitoConta[LEN_CDDIGITOCONTA];
        VARCHAR oszCdCicloFaturamento[LEN_CDCICLOFATURAMENTO];
        VARCHAR oszNrDiaVencimento[LEN_NRDIAVENCIMENTO];
        VARCHAR oszInContaPorEmail[LEN_INCONTAPOREMAIL];
        VARCHAR oszTsSincronismoPrincipal[LEN_TSSINCRONISMOPRINCIPAL];
        VARCHAR oszSqSincronismoPrincipal[LEN_SQSINCRONISMOPRINCIPAL];
        VARCHAR oszTsSincronismoCiclo[LEN_TSSINCRONISMOCICLO];
        VARCHAR oszSqSincronismoCiclo[LEN_SQSINCRONISMOCICLO];
        VARCHAR oszTsSincronismoStatus[LEN_TSSINCRONISMOSTATUS];
        VARCHAR oszSqSincronismoStatus[LEN_SQSINCRONISMOSTATUS];
        VARCHAR oszIdStatusConta[LEN_IDSTATUSCONTA];
        VARCHAR oszIdContaSistemaOrigem[LEN_IDCONTASISTEMAORIGEM];
        VARCHAR oszNrDiaPeriodoCicloDe[LEN_NRDIAPERIODOCICLODE];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];

        short iIdConta = 0;
        short iIdSistemaOrigem = 0;
        short iIdLayoutConta = 0;
        short iIdTipoConta = 0;
        short iCdConta = 0;
        short iCdDigitoConta = 0;
        short iCdCicloFaturamento = 0;
        short iNrDiaVencimento = 0;
        short iInContaPorEmail = 0;
        short iTsSincronismoPrincipal = 0;
        short iSqSincronismoPrincipal = 0;
        short iTsSincronismoCiclo = 0;
        short iSqSincronismoCiclo = 0;
        short iTsSincronismoStatus = 0;
        short iSqSincronismoStatus = 0;
        short iIdStatusConta = 0;
        short iIdContaSistemaOrigem = 0;
        short iNrDiaPeriodoCicloDe = 0;
        short iDtExpiracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* atribuicao de valores para as variaveis ProC */
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptConta->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszIdContaSistemaOrigem, ptConta->szIdContaSistemaOrigem);

    if((!strcmp(ptConta->szIdTipoConta, "0")) || (strlen(ptConta->szIdTipoConta) == 0))
    {
        STRCPY_TO_ORA(oszIdTipoConta, "-1");
    }
    else
    {
        STRCPY_TO_ORA(oszIdTipoConta, ptConta->szIdTipoConta);
    }


    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT /*+ INDEX ( Conta CONTAAK1 ) */
                    to_char(idconta)
                  , to_char(idsistemaorigem)
                  , to_char(idlayoutconta)
                  , to_char(idtipoconta)
                  , to_char(cdconta)
                  , to_char(cddigitoconta)
                  , to_char(cdciclofaturamento)
                  , to_char(nrdiavencimento)
                  , to_char(incontaporemail)
                  , to_char(nvl(tssincronismoprincipal, 0))
                  , to_char(nvl(sqsincronismoprincipal, 0))
                  , to_char(nvl(tssincronismociclo, 0))
                  , to_char(nvl(sqsincronismociclo, 0))
                  , to_char(nvl(tssincronismostatus, 0))
                  , to_char(nvl(sqsincronismostatus, 0))
                  , to_char(idstatusconta)
                  , to_char(idcontasistemaorigem)
                  , to_char(nrdiaperiodociclode)
                  , to_char(dtexpiracao, 'YYYYMMDDHH24MISS')
               INTO :oszIdConta:iIdConta
                  , :oszIdSistemaOrigem:iIdSistemaOrigem
                  , :oszIdLayoutConta:iIdLayoutConta
                  , :oszIdTipoConta:iIdTipoConta
                  , :oszCdConta:iCdConta
                  , :oszCdDigitoConta:iCdDigitoConta
                  , :oszCdCicloFaturamento:iCdCicloFaturamento
                  , :oszNrDiaVencimento:iNrDiaVencimento
                  , :oszInContaPorEmail:iInContaPorEmail
                  , :oszTsSincronismoPrincipal:iTsSincronismoPrincipal
                  , :oszSqSincronismoPrincipal:iSqSincronismoPrincipal
                  , :oszTsSincronismoCiclo:iTsSincronismoCiclo
                  , :oszSqSincronismoCiclo:iSqSincronismoCiclo
                  , :oszTsSincronismoStatus:iTsSincronismoStatus
                  , :oszSqSincronismoStatus:iSqSincronismoStatus
                  , :oszIdStatusConta:iIdStatusConta
                  , :oszIdContaSistemaOrigem:iIdContaSistemaOrigem
                  , :oszNrDiaPeriodoCicloDe:iNrDiaPeriodoCicloDe
                  , :oszDtExpiracao:iDtExpiracao
               FROM Customer.Conta
              WHERE idsistemaorigem = TO_NUMBER(:oszIdSistemaOrigem)
                AND idcontasistemaorigem = :oszIdContaSistemaOrigem
                AND dtexpiracao is NULL;
                
    /* copia os dados obtidos para a estrutura passada como parametro */
    if(iIdConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdConta, oszIdConta);
    }

    if(iIdSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptConta->szIdSistemaOrigem, oszIdSistemaOrigem);
    }

    if(iIdLayoutConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdLayoutConta, oszIdLayoutConta);
    }

    if(iIdTipoConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdTipoConta, oszIdTipoConta);
    }

    if(iCdConta != -1) {
        STRCPY_FROM_ORA(ptConta->szCdConta, oszCdConta);
    }

    if(iCdDigitoConta != -1) {
        STRCPY_FROM_ORA(ptConta->szCdDigitoConta, oszCdDigitoConta);
    }

    if(iCdCicloFaturamento != -1) {
        STRCPY_FROM_ORA(ptConta->szCdCicloFaturamento, oszCdCicloFaturamento);
    }

    if(iNrDiaVencimento != -1) {
        STRCPY_FROM_ORA(ptConta->szNrDiaVencimento, oszNrDiaVencimento);
    }

    if(iInContaPorEmail != -1) {
        STRCPY_FROM_ORA(ptConta->szInContaPorEmail, oszInContaPorEmail);
    }

    if(iTsSincronismoPrincipal != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoPrincipal, oszTsSincronismoPrincipal);
    } else {
        strcpy(ptConta->szTsSincronismoPrincipal, SEM_VALOR);
    }

    if(iSqSincronismoPrincipal != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoPrincipal, oszSqSincronismoPrincipal);
    } else {
        strcpy(ptConta->szSqSincronismoPrincipal, SEM_VALOR);
    }

    if(iTsSincronismoCiclo != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoCiclo, oszTsSincronismoCiclo);
    } else {
       strcpy(ptConta->szTsSincronismoCiclo, SEM_VALOR);
    }

    if(iSqSincronismoCiclo != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoCiclo, oszSqSincronismoCiclo);
    } else {
        strcpy(ptConta->szSqSincronismoCiclo, SEM_VALOR);
    }

    if(iTsSincronismoStatus != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoStatus, oszTsSincronismoStatus);
    } else {
        strcpy(ptConta->szTsSincronismoStatus, SEM_VALOR);
    }

    if(iSqSincronismoStatus != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoStatus, oszSqSincronismoStatus);
    } else {
        strcpy(ptConta->szSqSincronismoStatus, SEM_VALOR);
    }

    if(iIdStatusConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdStatusConta, oszIdStatusConta);
    }

    if(iIdContaSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptConta->szIdContaSistemaOrigem, oszIdContaSistemaOrigem);
    }

    if(iNrDiaPeriodoCicloDe != -1) {
        STRCPY_FROM_ORA(ptConta->szNrDiaPeriodoCicloDe, oszNrDiaPeriodoCicloDe);
    }

    if(iDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptConta->szDtExpiracao, oszDtExpiracao);
    }


    ULOGI("Finalizando proCBuscaConta <FOUND>");
    ULOG_END("CContapc::proCBuscaConta");
    return true;

    erro:
        ULOGE("Finalizando proCBuscaConta <ERROR>");
        ULOG_END("CContapc::proCBuscaConta");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

    naoexiste:
        ULOGI("Finalizando proCBuscaConta <NOT FOUND>");
        ULOG_END("CContapc::proCBuscaConta");
        return false;
}

/****************************************************************************************/
bool CContapc::proCBuscaContaGrupo(TConta *ptConta)
{
    ULOG_START("CContapc::proCBuscaContaGrupo");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdConta[LEN_IDCONTA];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdLayoutConta[LEN_IDLAYOUTCONTA];
        VARCHAR oszIdTipoConta[LEN_IDTIPOCONTA];
        VARCHAR oszCdConta[LEN_CDCONTA];
        VARCHAR oszCdDigitoConta[LEN_CDDIGITOCONTA];
        VARCHAR oszCdCicloFaturamento[LEN_CDCICLOFATURAMENTO];
        VARCHAR oszNrDiaVencimento[LEN_NRDIAVENCIMENTO];
        VARCHAR oszInContaPorEmail[LEN_INCONTAPOREMAIL];
        VARCHAR oszTsSincronismoPrincipal[LEN_TSSINCRONISMOPRINCIPAL];
        VARCHAR oszSqSincronismoPrincipal[LEN_SQSINCRONISMOPRINCIPAL];
        VARCHAR oszTsSincronismoCiclo[LEN_TSSINCRONISMOCICLO];
        VARCHAR oszSqSincronismoCiclo[LEN_SQSINCRONISMOCICLO];
        VARCHAR oszTsSincronismoStatus[LEN_TSSINCRONISMOSTATUS];
        VARCHAR oszSqSincronismoStatus[LEN_SQSINCRONISMOSTATUS];
        VARCHAR oszIdStatusConta[LEN_IDSTATUSCONTA];
        VARCHAR oszIdContaSistemaOrigem[LEN_IDCONTASISTEMAORIGEM];
        VARCHAR oszNrDiaPeriodoCicloDe[LEN_NRDIAPERIODOCICLODE];
        VARCHAR oszDtExpiracao[LEN_DTEXPIRACAO];

        short iIdConta = 0;
        short iIdSistemaOrigem = 0;
        short iIdLayoutConta = 0;
        short iIdTipoConta = 0;
        short iCdConta = 0;
        short iCdDigitoConta = 0;
        short iCdCicloFaturamento = 0;
        short iNrDiaVencimento = 0;
        short iInContaPorEmail = 0;
        short iTsSincronismoPrincipal = 0;
        short iSqSincronismoPrincipal = 0;
        short iTsSincronismoCiclo = 0;
        short iSqSincronismoCiclo = 0;
        short iTsSincronismoStatus = 0;
        short iSqSincronismoStatus = 0;
        short iIdStatusConta = 0;
        short iIdContaSistemaOrigem = 0;
        short iNrDiaPeriodoCicloDe = 0;
        short iDtExpiracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    /* atribuicao de valores para as variaveis ProC */
    STRCPY_TO_ORA(oszIdSistemaOrigem, ptConta->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszIdContaSistemaOrigem, ptConta->szIdContaSistemaOrigem);
    STRCPY_TO_ORA(oszIdTipoConta, ptConta->szIdTipoConta);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT /*+ INDEX ( Conta CONTAAK1 ) */
                    to_char(idconta)
                  , to_char(idsistemaorigem)
                  , to_char(idlayoutconta)
                  , to_char(idtipoconta)
                  , to_char(cdconta)
                  , to_char(cddigitoconta)
                  , to_char(cdciclofaturamento)
                  , to_char(nrdiavencimento)
                  , to_char(incontaporemail)
                  , to_char(nvl(tssincronismoprincipal, 0))
                  , to_char(nvl(sqsincronismoprincipal, 0))
                  , to_char(nvl(tssincronismociclo, 0))
                  , to_char(nvl(sqsincronismociclo, 0))
                  , to_char(nvl(tssincronismostatus, 0))
                  , to_char(nvl(sqsincronismostatus, 0))
                  , to_char(idstatusconta)
                  , to_char(idcontasistemaorigem)
                  , to_char(nrdiaperiodociclode)
                  , to_char(dtexpiracao, 'YYYYMMDDHH24MISS')
               INTO :oszIdConta:iIdConta
                  , :oszIdSistemaOrigem:iIdSistemaOrigem
                  , :oszIdLayoutConta:iIdLayoutConta
                  , :oszIdTipoConta:iIdTipoConta
                  , :oszCdConta:iCdConta
                  , :oszCdDigitoConta:iCdDigitoConta
                  , :oszCdCicloFaturamento:iCdCicloFaturamento
                  , :oszNrDiaVencimento:iNrDiaVencimento
                  , :oszInContaPorEmail:iInContaPorEmail
                  , :oszTsSincronismoPrincipal:iTsSincronismoPrincipal
                  , :oszSqSincronismoPrincipal:iSqSincronismoPrincipal
                  , :oszTsSincronismoCiclo:iTsSincronismoCiclo
                  , :oszSqSincronismoCiclo:iSqSincronismoCiclo
                  , :oszTsSincronismoStatus:iTsSincronismoStatus
                  , :oszSqSincronismoStatus:iSqSincronismoStatus
                  , :oszIdStatusConta:iIdStatusConta
                  , :oszIdContaSistemaOrigem:iIdContaSistemaOrigem
                  , :oszNrDiaPeriodoCicloDe:iNrDiaPeriodoCicloDe
                  , :oszDtExpiracao:iDtExpiracao
               FROM Customer.Conta
              WHERE idsistemaorigem = TO_NUMBER(:oszIdSistemaOrigem)
                AND idcontasistemaorigem = :oszIdContaSistemaOrigem
                AND idtipoconta = :oszIdTipoConta
                AND dtexpiracao is NULL;
                
    /* copia os dados obtidos para a estrutura passada como parametro */
    if(iIdConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdConta, oszIdConta);
    }

    if(iIdSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptConta->szIdSistemaOrigem, oszIdSistemaOrigem);
    }

    if(iIdLayoutConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdLayoutConta, oszIdLayoutConta);
    }

    if(iIdTipoConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdTipoConta, oszIdTipoConta);
    }

    if(iCdConta != -1) {
        STRCPY_FROM_ORA(ptConta->szCdConta, oszCdConta);
    }

    if(iCdDigitoConta != -1) {
        STRCPY_FROM_ORA(ptConta->szCdDigitoConta, oszCdDigitoConta);
    }

    if(iCdCicloFaturamento != -1) {
        STRCPY_FROM_ORA(ptConta->szCdCicloFaturamento, oszCdCicloFaturamento);
    }

    if(iNrDiaVencimento != -1) {
        STRCPY_FROM_ORA(ptConta->szNrDiaVencimento, oszNrDiaVencimento);
    }

    if(iInContaPorEmail != -1) {
        STRCPY_FROM_ORA(ptConta->szInContaPorEmail, oszInContaPorEmail);
    }

    if(iTsSincronismoPrincipal != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoPrincipal, oszTsSincronismoPrincipal);
    } else {
        strcpy(ptConta->szTsSincronismoPrincipal, SEM_VALOR);
    }

    if(iSqSincronismoPrincipal != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoPrincipal, oszSqSincronismoPrincipal);
    } else {
        strcpy(ptConta->szSqSincronismoPrincipal, SEM_VALOR);
    }

    if(iTsSincronismoCiclo != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoCiclo, oszTsSincronismoCiclo);
    } else {
       strcpy(ptConta->szTsSincronismoCiclo, SEM_VALOR);
    }

    if(iSqSincronismoCiclo != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoCiclo, oszSqSincronismoCiclo);
    } else {
        strcpy(ptConta->szSqSincronismoCiclo, SEM_VALOR);
    }

    if(iTsSincronismoStatus != -1) {
        STRCPY_FROM_ORA(ptConta->szTsSincronismoStatus, oszTsSincronismoStatus);
    } else {
        strcpy(ptConta->szTsSincronismoStatus, SEM_VALOR);
    }

    if(iSqSincronismoStatus != -1) {
        STRCPY_FROM_ORA(ptConta->szSqSincronismoStatus, oszSqSincronismoStatus);
    } else {
        strcpy(ptConta->szSqSincronismoStatus, SEM_VALOR);
    }

    if(iIdStatusConta != -1) {
        STRCPY_FROM_ORA(ptConta->szIdStatusConta, oszIdStatusConta);
    }

    if(iIdContaSistemaOrigem != -1) {
        STRCPY_FROM_ORA(ptConta->szIdContaSistemaOrigem, oszIdContaSistemaOrigem);
    }

    if(iNrDiaPeriodoCicloDe != -1) {
        STRCPY_FROM_ORA(ptConta->szNrDiaPeriodoCicloDe, oszNrDiaPeriodoCicloDe);
    }

    if(iDtExpiracao != -1) {
        STRCPY_FROM_ORA(ptConta->szDtExpiracao, oszDtExpiracao);
    }


    ULOGI("Finalizando proCBuscaContaGrupo <FOUND>");
    ULOG_END("CContapc::proCBuscaContaGrupo");
    return true;

    erro:
        ULOGE("Finalizando proCBuscaContaGrupo <ERROR>");
        ULOG_END("CContapc::proCBuscaContaGrupo");
        throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);

    naoexiste:
        ULOGI("Finalizando proCBuscaContaGrupo <NOT FOUND>");
        ULOG_END("CContapc::proCBuscaContaGrupo");
        return false;
}
