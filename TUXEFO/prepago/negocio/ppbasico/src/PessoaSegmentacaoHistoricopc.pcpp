///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  PrePago
 * @usecase PessoaSegmentacaoHistorico
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @author  Eder Martins
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "tuxfw.h"
#include "PessoaSegmentacaoHistoricopc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/********************************************************************************/
void CPessoaSegmentacaoHistoricopc::proCInserePessoaSegmentacaoHistorico(TPessoaSegmentacaoHistorico *ptPessoaSegmentacaoHistorico)
{
    ULOG_START("CPessoaSegmentacaoHistoricopc::proCInserePessoaSegmentacaoHistorico");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaSegmentacao[LEN_IDPESSOASEGMENTACAO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdSegmentacao[LEN_IDSEGMENTACAO];
        VARCHAR oszVlRentabilidade[LEN_VLRENTABILIDADE];
        VARCHAR oszDtSegmentacao[LEN_DTSEGMENTACAO];
        VARCHAR oszDtRentabilidade[LEN_DTRENTABILIDADE];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaSegmentacaoHistorico->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdSegmentacao, ptPessoaSegmentacaoHistorico->szIdSegmentacao);
    STRCPY_TO_ORA(oszVlRentabilidade, ptPessoaSegmentacaoHistorico->szVlRentabilidade);
    STRCPY_TO_ORA(oszDtSegmentacao, ptPessoaSegmentacaoHistorico->szDtSegmentacao);
    STRCPY_TO_ORA(oszDtRentabilidade, ptPessoaSegmentacaoHistorico->szDtRentabilidade);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaSegmentacaoHistorico->szIdUsuarioAlteracao);


    EXEC SQL INSERT INTO Customer.PessoaSegmentacaoHistorico
                       ( idpessoasegmentacao
                       , idpessoadepara
                       , idsegmentacao
                       , vlrentabilidade
                       , dtsegmentacao
                       , dtrentabilidade
                       , idusuarioalteracao
                       , dtultimaalteracao)
                VALUES ( Customer.PessoaSegmentacaoHistoricoSq.nextval
                       , :oszIdPessoaDePara
                       , :oszIdSegmentacao
                       , :oszVlRentabilidade
                       , TO_DATE( :oszDtSegmentacao, 'YYYYMMDDHH24MISS')
                       , TO_DATE( :oszDtRentabilidade, 'YYYYMMDDHH24MISS')
                       , :oszIdUsuarioAlteracao
                       , SYSDATE )
             RETURNING idpessoasegmentacao
                  INTO :oszIdPessoaSegmentacao;

    STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szIdPessoaSegmentacao, oszIdPessoaSegmentacao);

    ULOGI("Finalizando proCInserePessoaSegmentacaoHistorico <OK>");
    ULOG_END("CPessoaSegmentacaoHistoricopc::proCInserePessoaSegmentacaoHistorico");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaSegmentacaoHistorico <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
 
/********************************************************************************/
bool CPessoaSegmentacaoHistoricopc::proCBuscaPessoaSegmentacaoHistorico(TPessoaSegmentacaoHistorico *ptPessoaSegmentacaoHistorico)
{
    ULOG_START("CPessoaSegmentacaoHistoricopc::proCBuscaPessoaSegmentacaoHistorico");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaSegmentacao[LEN_IDPESSOASEGMENTACAO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdSegmentacao[LEN_IDSEGMENTACAO];
        VARCHAR oszVlRentabilidade[LEN_VLRENTABILIDADE];
        VARCHAR oszDtSegmentacao[LEN_DTSEGMENTACAO];
        VARCHAR oszDtRentabilidade[LEN_DTRENTABILIDADE];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoaSegmentacao = 0;
        short iIdPessoaDePara = 0;
        short iIdSegmentacao = 0;
        short iVlRentabilidade = 0;
        short iDtSegmentacao = 0;
        short iDtRentabilidade = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaSegmentacao, ptPessoaSegmentacaoHistorico->szIdPessoaSegmentacao);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR( idpessoasegmentacao  )
                  , TO_CHAR( idpessoadepara       )
                  , TO_CHAR( idsegmentacao        )
                  , TO_CHAR( vlrentabilidade      )
                  , TO_CHAR( dtsegmentacao        , 'DD/MM/YYYY')
                  , TO_CHAR( dtrentabilidade      , 'DD/MM/YYYY')
                  , TO_CHAR( idusuarioalteracao   )
                  , TO_CHAR( dtultimaalteracao    , 'DD/MM/YYYY')
               INTO :oszIdPessoaSegmentacao:iIdPessoaSegmentacao
                  , :oszIdPessoaDePara:iIdPessoaDePara
                  , :oszIdSegmentacao:iIdSegmentacao
                  , :oszVlRentabilidade:iVlRentabilidade
                  , :oszDtSegmentacao:iDtSegmentacao
                  , :oszDtRentabilidade:iDtRentabilidade
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.PessoaSegmentacaoHistorico
              WHERE idpessoasegmentacao = TO_NUMBER( :oszIdPessoaSegmentacao );


    if( iIdPessoaSegmentacao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szIdPessoaSegmentacao, oszIdPessoaSegmentacao);
    }
    if( iIdPessoaDePara != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if( iIdSegmentacao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szIdSegmentacao, oszIdSegmentacao);
    }
    if( iVlRentabilidade != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szVlRentabilidade, oszVlRentabilidade);
    }
    if( iDtSegmentacao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szDtSegmentacao, oszDtSegmentacao);
    }
    if( iDtRentabilidade != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szDtRentabilidade, oszDtRentabilidade);
    }
    if( iIdUsuarioAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if( iDtUltimaAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaSegmentacaoHistorico->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOGI("Finalizando proCBuscaPessoaSegmentacaoHistorico <FOUND>");
    ULOG_END("CPessoaSegmentacaoHistoricopc::proCBuscaPessoaSegmentacaoHistorico");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaSegmentacaoHistorico <NOT FOUND>");
        ULOG_END("CPessoaSegmentacaoHistoricopc::proCBuscaPessoaSegmentacaoHistorico");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaSegmentacaoHistorico <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
