///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  PrePago
 * @usecase Pesquisa Dados de Pessoa Fisica Por Documento
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include <Global.h>
#include "../include/PsqPFDocDdsCttpc.h"
EXEC SQL END DECLARE SECTION;

// EXEC SQL BEGIN DECLARE SECTION;
// #include "../include/PsqPFDocDdsCttpc.h"
// //#include "../include/PsqPFDocPrePospc.h"
// EXEC SQL END DECLARE SECTION;

/************************************************************************************/
bool proCBuscarPFPorDocLinPos(const char *ptszNrDocumento,
                              const char *ptszDsDocumento,
                              DadosPessoaFisicaPorDoc *ptDadosPessoaFisicaPorDoc,
                              XMLGen *xml_g)
{
    ULOG_START("proCBuscarPFPorDocLinPos");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pszNrDocumento = ptszNrDocumento;
        char *pszDsDocumento = (char*)ptszDsDocumento;

        struct
        {
            VARCHAR oszIDPESSOA[LEN_IDPESSOA+LEN_EOS];
            //VARCHAR oszNMPESSOA[LEN_NMPESSOA+LEN_EOS];
            //VARCHAR oszIDSEXO[LEN_IDSEXO+LEN_EOS];
            //VARCHAR oszDSSEXO[LEN_DSSEXO+LEN_EOS];
            //VARCHAR oszDTNASCIMENTO[LEN_CAMPO_TEXTO_PADRAO_FO+LEN_EOS];
            //VARCHAR oszNRTELEFONE[LEN_CAMPO_TEXTO_PADRAO_FO+LEN_EOS];
            //VARCHAR oszDSESTADOCIVIL[LEN_DSESTADOCIVIL+LEN_EOS];
            //VARCHAR oszESCOLARIDADE[LEN_CAMPO_TEXTO_PADRAO_FO+LEN_EOS];
            //VARCHAR oszNATUREZA_OCUPACAO[LEN_CAMPO_TEXTO_PADRAO_FO+LEN_EOS];
            //VARCHAR oszDSCARGOCONTATO[LEN_DSCARGOCONTATO+LEN_EOS];
            VARCHAR oszIDLINHATELEFONICA[LEN_IDLINHATELEFONICA+LEN_EOS];
            //VARCHAR oszCPR[LEN_CAMPO_TEXTO_PADRAO_FO+LEN_EOS];
        } sqlDadosPessoaFisicaPorDoc;

        struct
        {
            short iIDPESSOA;
            //short iNMPESSOA;
            //short iDSSEXO;
            //short iDTNASCIMENTO;
            //short iNRTELEFONE;
            //short iDSESTADOCIVIL;
            //short iESCOLARIDADE;
            //short iNATUREZA_OCUPACAO;
            //short iDSCARGOCONTATO;
            short iIDLINHATELEFONICA;
            //short iCPR;
        } sqlStatusPessoaFisicaPorDoc;

    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    memset(&sqlDadosPessoaFisicaPorDoc,0,sizeof(sqlDadosPessoaFisicaPorDoc));
    memset(&sqlStatusPessoaFisicaPorDoc,-1,sizeof(sqlStatusPessoaFisicaPorDoc));

    if ( !strcmp(pszDsDocumento,"PAS") )
    { // a pesquisa é feita no campo DSTIPODOCUMENTO e deve ser enviado o valor correto
        pszDsDocumento = "PASSAPORTE";
    }

    ULOG("Vai buscar a pessoa para o documento %s-%s",pszDsDocumento,pszNrDocumento);

    EXEC SQL
        SELECT
            IDPESSOA,
            IDLINHATELEFONICA
        INTO
            :sqlDadosPessoaFisicaPorDoc:sqlStatusPessoaFisicaPorDoc
        FROM
        (
            SELECT
                PESSOA.IDPESSOA,
                PESSOALINHA.IDLINHATELEFONICA
            FROM
                APOIO.ESTADOLINHA ESTADOLINHA,
                CUSTOMER.DOCUMENTO DOCUMENTO,
                CUSTOMER.LINHACONTA LINHACONTA,
                CUSTOMER.PESSOA PESSOA,
                CUSTOMER.PESSOADEPARA PESSOADEPARA,
                CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
                CUSTOMER.PESSOAFISICA PESSOAFISICA,
                CUSTOMER.PESSOALINHA PESSOALINHA,
                CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
                CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTOPESSOA,
                LINHA.LINHABASE LINHABASE,
                LINHA.LINHATELEFONICA LINHATELEFONICA
            WHERE
                PESSOA.IDPESSOA = PESSOADOCUMENTO.IDPESSOA
            AND DOCUMENTO.IDTIPODOCUMENTO IN (SELECT TIPODOCUMENTO.IDTIPODOCUMENTO 
                                                FROM APOIO.TIPODOCUMENTO TIPODOCUMENTO
                                               WHERE TIPODOCUMENTO.DSTIPODOCUMENTO = :pszDsDocumento)
            AND DOCUMENTO.NRDOCUMENTO = :pszNrDocumento
            AND LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA
            AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
            AND LINHATELEFONICA.IDTIPOLINHA IN (SELECT TL.IDTIPOLINHA 
                                                  FROM APOIO.TIPOLINHA TL 
                                                 WHERE UPPER(SUBSTR(TL.SGTIPOLINHA,1,3)) = 'POS')
            AND NVL(ESTADOLINHA.INLINHACANCELADA,0) = 0
            AND NVL(LINHACONTA.DTEXPIRACAO,SYSDATE) >= SYSDATE
            AND NVL(LINHATELEFONICA.DTEXPIRACAO,SYSDATE) >= SYSDATE
            AND NVL(PESSOADOCUMENTO.DTEXPIRACAO,SYSDATE) >= SYSDATE
            AND NVL(TIPORELACIONAMENTOPESSOA.SGTIPORELACIONAMENTO,'C') = 'C'
            AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
            AND PESSOA.IDPESSOA = PESSOAFISICA.IDPESSOA
            AND PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
            AND PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO
            AND PESSOALINHA.IDLINHATELEFONICA = LINHACONTA.IDLINHATELEFONICA
            AND PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
            AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTOPESSOA.IDTIPORELACIONAMENTO
            AND TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C'
            AND UPPER(SUBSTR(ESTADOLINHA.DSESTADOLINHA,1,4)) = 'ATIV'
            ORDER BY
                NVL(PESSOA.DTULTIMAALTERACAO,PESSOA.DTCADASTRO) DESC,PESSOALINHA.IDLINHATELEFONICA DESC
        )
        WHERE
            ROWNUM < 2;

    // EXEC SQL
    //     SELECT
    //         IDPESSOA,
    //         NMPESSOA,
    //         IDSEXO,
    //         DSSEXO,
    //         DTNASCIMENTO,
    //         NRTELEFONE,
    //         DSESTADOCIVIL,
    //         ESCOLARIDADE,
    //         NATUREZA_OCUPACAO,
    //         DSCARGOCONTATO,
    //         IDLINHATELEFONICA
    //         CPR
    //     INTO
    //         :sqlDadosPessoaFisicaPorDoc:sqlStatusPessoaFisicaPorDoc
    //     FROM
    //     (
    //         SELECT
    //             NVL(LINHATELEFONICA.DTULTIMAALTERACAO,PESSOA.DTCADASTRO) AS DTLINHA,
    //             PESSOA.IDPESSOA,
    //             PESSOA.NMPESSOA,
    //             SEXO.IDSEXO,
    //             SEXO.DSSEXO,
    //             TO_CHAR(PESSOAFISICA.DTNASCIMENTO,'DD/MM/YYYY') AS DTNASCIMENTO,
    //             AREAREGISTRO.CDAREAREGISTRO || LINHABASE.NRLINHA AS NRTELEFONE,
    //             ESTADOCIVIL.DSESTADOCIVIL,
    //             VALORPOSSIVEL_ESCOLA.DSVALORPOSSIVEL AS ESCOLARIDADE,
    //             VALORPOSSIVEL_OCUPACAO.DSVALORPOSSIVEL AS NATUREZA_OCUPACAO,
    //             PESSOA.DSCARGOCONTATO,
    //             PESSOALINHA.IDLINHATELEFONICA
    //             NULL AS CPR
    //         FROM
    //             APOIO.AREAREGISTRO AREAREGISTRO,
    //             APOIO.ESTADOCIVIL ESTADOCIVIL,
    //             APOIO.ESTADOLINHA ESTADOLINHA,
    //             APOIO.SEXO SEXO,
    //             APOIO.TIPODOCUMENTO TIPODOCUMENTO,
    //             APOIO.TIPOPESSOA TIPOPESSOA,
    //             CUSTOMER.ATRIBUTO ATRIBUTO_ESCOLA,
    //             CUSTOMER.ATRIBUTO ATRIBUTO_OCUPACAO,
    //             CUSTOMER.DOCUMENTO DOCUMENTO,
    //             CUSTOMER.LINHACONTA LINHACONTA,
    //             CUSTOMER.PESSOA PESSOA,
    //             CUSTOMER.PESSOADEPARA PESSOADEPARA,
    //             CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
    //             CUSTOMER.PESSOAFISICA PESSOAFISICA,
    //             CUSTOMER.PESSOALINHA PESSOALINHA,
    //             CUSTOMER.PESSOAVALORPOSSIVEL PESSOAVALORPOSSIVEL_ESCOLA,
    //             CUSTOMER.PESSOAVALORPOSSIVEL PESSOAVALORPOSSIVEL_OCUPACAO,
    //             CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
    //             CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTOPESSOA,
    //             CUSTOMER.VALORPOSSIVEL VALORPOSSIVEL_ESCOLA,
    //             CUSTOMER.VALORPOSSIVEL VALORPOSSIVEL_OCUPACAO,
    //             LINHA.LINHABASE LINHABASE,
    //             LINHA.LINHATELEFONICA LINHATELEFONICA
    //         WHERE
    //             PESSOA.IDPESSOA = PESSOADOCUMENTO.IDPESSOA
    //         AND DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO 
    //         AND DOCUMENTO.NRDOCUMENTO = :pszNrDocumento
    //         AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
    //         AND LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA
    //         AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
    //         AND LINHATELEFONICA.IDTIPOLINHA IN (SELECT TL.IDTIPOLINHA 
    //                                               FROM APOIO.TIPOLINHA TL 
    //                                              WHERE SUBSTR(TL.SGTIPOLINHA,1,3) = 'POS')
    //         AND NVL(ESTADOLINHA.INLINHACANCELADA,0) = 0
    //         AND NVL(LINHACONTA.DTEXPIRACAO,SYSDATE) >= SYSDATE
    //         AND NVL(LINHATELEFONICA.DTEXPIRACAO,SYSDATE) >= SYSDATE
    //         AND NVL(PESSOADOCUMENTO.DTEXPIRACAO,SYSDATE) >= SYSDATE
    //         AND NVL(TIPORELACIONAMENTOPESSOA.SGTIPORELACIONAMENTO,'C') = 'C'
    //         AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
    //         AND PESSOA.IDPESSOA = PESSOAFISICA.IDPESSOA
    //         AND PESSOA.IDPESSOA = PESSOAVALORPOSSIVEL_ESCOLA.IDPESSOA (+)
    //         AND PESSOA.IDPESSOA = PESSOAVALORPOSSIVEL_OCUPACAO.IDPESSOA (+)
    //         AND PESSOA.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA
    //         AND PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
    //         AND PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO
    //         AND PESSOAFISICA.IDESTADOCIVIL = ESTADOCIVIL.IDESTADOCIVIL
    //         AND PESSOAFISICA.IDSEXO = SEXO.IDSEXO
    //         AND PESSOALINHA.IDLINHATELEFONICA = LINHACONTA.IDLINHATELEFONICA
    //         AND PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
    //         AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTOPESSOA.IDTIPORELACIONAMENTO
    //         AND PESSOAVALORPOSSIVEL_ESCOLA.IDVALORPOSSIVEL = VALORPOSSIVEL_ESCOLA.IDVALORPOSSIVEL (+)
    //         AND PESSOAVALORPOSSIVEL_OCUPACAO.IDVALORPOSSIVEL = VALORPOSSIVEL_OCUPACAO.IDVALORPOSSIVEL (+)
    //         AND TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C'
    //         AND UPPER(NVL(ATRIBUTO_ESCOLA.DSATRIBUTO,'ESCOLARIDADE')) = 'ESCOLARIDADE'
    //         AND UPPER(NVL(ATRIBUTO_OCUPACAO.DSATRIBUTO,'NATUREZA DE OCUPAÇÃO')) = 'NATUREZA DE OCUPAÇÃO'
    //         AND UPPER(SUBSTR(ESTADOLINHA.DSESTADOLINHA,1,4)) = 'ATIV'
    //         AND VALORPOSSIVEL_ESCOLA.IDATRIBUTO = ATRIBUTO_ESCOLA.IDATRIBUTO (+)
    //         AND VALORPOSSIVEL_OCUPACAO.IDATRIBUTO = ATRIBUTO_OCUPACAO.IDATRIBUTO (+)
    //         ORDER BY
    //             NVL(PESSOA.DTULTIMAALTERACAO,PESSOA.DTCADASTRO) DESC
    //     )
    //     WHERE
    //         ROWNUM < 2;

	if( -1 != sqlStatusPessoaFisicaPorDoc.iIDPESSOA )
    {
		STRCPY_FROM_ORA(ptDadosPessoaFisicaPorDoc->oszIDPESSOA,sqlDadosPessoaFisicaPorDoc.oszIDPESSOA);
	}
    else
    {
		*ptDadosPessoaFisicaPorDoc->oszIDPESSOA = 0;
    }

	if( -1 != sqlStatusPessoaFisicaPorDoc.iIDLINHATELEFONICA )
    {
		STRCPY_FROM_ORA(ptDadosPessoaFisicaPorDoc->oszIDLINHATELEFONICA,sqlDadosPessoaFisicaPorDoc.oszIDLINHATELEFONICA);
	}
    else
    {
		*ptDadosPessoaFisicaPorDoc->oszIDLINHATELEFONICA = 0;
    }

	// xml_g->createTag("PrePagoDadosPFVO");
    //     xml_g->addItem("dsProfissao",ptSqlDadosPessoaFisicaPorDoc->oszDSCARGOCONTATO);
    //     xml_g->addItem("cpr",ptSqlDadosPessoaFisicaPorDoc->oszCPR);
    //     xml_g->addItem("estadoCivil",ptSqlDadosPessoaFisicaPorDoc->oszDSESTADOCIVIL);
    //     xml_g->addItem("codSexo",ptSqlDadosPessoaFisicaPorDoc->oszIDSEXO);
    //     xml_g->addItem("dsSexo",ptSqlDadosPessoaFisicaPorDoc->oszDSSEXO);
    //     //xml_g->addItem("idTipoDoc",ptSqlDadosPessoaFisicaPorDoc->oszDSTIPODOCUMENTO); // falta preencher com o idtipo documento
    //     //xml_g->addItem("tipoDocumento",ptSqlDadosPessoaFisicaPorDoc->oszDSTIPODOCUMENTO);
    //     xml_g->addItem("dtNascimento",ptSqlDadosPessoaFisicaPorDoc->oszDTNASCIMENTO);
    //     xml_g->addItem("idEscolaridadeSelecionado",ptSqlDadosPessoaFisicaPorDoc->oszESCOLARIDADE);
    //     xml_g->addItem("dsEscolaridade",ptSqlDadosPessoaFisicaPorDoc->oszESCOLARIDADE);
    //     xml_g->addItem("idPessoa",ptSqlDadosPessoaFisicaPorDoc->oszIDPESSOA);
    //     xml_g->addItem("naturezaOcupacao",ptSqlDadosPessoaFisicaPorDoc->oszNATUREZA_OCUPACAO);
    //     xml_g->addItem("nmPessoa",ptSqlDadosPessoaFisicaPorDoc->oszNMPESSOA);
    //     //xml_g->addItem("nrDoc",ptSqlDadosPessoaFisicaPorDoc->oszNRDOCUMENTO);
    //     xml_g->addItem("nrTelefone",ptSqlDadosPessoaFisicaPorDoc->oszNRTELEFONE);
	// xml_g->closeTag();

    ULOGI("Finalizando proCBuscaPFPorDocLinPos <FOUND>");
    ULOG_END("proCBuscarPFPorDocLinPos");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscarPFPorDocLinPos <NOT FOUND>");
        ULOG_END("proCBuscarPFPorDocLinPos");
        return false;

    erro:
        ULOGE("Finalizando proCBuscarPFPorDocLinPos <ERROR>");
        ULOGE("sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
