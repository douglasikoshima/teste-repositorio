///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Sincronismo
 * @usecase TipoConta
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "TipoContapc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CTipoContapc::proCBuscaTipoConta(TTipoConta *ptTipoConta)
{
    ULOG_START("CTipoContapc::proCBuscaTipoConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoConta[LEN_IDTIPOCONTA];
        VARCHAR oszSgTipoConta[LEN_SGTIPOCONTA];
        VARCHAR oszDsTipoConta[LEN_DSTIPOCONTA];

        short iIdTipoConta = 0;
        short iSgTipoConta = 0;
        short iDsTipoConta = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszSgTipoConta, ptTipoConta->szSgTipoConta);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL SELECT idtipoconta
	              , sgtipoconta
	              , dstipoconta
	           INTO :oszIdTipoConta:iIdTipoConta
	              , :oszSgTipoConta:iSgTipoConta
	              , :oszDsTipoConta:iDsTipoConta
	           FROM apoio.tipoconta
	          WHERE sgtipoconta = :oszSgTipoConta;

    if(iIdTipoConta != -1) {
        STRCPY_FROM_ORA(ptTipoConta->szIdTipoConta, oszIdTipoConta);
    }
    if(iSgTipoConta != -1) {
        STRCPY_FROM_ORA(ptTipoConta->szSgTipoConta, oszSgTipoConta);
    }
    if(iDsTipoConta != -1) {
        STRCPY_FROM_ORA(ptTipoConta->szDsTipoConta, oszDsTipoConta);
    }

    ULOGI("Finalizando proCBuscaTipoConta <OK>");
    ULOG_END("CTipoContapc::proCBuscaTipoConta");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaTipoConta <NOT FOUND>");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaTipoConta <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
