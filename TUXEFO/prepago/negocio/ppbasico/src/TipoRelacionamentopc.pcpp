///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  PrePago
 * @usecase TipoRelacionamento
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <memory.h>

#include "tuxfw.h"
#include "TipoRelacionamentopc.h"
#include "PrePagoException.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CTipoRelacionamentopc::proCBuscaTipoRelacionamento(TTipoRelacionamento *ptTipoRelacionamento)
{
    ULOG_START("CTipoRelacionamentopc::proCBuscaTipoRelacionamento");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszSgTipoRelacionamento[LEN_SGTIPORELACIONAMENTO];
        VARCHAR oszNmTipoRelacionamento[LEN_NMTIPORELACIONAMENTO];

        short iIdTipoRelacionamento = 0;
        short iSgTipoRelacionamento = 0;
        short iNmTipoRelacionamento = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	/* atribuicao de valores para as variaveis proc */
	STRCPY_TO_ORA(oszSgTipoRelacionamento, ptTipoRelacionamento->szSgTipoRelacionamento);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL SELECT idtiporelacionamento
	              , sgtiporelacionamento
	              , nmtiporelacionamento
	           INTO :oszIdTipoRelacionamento:iIdTipoRelacionamento
	              , :oszSgTipoRelacionamento:iSgTipoRelacionamento
	              , :oszNmTipoRelacionamento:iNmTipoRelacionamento
	           FROM customer.tiporelacionamento
	          WHERE sgtiporelacionamento = :oszSgTipoRelacionamento;

    if(iIdTipoRelacionamento != -1) {
        STRCPY_FROM_ORA(ptTipoRelacionamento->szIdTipoRelacionamento, oszIdTipoRelacionamento);
    }
    if(iSgTipoRelacionamento != -1) {
        STRCPY_FROM_ORA(ptTipoRelacionamento->szSgTipoRelacionamento, oszSgTipoRelacionamento);
    }
    if(iNmTipoRelacionamento != -1) {
        STRCPY_FROM_ORA(ptTipoRelacionamento->szNmTipoRelacionamento, oszNmTipoRelacionamento);
    }


    ULOGI("Finalizando proCBuscaTipoRelacionamento <OK>");
    ULOG_END("CTipoRelacionamentopc::proCBuscaTipoRelacionamento");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaTipoRelacionamento <NOT FOUND>");
        ULOG_END("CTipoRelacionamentopc::proCBuscaTipoRelacionamento");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaTipoRelacionamento <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
