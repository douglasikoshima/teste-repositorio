///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Sincronismo
 * @usecase PessoaJuridica
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:22 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "tuxfw.h"
#include "PessoaJuridicapc.h"
#include <memory.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
void CPessoaJuridicapc::proCInserePessoaJuridica(TPessoaJuridica *ptPessoaJuridica)
{
    ULOG_START("CPessoaJuridicapc::proCInserePessoaJuridica");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtFundacao[LEN_DTFUNDACAO];
        VARCHAR oszIdCFOP[LEN_IDCFOP];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaJuridica->szIdPessoa);
    STRCPY_TO_ORA(oszNmPessoaFilial, ptPessoaJuridica->szNmPessoaFilial);
    STRCPY_TO_ORA(oszNmFantasia, ptPessoaJuridica->szNmFantasia);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaJuridica->szIdUsuarioAlteracao);
    STRCPY_TO_ORA(oszDtFundacao, ptPessoaJuridica->szDtFundacao);
    STRCPY_TO_ORA(oszIdCFOP, ptPessoaJuridica->szIdCFOP);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL INSERT INTO Customer.PessoaJuridica
                       ( idpessoa
                       , nmpessoafilial
                       , nmfantasia
                       , idusuarioalteracao
                       , dtultimaalteracao
                       , dtfundacao
                       , idcfop)
                VALUES ( :oszIdPessoa
                       , :oszNmPessoaFilial
                       , :oszNmFantasia
                       , :oszIdUsuarioAlteracao
                       , SYSDATE
                       , TO_DATE(:oszDtFundacao, 'YYYYMMDDHH24MISS')
                       , :oszIdCFOP);

    ULOGI("Finalizando proCInserePessoaJuridica <OK>");
    ULOG_END("CPessoaJuridicapc::proCInserePessoaJuridica");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaJuridica <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
void CPessoaJuridicapc::proCAtualizaPessoaJuridica(TPessoaJuridica tPessoaJuridica)
{
    ULOG_START("CPessoaJuridicapc::proCAtualizaPessoaJuridica");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtFundacao[LEN_DTFUNDACAO];
        VARCHAR oszIdCFOP[LEN_IDCFOP];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa, tPessoaJuridica.szIdPessoa);
    STRCPY_TO_ORA(oszNmPessoaFilial, tPessoaJuridica.szNmPessoaFilial);
    STRCPY_TO_ORA(oszNmFantasia, tPessoaJuridica.szNmFantasia);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tPessoaJuridica.szIdUsuarioAlteracao);
    STRCPY_TO_ORA(oszDtFundacao, tPessoaJuridica.szDtFundacao);
    STRCPY_TO_ORA(oszIdCFOP, tPessoaJuridica.szIdCFOP);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL UPDATE Customer.PessoaJuridica
                SET idpessoa            = :oszIdPessoa
                  , nmpessoafilial      = :oszNmPessoaFilial
                  , nmfantasia          = :oszNmFantasia
                  , idusuarioalteracao  = :oszIdUsuarioAlteracao
                  , dtultimaalteracao   = SYSDATE
                  , dtfundacao          = TO_DATE(:oszDtFundacao, 'YYYYMMDDHH24MISS')
                  , idcfop              = :oszIdCFOP
              WHERE idpessoa            = to_number(:oszIdPessoa);

    ULOGI("Finalizando proCAtualizaPessoaJuridica <OK>");
    ULOG_END("CPessoaJuridicapc::proCAtualizaPessoaJuridica");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaJuridica <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
bool CPessoaJuridicapc::proCBuscaPessoaJuridica(TPessoaJuridica *ptPessoaJuridica)
{
    ULOG_START("CPessoaJuridicapc::proCBuscaPessoaJuridica");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
		VARCHAR oszDtFundacao[LEN_DTULTIMAALTERACAO];
        VARCHAR oszIdCFOP[LEN_IDCFOP];

        short iIdPessoa = 0;
        short iNmPessoaFilial = 0;
        short iNmFantasia = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
        short iDtFundacao = 0;
        short iIdCFOP = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;


    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoaJuridica->szIdPessoa);

    EXEC SQL SELECT TO_CHAR( idpessoa           )
                  , TO_CHAR( nmpessoafilial     )
                  , TO_CHAR( nmfantasia         )
                  , TO_CHAR( idusuarioalteracao )
                  , TO_CHAR( dtultimaalteracao  ,'DD/MM/YYYY' )
                  , TO_CHAR( dtfundacao  ,'DD/MM/YYYY' )
                  , TO_CHAR( idcfop )
               INTO :oszIdPessoa:iIdPessoa
                  , :oszNmPessoaFilial:iNmPessoaFilial
                  , :oszNmFantasia:iNmFantasia
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
				  , :oszDtFundacao:iDtFundacao
                  , :oszIdCFOP:iIdCFOP
               FROM Customer.PessoaJuridica
              WHERE idpessoa = TO_NUMBER(:oszIdPessoa);

    // Copias os dados da estrutura ProC para a estrutura C++.
    if(iIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdPessoa, oszIdPessoa);
    }
    if(iNmPessoaFilial != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szNmPessoaFilial, oszNmPessoaFilial);
    }
    if(iNmFantasia != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szNmFantasia, oszNmFantasia);
    }
    if(iIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if(iDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }
    if(iDtFundacao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szDtFundacao, oszDtFundacao);
    }
    if(iIdCFOP != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdCFOP, oszIdCFOP);
    }

    ULOGI("Finalizando proCBuscaPessoaJuridica <FOUND>");
    ULOG_END("CPessoaJuridicapc::proCBuscaPessoaJuridica");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaJuridica <NOT FOUND>");
        ULOG_END("CPessoaJuridicapc::proCBuscaPessoaJuridica");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaJuridica <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
