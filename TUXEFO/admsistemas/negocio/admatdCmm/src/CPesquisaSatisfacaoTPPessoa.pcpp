#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CPesquisaSatisfacaoTPPessoa.h"

CPesquisaSatisfacaoTPPessoa::CPesquisaSatisfacaoTPPessoa()
{
}

CPesquisaSatisfacaoTPPessoa::~CPesquisaSatisfacaoTPPessoa()
{
}

int CPesquisaSatisfacaoTPPessoa::Insert( 
								char* cidTipoPessoa,
								char* cidUsuarioAlteracao
							 )
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::Insert()");  
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoPessoa = cidTipoPessoa;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL 
			INSERT INTO CONTATOADM.PESQUISASATISFACAOTPPESSOA 
			(	IDPESQUISASATISFACAO,
				IDTIPOPESSOA,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES 
			(	CONTATOADM.PESQUISASATISFACAOTPPESSOASQ.NEXTVAL,
				:cAuxidTipoPessoa,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);

        ULOG_END("CPesquisaSatisfacaoTPPessoa::Insert()");  
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPesquisaSatisfacaoTPPessoa::Update( 
								char* cidPesquisaSatisfacao,
								char* cidTipoPessoa,
								char* cidUsuarioAlteracao 
							 )
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::Update()");  
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPesquisaSatisfacao = cidPesquisaSatisfacao;
		char* cAuxidTipoPessoa = cidTipoPessoa;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE CONTATOADM.PESQUISASATISFACAOTPPESSOA 
			SET
				IDTIPOPESSOA = :cAuxidTipoPessoa,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDPESQUISASATISFACAO = :cAuxidPesquisaSatisfacao;
				
		ULOG_END("CPesquisaSatisfacaoTPPessoa::Update()");  
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPesquisaSatisfacaoTPPessoa::Delete( char* cidPesquisaSatisfacao )
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::Delete()");  
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPesquisaSatisfacao = cidPesquisaSatisfacao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.PESQUISASATISFACAOTPPESSOA 		
			WHERE 
				IDPESQUISASATISFACAO = :cAuxidPesquisaSatisfacao;
		
		ULOG_END("CPesquisaSatisfacaoTPPessoa::Delete()");  
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if( sqlca.sqlcode == -2292 )
		return 1;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
}

int CPesquisaSatisfacaoTPPessoa::ListId( char* cidPesquisaSatisfacao ) 
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::ListId()");  
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPesquisaSatisfacao = cidPesquisaSatisfacao; 
		struct
		{
			VARCHAR stidPesquisaSatisfacao[21+1];
			VARCHAR stidTipoPessoa[21+1];
		} stPesquisaSatisfacaoTPPessoaRegistro;
		struct
		{
			short iidPesquisaSatisfacao;
			short iidTipoPessoa;
		} stPesquisaSatisfacaoTPPessoaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorPesquisaSatisfacaoTPPessoaId CURSOR FOR 
   			SELECT 	
   				IDPESQUISASATISFACAO,
				IDTIPOPESSOA
			FROM 
				CONTATOADM.PESQUISASATISFACAOTPPESSOA
			WHERE 
				IDPESQUISASATISFACAO = :cAuxidPesquisaSatisfacao;

		//Abre o cursor
		EXEC SQL OPEN CursorPesquisaSatisfacaoTPPessoaId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPesquisaSatisfacaoTPPessoaRegistro, 0, sizeof(stPesquisaSatisfacaoTPPessoaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorPesquisaSatisfacaoTPPessoaId INTO :stPesquisaSatisfacaoTPPessoaRegistro:stPesquisaSatisfacaoTPPessoaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidPesquisaSatisfacao.arr,
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidTipoPessoa.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorPesquisaSatisfacaoTPPessoaId;
        ULOG_END("CPesquisaSatisfacaoTPPessoa::ListId()");  
        
	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CPesquisaSatisfacaoTPPessoa::ListAll( void )
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::ListAll()");  
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidPesquisaSatisfacao[21+1];
			VARCHAR stidTipoPessoa[21+1];
		} stPesquisaSatisfacaoTPPessoaRegistro;
		struct
		{
			short iidPesquisaSatisfacao;
			short iidTipoPessoa;
		} stPesquisaSatisfacaoTPPessoaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorPesquisaSatisfacaoTPPessoaAll CURSOR FOR
   			SELECT 	
   				IDPESQUISASATISFACAO,
				IDTIPOPESSOA
			FROM 
				CONTATOADM.PESQUISASATISFACAOTPPESSOA
			WHERE
				IDPESQUISASATISFACAO > 0; 

		//Abre o cursor
		EXEC SQL OPEN CursorPesquisaSatisfacaoTPPessoaAll;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPesquisaSatisfacaoTPPessoaRegistro, 0, sizeof(stPesquisaSatisfacaoTPPessoaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorPesquisaSatisfacaoTPPessoaAll INTO :stPesquisaSatisfacaoTPPessoaRegistro:stPesquisaSatisfacaoTPPessoaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidPesquisaSatisfacao.arr,
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidTipoPessoa.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o cursor
		EXEC SQL CLOSE CursorPesquisaSatisfacaoTPPessoaAll;
	}
	catch(...)
	{
		throw;
	}
	
	ULOG_END("CPesquisaSatisfacaoTPPessoa::ListAll()");  
	
	//Retorna a quantidade de registros
	return iCont;

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CPesquisaSatisfacaoTPPessoa::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idPesquisaSatisfacao", Registro(x)->cidPesquisaSatisfacao );
				xml->addItem("idTipoPessoa", Registro(x)->cidTipoPessoa ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CPesquisaSatisfacaoTPPessoa::RelacaoPoridTipoPessoa( char* cidTipoPessoa ) 
{
    ULOG_START("CPesquisaSatisfacaoTPPessoa::RelacaoPoridTipoPessoa()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoPessoa = cidTipoPessoa; 
		struct
		{
			VARCHAR stidPesquisaSatisfacao[21+1];
			VARCHAR stidTipoPessoa[21+1];
		} stPesquisaSatisfacaoTPPessoaRegistro;
		struct
		{
			short iidPesquisaSatisfacao;
			short iidTipoPessoa;
		} stPesquisaSatisfacaoTPPessoaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoTPPessoa();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacaoPoridTipoPessoa;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorRelacaoPoridTipoPessoa CURSOR FOR 
   			SELECT 	
   				IDPESQUISASATISFACAO,
				IDTIPOPESSOA
			FROM 
				CONTATOADM.PESQUISASATISFACAOTPPESSOA
			WHERE 
				IDTIPOPESSOA = :cAuxidTipoPessoa;

		//Abre o cursor
		EXEC SQL OPEN CursorRelacaoPoridTipoPessoa;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPesquisaSatisfacaoTPPessoaRegistro, 0, sizeof(stPesquisaSatisfacaoTPPessoaRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorRelacaoPoridTipoPessoa INTO :stPesquisaSatisfacaoTPPessoaRegistro:stPesquisaSatisfacaoTPPessoaIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidPesquisaSatisfacao.arr,
				(char*)stPesquisaSatisfacaoTPPessoaRegistro.stidTipoPessoa.arr
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorRelacaoPoridTipoPessoa;
		
		ULOG_END("CPesquisaSatisfacaoTPPessoa::RelacaoPoridTipoPessoa()");

	}
	catch(...)
	{
		throw;
	}

	//Retorna a quantidade de registros
	return iCont;
GotoRelacaoPoridTipoPessoa:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}
