#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CCmpCls.h"

CCampoClassificador::CCampoClassificador()
{
}

CCampoClassificador::~CCampoClassificador()
{
}

int CCampoClassificador::ListId( char* cidClassificadorCampo ) 
{
    ULOG_START("CCampoClassificador::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidClassificadorCampo = cidClassificadorCampo; 
		struct
		{
			VARCHAR stidClassificadorCampo[21+1];
			VARCHAR stnmClassificadorCampo[255+1];
		} stCampoClassificadorRegistro;
		struct
		{
			short iidClassificadorCampo;
			short inmClassificadorCampo;
		} stCampoClassificadorIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraCampoClassificador();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorCampoClassificadorId CURSOR FOR 
	   		SELECT
	   			IDCLASSIFICADORCAMPO,
				NMCLASSIFICADORCAMPO
			FROM
				CONTATOADM.CAMPOCLASSIFICADOR
			WHERE
				IDCLASSIFICADORCAMPO = :cAuxidClassificadorCampo;

		//Abre o cursor
		EXEC SQL OPEN CursorCampoClassificadorId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stCampoClassificadorRegistro, 0, sizeof(stCampoClassificadorRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorCampoClassificadorId INTO :stCampoClassificadorRegistro:stCampoClassificadorIndicator;
				//Adiciona a classe
				Add( (char*)stCampoClassificadorRegistro.stidClassificadorCampo.arr,
					 (char*)stCampoClassificadorRegistro.stnmClassificadorCampo.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorCampoClassificadorId;
		}
		
		ULOG_END("CCampoClassificador::ListId()");
		//Retorna a quantidade de registros
		
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CCampoClassificador::ListByName( char* cnmClassificadorCampo ) 
{
    ULOG_START("CCampoClassificador::ListByName()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxnmClassificadorCampo = cnmClassificadorCampo; 
		struct
		{
			VARCHAR stidClassificadorCampo[21+1];
			VARCHAR stnmClassificadorCampo[255+1];
		} stCampoClassificadorRegistro;
		struct
		{
			short iidClassificadorCampo;
			short inmClassificadorCampo;
		} stCampoClassificadorIndicator;
	EXEC SQL END DECLARE SECTION;
	if(cnmClassificadorCampo != NULL)
	{
		sprintf(cAuxnmClassificadorCampo,"%.*s%%",255,cnmClassificadorCampo);
	}
	else
	{
		cAuxnmClassificadorCampo = "%";
	}

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraCampoClassificador();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorCampoClassificadorByName CURSOR FOR 
	   		SELECT
	   			IDCLASSIFICADORCAMPO,
				NMCLASSIFICADORCAMPO
			FROM
				CONTATOADM.CAMPOCLASSIFICADOR
			WHERE
				UPPER(NMCLASSIFICADORCAMPO) LIKE UPPER(:cAuxnmClassificadorCampo)
			ORDER BY
				NMCLASSIFICADORCAMPO;

		//Abre o cursor
		EXEC SQL OPEN CursorCampoClassificadorByName;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stCampoClassificadorRegistro, 0, sizeof(stCampoClassificadorRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorCampoClassificadorByName INTO :stCampoClassificadorRegistro:stCampoClassificadorIndicator;
				//Adiciona a classe
				Add( (char*)stCampoClassificadorRegistro.stidClassificadorCampo.arr,
					 (char*)stCampoClassificadorRegistro.stnmClassificadorCampo.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorCampoClassificadorByName;
		}
		ULOG_END("CCampoClassificador::ListByName()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CCampoClassificador::ListAll( void )
{
    ULOG_START("CCampoClassificador::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidClassificadorCampo[21+1];
			VARCHAR stnmClassificadorCampo[255+1];
		} stCampoClassificadorRegistro;
		struct
		{
			short iidClassificadorCampo;
			short inmClassificadorCampo;
		} stCampoClassificadorIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraCampoClassificador();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
   			DECLARE 
   				CursorCampoClassificadorAll CURSOR FOR
   			SELECT
   				IDCLASSIFICADORCAMPO,
				NMCLASSIFICADORCAMPO
			FROM 
				CONTATOADM.CAMPOCLASSIFICADOR
			WHERE
				IDCLASSIFICADORCAMPO > 0
		    AND
			    IDCLASSIFICADORCAMPO != 41
			ORDER BY NMCLASSIFICADORCAMPO;
				

		//Abre o cursor
		EXEC SQL OPEN CursorCampoClassificadorAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stCampoClassificadorRegistro, 0, sizeof(stCampoClassificadorRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorCampoClassificadorAll INTO :stCampoClassificadorRegistro:stCampoClassificadorIndicator;
				//Adiciona a classe
				Add( (char*)stCampoClassificadorRegistro.stidClassificadorCampo.arr,
				     (char*)stCampoClassificadorRegistro.stnmClassificadorCampo.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorCampoClassificadorAll;
		}
		ULOG_END("CCampoClassificador::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CCampoClassificador::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
			{
				xml->createTag(cNomeTag);
				//Adiciona a proprieda necessaria para o Weblogic
				//xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idClassificadorCampo", Registro(x)->cidClassificadorCampo );
				xml->addItem("nmClassificadorCampo", Registro(x)->cnmClassificadorCampo ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CCampoClassificador::Insert(
					 char* cnmClassificadorCampo
					,char* cidUser
	 )
{
    ULOG_START("CCampoClassificador::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidUserAux = cidUser;
		VARCHAR stidClassificadorCampo[21+1];
		char* cnmClassificadorCampoAux = cnmClassificadorCampo;
	EXEC SQL END DECLARE SECTION;

	memset( &sqlca, 0, sizeof( sqlca ) );
	memset( &stidClassificadorCampo, 0, sizeof( stidClassificadorCampo ) );

	//Ativa as acoes decorrentes de erros ORACLE
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;

	//Recupera um id unico
	EXEC SQL
	SELECT 
		CONTATOADM.CAMPOCLASSIFICADORSQ.NEXTVAL
	INTO
		:stidClassificadorCampo
	FROM
		DUAL;

	//Insere um registro
	EXEC SQL 
	INSERT INTO CONTATOADM.CAMPOCLASSIFICADOR
	( 
		 IDCLASSIFICADORCAMPO
		,NMCLASSIFICADORCAMPO
		,IDUSUARIOALTERACAO
		,DTULTIMAALTERACAO
	)
	VALUES 
	( 
		:stidClassificadorCampo
		,:cnmClassificadorCampoAux
		,:cidUserAux
		,SYSDATE 
	);

	//Salva o registro na estrutura interna
	Add(
		 (char*)stidClassificadorCampo.arr
		,cnmClassificadorCampo
	);

    ULOG_END("CCampoClassificador::Insert()");
	return 1;

GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CCampoClassificador::Update(
					 char* cidClassificadorCampo
					,char* cnmClassificadorCampo
					,char* cidUser
	 ) 
{
    ULOG_START("CCampoClassificador::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidUserAux = cidUser;
		char* cidClassificadorCampoAux = cidClassificadorCampo;
		char* cnmClassificadorCampoAux = cnmClassificadorCampo;
	EXEC SQL END DECLARE SECTION;

	memset( &sqlca, 0, sizeof( sqlca ) );

	//Ativa as acoes decorrentes de erros ORACLE
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;

	//Atualiza um registro
	EXEC SQL 
	UPDATE 
		CONTATOADM.CAMPOCLASSIFICADOR
	SET 
		 NMCLASSIFICADORCAMPO = :cnmClassificadorCampoAux
		,IDUSUARIOALTERACAO = :cidUserAux
		,DTULTIMAALTERACAO = SYSDATE
	WHERE
		IDCLASSIFICADORCAMPO = :cidClassificadorCampoAux;

	//Salva o registro na estrutura interna
	Add(
		 cidClassificadorCampo
		,cnmClassificadorCampo
	);

    ULOG_END("CCampoClassificador::Update()");
	return 1;

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CCampoClassificador::Delete( 
					 char* cidClassificadorCampo
				  ) 
{
    ULOG_START("CCampoClassificador::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidClassificadorCampoAux = cidClassificadorCampo;
	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;

	memset( &sqlca, 0, sizeof( sqlca ) );

	//Ativa as acoes decorrentes de erros ORACLE
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;

	//Apaga um registro
	EXEC SQL 
	DELETE FROM 
		CONTATOADM.CAMPOCLASSIFICADOR
	WHERE 
		IDCLASSIFICADORCAMPO = :cidClassificadorCampoAux;
		
    ULOG_END("CCampoClassificador::Delete()");		

	return 1;

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
	{
		return -2;
	}
	throw TuxBasicOraException(sqlca.sqlcode);
}