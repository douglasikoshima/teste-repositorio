#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFlhPrz.h"

CPrazoAtendimento::CPrazoAtendimento()
{
}

CPrazoAtendimento::~CPrazoAtendimento()
{
}

int CPrazoAtendimento::Insert( 
			char* cidContato,
			char* cidSegmentacao,
			char* cidProcedencia,
			char* cqtDiasPrazoAtendimento,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CPrazoAtendimento::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidPrazoAtendimento[21+1];
		char* cAuxidContato = cidContato;
		char* cAuxidSegmentacao = cidSegmentacao;
		char* cAuxidProcedencia = cidProcedencia;
		char* cAuxqtDiasPrazoAtendimento = cqtDiasPrazoAtendimento;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		memset( &cAuxidPrazoAtendimento, 0, sizeof(cAuxidPrazoAtendimento) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.PrazoAtendimentoSQ.NEXTVAL INTO :cAuxidPrazoAtendimento FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.PrazoAtendimento
		(	idPrazoAtendimento,
			idContato,
			idSegmentacao,
			idProcedencia,
			qtDiasPrazoAtendimento,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidPrazoAtendimento,
			:cAuxidContato,
			:cAuxidSegmentacao,
			:cAuxidProcedencia,
			:cAuxqtDiasPrazoAtendimento,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CPrazoAtendimento::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) 
		{
			return 0;//Erro
		}
		else 
		{
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPrazoAtendimento::Update( 
			char* cidPrazoAtendimento,
			char* cidContato,
			char* cidSegmentacao,
			char* cidProcedencia,
			char* cqtDiasPrazoAtendimento,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CPrazoAtendimento::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidPrazoAtendimento = cidPrazoAtendimento;
			char* cAuxidContato = cidContato;
			char* cAuxidSegmentacao = cidSegmentacao;
			char* cAuxidProcedencia = cidProcedencia;
			char* cAuxqtDiasPrazoAtendimento = cqtDiasPrazoAtendimento;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE contatoadm.PrazoAtendimento
		SET 	idContato = :cAuxidContato,
		idSegmentacao = :cAuxidSegmentacao,
		idProcedencia = :cAuxidProcedencia,
		qtDiasPrazoAtendimento = :cAuxqtDiasPrazoAtendimento,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idPrazoAtendimento = :cAuxidPrazoAtendimento;   
		
		ULOG_END("CPrazoAtendimento::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPrazoAtendimento::Delete( char* cidPrazoAtendimento )
{
    ULOG_START("CPrazoAtendimento::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPrazoAtendimento = cidPrazoAtendimento; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PrazoAtendimento
		WHERE (idPrazoAtendimento = :cAuxidPrazoAtendimento);
		
		ULOG_END("CPrazoAtendimento::Delete()");
		
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPrazoAtendimento::EraseFlh( char* cidContato ) 
{
    ULOG_START("CPrazoAtendimento::EraseFlh()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PrazoAtendimento
		WHERE (idContato = :cAuxidContato);
		
		ULOG_END("CPrazoAtendimento::EraseFlh()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPrazoAtendimento::EraseSgm( char* cidSegmentacao ) 
{
    ULOG_START("CPrazoAtendimento::EraseSgm()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidSegmentacao = cidSegmentacao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PrazoAtendimento
		WHERE (idSegmentacao = :cAuxidSegmentacao);
		
		ULOG_END("CPrazoAtendimento::EraseSgm()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPrazoAtendimento::ErasePcd( char* cidProcedencia )
{
    ULOG_START("CPrazoAtendimento::ErasePcd()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidProcedencia = cidProcedencia; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM2;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PrazoAtendimento
		WHERE (idProcedencia = :cAuxidProcedencia);
		
		ULOG_END("CPrazoAtendimento::ErasePcd()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM2:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPrazoAtendimento::ListId( char* cidPrazoAtendimento ) 
{
    ULOG_START("CPrazoAtendimento::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPrazoAtendimento = cidPrazoAtendimento; 
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
			VARCHAR stqtDiasPrazoAtendimento[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iidSegmentacao;
			short iidProcedencia;
			short iqtDiasPrazoAtendimento;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorPrazoAtendimentoId CURSOR FOR 
   		SELECT 	
			IDPRAZOATENDIMENTO,
			IDCONTATO,
			IDSEGMENTACAO,
			IDPROCEDENCIA,
			QTHORASPRAZOCONTATO
		FROM CONTATOADM.PRAZOATENDIMENTO
		WHERE IDPRAZOATENDIMENTO = :cAuxidPrazoAtendimento;

		//Abre o cursor
		EXEC SQL OPEN CursorPrazoAtendimentoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CPrazoAtendimento::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorPrazoAtendimentoId INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
				//Adiciona a classe
				Add( 	(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr,
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr,
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr,
				(char*)stPrazoAtendimentoRegistro.stqtDiasPrazoAtendimento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorPrazoAtendimentoId;
		}
		ULOG_END("CPrazoAtendimento::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CPrazoAtendimento::ListIdContato( char* cidContato ) 
{
    ULOG_START("CPrazoAtendimento::ListIdContato()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
			VARCHAR stqtDiasPrazoAtendimento[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iidSegmentacao;
			short iidProcedencia;
			short iqtDiasPrazoAtendimento;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorListIdContato CURSOR FOR 
   			SELECT 	
   				IDPRAZOATENDIMENTO,
				IDCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA,
				QTHORASPRAZOCONTATO
			FROM 
				CONTATOADM.PRAZOATENDIMENTO
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorListIdContato;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CPrazoAtendimento::ListIdContato()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorListIdContato INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
				//Adiciona a classe
				Add( 	(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr,
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr,
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr,
				(char*)stPrazoAtendimentoRegistro.stqtDiasPrazoAtendimento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorListIdContato;
		}
		ULOG_END("CPrazoAtendimento::ListIdContato()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CPrazoAtendimento::ListAll( void )
{
    ULOG_START("CPrazoAtendimento::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
			VARCHAR stqtDiasPrazoAtendimento[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iidSegmentacao;
			short iidProcedencia;
			short iqtDiasPrazoAtendimento;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorPrazoAtendimentoAll CURSOR FOR
   			SELECT 	
				IDPRAZOATENDIMENTO,
				IDCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA,
				QTHORASPRAZOCONTATO
			FROM 
				CONTATOADM.PRAZOATENDIMENTO; 

		//Abre o cursor
		EXEC SQL OPEN CursorPrazoAtendimentoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CPrazoAtendimento::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorPrazoAtendimentoAll INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
				//Adiciona a classe
				Add( 	(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr,
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr,
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr,
				(char*)stPrazoAtendimentoRegistro.stqtDiasPrazoAtendimento.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorPrazoAtendimentoAll;
		}
		ULOG_END("CPrazoAtendimento::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CPrazoAtendimento::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idPrazoAtendimento", Registro(x)->cidPrazoAtendimento );
				xml->addItem("idContato", Registro(x)->cidContato );
				xml->addItem("idSegmentacao", Registro(x)->cidSegmentacao );
				xml->addItem("idProcedencia", Registro(x)->cidProcedencia );
				xml->addItem("qtHorasPrazoContato", Registro(x)->cqtDiasPrazoAtendimento ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
