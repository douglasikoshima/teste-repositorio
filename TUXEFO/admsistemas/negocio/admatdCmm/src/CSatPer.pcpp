#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CSatPer.h"

CPesquisaSatisfacaoPergunta::CPesquisaSatisfacaoPergunta()
{
}

CPesquisaSatisfacaoPergunta::~CPesquisaSatisfacaoPergunta()
{
}

int CPesquisaSatisfacaoPergunta::Insert( 
			char* cidPesquisaSatisfacao,
			char* cidPergunta,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CPesquisaSatisfacaoPergunta::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidPesquisaSatisfacaoPergunta[21+1];
		char* cAuxidPesquisaSatisfacao = cidPesquisaSatisfacao;
		char* cAuxidPergunta = cidPergunta;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();
		
		memset( &cAuxidPesquisaSatisfacaoPergunta, 0, sizeof(cAuxidPesquisaSatisfacaoPergunta) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.PesquisaSatisfacaoPerguntaSQ.NEXTVAL INTO :cAuxidPesquisaSatisfacaoPergunta FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.PesquisaSatisfacaoPergunta 
		(	idPesquisaSatisfacaoPergunta,
			idPesquisaSatisfacao,
			idPergunta,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidPesquisaSatisfacaoPergunta,
			:cAuxidPesquisaSatisfacao,
			:cAuxidPergunta,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CPesquisaSatisfacaoPergunta::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPesquisaSatisfacaoPergunta::Delete( char* cidPesquisaSatisfacaoPergunta )
{
    ULOG_START("CPesquisaSatisfacaoPergunta::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPesquisaSatisfacaoPergunta = cidPesquisaSatisfacaoPergunta; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PesquisaSatisfacaoPergunta 		
		WHERE (idPesquisaSatisfacaoPergunta = :cAuxidPesquisaSatisfacaoPergunta);
		ULOG_END("CPesquisaSatisfacaoPergunta::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPesquisaSatisfacaoPergunta::ErasePer( char* cidPergunta ) 
{
    ULOG_START("CPesquisaSatisfacaoPergunta::ErasePer()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPergunta = cidPergunta; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PesquisaSatisfacaoPergunta 		
		WHERE (idPergunta = :cAuxidPergunta);
		ULOG_END("CPesquisaSatisfacaoPergunta::ErasePer()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPesquisaSatisfacaoPergunta::EraseSat( char* cidPesquisaSatisfacao ) 
{
    ULOG_START("CPesquisaSatisfacaoPergunta::EraseSat()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPesquisaSatisfacao = cidPesquisaSatisfacao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM1;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.PesquisaSatisfacaoPergunta 		
		WHERE (idPesquisaSatisfacao = :cAuxidPesquisaSatisfacao);
		
		ULOG_END("CPesquisaSatisfacaoPergunta::EraseSat()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM1:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CPesquisaSatisfacaoPergunta::ListId( char* cidPesquisaSatisfacaoPergunta ) 
{
    ULOG_START("CPesquisaSatisfacaoPergunta::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPesquisaSatisfacaoPergunta = cidPesquisaSatisfacaoPergunta; 
		struct
		{
			VARCHAR stidPesquisaSatisfacaoPergunta[21+1];
			VARCHAR stidPesquisaSatisfacao[21+1];
			VARCHAR stidPergunta[21+1];
		} stPesquisaSatisfacaoPerguntaRegistro;
		struct
		{
			short iidPesquisaSatisfacaoPergunta;
			short iidPesquisaSatisfacao;
			short iidPergunta;
		} stPesquisaSatisfacaoPerguntaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorPesquisaSatisfacaoPerguntaId CURSOR FOR 
   		SELECT 	idPesquisaSatisfacaoPergunta,
	idPesquisaSatisfacao,
	idPergunta
		FROM contatoadm.PesquisaSatisfacaoPergunta
		WHERE idPesquisaSatisfacaoPergunta = :cAuxidPesquisaSatisfacaoPergunta;

		//Abre o cursor
		EXEC SQL OPEN CursorPesquisaSatisfacaoPerguntaId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CPesquisaSatisfacaoPergunta::ListId()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stPesquisaSatisfacaoPerguntaRegistro, 0, sizeof(stPesquisaSatisfacaoPerguntaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorPesquisaSatisfacaoPerguntaId INTO :stPesquisaSatisfacaoPerguntaRegistro:stPesquisaSatisfacaoPerguntaIndicator;
				//Adiciona a classe
				Add( 	(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPesquisaSatisfacaoPergunta.arr,
				(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPesquisaSatisfacao.arr,
				(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPergunta.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorPesquisaSatisfacaoPerguntaId;
		}
		ULOG_END("CPesquisaSatisfacaoPergunta::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CPesquisaSatisfacaoPergunta::ListAll( void )
{
    ULOG_START("CPesquisaSatisfacaoPergunta::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidPesquisaSatisfacaoPergunta[21+1];
			VARCHAR stidPesquisaSatisfacao[21+1];
			VARCHAR stidPergunta[21+1];
		} stPesquisaSatisfacaoPerguntaRegistro;
		struct
		{
			short iidPesquisaSatisfacaoPergunta;
			short iidPesquisaSatisfacao;
			short iidPergunta;
		} stPesquisaSatisfacaoPerguntaIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPesquisaSatisfacaoPergunta();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorPesquisaSatisfacaoPerguntaAll CURSOR FOR
   		SELECT 	idPesquisaSatisfacaoPergunta,
		idPesquisaSatisfacao,
		idPergunta
		FROM contatoadm.PesquisaSatisfacaoPergunta; 

		//Abre o cursor
		EXEC SQL OPEN CursorPesquisaSatisfacaoPerguntaAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		   ULOG_END("CPesquisaSatisfacaoPergunta::ListAll()");
		   return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stPesquisaSatisfacaoPerguntaRegistro, 0, sizeof(stPesquisaSatisfacaoPerguntaRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorPesquisaSatisfacaoPerguntaAll INTO :stPesquisaSatisfacaoPerguntaRegistro:stPesquisaSatisfacaoPerguntaIndicator;
				//Adiciona a classe
				Add( 	(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPesquisaSatisfacaoPergunta.arr,
				(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPesquisaSatisfacao.arr,
				(char*)stPesquisaSatisfacaoPerguntaRegistro.stidPergunta.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorPesquisaSatisfacaoPerguntaAll;
		}
		ULOG_END("CPesquisaSatisfacaoPergunta::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CPesquisaSatisfacaoPergunta::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idPesquisaSatisfacaoPergunta", Registro(x)->cidPesquisaSatisfacaoPergunta );
				xml->addItem("idPesquisaSatisfacao", Registro(x)->cidPesquisaSatisfacao );
				xml->addItem("idPergunta", Registro(x)->cidPergunta ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
