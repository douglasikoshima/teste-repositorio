#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFlhAvs.h"

CContatoFolhaMensagemAviso::CContatoFolhaMensagemAviso()
{
}

CContatoFolhaMensagemAviso::~CContatoFolhaMensagemAviso()
{
}

int CContatoFolhaMensagemAviso::Insert( char* cidContato,
										char* cidMensagemAviso,
										char* cidUsuarioAlteracao )
{
    ULOG_START("CContatoFolhaMensagemAviso::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
		char* cAuxidContato = cidContato;
		char* cAuxidMensagemAviso = cidMensagemAviso;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaMensagemAviso();
		
		 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.ContatoFolhaMensagemAviso
		(	idContato,
			idMensagemAviso,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidContato,
			:cAuxidMensagemAviso,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CContatoFolhaMensagemAviso::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}


int CContatoFolhaMensagemAviso::Update( char* cidContato,
										char* cidMensagemAviso,
										char* cidUsuarioAlteracao )
{
    ULOG_START("CContatoFolhaMensagemAviso::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		char* cAuxidMensagemAviso = cidMensagemAviso;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaMensagemAviso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE 
				CONTATOADM.CONTATOFOLHAMENSAGEMAVISO
			SET 
				IDMENSAGEMAVISO = :cAuxidMensagemAviso,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDCONTATO = :cAuxidContato;   
				
		ULOG_END("CContatoFolhaMensagemAviso::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaMensagemAviso::Delete( char* cidContato )
{
    ULOG_START("CContatoFolhaMensagemAviso::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaMensagemAviso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.ContatoFolhaMensagemAviso
		WHERE (idContato = :cAuxidContato);
		
		ULOG_END("CContatoFolhaMensagemAviso::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaMensagemAviso::ListId( char* cidContato ) 
{
    ULOG_START("CContatoFolhaMensagemAviso::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContato[21+1];
			VARCHAR stidMensagemAviso[21+1];
		} stContatoFolhaMensagemAvisoRegistro;
		struct
		{
			short iidContato;
			short iidMensagemAviso;
		} stContatoFolhaMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorContatoFolhaMensagemAvisoId CURSOR FOR 
   			SELECT 
				IDCONTATO,
				IDMENSAGEMAVISO
			FROM 
				CONTATOADM.CONTATOFOLHAMENSAGEMAVISO
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorContatoFolhaMensagemAvisoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoFolhaMensagemAviso::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaMensagemAvisoRegistro, 0, sizeof(stContatoFolhaMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoFolhaMensagemAvisoId INTO :stContatoFolhaMensagemAvisoRegistro:stContatoFolhaMensagemAvisoIndicator;
				//Adiciona a classe
				Add(
					(char*)stContatoFolhaMensagemAvisoRegistro.stidContato.arr,
					(char*)stContatoFolhaMensagemAvisoRegistro.stidMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorContatoFolhaMensagemAvisoId;
		}
		
		ULOG_END("CContatoFolhaMensagemAviso::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CContatoFolhaMensagemAviso::ListAll( void )
{
    ULOG_START("CContatoFolhaMensagemAviso::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContato[21+1];
			VARCHAR stidMensagemAviso[21+1];
		} stContatoFolhaMensagemAvisoRegistro;
		struct
		{
			short iidContato;
			short iidMensagemAviso;
		} stContatoFolhaMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraContatoFolhaMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorContatoFolhaMensagemAvisoAll CURSOR FOR
   			SELECT 	
					IDCONTATO,
					IDMENSAGEMAVISO
				FROM 
					CONTATOADM.CONTATOFOLHAMENSAGEMAVISO; 

		//Abre o cursor
		EXEC SQL OPEN CursorContatoFolhaMensagemAvisoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CContatoFolhaMensagemAviso::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stContatoFolhaMensagemAvisoRegistro, 0, sizeof(stContatoFolhaMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorContatoFolhaMensagemAvisoAll INTO :stContatoFolhaMensagemAvisoRegistro:stContatoFolhaMensagemAvisoIndicator;
				//Adiciona a classe
				Add( 	(char*)stContatoFolhaMensagemAvisoRegistro.stidContato.arr,
				(char*)stContatoFolhaMensagemAvisoRegistro.stidMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorContatoFolhaMensagemAvisoAll;
		}
		ULOG_END("CContatoFolhaMensagemAviso::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CContatoFolhaMensagemAviso::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContato", Registro(x)->cidContato );
				xml->addItem("idMensagemAviso", Registro(x)->cidMensagemAviso ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
