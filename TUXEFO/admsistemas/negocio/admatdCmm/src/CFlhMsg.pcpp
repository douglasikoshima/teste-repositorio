#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFlhMsg.h"

CFolhaMensagemAviso::CFolhaMensagemAviso()
{
}

CFolhaMensagemAviso::~CFolhaMensagemAviso()
{
}

int CFolhaMensagemAviso::Insert( 
			char* cdsMensagemAviso,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CFolhaMensagemAviso::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidContato[255+1];
		char* cAuxdsMensagemAviso = cdsMensagemAviso;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFolhaMensagemAviso();
		
		memset( &cAuxidContato, 0, sizeof(cAuxidContato) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT contatoadm.FolhaMensagemAvisoSQ.NEXTVAL INTO :cAuxidContato FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO contatoadm.FolhaMensagemAviso
		(	idContato,
			dsMensagemAviso,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidContato,
			:cAuxdsMensagemAviso,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CFolhaMensagemAviso::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CFolhaMensagemAviso::Update( 
			char* cidContato,
			char* cdsMensagemAviso,
			char* cidUsuarioAlteracao )
{
    
    ULOG_START("CFolhaMensagemAviso::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidContato = cidContato;
			char* cAuxdsMensagemAviso = cdsMensagemAviso;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFolhaMensagemAviso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE contatoadm.FolhaMensagemAviso
		SET 	dsMensagemAviso = :cAuxdsMensagemAviso,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idContato = :cAuxidContato;   
		
		ULOG_END("CFolhaMensagemAviso::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CFolhaMensagemAviso::Delete( char* cidContato )
{
    ULOG_START("CFolhaMensagemAviso::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidContato = cidContato; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFolhaMensagemAviso();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM contatoadm.FolhaMensagemAviso
		WHERE (idContato = :cAuxidContato);
		ULOG_END("CFolhaMensagemAviso::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CFolhaMensagemAviso::ListId( char* cidContato ) 
{
    ULOG_START("CFolhaMensagemAviso::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidContato[21+1];
			VARCHAR stdsMensagemAviso[255+1];
		} stFolhaMensagemAvisoRegistro;
		struct
		{
			short iidContato;
			short idsMensagemAviso;
		} stFolhaMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFolhaMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorFolhaMensagemAvisoId CURSOR FOR 
   		SELECT 	idContato,
	dsMensagemAviso
		FROM contatoadm.FolhaMensagemAviso
		WHERE idContato = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorFolhaMensagemAvisoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CFolhaMensagemAviso::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stFolhaMensagemAvisoRegistro, 0, sizeof(stFolhaMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorFolhaMensagemAvisoId INTO :stFolhaMensagemAvisoRegistro:stFolhaMensagemAvisoIndicator;
				//Adiciona a classe
				Add( 	(char*)stFolhaMensagemAvisoRegistro.stidContato.arr,
				(char*)stFolhaMensagemAvisoRegistro.stdsMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorFolhaMensagemAvisoId;
		}
		ULOG_END("CFolhaMensagemAviso::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CFolhaMensagemAviso::ListAll( void )
{
    ULOG_START("CFolhaMensagemAviso::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidContato[21+1];
			VARCHAR stdsMensagemAviso[255+1];
		} stFolhaMensagemAvisoRegistro;
		struct
		{
			short iidContato;
			short idsMensagemAviso;
		} stFolhaMensagemAvisoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraFolhaMensagemAviso();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorFolhaMensagemAvisoAll CURSOR FOR
   		SELECT 	idContato,
		dsMensagemAviso
		FROM contatoadm.FolhaMensagemAviso; 

		//Abre o cursor
		EXEC SQL OPEN CursorFolhaMensagemAvisoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CFolhaMensagemAviso::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stFolhaMensagemAvisoRegistro, 0, sizeof(stFolhaMensagemAvisoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorFolhaMensagemAvisoAll INTO :stFolhaMensagemAvisoRegistro:stFolhaMensagemAvisoIndicator;
				//Adiciona a classe
				Add( 	(char*)stFolhaMensagemAvisoRegistro.stidContato.arr,
				(char*)stFolhaMensagemAvisoRegistro.stdsMensagemAviso.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorFolhaMensagemAvisoAll;
		}
		ULOG_END("CFolhaMensagemAviso::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CFolhaMensagemAviso::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idContato", Registro(x)->cidContato );
				xml->addItem("dsMensagemAviso", Registro(x)->cdsMensagemAviso ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
