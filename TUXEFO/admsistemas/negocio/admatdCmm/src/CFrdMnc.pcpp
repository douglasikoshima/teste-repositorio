#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFrdMnc.h"

CMunicipioFeriado::CMunicipioFeriado()
{
}

CMunicipioFeriado::~CMunicipioFeriado()
{
}

int CMunicipioFeriado::Insert( 
								char* cidMunicipio,
								char* cidFeriado,
								char* cidUsuarioAlteracao )
{
    ULOG_START("CMunicipioFeriado::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidMunicipioFeriado[21+1];
		char* cAuxidMunicipio = cidMunicipio;
		char* cAuxidFeriado = cidFeriado;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();
		
		memset( &cAuxidMunicipioFeriado, 0, sizeof(cAuxidMunicipioFeriado) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL 
			SELECT 
				CALENDARIO.MUNICIPIOFERIADOSQ.NEXTVAL 
			INTO 
				:cAuxidMunicipioFeriado 
			FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO CALENDARIO.MUNICIPIOFERIADO
		(	IDMUNICIPIOFERIADO,
			IDMUNICIPIO,
			IDFERIADO,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO) 
		VALUES 
		(	:cAuxidMunicipioFeriado,
			:cAuxidMunicipio,
			:cAuxidFeriado,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CMunicipioFeriado::Insert()");
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode==-2291)
		return 1;
	else if(sqlca.sqlcode==-2292)
		return 2;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CMunicipioFeriado::Delete( char* cidMunicipioFeriado )
{
    ULOG_START("CMunicipioFeriado::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidMunicipioFeriado = cidMunicipioFeriado; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM calendario.MunicipioFeriado
		WHERE (idMunicipioFeriado = :cAuxidMunicipioFeriado);
		ULOG_END("CMunicipioFeriado::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CMunicipioFeriado::EraseMnc( char* cidMunicipio ) 
{
    ULOG_START("CMunicipioFeriado::EraseMnc()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidMunicipio = cidMunicipio; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDeleteMM0;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM calendario.MunicipioFeriado
		WHERE (idMunicipio = :cAuxidMunicipio);
		ULOG_END("CMunicipioFeriado::EraseMnc()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDeleteMM0:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CMunicipioFeriado::EraseFrd( char* cidFeriado, char* cidUf ) 
{
    ULOG_START("CMunicipioFeriado::EraseFrd()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidFeriado = cidFeriado; 
		char* cAuxidUf = cidUf;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoEraseFrd;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
				DELETE FROM CALENDARIO.MUNICIPIOFERIADO MUNICIPIOFERIADO
		WHERE 
			MUNICIPIOFERIADO.IDFERIADO = :cAuxidFeriado
		AND
			MUNICIPIOFERIADO.IDMUNICIPIO IN 
			( 
				SELECT 
					IDMUNICIPIO 
				FROM 
					APOIO.MUNICIPIO 
				WHERE 
					IDUF = :cAuxidUf 
			 );
			 
		ULOG_END("CMunicipioFeriado::EraseFrd()");
		return 1;
	}
	catch(...)
	{
		throw;
	}

GotoEraseFrd:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CMunicipioFeriado::ListId( char* cidMunicipioFeriado ) 
{
    ULOG_START("CMunicipioFeriado::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidMunicipioFeriado = cidMunicipioFeriado; 
		struct
		{
			VARCHAR stidMunicipioFeriado[21+1];
			VARCHAR stidMunicipio[21+1];
			VARCHAR stidFeriado[21+1];
		} stMunicipioFeriadoRegistro;
		struct
		{
			short iidMunicipioFeriado;
			short iidMunicipio;
			short iidFeriado;
		} stMunicipioFeriadoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorMunicipioFeriadoId CURSOR FOR 
   		SELECT 	idMunicipioFeriado,
	            idMunicipio,
	            idFeriado
		FROM calendario.MunicipioFeriado
		WHERE idMunicipioFeriado = :cAuxidMunicipioFeriado;

		//Abre o cursor
		EXEC SQL OPEN CursorMunicipioFeriadoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CMunicipioFeriado::ListId()"); 
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stMunicipioFeriadoRegistro, 0, sizeof(stMunicipioFeriadoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorMunicipioFeriadoId INTO :stMunicipioFeriadoRegistro:stMunicipioFeriadoIndicator;
				//Adiciona a classe
				Add( 	(char*)stMunicipioFeriadoRegistro.stidMunicipioFeriado.arr,
				(char*)stMunicipioFeriadoRegistro.stidMunicipio.arr,
				(char*)stMunicipioFeriadoRegistro.stidFeriado.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorMunicipioFeriadoId;
		}
		ULOG_END("CMunicipioFeriado::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CMunicipioFeriado::ListAll( void )
{
    ULOG_START("CMunicipioFeriado::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidMunicipioFeriado[21+1];
			VARCHAR stidMunicipio[21+1];
			VARCHAR stidFeriado[21+1];
		} stMunicipioFeriadoRegistro;
		struct
		{
			short iidMunicipioFeriado;
			short iidMunicipio;
			short iidFeriado;
		} stMunicipioFeriadoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraMunicipioFeriado();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorMunicipioFeriadoAll CURSOR FOR
   		SELECT 	idMunicipioFeriado,
		idMunicipio,
		idFeriado
		FROM calendario.MunicipioFeriado; 

		//Abre o cursor
		EXEC SQL OPEN CursorMunicipioFeriadoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CMunicipioFeriado::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stMunicipioFeriadoRegistro, 0, sizeof(stMunicipioFeriadoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorMunicipioFeriadoAll INTO :stMunicipioFeriadoRegistro:stMunicipioFeriadoIndicator;
				//Adiciona a classe
				Add( 	(char*)stMunicipioFeriadoRegistro.stidMunicipioFeriado.arr,
				(char*)stMunicipioFeriadoRegistro.stidMunicipio.arr,
				(char*)stMunicipioFeriadoRegistro.stidFeriado.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorMunicipioFeriadoAll;
		}
		ULOG_END("CMunicipioFeriado::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CMunicipioFeriado::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idMunicipioFeriado", Registro(x)->cidMunicipioFeriado );
				xml->addItem("idMunicipio", Registro(x)->cidMunicipio );
				xml->addItem("idFeriado", Registro(x)->cidFeriado ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
