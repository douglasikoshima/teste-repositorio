#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CTO.h"

CTipoOrganizacao::CTipoOrganizacao()
{
}

CTipoOrganizacao::~CTipoOrganizacao()
{
}
					
int CTipoOrganizacao::Insert( char* cdsTipoOrganizacao,
			      char* cidUsuarioAlteracao )
{
    ULOG_START("CTipoOrganizacao::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stAuxidTipoOrganizacao[21+1];
			VARCHAR stAuxdsTipoOrganizacao[255+1];
		} stRegistro;
		char* cAuxdsTipoOrganizacao = cdsTipoOrganizacao;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;

		int NRegs = 0; 

	EXEC SQL END DECLARE SECTION;
	
	ULOGI("Insert - Entrou");

	//Processamento Principal
	try
	{
		//Verifica o nome 
		if( strlennull( cdsTipoOrganizacao ) <= 0 )
		{
		    ULOG_END("CTipoOrganizacao::Insert()");
			return 0;//Nome nulo
	    }

		//Zera a estrutura da classe
		ZeraTipoOrganizacao();

		memset( &stRegistro, 0x00, sizeof(stRegistro) ); 

		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;

		EXEC SQL 
		SELECT 
			COUNT(1)
		INTO
			:NRegs
		FROM 
			ORGANOGRAMA.TIPOORGANIZACAO
		WHERE 
			UPPER(DSTIPOORGANIZACAO) = UPPER(TRIM(:cAuxdsTipoOrganizacao));

		if( !NRegs ) 
		{
			ULOGI("Insert - 1 IF");

			//Pega um id unico e sequencia para a insercao
			EXEC SQL 
			SELECT 
				ORGANOGRAMA.TIPOORGANIZACAOSQ.NEXTVAL 
			INTO 
				:stRegistro.stAuxidTipoOrganizacao 
			FROM DUAL;
	
			//Realiza o insert
			EXEC SQL 
			INSERT INTO 
				ORGANOGRAMA.TIPOORGANIZACAO 
			(
				IDTIPOORGANIZACAO,
				DSTIPOORGANIZACAO,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			) 
			VALUES 
			(	
				:stRegistro.stAuxidTipoOrganizacao,
				TRIM(:cAuxdsTipoOrganizacao),
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);

			Add( 
				(char*)stRegistro.stAuxidTipoOrganizacao.arr,
			     	cAuxdsTipoOrganizacao 
			);
		}
		else
		{
			EXEC SQL 
				SELECT
					 IDTIPOORGANIZACAO
				   	,DSTIPOORGANIZACAO
				INTO
					:stRegistro
				FROM 
					ORGANOGRAMA.TIPOORGANIZACAO
				WHERE 
					UPPER(DSTIPOORGANIZACAO) = UPPER(TRIM(:cAuxdsTipoOrganizacao))
				AND 
					ROWNUM <= 1;

			Add( (char*)stRegistro.stAuxidTipoOrganizacao.arr,
			     (char*)stRegistro.stAuxdsTipoOrganizacao.arr );
            ULOG_END("CTipoOrganizacao::Insert()");
			return 2;//Registro já existe
		}
		
		ULOG_END("CTipoOrganizacao::Insert()");

		return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoOrganizacao::UpdateDescricao( 
			char* cidTipoOrganizacao,
			char* cdsTipoOrganizacao,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CTipoOrganizacao::UpdateDescricao()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			int iContador;
			char* cAuxidTipoOrganizacao = cidTipoOrganizacao;
			char* cAuxdsTipoOrganizacao = cdsTipoOrganizacao;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoOrganizacao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdateDescricao;

		//Verifica se a descricao do registro ja existe
		//Retorna codigo de erro se confirmado
		EXEC SQL SELECT COUNT(dsTipoOrganizacao)
		INTO: iContador
		FROM organograma.TipoOrganizacao
		WHERE TRIM(UPPER(dsTipoOrganizacao)) = TRIM(UPPER(:cAuxdsTipoOrganizacao))
		AND idTipoOrganizacao <> :cAuxidTipoOrganizacao;

		if (iContador>0)
		{
		    ULOG_END("CTipoOrganizacao::UpdateDescricao()");
			return -1;//Nome duplicado
		}
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE  organograma.TipoOrganizacao 
		SET 	dsTipoOrganizacao = :cAuxdsTipoOrganizacao,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idTipoOrganizacao = :cAuxidTipoOrganizacao;   
		
		ULOG_END("CTipoOrganizacao::UpdateDescricao()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdateDescricao:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode < 0) 
		return sqlca.sqlcode; 
	throw TuxBasicOraException(sqlca.sqlcode);
	
}


int CTipoOrganizacao::Update( 
								char* cidOrganizacao,
								char* cdsTipoOrganizacao,
								char* cidUsuarioAlteracao )
{
    ULOG_START("CTipoOrganizacao::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stAuxidTipoOrganizacao[21+1];
			VARCHAR stAuxdsTipoOrganizacao[255+1];
		} stRegistro;
		int iCont;
		char* cAuxidOrganizacao = cidOrganizacao;
		char* cAuxdsTipoOrganizacao = cdsTipoOrganizacao;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		VARCHAR vAuxidTipoOrganizacao[21+1];
	EXEC SQL END DECLARE SECTION;
	int iRes = 0;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoOrganizacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;

		EXEC SQL SELECT	idTipoOrganizacao
		INTO :vAuxidTipoOrganizacao 
		FROM organograma.Organizacao
		WHERE idOrganizacao  = :cAuxidOrganizacao;
		
		vAuxidTipoOrganizacao.arr[vAuxidTipoOrganizacao.len] = 0;

		if( strlennull( (char *)vAuxidTipoOrganizacao.arr) <= 0 )
		    ULOG_END("CTipoOrganizacao::Update()");
			return 0;//Nao exite Tipo Organizacao
		
		//Verifica se quer gravar com nome duplicado
		EXEC SQL SELECT	COUNT( idTipoOrganizacao ) 
		INTO :iCont 
		FROM organograma.TipoOrganizacao
		WHERE TRIM(UPPER(dsTipoOrganizacao)) = TRIM(UPPER(:cAuxdsTipoOrganizacao))
		AND	idTipoOrganizacao  != :vAuxidTipoOrganizacao;

		//Verifica se quer gravar com nome duplicado
		if( iCont <= 0 )
		{
			//Verifica se quer gravar o mesmo registro com o mesmo nome
			EXEC SQL SELECT	COUNT( idTipoOrganizacao ) 
			INTO :iCont 
			FROM organograma.TipoOrganizacao
			WHERE TRIM(UPPER(dsTipoOrganizacao)) = TRIM(UPPER(:cAuxdsTipoOrganizacao))
			AND	idTipoOrganizacao  = :vAuxidTipoOrganizacao;

			//Verifica se quer gravar com nome novo
			if ( iCont <= 0 ) 
			{
				memset( &stRegistro, 0x00, sizeof(stRegistro) ); 
				
				//Pega um id unico e sequencia para a insercao
				EXEC SQL 
				SELECT organograma.TipoOrganizacaoSQ.nextval 
				INTO :stRegistro.stAuxidTipoOrganizacao
				FROM DUAL;

				//Realiza o insert
				EXEC SQL 
				INSERT INTO organograma.TipoOrganizacao 
				( idTipoOrganizacao, dsTipoOrganizacao, idUsuarioAlteracao,	dtUltimaAlteracao ) 
				VALUES 
				( :stRegistro.stAuxidTipoOrganizacao, :cAuxdsTipoOrganizacao, :cAuxidUsuarioAlteracao, SYSDATE );

				//Insere na lista de registros do objeto da classe
				Add( (char*)stRegistro.stAuxidTipoOrganizacao.arr, cAuxdsTipoOrganizacao );
			} 
			else //Verifica se quer gravar o mesmo registro com o mesmo nome
			{
				//Executa a instrucao de update
				EXEC SQL 
				UPDATE organograma.TipoOrganizacao 
				SET 	dsTipoOrganizacao = :cAuxdsTipoOrganizacao,
						idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
						dtUltimaAlteracao = SYSDATE
				WHERE 	idTipoOrganizacao = :vAuxidTipoOrganizacao; 

				//Insere na lista de registros do objeto da classe
				Add( (char*)vAuxidTipoOrganizacao.arr, cAuxdsTipoOrganizacao );
			}
		}
		else 
		{
			Add( (char*)vAuxidTipoOrganizacao.arr, cAuxdsTipoOrganizacao );
			ULOG_END("CTipoOrganizacao::Update()");
			return -1;
		}
        ULOG_END("CTipoOrganizacao::Update()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return 1;//Sucesso		
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CTipoOrganizacao::Delete( char* cidTipoOrganizacao )
{
    ULOG_START("CTipoOrganizacao::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidTipoOrganizacao = cidTipoOrganizacao; 
		
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoOrganizacao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
				
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM organograma.TipoOrganizacao 		
		WHERE (idTipoOrganizacao = :cAuxidTipoOrganizacao);
		
		ULOG_END("CTipoOrganizacao::Delete()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return 1;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if(sqlca.sqlcode == -2292)
		return sqlca.sqlcode;
	else
	throw TuxBasicOraException(sqlca.sqlcode);
}


int CTipoOrganizacao::List( 
							char* cidTipoOrganizacao,
							char* cdsTipoOrganizacao,
							char* cidUsuarioAlteracao
						  )
{
    ULOG_START("CTipoOrganizacao::List()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char  cAuxidTipoOrganizacao[21+1];
		char  cAuxdsTipoOrganizacao[255+1];
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao; 
		struct
		{
			VARCHAR stidTipoOrganizacao[21+1];
			VARCHAR stdsTipoOrganizacao[256+1];
		} stTipoOrganizacaoRegistro;
		struct
		{
			short iidTipoOrganizacao;
			short idsTipoOrganizacao;
		} stTipoOrganizacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
	
	if ( strlen( cidTipoOrganizacao ) == 0 )
		strcpy(cAuxidTipoOrganizacao , "-1" );
	else
		strcpy(cAuxidTipoOrganizacao , cidTipoOrganizacao );

	if ( strlen( cdsTipoOrganizacao ) == 0 )
		strcpy(cAuxdsTipoOrganizacao , "-1" );
	else
		sprintf(cAuxdsTipoOrganizacao,"%.*s%%",255, cdsTipoOrganizacao);

		//Zera a estrutura da classe
		ZeraTipoOrganizacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os Registros
   		EXEC SQL 
   		DECLARE CursorTipoOrganizacao CURSOR FOR 
   		SELECT 	
   			IDTIPOORGANIZACAO, 	
   			DSTIPOORGANIZACAO
		FROM 
			ORGANOGRAMA.TIPOORGANIZACAO
		WHERE 
		( 
			(
				IDTIPOORGANIZACAO = :cAuxidTipoOrganizacao
			OR 
				'-1' = :cAuxidTipoOrganizacao
			)
			AND 
			(
				UPPER(DSTIPOORGANIZACAO) LIKE UPPER(:cAuxdsTipoOrganizacao) 
			OR 
				'-1' = :cAuxdsTipoOrganizacao
			) 
		)
		ORDER BY 
			UPPER(DSTIPOORGANIZACAO);

		// Abre o cursor
		EXEC SQL OPEN CursorTipoOrganizacao;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CTipoOrganizacao::List()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoOrganizacaoRegistro, 0, sizeof(stTipoOrganizacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoOrganizacao INTO :stTipoOrganizacaoRegistro:stTipoOrganizacaoIndicator;
				//Adiciona a classe
				Add( (char*)stTipoOrganizacaoRegistro.stidTipoOrganizacao.arr,
				     (char*)stTipoOrganizacaoRegistro.stdsTipoOrganizacao.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorTipoOrganizacao;
		}
		ULOG_END("CTipoOrganizacao::List()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoOrganizacao::ListId( char* cidTipoOrganizacao ) 
{
    ULOG_START("CTipoOrganizacao::ListId()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidTipoOrganizacao = cidTipoOrganizacao; 
		struct
		{
			VARCHAR stidTipoOrganizacao[21+1];
			VARCHAR stdsTipoOrganizacao[253+1];
		} stTipoOrganizacaoRegistro;
		struct
		{
			short iidTipoOrganizacao;
			short idsTipoOrganizacao;
		} stTipoOrganizacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoOrganizacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL
   		DECLARE 
   			CursorTipoOrganizacaoId CURSOR FOR 
   		SELECT 	
   			IDTIPOORGANIZACAO,
	        	DSTIPOORGANIZACAO
		FROM 
			ORGANOGRAMA.TIPOORGANIZACAO
		WHERE 
			IDTIPOORGANIZACAO = :cAuxidTipoOrganizacao;

		//Abre o cursor
		EXEC SQL OPEN CursorTipoOrganizacaoId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stTipoOrganizacaoRegistro, 0, sizeof(stTipoOrganizacaoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL 
			FETCH 
				CursorTipoOrganizacaoId 
			INTO 
				:stTipoOrganizacaoRegistro:stTipoOrganizacaoIndicator;
			//Adiciona a classe
			Add(
				(char*)stTipoOrganizacaoRegistro.stidTipoOrganizacao.arr,
				(char*)stTipoOrganizacaoRegistro.stdsTipoOrganizacao.arr 
			);
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorTipoOrganizacaoId;
		//Retorna a quantidade de registros
		ULOG_END("CTipoOrganizacao::ListId()");
		return Quantidade();
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipoOrganizacao::ListAll( void )
{
    ULOG_START("CTipoOrganizacao::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidTipoOrganizacao[21+1];
			VARCHAR stdsTipoOrganizacao[253+1];
		} stTipoOrganizacaoRegistro;
		struct
		{
			short iidTipoOrganizacao;
			short idsTipoOrganizacao;
		} stTipoOrganizacaoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraTipoOrganizacao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL 
   		DECLARE 
   			CursorTipoOrganizacaoAll CURSOR FOR
   		SELECT 	
   			IDTIPOORGANIZACAO,
			DSTIPOORGANIZACAO
		FROM 
			ORGANOGRAMA.TIPOORGANIZACAO
		ORDER BY
			UPPER(DSTIPOORGANIZACAO);

		//Abre o cursor
		EXEC SQL OPEN CursorTipoOrganizacaoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CTipoOrganizacao::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stTipoOrganizacaoRegistro, 0, sizeof(stTipoOrganizacaoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorTipoOrganizacaoAll INTO :stTipoOrganizacaoRegistro:stTipoOrganizacaoIndicator;
				//Adiciona a classe
				Add( 	(char*)stTipoOrganizacaoRegistro.stidTipoOrganizacao.arr,
				(char*)stTipoOrganizacaoRegistro.stdsTipoOrganizacao.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorTipoOrganizacaoAll;
		}
		ULOG_END("CTipoOrganizacao::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipoOrganizacao::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoOrganizacao", Registro(x)->cidTipoOrganizacao );
				xml->addItem("dsTipoOrganizacao", Registro(x)->cdsTipoOrganizacao ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

void CTipoOrganizacao::GetXml( char* cNomeTagArray, char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() >= 0 )
	{
		//Caso nao tenha recebido uma tag padrao, deixa sem
		if( strlennull( cNomeTagArray ) > 0 ) {
			xml->createTag(cNomeTagArray);
			//Adiciona a propriedade necessaria para o xml
			xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
		}
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 ) {
				xml->createTag(cNomeTag);
				//Adiciona a propriedade necessaria para o xml
				xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
			}
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idTipoOrganizacao", Registro(x)->cidTipoOrganizacao );
				xml->addItem("dsTipoOrganizacao", Registro(x)->cdsTipoOrganizacao ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
		//So fecha um tag se abriu anteriormente
		if( strlennull( cNomeTagArray ) > 0 )
			xml->closeTag();
	}
}