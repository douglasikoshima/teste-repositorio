#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include "../include/CSistemaOrigem.h"

#define endOraStr(varstr)      varstr.arr[varstr.len]= '\0'
#define oraToStr(bstr,vchar)   if(!bstr) strncpy(bstr,vchar.arr,vchar.len)
#define strToOra(vchar,bstr)   vchar.len = strlen(bstr);strncpy((char *)vchar.arr,bstr,vchar.len);vchar.arr[vchar.len] = 0
#define strconv(buffer,fonte)  sprintf(buffer,"%d",fonte)


CSistemaOrigem::CSistemaOrigem()
{
}

CSistemaOrigem::~CSistemaOrigem()
{
}

int CSistemaOrigem::ListAll( void )
{
    ULOG_START("CSistemaOrigem::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidSistemaOrigem[21+1];
			VARCHAR stnmSistemaOrigem[255+1];
		} stSistemaOrigem;
		struct
		{
			short iidSistemaOrigem;
			short inmSistemaOrigem;
		} stSistemaOrigemIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraSistemaOrigem();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorSistemaOrigemAll CURSOR FOR
        SELECT   idsistemaorigem, nmsistemaorigem
            FROM apoio.sistemaorigem
           WHERE indisponivel = 1
        ORDER BY TRIM (UPPER (nmsistemaorigem));
		//Abre o cursor
		EXEC SQL OPEN CursorSistemaOrigemAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CSistemaOrigem::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stSistemaOrigem, 0, sizeof(stSistemaOrigem) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorSistemaOrigemAll INTO :stSistemaOrigem:stSistemaOrigemIndicator;
				//Adiciona a classe
				Add( 	(char*)stSistemaOrigem.stidSistemaOrigem.arr,
				(char*)stSistemaOrigem.stnmSistemaOrigem.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorSistemaOrigemAll;
		}

		ULOG_END("CSistemaOrigem::ListAll()");

		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}



void CSistemaOrigem::GetXml( XMLGen * xml )
{

	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{
				//Adiciona as tags necessarias
				xml->createTag( "SistemaVO" );
    				xml->addItem("idSistema", Registro(x)->cidSistemaOrigem );
    				xml->addItem("nmSistema", Registro(x)->cnmSistemaOrigem );
				xml->closeTag();
			}
		}
	}

}
