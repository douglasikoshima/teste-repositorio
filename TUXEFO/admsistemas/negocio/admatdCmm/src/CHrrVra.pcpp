#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CHrrVra.h"

CHorarioVerao::CHorarioVerao()
{
}

CHorarioVerao::~CHorarioVerao()
{
}

int CHorarioVerao::Insert( 
			char* cidUF,
			char* cnrHorarioVerao,
			char* cdtInicio,
			char* cdtFim,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CHorarioVerao::Insert()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidHorarioVerao[21+1];
		char* cAuxidUF = cidUF;
		char* cAuxnrHorarioVerao = cnrHorarioVerao;
		char* cAuxdtInicio = cdtInicio;
		char* cAuxdtFim = cdtFim;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHorarioVerao();
		
		memset( &cAuxidHorarioVerao, 0, sizeof(cAuxidHorarioVerao) ); 
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Pega um id unico e sequencia para a insercao
		EXEC SQL SELECT calendario.HorarioVeraoSQ.NEXTVAL INTO :cAuxidHorarioVerao FROM DUAL;

		//Realiza o insert
		EXEC SQL INSERT INTO calendario.HorarioVerao
		(	idHorarioVerao,
			idUF,
			nrHorarioVerao,
			dtInicio,
			dtFim,
			idUsuarioAlteracao,
			dtUltimaAlteracao) 
		VALUES 
		(	:cAuxidHorarioVerao,
			:cAuxidUF,
			:cAuxnrHorarioVerao,
			:cAuxdtInicio,
			:cAuxdtFim,
			:cAuxidUsuarioAlteracao,
			SYSDATE);
			
        ULOG_END("CHorarioVerao::Insert()");
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode) {
			return 0;//Erro
		}
		else {
			return 1;//Sucesso
		}
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHorarioVerao::Update( 
			char* cidHorarioVerao,
			char* cidUF,
			char* cnrHorarioVerao,
			char* cdtInicio,
			char* cdtFim,
			char* cidUsuarioAlteracao )
{
    ULOG_START("CHorarioVerao::Update()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		
			char* cAuxidHorarioVerao = cidHorarioVerao;
			char* cAuxidUF = cidUF;
			char* cAuxnrHorarioVerao = cnrHorarioVerao;
			char* cAuxdtInicio = cdtInicio;
			char* cAuxdtFim = cdtFim;
			char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHorarioVerao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
		UPDATE calendario.HorarioVerao
		SET 	idUF = :cAuxidUF,
		nrHorarioVerao = :cAuxnrHorarioVerao,
		dtInicio = :cAuxdtInicio,
		dtFim = :cAuxdtFim,
		idUsuarioAlteracao = :cAuxidUsuarioAlteracao,
		dtUltimaAlteracao = SYSDATE
		WHERE 	idHorarioVerao = :cAuxidHorarioVerao;   
		
		ULOG_END("CHorarioVerao::Update()");
		
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHorarioVerao::Delete( char* cidHorarioVerao )
{
    ULOG_START("CHorarioVerao::Delete()");
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidHorarioVerao = cidHorarioVerao; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHorarioVerao();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL DELETE FROM calendario.HorarioVerao
		WHERE (to_char(to_date(idHorarioVerao),'DD/MM/YYYY') = to_char(to_date(:cAuxidHorarioVerao),'DD/MM/YYYY'));
		
		ULOG_END("CHorarioVerao::Delete()");
		
		//Verifica se houve ou nao erro ORACLE
		if(sqlca.sqlcode)
			return 0;//Erro
		else
			return sqlca.sqlerrd[2];//Quantidade de linhas afetadas
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHorarioVerao::ListId( char* cidHorarioVerao ) 
{
    ULOG_START("CHorarioVerao::ListId()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidHorarioVerao = cidHorarioVerao; 
		struct
		{
			VARCHAR stidHorarioVerao[21+1];
			VARCHAR stidUF[21+1];
			VARCHAR stnrHorarioVerao[21+1];
			VARCHAR stdtInicio[12+1];
			VARCHAR stdtFim[12+1];
		} stHorarioVeraoRegistro;
		struct
		{
			short iidHorarioVerao;
			short iidUF;
			short inrHorarioVerao;
			short idtInicio;
			short idtFim;
		} stHorarioVeraoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHorarioVerao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL DECLARE CursorHorarioVeraoId CURSOR FOR 
   		SELECT 	idHorarioVerao,
	idUF,
	nrHorarioVerao,
	TO_CHAR(TO_DATE(dtInicio),'DD/MM/YYYY'),
	TO_CHAR(TO_DATE(dtFim),'DD/MM/YYYY')
		FROM calendario.HorarioVerao
		WHERE idHorarioVerao = :cAuxidHorarioVerao;

		//Abre o cursor
		EXEC SQL OPEN CursorHorarioVeraoId;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CHorarioVerao::ListId()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stHorarioVeraoRegistro, 0, sizeof(stHorarioVeraoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorHorarioVeraoId INTO :stHorarioVeraoRegistro:stHorarioVeraoIndicator;
				//Adiciona a classe
				Add( 	(char*)stHorarioVeraoRegistro.stidHorarioVerao.arr,
				(char*)stHorarioVeraoRegistro.stidUF.arr,
				(char*)stHorarioVeraoRegistro.stnrHorarioVerao.arr,
				(char*)stHorarioVeraoRegistro.stdtInicio.arr,
				(char*)stHorarioVeraoRegistro.stdtFim.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o CURSOR
			EXEC SQL CLOSE CursorHorarioVeraoId;
		}
		ULOG_END("CHorarioVerao::ListId()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int CHorarioVerao::ListAll( void )
{
    ULOG_START("CHorarioVerao::ListAll()");
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidHorarioVerao[21+1];
			VARCHAR stidUF[21+1];
			VARCHAR stnrHorarioVerao[21+1];
			VARCHAR stdtInicio[12+1];
			VARCHAR stdtFim[12+1];
		} stHorarioVeraoRegistro;
		struct
		{
			short iidHorarioVerao;
			short iidUF;
			short inrHorarioVerao;
			short idtInicio;
			short idtFim;
		} stHorarioVeraoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraHorarioVerao();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorHorarioVeraoAll CURSOR FOR
   		SELECT 	idHorarioVerao,
		idUF,
		nrHorarioVerao,
		TO_CHAR(TO_DATE(dtInicio),'DD/MM/YYYY'),
		TO_CHAR(TO_DATE(dtFim),'DD/MM/YYYY')
		FROM calendario.HorarioVerao; 

		//Abre o cursor
		EXEC SQL OPEN CursorHorarioVeraoAll;

		//Verifica se nao house erro ORACLE
		if(sqlca.sqlcode)
		{
		    ULOG_END("CHorarioVerao::ListAll()");
			return 0;//Erro
		}
		else
		{
			//Caso inexista registros sair do loop
			EXEC SQL WHENEVER NOT FOUND DO break;
			for(;;)
			{
				//Zera a estrutura de restorno
				memset( &stHorarioVeraoRegistro, 0, sizeof(stHorarioVeraoRegistro) );
				//Pega um registro no CURSOR
				EXEC SQL FETCH CursorHorarioVeraoAll INTO :stHorarioVeraoRegistro:stHorarioVeraoIndicator;
				//Adiciona a classe
				Add( 	(char*)stHorarioVeraoRegistro.stidHorarioVerao.arr,
				(char*)stHorarioVeraoRegistro.stidUF.arr,
				(char*)stHorarioVeraoRegistro.stnrHorarioVerao.arr,
				(char*)stHorarioVeraoRegistro.stdtInicio.arr,
				(char*)stHorarioVeraoRegistro.stdtFim.arr );
				//conta quantos existem
				iCont++;
			}
			//Fecha o cursor
			EXEC SQL CLOSE CursorHorarioVeraoAll;
		}
		ULOG_END("CHorarioVerao::ListAll()");
		//Retorna a quantidade de registros
		return iCont;
	}
	catch(...)
	{
		throw;
	}

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CHorarioVerao::GetXml( char* cNomeTag, XMLGen*xml )
{
    
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			xml->createTag(cNomeTag);
			//Adiciona a proprieda necessaria para o Weblogic
			xml->addProp( "xmlns", "admsistemas.fo.vivo.com.br/vo" );
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idHorarioVerao", Registro(x)->cidHorarioVerao );
				xml->addItem("idUF", Registro(x)->cidUF );
				xml->addItem("nrHorarioVerao", Registro(x)->cnrHorarioVerao );
				xml->addItem("dtInicio", Registro(x)->cdtInicio );
				xml->addItem("dtFim", Registro(x)->cdtFim ); 
			}
			//So fecha um tag se abriu anteriormente
			xml->closeTag();
		}
	}
}
