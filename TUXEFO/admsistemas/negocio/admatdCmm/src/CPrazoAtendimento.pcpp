#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CPrazoAtendimento.h"

CPrazoAtendimento::CPrazoAtendimento()
{
}

CPrazoAtendimento::~CPrazoAtendimento()
{
}

int CPrazoAtendimento::Insert( 
								char* cidContato,
								char* cqtHorasPrazoContato,
								char* cidSegmentacao,
								char* cidProcedencia,
								char* cidUsuarioAlteracao
							 )
{
    ULOG_START("CPrazoAtendimento::Insert()");       
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
		char* cAuxqtHorasPrazoContato = cqtHorasPrazoContato;
		char* cAuxidSegmentacao = cidSegmentacao;
		char* cAuxidProcedencia = cidProcedencia;
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
		
		//Realiza o insert
		EXEC SQL 
			INSERT INTO CONTATOADM.PRAZOATENDIMENTO 
			(	IDPRAZOATENDIMENTO,
				IDCONTATO,
				QTHORASPRAZOCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES 
			(	CONTATOADM.PRAZOATENDIMENTOSQ.NEXTVAL,
				:cAuxidContato,
				:cAuxqtHorasPrazoContato,
				:cAuxidSegmentacao,
				:cAuxidProcedencia,
				:cAuxidUsuarioAlteracao,
				SYSDATE
			);
			
        ULOG_END("CPrazoAtendimento::Insert()");       
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}
	
GotoInsert:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPrazoAtendimento::Update( 
								char* cidPrazoAtendimento,
								char* cidContato,
								char* cqtHorasPrazoContato,
								char* cidSegmentacao,
								char* cidProcedencia,
								char* cidUsuarioAlteracao 
							 )
{
    ULOG_START("CPrazoAtendimento::Update()");       
    //Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPrazoAtendimento = cidPrazoAtendimento;
		char* cAuxidContato = cidContato;
		char* cAuxqtHorasPrazoContato = cqtHorasPrazoContato;
		char* cAuxidSegmentacao = cidSegmentacao;
		char* cAuxidProcedencia = cidProcedencia;
		char* cAuxidUsuarioAlteracao = cidUsuarioAlteracao;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
		
		//Executa a instrucao de update
		EXEC SQL 
			UPDATE CONTATOADM.PRAZOATENDIMENTO 
			SET
				IDCONTATO = :cAuxidContato,
				QTHORASPRAZOCONTATO = :cAuxqtHorasPrazoContato,
				IDSEGMENTACAO = :cAuxidSegmentacao,
				IDPROCEDENCIA = :cAuxidProcedencia,
				IDUSUARIOALTERACAO = :cAuxidUsuarioAlteracao,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDPRAZOATENDIMENTO = :cAuxidPrazoAtendimento;
				
		ULOG_END("CPrazoAtendimento::Update()");       
		
		return 0;
	}
	catch(...)
	{
		throw;
	}

GotoUpdate:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CPrazoAtendimento::Delete( char* cidPrazoAtendimento )
{
    ULOG_START("CPrazoAtendimento::Delete()");       
    //Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;	
		char* cAuxidPrazoAtendimento = cidPrazoAtendimento; 
	EXEC SQL END DECLARE SECTION;
	
	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();
		
		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND CONTINUE;
		EXEC SQL WHENEVER SQLERROR GOTO GotoDelete;
		sqlca.sqlcode=0;
		
		//Executa a instrucao de delecao
		EXEC SQL 
			DELETE FROM 
				CONTATOADM.PRAZOATENDIMENTO 		
			WHERE 
				IDPRAZOATENDIMENTO = :cAuxidPrazoAtendimento;
		ULOG_END("CPrazoAtendimento::Delete()");       
		return 0;//Sucesso
	}
	catch(...)
	{
		throw;
	}

GotoDelete:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	if( sqlca.sqlcode == -2292 )
		return 1;
	else
		throw TuxBasicOraException(sqlca.sqlcode);
}

int CPrazoAtendimento::ListId( char* cidPrazoAtendimento ) 
{
    ULOG_START("CPrazoAtendimento::ListId()");       
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidPrazoAtendimento = cidPrazoAtendimento; 
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stqtHorasPrazoContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iqtHorasPrazoContato;
			short iidSegmentacao;
			short iidProcedencia;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorPrazoAtendimentoId CURSOR FOR 
   			SELECT 	
   				IDPRAZOATENDIMENTO,
				IDCONTATO,
				QTHORASPRAZOCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA
			FROM 
				CONTATOADM.PRAZOATENDIMENTO
			WHERE 
				IDPRAZOATENDIMENTO = :cAuxidPrazoAtendimento;

		//Abre o cursor
		EXEC SQL OPEN CursorPrazoAtendimentoId;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorPrazoAtendimentoId INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stqtHorasPrazoContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr, 
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr 
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorPrazoAtendimentoId;

	}
	catch(...)
	{
		throw;
	}
    ULOG_END("CPrazoAtendimento::ListId()");       
	//Retorna a quantidade de registros
	return iCont;
GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CPrazoAtendimento::ListAll( void )
{
    ULOG_START("CPrazoAtendimento::ListAll()");       
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stqtHorasPrazoContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iqtHorasPrazoContato;
			short iidSegmentacao;
			short iidProcedencia;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;

		//Declara um cursor para listar todos os registros
   		EXEC SQL DECLARE CursorPrazoAtendimentoAll CURSOR FOR
   			SELECT 	
   				IDPRAZOATENDIMENTO,
				IDCONTATO,
				QTHORASPRAZOCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA
			FROM 
				CONTATOADM.PRAZOATENDIMENTO
			WHERE
				IDPRAZOATENDIMENTO > 0; 

		//Abre o cursor
		EXEC SQL OPEN CursorPrazoAtendimentoAll;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorPrazoAtendimentoAll INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stqtHorasPrazoContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr, 
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr 
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o cursor
		EXEC SQL CLOSE CursorPrazoAtendimentoAll;
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CPrazoAtendimento::ListAll()");       
	//Retorna a quantidade de registros
	return iCont;

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CPrazoAtendimento::GetXml( char* cNomeTag, XMLGen*xml )
{
	//Soh monta o XML padrao se existir algum registro para isto
	if( Quantidade() > 0 )
	{
		//Corre todos os registros do iterator
		for( int x = 0; x < Quantidade(); x++ )
		{
			//Caso nao tenha recebido uma tag padrao, deixa sem
			if( strlennull( cNomeTag ) > 0 )
				xml->createTag(cNomeTag);
			//Para garantir que existe um registro
			if( Registro( x ) != NULL )
			{ 
				//Adiciona as tags necessarias
				xml->addItem("idPrazoAtendimento", Registro(x)->cidPrazoAtendimento );
				xml->addItem("idContato", Registro(x)->cidContato ); 
				xml->addItem("qtHorasPrazoContato", Registro(x)->cqtHorasPrazoContato ); 
				xml->addItem("idSegmentacao", Registro(x)->cidSegmentacao ); 
				xml->addItem("idProcedencia", Registro(x)->cidProcedencia ); 
			}
			//So fecha um tag se abriu anteriormente
			if( strlennull( cNomeTag ) > 0 )
				xml->closeTag();
		}
	}
}

int CPrazoAtendimento::RelacaoPorIdContato( char* cidContato ) 
{
    ULOG_START("CPrazoAtendimento::RelacaoPorIdContato()");       
	//Variavel de controle para a quantidade de registros retornada
	int    iCont = 0;
	//Variavel de status do oracle para PROC
	struct sqlca sqlca;
	//Declaracao das variaveis para o PROC
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidContato = cidContato; 
		struct
		{
			VARCHAR stidPrazoAtendimento[21+1];
			VARCHAR stidContato[21+1];
			VARCHAR stqtHorasPrazoContato[21+1];
			VARCHAR stidSegmentacao[21+1];
			VARCHAR stidProcedencia[21+1];
		} stPrazoAtendimentoRegistro;
		struct
		{
			short iidPrazoAtendimento;
			short iidContato;
			short iqtHorasPrazoContato;
			short iidSegmentacao;
			short iidProcedencia;
		} stPrazoAtendimentoIndicator;
	EXEC SQL END DECLARE SECTION;

	//Processamento Principal
	try
	{
		//Zera a estrutura da classe
		ZeraPrazoAtendimento();

		//Ativa as acoes decorrentes de erros ORACLE
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoRelacaoPorIdContato;
		sqlca.sqlcode=0;

		//Declara um cursor para listar os IDs
   		EXEC SQL 
   			DECLARE 
   				CursorRelacaoPorIdContato CURSOR FOR 
   			SELECT 	
   				IDPRAZOATENDIMENTO,
				IDCONTATO,
				QTHORASPRAZOCONTATO,
				IDSEGMENTACAO,
				IDPROCEDENCIA
			FROM 
				CONTATOADM.PRAZOATENDIMENTO
			WHERE 
				IDCONTATO = :cAuxidContato;

		//Abre o cursor
		EXEC SQL OPEN CursorRelacaoPorIdContato;

		//Caso inexista registros sair do loop
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			//Zera a estrutura de restorno
			memset( &stPrazoAtendimentoRegistro, 0, sizeof(stPrazoAtendimentoRegistro) );
			//Pega um registro no CURSOR
			EXEC SQL FETCH CursorRelacaoPorIdContato INTO :stPrazoAtendimentoRegistro:stPrazoAtendimentoIndicator;
			//Adiciona a classe
			Add( 	
				(char*)stPrazoAtendimentoRegistro.stidPrazoAtendimento.arr,
				(char*)stPrazoAtendimentoRegistro.stidContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stqtHorasPrazoContato.arr, 
				(char*)stPrazoAtendimentoRegistro.stidSegmentacao.arr, 
				(char*)stPrazoAtendimentoRegistro.stidProcedencia.arr 
			);
			//conta quantos existem
			iCont++;
		}
		//Fecha o CURSOR
		EXEC SQL CLOSE CursorRelacaoPorIdContato;

	}
	catch(...)
	{
		throw;
	}
    ULOG_END("CPrazoAtendimento::RelacaoPorIdContato()");       
	//Retorna a quantidade de registros
	return iCont;
GotoRelacaoPorIdContato:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	throw TuxBasicOraException(sqlca.sqlcode);

}
