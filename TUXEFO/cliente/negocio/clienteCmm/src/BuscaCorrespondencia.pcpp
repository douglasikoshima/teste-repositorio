// BuscaCorrespondencia.pcpp: implementation for the 
// CBuscaCorrespondencia class.
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>

EXEC SQL INCLUDE "../include/BuscaCorrespondencia.h";

//
// Construtor e Destrutor
CBuscaCorrespondencia::CBuscaCorrespondencia() {
	icNrLinha = -1;
	icNrConta = -1;
	icDsTipoCorrespondencia = -1;
	icDsMotivoDevolucao = -1;
	icDtDevolucao = -1;
	icDtRegistro = -1;
	icNomePessoa = -1;
}

CBuscaCorrespondencia::~CBuscaCorrespondencia() {
}

//
// Metodos getter
int CBuscaCorrespondencia::getIdCorrespondencia(){
	return iIdCorrespondencia;
}

char* CBuscaCorrespondencia::getNrLinha(){
	if (icNrLinha < 0)
		return NULL;
	else
		return cNrLinha;
}

char* CBuscaCorrespondencia::getNrConta(){
	if (icNrConta < 0)
		return NULL;
	else
		return cNrConta;
}

char* CBuscaCorrespondencia::getDsTipoCorrespondencia(){
	if (icDsTipoCorrespondencia < 0)
		return NULL;
	else
		return cDsTipoCorrespondencia;
}

char* CBuscaCorrespondencia::getDsMotivoDevolucao(){
	if (icDsMotivoDevolucao < 0)
		return NULL;
	else
		return cDsMotivoDevolucao;
}

char* CBuscaCorrespondencia::getDtDevolucao(){
	if (icDtDevolucao < 0)
		return NULL;
	else
		return cDtDevolucao;
}

char* CBuscaCorrespondencia::getDtRegistro(){
	if (icDtRegistro < 0)
		return NULL;
	else
		return cDtRegistro;
}

char* CBuscaCorrespondencia::getNomePessoa(){
	if (icNomePessoa < 0)
		return NULL;
	else
		return cNomePessoa;
}

//
// Metodos setter
void CBuscaCorrespondencia::setIdCorrespondencia(int value){
	iIdCorrespondencia = value;
}

void CBuscaCorrespondencia::setNrLinha(char* value){
	if(value == NULL)
		icNrLinha = -1;
	else {
		strncpy(cNrLinha, value, 255);
		cNrLinha[255]='\0';
		icNrLinha= strlen(value);
	}
}

void CBuscaCorrespondencia::setNrConta(char* value){
	if(value == NULL)
		icNrConta = -1;
	else {
		strncpy(cNrConta, value, 255);
		cNrConta[255]='\0';
		icNrConta= strlen(value);
	}
}

void CBuscaCorrespondencia::setDsTipoCorrespondencia(char* value){
	if(value == NULL)
		icDsTipoCorrespondencia = -1;
	else {
		strncpy(cDsTipoCorrespondencia, value, 255);
		cDsTipoCorrespondencia[255]='\0';
		icDsTipoCorrespondencia= strlen(value);
	}
}

void CBuscaCorrespondencia::setDsMotivoDevolucao(char* value){
	if(value == NULL)
		icDsMotivoDevolucao = -1;
	else {
		strncpy(cDsMotivoDevolucao, value, 255);
		cDsMotivoDevolucao[255]='\0';
		icDsMotivoDevolucao = strlen(value);
	}
}

void CBuscaCorrespondencia::setDtDevolucao(char* value){
	if(value == NULL)
		icDtDevolucao = -1;
	else {
		strncpy(cDtDevolucao, value, 255);
		cDtDevolucao[255]='\0';
		icDtDevolucao= strlen(value);
	}
}

void CBuscaCorrespondencia::setDtRegistro(char* value){
	if(value == NULL)
		icDtRegistro = -1;
	else {
		strncpy(cDtRegistro, value, 255);
		cDtRegistro[255]='\0';
		icDtRegistro= strlen(value);
	}
}

void CBuscaCorrespondencia::setNomePessoa(char* value){
	if(value == NULL)
		icNomePessoa = -1;
	else {
		strncpy(cNomePessoa, value, 255);
		cNomePessoa[255]='\0';
		icNomePessoa= strlen(value);
	}
}

//
// Métodos de banco de dados
CBuscaCorrespondencia* CBuscaCorrespondencia::busca(char* cDtDevIni,
													char* cDtDevFim, 
													char* cDtRegIni, 
													char* cDtRegFim, 
													char* cNrLin, 
													int iIdTpCorr, 
													int iIdMotDev, 
													int iIdStat, 
													int* iNroObjetos) 
{

	ULOG_START("CBuscaCorrespondencia::busca()");
	struct sqlca sqlca;
	CBuscaCorrespondencia* listaBusca = NULL;
	int iNroObjLocal = 1;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	EXEC SQL BEGIN DECLARE SECTION;
	// Parâmetros de entrada
	char cOraDtDevIni[256];
	char cOraDtDevFim[256];
	char cOraDtRegIni[256];
	char cOraDtRegFim[256];
	char cOraDDD[3];
	char cOraFone[10];
	int iOraIdTpCorr;
	int iOraIdMotDev;
	int iOraIdStat;

	// Resultado da busca
	int iIdCorrespondencia;
	char cNrLinha[256];
	char cNrConta[256];
	char cDsTipoCorrespondencia[256];
	char cDsMotivoDevolucao[256];
	char cDtDevolucao[256];
	char cDtRegistro[256];
	char cNomePessoa[256];

	// Variáveis indicativas do oracle
	short icNrLinha;
	short icNrConta;
	short icDsTipoCorrespondencia;
	short icDsMotivoDevolucao;
	short icDtDevolucao;
	short icDtRegistro;
	short icNomePessoa;
	EXEC SQL END DECLARE SECTION;

	// Seta os valores para a busca
	if (cDtDevIni != NULL) {
		strncpy(cOraDtDevIni,cDtDevIni,255);
		strncpy(cOraDtDevFim,cDtDevFim,255);
	} else {
		strcpy(cOraDtDevIni,"01/01/2036");
		strcpy(cOraDtDevFim,"01/01/1970");
	}

	if (cDtRegIni != NULL) {
		strncpy(cOraDtRegIni,cDtRegIni,255);
		strncpy(cOraDtRegFim,cDtRegFim,255);
	} else {
		strcpy(cOraDtRegIni,"01/01/2036");
		strcpy(cOraDtRegFim,"01/01/1970");
	}

	if (cNrLin != NULL) {
		strncpy(cOraDDD, cNrLin, 2);
		cOraDDD[2]='\0';
		strcpy( cOraFone, (char*)&cNrLin[2] );
	} else {
		strcpy(cOraDDD, "-1");
		strcpy(cOraFone, "-1");
	}

	if (iIdTpCorr > 0)
		iOraIdTpCorr = iIdTpCorr;
	else
		iOraIdTpCorr = -1;

	if (iIdMotDev > 0)
		iOraIdMotDev = iIdMotDev;
	else
		iOraIdMotDev = -1;

	if (iIdStat > 0)
		iOraIdStat = iIdStat;
	else
		iOraIdStat = -1;

	// Monta a query.
	EXEC SQL DECLARE listaCorr CURSOR FOR
	SELECT
	 IdCorrespondenciaDevolvida,
	 /*'(' ||CdAreaRegistro||')' || substr(nrLinha, 1, 4) || '-' || substr(nrLinha, 5, 4),*/
     soa_ow.formata_nrlinha(TO_CHAR(CdAreaRegistro)||to_char(nrLinha)) ,
	 CdConta,
	 DsTipoCorrespondencia,
	 DsMotivoDevolucao,
	 TO_CHAR(DtDevolucao, 'DD/MM/YYYY'),
	 TO_CHAR(DtInclusao, 'DD/MM/YYYY'),
     nmpessoa
	FROM
	 correspondencia.CorrLinContHistV01
	WHERE
	 ((TO_CHAR(DtDevolucao, 'YYYYMMDD') >= TO_CHAR(TO_DATE(:cOraDtDevIni, 'DD/MM/YYYY'),'YYYYMMDD') AND
	   TO_CHAR(DtDevolucao, 'YYYYMMDD') <= TO_CHAR(TO_DATE(:cOraDtDevFim, 'DD/MM/YYYY'),'YYYYMMDD')) OR '01/01/2036' = :cOraDtDevIni) AND
	 ((TO_CHAR(DtInclusao , 'YYYYMMDD') >= TO_CHAR(TO_DATE(:cOraDtRegIni, 'DD/MM/YYYY'),'YYYYMMDD') AND
	   TO_CHAR(DtInclusao , 'YYYYMMDD') <= TO_CHAR(TO_DATE(:cOraDtRegFim, 'DD/MM/YYYY'),'YYYYMMDD')) OR  '01/01/2036' = :cOraDtRegIni) AND
	 ((CdAreaRegistro = :cOraDDD AND NrLinha = :cOraFone) OR -1 = :cOraDDD) AND
	 (IdTipoCorrespondencia = :iOraIdTpCorr OR -1 = :iOraIdTpCorr) AND 
	 (IdMotivoDevolucao = :iOraIdMotDev OR -1 = :iOraIdMotDev) AND
	 (IdStatusCorrespondencia= :iOraIdStat OR -1 = :iOraIdStat);

	// Prepara e abre o cursor
	EXEC SQL OPEN listaCorr;

	// Corre os dados e monta a lista de objetos
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;; iNroObjLocal++) {
		
		EXEC SQL FETCH listaCorr INTO
			iIdCorrespondencia,
			cNrLinha:icNrLinha,
			cNrConta:icNrConta,
			cDsTipoCorrespondencia:icDsTipoCorrespondencia,
			cDsMotivoDevolucao:icDsMotivoDevolucao,
			cDtDevolucao:icDtDevolucao,
			cDtRegistro:icDtRegistro,
            cNomePessoa:icNomePessoa;

		// Aloca memória para o objeto atual.
		if ((listaBusca = (CBuscaCorrespondencia*) realloc((void *)listaBusca, (sizeof(CBuscaCorrespondencia) * iNroObjLocal))) != NULL) {
			
			// Coloca os dados do objeto atual.
			listaBusca[iNroObjLocal-1].setIdCorrespondencia(iIdCorrespondencia);
			listaBusca[iNroObjLocal-1].setNrLinha(icNrLinha < 0 ? NULL : strncmp(cNrLinha, "()-", 3) == 0 ? NULL : cNrLinha);
			listaBusca[iNroObjLocal-1].setNrConta(icNrConta < 0 ? NULL : cNrConta);
			listaBusca[iNroObjLocal-1].setDsTipoCorrespondencia(icDsTipoCorrespondencia < 0 ? NULL : cDsTipoCorrespondencia);
			listaBusca[iNroObjLocal-1].setDsMotivoDevolucao(icDsMotivoDevolucao < 0 ? NULL : cDsMotivoDevolucao);
			listaBusca[iNroObjLocal-1].setDtDevolucao(icDtDevolucao < 0 ? NULL : cDtDevolucao);
			listaBusca[iNroObjLocal-1].setDtRegistro(icDtRegistro < 0 ? NULL : cDtRegistro);
			listaBusca[iNroObjLocal-1].setNomePessoa(icNomePessoa< 0 ? NULL : cNomePessoa);

		} else {
			if (listaBusca){
				free(listaBusca);
                EXEC SQL CLOSE listaCorr;
            }
            ULOG_END("CBuscaCorrespondencia::busca()");
			throw new TuxBasicSvcException(NRO_ERR_MEMORIA,MSG_ERR_MEMORIA);
		}
	}

    EXEC SQL CLOSE listaCorr;

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CBuscaCorrespondencia::busca()");
	return listaBusca;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CBuscaCorrespondencia::busca()");	        
		throw TuxBasicOraException(sqlca.sqlcode);
}
