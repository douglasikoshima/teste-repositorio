//---------------------------------------------------------------------
//*
//* Class: classDocumentoVO
//---------------------------------------------------------------------
//* Purpose:
//*
//* Utilizada em Lupa do Cliente - Aba Documento.
//* 
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio
//---------------------------------------------------------------------

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

#include <tuxfw.h>
#include "../include/Exception.h"

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE "../include/Global.h";
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classDocumentoVO.h";


//
// Construtor e Destrutor
CDocumentoVO::CDocumentoVO()
{
    memset(&tDocVO, 0x00, sizeof(tDocVO));
    memset(&tDocVONull, 0x00, sizeof(tDocVONull));
}

CDocumentoVO::~CDocumentoVO()
{
}


//
// Metodos getter
char* CDocumentoVO::getIdDocumento()
{
    return ((char *)tDocVO.sIdDocumento.arr);
}

char* CDocumentoVO::getIdTipoDocumento()
{
    return ((char *)tDocVO.sIdTipoDocumento.arr);
}

char* CDocumentoVO::getSgTipoDocumento()
{
    return ((char *)tDocVO.sSgTipoDocumento.arr);
}

char* CDocumentoVO::getDsTipoDocumento()
{
    return ((char *)tDocVO.sDsTipoDocumento.arr);
}

char* CDocumentoVO::getNrDocumento()
{
    return ((char *)tDocVO.sNrDocumento.arr);
}

char* CDocumentoVO::getSgOrgaoExpedidor()
{
    return ((char *)tDocVO.sSgOrgaoExpedidor.arr);
}

char* CDocumentoVO::getSgUf()
{
    return ((char *)tDocVO.sSgUf.arr);
}

char* CDocumentoVO::getDtEmissaoOut()
{
    return ((char *)tDocVO.sDtEmissaoOut.arr);
}

char* CDocumentoVO::getIdPais()
{
    return ((char *)tDocVO.sIdPais.arr);
}

char* CDocumentoVO::getSgPais()
{
    return ((char *)tDocVO.sSgPais.arr);
}

char* CDocumentoVO::getNmPais()
{
    return ((char *)tDocVO.sNmPais.arr);
}

char* CDocumentoVO::getDsNacionalidade()
{
    return ((char *)tDocVO.sDsNacionalidade.arr);
}

char* CDocumentoVO::getCdCpfCnpjBase()
{
    return ((char *)tDocVO.sCdCpfCnpjBase.arr);
}

char* CDocumentoVO::getCdCnpjFilial()
{
    return ((char *)tDocVO.sCdCnpjFilial.arr);
}

char* CDocumentoVO::getCdCpfCnpjControle()
{
    return ((char *)tDocVO.sCdCpfCnpjControle.arr);
}
char* CDocumentoVO::getNrPrioridade()
{
    return ((char *)tDocVO.sNrPrioridade.arr);
}

long CDocumentoVO::getTsSincronismo()
{
    return tDocVO.lTsSincronismo;
}

long CDocumentoVO::getSqSincronismo()
{
    return tDocVO.lSqSincronismo;
}

//
// Metodos setter
void CDocumentoVO::setIdDocumento(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sIdDocumento, pDado);
}

void CDocumentoVO::setIdTipoDocumento(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sIdTipoDocumento, pDado);
}

void CDocumentoVO::setSgTipoDocumento(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sSgTipoDocumento, pDado);
}

void CDocumentoVO::setDsTipoDocumento(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sDsTipoDocumento, pDado);
}

void CDocumentoVO::setNrDocumento(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sNrDocumento, pDado);
}

void CDocumentoVO::setSgOrgaoExpedidor(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sSgOrgaoExpedidor, pDado);
}

void CDocumentoVO::setSgUf(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sSgUf, pDado);
}

void CDocumentoVO::setDtEmissaoOut(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sDtEmissaoOut, pDado);
}

void CDocumentoVO::setIdPais(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sIdPais, pDado);
}

void CDocumentoVO::setSgPais(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sSgPais, pDado);
}

void CDocumentoVO::setNmPais(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sNmPais, pDado);
}

void CDocumentoVO::setDsNacionalidade(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sDsNacionalidade, pDado);
}

void CDocumentoVO::setCdCpfCnpjBase(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sCdCpfCnpjBase, pDado);
}

void CDocumentoVO::setCdCnpjFilial(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sCdCnpjFilial, pDado);
}

void CDocumentoVO::setCdCpfCnpjControle(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sCdCpfCnpjControle, pDado);
}
void CDocumentoVO::setNrPrioridade(char *pDado)
{
    STRCPY_TO_ORA(tDocVO.sNrPrioridade, pDado);
}

void CDocumentoVO::setTsSincronismo(long lDado)
{
    tDocVO.lTsSincronismo = lDado;
}

void CDocumentoVO::setSqSincronismo(long lDado)
{
    tDocVO.lSqSincronismo = lDado;
}

//Metodos de acesso ao Banco de Dados
CDocumentoVO* CDocumentoVO::RecuperarTodos(int* iNroObjetos, char *pID)
{
    ULOG_START("CDocumentoVO::RecuperarTodos()");
    struct sqlca sqlca;

	CDocumentoVO* oObj = NULL;
	int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
        TDOCUMENTOVO      tST;
        TDOCUMENTOVO_NULL tSTNull;
        VARCHAR sWhere[255];
	EXEC SQL END DECLARE SECTION;

    memset(&tST, 0x00, sizeof(tST));
    memset(&tSTNull, 0x00, sizeof(tSTNull));

    ULOG("CDocumentoVO::RecuperarTodos->pID[%s]", pID);

    STRCPY_TO_ORA(sWhere, pID);

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor
	EXEC SQL DECLARE cCursor CURSOR for
    SELECT DISTINCT
		 DOCUMENTO.IDDOCUMENTO
		,TIPODOCUMENTO.IDTIPODOCUMENTO
		,TIPODOCUMENTO.SGCLASSIFICACAO
		,TIPODOCUMENTO.DSTIPODOCUMENTO
		,DOCUMENTO.NRDOCUMENTO
		,DOCUMENTO.SGORGAOEXPEDIDOR
		,UF.SGUF
		,TO_CHAR( DOCUMENTO.DTEMISSAO, 'DD/MM/YYYY' )
		,PAIS.IDPAIS
		,PAIS.SGPAIS
		,PAIS.NMPAIS
		,PAIS.DSNACIONALIDADE
		,DOCUMENTO.CDCPFCNPJBASE
		,DOCUMENTO.CDCNPJFILIAL
		,DOCUMENTO.CDCPFCNPJCONTROLE
		,TIPODOCUMENTO.NRPRIORIDADE
		,DECODE(PESSOADOCUMENTO.TSSINCRONISMO,'', 0, 1)
		,DECODE(PESSOADOCUMENTO.SQSINCRONISMO,'', 0, 1)
    FROM 
        CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
        CUSTOMER.DOCUMENTO DOCUMENTO,
        APOIO.TIPODOCUMENTO TIPODOCUMENTO,
        APOIO.UF UF,
        APOIO.PAIS PAIS
    WHERE 
        PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO
    AND
        DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO
    AND
        DOCUMENTO.IDUF = UF.IDUF
    AND
        DOCUMENTO.IDPAIS = PAIS.IDPAIS
    AND
        PESSOADOCUMENTO.IDPESSOA IN
        (
            SELECT 
                IDPESSOAORIGEM 
            FROM 
                CUSTOMER.PESSOADEPARA 
            WHERE 
                IDPESSOA = :sWhere
        )
    ORDER BY NRPRIORIDADE;

	EXEC SQL OPEN cCursor;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        ULOG("CDocumentoVO::RecuperarTodos->iNroObjLocal(%d)", iNroObjLocal);

		memset(&tST, 0x00, sizeof(tST));

		EXEC SQL FETCH cCursor INTO :tST:tSTNull;

        ULOG("CDocumentoVO::RecuperarTodos->FETCH->sqlca.sqlcode(%d)", sqlca.sqlcode);

		// Aloca memória para o objeto atual.
		if ((oObj = (CDocumentoVO*) realloc((void *)oObj, (sizeof(CDocumentoVO) * iNroObjLocal))) != NULL)
        {
			// Coloca os dados do objeto atual.
            int index = iNroObjLocal-1;
            oObj[index].setIdDocumento((char*)tST.sIdDocumento.arr);
            oObj[index].setIdTipoDocumento((char*)tST.sIdTipoDocumento.arr);
            oObj[index].setSgTipoDocumento((char*)tST.sSgTipoDocumento.arr);
            oObj[index].setDsTipoDocumento((char*)tST.sDsTipoDocumento.arr);
            oObj[index].setNrDocumento((char*)tST.sNrDocumento.arr);
            oObj[index].setSgOrgaoExpedidor((char*)tST.sSgOrgaoExpedidor.arr);
            oObj[index].setSgUf((char*)tST.sSgUf.arr);
            oObj[index].setDtEmissaoOut((char*)tST.sDtEmissaoOut.arr);
            oObj[index].setIdPais((char*)tST.sIdPais.arr);
            oObj[index].setSgPais((char*)tST.sSgPais.arr);
            oObj[index].setNmPais((char*)tST.sNmPais.arr);
            oObj[index].setDsNacionalidade((char*)tST.sDsNacionalidade.arr);
            oObj[index].setCdCpfCnpjBase((char*)tST.sCdCpfCnpjBase.arr);
            oObj[index].setCdCnpjFilial((char*)tST.sCdCnpjFilial.arr);
            oObj[index].setCdCpfCnpjControle((char*)tST.sCdCpfCnpjControle.arr);
            oObj[index].setNrPrioridade((char*)tST.sNrPrioridade.arr);
            oObj[index].setTsSincronismo(tST.lTsSincronismo);
            oObj[index].setSqSincronismo(tST.lSqSincronismo);
		} 
        else 
        {
			if (oObj) 
                free(oObj);

            EXEC SQL CLOSE cCursor;
			ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
			throw TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		}
	}

    EXEC SQL CLOSE cCursor;

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CDocumentoVO::RecuperarTodos()");
	return oObj;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
		ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CDocumentoVO::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}

int CDocumentoVO::buscarPorIdPessoa(char *pID)
{
    ULOG_START("CDocumentoVO::RecuperarTodos()");
    struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR sWhere[255];
	EXEC SQL END DECLARE SECTION;

    ULOG("CDocumentoVO::buscarPorIdPessoa->pID[%s]", pID);

    STRCPY_TO_ORA(sWhere, pID);

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
    SELECT 
		IDDOCUMENTO
		,IDTIPODOCUMENTO
		,SGCLASSIFICACAO
		,DSTIPODOCUMENTO
		,NRDOCUMENTO
		,SGORGAOEXPEDIDOR
		,SGUF
		,DTEMISSAOOUT
		,IDPAIS
		,SGPAIS
		,NMPAIS
		,DSNACIONALIDADE
		,CDCPFCNPJBASE
		,CDCNPJFILIAL
		,CDCPFCNPJCONTROLE
		,TSSINCRONISMO
		,SQSINCRONISMO
    INTO  :tDocVO.sIdDocumento:tDocVONull.iIdDocumento,
          :tDocVO.sIdTipoDocumento:tDocVONull.iIdTipodocumento,
          :tDocVO.sSgTipoDocumento:tDocVONull.iSgTipodocumento,
          :tDocVO.sDsTipoDocumento:tDocVONull.iDsTipodocumento,
          :tDocVO.sNrDocumento:tDocVONull.iNrDocumento,
          :tDocVO.sSgOrgaoExpedidor:tDocVONull.iSgOrgaoexpedidor,
          :tDocVO.sSgUf:tDocVONull.iSgUf,
          :tDocVO.sDtEmissaoOut:tDocVONull.iDtEmissaoout,
          :tDocVO.sIdPais:tDocVONull.iIdPais,
          :tDocVO.sSgPais:tDocVONull.iSgPais,
          :tDocVO.sNmPais:tDocVONull.iNmPais,
          :tDocVO.sDsNacionalidade:tDocVONull.iDsNacionalidade,
          :tDocVO.sCdCpfCnpjBase:tDocVONull.iCdCpfcnpjbase,
          :tDocVO.sCdCnpjFilial:tDocVONull.iCdCnpjfilial,
          :tDocVO.sCdCpfCnpjControle:tDocVONull.iCdCpfcnpjcontrole,
          :tDocVO.lTsSincronismo:tDocVONull.iTsSincronismo,
          :tDocVO.lSqSincronismo:tDocVONull.iSqSincronismo
	FROM
	( 
	   	SELECT 
			 DOCUMENTO.IDDOCUMENTO
			,TIPODOCUMENTO.IDTIPODOCUMENTO
			,TIPODOCUMENTO.SGCLASSIFICACAO
			,TIPODOCUMENTO.DSTIPODOCUMENTO
			,DOCUMENTO.NRDOCUMENTO
			,DOCUMENTO.SGORGAOEXPEDIDOR
			,UF.SGUF
			,TO_CHAR(DOCUMENTO.DTEMISSAO, 'DD/MM/YYYY') AS DTEMISSAOOut
			,PAIS.IDPAIS
			,PAIS.SGPAIS
			,PAIS.NMPAIS
			,PAIS.DSNACIONALIDADE
			,DOCUMENTO.CDCPFCNPJBASE
			,DOCUMENTO.CDCNPJFILIAL
			,DOCUMENTO.CDCPFCNPJCONTROLE
			,DECODE(PESSOADOCUMENTO.TSSINCRONISMO,'', 0, 1) TSSINCRONISMO
			,DECODE(PESSOADOCUMENTO.SQSINCRONISMO,'', 0, 1) SQSINCRONISMO
			,TIPODOCUMENTO.NRPRIORIDADE
        FROM 
        	CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
            CUSTOMER.DOCUMENTO DOCUMENTO,
            APOIO.TIPODOCUMENTO TIPODOCUMENTO,
            APOIO.UF UF,
            APOIO.PAIS PAIS
    	WHERE
        	PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO
        AND
            DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO
        AND
            DOCUMENTO.IDUF = UF.IDUF
        AND
            DOCUMENTO.IDPAIS = PAIS.IDPAIS
        AND
            IDPESSOA = :sWhere
        ORDER BY 
        	NRPRIORIDADE 
	)
    WHERE 
    	ROWNUM = 1;

	ULOG_END("CDocumentoVO::RecuperarTodos()");
	return OK;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CDocumentoVO::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}
