#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

#include <tuxfw.h>
#include "../include/Exception.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classEstadoLinha.h";


CEstadoLinha::CEstadoLinha()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}

void CEstadoLinha::setId(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iId_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sId, pDado);
        tTabela.iId_ora = 0;
    }
}

void CEstadoLinha::setSigla(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iSigla_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sSigla, pDado);
        tTabela.iSigla_ora = 0;
    }
}

void CEstadoLinha::setDescricao(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iDescricao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sDescricao, pDado);
        tTabela.iDescricao_ora = 0;
    }
}

void CEstadoLinha::setIdSisOrig(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdSisOrig_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdSisOrig, pDado);
        tTabela.iIdSisOrig_ora = 0;
    }
}


char* CEstadoLinha::getId()
{
        return ((char*)tTabela.sId.arr);
}
char* CEstadoLinha::getSigla()
{
        return ((char*)tTabela.sSigla.arr);
}
char* CEstadoLinha::getDescricao()
{
        return ((char*)tTabela.sDescricao.arr);
}
char* CEstadoLinha::getIdSisOrig()
{
        return ((char*)tTabela.sIdSisOrig.arr);
}
//


int CEstadoLinha::Incluir()
{
    return OK;
}

int CEstadoLinha::Excluir()
{
    return OK;
}


int CEstadoLinha::Alterar()
{
    return OK;
}


CEstadoLinha* CEstadoLinha::RecuperarTodos(int* iNroObjetos,int _idLinhaTelefonica)
{
    ULOG_START("CEstadoLinha::RecuperarTodos()");
    struct sqlca sqlca;

    CEstadoLinha* oEL = NULL;
    int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
        TAPOIO_EL tSt;
        int idLinhaTelefonica = _idLinhaTelefonica;
	EXEC SQL END DECLARE SECTION;


	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor

    // ==========================================================================================================
    // ==> Incidência 3114 no TD de pré-produção. Correção de valores duplicados na lupaLinha - Cassio - Jan/2006
    
	/*
    EXEC SQL DECLARE cCursor CURSOR FOR
            SELECT estadolinha.idestadolinha
                  ,estadolinha.idsistemaorigem
                  ,estadolinha.sgestadolinha
                  ,estadolinha.dsestadolinha
             FROM apoio.estadolinha estadolinha
                 ,linha.linhatelefonica linhatelefonica
            WHERE idestadolinha > 0
              AND estadolinha.idsistemaorigem = linhatelefonica.idsistemaorigem
              AND linhatelefonica.idlinhatelefonica = :idLinhaTelefonica
            ORDER BY dsestadolinha;
    */
    
	EXEC SQL DECLARE cCursor CURSOR FOR
            SELECT estadolinha.idestadolinha
                  ,estadolinha.idsistemaorigem
                  ,estadolinha.sgestadolinha
				  ,decode (reason.SBSCRP_ID,null,ESTADOLINHA.DSESTADOLINHA,'Bloqueio Pré-Ativação')
             FROM apoio.estadolinha estadolinha
			     ,linha.linhabase linhabase
                 ,linha.linhatelefonica linhatelefonica
				 ,linha.ACCESS_NBR_HOTLN_REASON REASON
            WHERE linhabase.idestadolinha > 0
			  and linhabase.idlinhabase = linhatelefonica.idlinhabase
		      AND LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA
	          AND LINHATELEFONICA.IDLINHASISTEMAORIGEM=REASON.SBSCRP_ID(+)
			  and REASON.HOTLN_REASON_CD(+) = 'PRE ACTIVATION'
              AND estadolinha.idsistemaorigem = linhatelefonica.idsistemaorigem
              AND linhatelefonica.idlinhatelefonica = :idLinhaTelefonica
            ORDER BY dsestadolinha;
            
            
    // EXEC SQL DECLARE cCursor CURSOR FOR
    //         SELECT idestadolinha
    //               ,idsistemaorigem
    //               ,sgestadolinha
    //               ,dsestadolinha
    //          FROM apoio.estadolinha
    //         WHERE idestadolinha > 0
    //         ORDER BY dsestadolinha;

    // <== Incidência 3114 no TD de pré-produção. Correção de valores duplicados na lupaLinha - Cassio - Jan/2006
    // ==========================================================================================================

	EXEC SQL OPEN cCursor;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        memset(&tSt, 0x00, sizeof(tSt));
		EXEC SQL FETCH cCursor 
                  INTO :tSt.sId:tSt.iId_ora,
                       :tSt.sIdSisOrig:tSt.iIdSisOrig_ora,
                       :tSt.sSigla:tSt.iSigla_ora,
                       :tSt.sDescricao:tSt.iDescricao_ora;

		// Aloca memória para o objeto atual.
		if ((oEL = (CEstadoLinha*) realloc((void *)oEL, (sizeof(CEstadoLinha) * iNroObjLocal))) != NULL)
        {
			oEL[iNroObjLocal-1].setId((char*)tSt.sId.arr);
			oEL[iNroObjLocal-1].setIdSisOrig((char*)tSt.sIdSisOrig.arr);
			oEL[iNroObjLocal-1].setSigla((char*)tSt.sSigla.arr);
			oEL[iNroObjLocal-1].setDescricao((char*)tSt.sDescricao.arr);
		} 
        else 
        {
			if (oEL) 
                free(oEL);

            ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
            EXEC SQL CLOSE cCursor;
			throw TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		}
	}

    EXEC SQL CLOSE cCursor;

	*iNroObjetos = iNroObjLocal - 1;

	ULOG_END("CEstadoLinha::RecuperarTodos()");
	return oEL;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CEstadoLinha::RecuperarTodos()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

