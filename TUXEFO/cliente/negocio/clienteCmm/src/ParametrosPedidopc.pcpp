/**
 * @modulo  Clientes
 * @usecase Aba Tracking
 * @remark  Rotinas básicas para acessos a parâmetros de tracking
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <string>

using namespace std;

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/ParametrosPedidopc.h"

EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/GlobalPedido.h"
EXEC SQL END DECLARE SECTION;

//==============================================================================
int CParamPedidopc::proCbuscarLstNmSOrigemOperLogistico(struct DadosParametros *pDadosParametros)
{
    ULOG_START("CParamPedidopc::proCbuscarLstNmSOrigemOperLogistico()");

    int retorno = RET_SUCESSO;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR varOraLstNmSOrigemOpeLog[LEN_DSVALORPARAMETRO+LEN_EOS];
        short statOraLstNmSOrigemOpeLog = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO erro;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    // Lista de siglas de sistemas origem de operadores logísticos de e-commerce
    EXEC SQL
        SELECT
            DSVALORPARAMETRO
        INTO
            :varOraLstNmSOrigemOpeLog:statOraLstNmSOrigemOpeLog
        FROM
            APOIO.PARAMETRO
        WHERE
            CDPARAMETRO = 'TRCK_LISTA_NMSORIGEM_ECOMMERCE';

    CONVIND(varOraLstNmSOrigemOpeLog,statOraLstNmSOrigemOpeLog);
    SAFE_STRNCPY(pDadosParametros->lstNmSOrigemOpeLog,(char*)varOraLstNmSOrigemOpeLog.arr);

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("sgOrigem op.log='%s'",pDadosParametros->lstNmSOrigemOpeLog);

    if ( sqlca.sqlcode ) { retorno = RET_NAO_EXISTEM_DADOS_NMSO; }

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CParamPedidopc::proCbuscarLstNmSOrigemOperLogistico()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

//==============================================================================
int CParamPedidopc::proCbuscarLstURLOperLogistico(struct DadosParametros *pDadosParametros)
{
    ULOG_START("CParamPedidopc::proCbuscarLstURLOperLogistico()");

    int retorno = RET_SUCESSO;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR varOraLstURLOpeLog[LEN_DSVALORPARAMETRO+LEN_EOS];
        short statOraLstURLOpeLog = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO erro;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    // Lista de URL's dos operadores logísticos de e-commerce
    EXEC SQL
        SELECT
            DSVALORPARAMETRO
        INTO
            :varOraLstURLOpeLog:statOraLstURLOpeLog
        FROM
            APOIO.PARAMETRO
        WHERE
            CDPARAMETRO = 'TRCK_URLS_ECOMMERCE';

    CONVIND(varOraLstURLOpeLog,statOraLstURLOpeLog);
    SAFE_STRNCPY(pDadosParametros->lstURLOpeLog,(char*)varOraLstURLOpeLog.arr);

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("URLs oper.logi.='%s'",pDadosParametros->lstURLOpeLog);

    if ( sqlca.sqlcode ) { retorno = RET_NAO_EXISTEM_DADOS_URL; }

    ULOG_END("CParamPedidopc::proCbuscarLstURLOperLogistico()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CParamPedidopc::proCbuscarLstURLOperLogistico()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
