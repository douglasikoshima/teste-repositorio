#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../include/LinhaConvergente.h"
#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

CLinhaConvergente::CLinhaConvergente()
{
}

CLinhaConvergente::~CLinhaConvergente()
{
}


/*******************************************************************************************************/
void CLinhaConvergente::buscaLinhasPorNumero(char *pszNrTelefone, XMLGen *xml_g)
{
	ULOG_START("CLinhaConvergente::buscaLinhasPorNumero()");

	unsigned int iCont=0;
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTRO + LEN_EOS];
		VARCHAR oszNrTelefone[LEN_IDPESSOA + LEN_EOS];

		struct {
			VARCHAR oszNrLinha[LEN_NRLINHA + LEN_EOS];
			VARCHAR oszDsTipoLinha[LEN_DSTIPOLINHA + LEN_EOS];
			VARCHAR oszNmPessoa[LEN_NMPESSOA + LEN_EOS];
			VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA + LEN_EOS];
		} stBuscaLinhasPorNumero;

		struct {
			short oiNrLinha;
			short oiDsTipoLinha;
			short oiNmPessoa;
			short oiIdLinhaTelefonica;
		} stBuscaLinhasPorNumeroIndicator;
	EXEC SQL END DECLARE SECTION;

	ULOG("pszNrTelefone[%s]", pszNrTelefone);

	if (pszNrTelefone && strlen(pszNrTelefone) > 5) {
		if (pszNrTelefone[0] == '0') {
			STRNCPY_TO_ORA(oszCdAreaRegistro, pszNrTelefone, 1);
			STRCPY_TO_ORA(oszNrTelefone, (pszNrTelefone+1));
		} else {
			STRNCPY_TO_ORA(oszCdAreaRegistro, pszNrTelefone, 2);
			STRCPY_TO_ORA(oszNrTelefone, (pszNrTelefone+2));
		}
	} else {
		ULOG("Invalid pszNrTelefone!");
		return;
	}

	try
	{
		EXEC SQL WHENEVER SQLERROR GOTO GotoError;
		EXEC SQL WHENEVER NOT FOUND DO break;

		EXEC SQL
        	DECLARE
        		CursorBuscaLinhasPorNumero CURSOR FOR
        		SELECT  (aar.cdarearegistro || llb.nrlinha) AS nrLinha,
        		        atl.dstipolinha,
        		        cp.nmpessoa,
        		        llt.idlinhatelefonica
        		FROM  LINHA.LINHABASE llb,
        		      APOIO.AREAREGISTRO aar,
        		      LINHA.LINHATELEFONICA llt,
        		      APOIO.TIPOLINHA atl,
        		      CUSTOMER.PESSOALINHA cpl,
        		      customer.pessoadepara cpd,
        		      customer.pessoa cp
        		WHERE llb.idarearegistro = aar.idarearegistro
        		AND llb.idlinhabase = llt.idlinhabase
        		AND llt.idtipolinha = atl.idtipolinha
        		AND cpl.idlinhatelefonica = llt.idlinhatelefonica
        		AND cpl.idpessoadepara = cpd.idpessoadepara
        		AND cpl.idtiporelacionamento = '2'
        		AND cpd.idpessoa = cp.idpessoa
        		AND aar.cdarearegistro = TO_NUMBER(:oszCdAreaRegistro)
        		AND llb.nrlinha = TO_NUMBER(:oszNrTelefone);

		EXEC SQL OPEN CursorBuscaLinhasPorNumero;
		ULOG("OpenCursor.sqlca.sqlcode(%d)", sqlca.sqlcode);

		xml_g->createTag("ns1:ConvergenciaVO");
        xml_g->addProp(XML_OUT_PROP_XMLNS":ns1", XML_OUT_PROP_XMLNS_VALUE);
        xml_g->addProp(XML_OUT_PROP_XMLNS":xsi", "http://www.w3.org/2001/XMLSchema-instance");
        xml_g->addProp("xsi:schemaLocation", XML_OUT_PROP_XMLNS_VALUE" ConvergenciaVO.xsd");

        for(iCont=0;;iCont++) {
            ULOG("iCont(%u)", iCont);

            memset(&stBuscaLinhasPorNumero, 0x00, sizeof(stBuscaLinhasPorNumero));

            EXEC SQL FETCH CursorBuscaLinhasPorNumero INTO :stBuscaLinhasPorNumero:stBuscaLinhasPorNumeroIndicator;
            ULOG("Fetch.sqlca.sqlcode(%d)", sqlca.sqlcode);

            ULOG("(char *)&stBuscaLinhasPorNumero.oszNrLinha.arr[%s] stBuscaLinhasPorNumeroIndicator.oiNrLinha(%d)", (char *)&stBuscaLinhasPorNumero.oszNrLinha.arr, stBuscaLinhasPorNumeroIndicator.oiNrLinha);
            ULOG("(char *)&stBuscaLinhasPorNumero.oszDsTipoLinha.arr[%s] stBuscaLinhasPorNumeroIndicator.oiDsTipoLinha(%d)", (char *)&stBuscaLinhasPorNumero.oszDsTipoLinha.arr, stBuscaLinhasPorNumeroIndicator.oiDsTipoLinha);
            ULOG("(char *)&stBuscaLinhasPorNumero.oszNmPessoa.arr[%s] stBuscaLinhasPorNumeroIndicator.oiNmPessoa(%d)", (char *)&stBuscaLinhasPorNumero.oszNmPessoa.arr, stBuscaLinhasPorNumeroIndicator.oiNmPessoa);
            ULOG("(char *)&stBuscaLinhasPorNumero.oszIdLinhaTelefonica.arr[%s] stBuscaLinhasPorNumeroIndicator.oiIdLinhaTelefonica(%d)", (char *)&stBuscaLinhasPorNumero.oszIdLinhaTelefonica.arr, stBuscaLinhasPorNumeroIndicator.oiIdLinhaTelefonica);

            xml_g->createTag("ns1:Linha");
                xml_g->addItem("ns1:nrLinha", (char *)&stBuscaLinhasPorNumero.oszNrLinha.arr);
                xml_g->addItem("ns1:dsTipoLinha", (char *)&stBuscaLinhasPorNumero.oszDsTipoLinha.arr);
                xml_g->addItem("ns1:nmPessoa", (char *)&stBuscaLinhasPorNumero.oszNmPessoa.arr);
                xml_g->addItem("ns1:idLinhaTelefonica", (char *)&stBuscaLinhasPorNumero.oszIdLinhaTelefonica.arr);
            xml_g->closeTag();
        }

        xml_g->closeTag();

        EXEC SQL CLOSE CursorBuscaLinhasPorNumero;
        ULOG("CloseCursor.sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("CLinhaConvergente::buscaLinhasPorNumero()");

    	return;
    }
    catch(...)
    {
        throw;
    }

GotoError:
	ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	ULOG_END("CLinhaConvergente::buscaLinhasPorNumero()");
	throw TuxBasicOraException(sqlca.sqlcode);
}

