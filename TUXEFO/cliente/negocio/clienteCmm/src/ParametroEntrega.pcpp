#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "../include/ParametroEntrega.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/*******************************************************************************************************/
CParametroEntregapc::CParametroEntregapc(void)
{
    ULOG_START("CParametroEntregapc::CParametroEntregapc");
    memset(&tParametroEntregaInput, 0x00, sizeof(TParametroEntrega));
    ULOG_END("CParametroEntregapc::CParametroEntregapc");
}

/*******************************************************************************************************/
CParametroEntregapc::~CParametroEntregapc(void)
{
    ULOG("CParametroEntregapc::~CParametroEntregapc");
}

/*******************************************************************************************************/
void CParametroEntregapc::clearStruct(void)
{
    memset(&tParametroEntregaInput, 0x00, sizeof(TParametroEntrega));
}

/*******************************************************************************************************/
void CParametroEntregapc::setIdSistemaOrigem(char *pszIdSistemaOrigem)
{
    strcpy(tParametroEntregaInput.szIdSistemaOrigem, pszIdSistemaOrigem);
}

/*******************************************************************************************************/
void CParametroEntregapc::setNmSistemaOrigem(char *pszNmSistemaOrigem)
{
    strcpy(tParametroEntregaInput.szNmSistemaOrigem, pszNmSistemaOrigem);
}

/*******************************************************************************************************/
void CParametroEntregapc::setUFRegiao(char *pszUFRegiao)
{
    strcpy(tParametroEntregaInput.szUFRegiao, pszUFRegiao);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaPicking(char *pszQtDiaPicking)
{
    strcpy(tParametroEntregaInput.szQtDiaPicking, pszQtDiaPicking);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaFaturamento(char *pszQtDiaFaturamento)
{
    strcpy(tParametroEntregaInput.szQtDiaFaturamento, pszQtDiaFaturamento);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaEntrega(char *pszQtDiaEntrega)
{
    strcpy(tParametroEntregaInput.szQtDiaEntrega, pszQtDiaEntrega);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaFornecimento(char *pszQtDiaFornecimento)
{
    strcpy(tParametroEntregaInput.szQtDiaFornecimento, pszQtDiaFornecimento);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaRegistroSaida(char *pszQtDiaRegistroSaida)
{
    strcpy(tParametroEntregaInput.szQtDiaRegistroSaida, pszQtDiaRegistroSaida);
}

/*******************************************************************************************************/
void CParametroEntregapc::setQtDiaConfirmaPicking(char *pszQtDiaConfirmaPicking)
{
    strcpy(tParametroEntregaInput.szQtDiaConfirmaPicking, pszQtDiaConfirmaPicking);
}

/*******************************************************************************************************/
char *CParametroEntregapc::getUFRegiao(void)
{
    static char szAux[LEN_UFREGIAO + LEN_EOS];

    strcpy(szAux, tParametroEntregaInput.szUFRegiao);
    return szAux;
}

/*******************************************************************************************************/
char *CParametroEntregapc::getIdSistemaOrigem(void)
{
    static char szAux[LEN_NM_SISTEMA_ORIGEM + LEN_EOS];

    strcpy(szAux, tParametroEntregaInput.szIdSistemaOrigem);
    return szAux;
}

/*******************************************************************************************************/
void CParametroEntregapc::controleAlocacao(void)
{
    m_iQtdElementosAlocados=QTD_ELEMENTOS;
    m_iQtdElementosObtidos=0;

    ULOG("m_iQtdElementosAlocados(%d)", m_iQtdElementosAlocados);
    ULOG("sizeof(TParametroEntrega)(%d)", sizeof(TParametroEntrega));

    if((m_ptParametroEntrega = (TParametroEntrega *) malloc((sizeof(TParametroEntrega) * (m_iQtdElementosAlocados)))) == NULL ) {
        throw new TuxBasicSvcException("13E0001", "Erro alocando memoria!");
    }
    ULOG("Memoria alocada m_ptParametroEntrega (%p)", m_ptParametroEntrega);
}

/*******************************************************************************************************/
TParametroEntrega *CParametroEntregapc::buscaParametroEntrega(int iBusca)
{
    static int iFlag=0;
    static TParametroEntrega tParametroEntregaAux;
    static TParametroEntrega *ptParametroEntregaAux;
    static int iCount=0;

    // ULOG_START("CParametroEntregapc::buscaParametroEntrega");

    if(iFlag == 0) {
        this->controleAlocacao();


        if(iBusca == ID_BUSCA)
            this->proCBuscaParametroEntrega();
        else if(iBusca == ID_LISTA_UF)
            this->proCBuscaUF();
        else if(iBusca == ID_LISTA_SO)
            this->proCBuscaSistemaOrigem();
        else
            throw new TuxBasicSvcException("13E0000", "Erro buscaParametroEntrega");

        ptParametroEntregaAux=m_ptParametroEntrega;
        iFlag=1;
    }

    // ULOG("m_ptParametroEntrega(%p)ptParametroEntregaAux(%p)", m_ptParametroEntrega, ptParametroEntregaAux);
    // ULOG("m_iQtdElementosAlocados(%d)m_iQtdElementosObtidos(%d)iCount(%d)", m_iQtdElementosAlocados, m_iQtdElementosObtidos, iCount);

    if(iCount < m_iQtdElementosObtidos)
    {
        memcpy(&tParametroEntregaAux, ptParametroEntregaAux, sizeof(TParametroEntrega));
        iCount++;
        ptParametroEntregaAux++;

        // ULOG_END("CParametroEntregapc::buscaParametroEntrega <NOT NULL>");
        return &tParametroEntregaAux;
    }
    else
    {
        // ULOG("Desalocando memoria ->m_ptParametroEntrega(%p)", m_ptParametroEntrega);
        free(m_ptParametroEntrega);
        m_ptParametroEntrega=NULL;
        iFlag=0;
        iCount=0;
        m_iQtdElementosObtidos=0;

        // ULOG_END("CParametroEntregapc::buscaParametroEntrega <NULL>");
        return NULL;
    }
}

/*******************************************************************************************************/
void CParametroEntregapc::insereParametroEntrega(void)
{
    ULOG_START("CParametroEntregapc::insereParametroEntrega");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszUFRegiao[LEN_UFREGIAO];
        VARCHAR oszQtDiaPicking[LEN_QTDIAPICKING];
        VARCHAR oszQtDiaFaturamento[LEN_QTDIAFATURAMENTO];
        VARCHAR oszQtDiaEntrega[LEN_QTDIAENTREGA];
        VARCHAR oszQtDiaFornecimento[LEN_QTDIAFORNECIMENTO];
        VARCHAR oszQtDiaRegistroSaida[LEN_QTDIAREGISTROSAIDA];
        VARCHAR oszQtDiaConfirmaPicking[LEN_QTDIACONFIRMAPICKING];
    EXEC SQL END DECLARE SECTION;

    STRCPY_TO_ORA(oszIdSistemaOrigem,       tParametroEntregaInput.szIdSistemaOrigem);
    STRCPY_TO_ORA(oszUFRegiao,              tParametroEntregaInput.szUFRegiao);
    STRCPY_TO_ORA(oszQtDiaPicking,          tParametroEntregaInput.szQtDiaPicking);
    STRCPY_TO_ORA(oszQtDiaFaturamento,      tParametroEntregaInput.szQtDiaFaturamento);
    STRCPY_TO_ORA(oszQtDiaEntrega,          tParametroEntregaInput.szQtDiaEntrega);
    STRCPY_TO_ORA(oszQtDiaFornecimento,     tParametroEntregaInput.szQtDiaFornecimento);
    STRCPY_TO_ORA(oszQtDiaRegistroSaida,    tParametroEntregaInput.szQtDiaRegistroSaida);
    STRCPY_TO_ORA(oszQtDiaConfirmaPicking,  tParametroEntregaInput.szQtDiaConfirmaPicking);

    EXEC SQL WHENEVER SQLERROR  goto erro;

    EXEC SQL
        INSERT INTO retencao.parametroentrega
        (
            idsistemaorigem,
            ufregiao,
            qtdiapicking,
            qtdiafaturamento,
            qtdiaentrega,
            qtdiafornecimento,
            qtdiaregistrosaida,
            qtdiaconfirmapicking
        )
        VALUES
        (
            :oszIdSistemaOrigem,
            :oszUFRegiao,
            :oszQtDiaPicking,
            :oszQtDiaFaturamento,
            :oszQtDiaEntrega,
            :oszQtDiaFornecimento,
            :oszQtDiaRegistroSaida,
            :oszQtDiaConfirmaPicking
        );


    ULOGI("Finalizando insereParametroEntrega <OK>");
    ULOG_END("CParametroEntregapc::insereParametroEntrega <OK>");
    return;

    erro:
        ULOGE("Finalizando insereParametroEntrega <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************************************/
void CParametroEntregapc::atualizaParametroEntrega(void)
{
    ULOG_START("CParametroEntregapc::atualizaParametroEntrega");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszUFRegiao[LEN_UFREGIAO];
        VARCHAR oszQtDiaPicking[LEN_QTDIAPICKING];
        VARCHAR oszQtDiaFaturamento[LEN_QTDIAFATURAMENTO];
        VARCHAR oszQtDiaEntrega[LEN_QTDIAENTREGA];
        VARCHAR oszQtDiaFornecimento[LEN_QTDIAFORNECIMENTO];
        VARCHAR oszQtDiaRegistroSaida[LEN_QTDIAREGISTROSAIDA];
        VARCHAR oszQtDiaConfirmaPicking[LEN_QTDIACONFIRMAPICKING];
    EXEC SQL END DECLARE SECTION;

    STRCPY_TO_ORA(oszIdSistemaOrigem,       tParametroEntregaInput.szIdSistemaOrigem);
    STRCPY_TO_ORA(oszUFRegiao,              tParametroEntregaInput.szUFRegiao);
    STRCPY_TO_ORA(oszQtDiaPicking,          tParametroEntregaInput.szQtDiaPicking);
    STRCPY_TO_ORA(oszQtDiaFaturamento,      tParametroEntregaInput.szQtDiaFaturamento);
    STRCPY_TO_ORA(oszQtDiaEntrega,          tParametroEntregaInput.szQtDiaEntrega);
    STRCPY_TO_ORA(oszQtDiaFornecimento,     tParametroEntregaInput.szQtDiaFornecimento);
    STRCPY_TO_ORA(oszQtDiaRegistroSaida,    tParametroEntregaInput.szQtDiaRegistroSaida);
    STRCPY_TO_ORA(oszQtDiaConfirmaPicking,  tParametroEntregaInput.szQtDiaConfirmaPicking);

    EXEC SQL WHENEVER SQLERROR  goto erro;

    EXEC SQL
        UPDATE retencao.parametroentrega
            SET
                idsistemaorigem = :oszIdSistemaOrigem,
                ufregiao = :oszUFRegiao,
                qtdiapicking = :oszQtDiaPicking,
                qtdiafaturamento = :oszQtDiaFaturamento,
                qtdiaentrega = :oszQtDiaEntrega,
                qtdiafornecimento = :oszQtDiaFornecimento,
                qtdiaregistrosaida = :oszQtDiaRegistroSaida,
                qtdiaconfirmapicking = :oszQtDiaConfirmaPicking
            WHERE
                ufregiao = :oszUFRegiao
            AND
                idsistemaorigem = :oszIdSistemaOrigem;


    ULOGI("Finalizando atualizaParametroEntrega <OK>");
    ULOG_END("CParametroEntregapc::atualizaParametroEntrega <OK>");
    return;

    erro:
        ULOGE("Finalizando atualizaParametroEntrega <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CParametroEntregapc::proCBuscaParametroEntrega(void)
{
    ULOG_START("CParametroEntregapc::proCBuscaParametroEntrega");

    TParametroEntrega *ptParametroEntregaAux;
    struct sqlca sqlca;
    int iCount;
    char szQueryAux[1000 + LEN_EOS];

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszNmSistemaOrigem[LEN_NM_SISTEMA_ORIGEM];
        VARCHAR oszUFRegiao[LEN_UFREGIAO];
        VARCHAR oszQtDiaPicking[LEN_QTDIAPICKING];
        VARCHAR oszQtDiaFaturamento[LEN_QTDIAFATURAMENTO];
        VARCHAR oszQtDiaEntrega[LEN_QTDIAENTREGA];
        VARCHAR oszQtDiaFornecimento[LEN_QTDIAFORNECIMENTO];
        VARCHAR oszQtDiaRegistroSaida[LEN_QTDIAREGISTROSAIDA];
        VARCHAR oszQtDiaConfirmaPicking[LEN_QTDIACONFIRMAPICKING];

        short oiIdSistemaOrigem = 0;
        short oiNmSistemaOrigem = 0;
        short oiUFRegiao = 0;
        short oiQtDiaPicking = 0;
        short oiQtDiaFaturamento = 0;
        short oiQtDiaEntrega = 0;
        short oiQtDiaFornecimento = 0;
        short oiQtDiaRegistroSaida = 0;
        short oiQtDiaConfirmaPicking = 0;

        char oszPesquisaFinal[5000];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND DO break;


    strcpy(oszPesquisaFinal,
        "SELECT "
            "rpe.idsistemaorigem, "
            "aso.nmsistemaorigem, "
            "rpe.ufregiao, "
            "rpe.qtdiafornecimento, "
            "rpe.qtdiapicking, "
            "rpe.qtdiaconfirmapicking, "
            "rpe.qtdiafaturamento, "
            "rpe.qtdiaregistrosaida, "
            "rpe.qtdiaentrega "
        "FROM "
            "apoio.sistemaorigem aso, "
            "retencao.parametroentrega rpe "
        "WHERE "
            "aso.idsistemaorigem = rpe.idsistemaorigem ");

    if(strlen(tParametroEntregaInput.szIdSistemaOrigem) > 0)
    {
        sprintf(szQueryAux,
            "AND "
                "aso.idsistemaorigem = %s ", tParametroEntregaInput.szIdSistemaOrigem);

        ULOG("1.szQueryAux[%s]", szQueryAux);
        strcat(oszPesquisaFinal, szQueryAux);
        ULOG("1.oszPesquisaFinal[%s]", oszPesquisaFinal);
    }
    if(strlen(tParametroEntregaInput.szUFRegiao) > 0)
    {
        sprintf(szQueryAux,
            "AND "
                "rpe.ufregiao = '%s' ", tParametroEntregaInput.szUFRegiao);

        ULOG("2.szQueryAux[%s]", szQueryAux);
        strcat(oszPesquisaFinal, szQueryAux);
        ULOG("2.oszPesquisaFinal[%s]", oszPesquisaFinal);
    }

    ULOGI("Pesquisa[%s]", oszPesquisaFinal);
    EXEC SQL PREPARE qPesquisa FROM :oszPesquisaFinal;
    EXEC SQL DECLARE cDinamic CURSOR FOR qPesquisa;


    EXEC SQL OPEN cDinamic;

    for(iCount=0, ptParametroEntregaAux=m_ptParametroEntrega;;iCount++, ptParametroEntregaAux++, m_iQtdElementosObtidos++)
    {

        EXEC SQL FETCH cDinamic INTO
            :oszIdSistemaOrigem:oiIdSistemaOrigem,
            :oszNmSistemaOrigem:oiNmSistemaOrigem,
            :oszUFRegiao:oiUFRegiao,
            :oszQtDiaFornecimento:oiQtDiaFornecimento,
            :oszQtDiaPicking:oiQtDiaPicking,
            :oszQtDiaConfirmaPicking:oiQtDiaConfirmaPicking,
            :oszQtDiaFaturamento:oiQtDiaFaturamento,
            :oszQtDiaRegistroSaida:oiQtDiaRegistroSaida,
            :oszQtDiaEntrega:oiQtDiaEntrega;

        // ULOG("m_iQtdElementosAlocados(%d)iCount(%d)", m_iQtdElementosAlocados, iCount);

        /* Verifica se precisa realocar espaco */
        if(iCount >= m_iQtdElementosAlocados) {
            m_iQtdElementosAlocados++;

            ULOG("Realocando memoria [%p]", m_ptParametroEntrega);
            m_ptParametroEntrega = (TParametroEntrega *) realloc(m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));
            ULOG("Memoria realocada [%p] bloco(%d)", m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));

            /* Atribui o novo endereco obtido e posiciona o ponteiro na posicao do ultimo registro obtido antes da realocacao */
            ptParametroEntregaAux = m_ptParametroEntrega+iCount;
        }

        /* copia as informacoes obtidas para o ponteiro */
        memset(ptParametroEntregaAux, 0x00, sizeof(TParametroEntrega));
        if(oiIdSistemaOrigem != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szIdSistemaOrigem, oszIdSistemaOrigem);
        }
        if(oiNmSistemaOrigem != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szNmSistemaOrigem, oszNmSistemaOrigem);
        }
        if(oiUFRegiao != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szUFRegiao, oszUFRegiao);
        }
        if(oiQtDiaFornecimento != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaFornecimento, oszQtDiaFornecimento);
        }
        if(oiQtDiaPicking != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaPicking, oszQtDiaPicking);
        }
        if(oiQtDiaConfirmaPicking != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaConfirmaPicking, oszQtDiaConfirmaPicking);
        }
        if(oiQtDiaFaturamento != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaFaturamento, oszQtDiaFaturamento);
        }
        if(oiQtDiaRegistroSaida != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaRegistroSaida, oszQtDiaRegistroSaida);
        }
        if(oiQtDiaEntrega != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szQtDiaEntrega, oszQtDiaEntrega);
        }

    }

    EXEC SQL CLOSE cDinamic;
    ULOG("iCount(%d) m_iQtdElementosAlocados(%d) m_iQtdElementosObtidos(%d)", iCount, m_iQtdElementosAlocados, m_iQtdElementosObtidos);


    ULOGI("Finalizando proCBuscaParametroEntrega");
    ULOG_END("CParametroEntregapc::proCBuscaParametroEntrega");
    return;

    erro:
        ULOGE("Finalizando proCBuscaParametroEntrega <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CParametroEntregapc::proCBuscaUF(void)
{
    ULOG_START("CParametroEntregapc::proCBuscaUF");

    TParametroEntrega *ptParametroEntregaAux;
    struct sqlca sqlca;
    int iCount;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszSgUF[LEN_SGUF];

        short oiSgUF = 0;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE cUF CURSOR FOR
        SELECT
            uf.sguf
        FROM
            apoio.uf uf
        WHERE
            uf.iduf > 0
        AND
            uf.sguf != 'spsp'
        AND
            uf.sguf IN ('AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO', 'SI')
        ORDER BY
            uf.sguf;


    EXEC SQL OPEN cUF;

    for(iCount=0, ptParametroEntregaAux=m_ptParametroEntrega;;iCount++, ptParametroEntregaAux++, m_iQtdElementosObtidos++)
    {
        EXEC SQL FETCH cUF INTO
            :oszSgUF:oiSgUF;

        // ULOG("m_iQtdElementosAlocados(%d)iCount(%d)", m_iQtdElementosAlocados, iCount);

        /* Verifica se precisa realocar espaco */
        if(iCount >= m_iQtdElementosAlocados) {
            m_iQtdElementosAlocados++;

            ULOG("Realocando memoria [%p]", m_ptParametroEntrega);
            m_ptParametroEntrega = (TParametroEntrega *) realloc(m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));
            ULOG("Memoria realocada [%p] bloco(%d)", m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));

            /* Atribui o novo endereco obtido e posiciona o ponteiro na posicao do ultimo registro obtido antes da realocacao */
            ptParametroEntregaAux = m_ptParametroEntrega+iCount;
        }

        /* copia as informacoes obtidas para o ponteiro */
        memset(ptParametroEntregaAux, 0x00, sizeof(TParametroEntrega));
        if(oiSgUF != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szSgUF, oszSgUF);
        }

    }

    EXEC SQL CLOSE cUF;
    ULOG("iCount(%d) m_iQtdElementosAlocados(%d) m_iQtdElementosObtidos(%d)", iCount, m_iQtdElementosAlocados, m_iQtdElementosObtidos);

    ULOGI("Finalizando proCBuscaUF");
    ULOG_END("CParametroEntregapc::proCBuscaUF");
    return;

    erro:
        ULOGE("Finalizando proCBuscaUF <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CParametroEntregapc::proCBuscaSistemaOrigem(void)
{
    ULOG_START("CParametroEntregapc::proCBuscaSistemaOrigem");

    TParametroEntrega *ptParametroEntregaAux;
    struct sqlca sqlca;
    int iCount;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszNmSistemaOrigem[LEN_NM_SISTEMA_ORIGEM];

        short oiIdSistemaOrigem = 0;
        short oiNmSistemaOrigem = 0;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE cSO CURSOR FOR
        SELECT
            aso.idsistemaorigem,
            aso.nmsistemaorigem
        FROM
            apoio.sistemaorigem aso
        WHERE
            aso.intracking = 1
        ORDER BY
            aso.nmsistemaorigem;


    EXEC SQL OPEN cSO;

    for(iCount=0, ptParametroEntregaAux=m_ptParametroEntrega;;iCount++, ptParametroEntregaAux++, m_iQtdElementosObtidos++)
    {
        EXEC SQL FETCH cSO INTO
            :oszIdSistemaOrigem:oiIdSistemaOrigem,
            :oszNmSistemaOrigem:oiNmSistemaOrigem;

        // ULOG("m_iQtdElementosAlocados(%d)iCount(%d)", m_iQtdElementosAlocados, iCount);

        /* Verifica se precisa realocar espaco */
        if(iCount >= m_iQtdElementosAlocados) {
            m_iQtdElementosAlocados++;

            ULOG("Realocando memoria [%p]", m_ptParametroEntrega);
            m_ptParametroEntrega = (TParametroEntrega *) realloc(m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));
            ULOG("Memoria realocada [%p] bloco(%d)", m_ptParametroEntrega, sizeof(TParametroEntrega) * (m_iQtdElementosAlocados));

            /* Atribui o novo endereco obtido e posiciona o ponteiro na posicao do ultimo registro obtido antes da realocacao */
            ptParametroEntregaAux = m_ptParametroEntrega+iCount;
        }

        /* copia as informacoes obtidas para o ponteiro */
        memset(ptParametroEntregaAux, 0x00, sizeof(TParametroEntrega));
        if(oiIdSistemaOrigem != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szIdSistemaOrigem, oszIdSistemaOrigem);
        }
        if(oiNmSistemaOrigem != -1) {
            STRCPY_FROM_ORA(ptParametroEntregaAux->szNmSistemaOrigem, oszNmSistemaOrigem);
        }

    }

    EXEC SQL CLOSE cSO;
    ULOG("iCount(%d) m_iQtdElementosAlocados(%d) m_iQtdElementosObtidos(%d)", iCount, m_iQtdElementosAlocados, m_iQtdElementosObtidos);

    ULOGI("Finalizando proCBuscaSistemaOrigem");
    ULOG_END("CParametroEntregapc::proCBuscaSistemaOrigem");
    return;

    erro:
        ULOGE("Finalizando proCBuscaSistemaOrigem <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
