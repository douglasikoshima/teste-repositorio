// BuscaPessoaCorrespondencia.pcpp: implementation for the 
// CBuscaPessoaCorrespondencia class.
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>

EXEC SQL INCLUDE "../include/BuscaPessoaCorrespondencia.h";

//
// Construtor e Destrutor
CBuscaPessoaCorrespondencia::CBuscaPessoaCorrespondencia() {
	iiIdLinha = -1;
	iiIdConta = -1;
	icNmCliente = -1; 
	icNrDocumento = -1;
	icNrEndereco = -1;
	icDsEndereco = -1;
	icDsComplemento = -1;
	icNrCEP = -1;
	icDsBairro = -1;
	icDsCidade = -1;
}

CBuscaPessoaCorrespondencia::~CBuscaPessoaCorrespondencia() {
}

//
// Metodos getter
int CBuscaPessoaCorrespondencia::getIdPessoa(){
	return iIdPessoa;
}

int* CBuscaPessoaCorrespondencia::getIdLinha(){
	if (iiIdLinha < 0)
		return NULL;
	else
		return &iIdLinha;
}

int* CBuscaPessoaCorrespondencia::getIdConta(){
	if (iiIdConta < 0)
		return NULL;
	else
		return &iIdConta;
}

char* CBuscaPessoaCorrespondencia::getNmCliente(){
	if (icNmCliente < 0)
		return NULL;
	else
		return cNmCliente;
}

char* CBuscaPessoaCorrespondencia::getNrDocumento(){
	if (icNrDocumento < 0)
		return NULL;
	else
		return cNrDocumento;
}

char* CBuscaPessoaCorrespondencia::getDsTipoEndereco(){
	return cDsTipoEndereco;
}

char* CBuscaPessoaCorrespondencia::getDsEndereco(){
	if (icDsEndereco < 0)
		return NULL;
	else
		return cDsEndereco;
}

char* CBuscaPessoaCorrespondencia::getNrEndereco(){
	if (icNrEndereco < 0)
		return NULL;
	else
		return cNrEndereco;
}

char* CBuscaPessoaCorrespondencia::getDsComplemento(){
	if (icDsComplemento < 0)
		return NULL;
	else
		return cDsComplemento;
}

char* CBuscaPessoaCorrespondencia::getDsBairro(){
	if (icDsBairro < 0)
		return NULL;
	else
		return cDsBairro;
}

char* CBuscaPessoaCorrespondencia::getDsCidade(){
	if (icDsCidade < 0)
		return NULL;
	else
		return cDsCidade;
}

char* CBuscaPessoaCorrespondencia::getNrCEP(){
	if (icNrCEP < 0)
		return NULL;
	else
		return cNrCEP;
}

int CBuscaPessoaCorrespondencia::getIdUF(){
	return iIdUF;
}

char* CBuscaPessoaCorrespondencia::getSgUF(){
	return cSgUF;
}

char* CBuscaPessoaCorrespondencia::getNmUF(){
	return cNmUF;
}

int CBuscaPessoaCorrespondencia::getIdPais(){
	return iIdPais;
}

char* CBuscaPessoaCorrespondencia::getSgPais(){
	return cSgPais;
}

char* CBuscaPessoaCorrespondencia::getNmPais(){
	return cNmPais;
}
char* CBuscaPessoaCorrespondencia::getTipoDocumento(){
	return cTipoDocumento;
}

//
// Metodos setter
void CBuscaPessoaCorrespondencia::setIdPessoa(int value){
	iIdPessoa = value;
}

void CBuscaPessoaCorrespondencia::setIdLinha(int* value){
	if (value == NULL)
		iiIdLinha = -1;
	else {
		iIdLinha = *value;
		iiIdLinha = 0;
	}
}

void CBuscaPessoaCorrespondencia::setIdConta(int* value){
	if (value == NULL)
		iiIdConta = -1;
	else {
		iIdConta = *value;
		iiIdConta = 0;
	}
}

void CBuscaPessoaCorrespondencia::setNmCliente(char* value){
	if(value == NULL)
		icNmCliente = -1;
	else {
		strncpy(cNmCliente, value, 255);
		cNmCliente[255]='\0';
		icNmCliente= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setNrDocumento(char* value){
	if(value == NULL)
		icNrDocumento = -1;
	else {
		strncpy(cNrDocumento, value, 255);
		cNrDocumento[255]='\0';
		icNrDocumento = strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setDsTipoEndereco(char* value){
	strncpy(cDsTipoEndereco, value, 255);
	cDsTipoEndereco[255]='\0';
}

void CBuscaPessoaCorrespondencia::setDsEndereco(char* value){
	if(value == NULL)
		icDsEndereco = -1;
	else {
		strncpy(cDsEndereco, value, 255);
		cDsEndereco[255]='\0';
		icDsEndereco= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setNrEndereco(char* value){
	if(value == NULL)
		icNrEndereco = -1;
	else {
		strncpy(cNrEndereco, value, 255);
		cNrEndereco[255]='\0';
		icNrEndereco= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setDsComplemento(char* value){
	if(value == NULL)
		icDsComplemento = -1;
	else {
		strncpy(cDsComplemento, value, 255);
		cDsComplemento[255]='\0';
		icDsComplemento= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setDsBairro(char* value){
	if(value == NULL)
		icDsBairro = -1;
	else {
		strncpy(cDsBairro, value, 255);
		cDsBairro[255]='\0';
		icDsBairro= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setDsCidade(char* value){
	if(value == NULL)
		icDsCidade = -1;
	else {
		strncpy(cDsCidade, value, 255);
		cDsCidade[255]='\0';
		icDsCidade= strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setNrCEP(char* value){
	if (value == NULL)
		icNrCEP = -1;
	else {
		strncpy(cNrCEP, value, 255);
		cNrCEP[255]='\0';
		icNrCEP = strlen(value);
	}
}

void CBuscaPessoaCorrespondencia::setIdUF(int value){
	iIdUF = value;
}

void CBuscaPessoaCorrespondencia::setSgUF(char* value){
	strncpy(cSgUF, value, 255);
	cSgUF[255]='\0';
}

void CBuscaPessoaCorrespondencia::setNmUF(char* value){
	strncpy(cNmUF, value, 255);
	cNmUF[255]='\0';
}

void CBuscaPessoaCorrespondencia::setIdPais(int value){
	iIdPais = value;
}

void CBuscaPessoaCorrespondencia::setSgPais(char* value){
	strncpy(cSgPais, value, 255);
	cSgPais[255]='\0';
}

void CBuscaPessoaCorrespondencia::setNmPais(char* value){
	strncpy(cNmPais, value, 255);
	cNmPais[255]='\0';
}
void CBuscaPessoaCorrespondencia::setTipoDocumento(char* value){
	strncpy(cTipoDocumento, value, 255);
	cTipoDocumento[255]='\0';
}

//
// Métodos de banco de dados
CBuscaPessoaCorrespondencia* CBuscaPessoaCorrespondencia::buscaPorLinha(char* pcNumLin, int* iNroObjetos)
{

    ULOG_START("CBuscaPessoaCorrespondencia::buscaPorLinha()");
    
	CBuscaPessoaCorrespondencia* poListaBusca = NULL;
	
	struct sqlca sqlca;
	int iNroObjLocal = 1;
	char cDDD[3];
	char cFone[16];

	EXEC SQL BEGIN DECLARE SECTION;
	int iDDD;
	long lFone;

	int iIdPessoa;
	int iIdLinha;
	char cNmCliente[256];
	char cNrDocumento[256];
	char cDsTipoEndereco[256];
	char cDsEndereco[256];
	char cNrEndereco[256];
	char cDsComplemento[256];
	char cDsBairro[256];
	char cDsCidade[256];
	char cNrCEP[256];
	int iIdUF;
	char cSgUF[256];
	char cNmUF[256];
	int iIdPais;
	char cSgPais[256];
	char cNmPais[256];
	char cTipoDocumento[256];

	// Variáveis indicativas do oracle
	short icNmCliente;
	short icNrDocumento;
	short icNrEndereco;
	short icDsEndereco;
	short icDsComplemento;
	short icDsBairro;
	short icDsCidade;
	short icNrCEP;

	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLin;

	// Coloca os valores da linha
	/*
	strncpy(cDDD, pcNumLin, 2);
	cDDD[2]='\0';
   */
   sprintf( cDDD, "%.2s", pcNumLin );
	iDDD = atoi(cDDD);
   
	/*
	strncpy(cFone, pcNumLin+2, 8);
	cFone[8]='\0';
   */
   
   sprintf( cFone, "%s", (char*)&pcNumLin[2] );
	lFone = atol(cFone);

	// Declara e abre o cursor
	EXEC SQL DECLARE pessoasLinha CURSOR FOR
	SELECT distinct
	 IdPessoa,
	 IdLinhaTelefonica,
	 NmPessoa,
	 nrDocumento,
	 DsTipoEndereco,
	 Logradouro,
	 NrEndereco,
	 DsEnderecoComplemento,
	 nmBairro,
	 NmMunicipio,
	 NrCEP,
	 idUF,
	 sguf,
	 nmuf,
	 idPais,
	 sgPais,
	 nmPais,
     dstipodocumento
	FROM
	 Correspondencia.CorrPessDoctoLinV01
	WHERE
	 nrlinha = :lFone 
    AND
	 cdarearegistro = :iDDD;	 

	EXEC SQL OPEN pessoasLinha;

	// Corre os dados e monta a lista de objetos
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;; iNroObjLocal++) {
		
		EXEC SQL FETCH pessoasLinha INTO
		 :iIdPessoa,
	     :iIdLinha,
		 :cNmCliente:icNmCliente,
		 :cNrDocumento:icNrDocumento,
		 :cDsTipoEndereco,
		 :cDsEndereco:icDsEndereco,
		 :cNrEndereco:icNrEndereco,
		 :cDsComplemento:icDsComplemento,
		 :cDsBairro:icDsBairro,
		 :cDsCidade:icDsCidade,
		 :cNrCEP:icNrCEP,
		 :iIdUF,
		 :cSgUF,
		 :cNmUF,
		 :iIdPais,
		 :cSgPais,
		 :cNmPais,
         :cTipoDocumento;

		// Aloca memória para o objeto atual.
		if ((poListaBusca = (CBuscaPessoaCorrespondencia*) realloc((void *)poListaBusca, (sizeof(CBuscaPessoaCorrespondencia) * iNroObjLocal))) != NULL) {
			
			// Coloca os dados do objeto atual.
			poListaBusca[iNroObjLocal-1].setIdPessoa(iIdPessoa);
			poListaBusca[iNroObjLocal-1].setIdLinha(&iIdLinha);
			poListaBusca[iNroObjLocal-1].setNmCliente(icNmCliente < 0 ? NULL : cNmCliente);
			poListaBusca[iNroObjLocal-1].setNrDocumento(icNrDocumento < 0 ? NULL : cNrDocumento);
			poListaBusca[iNroObjLocal-1].setDsTipoEndereco(cDsTipoEndereco);
			poListaBusca[iNroObjLocal-1].setNrEndereco(icNrEndereco < 0 ? NULL : cNrEndereco);
			poListaBusca[iNroObjLocal-1].setDsEndereco(icDsEndereco < 0 ? NULL : cDsEndereco);
			poListaBusca[iNroObjLocal-1].setDsComplemento(icDsComplemento < 0 ? NULL : cDsComplemento);
			poListaBusca[iNroObjLocal-1].setDsBairro(icDsBairro < 0 ? NULL : cDsBairro);
			poListaBusca[iNroObjLocal-1].setDsCidade(icDsCidade < 0 ? NULL : cDsCidade);
			if (icNrCEP >= 0) {
				poListaBusca[iNroObjLocal-1].setNrCEP(cNrCEP);
			} else
				poListaBusca[iNroObjLocal-1].setNrCEP(NULL);
			poListaBusca[iNroObjLocal-1].setIdUF(iIdUF);
			poListaBusca[iNroObjLocal-1].setSgUF(cSgUF);
			poListaBusca[iNroObjLocal-1].setNmUF(cNmUF);
			poListaBusca[iNroObjLocal-1].setIdPais(iIdPais);
			poListaBusca[iNroObjLocal-1].setSgPais(cSgPais);
			poListaBusca[iNroObjLocal-1].setNmPais(cNmPais);
			poListaBusca[iNroObjLocal-1].setTipoDocumento(cTipoDocumento);

		} else {
			if (poListaBusca)
				free(poListaBusca);
			ULOG_END("CBuscaPessoaCorrespondencia::buscaPorLinha()");
			throw new TuxBasicSvcException(NRO_ERR_MEMORIA,MSG_ERR_MEMORIA);
		}
	}

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CBuscaPessoaCorrespondencia::buscaPorLinha()");
	return poListaBusca;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLin:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CBuscaPessoaCorrespondencia::buscaPorLinha()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

CBuscaPessoaCorrespondencia* CBuscaPessoaCorrespondencia::buscaPorConta(char* pcNumCont, int* iNroObjetos)
{
    ULOG_START("CBuscaPessoaCorrespondencia::buscaPorConta()");
	CBuscaPessoaCorrespondencia* poListaBusca = NULL;
	
	struct sqlca sqlca;
	int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
	char cNrConta[256];

	int iIdPessoa;
	int iIdConta;
	char cNmCliente[256];
	char cNrDocumento[256];
	char cDsTipoEndereco[256];
	char cDsEndereco[256];
	char cNrEndereco[256];
	char cDsComplemento[256];
	char cDsBairro[256];
	char cDsCidade[256];
	char cNrCEP[256];
	int iIdUF;
	char cSgUF[256];
	char cNmUF[256];
	int iIdPais;
	char cSgPais[256];
	char cNmPais[256];
	char cTipoDocumento[256];

	// Variáveis indicativas do oracle
	short icNmCliente;
	short icNrDocumento;
	short icNrEndereco;
	short icDsEndereco;
	short icDsComplemento;
	short icDsBairro;
	short icDsCidade;
	short icNrCEP;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLin;

	// Coloca os valores da conta
	sprintf(cNrConta,"%s",pcNumCont);

	// Declara e abre o cursor
	EXEC SQL DECLARE pessoasConta CURSOR FOR
	SELECT
	 IdPessoa,
	 IdConta,
	 NmPessoa,
	 nrDocumento,
	 DsTipoEndereco,
	 Logradouro,
	 NrEndereco,
	 DsEnderecoComplemento,
	 nmBairro,
	 NmMunicipio,
	 NrCEP,
	 idUF,
	 sguf,
	 nmuf,
	 idPais,
	 sgPais,
	 nmPais,
     dstipodocumento
	FROM
	 Correspondencia.CorrPessDoctoContV01
	WHERE
	 CdConta = :cNrConta;

	EXEC SQL OPEN pessoasConta;

	// Corre os dados e monta a lista de objetos
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;; iNroObjLocal++) {
		
		EXEC SQL FETCH pessoasConta INTO
		 :iIdPessoa,
	     :iIdConta,
		 :cNmCliente:icNmCliente,
		 :cNrDocumento:icNrDocumento,
		 :cDsTipoEndereco,
		 :cDsEndereco:icDsEndereco,
		 :cNrEndereco:icNrEndereco,
		 :cDsComplemento:icDsComplemento,
		 :cDsBairro:icDsBairro,
		 :cDsCidade:icDsCidade,
		 :cNrCEP:icNrCEP,
		 :iIdUF,
		 :cSgUF,
		 :cNmUF,
		 :iIdPais,
		 :cSgPais,
		 :cNmPais,
         :cTipoDocumento;

		// Aloca memória para o objeto atual.
		if ((poListaBusca = (CBuscaPessoaCorrespondencia*) realloc((void *)poListaBusca, (sizeof(CBuscaPessoaCorrespondencia) * iNroObjLocal))) != NULL) {
			
			// Coloca os dados do objeto atual.
			poListaBusca[iNroObjLocal-1].setIdPessoa(iIdPessoa);
			poListaBusca[iNroObjLocal-1].setIdConta(&iIdConta);
			poListaBusca[iNroObjLocal-1].setNmCliente(icNmCliente < 0 ? NULL : cNmCliente);
			poListaBusca[iNroObjLocal-1].setNrDocumento(icNrDocumento < 0 ? NULL : cNrDocumento);
			poListaBusca[iNroObjLocal-1].setDsTipoEndereco(cDsTipoEndereco);
			poListaBusca[iNroObjLocal-1].setNrEndereco(icNrEndereco < 0 ? NULL : cNrEndereco);
			poListaBusca[iNroObjLocal-1].setDsEndereco(icDsEndereco < 0 ? NULL : cDsEndereco);
			poListaBusca[iNroObjLocal-1].setDsComplemento(icDsComplemento < 0 ? NULL : cDsComplemento);
			poListaBusca[iNroObjLocal-1].setDsBairro(icDsBairro < 0 ? NULL : cDsBairro);
			poListaBusca[iNroObjLocal-1].setDsCidade(icDsCidade < 0 ? NULL : cDsCidade);
			if (icNrCEP >= 0) {
				poListaBusca[iNroObjLocal-1].setNrCEP(cNrCEP);
			} else
				poListaBusca[iNroObjLocal-1].setNrCEP(NULL);
			poListaBusca[iNroObjLocal-1].setIdUF(iIdUF);
			poListaBusca[iNroObjLocal-1].setSgUF(cSgUF);
			poListaBusca[iNroObjLocal-1].setNmUF(cNmUF);
			poListaBusca[iNroObjLocal-1].setIdPais(iIdPais);
			poListaBusca[iNroObjLocal-1].setSgPais(cSgPais);
			poListaBusca[iNroObjLocal-1].setNmPais(cNmPais);
			poListaBusca[iNroObjLocal-1].setTipoDocumento(cTipoDocumento);

		} else {
			if (poListaBusca)
				free(poListaBusca);
			ULOG_END("CBuscaPessoaCorrespondencia::buscaPorConta()");
			throw new TuxBasicSvcException(NRO_ERR_MEMORIA,MSG_ERR_MEMORIA);
		}
	}

	*iNroObjetos = iNroObjLocal - 1;
	
	ULOG_END("CBuscaPessoaCorrespondencia::buscaPorConta()");
	return poListaBusca;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLin:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CBuscaPessoaCorrespondencia::buscaPorConta()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

CBuscaPessoaCorrespondencia* CBuscaPessoaCorrespondencia::buscaPorCliente(int iIdCli, int*iNroObjetos)
{
    ULOG_START("CBuscaPessoaCorrespondencia::buscaPorCliente()");
	CBuscaPessoaCorrespondencia* poListaBusca = NULL;
	
	struct sqlca sqlca;
	int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
	int iIdPessoa;

	char cNmCliente[256];
	char cNrDocumento[256];
	char cDsTipoEndereco[256];
	char cDsEndereco[256];
	char cNrEndereco[256];
	char cDsComplemento[256];
	char cDsBairro[256];
	char cDsCidade[256];
	char cNrCEP[256];
	int iIdUF;
	char cSgUF[256];
	char cNmUF[256];
	int iIdPais;
	char cSgPais[256];
	char cNmPais[256];
	char cTipoDocumento[256];

	// Variáveis indicativas do oracle
	short icNmCliente;
	short icNrDocumento;
	short icNrEndereco;
	short icDsEndereco;
	short icDsComplemento;
	short icDsBairro;
	short icDsCidade;
	short icNrCEP;
	EXEC SQL END DECLARE SECTION;

	// Seta valor do Id Pessoa
	iIdPessoa = iIdCli;
	
	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLin;

	// Declara e abre o cursor
	EXEC SQL DECLARE pessoas CURSOR FOR
	SELECT
	 NmPessoa,
	 nrDocumento,
	 DsTipoEndereco,
	 Logradouro,
	 NrEndereco,
	 DsEnderecoComplemento,
	 nmBairro,
	 NmMunicipio,
	 NrCEP,
	 idUF,
	 sguf,
	 nmuf,
	 idPais,
	 sgPais,
	 nmPais,
     dstipodocumento
	FROM
	 correspondencia.CorrPessDoctoIdV01
	WHERE
	 IdPessoa = :iIdPessoa;

	EXEC SQL OPEN pessoas;

	// Corre os dados e monta a lista de objetos
	EXEC SQL WHENEVER NOT FOUND DO break;
	for (;; iNroObjLocal++) {
		
		EXEC SQL FETCH pessoas INTO
		 :cNmCliente:icNmCliente,
		 :cNrDocumento:icNrDocumento,
		 :cDsTipoEndereco,
		 :cDsEndereco:icDsEndereco,
		 :cNrEndereco:icNrEndereco,
		 :cDsComplemento:icDsComplemento,
		 :cDsBairro:icDsBairro,
		 :cDsCidade:icDsCidade,
		 :cNrCEP:icNrCEP,
		 :iIdUF,
		 :cSgUF,
		 :cNmUF,
		 :iIdPais,
		 :cSgPais,
		 :cNmPais,
         :cTipoDocumento;

		// Aloca memória para o objeto atual.
		if ((poListaBusca = (CBuscaPessoaCorrespondencia*) realloc((void *)poListaBusca, (sizeof(CBuscaPessoaCorrespondencia) * iNroObjLocal))) != NULL) {
			
			// Coloca os dados do objeto atual.
			poListaBusca[iNroObjLocal-1].setIdPessoa(iIdPessoa);
			poListaBusca[iNroObjLocal-1].setNmCliente(icNmCliente < 0 ? NULL : cNmCliente);
			poListaBusca[iNroObjLocal-1].setNrDocumento(icNrDocumento < 0 ? NULL : cNrDocumento);
			poListaBusca[iNroObjLocal-1].setDsTipoEndereco(cDsTipoEndereco);
			poListaBusca[iNroObjLocal-1].setNrEndereco(icNrEndereco < 0 ? NULL : cNrEndereco);
			poListaBusca[iNroObjLocal-1].setDsEndereco(icDsEndereco < 0 ? NULL : cDsEndereco);
			poListaBusca[iNroObjLocal-1].setDsComplemento(icDsComplemento < 0 ? NULL : cDsComplemento);
			poListaBusca[iNroObjLocal-1].setDsBairro(icDsBairro < 0 ? NULL : cDsBairro);
			poListaBusca[iNroObjLocal-1].setDsCidade(icDsCidade < 0 ? NULL : cDsCidade);
			if (icNrCEP >= 0) {
				poListaBusca[iNroObjLocal-1].setNrCEP(cNrCEP);
			} else
				poListaBusca[iNroObjLocal-1].setNrCEP(NULL);
			poListaBusca[iNroObjLocal-1].setIdUF(iIdUF);
			poListaBusca[iNroObjLocal-1].setSgUF(cSgUF);
			poListaBusca[iNroObjLocal-1].setNmUF(cNmUF);
			poListaBusca[iNroObjLocal-1].setIdPais(iIdPais);
			poListaBusca[iNroObjLocal-1].setSgPais(cSgPais);
			poListaBusca[iNroObjLocal-1].setNmPais(cNmPais);
			poListaBusca[iNroObjLocal-1].setTipoDocumento(cTipoDocumento);

		} else {
			if (poListaBusca)
				free(poListaBusca);
				
			ULOG_END("CBuscaPessoaCorrespondencia::buscaPorCliente()");
			throw new TuxBasicSvcException(NRO_ERR_MEMORIA,MSG_ERR_MEMORIA);
		}
	}

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CBuscaPessoaCorrespondencia::buscaPorCliente()");
	return poListaBusca;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLin:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CBuscaPessoaCorrespondencia::buscaPorCliente()");
		throw TuxBasicOraException(sqlca.sqlcode);
}
