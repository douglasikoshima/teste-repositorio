#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/AreaRegistroBloqueadopc.h"
#include <memory.h>


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
bool CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado(TAreaRegistroBloqueado *ptAreaRegistroBloqueado)
{
    ULOG_START("CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszInBloqueado[LEN_INBLOQUEADO];
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTROBLOQ];

        short iInBloqueado = 0;
        short iCdAreaRegistro = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszCdAreaRegistro, ptAreaRegistroBloqueado->szCdAreaRegistro);

    ULOG("[CHAMADO 20013772] ptAreaRegistroBloqueado->szCdAreaRegistro = '%.*s'",
    		oszCdAreaRegistro.len, reinterpret_cast<const char*>(oszCdAreaRegistro.arr));

    EXEC SQL
        SELECT ar.inbloqueado
        INTO :oszInBloqueado:iInBloqueado
        FROM apoio.arearegistro ar
        WHERE ar.cdarearegistro = TRIM(:oszCdAreaRegistro);


    if(iInBloqueado != -1) {
        STRCPY_FROM_ORA(ptAreaRegistroBloqueado->szInBloqueado, oszInBloqueado);
    }

    ULOG("ptAreaRegistroBloqueado->szInBloqueado[%s]", ptAreaRegistroBloqueado->szInBloqueado);

    ULOGI( "Finalizando CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado <FOUND>");
    ULOG_END("CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado");
    return true;

    naoexiste:
        ULOGI( "Finalizando CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado <NOT FOUND>");
        ULOG_END("CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado");
        return false;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=(%d),sqlerrmc=[%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CAreaRegistroBloqueadopc::proCBuscaAreaRegistroBloqueado");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
