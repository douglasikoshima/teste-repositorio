#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "Portabilidadepc.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
bool CPortabilidadepc::proCBuscaPortabilidade(TPortabilidade *ptPortabilidade)
{
    ULOG_START("CPortabilidadepc::proCBuscaPortabilidade");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszCdAreaRegistroIn[LEN_CDAREAREGISTROPORT];
        VARCHAR oszNrLinhaIn[LEN_NRLINHAPORT];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA + LEN_EOS];

        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszSgTipoPessoa[LEN_SGTIPOPESSOA];
        VARCHAR oszNmPessoa[LEN_NMPESSOA];
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTROPORT];
        VARCHAR oszNrLinha[LEN_CDAREAREGISTROPORT + LEN_NRLINHAPORT];
        VARCHAR oszIdTipoLinha[LEN_IDTIPOLINHA];
        VARCHAR oszDsTipoLinha[LEN_DSTIPOLINHA];
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszDsEndereco[LEN_NMTIPOLOGRADOURO + LEN_NMLOGRADOURO];
        VARCHAR oszNrEndereco[LEN_NRENDERECO];
        VARCHAR oszDsEnderecoComplemento[LEN_DSENDERECOCOMPLEMENTO];
        VARCHAR oszNmBairro[LEN_NMBAIRRO];
        VARCHAR oszNmMunicipio[LEN_NMMUNICIPIO];
        VARCHAR oszNrCEP[LEN_NRCEP];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszSgUF[LEN_SGUF];
        VARCHAR oszNmUF[LEN_NMUF];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszSgPais[LEN_SGPAIS];
        VARCHAR oszDsPais[LEN_DSPAIS];
        VARCHAR oszDsNacionalidade[LEN_DSNACIONALIDADE];
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszDsTipoDocumento[LEN_DSTIPODOCUMENTO];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];

        short oiIdPessoa = 0;
        short oiIdPessoaDePara = 0;
        short oiSgTipoPessoa = 0;
        short oiNmPessoa = 0;
        short oiCdAreaRegistro = 0;
        short oiNrLinha = 0;
        short oiIdTipoLinha = 0;
        short oiDsTipoLinha = 0;
        short oiIdPessoaEndereco = 0;
        short oiDsEndereco = 0;
        short oiNrEndereco = 0;
        short oiDsEnderecoComplemento = 0;
        short oiNmBairro = 0;
        short oiNmMunicipio = 0;
        short oiNrCEP = 0;
        short oiIdUF = 0;
        short oiSgUF = 0;
        short oiNmUF = 0;
        short oiIdPais = 0;
        short oiSgPais = 0;
        short oiDsPais = 0;
        short oiDsNacionalidade = 0;
        short oiIdDocumento = 0;
        short oiDsTipoDocumento = 0;
        short oiNrDocumento = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;


	STRCPY_TO_ORA(oszCdAreaRegistroIn, ptPortabilidade->szCdAreaRegistro);
	STRCPY_TO_ORA(oszNrLinhaIn, ptPortabilidade->szNrLinha);

	STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPortabilidade->szIdLinhaTelefonica);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT
            idPessoaDePara,
            idPessoa,
            inTipoPessoa,
            nmPessoa,
            nrCodArea,
            nrLinha,
            idTipoLinha,
            dsTipoLinha,
            idEndereco,
            dsEndereco,
            nrEndereco,
            dsComplemento,
            dsBairro,
            dsCidade,
            nrCEP,
            idUF,
            sgUF,
            nmUF,
            idPais,
            sgPais,
            dsPais,
            dsNacionalidade,
            idDocumento,
            dsTipoDocumento,            
            nrDocumento
        INTO
            :oszIdPessoaDePara:oiIdPessoaDePara,
            :oszIdPessoa:oiIdPessoa,
            :oszSgTipoPessoa:oiSgTipoPessoa,
            :oszNmPessoa:oiNmPessoa,
            :oszCdAreaRegistro:oiCdAreaRegistro,
            :oszNrLinha:oiNrLinha,
            :oszIdTipoLinha:oiIdTipoLinha,
            :oszDsTipoLinha:oiDsTipoLinha,
            :oszIdPessoaEndereco:oiIdPessoaEndereco,
            :oszDsEndereco:oiDsEndereco,
            :oszNrEndereco:oiNrEndereco,
            :oszDsEnderecoComplemento:oiDsEnderecoComplemento,
            :oszNmBairro:oiNmBairro,
            :oszNmMunicipio:oiNmMunicipio,
            :oszNrCEP:oiNrCEP,
            :oszIdUF:oiIdUF,
            :oszSgUF:oiSgUF,
            :oszNmUF:oiNmUF,
            :oszIdPais:oiIdPais,
            :oszSgPais:oiSgPais,
            :oszDsPais:oiDsPais,
            :oszDsNacionalidade:oiDsNacionalidade,
            :oszIdDocumento:oiIdDocumento,
            :oszDsTipoDocumento:oiDsTipoDocumento,
            :oszNrDocumento:oiNrDocumento
        FROM
        (
            SELECT
                cpp.idpessoadepara as idPessoaDePara,
                cp.idpessoa as idPessoa,
                atp.sgtipopessoa as inTipoPessoa,
                cp.nmpessoa as nmPessoa,
                cpp.cdarearegistro as nrCodArea,
                cpp.cdarearegistro || cpp.nrlinha as nrLinha,
                cpp.idtipolinha as idTipoLinha,
                atl.dstipolinha as dsTipoLinha,
                cpe.idpessoaendereco as idEndereco,
                cpe.nmtipologradouro || ' ' || cpe.nmlogradouro as dsEndereco,
                cpe.nrendereco as nrEndereco,
                cpe.dsenderecocomplemento as dsComplemento,
                cpe.nmbairro as dsBairro,
                cpe.nmmunicipio as dsCidade,
                cpe.nrcep as nrCEP,
                cpe.iduf as idUF,
                auf.sguf as sgUF,
                auf.nmuf as nmUF,
                ap.idpais as idPais,
                ap.sgpais as sgPais,
                ap.nmpais as dsPais,
                ap.dsnacionalidade as dsNacionalidade,
                cd.iddocumento as idDocumento,
                atd.dstipodocumento  as dsTipoDocumento,            
                cd.nrdocumento as nrDocumento
            FROM
                customer.pessoaportabilidade cpp,
                customer.pessoadepara cpdp,
                customer.pessoa cp,
                customer.pessoadocumento cpd,
                customer.pessoaendereco cpe,
                customer.documento cd,
                apoio.tipodocumento atd,
                apoio.tipopessoa atp,
                apoio.tipolinha atl,
                apoio.uf auf,
                apoio.pais ap
            WHERE
                cpp.idpessoadepara = cpdp.idpessoadepara
            AND
                cpdp.idpessoa = cp.idpessoa
            AND
                cp.idpessoa = cpd.idpessoa
            AND
                cp.idpessoa = cpe.idpessoa (+)
            AND
                cpd.iddocumento = cd.iddocumento
            AND
                cpp.idtipopessoa = cp.idtipopessoa
            AND
                atd.idtipodocumento = cd.idtipodocumento
            AND
                cpp.idtipopessoa = atp.idtipopessoa
            AND
                cpp.idtipolinha = atl.idtipolinha
            AND
                cpd.dtexpiracao IS NULL
            AND
                cpe.iduf = auf.iduf (+)
            AND
                cpe.idpais = ap.idpais (+)
            AND
                cpp.insincronizado = 0
            AND
                cpp.nrlinha = :oszNrLinhaIn
            AND
                cpp.cdarearegistro = :oszCdAreaRegistroIn
            ORDER BY
                atd.nrprioridade
        )
        WHERE
             ROWNUM < 2;



    if(oiIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoa, oszIdPessoa);
    }
    if(oiIdPessoaDePara != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if(oiSgTipoPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgTipoPessoa, oszSgTipoPessoa);
    }
    if(oiNmPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmPessoa, oszNmPessoa);
    }
    if(oiCdAreaRegistro != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szCdAreaRegistro, oszCdAreaRegistro);
    }
    if(oiNrLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrLinha, oszNrLinha);
    }
    if(oiIdTipoLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdTipoLinha, oszIdTipoLinha);
    }
    if(oiDsTipoLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsTipoLinha, oszDsTipoLinha);
    }
    if(oiIdPessoaEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoaEndereco, oszIdPessoaEndereco);
    }
    if(oiDsEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsEndereco, oszDsEndereco);
    }
    if(oiNrEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrEndereco, oszNrEndereco);
    }
    if(oiDsEnderecoComplemento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsEnderecoComplemento, oszDsEnderecoComplemento);
    }
    if(oiNmBairro != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmBairro, oszNmBairro);
    }
    if(oiNmMunicipio != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmMunicipio, oszNmMunicipio);
    }
    if(oiNrCEP != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrCEP, oszNrCEP);
    }
    if(oiIdUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdUF, oszIdUF);
    }
    if(oiSgUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgUF, oszSgUF);
    }
    if(oiNmUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmUF, oszNmUF);
    }
    if(oiIdPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPais, oszIdPais);
    }
    if(oiSgPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgPais, oszSgPais);
    }
    if(oiDsPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsPais, oszDsPais);
    }
    if(oiDsNacionalidade != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsNacionalidade, oszDsNacionalidade);
    }
    if(oiIdDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdDocumento, oszIdDocumento);
    }
    if(oiDsTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsTipoDocumento, oszDsTipoDocumento);
    }
    if(oiNrDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrDocumento, oszNrDocumento);
    }


    ULOGI("Finalizando proCBuscaPortabilidade <FOUND>");
    ULOG_END("CPortabilidadepc::proCBuscaPortabilidade");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPortabilidade <NOT FOUND>");
        ULOG_END("CPortabilidadepc::proCBuscaPortabilidade");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPortabilidade <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}



bool CPortabilidadepc::proCBuscaPortabilidadePorIdLinhaTelef(TPortabilidade *ptPortabilidade)
{
    ULOG_START("CPortabilidadepc::proCBuscaPortabilidadePorIdLinhaTelef");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA + LEN_EOS];

        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszSgTipoPessoa[LEN_SGTIPOPESSOA];
        VARCHAR oszNmPessoa[LEN_NMPESSOA];
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTROPORT];
        VARCHAR oszNrLinha[LEN_CDAREAREGISTROPORT + LEN_NRLINHAPORT];
        VARCHAR oszIdTipoLinha[LEN_IDTIPOLINHA];
        VARCHAR oszDsTipoLinha[LEN_DSTIPOLINHA];
        VARCHAR oszIdPessoaEndereco[LEN_IDPESSOAENDERECO];
        VARCHAR oszDsEndereco[LEN_NMTIPOLOGRADOURO + LEN_NMLOGRADOURO];
        VARCHAR oszNrEndereco[LEN_NRENDERECO];
        VARCHAR oszDsEnderecoComplemento[LEN_DSENDERECOCOMPLEMENTO];
        VARCHAR oszNmBairro[LEN_NMBAIRRO];
        VARCHAR oszNmMunicipio[LEN_NMMUNICIPIO];
        VARCHAR oszNrCEP[LEN_NRCEP];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszSgUF[LEN_SGUF];
        VARCHAR oszNmUF[LEN_NMUF];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszSgPais[LEN_SGPAIS];
        VARCHAR oszDsPais[LEN_DSPAIS];
        VARCHAR oszDsNacionalidade[LEN_DSNACIONALIDADE];
        VARCHAR oszIdDocumento[LEN_IDDOCUMENTO];
        VARCHAR oszDsTipoDocumento[LEN_DSTIPODOCUMENTO];
        VARCHAR oszNrDocumento[LEN_NRDOCUMENTO];

        short oiIdPessoa = 0;
        short oiIdPessoaDePara = 0;
        short oiSgTipoPessoa = 0;
        short oiNmPessoa = 0;
        short oiCdAreaRegistro = 0;
        short oiNrLinha = 0;
        short oiIdTipoLinha = 0;
        short oiDsTipoLinha = 0;
        short oiIdPessoaEndereco = 0;
        short oiDsEndereco = 0;
        short oiNrEndereco = 0;
        short oiDsEnderecoComplemento = 0;
        short oiNmBairro = 0;
        short oiNmMunicipio = 0;
        short oiNrCEP = 0;
        short oiIdUF = 0;
        short oiSgUF = 0;
        short oiNmUF = 0;
        short oiIdPais = 0;
        short oiSgPais = 0;
        short oiDsPais = 0;
        short oiDsNacionalidade = 0;
        short oiIdDocumento = 0;
        short oiDsTipoDocumento = 0;
        short oiNrDocumento = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPortabilidade->szIdLinhaTelefonica);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
		SELECT
			cpp.idpessoadepara as idPessoaDePara,
			cp.idpessoa as idPessoa,
			atp.sgtipopessoa as inTipoPessoa,
			cp.nmpessoa as nmPessoa,
			cpp.cdarearegistro as nrCodArea,
			cpp.cdarearegistro || cpp.nrlinha as nrLinha,
			cpp.idtipolinha as idTipoLinha,
			atl.dstipolinha as dsTipoLinha,
			cpe.idpessoaendereco as idEndereco,
			cpe.nmtipologradouro || ' ' || cpe.nmlogradouro as dsEndereco,
			cpe.nrendereco as nrEndereco,
			cpe.dsenderecocomplemento as dsComplemento,
			cpe.nmbairro as dsBairro,
			cpe.nmmunicipio as dsCidade,
			cpe.nrcep as nrCEP,
			cpe.iduf as idUF,
			auf.sguf as sgUF,
			auf.nmuf as nmUF,
			ap.idpais as idPais,
			ap.sgpais as sgPais,
			ap.nmpais as dsPais,
			ap.dsnacionalidade as dsNacionalidade,
			cd.iddocumento as idDocumento,
			atd.dstipodocumento  as dsTipoDocumento,
			cd.nrdocumento as nrDocumento
        INTO
            :oszIdPessoaDePara:oiIdPessoaDePara,
            :oszIdPessoa:oiIdPessoa,
            :oszSgTipoPessoa:oiSgTipoPessoa,
            :oszNmPessoa:oiNmPessoa,
            :oszCdAreaRegistro:oiCdAreaRegistro,
            :oszNrLinha:oiNrLinha,
            :oszIdTipoLinha:oiIdTipoLinha,
            :oszDsTipoLinha:oiDsTipoLinha,
            :oszIdPessoaEndereco:oiIdPessoaEndereco,
            :oszDsEndereco:oiDsEndereco,
            :oszNrEndereco:oiNrEndereco,
            :oszDsEnderecoComplemento:oiDsEnderecoComplemento,
            :oszNmBairro:oiNmBairro,
            :oszNmMunicipio:oiNmMunicipio,
            :oszNrCEP:oiNrCEP,
            :oszIdUF:oiIdUF,
            :oszSgUF:oiSgUF,
            :oszNmUF:oiNmUF,
            :oszIdPais:oiIdPais,
            :oszSgPais:oiSgPais,
            :oszDsPais:oiDsPais,
            :oszDsNacionalidade:oiDsNacionalidade,
            :oszIdDocumento:oiIdDocumento,
            :oszDsTipoDocumento:oiDsTipoDocumento,
            :oszNrDocumento:oiNrDocumento
		 FROM
			 customer.pessoaportabilidade cpp,
			 customer.pessoadepara cpdp,
			 customer.pessoa cp,
			 customer.pessoadocumento cpd,
			 customer.pessoaendereco cpe,
			 customer.documento cd,

			 CUSTOMER.PESSOALINHA cpl,
			 LINHA.LINHATELEFONICA llt,

			 apoio.tipodocumento atd,
			 apoio.tipopessoa atp,
			 apoio.tipolinha atl,
			 apoio.uf auf,
			 apoio.pais ap
		 WHERE
			 cpp.idpessoadepara = cpdp.idpessoadepara
		 AND
			 cpdp.idpessoa = cp.idpessoa
		 AND
			 cp.idpessoa = cpd.idpessoa
		 AND
			 cp.idpessoa = cpe.idpessoa (+)
		 AND
			 cpd.iddocumento = cd.iddocumento
		 AND
			 cpp.idtipopessoa = cp.idtipopessoa
		 AND
			 atd.idtipodocumento = cd.idtipodocumento
		 AND
			 cpp.idtipopessoa = atp.idtipopessoa
		 AND
			 cpp.idtipolinha = atl.idtipolinha
		 AND
			 cpdp.idpessoadepara = cpl.idpessoadepara
		 AND
			 cpl.idlinhatelefonica = llt.idlinhatelefonica
		 AND
			 llt.idlinhatelefonica = :oszIdLinhaTelefonica
		 AND
			 cpe.iduf = auf.iduf (+)
		 AND
			 cpe.idpais = ap.idpais (+)
		 AND
			 cpp.insincronizado = 0
		 AND
			 ROWNUM < 2
		 ORDER BY
			 atd.nrprioridade;

    if(oiIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoa, oszIdPessoa);
    }
    if(oiIdPessoaDePara != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if(oiSgTipoPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgTipoPessoa, oszSgTipoPessoa);
    }
    if(oiNmPessoa != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmPessoa, oszNmPessoa);
    }
    if(oiCdAreaRegistro != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szCdAreaRegistro, oszCdAreaRegistro);
    }
    if(oiNrLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrLinha, oszNrLinha);
    }
    if(oiIdTipoLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdTipoLinha, oszIdTipoLinha);
    }
    if(oiDsTipoLinha != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsTipoLinha, oszDsTipoLinha);
    }
    if(oiIdPessoaEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPessoaEndereco, oszIdPessoaEndereco);
    }
    if(oiDsEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsEndereco, oszDsEndereco);
    }
    if(oiNrEndereco != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrEndereco, oszNrEndereco);
    }
    if(oiDsEnderecoComplemento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsEnderecoComplemento, oszDsEnderecoComplemento);
    }
    if(oiNmBairro != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmBairro, oszNmBairro);
    }
    if(oiNmMunicipio != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmMunicipio, oszNmMunicipio);
    }
    if(oiNrCEP != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrCEP, oszNrCEP);
    }
    if(oiIdUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdUF, oszIdUF);
    }
    if(oiSgUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgUF, oszSgUF);
    }
    if(oiNmUF != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNmUF, oszNmUF);
    }
    if(oiIdPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdPais, oszIdPais);
    }
    if(oiSgPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szSgPais, oszSgPais);
    }
    if(oiDsPais != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsPais, oszDsPais);
    }
    if(oiDsNacionalidade != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsNacionalidade, oszDsNacionalidade);
    }
    if(oiIdDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szIdDocumento, oszIdDocumento);
    }
    if(oiDsTipoDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szDsTipoDocumento, oszDsTipoDocumento);
    }
    if(oiNrDocumento != -1) {
        STRCPY_FROM_ORA(ptPortabilidade->szNrDocumento, oszNrDocumento);
    }


    ULOGI("Finalizando proCBuscaPortabilidadePorIdLinhaTelef <FOUND>");
    ULOG_END("CPortabilidadepc::proCBuscaPortabilidadePorIdLinhaTelef");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPortabilidadePorIdLinhaTelef <NOT FOUND>");
        ULOG_END("CPortabilidadepc::proCBuscaPortabilidadePorIdLinhaTelef");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPortabilidadePorIdLinhaTelef <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
