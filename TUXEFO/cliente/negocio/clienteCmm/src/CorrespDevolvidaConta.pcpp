#undef SQLCA
#define SQLCA_NONE

// CorrespDevolvidaConta.pcpp: implementation for the 
// CCorrespDevolvidaConta class.
//////////////////////////////////////////////////////////////////////

#include <sqlca.h>
#include <tuxfw.h>
EXEC SQL INCLUDE "../include/CorrespDevolvidaConta.h";

//
// Construtor e Destrutor
CCorrespDevolvidaConta::CCorrespDevolvidaConta() {

	memset(sIdUsuarioAlteracao,0,256);
}

CCorrespDevolvidaConta::~CCorrespDevolvidaConta() {
}

//
// Metodos getter
int CCorrespDevolvidaConta::getIdCorrespondenciaDevolvidaCont(){
	return iIdCorrespondenciaDevolvidaCont;
}

int CCorrespDevolvidaConta::getIdCorrespondenciaDevolvida(){
	return iIdCorrespondenciaDevolvida;
}

int CCorrespDevolvidaConta::getIdConta(){
	return iIdConta;
}

//
// Metodos setter
void CCorrespDevolvidaConta::setIdCorrespondenciaDevolvidaCont(int value){
	iIdCorrespondenciaDevolvidaCont = value;
}

void CCorrespDevolvidaConta::setIdCorrespondenciaDevolvida(int value){
	iIdCorrespondenciaDevolvida = value;
}

void CCorrespDevolvidaConta::setIdConta(int value){
	iIdConta = value;
}

// Usuário de alteração
void CCorrespDevolvidaConta::setUsuarioAlteracao(char* value) {
	if (value != NULL) {
		strncpy(sIdUsuarioAlteracao,value, 255);
		sIdUsuarioAlteracao[255]='\0';
	}
}

// Métodos de acesso a banco de dados
void CCorrespDevolvidaConta::inclui(){
    
    ULOG_END("CCorrespDevolvidaConta::inclui()");

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		int iNovoId;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorInc;

	// Busca o novo ID da sequence.
	EXEC SQL
		SELECT correspondencia.CorrespDevolvidaContaSQ.NEXTVAL
		INTO :iNovoId
		FROM DUAL;
	if (sqlca.sqlcode)
	{
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CCorrespDevolvidaConta::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
	}

	iIdCorrespondenciaDevolvidaCont = iNovoId;

	// Insere no banco de dados
	EXEC SQL
	INSERT INTO correspondencia.CorrespDevolvidaConta
	(IdCorrespondenciaDevolvidaCont,
	 IdCorrespondenciaDevolvida,
	 IdConta,
	 IdUsuarioAlteracao,
	 DtUltimaAlteracao)
	VALUES
	(:iIdCorrespondenciaDevolvidaCont,
	 :iIdCorrespondenciaDevolvida,
	 :iIdConta,
	 :sIdUsuarioAlteracao,
	 SYSDATE);

	// Inserção OK, coloca o ID no objeto
	iIdCorrespondenciaDevolvidaCont = iNovoId;

	ULOG_END("CCorrespDevolvidaConta::inclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorInc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CCorrespDevolvidaConta::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CCorrespDevolvidaConta::exclui(){

	ULOG_START("CCorrespDevolvidaConta::exclui()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorExc;

	// Remove do banco de dados
	EXEC SQL
	DELETE correspondencia.CorrespDevolvidaConta
	WHERE IdCorrespondenciaDevolvidaCont = :iIdCorrespondenciaDevolvidaCont;

	// Remoção OK, seta ID do objeto para -1
	iIdCorrespondenciaDevolvidaCont = -1;

	ULOG_END("CCorrespDevolvidaConta::exclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorExc:
		ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCorrespDevolvidaConta::exclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CCorrespDevolvidaConta::altera()
{

	ULOG_START("CCorrespDevolvidaConta::altera()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorAlt;

	// Altera no banco de dados para os dados atuais
	EXEC SQL
	UPDATE correspondencia.CorrespDevolvidaConta
	SET
	 IdCorrespondenciaDevolvida = :iIdCorrespondenciaDevolvida,
	 IdConta = :iIdConta,
	 IdUsuarioAlteracao = :sIdUsuarioAlteracao,
	 DtUltimaAlteracao = SYSDATE
	WHERE
	 IdCorrespondenciaDevolvidaCont = :iIdCorrespondenciaDevolvidaCont;

	ULOG_END("CCorrespDevolvidaConta::altera()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorAlt:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CCorrespDevolvidaConta::altera()");
		throw TuxBasicOraException(sqlca.sqlcode);
}