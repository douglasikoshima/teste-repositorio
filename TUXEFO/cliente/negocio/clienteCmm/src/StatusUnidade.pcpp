// StatusUnidade.pcpp: implementation for the 
// CStatusUnidade class.
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
EXEC SQL INCLUDE "../include/StatusUnidade.h";

//
// Construtor e Destrutor
CStatusUnidade::CStatusUnidade() {

	memset(sIdUsuarioAlteracao,0,256);
}

CStatusUnidade::~CStatusUnidade() {
}

//
// Metodos getter
int CStatusUnidade::getIdStatusUnidade(){
	return iIdStatusUnidade;
}

int CStatusUnidade::getIdUnidade(){
	return iIdUnidade;
}

int CStatusUnidade::getIdStatusCorrespondencia(){
	return iIdStatusCorrespondencia;
}

// Usuário de alteração
void CStatusUnidade::setUsuarioAlteracao(char* value) {
	if (value != NULL) {
		strncpy(sIdUsuarioAlteracao,value, 255);
		sIdUsuarioAlteracao[255]='\0';
	}
}

//
// Metodos setter
void CStatusUnidade::setIdStatusUnidade(int value){
	iIdStatusUnidade = value;
}

void CStatusUnidade::setIdUnidade(int value){
	iIdUnidade = value;
}

void CStatusUnidade::setIdStatusCorrespondencia(int value){
	iIdStatusCorrespondencia = value;
}

// Métodos de acesso a banco de dados
void CStatusUnidade::inclui(){

    
	ULOG_START("CStatusUnidade::inclui()");
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		int iNovoId;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorInc;

	// Busca o novo ID da sequence.
	EXEC SQL
		SELECT correspondencia.StatusUnidadeSQ.NEXTVAL
		INTO :iNovoId
		FROM DUAL;
	if (sqlca.sqlcode)
	{
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CStatusUnidade::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
	}
	

	// Insere no banco de dados
	EXEC SQL
	INSERT INTO correspondencia.StatusUnidade
	(IdStatusUnidade,
	 IdUnidade,
	 IdStatusCorrespondencia,
	 IdUsuarioAlteracao,
	 DtUltimaAlteracao)
	VALUES
	(:iNovoId,
	 :iIdUnidade,
	 :iIdStatusCorrespondencia,
	 :sIdUsuarioAlteracao,
	 SYSDATE);

	// Inserção OK, coloca o ID no objeto
	iIdStatusUnidade = iNovoId;

	ULOG_END("CStatusUnidade::inclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorInc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CStatusUnidade::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CStatusUnidade::exclui(){

	ULOG_START("CStatusUnidade::exclui()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorExc;

	// Remove do banco de dados
	EXEC SQL
	DELETE correspondencia.StatusUnidade
	WHERE IdStatusUnidade = :iIdStatusUnidade;

	// Remoção OK, seta ID do objeto para -1
	iIdStatusUnidade = -1;

	ULOG_END("CStatusUnidade::exclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorExc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CStatusUnidade::exclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CStatusUnidade::altera(){

	ULOG_START("CStatusUnidade::altera()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorAlt;

	// Altera no banco de dados para os dados atuais
	EXEC SQL
	UPDATE correspondencia.StatusUnidade
	SET
	 IdUnidade = :iIdUnidade,
	 IdStatusCorrespondencia = :iIdStatusCorrespondencia,
	 IdUsuarioAlteracao = :sIdUsuarioAlteracao,
	 DtUltimaAlteracao = SYSDATE
	WHERE
	 IdStatusUnidade = :iIdStatusUnidade;

	ULOG_END("CStatusUnidade::altera()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorAlt:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CStatusUnidade::altera()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CStatusUnidade::excluiPorStatus(int iStatus){

	ULOG_START("CStatusUnidade::excluiPorStatus()");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		int iOraStatus;
	EXEC SQL END DECLARE SECTION;

	iOraStatus = iStatus;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorExc;

	// Remove do banco de dados
	EXEC SQL
	DELETE correspondencia.StatusUnidade
	WHERE IdStatusCorrespondencia = :iOraStatus;

	ULOG_END("CStatusUnidade::excluiPorStatus()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorExc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CStatusUnidade::excluiPorStatus()");
		throw TuxBasicOraException(sqlca.sqlcode);
}
