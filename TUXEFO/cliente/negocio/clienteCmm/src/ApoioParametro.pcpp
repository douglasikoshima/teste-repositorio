#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>

#include "../include/ApoioParametro.h"
#include <tuxfw.h>


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

ApoioParametro::ApoioParametro(char *pszIdUsuarioAlteracao)
{
    ULOG("ApoioParametro::ApoioParametro");
    memset(&tApoioParametro, 0x00, sizeof(TApoioParametro));
    this->setIdUsuarioAlteracao(pszIdUsuarioAlteracao);
}

ApoioParametro::~ApoioParametro(void)
{
    ULOG("ApoioParametro::~ApoioParametro");
}

/*******************************************************************************************************/
void ApoioParametro::atualizaApoioParametro(void)
{
    ULOG_START("ApoioParametro::atualizaApoioParametro");

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszCdParametro[LEN_CDPARAMETRO];
        VARCHAR oszDsValorParametro[LEN_DSVALORPARAMETRO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;


    ULOG("tApoioParametro.szCdParametro[%s]", tApoioParametro.szCdParametro);
    ULOG("tApoioParametro.szDsValorParametro[%s]", tApoioParametro.szDsValorParametro);
    ULOG("tApoioParametro.szIdUsuarioAlteracao[%s]", tApoioParametro.szIdUsuarioAlteracao);

    STRCPY_TO_ORA(oszCdParametro, tApoioParametro.szCdParametro);
    STRCPY_TO_ORA(oszDsValorParametro, tApoioParametro.szDsValorParametro);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tApoioParametro.szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;


    EXEC SQL 
        UPDATE
            apoio.parametro
        SET
            dsvalorparametro = :oszDsValorParametro,
            dtultimaalteracao = SYSDATE,
            idusuarioalteracao = :oszIdUsuarioAlteracao
        WHERE
            cdparametro = :oszCdParametro;

    ULOGI("Finalizando ApoioParametro::atualizaApoioParametro");
    ULOG_END("ApoioParametro::atualizaApoioParametro");

    return;

    erro:
        ULOGE("Finalizando ApoioParametro::atualizaApoioParametro <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************************************/
bool ApoioParametro::buscaApoioParametro(void)
{
    ULOG_START("ApoioParametro::buscaApoioParametro");

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszCdParametro[LEN_CDPARAMETRO];
        VARCHAR oszDsValorParametro[LEN_DSVALORPARAMETRO];
    EXEC SQL END DECLARE SECTION;

    ULOG("tApoioParametro.szCdParametro[%s]", tApoioParametro.szCdParametro);

    STRCPY_TO_ORA(oszCdParametro, tApoioParametro.szCdParametro);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;


    EXEC SQL 
        SELECT dsvalorparametro
          INTO :oszDsValorParametro
          FROM apoio.parametro
         WHERE parametro.cdparametro = :oszCdParametro;

    STRCPY_FROM_ORA(tApoioParametro.szDsValorParametro, oszDsValorParametro);


    ULOGI("Finalizando ApoioParametro::buscaApoioParametro <FOUND>");
    ULOG_END("ApoioParametro::buscaApoioParametro");
    return true;

    naoexiste:
        ULOGI("Finalizando ApoioParametro::buscaApoioParametro <NOT FOUND>");
        return false;

    erro:
        ULOGE("Finalizando ApoioParametro::buscaApoioParametro <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************************************/
void ApoioParametro::setCdParametro(char *pszCdParametro)
{
    strcpy(tApoioParametro.szCdParametro, pszCdParametro);
}

/*******************************************************************************************************/
void ApoioParametro::setDsParametro(char *pszDsParametro)
{
    strcpy(tApoioParametro.szDsParametro, pszDsParametro);
}

/*******************************************************************************************************/
void ApoioParametro::setDsValorParametro(char *pszDsValorParametro)
{
    strcpy(tApoioParametro.szDsValorParametro, pszDsValorParametro);
}

/*******************************************************************************************************/
void ApoioParametro::setIdUsuarioAlteracao(char *pszIdUsuarioAlteracao)
{
    strcpy(tApoioParametro.szIdUsuarioAlteracao, pszIdUsuarioAlteracao);
}

/*******************************************************************************************************/
char *ApoioParametro::getCdParametro(void)
{
    static char szCdParametro[LEN_CDPARAMETRO + LEN_EOS];

    strcpy(szCdParametro, tApoioParametro.szCdParametro);
    return szCdParametro;
}

/*******************************************************************************************************/
char *ApoioParametro::getDsValorParametro(void)
{
    static char szDsValorParametro[LEN_DSVALORPARAMETRO + LEN_EOS];

    strcpy(szDsValorParametro, tApoioParametro.szDsValorParametro);
    return szDsValorParametro;
}
