///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Sincronismo
 * @usecase PessoaFisica
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/PessoaFisicapc.h"
#include <memory.h>


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
void CPessoaFisicapc::proCInserePessoaFisica(TPessoaFisica *ptPessoaFisica)
{
    ULOG_START("CPessoaFisicapc::proCInserePessoaFisica()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszDtNascimento[LEN_DTNASCIMENTO];
        VARCHAR oszNmMae[LEN_NMMAE];
        VARCHAR oszNmPai[LEN_NMPAI];
        VARCHAR oszIdTratamento[LEN_IDTRATAMENTO];
        VARCHAR oszIdEstadoCivil[LEN_IDESTADOCIVIL];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdSexo[LEN_IDSEXO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    
    // copia os dados da estrutura para as variaveis ProC
    STRCPY_TO_ORA(oszIdPessoa, ptPessoaFisica->szIdPessoa);
    STRCPY_TO_ORA(oszDtNascimento, ptPessoaFisica->szDtNascimento);
    STRCPY_TO_ORA(oszNmMae, ptPessoaFisica->szNmMae);
    STRCPY_TO_ORA(oszNmPai, ptPessoaFisica->szNmPai);
    STRCPY_TO_ORA(oszIdTratamento, ptPessoaFisica->szIdTratamento);
    STRCPY_TO_ORA(oszIdEstadoCivil, ptPessoaFisica->szIdEstadoCivil);
    STRCPY_TO_ORA(oszIdPais, ptPessoaFisica->szIdPais);
    STRCPY_TO_ORA(oszIdSexo, ptPessoaFisica->szIdSexo);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);

	ULOGI( "RBS67 ** Valor de IDSEXO = %s", ptPessoaFisica->szIdSexo );

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL INSERT INTO Customer.PessoaFisica
                       ( idpessoa
                       , dtnascimento
                       , nmmae
                       , nmpai
                       , idtratamento
                       , idestadocivil
                       , idpais
                       , idsexo
                       , idusuarioalteracao
                       , dtultimaalteracao ) 
                VALUES ( :oszIdPessoa
                       , to_date(:oszDtNascimento, 'DD/MM/YYYY')
                       , :oszNmMae
                       , :oszNmPai
                       , :oszIdTratamento
                       , :oszIdEstadoCivil
                       , :oszIdPais
                       , :oszIdSexo
                       , :oszIdUsuarioAlteracao
                       , SYSDATE );

    ULOG_END("CPessoaFisicapc::proCInserePessoaFisica()");
    return;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaFisicapc::proCInserePessoaFisica()");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
void CPessoaFisicapc::proCAtualizaPessoaFisica(TPessoaFisica tPessoaFisica)
{
    ULOG_START("CPessoaFisicapc::proCAtualizaPessoaFisica()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszDtNascimento[LEN_DTNASCIMENTO];
        VARCHAR oszNmMae[LEN_NMMAE];
        VARCHAR oszNmPai[LEN_NMPAI];
        VARCHAR oszIdTratamento[LEN_IDTRATAMENTO];
        VARCHAR oszIdEstadoCivil[LEN_IDESTADOCIVIL];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdSexo[LEN_IDSEXO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // copia os dados da estrutura para as variaveis ProC */
    STRCPY_TO_ORA(oszIdPessoa, tPessoaFisica.szIdPessoa);
    STRCPY_TO_ORA(oszDtNascimento, tPessoaFisica.szDtNascimento);
    STRCPY_TO_ORA(oszNmMae, tPessoaFisica.szNmMae);
    STRCPY_TO_ORA(oszNmPai, tPessoaFisica.szNmPai);
    STRCPY_TO_ORA(oszIdTratamento, tPessoaFisica.szIdTratamento);
    STRCPY_TO_ORA(oszIdEstadoCivil, tPessoaFisica.szIdEstadoCivil);
    STRCPY_TO_ORA(oszIdPais, tPessoaFisica.szIdPais);
    STRCPY_TO_ORA(oszIdSexo, tPessoaFisica.szIdSexo);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    // Atualiza a tabela Pessoa
    EXEC SQL UPDATE Customer.PessoaFisica
                SET idpessoa            = :oszIdPessoa
                  , dtnascimento        = to_date(:oszDtNascimento, 'DD/MM/YYYY')
                  , nmmae               = :oszNmMae
                  , nmpai               = :oszNmPai
                  , idtratamento        = :oszIdTratamento
                  , idestadocivil       = :oszIdEstadoCivil
                  , idpais              = :oszIdPais
                  , idsexo              = :oszIdSexo
                  , idusuarioalteracao  = :oszIdUsuarioAlteracao
                  , dtultimaalteracao   = SYSDATE
              WHERE idpessoa            = to_number(:oszIdPessoa);

    ULOG_END("CPessoaFisicapc::proCAtualizaPessoaFisica()");
    return;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaFisicapc::proCAtualizaPessoaFisica()");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
bool CPessoaFisicapc::proCBuscaPessoaFisica(TPessoaFisica *ptPessoaFisica)
{
    ULOG_START("CPessoaFisicapc::proCBuscaPessoaFisica()");
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszDtNascimento[LEN_DTNASCIMENTO];
        VARCHAR oszNmMae[LEN_NMMAE];
        VARCHAR oszNmPai[LEN_NMPAI];
        VARCHAR oszIdTratamento[LEN_IDTRATAMENTO];
        VARCHAR oszIdEstadoCivil[LEN_IDESTADOCIVIL];
        VARCHAR oszIdPais[LEN_IDPAIS];
        VARCHAR oszIdSexo[LEN_IDSEXO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoa = 0;
        short iDtNascimento = 0;
        short iNmMae = 0;
        short iNmPai = 0;
        short iIdTratamento = 0;
        short iIdEstadoCivil = 0;
        short iIdPais = 0;
        short iIdSexo = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // Copia dos valores chaves para as variáveis ProC.
    STRCPY_TO_ORA(oszIdPessoa, ptPessoaFisica->szIdPessoa);

    // Bloco de definição e execução do SQL.
    EXEC SQL SELECT idpessoa
                  , to_char(dtnascimento, 'DD/MM/YYYY')
                  , nmmae
                  , nmpai
                  , idtratamento
                  , idestadocivil
                  , idpais
                  , idsexo
                  , idusuarioalteracao
                  , dtultimaalteracao
               INTO :oszIdPessoa:iIdPessoa
                  , :oszDtNascimento:iDtNascimento
                  , :oszNmMae:iNmMae
                  , :oszNmPai:iNmPai
                  , :oszIdTratamento:iIdTratamento
                  , :oszIdEstadoCivil:iIdEstadoCivil
                  , :oszIdPais:iIdPais
                  , :oszIdSexo:iIdSexo
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.PessoaFisica
              WHERE idPessoa = to_number(:oszIdPessoa);

    // Copias os dados da estrutura ProC para a estrutura C++.
    if(iIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdPessoa, oszIdPessoa);
    }
    if(iDtNascimento != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szDtNascimento, oszDtNascimento);
    }
    if(iNmMae != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szNmMae, oszNmMae);
    }
    if(iNmPai != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szNmPai, oszNmPai);
    }
    if(iIdTratamento != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdTratamento, oszIdTratamento);
    }
    if(iIdEstadoCivil != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdEstadoCivil, oszIdEstadoCivil);
    }
    if(iIdPais != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdPais, oszIdPais);
    }
    if(iIdSexo != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdSexo, oszIdSexo);
    }
    if(iIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if(iDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaFisica->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOGI( "Finalizando proCBuscaPessoaFisica <FOUND>");
    ULOG_END("CPessoaFisicapc::proCBuscaPessoaFisica()");
    return true;

    naoexiste:
        ULOGI( "Finalizando proCBuscaPessoaFisica <NOT FOUND>");
        ULOG_END("CPessoaFisicapc::proCBuscaPessoaFisica()");
        return false;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaFisicapc::proCBuscaPessoaFisica()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
