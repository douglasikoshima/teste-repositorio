#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classServico.h";

//
// Construtor e Destrutor
CServico::CServico()
{
    memset(&tTabela  , 0x00, sizeof(tTabela));
}

CServico::~CServico()
{
}

//
// Metodos getter
char* CServico::getIdServicoLinha()
{
    return ((char *)tTabela.sIdServicoLinha.arr);
}
char* CServico::getInPlano()
{
    return ((char *)tTabela.sInPlano.arr);
}
char* CServico::getIdPacote()
{
    return ((char *)tTabela.sIdPacote.arr);
}
char* CServico::getNmServico()
{
    return ((char *)tTabela.sNmServico.arr);
}


//
// Metodos setter
void CServico::setIdServicoLinha(char* pDado)
{
    if(pDado == NULL)
        tTabela.iIdServicoLinha_ora= -1;
    else {
        STRCPY_TO_ORA(tTabela.sIdServicoLinha, pDado);
        tTabela.iIdServicoLinha_ora = 0;
    }
}
void CServico::setInPlano(char* pDado)
{
    if(pDado == NULL)
        tTabela.iInPlano_ora= -1;
    else {
        STRCPY_TO_ORA(tTabela.sInPlano, pDado);
        tTabela.iInPlano_ora= 0;
    }
}
void CServico::setIdPacote(char* pDado)
{
    if(pDado == NULL)
            tTabela.iIdPacote_ora= -1;
    else {
        STRCPY_TO_ORA(tTabela.sIdPacote, pDado);
        tTabela.iIdPacote_ora= 0;
    }
}
void CServico::setNmServico(char* pDado)
{
printf("tam=%d\n", strlen(pDado));
    if(pDado == NULL)
        tTabela.iNmServico_ora= -1;
    else {
        STRCPY_TO_ORA(tTabela.sNmServico, pDado);
        tTabela.iNmServico_ora= 0;
    }
}


//Metodos de acesso ao Banco de Dados

CServico* CServico::RecuperarTodos(int* iNroObjetos, char* pIdLinha)
{
    ULOG_START("CServico::RecuperarTodos()");
    struct sqlca sqlca;
    CServico* oLocal = NULL;
    int iNroObjLocal = 1;

    EXEC SQL BEGIN DECLARE SECTION;
        TTABSERVICO tSt;
	    VARCHAR sIdLinha[LEN_NUMBER + LEN_EOS];
    EXEC SQL END DECLARE SECTION;

    memset(&tSt, 0x00, sizeof(tSt));

	STRCPY_TO_ORA(sIdLinha, pIdLinha);

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara o Driving Cursor
	EXEC SQL DECLARE cDriving CURSOR FOR
	SELECT
	    PLANOSERVICOLINHA.IDSERVICOLINHA,
	    PLANOSERVICOLINHA.INPLANO,
	    PACOTE.IDPACOTE,
	    PLANOSERVICO.NMSERVICO
	FROM
	    LINHA.PLANOSERVICOLINHA PLANOSERVICOLINHA,
	    LINHA.PLANOSERVICO PLANOSERVICO,
	    LINHA.PACOTE PACOTE
	WHERE PLANOSERVICOLINHA.IDSERVICO = PLANOSERVICO.IDSERVICO
	AND   PLANOSERVICO.IDSERVICO = PACOTE.IDSERVICO
	AND   PLANOSERVICOLINHA.INPLANO = 0
	AND   PLANOSERVICOLINHA.INCONTRATO = 0
	AND   PLANOSERVICOLINHA.IDLINHATELEFONICA = :sIdLinha;

	EXEC SQL OPEN cDriving;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
		
		EXEC SQL FETCH cDriving 
                  INTO :tSt.sIdServicoLinha:tSt.iIdServicoLinha_ora,
					   :tSt.sInPlano:tSt.iInPlano_ora,
					   :tSt.sIdPacote:tSt.iIdPacote_ora,
					   :tSt.sNmServico:tSt.iNmServico_ora;

		// Aloca memória para o objeto atual.
		if ((oLocal = (CServico*) realloc((void *)oLocal, (sizeof(CServico) * iNroObjLocal))) != NULL)
        {
			oLocal[iNroObjLocal-1].setIdServicoLinha((char*)tSt.sIdServicoLinha.arr);
			oLocal[iNroObjLocal-1].setInPlano((char*)tSt.sInPlano.arr);
			oLocal[iNroObjLocal-1].setIdPacote((char*)tSt.sIdPacote.arr);
			oLocal[iNroObjLocal-1].setNmServico((char*)tSt.sNmServico.arr);
		} 
        else 
        {
			if (oLocal) 
                free(oLocal);

	        EXEC SQL CLOSE cDriving;
			ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
			ULOG_END("CServico::RecuperarTodos()");
			throw TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		}
	}

	EXEC SQL CLOSE cDriving;

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CServico::RecuperarTodos()");
	return oLocal;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CServico::RecuperarTodos()");
		throw TuxBasicOraException(sqlca.sqlcode);
}
