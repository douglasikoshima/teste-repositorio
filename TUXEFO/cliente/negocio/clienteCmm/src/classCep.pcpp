#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classCep.h";


CCep::CCep()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}

void CCep::setCodCep(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iCodCep_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sCodCep, pDado);
        tTabela.iCodCep_ora = 0;
    }
}
void CCep::setCodLocalidade(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iCodLocalidade_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sCodLocalidade, pDado);
        tTabela.iCodLocalidade_ora = 0;
    }
}
void CCep::setNumCep(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iNumCep_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sNumCep, pDado);
        tTabela.iNumCep_ora = 0;
    }
}
void CCep::setDatAtualizacao(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iDatAtualizacao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sDatAtualizacao, pDado);
        tTabela.iDatAtualizacao_ora = 0;
    }
}

// Usuário de alteração
void CCep::setIdUsuarioAlteracao(char* pDado) {
    if ( pDado == NULL )
    {
        tTabela.iIdUsuarioAlteracao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdUsuarioAlteracao, pDado);
        tTabela.iIdUsuarioAlteracao_ora = 0;
    }
}


char* CCep::getCodCep(void)
{
        return ((char*)tTabela.sCodCep.arr);
}
char* CCep::getCodLocalidade(void)
{
        return ((char*)tTabela.sCodLocalidade.arr);
}
char* CCep::getNumCep(void)
{
        return ((char*)tTabela.sNumCep.arr);
}
char* CCep::getDatAtualizacao(void)
{
        return ((char*)tTabela.sDatAtualizacao.arr);
}



CCep* CCep::RecuperarTodos(int* iNroObjetos)
{
    ULOG_START("CCep::RecuperarTodos()");
    
    struct sqlca sqlca;
    CCep* poObj = NULL;
    int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
        TCEP tSt;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor
	EXEC SQL DECLARE CPrincipal CURSOR FOR
            SELECT cod_cep
                   cod_localidade,
                   num_cep,
                   dat_atualizacao,
                   cod_usuario_atualizacao
              FROM endereco.cep
             WHERE cod_cep > 0;

	EXEC SQL OPEN CPrincipal;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        memset(&tSt, 0x00, sizeof(tSt));
		EXEC SQL FETCH CPrincipal 
                  INTO :tSt.sCodCep:tSt.iCodCep_ora,
                       :tSt.sCodLocalidade:tSt.iCodLocalidade_ora,
                       :tSt.sNumCep:tSt.iNumCep_ora,
                       :tSt.sDatAtualizacao:tSt.iDatAtualizacao_ora,
                       :tSt.sIdUsuarioAlteracao:tSt.iIdUsuarioAlteracao_ora;

		// Aloca memória para o objeto atual.
		if ((poObj = (CCep*) realloc((void *)poObj, (sizeof(CCep) * iNroObjLocal))) != NULL)
        {
            poObj[iNroObjLocal-1].setCodCep((char*)tSt.sCodCep.arr);
            poObj[iNroObjLocal-1].setCodLocalidade((char*)tSt.sCodLocalidade.arr);
            poObj[iNroObjLocal-1].setNumCep((char*)tSt.sNumCep.arr);
            poObj[iNroObjLocal-1].setDatAtualizacao((char*)tSt.sDatAtualizacao.arr);
            poObj[iNroObjLocal-1].setIdUsuarioAlteracao((char*)tSt.sIdUsuarioAlteracao.arr);
		} 
        else 
        {
			if (poObj) 
                free(poObj);
            ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
            ULOG_END("CCep::RecuperarTodos()");
			throw  TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
            EXEC SQL CLOSE CPrincipal;
		}
	}

    EXEC SQL CLOSE CPrincipal;

	*iNroObjetos = iNroObjLocal - 1;

	ULOG_END("CCep::RecuperarTodos()");
	return poObj;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCep::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}

