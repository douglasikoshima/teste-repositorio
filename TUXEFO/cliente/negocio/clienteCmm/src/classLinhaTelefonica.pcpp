#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#include "../include/Funcoes.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classLinhaTelefonica.h";

// Usuário de alteração
void CLinhaTelefonica::setUsuarioAlteracao(char* value) {
	if (value != NULL) {
		strncpy(sIdUsuarioAlteracao,value, 255);
		sIdUsuarioAlteracao[255]='\0';
	}
}


//
// Construtor e Destrutor
CLinhaTelefonica::CLinhaTelefonica()
{
    memset(&tTabela, 0x00, sizeof(tTabela));

	memset(sIdUsuarioAlteracao,0,256);
}

CLinhaTelefonica::~CLinhaTelefonica()
{
}

//
// Metodos setter
void CLinhaTelefonica::setIdLinhaBase(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdLinhaBase_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdLinhaBase, pDado);
        tTabela.iIdLinhaBase_ora = 0;
    }
}

void CLinhaTelefonica::setIdLinhaTelefonica(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdLinhaTelefonica_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdLinhaTelefonica, pDado);
        tTabela.iIdLinhaTelefonica_ora = 0;
    }
}
void CLinhaTelefonica::setInDivulgacaoNrLinha(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iInDivulgacaoNrLinha_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sInDivulgacaoNrLinha, pDado);
        tTabela.iInDivulgacaoNrLinha_ora = 0;
    }
}

//
// Metodos getter
char* CLinhaTelefonica::getIdLinhaTelefonica(void)
{
        return ((char*)tTabela.sIdLinhaTelefonica.arr);
}
char* CLinhaTelefonica::getInDivulgacaoNrLinha(void)
{
        return ((char*)tTabela.sInDivulgacaoNrLinha.arr);
}

//
// Métodos de acesso a banco de dados
int CLinhaTelefonica::Alterar()
{
    ULOG_START("CLinhaTelefonica::Alterar()");
    struct sqlca sqlca;

	EXEC SQL WHENEVER SQLERROR	goto erroAlt;

    EXEC SQL UPDATE linha.linhatelefonica
		        SET indivulgacaonrlinha = :tTabela.sInDivulgacaoNrLinha,
					IdUsuarioAlteracao  = :sIdUsuarioAlteracao,
					DtUltimaAlteracao   = SYSDATE
              WHERE idlinhatelefonica = :tTabela.sIdLinhaTelefonica;
    
    ULOG_END("CLinhaTelefonica::Alterar()");
    
    if (!sqlca.sqlerrd[2])
        return NOK;
    else
        return OK;

	erroAlt:
		ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CLinhaTelefonica::Alterar()");
		throw TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

char* CLinhaTelefonica::getIdContaSisOrigem(char* pcIdLinhaSisOrigem) 
{

	ULOG_START("CLinhaTelefonica::getIdContaSisOrigem()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
		char pcOraIdLinha[256];
		char pcOraIdConta[256];
	EXEC SQL END DECLARE SECTION;

	strncpy(pcOraIdLinha, pcIdLinhaSisOrigem, 255);
	char* pcIdConta = (char*) malloc(256);

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	EXEC SQL WHENEVER NOT FOUND GOTO sqlError;

	// Recupera o ID se a linha for da pessoa.
	EXEC SQL SELECT LPAD(con.IDCONTASISTEMAORIGEM, 10, '0')
			 INTO :pcOraIdConta
			 FROM LINHA.LINHATELEFONICA lin,
				  CUSTOMER.CONTA con,
				  CUSTOMER.LINHACONTA linC
			 WHERE
				  lin.idlinhatelefonica = linC.Idlinhatelefonica AND
				  linC.Idconta = con.idconta  AND
				  lin.idlinhasistemaorigem = :pcOraIdLinha;

	ULOG(pcOraIdConta);
	memcpy(pcIdConta, pcOraIdConta, 256);
	ULOG(pcIdConta);

	ULOG_END("CLinhaTelefonica::getIdContaSisOrigem()");
	return rtrim(pcIdConta);

	sqlError:
		free (pcOraIdConta);
		ULOG_END("CLinhaTelefonica::getIdContaSisOrigem()");
		throw TuxBasicSvcException("Linha pós paga não tem conta");
}

char* CLinhaTelefonica::getLinhaSisOrigem(char* pcNrLinha, int iIdPessoa)
{
    ULOG_START("CLinhaTelefonica::getLinhaSisOrigem()");
	struct sqlca sqlca;
    static char pLinSisOrig[LEN_NUMBER + LEN_EOS];
	
	EXEC SQL BEGIN DECLARE SECTION;
		char pcOraNrLinha[256];
		char pcOraCdArea[3];
		int iNrLin;
		char cIdLinSisOr[LEN_NUMBER + LEN_EOS];
		int iOraIdPessoa;
		int iIdTpLinha;
	EXEC SQL END DECLARE SECTION;

    
	strncpy(pcOraCdArea, pcNrLinha, 2);
	pcOraCdArea[2]='\0';
	strncpy(pcOraNrLinha, pcNrLinha+2, 256);
	pcOraNrLinha[255]='\0';
	iOraIdPessoa = iIdPessoa;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	EXEC SQL WHENEVER NOT FOUND GOTO sqlNotFound;

	// Checa se a linha existe.
	EXEC SQL SELECT count(1)
	           INTO :iNrLin
	           FROM linha.linhabase linb,
	                apoio.arearegistro areaReg
	          WHERE linb.idAreaRegistro = areaReg.idAreaRegistro 
                AND linb.nrlinha = :pcOraNrLinha 
                AND areaReg.cdAreaRegistro = :pcOraCdArea;

    ULOG("iNrLin(%d)", iNrLin);

	// Linha não existe.
	if (iNrLin == 0){
        strcpy(pLinSisOrig, "l"); /*linha nao existe*/
        ULOG_END("CLinhaTelefonica::getLinhaSisOrigem()");
        return pLinSisOrig;
    }

	// Recupera o ID se a linha for da pessoa.
	EXEC SQL SELECT DISTINCT LPAD(LIN.IdLinhaSistemaOrigem, 10, '0'), idtipolinha
	           INTO :cIdLinSisOr, :iIdTpLinha
	           FROM LINHA.LINHATELEFONICA LIN,
	                LINHA.LINHABASE LINB,
	                APOIO.AREAREGISTRO AREAREG,
	                CUSTOMER.PESSOALINHA PESSLIN,
	                CUSTOMER.PESSOADEPARA PESSDPLIN
 	          WHERE PESSDPLIN.IDPESSOADEPARA = PESSLIN.IDPESSOADEPARA 
                AND PESSLIN.IDLINHATELEFONICA = LIN.IDLINHATELEFONICA 
                AND LIN.IDLINHABASE = LINB.IDLINHABASE 
                AND LINB.IDAREAREGISTRO = AREAREG.IDAREAREGISTRO 
                AND LINB.NRLINHA = :pcOraNrLinha 
                AND AREAREG.CDAREAREGISTRO = :pcOraCdArea 
                AND PESSDPLIN.IDPESSOA = :iOraIdPessoa;
	
    ULOG("iIdTpLinha(%d)", iIdTpLinha);

	// Checa se a linha é prePaga
	if (iIdTpLinha == 2)
		strcpy(pLinSisOrig,"p");
	else 
		strcpy(pLinSisOrig, cIdLinSisOr);

	ULOG_END("CLinhaTelefonica::getLinhaSisOrigem()");
	return rtrim(pLinSisOrig);

	sqlNotFound:
		strcpy(pLinSisOrig, "n"); /*linha nao pertence a esse ID*/
		ULOG_END("CLinhaTelefonica::getLinhaSisOrigem()");
		return pLinSisOrig;

	sqlError:
		ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CLinhaTelefonica::getLinhaSisOrigem()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

char* CLinhaTelefonica::getIdLinhaSisOrigem(char* pcIdLinhaTelefonica)
{
	ULOG_START("CLinhaTelefonica::getIdLinhaSisOrigem()");
	struct sqlca sqlca;
    static char szReturn[LEN_NUMBER + LEN_EOS];
	
	EXEC SQL BEGIN DECLARE SECTION;
		char* pcOraIdLinha = pcIdLinhaTelefonica;
        VARCHAR cIdLinSisOrig[LEN_NUMBER];
        short iIdLinSisOrig;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO errorIdLinhaSisOrigem;
	EXEC SQL WHENEVER NOT FOUND GOTO notFoundIdLinhaSisOrigem;

	ULOG("pcIdLinhaTelefonica[%s]", pcIdLinhaTelefonica);

	// Recupera o ID se a linha for da pessoa.
	EXEC SQL SELECT IdLinhaSistemaOrigem
	           INTO :cIdLinSisOrig:iIdLinSisOrig
	           FROM linha.linhatelefonica
	          WHERE idlinhatelefonica = :pcOraIdLinha;
	 
    cIdLinSisOrig.arr[cIdLinSisOrig.len] = 0x00;

	ULOG("(char*)cIdLinSisOrig.arr[%s]", (char*)cIdLinSisOrig.arr);
    strcpy(szReturn, (char*)cIdLinSisOrig.arr);

	ULOG_END("CLinhaTelefonica::getIdLinhaSisOrigem()");
	return szReturn;

	notFoundIdLinhaSisOrigem:
	errorIdLinhaSisOrigem:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CLinhaTelefonica::getIdLinhaSisOrigem()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}


int CLinhaTelefonica::getIdTipoLinha(char* pcIdLinhaTelefonica) 
{
    ULOG_START("CLinhaTelefonica::getIdTipoLinha()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
		char* pcOraIdLinha = pcIdLinhaTelefonica;
        VARCHAR cIdTipoLinha[LEN_DSTIPOLINHA + LEN_EOS];
        short iIdTipoLinha;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO errorTipoLinha;
	EXEC SQL WHENEVER NOT FOUND GOTO notFoundTipoLinha;


	// Recupera o ID se a linha for da pessoa.
	EXEC SQL 
	SELECT 
		IDTIPOLINHA
	INTO
		:cIdTipoLinha:iIdTipoLinha
	FROM 
		LINHA.LINHATELEFONICA
	WHERE IDLINHATELEFONICA = :pcOraIdLinha;
	 
    cIdTipoLinha.arr[cIdTipoLinha.len] = '\0';

	ULOG_END("CLinhaTelefonica::getIdTipoLinha()");
	return atoi((char*)cIdTipoLinha.arr);

	notFoundTipoLinha:
	errorTipoLinha:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CLinhaTelefonica::getIdTipoLinha()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}


void CLinhaTelefonica::BuscaPorLinhaBase()
{
    
    ULOG_START("CLinhaTelefonica::BuscaPorLinhaBase()");
    
    EXEC SQL BEGIN DECLARE SECTION;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	
    EXEC SQL WHENEVER SQLERROR goto erro;
	EXEC SQL WHENEVER NOT FOUND GOTO sqlNotFound;

	EXEC SQL  
	SELECT 
		 IDLINHATELEFONICA
		,NVL(IDSISTEMAORIGEM, 0)
		,NVL(IDLINHASISTEMAORIGEM, 0)
		,IDLINHABASE
		,IDTIPOLINHA
		,0 
	INTO
		 :tTabela.sIdLinhaTelefonica 
		,:tTabela.sIdSistemaOrigem
		,:tTabela.sIdLinhaSistemaOrigem
		,:tTabela.sIdLinhaBase
		,:tTabela.sIdTipoLinha
		,:tTabela.sIdEstadoLinha
	FROM LINHA.LINHATELEFONICA
	WHERE IDLINHABASE = :tTabela.sIdLinhaBase; 


	ULOG_END("CLinhaTelefonica::BuscaPorLinhaBase()");
    return;

	sqlNotFound:
    erro:
    	ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    	ULOG_END("CLinhaTelefonica::BuscaPorLinhaBase()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}


void CLinhaTelefonica::InsereLinhaTelefonica()
{
    ULOG_START("CLinhaTelefonica::InsereLinhaTelefonica()");
    EXEC SQL BEGIN DECLARE SECTION;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	
    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;

	EXEC SQL SELECT to_char(Linha.LinhaTelefonicaSq.Nextval) 
               INTO :tTabela.sIdLinhaTelefonica 
               FROM DUAL;


	STRCPY_TO_ORA( tTabela.sIdSistemaOrigem,	"2" );
//	STRCPY_TO_ORA( tTabela.sIdEstadoLinha,		"1" ); 
	STRCPY_TO_ORA( tTabela.sIdUsuarioAlteracao ,"1" ); 


	EXEC SQL INSERT INTO Linha.LinhaTelefonica
                 	   ( idlinhatelefonica
                       , idsistemaorigem
                       , idlinhasistemaorigem
                       , idlinhabase
                       , idtipolinha
//                     , idestadolinha
                       , dtultimaalteracao
					   )
                 VALUES( :tTabela.sIdLinhaTelefonica 
                       , :tTabela.sIdSistemaOrigem
                       , :tTabela.sIdLinhaTelefonica
                       , :tTabela.sIdLinhaBase
//                     , :tTabela.sIdTipoLinha
                       , :tTabela.sIdEstadoLinha
                       , SYSDATE
					   );

	ULOG_END("CLinhaTelefonica::InsereLinhaTelefonica()");
    return;
	sqlNotFound:
    erro:
    	ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CLinhaTelefonica::InsereLinhaTelefonica()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

void CLinhaTelefonica::setData( TPessoaJuridicaXML xmj) 
{
	setIdSistemaOrigem( xmj.IdSistemaOrigem ); 
	setIdLinhaSistemaOrigem( xmj.idLinha ); 
    setIdTipoLinha(TIPO_LINHA_PRE_PAGO);
    setIdEstadoLinha("0");
    setIdLinhaTelefonica( xmj.idLinha ); 
    setIdLinhaBase(xmj.idLinha);
}

void CLinhaTelefonica::setData( TPessoaFisicaXML xmj) 
{
	setIdSistemaOrigem( xmj.IdSistemaOrigem ); 
	setIdLinhaSistemaOrigem( xmj.idLinha ); 
    setIdTipoLinha(xmj.idTipoLinha);
    setIdEstadoLinha("0");
    setIdLinhaTelefonica( xmj.idLinha ); 
    setIdLinhaBase(xmj.idLinha);
}

void CLinhaTelefonica::setIdSistemaOrigem(char *pszIdSistemaOrigem)
{
    STRCPY_TO_ORA(tTabela.sIdSistemaOrigem, pszIdSistemaOrigem?pszIdSistemaOrigem:"");
}

void CLinhaTelefonica::setIdLinhaSistemaOrigem(char *pszIdLinhaSistemaOrigem)
{
    STRCPY_TO_ORA(tTabela.sIdLinhaSistemaOrigem, pszIdLinhaSistemaOrigem?pszIdLinhaSistemaOrigem:"");
}

void CLinhaTelefonica::setIdEstadoLinha(char *pszIdEstadoLinha)
{
    STRCPY_TO_ORA(tTabela.sIdEstadoLinha, pszIdEstadoLinha?pszIdEstadoLinha:"");
}


void CLinhaTelefonica::setIdTipoLinha(char *pszIdTipoLinha)
{
    STRCPY_TO_ORA(tTabela.sIdTipoLinha, pszIdTipoLinha?pszIdTipoLinha:"");
}

