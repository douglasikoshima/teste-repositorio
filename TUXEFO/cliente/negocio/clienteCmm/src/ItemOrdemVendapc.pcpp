/**
 * @modulo  Clientes
 * @usecase Aba Tracking
 * @remark  Rotinas básicas para a tabela ItemOrdemVenda
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/ItemOrdemVendapc.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/GlobalPedido.h"
EXEC SQL END DECLARE SECTION;

//==============================================================================
int CItemOrdemVendapc::proCbuscarLstItemOrVdaPorPedDoc(struct DadosParametros *pDadosParametros
                                                  ,VEC_TITEMORDEMVENDA &vecTItemOrdemVenda)
{
    ULOG_START("CItemOrdemVendapc::proCbuscarLstItemOrVdaPorPedDoc()");

    if ( 0 == *pDadosParametros->idOrdemVenda )
    {
        ULOGW("ID da ordem de venda não fornecido.");
        ULOG_END("CItemOrdemVendapc::proCbuscarLstItemOrVdaPorPedDoc()");
        return RET_NAO_EXISTEM_DADOS;
    }

    int retorno = RET_SUCESSO;
    int nLinhas = 0;
    struct sqlca sqlca;
    TItemOrdemVenda tItemOrdemVenda;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR idOrdemVenda[LEN_IDORDEMVENDA+LEN_EOS];
            VARCHAR idItemOrdem[LEN_IDORDEMVENDA+LEN_EOS];
            VARCHAR dsItemOrdem[LEN_DSITEMORDEM+LEN_EOS];
            VARCHAR cdProduto[LEN_CDPRODUTO+LEN_EOS];
            VARCHAR qtItem[LEN_QTITEM+LEN_EOS];
            VARCHAR vlItem[LEN_VLITEM+LEN_EOS];
            VARCHAR nrLinha[LEN_NRLINHAORDEMVENDA+LEN_EOS];
            VARCHAR planoLinha[LEN_PLANOLINHAPEDIDO+LEN_EOS];
            VARCHAR tecnologiaLinha[LEN_TECNOLOGIALINHA+LEN_EOS];
            VARCHAR observacaoItem[LEN_OBSERVACAOITEM+LEN_EOS];
            VARCHAR statusItem[LEN_STATUSITEM+LEN_EOS];
        } tItemOrdemVendaOra;

        struct
        {
            short idOrdemVenda;
            short idItemOrdem;
            short dsItemOrdem;
            short cdProduto;
            short qtItem;
            short vlItem;
            short nrLinha;
            short planoLinha;
            short tecnologiaLinha;
            short observacaoItem;
            short statusItem;
        } tItemOrdemVendaStatusOra;

        const char *pOraCdCpfCnpj = pDadosParametros->nrDoc;
        const char *pOraNrOrdemVenda = pDadosParametros->idOrdemVenda;

    EXEC SQL END DECLARE SECTION;

    ULOG("       nrDoc = '%s'",pDadosParametros->nrDoc);
    ULOG("nrOrdemVenda = '%s'",pDadosParametros->idOrdemVenda);

    EXEC SQL WHENEVER SQLERROR GOTO erro;

    EXEC SQL DECLARE CursorItemOrdemVenda CURSOR FOR
        SELECT
            ITEMORDEMVENDA.IDORDEMVENDA,
            ITEMORDEMVENDA.IDITEMORDEM,
            ITEMORDEMVENDA.DSITEMORDEM,
            ITEMORDEMVENDA.CDPRODUTO,
            ITEMORDEMVENDA.QTITEM,
            RTRIM(LTRIM(TO_CHAR(ITEMORDEMVENDA.VLITEM,'9999,999,999,990.00MI'))) AS VLITEM,
            ITEMORDEMVENDA.NRLINHA,
            ITEMORDEMVENDA.PLANOLINHA,
            ITEMORDEMVENDA.TECNOLOGIALINHA,
            ITEMORDEMVENDA.OBSERVACAOITEM,
            ITEMORDEMVENDA.STATUSITEM
        FROM
            RETENCAO.ITEMORDEMVENDA ITEMORDEMVENDA,
            RETENCAO.ORDEMVENDA ORDEMVENDA
        WHERE
            ORDEMVENDA.NRORDEMVENDA = :pOraNrOrdemVenda
        AND ORDEMVENDA.CDCPFCNPJ = :pOraCdCpfCnpj
        AND ORDEMVENDA.IDORDEMVENDA = ITEMORDEMVENDA.IDORDEMVENDA;

    EXEC SQL OPEN CursorItemOrdemVenda;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    while(true)
    {
        memset( &tItemOrdemVendaOra, 0, sizeof(tItemOrdemVendaOra) );
        memset( &tItemOrdemVendaStatusOra,-1, sizeof(tItemOrdemVendaStatusOra) );

        EXEC SQL FETCH CursorItemOrdemVenda INTO :tItemOrdemVendaOra:tItemOrdemVendaStatusOra;

        nLinhas++;

        CONVIND(tItemOrdemVendaOra.idOrdemVenda,tItemOrdemVendaStatusOra.idOrdemVenda);
        CONVIND(tItemOrdemVendaOra.idItemOrdem,tItemOrdemVendaStatusOra.idItemOrdem);
        CONVIND(tItemOrdemVendaOra.dsItemOrdem,tItemOrdemVendaStatusOra.dsItemOrdem);
        CONVIND(tItemOrdemVendaOra.cdProduto,tItemOrdemVendaStatusOra.cdProduto);
        CONVIND(tItemOrdemVendaOra.qtItem,tItemOrdemVendaStatusOra.qtItem);
        CONVIND(tItemOrdemVendaOra.vlItem,tItemOrdemVendaStatusOra.vlItem);
        CONVIND(tItemOrdemVendaOra.nrLinha,tItemOrdemVendaStatusOra.nrLinha);
        CONVIND(tItemOrdemVendaOra.planoLinha,tItemOrdemVendaStatusOra.planoLinha);
        CONVIND(tItemOrdemVendaOra.tecnologiaLinha,tItemOrdemVendaStatusOra.tecnologiaLinha);
        CONVIND(tItemOrdemVendaOra.observacaoItem,tItemOrdemVendaStatusOra.observacaoItem);
        CONVIND(tItemOrdemVendaOra.statusItem,tItemOrdemVendaStatusOra.statusItem);

        tItemOrdemVenda.setIdOrdemVenda(tItemOrdemVendaOra.idOrdemVenda.arr);
        tItemOrdemVenda.setNrItemOrdem(tItemOrdemVendaOra.idItemOrdem.arr);
        tItemOrdemVenda.setDsItemOrdem(tItemOrdemVendaOra.dsItemOrdem.arr);
        tItemOrdemVenda.setCdProduto(tItemOrdemVendaOra.cdProduto.arr);
        tItemOrdemVenda.setQtItem(tItemOrdemVendaOra.qtItem.arr);
        tItemOrdemVenda.setVlItem(tItemOrdemVendaOra.vlItem.arr);
        tItemOrdemVenda.setNrLinha(tItemOrdemVendaOra.nrLinha.arr);
        tItemOrdemVenda.setPlanoLinha(tItemOrdemVendaOra.planoLinha.arr);
        tItemOrdemVenda.setTecnologiaLinha(tItemOrdemVendaOra.tecnologiaLinha.arr);
        tItemOrdemVenda.setObservacaoItem(tItemOrdemVendaOra.observacaoItem.arr);
        tItemOrdemVenda.setStatusItem(tItemOrdemVendaOra.statusItem.arr);

        vecTItemOrdemVenda.push_back(tItemOrdemVenda);
    }

    if ( 1403 == sqlca.sqlcode )
    {
        if ( 0 == nLinhas )
        {
            retorno = RET_NAO_EXISTEM_DADOS;
        }
        else
        {
            retorno = RET_FIM_LEITURA;
        }
    }

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("retorno=%d",retorno);

    EXEC SQL CLOSE CursorItemOrdemVenda;

    ULOG("sqlca.sqlcode(close)=%d",sqlca.sqlcode);

    ULOG_END("CItemOrdemVendapc::proCbuscarLstItemOrVdaPorPedDoc()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CItemOrdemVendapc::proCbuscarLstItemOrVdaPorPedDoc()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

//==============================================================================
int CItemOrdemVendapc::proCbuscarLstItemOrVdaSapPorPedDoc(struct DadosParametros *pDadosParametros
                                                         ,VEC_TITEMORDEMVENDASAP &vecTItemOrdemVendaSap)
{
    ULOG_START("CItemOrdemVendapc::proCbuscarLstItemOrVdaSapPorPedDoc()");

    if ( 0 == *pDadosParametros->nrDoc )
    {
        throw new TuxException("24E9999","Número do documento não fornecido para busca de itens de ordem de venda.");
    }

    int retorno = RET_SUCESSO;
    int nLinhas = 0;
    struct sqlca sqlca;
    TItemOrdemVendaSap tItemOrdemVendaSap;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            //VARCHAR nrItem[LEN_NUMBER+LEN_EOS];
            VARCHAR idItemOrdem[LEN_IDORDEMVENDA+LEN_EOS];
            VARCHAR cdCpfCnpj[LEN_CDCPFCNPJ+LEN_EOS];
            VARCHAR nrPedido[LEN_NRPEDIDO+LEN_EOS];
            VARCHAR idSistemaOrigem[LEN_IDSISTEMAORIGEM+LEN_EOS];
            VARCHAR dsItemOrdem[LEN_DSITEMORDEM+LEN_EOS];
            VARCHAR cdProduto[LEN_CDPRODUTO+LEN_EOS];
            VARCHAR qtItem[LEN_QTITEM+LEN_EOS];
            VARCHAR vlItem[LEN_VLITEM+LEN_EOS];
            VARCHAR nrLinha[LEN_NRLINHAORDEMVENDA+LEN_EOS];
            VARCHAR planoLinha[LEN_PLANOLINHAPEDIDO+LEN_EOS];
            VARCHAR tecnologiaLinha[LEN_TECNOLOGIALINHA+LEN_EOS];
            VARCHAR observacaoItem[LEN_OBSERVACAOITEM+LEN_EOS];
        } tItemOrdemVendaSapOra;

        struct
        {
            //short nrItem;
            short idItemOrdem;
            short cdCpfCnpj;
            short nrPedido;
            short idSistemaOrigem;
            short dsItemOrdem;
            short cdProduto;
            short qtItem;
            short vlItem;
            short nrLinha;
            short planoLinha;
            short tecnologiaLinha;
            short observacaoItem;
        } tItemOrdemVendaSapStatusOra;

        const char *pOraCdCpfCnpj = pDadosParametros->nrDoc;
        const char *pOraIdPedido = pDadosParametros->nrPedido;
        const char *pOraNrOrdemVenda = pDadosParametros->nrOrdemVenda;

        short statusOraIdPedido = strlen(pOraIdPedido) ? 1 : 0;

    EXEC SQL END DECLARE SECTION;

    ULOG("          nrDoc = '%s'",pDadosParametros->nrDoc);
    ULOG("       nrPedido = '%s'",pDadosParametros->nrPedido);
    ULOG("   nrOrdemVenda = '%s'",pDadosParametros->nrOrdemVenda);

    EXEC SQL WHENEVER SQLERROR GOTO erro;

    EXEC SQL DECLARE CursorItOrVenda CURSOR FOR
        SELECT
            //--ROWNUM AS NRITEM,
            ITEMORDEMVENDA.IDITEMORDEM AS IDITEMPEDIDO,
            ORDEMVENDA.CDCPFCNPJ,
            ORDEMVENDA.NRPEDIDO AS IDPEDIDO,
            ORDEMVENDA.IDSISTEMAORIGEM,
            ITEMORDEMVENDA.DSITEMORDEM AS DSITEMPEDIDO,
            ITEMORDEMVENDA.CDPRODUTO,
            ITEMORDEMVENDA.QTITEM,
            RTRIM(LTRIM(TO_CHAR(ITEMORDEMVENDA.VLITEM,'9999,999,999,990.00MI'))) AS VLITEM,
            ITEMORDEMVENDA.NRLINHA,
            ITEMORDEMVENDA.PLANOLINHA,
            ITEMORDEMVENDA.TECNOLOGIALINHA,
            ITEMORDEMVENDA.OBSERVACAOITEM
        FROM
            RETENCAO.ITEMORDEMVENDA ITEMORDEMVENDA,
            RETENCAO.ORDEMVENDA ORDEMVENDA
        WHERE
            ORDEMVENDA.NRORDEMVENDA = :pOraNrOrdemVenda
        AND NVL(ORDEMVENDA.NRPEDIDO,1) = DECODE(:statusOraIdPedido,1,:pOraIdPedido,NVL(ORDEMVENDA.NRPEDIDO,1))
        AND ORDEMVENDA.CDCPFCNPJ = :pOraCdCpfCnpj
        AND ITEMORDEMVENDA.IDORDEMVENDA = ORDEMVENDA.IDORDEMVENDA
        ORDER BY
            ITEMORDEMVENDA.IDITEMORDEM;

    EXEC SQL OPEN CursorItOrVenda;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    while(true)
    {
        memset( &tItemOrdemVendaSapOra, 0, sizeof(tItemOrdemVendaSapOra) );
        memset( &tItemOrdemVendaSapStatusOra,-1, sizeof(tItemOrdemVendaSapStatusOra) );

        EXEC SQL FETCH CursorItOrVenda INTO :tItemOrdemVendaSapOra:tItemOrdemVendaSapStatusOra;

        nLinhas++;

        //CONVIND(tItemOrdemVendaSapOra.nrItem,tItemOrdemVendaSapStatusOra.nrItem);
        CONVIND(tItemOrdemVendaSapOra.idItemOrdem,tItemOrdemVendaSapStatusOra.idItemOrdem);
        CONVIND(tItemOrdemVendaSapOra.cdCpfCnpj,tItemOrdemVendaSapStatusOra.cdCpfCnpj);
        CONVIND(tItemOrdemVendaSapOra.nrPedido,tItemOrdemVendaSapStatusOra.nrPedido);
        CONVIND(tItemOrdemVendaSapOra.idSistemaOrigem,tItemOrdemVendaSapStatusOra.idSistemaOrigem);
        CONVIND(tItemOrdemVendaSapOra.dsItemOrdem,tItemOrdemVendaSapStatusOra.dsItemOrdem);
        CONVIND(tItemOrdemVendaSapOra.cdProduto,tItemOrdemVendaSapStatusOra.cdProduto);
        CONVIND(tItemOrdemVendaSapOra.qtItem,tItemOrdemVendaSapStatusOra.qtItem);
        CONVIND(tItemOrdemVendaSapOra.vlItem,tItemOrdemVendaSapStatusOra.vlItem);
        CONVIND(tItemOrdemVendaSapOra.nrLinha,tItemOrdemVendaSapStatusOra.nrLinha);
        CONVIND(tItemOrdemVendaSapOra.planoLinha,tItemOrdemVendaSapStatusOra.planoLinha);
        CONVIND(tItemOrdemVendaSapOra.tecnologiaLinha,tItemOrdemVendaSapStatusOra.tecnologiaLinha);
        CONVIND(tItemOrdemVendaSapOra.observacaoItem,tItemOrdemVendaSapStatusOra.observacaoItem);

        //tItemOrdemVendaSap.setNrItem(tItemOrdemVendaSapOra.nrItem.arr);
        tItemOrdemVendaSap.setIdItemOrdem(tItemOrdemVendaSapOra.idItemOrdem.arr);
        tItemOrdemVendaSap.setCdCpfCnpj(tItemOrdemVendaSapOra.cdCpfCnpj.arr);
        tItemOrdemVendaSap.setNrPedido(tItemOrdemVendaSapOra.nrPedido.arr);
        tItemOrdemVendaSap.setIdSistemaOrigem(tItemOrdemVendaSapOra.idSistemaOrigem.arr);
        tItemOrdemVendaSap.setDsItemOrdem(tItemOrdemVendaSapOra.dsItemOrdem.arr);
        tItemOrdemVendaSap.setCdProduto(tItemOrdemVendaSapOra.cdProduto.arr);
        tItemOrdemVendaSap.setQtItem(tItemOrdemVendaSapOra.qtItem.arr);
        tItemOrdemVendaSap.setVlItem(tItemOrdemVendaSapOra.vlItem.arr);
        tItemOrdemVendaSap.setNrLinha(tItemOrdemVendaSapOra.nrLinha.arr);
        tItemOrdemVendaSap.setPlanoLinha(tItemOrdemVendaSapOra.planoLinha.arr);
        tItemOrdemVendaSap.setTecnologiaLinha(tItemOrdemVendaSapOra.tecnologiaLinha.arr);
        tItemOrdemVendaSap.setObservacaoItem(tItemOrdemVendaSapOra.observacaoItem.arr);

        vecTItemOrdemVendaSap.push_back(tItemOrdemVendaSap);
    }

    if ( 1403 == sqlca.sqlcode )
    {
        if ( 0 == nLinhas )
        {
            retorno = RET_NAO_EXISTEM_DADOS;
        }
        else
        {
            retorno = RET_FIM_LEITURA;
        }
    }

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("retorno=%d",retorno);

    EXEC SQL CLOSE CursorItOrVenda;

    ULOG("sqlca.sqlcode(close)=%d",sqlca.sqlcode);

    ULOG_END("CItemOrdemVendapc::proCbuscarLstItemOrVdaSapPorPedDoc()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CItemOrdemVendapc::proCbuscarLstItemOrVdaSapPorPedDoc()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
