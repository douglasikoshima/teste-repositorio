///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Cliente
 * @usecase PessoaLinhaPre
 * @author  Renato Striitzel Russo
 * @author  Robinson Vieira
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/GlobalPre.h"
#include "../include/PessoaLinhaPrepc.h"
//#include "../include/SincException.h"

EXEC SQL BEGIN    DECLARE SECTION;
#include "../include/GlobalPre.h"
EXEC SQL END    DECLARE SECTION;

/********************************************************************************/
void CPessoaLinhaPrepc::proCInserePessoaLinha(TPessoaLinha *ptPessoaLinha)
{
    ULOG_START("CPessoaLinhaPrepc::proCInserePessoaLinha()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszDtPessoaLinha[LEN_DTPESSOALINHA];
        // VARCHAR oszDtPessoaLinhaOut[LEN_DTPESSOALINHAOUT];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        // VARCHAR oszDtUltimaAlteracaoOut[LEN_DTULTIMAALTERACAOOUT];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT to_char(Customer.PessoaLinhaPreSq.nextval)
        INTO :oszIdPessoaLinha FROM DUAL;


    STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaLinha, oszIdPessoaLinha);

    ULOGI("Valor da sequence %s",ptPessoaLinha->szIdPessoaLinha);

    STRCPY_TO_ORA(oszDtPessoaLinha, ptPessoaLinha->szDtPessoaLinha);
    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptPessoaLinha->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaLinha->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPessoaLinha->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);
    
    // STRCPY_TO_ORA(oszDtUltimaAlteracao, ptPessoaLinha->szDtUltimaAlteracao);

    EXEC SQL INSERT INTO Customer.PessoaLinhaPre
                       ( idpessoalinha
                       , dtpessoalinha
                       , idtiporelacionamento
                       , idpessoadepara
                       , idlinhatelefonica
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoaLinha
                       , to_date( :oszDtPessoaLinha, 'YYYYMMDDHH24MISS' )
                       , :oszIdTipoRelacionamento
                       , :oszIdPessoaDePara
                       , :oszIdLinhaTelefonica
                       , :oszIdUsuarioAlteracao
                       , SYSDATE );

    ULOG_END("CPessoaLinhaPrepc::proCInserePessoaLinha()");

    return;

    erro:

	    ULOG_END("CPessoaLinhaPrepc::proCInserePessoaLinha()");

        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
 
/********************************************************************************/
bool CPessoaLinhaPrepc::proCBuscaPessoaLinha(TPessoaLinha *ptPessoaLinha)
{
    ULOG_START("CPessoaLinhaPrepc::proCBuscaPessoaLinha()");
    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszDtPessoaLinha[LEN_DTPESSOALINHA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoaLinha = 0;
        short iDtPessoaLinha = 0;
        short iIdTipoRelacionamento = 0;
        short iIdPessoaDePara = 0;
        short iIdLinhaTelefonica = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;

    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;
    
    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptPessoaLinha->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPessoaLinha->szIdLinhaTelefonica);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT idpessoalinha
                  , dtpessoalinha
                  , idtiporelacionamento
                  , idpessoadepara
                  , idlinhatelefonica
                  , idusuarioalteracao
                  , dtultimaalteracao
               INTO :oszIdPessoaLinha:iIdPessoaLinha
                  , :oszDtPessoaLinha:iDtPessoaLinha
                  , :oszIdTipoRelacionamento:iIdTipoRelacionamento
                  , :oszIdPessoaDePara:iIdPessoaDePara
                  , :oszIdLinhaTelefonica:iIdLinhaTelefonica
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.PessoaLinhaPre
              WHERE idtiporelacionamento    = to_number( :oszIdTipoRelacionamento )
                AND idlinhatelefonica       = to_number( :oszIdLinhaTelefonica );


    if( iIdPessoaLinha != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaLinha, oszIdPessoaLinha);
    }
    if( iDtPessoaLinha != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szDtPessoaLinha, oszDtPessoaLinha);
    }
    if( iIdTipoRelacionamento != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdTipoRelacionamento, oszIdTipoRelacionamento);
    }
    if( iIdPessoaDePara != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if( iIdLinhaTelefonica != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdLinhaTelefonica, oszIdLinhaTelefonica);
    }
    if( iIdUsuarioAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if( iDtUltimaAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOG_END("CPessoaLinhaPrepc::proCBuscaPessoaLinha()");

    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaLinha <NOT FOUND>");
        ULOG_END("CPessoaLinhaPrepc::proCBuscaPessoaLinha()");
        return false;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaLinhaPrepc::proCBuscaPessoaLinha()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/********************************************************************************/
void CPessoaLinhaPrepc::proCAtualizaPessoaLinha(TPessoaLinha tPessoaLinha)
{
    ULOG_START("CPessoaLinhaPrepc::proCAtualizaPessoaLinha()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszDtPessoaLinha[LEN_DTPESSOALINHA];
        // VARCHAR oszDtPessoaLinhaOut[LEN_DTPESSOALINHAOUT];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        // VARCHAR oszDtUltimaAlteracaoOut[LEN_DTULTIMAALTERACAOOUT];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;


    STRCPY_TO_ORA(oszIdPessoaLinha, tPessoaLinha.szIdPessoaLinha);
    STRCPY_TO_ORA(oszDtPessoaLinha, tPessoaLinha.szDtPessoaLinha);
    STRCPY_TO_ORA(oszIdTipoRelacionamento, tPessoaLinha.szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara, tPessoaLinha.szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, tPessoaLinha.szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);
    // STRCPY_TO_ORA(oszDtUltimaAlteracao, tPessoaLinha.szDtUltimaAlteracao);


    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    EXEC SQL
    UPDATE Customer.PessoaLinhaPre
    SET
        idpessoalinha        = to_number(:oszIdPessoaLinha),
        dtpessoalinha        = to_date(:oszDtPessoaLinha, 'YYYYMMDDHH24MISS'),
        idtiporelacionamento = to_number(:oszIdTipoRelacionamento),
        idpessoadepara       = to_number(:oszIdPessoaDePara),
        idlinhatelefonica    = to_number(:oszIdLinhaTelefonica),
        idusuarioalteracao   = to_number(:oszIdUsuarioAlteracao),
        dtultimaalteracao    = SYSDATE
    WHERE idpessoalinha      = :oszIdPessoaLinha;
    
    ULOG_END("CPessoaLinhaPrepc::proCAtualizaPessoaLinha()");
    return;

    erro:
        ULOG_END("CPessoaLinhaPrepc::proCAtualizaPessoaLinha()");
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/********************************************************************************/
void CPessoaLinhaPrepc::proCApagaPessoaLinha(TPessoaLinha tPessoaLinha)
{
    ULOG_START("CPessoaLinhaPrepc::proCApagaPessoaLinha()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;


    STRCPY_TO_ORA(oszIdTipoRelacionamento, tPessoaLinha.szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, tPessoaLinha.szIdLinhaTelefonica);

    EXEC SQL DELETE FROM Customer.PessoaLinhaPre
                   WHERE idtiporelacionamento = to_number(:oszIdTipoRelacionamento)
                   AND   idlinhatelefonica = to_number(:oszIdLinhaTelefonica);

    ULOG_END("CPessoaLinhaPrepc::proCApagaPessoaLinha()");
    return;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaLinhaPrepc::proCApagaPessoaLinha()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
