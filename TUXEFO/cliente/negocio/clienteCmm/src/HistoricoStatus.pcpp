// HistoricoStatus.pcpp: implementation for the 
// CHistoricoStatus class.
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
EXEC SQL INCLUDE "../include/HistoricoStatus.h";

//
// Construtor e Destrutor
CHistoricoStatus::CHistoricoStatus() {
	icDtStatus = -1;

	memset(sIdUsuarioAlteracao,0,256);
}

CHistoricoStatus::~CHistoricoStatus() {
}

// Usuário de alteração
void CHistoricoStatus::setUsuarioAlteracao(char* value) {
	if (value != NULL) {
		strncpy(sIdUsuarioAlteracao,value, 255);
		sIdUsuarioAlteracao[255]='\0';
	}
}

//
// Metodos getter
int CHistoricoStatus::getIdHistoricoStatus(){
	return iIdHistoricoStatus;
}

int CHistoricoStatus::getIdPessoaUsuario(){
	return iIdPessoaUsuario;
}

int CHistoricoStatus::getIdCorrespondenciaDevolvida(){
	return iIdCorrespondenciaDevolvida;
}

int CHistoricoStatus::getIdStatusCorrespondencia(){
	return iIdStatusCorrespondencia;
}

char* CHistoricoStatus::getDtStatus(){
	if (icDtStatus < 0)
		return NULL;
	else
		return cDtStatus;
}

//
// Metodos setter
void CHistoricoStatus::setIdHistoricoStatus(int value){
	iIdHistoricoStatus = value;
}

void CHistoricoStatus::setIdPessoaUsuario(int value){
	iIdPessoaUsuario = value;
}

void CHistoricoStatus::setIdCorrespondenciaDevolvida(int value){
	iIdCorrespondenciaDevolvida = value;
}

void CHistoricoStatus::setIdStatusCorrespondencia(int value){
	iIdStatusCorrespondencia = value;
}

void CHistoricoStatus::setDtStatus(char* value){
	if (value == NULL)
		icDtStatus = -1;
	else {
		strncpy(cDtStatus, value, 10);
		cDtStatus[10]='\0';
		icDtStatus = strlen(value);
	}
}

//
// Métodos de acesso a banco de dados
void CHistoricoStatus::inclui(){
    ULOG_START("CHistoricoStatus::inclui()");

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		int iNovoId;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorInc;

	// Busca o novo ID da sequence.
	EXEC SQL
		SELECT correspondencia.HistoricoStatusSQ.NEXTVAL
		INTO :iNovoId
		FROM DUAL;
	if (sqlca.sqlcode)
	{
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CHistoricoStatus::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
	}

	// Insere no banco de dados
	EXEC SQL
	INSERT INTO correspondencia.HistoricoStatus
	(IdHistorioStatus,
	 IdPessoaUsuario,
	 IdCorrespondenciaDevolvida,
	 IdStatusCorrespondencia,
	 DtAlteracao,
	 DtStatus,
	 IdUsuarioAlteracao,
	 DtUltimaAlteracao)
	VALUES
	(:iNovoId,
	 :iIdPessoaUsuario,
	 :iIdCorrespondenciaDevolvida,
	 :iIdStatusCorrespondencia,
	 SYSDATE,
	 SYSDATE,
	 :sIdUsuarioAlteracao,
	 SYSDATE);

	// Inserção OK, coloca o ID no objeto
	iIdHistoricoStatus = iNovoId;
    ULOG_END("CHistoricoStatus::inclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorInc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CHistoricoStatus::inclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CHistoricoStatus::exclui(){

	ULOG_START("CHistoricoStatus::exclui()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorExc;

	// Remove do banco de dados
	EXEC SQL
	DELETE correspondencia.HistoricoStatus
	WHERE IdHistorioStatus = :iIdHistoricoStatus;

	// Remoção OK, seta ID do objeto para -1
	iIdHistoricoStatus = -1;

	ULOG_END("CHistoricoStatus::exclui()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorExc:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CHistoricoStatus::exclui()");
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CHistoricoStatus::altera(){

	ULOG_END("CHistoricoStatus::altera()");
	struct sqlca sqlca;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorAlt;

	// Altera no banco de dados para os dados atuais
	EXEC SQL
	UPDATE correspondencia.HistoricoStatus
	SET
	 IdPessoaUsuario = :iIdPessoaUsuario,
	 IdCorrespondenciaDevolvida = :iIdCorrespondenciaDevolvida,
	 IdStatusCorrespondencia = :iIdStatusCorrespondencia,
	 DtAlteracao = SYSDATE,
	 DtStatus = :cDtStatus:icDtStatus,
	 IdUsuarioAlteracao = :sIdUsuarioAlteracao,
	 DtUsuarioAlteracao = SYSDATE
	WHERE
	 IdHistorioStatus = :iIdHistoricoStatus;

	ULOG_END("CHistoricoStatus::altera()");
	return;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorAlt:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CHistoricoStatus::altera()");
		throw TuxBasicOraException(sqlca.sqlcode);
}