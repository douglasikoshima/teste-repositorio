/**
 * @modulo  Clientes
 * @usecase Aba Tracking
 * @remark  Rotinas básicas para a tabela EtapaPedido
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <string>

using namespace std;

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/EtapaPedidopc.h"

EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/GlobalPedido.h"
EXEC SQL END DECLARE SECTION;

//==============================================================================
// Apoio
int isOperadorLogisticoECommerce(const char *nmSistemaOrigem,struct DadosParametros *pDadosParametros);

//==============================================================================
int CEtapaPedidopc::proCbuscarLstEtapaPedidoPorPedDoc(struct DadosParametros *pDadosParametros
                                                     ,VEC_TETAPAPEDIDO &vecTEtapaPedido)
{
    ULOG_START("CEtapaPedidopc::proCbuscarLstEtapaPedidoPorPedDoc()");

    if ( 0 == *pDadosParametros->nrDoc )
    {
        throw new TuxException("24E9999","Número do documento não fornecido na busca de etapas.");
    }

    int retorno = RET_SUCESSO;
    int nLinhas = 0;
    struct sqlca sqlca;
    TEtapaPedido tEtapaPedido;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR idSistemaOrigemEtapa[LEN_IDSISTEMAORIGEM+LEN_EOS];
            VARCHAR nmSistemaOrigem[LEN_NM_SISTEMA_ORIGEM+LEN_EOS];
            VARCHAR cdCpfCnpj[LEN_CDCPFCNPJ+LEN_EOS];
            VARCHAR idOrdemVenda[LEN_IDORDEMVENDA+LEN_EOS];
            VARCHAR idPedido[LEN_IDPEDIDO+LEN_EOS];
            VARCHAR idSistemaOrigemPedido[LEN_IDSISTEMAORIGEM+LEN_EOS];
            VARCHAR dtEtapaPedido[LEN_DTETAPAPEDIDO+LEN_EOS];
            VARCHAR dtAtualizacaoEtapa[LEN_DTATUALIZACAOETAPA+LEN_EOS];
            VARCHAR observacaoEtapaPedido[LEN_OBSERVACAOETAPA+LEN_EOS];
            VARCHAR dsTipoOcorrencia[LEN_DSTIPOOCORRENCIA+LEN_EOS];
            VARCHAR dsEtapa[LEN_DSETAPA+LEN_EOS];
            VARCHAR idProdutoEntrega[LEN_IDPRODUTOENTREGA+LEN_EOS];
            VARCHAR loginUsuario[LEN_LOGINUSUARIO+LEN_EOS];
            VARCHAR dtEtapaPedido2[LEN_DTETAPAPEDIDO+LEN_EOS];
        } tEtapaPedidoOra;

        struct
        {
            short idSistemaOrigemEtapa;
            short nmSistemaOrigem;
            short cdCpfCnpj;
            short idOrdemVenda;
            short idPedido;
            short idSistemaOrigemPedido;
            short dtEtapaPedido;
            short dtAtualizacaoEtapa;
            short observacaoEtapaPedido;
            short dsTipoOcorrencia;
            short dsEtapa;
            short idProdutoEntrega;
            short loginUsuario;
            short dtEtapaPedido2;
        } tEtapaPedidoStatusOra;

        const char *pOraCdCpfCnpj = pDadosParametros->nrDoc;
        const char *pOraIdPedido = pDadosParametros->nrPedido;
        const char *pOraNrNotaFiscal = pDadosParametros->nrNotaFiscal;
        
        short statusOraIdPedido = strlen(pOraIdPedido) ? 1 : 0;

    EXEC SQL END DECLARE SECTION;

    ULOG("          nrDoc='%s'",pDadosParametros->nrDoc);
    ULOG("       nrPedido='%s',status=%d",pDadosParametros->nrPedido,statusOraIdPedido);
    ULOG("   nrNotaFiscal='%s'",pDadosParametros->nrNotaFiscal);

    EXEC SQL WHENEVER SQLERROR GOTO erro;

    EXEC SQL DECLARE CursorEtapaPedido CURSOR FOR
        SELECT DISTINCT
            ETAPAPEDIDO.IDSISTEMAORIGEMETAPA,
            SISTEMAORIGEM.NMSISTEMAORIGEM,
            ETAPAPEDIDO.CDCPFCNPJ,
            ETAPAPEDIDO.IDORDEMVENDA,
            NULL AS IDPEDIDO,
            ETAPAPEDIDO.IDSISTEMAORIGEMPEDIDO,
            TO_CHAR(ETAPAPEDIDO.DTETAPAPEDIDO,'DD/MM/YYYY HH24:MI:SS') AS DTETAPAPEDIDO,
            TO_CHAR(ETAPAPEDIDO.DTATUALIZACAOETAPA,'DD/MM/YYYY HH24:MI:SS') AS DTATUALIZACAOETAPA,
            NVL(ETAPAPEDIDO.OBSERVACAOETAPAPEDIDO,' ') AS OBSERVACAOETAPAPEDIDO,
            ETAPAPEDIDO.DSTIPOOCORRENCIA,
            ETAPAPEDIDO.DSETAPA,
            ETAPAPEDIDO.IDPRODUTOENTREGA,
            ETAPAPEDIDO.LOGINUSUARIO,
            ETAPAPEDIDO.DTETAPAPEDIDO
        FROM
            RETENCAO.ETAPAPEDIDO ETAPAPEDIDO,
            APOIO.SISTEMAORIGEM SISTEMAORIGEM
        WHERE
            ETAPAPEDIDO.CDCPFCNPJ = :pOraCdCpfCnpj
        AND ETAPAPEDIDO.IDSISTEMAORIGEMETAPA = SISTEMAORIGEM.IDSISTEMAORIGEM
        AND (ETAPAPEDIDO.IDPEDIDO IN (SELECT PEDIDO.IDPEDIDO FROM RETENCAO.PEDIDO PEDIDO WHERE PEDIDO.CDCPFCNPJ = :pOraCdCpfCnpj AND PEDIDO.IDPEDIDO=:pOraIdPedido)
         OR  ETAPAPEDIDO.IDORDEMVENDA IN (SELECT ORDEMVENDA.IDORDEMVENDA FROM RETENCAO.ORDEMVENDA ORDEMVENDA WHERE ORDEMVENDA.CDCPFCNPJ = :pOraCdCpfCnpj AND ORDEMVENDA.INCORROMPIDO = 0 AND NVL(ORDEMVENDA.NRPEDIDO,1)=DECODE(:statusOraIdPedido,1,:pOraIdPedido,NVL(ORDEMVENDA.NRPEDIDO,1)))
         OR  ETAPAPEDIDO.IDPRODUTOENTREGA IN (SELECT PRODUTOENTREGA.IDPRODUTOENTREGA FROM RETENCAO.PRODUTOENTREGA PRODUTOENTREGA WHERE PRODUTOENTREGA.CDCPFCNPJ = :pOraCdCpfCnpj AND PRODUTOENTREGA.NRNOTAFISCAL = :pOraNrNotaFiscal)
            )
        ORDER BY
            ETAPAPEDIDO.DTETAPAPEDIDO DESC;

    EXEC SQL OPEN CursorEtapaPedido;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    while(true)
    {
        memset( &tEtapaPedidoOra, 0, sizeof(tEtapaPedidoOra) );
        memset( &tEtapaPedidoStatusOra,-1, sizeof(tEtapaPedidoStatusOra) );

        EXEC SQL FETCH CursorEtapaPedido INTO :tEtapaPedidoOra:tEtapaPedidoStatusOra;

        nLinhas++;

        CONVIND(tEtapaPedidoOra.idSistemaOrigemEtapa,tEtapaPedidoStatusOra.idSistemaOrigemEtapa);
        CONVIND(tEtapaPedidoOra.nmSistemaOrigem,tEtapaPedidoStatusOra.nmSistemaOrigem);
        CONVIND(tEtapaPedidoOra.cdCpfCnpj,tEtapaPedidoStatusOra.cdCpfCnpj);
        CONVIND(tEtapaPedidoOra.idOrdemVenda,tEtapaPedidoStatusOra.idOrdemVenda);
        CONVIND(tEtapaPedidoOra.idPedido,tEtapaPedidoStatusOra.idPedido);
        CONVIND(tEtapaPedidoOra.idSistemaOrigemPedido,tEtapaPedidoStatusOra.idSistemaOrigemPedido);
        CONVIND(tEtapaPedidoOra.dtEtapaPedido,tEtapaPedidoStatusOra.dtEtapaPedido);
        CONVIND(tEtapaPedidoOra.dtAtualizacaoEtapa,tEtapaPedidoStatusOra.dtAtualizacaoEtapa);
        CONVIND(tEtapaPedidoOra.observacaoEtapaPedido,tEtapaPedidoStatusOra.observacaoEtapaPedido);
        CONVIND(tEtapaPedidoOra.dsTipoOcorrencia,tEtapaPedidoStatusOra.dsTipoOcorrencia);
        CONVIND(tEtapaPedidoOra.dsEtapa,tEtapaPedidoStatusOra.dsEtapa);
        CONVIND(tEtapaPedidoOra.idProdutoEntrega,tEtapaPedidoStatusOra.idProdutoEntrega);
        CONVIND(tEtapaPedidoOra.loginUsuario,tEtapaPedidoStatusOra.loginUsuario);

        tEtapaPedido.setIdSistemaOrigemEtapa(tEtapaPedidoOra.idSistemaOrigemEtapa.arr);
        tEtapaPedido.setNmSistemaOrigem(tEtapaPedidoOra.nmSistemaOrigem.arr);
        tEtapaPedido.setCdCpfCnpj(tEtapaPedidoOra.cdCpfCnpj.arr);
        tEtapaPedido.setIdOrdemVenda(tEtapaPedidoOra.idOrdemVenda.arr);
        tEtapaPedido.setIdPedido((unsigned char*)pOraIdPedido /*tEtapaPedidoOra.idPedido.arr*/);
        tEtapaPedido.setIdSistemaOrigemPedido(tEtapaPedidoOra.idSistemaOrigemPedido.arr);
        tEtapaPedido.setDtEtapaPedido(tEtapaPedidoOra.dtEtapaPedido.arr);
        tEtapaPedido.setDtAtualizacaoEtapa(tEtapaPedidoOra.dtAtualizacaoEtapa.arr);
        tEtapaPedido.setObservacaoEtapaPedido(tEtapaPedidoOra.observacaoEtapaPedido.arr);
        tEtapaPedido.setDsTipoOcorrencia(tEtapaPedidoOra.dsTipoOcorrencia.arr);
        tEtapaPedido.setDsEtapa(tEtapaPedidoOra.dsEtapa.arr);
        tEtapaPedido.setIdProdutoEntrega(tEtapaPedidoOra.idProdutoEntrega.arr);
        tEtapaPedido.setLoginUsuario(tEtapaPedidoOra.loginUsuario.arr);

        vecTEtapaPedido.push_back(tEtapaPedido);
    }

    if ( 1403 == sqlca.sqlcode )
    {
        if ( 0 == nLinhas )
        {
            retorno = RET_NAO_EXISTEM_DADOS;
        }
        else
        {
            retorno = RET_FIM_LEITURA;
        }
    }

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);

    EXEC SQL CLOSE CursorEtapaPedido;

    ULOG("sqlca.sqlcode(close)=%d",sqlca.sqlcode);

    ULOG("retorno=%d",retorno);

    ULOG_END("CEtapaPedidopc::proCbuscarLstEtapaPedidoPorPedDoc()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CEtapaPedidopc::proCbuscarLstEtapaPedidoPorPedDoc()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

//==============================================================================
int CEtapaPedidopc::proCbuscarLstPedidosPorDocumento(struct DadosParametros *pDadosParametros
                                            ,VEC_TETAPAPEDIDOPORDOC &vecTEtapaPedidoPorDoc)
{
    ULOG_START("CEtapaPedidopc::proCbuscarLstPedidosPorDocumento()");

    if ( 0 == *pDadosParametros->nrDoc )
    {
        throw new TuxException("24E9999","Número do documento não fornecido para geração de lista de pedidos.");
    }

    int retorno = RET_SUCESSO;
    int nLinhas = 0;
    struct sqlca sqlca;
    TEtapaPedidoPorDoc tEtapaPedidoPorDoc;
    int nElemVecTEtapaPedidoPorDoc;
    
    EXEC SQL BEGIN DECLARE SECTION;

        struct
        {
            VARCHAR nmSistemaOrigem[LEN_NM_SISTEMA_ORIGEM+LEN_EOS];
            VARCHAR sgUF[LEN_SGUF+LEN_EOS];
            VARCHAR dtAberturaPedido[LEN_DTABERTURAPEDIDO+LEN_EOS];
            VARCHAR idPedido[LEN_IDPEDIDO+LEN_EOS];
            VARCHAR idOrdemVenda[LEN_IDORDEMVENDA+LEN_EOS];
            VARCHAR nrOrdemVenda[LEN_NRORDEMVENDA+LEN_EOS];
            VARCHAR nrFornecimento[LEN_NRFORNECIMENTO+LEN_EOS];
            VARCHAR nrPicking[LEN_NRPICKING+LEN_EOS];
            //VARCHAR statusEntrega[LEN_STATUSENTREGA+LEN_EOS];
            VARCHAR inCorrompido[1+LEN_EOS];
            VARCHAR inCancelada[1+LEN_EOS];
            VARCHAR dtFornecimento[LEN_DTFORNECIMENTO+LEN_EOS];
            VARCHAR dtPicking[LEN_DTPICKING+LEN_EOS];
            VARCHAR dtPrevisaoEntrega[LEN_DTPREVISAOENTREGA+LEN_EOS];
            VARCHAR enderecoEntrega[LEN_ENDERECOENTREGA+LEN_EOS];
        } tEtapaPedidoPorDocOra;

        struct
        {
            short nmSistemaOrigem;
            short sgUF;
            short dtAberturaPedido;
            short idPedido;
            short idOrdemVenda;
            short nrOrdemVenda;
            short nrFornecimento;
            short nrPicking;
            //short statusEntrega;
            short inCorrompido;
            short inCancelada;
            short dtFornecimento;
            short dtPicking;
            short dtPrevisaoEntrega;
            short enderecoEntrega;
        } tEtapaPedidoPorDocStatusOra;

        const char *pOraCdCpfCnpj = pDadosParametros->nrDoc;

        char *pOraNrOrdemVenda;
        char *pOraIdOrdemVenda;

        VARCHAR varOraDtNotaFiscal[LEN_DTNOTAFISCAL+LEN_EOS];
        short statOraDtNotaFiscal = 0;

        VARCHAR varOraNrNotaFiscal[LEN_NRNOTAFISCAL+LEN_EOS];
        short statOraNrNotaFiscal = 0;

        VARCHAR varOraStatusEntrega[LEN_STATUSENTREGA+LEN_EOS];
        short statOraStatusEntrega;

        VARCHAR varOraSerieNotaFiscal[LEN_SERIENOTAFISCAL+LEN_EOS];
        short statOraSerieNotaFiscal;

    EXEC SQL END DECLARE SECTION;

    ULOG("          nrDoc = '%s'",pOraCdCpfCnpj);

    EXEC SQL WHENEVER SQLERROR GOTO erro;

    EXEC SQL DECLARE CursorEtapaPorDoc CURSOR FOR
        SELECT
            NMSISTEMAORIGEM,
            DECODE(SGUF,'SI','SP',SGUF) AS SGUF,
            TO_CHAR(DTABERTURAPEDIDO,'DD/MM/YYYY') AS DTABERTURAPEDIDO,
            IDPEDIDO,
            IDORDEMVENDA,
            NRORDEMVENDA,
            NRFORNECIMENTO,
            NRPICKING,
            --//STATUSENTREGA,
            INCORROMPIDO,
            INCANCELADA,
            TO_CHAR(DTFORNECIMENTO, 'DD/MM/YYYY') AS DTFORNECIMENTO,
            TO_CHAR(DTPICKING, 'DD/MM/YYYY') AS DTPICKING,
            TO_CHAR(DTPREVISAOENTREGA, 'DD/MM/YYYY') AS DTPREVISAOENTREGA,
            ENDERECOENTREGA
        FROM
            (
            SELECT
                NMSISTEMAORIGEM,
                UPPER(SGUF) AS SGUF,
                DTABERTURAPEDIDO,
                IDPEDIDO,
                IDORDEMVENDA,
                NRORDEMVENDA,
                NRFORNECIMENTO, 
                NRPICKING, 
                --//STATUSENTREGA,
                INCORROMPIDO,
                INCANCELADA,
                DTFORNECIMENTO,
                DTPICKING,
                DTPREVISAOENTREGA,
                ENDERECOENTREGA
            FROM
                (
                        SELECT
                            SISTEMAORIGEM.NMSISTEMAORIGEM,
                            PEDIDO.SGUF,
                            PEDIDO.DTABERTURAPEDIDO,
                            PEDIDO.IDPEDIDO,
                            NULL AS IDORDEMVENDA,
                            NULL AS NRORDEMVENDA,
                            NULL AS NRFORNECIMENTO, 
                            NULL AS NRPICKING, 
                            --//NULL AS STATUSENTREGA,
                            0 AS INCORROMPIDO,
                            0 AS INCANCELADA,
                            NULL AS DTFORNECIMENTO,
                            NULL AS DTPICKING,
                            NULL AS DTPREVISAOENTREGA,
                            NULL AS ENDERECOENTREGA
                        FROM
                            RETENCAO.PEDIDO PEDIDO,
                            RETENCAO.ORDEMVENDA ORDEMVENDA,
                            APOIO.SISTEMAORIGEM SISTEMAORIGEM
                        WHERE 
                            PEDIDO.CDCPFCNPJ = :pOraCdCpfCnpj
                        AND PEDIDO.IDSISTEMAORIGEM = SISTEMAORIGEM.IDSISTEMAORIGEM
                        AND PEDIDO.CDCPFCNPJ = ORDEMVENDA.CDCPFCNPJ (+)
                        AND PEDIDO.IDPEDIDO = ORDEMVENDA.NRPEDIDO (+)
                        AND ORDEMVENDA.NRPEDIDO IS NULL
                    UNION    
                        SELECT
                            NVL(SISTEMAORIGEMPEDIDO.NMSISTEMAORIGEM,SISTEMAORIGEMOV.NMSISTEMAORIGEM) AS NMSISTEMAORIGEM,
                            NVL(PEDIDO.SGUF,ORDEMVENDA.UFORDEM) AS SGUF,
                            NVL(PEDIDO.DTABERTURAPEDIDO,ORDEMVENDA.DTABERTURAPEDIDO) AS DTABERTURAPEDIDO,
                            NVL(PEDIDO.IDPEDIDO,ORDEMVENDA.NRPEDIDO) AS IDPEDIDO,
                            ORDEMVENDA.IDORDEMVENDA,
                            ORDEMVENDA.NRORDEMVENDA,
                            ORDEMVENDA.NRFORNECIMENTO, 
                            ORDEMVENDA.NRPICKING, 
                            --//DECODE(NVL(ORDEMVENDA.INCANCELADA,0),0,NULL,'Ordem Eliminada SAP') AS STATUSENTREGA,
                            NVL(ORDEMVENDA.INCORROMPIDO,0) AS INCORROMPIDO,
                            NVL(ORDEMVENDA.INCANCELADA,0) AS INCANCELADA,
                            ORDEMVENDA.DTFORNECIMENTO,
                            ORDEMVENDA.DTPICKING,
                            ORDEMVENDA.DTPREVISAOENTREGA,
                            ORDEMVENDA.ENDERECOENTREGA
                        FROM
                            RETENCAO.ORDEMVENDA ORDEMVENDA,
                            RETENCAO.PEDIDO PEDIDO,
                            APOIO.SISTEMAORIGEM SISTEMAORIGEMPEDIDO,
                            APOIO.SISTEMAORIGEM SISTEMAORIGEMOV
                        WHERE 
                            ORDEMVENDA.CDCPFCNPJ = :pOraCdCpfCnpj
                        AND PEDIDO.IDSISTEMAORIGEM = SISTEMAORIGEMPEDIDO.IDSISTEMAORIGEM (+)
                        AND ORDEMVENDA.IDSISTEMAORIGEM = SISTEMAORIGEMOV.IDSISTEMAORIGEM
                        AND ORDEMVENDA.CDCPFCNPJ = PEDIDO.CDCPFCNPJ (+)
                        AND ORDEMVENDA.NRPEDIDO = PEDIDO.IDPEDIDO (+)
                )
            ORDER BY
                DTABERTURAPEDIDO DESC,
                IDPEDIDO DESC,
                NRORDEMVENDA DESC,
                DTFORNECIMENTO DESC,
                DTPICKING  DESC
            );

    EXEC SQL OPEN CursorEtapaPorDoc;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    while(true)
    {
        memset( &tEtapaPedidoPorDocOra, 0, sizeof(tEtapaPedidoPorDocOra) );
        memset( &tEtapaPedidoPorDocStatusOra,-1, sizeof(tEtapaPedidoPorDocStatusOra) );

        EXEC SQL FETCH CursorEtapaPorDoc INTO :tEtapaPedidoPorDocOra:tEtapaPedidoPorDocStatusOra;

        nLinhas++;

        CONVIND(tEtapaPedidoPorDocOra.nmSistemaOrigem,tEtapaPedidoPorDocStatusOra.nmSistemaOrigem);
        CONVIND(tEtapaPedidoPorDocOra.sgUF,tEtapaPedidoPorDocStatusOra.sgUF);
        CONVIND(tEtapaPedidoPorDocOra.dtAberturaPedido,tEtapaPedidoPorDocStatusOra.dtAberturaPedido);
        CONVIND(tEtapaPedidoPorDocOra.idPedido,tEtapaPedidoPorDocStatusOra.idPedido);
        CONVIND(tEtapaPedidoPorDocOra.idOrdemVenda,tEtapaPedidoPorDocStatusOra.idOrdemVenda);
        CONVIND(tEtapaPedidoPorDocOra.nrOrdemVenda,tEtapaPedidoPorDocStatusOra.nrOrdemVenda);
        CONVIND(tEtapaPedidoPorDocOra.nrFornecimento,tEtapaPedidoPorDocStatusOra.nrFornecimento);
        CONVIND(tEtapaPedidoPorDocOra.nrPicking,tEtapaPedidoPorDocStatusOra.nrPicking);
        //CONVIND(tEtapaPedidoPorDocOra.statusEntrega,tEtapaPedidoPorDocStatusOra.statusEntrega);
        CONVIND(tEtapaPedidoPorDocOra.inCorrompido,tEtapaPedidoPorDocStatusOra.inCorrompido);
        CONVIND(tEtapaPedidoPorDocOra.inCancelada,tEtapaPedidoPorDocStatusOra.inCancelada);
        CONVIND(tEtapaPedidoPorDocOra.enderecoEntrega,tEtapaPedidoPorDocStatusOra.enderecoEntrega);
        CONVIND(tEtapaPedidoPorDocOra.dtFornecimento,tEtapaPedidoPorDocStatusOra.dtFornecimento);
        CONVIND(tEtapaPedidoPorDocOra.dtPicking,tEtapaPedidoPorDocStatusOra.dtPicking);
        CONVIND(tEtapaPedidoPorDocOra.dtPrevisaoEntrega,tEtapaPedidoPorDocStatusOra.dtPrevisaoEntrega);

        // ULOG(" ");
        // ULOG(" nmSistemaOrigem='%s',status=%d",tEtapaPedidoPorDocOra.nmSistemaOrigem.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.nmSistemaOrigem);
        // ULOG("            sgUF='%s',status=%d",tEtapaPedidoPorDocOra.sgUF.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.sgUF);
        // ULOG("dtAberturaPedido='%s',status=%d",tEtapaPedidoPorDocOra.dtAberturaPedido.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.dtAberturaPedido);
        // ULOG("        idPedido='%s',status=%d",tEtapaPedidoPorDocOra.idPedido.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.idPedido);
        // ULOG("    idOrdemVenda='%s',status=%d",tEtapaPedidoPorDocOra.idOrdemVenda.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.idOrdemVenda);
        // ULOG("    nrOrdemVenda='%s',status=%d",tEtapaPedidoPorDocOra.nrOrdemVenda.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.nrOrdemVenda);
        // ULOG("  nrFornecimento='%s',status=%d",tEtapaPedidoPorDocOra.nrFornecimento.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.nrFornecimento);
        // ULOG("       nrPicking='%s',status=%d",tEtapaPedidoPorDocOra.nrPicking.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.nrPicking);
        // ULOG("   statusEntrega='%s',status=%d",tEtapaPedidoPorDocOra.statusEntrega.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.statusEntrega);
        // ULOG("    inCorrompido='%s',status=%d",tEtapaPedidoPorDocOra.inCorrompido.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.inCorrompido);
        // ULOG("     inCancelada='%s',status=%d",tEtapaPedidoPorDocOra.inCancelada.arr
        //                                       ,tEtapaPedidoPorDocStatusOra.inCancelada);

        tEtapaPedidoPorDoc.setNmSistemaOrigem(tEtapaPedidoPorDocOra.nmSistemaOrigem.arr);
        tEtapaPedidoPorDoc.setSgUF(tEtapaPedidoPorDocOra.sgUF.arr);
        tEtapaPedidoPorDoc.setDtAberturaPedido(tEtapaPedidoPorDocOra.dtAberturaPedido.arr);
        tEtapaPedidoPorDoc.setIdPedido(tEtapaPedidoPorDocOra.idPedido.arr);
        tEtapaPedidoPorDoc.setIdOrdemVenda(tEtapaPedidoPorDocOra.idOrdemVenda.arr);
        tEtapaPedidoPorDoc.setNrOrdemVenda(tEtapaPedidoPorDocOra.nrOrdemVenda.arr);
        //tEtapaPedidoPorDoc.setStatusEntrega(tEtapaPedidoPorDocOra.statusEntrega.arr);
        tEtapaPedidoPorDoc.setInCorrompido(tEtapaPedidoPorDocOra.inCorrompido.arr);
        tEtapaPedidoPorDoc.setInCancelada(tEtapaPedidoPorDocOra.inCancelada.arr);

        if ( strcmp((char*)tEtapaPedidoPorDocOra.inCorrompido.arr,"0") == 0 )
        {
            tEtapaPedidoPorDoc.setNrFornecimento(tEtapaPedidoPorDocOra.nrFornecimento.arr);
            tEtapaPedidoPorDoc.setDtFornecimento(tEtapaPedidoPorDocOra.dtFornecimento.arr);
            
            tEtapaPedidoPorDoc.setNrPicking(tEtapaPedidoPorDocOra.nrPicking.arr);
            tEtapaPedidoPorDoc.setDtPicking(tEtapaPedidoPorDocOra.dtPicking.arr);

            tEtapaPedidoPorDoc.setDtPrevisaoEntrega(tEtapaPedidoPorDocOra.dtPrevisaoEntrega.arr);
            tEtapaPedidoPorDoc.setEnderecoEntrega(tEtapaPedidoPorDocOra.enderecoEntrega.arr);
        }

        vecTEtapaPedidoPorDoc.push_back(tEtapaPedidoPorDoc);
    }

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    if ( 1403 == sqlca.sqlcode )
    {
        if ( 0 == nLinhas )
        {
            retorno = RET_NAO_EXISTEM_DADOS;
            ULOG("Nenhum pedido/OV encontrados!");
        }
        else
        {
            nElemVecTEtapaPedidoPorDoc = vecTEtapaPedidoPorDoc.size();
            ULOG("nElemVecTEtapaPedidoPorDoc=%d", nElemVecTEtapaPedidoPorDoc);
            for(int iCount=0; iCount < nElemVecTEtapaPedidoPorDoc; iCount++)
            {
                ULOG("         iCount=%d", iCount);

                int itOpLog = isOperadorLogisticoECommerce(vecTEtapaPedidoPorDoc.at
                                                                    (iCount).getNmSistemaOrigem()
                                                          ,pDadosParametros);

                if ( itOpLog != -1 )
                {
                    vecTEtapaPedidoPorDoc.at(iCount).
                            setStatusEntrega((unsigned char*)pDadosParametros->operadoresLogisticos[itOpLog].url);
                    ULOG("statusEntrega e-commerce='%s'", vecTEtapaPedidoPorDoc.at(iCount).getStatusEntrega());

                    // limpa os campos que não devem ser apresentados
                    vecTEtapaPedidoPorDoc.at(iCount).setIdOrdemVenda((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setNrOrdemVenda((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setNrFornecimento((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setDtFornecimento((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setNrPicking((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setDtPicking((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setDtPrevisaoEntrega((unsigned char*)"");
                    vecTEtapaPedidoPorDoc.at(iCount).setEnderecoEntrega((unsigned char*)"");
                }
                else
                {
                    pOraIdOrdemVenda = vecTEtapaPedidoPorDoc.at(iCount).getIdOrdemVenda();
                    ULOG("   idOrdemVenda='%s'", pOraIdOrdemVenda);

                    if( *pOraIdOrdemVenda )
                    {
                        bool isInCorrompido = vecTEtapaPedidoPorDoc.at(iCount).isCorrompido();
                        bool isInCancelada = vecTEtapaPedidoPorDoc.at(iCount).isCancelada();
                        ULOG("   inCorrompido=%d", isInCorrompido);
                        ULOG("    inCancelada=%d", isInCancelada);

                        if( isInCorrompido == false )
                        {
                            ULOG("VAI BUSCAR (DATA DA NOTA FISCAL) PARA A ORDEM DE VENDA");
                            statOraDtNotaFiscal = statOraNrNotaFiscal = statOraSerieNotaFiscal = 0;

                            EXEC SQL
                                SELECT
                                    TO_CHAR(DTNOTAFISCAL,'DD/MM/YYYY') AS DTNOTAFISCAL,
                                    IDNOTAFISCAL,
                                    SERIENOTAFISCAL
                                INTO
                                    :varOraDtNotaFiscal:statOraDtNotaFiscal,
                                    :varOraNrNotaFiscal:statOraNrNotaFiscal,
                                    :varOraSerieNotaFiscal:statOraSerieNotaFiscal
                                FROM
                                (
                                    SELECT
                                        ORDEMNOTAFISCAL.DTNOTAFISCAL,
                                        ORDEMNOTAFISCAL.IDNOTAFISCAL,
                                        ORDEMNOTAFISCAL.SERIENOTAFISCAL
                                    FROM
                                        RETENCAO.ORDEMNOTAFISCAL ORDEMNOTAFISCAL
                                    WHERE
                                        ORDEMNOTAFISCAL.CDCPFCNPJ = :pOraCdCpfCnpj
                                    AND ORDEMNOTAFISCAL.IDORDEMVENDA = :pOraIdOrdemVenda
                                    ORDER BY
                                        ORDEMNOTAFISCAL.DTNOTAFISCAL DESC
                                )
                                WHERE ROWNUM < 2;

                            if ( 0 == sqlca.sqlcode )
                            {
                                CONVIND(varOraDtNotaFiscal,statOraDtNotaFiscal);
                                CONVIND(varOraNrNotaFiscal,statOraNrNotaFiscal);
                                CONVIND(varOraSerieNotaFiscal,statOraSerieNotaFiscal);

                                vecTEtapaPedidoPorDoc.at(iCount).setDtNotaFiscal(varOraDtNotaFiscal.arr);
                                vecTEtapaPedidoPorDoc.at(iCount).setNrNotaFiscal(varOraNrNotaFiscal.arr);
                                vecTEtapaPedidoPorDoc.at(iCount).setSerieNotaFiscal(varOraSerieNotaFiscal.arr);

                                ULOG("    dtNotaFiscal='%s'", varOraDtNotaFiscal.arr);
                                ULOG("    nrNotaFiscal='%s'", varOraNrNotaFiscal.arr);
                                ULOG(" serieNotaFiscal='%s'", varOraSerieNotaFiscal.arr);

                                if( isInCancelada == false )
                                {
                                    ULOG("VAI BUSCAR STATUS DE ENTREGA");

                                    pOraNrOrdemVenda = vecTEtapaPedidoPorDoc.at(iCount).getNrOrdemVenda();
                                    ULOG("   nrOrdemVenda='%s'", pOraNrOrdemVenda);

                                    statOraStatusEntrega = 0;
                                    EXEC SQL
                                        SELECT
                                            STATUSENTREGA
                                        INTO
                                            :varOraStatusEntrega:statOraStatusEntrega
                                        FROM
                                        (
                                            SELECT
                                                PRODUTOENTREGA.STATUSENTREGA,
                                                PRODUTOENTREGA.DTPREVISAOENTREGA
                                            FROM
                                                RETENCAO.PRODUTOENTREGA PRODUTOENTREGA
                                            WHERE
                                                PRODUTOENTREGA.CDCPFCNPJ = :pOraCdCpfCnpj
                                            AND PRODUTOENTREGA.NRNOTAFISCAL = :varOraNrNotaFiscal
                                            AND PRODUTOENTREGA.NRORDEMVENDA = :pOraNrOrdemVenda
                                            ORDER BY
                                                PRODUTOENTREGA.DTPREVISAOENTREGA DESC
                                        )
                                        WHERE ROWNUM < 2;

                                    if ( 0 == sqlca.sqlcode )
                                    {
                                        CONVIND(varOraStatusEntrega,statOraStatusEntrega);
                                        vecTEtapaPedidoPorDoc.at(iCount).setStatusEntrega(varOraStatusEntrega.arr);
                                        ULOG("statusEntrega='%s'", varOraStatusEntrega.arr);
                                    }
                                    else
                                    {
                                        ULOG("sqlcode(1)=%d", sqlca.sqlcode);
                                    }
                                }
                                else  // if( isInCancelada == false )
                                {
                                    vecTEtapaPedidoPorDoc.at(iCount).setStatusEntrega((unsigned char*)"Ordem Eliminada SAP");
                                    ULOG("statusEntrega(1)='Ordem Eliminada SAP'");
                                }
                            }
                            else
                            {
                                if( isInCancelada )
                                {
                                    vecTEtapaPedidoPorDoc.at(iCount).setStatusEntrega((unsigned char*)"Ordem Eliminada SAP");
                                    ULOG("statusEntrega(2)='Ordem Eliminada SAP'");
                                }

                                ULOG("sqlcode(2)=%d", sqlca.sqlcode);
                            }

                        } // if( isInCorrompido == false )

                    } // if( *pOraNrOrdemVenda )
                } // if ( itOpLog != -1 ) else ...
            }

            retorno = RET_FIM_LEITURA;
        } //if ( 0 == nLinhas )
    } //if ( 1403 == sqlca.sqlcode )

    ULOG("sqlcode(3)=%d",sqlca.sqlcode);

    EXEC SQL CLOSE CursorEtapaPorDoc;

    ULOG("sqlcode(close)=%d",sqlca.sqlcode);

    ULOG("retorno=%d",retorno);

    ULOG_END("CEtapaPedidopc::proCbuscarLstPedidosPorDocumento()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CEtapaPedidopc::proCbuscarLstPedidosPorDocumento()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

int isOperadorLogisticoECommerce(const char *nmSistemaOrigem,struct DadosParametros *pDadosParametros)
{
    int it=0;
    int itMax = sizeof(pDadosParametros->operadoresLogisticos) / sizeof(OperadoresLogisticos);

    for (int it=0; it<itMax; it++)
    {
        if ( strcmp(nmSistemaOrigem,pDadosParametros->operadoresLogisticos[it].nmSistemaOrigem)==0 )
        {
            return it;
        }
    }

    return -1;
}