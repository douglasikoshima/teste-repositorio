#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

#include "../include/Funcoes.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classCarteirizacao.h";


//Construtor/Destrutor
CCarteirizacao::CCarteirizacao()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}

CCarteirizacao::~CCarteirizacao()
{
}


//Metodo setter
void CCarteirizacao::setNome(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iNome_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sNome, pDado);
        tTabela.iNome_ora = 0;
    }
}
void CCarteirizacao::setTelefone(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iTelefone_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sTelefone, pDado);
        tTabela.iTelefone_ora = 0;
    }
}
void CCarteirizacao::setCelular(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iCelular_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sCelular, pDado);
        tTabela.iCelular_ora = 0;
    }
}
void CCarteirizacao::setEmail(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iEmail_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sEmail, pDado);
        tTabela.iEmail_ora = 0;
    }
}
void CCarteirizacao::setIdTipoComunicacao(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdTipoComunicacao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdTipoComunicacao, pDado);
        tTabela.iIdTipoComunicacao_ora = 0;
    }
}
void CCarteirizacao::setIdTipoRelacionamento(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdTipoRelacionamento_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdTipoRelacionamento, pDado);
        tTabela.iIdTipoRelacionamento_ora = 0;
    }
}
void CCarteirizacao::setSgTipoRelacionamento(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iSgTipoRelacionamento_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sSgTipoRelacionamento, pDado);
        tTabela.iSgTipoRelacionamento_ora = 0;
    }
}
void CCarteirizacao::setDsTipoRelacionamento(char* pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iDsTipoRelacionamento_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sDsTipoRelacionamento, pDado);
        tTabela.iDsTipoRelacionamento_ora = 0;
    }
}


//Metodo getter
char* CCarteirizacao::getNome()
{
        return ((char*)tTabela.sNome.arr);
}
char* CCarteirizacao::getTelefone()
{
        return ((char*)tTabela.sTelefone.arr);
}
char* CCarteirizacao::getCelular()
{
        return ((char*)tTabela.sCelular.arr);
}
char* CCarteirizacao::getEmail()
{
        return ((char*)tTabela.sEmail.arr);
}
char* CCarteirizacao::getIdTipoComunicacao()
{
        return ((char*)tTabela.sIdTipoComunicacao.arr);
}
char* CCarteirizacao::getIdTipoRelacionamento()
{
        return ((char*)tTabela.sIdTipoRelacionamento.arr);
}
char* CCarteirizacao::getSgTipoRelacionamento()
{
        return ((char*)tTabela.sSgTipoRelacionamento.arr);
}
char* CCarteirizacao::getDsTipoRelacionamento()
{
        return ((char*)tTabela.sDsTipoRelacionamento.arr);
}



// Metodo de acesso ao Banco de Dados
CCarteirizacao* CCarteirizacao::RecuperaPorIdPessoa(int* iNroObjetos, char* pID)
{
    ULOG_START("CCarteirizacao::RecuperaPorIdPessoa()");
    struct sqlca sqlca;
    
    CCarteirizacao* oObj = NULL;
    int iNroObjLocal = 1;
    int iFlag;

	EXEC SQL BEGIN DECLARE SECTION;
        char sNome[LEN_NOME + LEN_EOS];
        char sDsContato[LEN_DSCONTATO + LEN_EOS];
        char sEmail[255]; 
        char sFone[255];
        char sIdTpRelac[LEN_NUMBER + LEN_EOS];
        char sSgTpRelac[LEN_SGTIPORELACIONAMENTO + LEN_EOS];
        char sDsTpRelac[LEN_DSTIPORELACIONAMENTO + LEN_EOS];

        int  iIdPessoa;
        int iIdTipoRelacionamento;
        int iIdTipoComunicacao;

        short iNome_ora;
        short iIdPessoa_ora;
        short iIdTipoRelacionamento_ora;
        short iIdTipoComunicacao_ora;
        short iEmail_ora;
        short iFone_ora;
        short iDsContato_ora;
        short iIdTpRelac_ora;
        short iSgTpRelac_ora;
        short iDsTpRelac_ora;

        char* pIdPessoa = pID;

	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;
//	EXEC SQL WHENEVER NOT FOUND DO break;

	// Declara e abre o cursor
	EXEC SQL DECLARE cCursor01 CURSOR FOR
		SELECT
		 pessoaCon.idpessoa,
		 pessoaCon.nmpessoa,
         pessoarelacionamento.idtiporelacionamento
		FROM
		  customer.pessoadepara         pessoadepara
		 ,customer.pessoa               pessoa
		 ,customer.pessoarelacionamento pessoarelacionamento
		 ,customer.pessoadepara         pessoadeparaCon
		 ,customer.pessoa               pessoaCon
		WHERE pessoadepara.idpessoa                          = pessoa.idpessoa
		  AND pessoadepara.idpessoadepara                    = pessoarelacionamento.Idpessoadepara
		  AND pessoarelacionamento.dtfimrelacionamento is null
		  AND pessoarelacionamento.idtiporelacionamento      IN (3, 4, 5)
		  AND pessoarelacionamento.idpessoadepararelacionada = pessoadeparaCon.idpessoadepara
		  AND pessoadeparaCon.idpessoa                       = pessoaCon.Idpessoa
		  AND PESSOA.IDPESSOA = :pIdPessoa;

	EXEC SQL OPEN cCursor01;

	for (;;) 
    {
		EXEC SQL FETCH cCursor01
                  INTO :iIdPessoa:iIdPessoa_ora,
                       :sNome:iNome_ora,
                       :iIdTipoRelacionamento:iIdTipoRelacionamento_ora;

        if (sqlca.sqlcode == 1403) break;

        //Executivo de Vendas e Gestor da Conta
        if ( iIdTipoRelacionamento == 4 || iIdTipoRelacionamento == 5 ){

            //Busca dados de Telefone, Email e Celular
            EXEC SQL DECLARE cCursor02 CURSOR FOR
                SELECT tipocomunicacao.idtipocomunicacao,
                       pessoacomunicacao.dscontato,
                       pessoa.nmpessoa,
                       tiporelacionamento.idtiporelacionamento,
                       tiporelacionamento.sgtiporelacionamento,
                       tiporelacionamento.nmtiporelacionamento
                  FROM customer.pessoacomunicacao,
                       customer.pessoa,
                       customer.pessoadepara,
                       customer.pessoarelacionamento,
                       apoio.tipocomunicacao,
                       customer.tiporelacionamento
                 WHERE pessoa.idpessoa                           = pessoacomunicacao.idpessoa
                   AND pessoa.idpessoa                           = pessoadepara.idpessoa
                   AND pessoadepara.idpessoadepara               = pessoarelacionamento.idpessoadepararelacionada
                   AND tipocomunicacao.idtipocomunicacao         = pessoacomunicacao.idtipocomunicacao
                   AND tiporelacionamento.idtiporelacionamento   = pessoarelacionamento.idtiporelacionamento
                   AND pessoarelacionamento.dtfimrelacionamento  IS NULL
                   AND pessoarelacionamento.idtiporelacionamento IN (4,5)
                   AND tipocomunicacao.idtipocomunicacao         IN (1, 5, 7)
                   AND pessoarelacionamento.idpessoadepararelacionada = :iIdPessoa
                 ORDER BY tipocomunicacao.idtipocomunicacao;

            EXEC SQL OPEN cCursor02;


            for(iFlag=1;;iFlag=0)
            {

		        EXEC SQL FETCH cCursor02
                          INTO :iIdTipoComunicacao:iIdTipoComunicacao_ora,
                               :sDsContato:iDsContato_ora,
                               :sNome:iNome_ora,
                               :sIdTpRelac:iIdTpRelac_ora,
                               :sSgTpRelac:iSgTpRelac_ora,
                               :sDsTpRelac:iDsTpRelac_ora;

                if (sqlca.sqlcode == 1403) break;

                if ( iFlag ){ //Aloca memoria somente uma vez
    	            // Aloca memória para o objeto atual.
                    // Inicializa valor padrao para os atributos da classe.
		            if ((oObj = (CCarteirizacao*) realloc((void *)oObj, (sizeof(CCarteirizacao) * iNroObjLocal))) != NULL)
                    {
			            oObj[iNroObjLocal-1].setNome((char*)rtrim(sNome));
			            oObj[iNroObjLocal-1].setTelefone("");
			            oObj[iNroObjLocal-1].setCelular("");
			            oObj[iNroObjLocal-1].setEmail("");

			            oObj[iNroObjLocal-1].setIdTipoRelacionamento((char*)rtrim(sIdTpRelac));
			            oObj[iNroObjLocal-1].setSgTipoRelacionamento((char*)rtrim(sSgTpRelac));
			            oObj[iNroObjLocal-1].setDsTipoRelacionamento((char*)rtrim(sDsTpRelac));
		            } 
                    else 
                    {
			            if (oObj) 
                            free(oObj);

                        EXEC SQL CLOSE cCursor01;
                        EXEC SQL CLOSE cCursor02;
                        ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
			            throw new TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		            }
                }
                switch(iIdTipoComunicacao)
                {
                    case 1://Telefone Residencial
			                oObj[iNroObjLocal-1].setTelefone((char*)rtrim(sDsContato));
                            break;
                    case 5://Endereco de email  
			                oObj[iNroObjLocal-1].setEmail((char*)rtrim(sDsContato));
                            break;
                    case 7://Celular
			                oObj[iNroObjLocal-1].setCelular((char*)rtrim(sDsContato));
                            break;
                }
            }

            if (!iFlag) //Encontrou dados
                iNroObjLocal++; //Atualizando o contador

            EXEC SQL CLOSE cCursor02;
        }
        else{ //Consultor de Relacionamento

	        EXEC SQL WHENEVER NOT FOUND CONTINUE;

	        // Select para buscar os dados esperados
	        EXEC SQL 
		        SELECT  dsemail 
		               ,nrtelefone 
		          INTO :sEmail:iEmail_ora,
		               :sFone:iFone_ora
		          FROM acesso.usuario
		         WHERE idpessoausuario = :iIdPessoa;  

	        if (sqlca.sqlcode != 1403) {
    	        // Aloca memória para o objeto atual.
                // Inicializa valor padrao para os atributos da classe.
		        if ((oObj = (CCarteirizacao*) realloc((void *)oObj, (sizeof(CCarteirizacao) * iNroObjLocal))) != NULL)
                {
			        oObj[iNroObjLocal-1].setNome((char*)rtrim(sNome));
			        oObj[iNroObjLocal-1].setTelefone("");
			        oObj[iNroObjLocal-1].setCelular((char*)rtrim(sFone));
			        oObj[iNroObjLocal-1].setEmail((char*)rtrim(sEmail));
			        oObj[iNroObjLocal-1].setIdTipoRelacionamento("3");
			        oObj[iNroObjLocal-1].setSgTipoRelacionamento("R");
			        oObj[iNroObjLocal-1].setDsTipoRelacionamento("Consultor Relacionamento");
		        } 
                else 
                {
			        if (oObj) 
                        free(oObj);

                    EXEC SQL CLOSE cCursor01;
                    EXEC SQL CLOSE cCursor02;
                    ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
                    ULOG_END("CCarteirizacao::RecuperaPorIdPessoa()");
			        throw new TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		        }

            }
            iNroObjLocal++; //Atualizando o contador
        }
	}

    EXEC SQL CLOSE cCursor01;

	*iNroObjetos = iNroObjLocal - 1;

	ULOG_END("CCarteirizacao::RecuperaPorIdPessoa()");
	return oObj;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCarteirizacao::RecuperaPorIdPessoa()");
		throw TuxBasicOraException(sqlca.sqlcode);
}



int CCarteirizacao::RecuperaPorIdPessoaUsuario(char* pID)
{
    ULOG_START("CCarteirizacao::RecuperaPorIdPessoaUsuario()");
    struct sqlca sqlca;


	EXEC SQL BEGIN DECLARE SECTION;
		char *pIdPessoa = pID;
		int iIdPessoaCR;
		short iEmail;
		short iFone;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	ULOG("Iniciando pesquisa de lupa carteira.");

	// Select para encontrar o idPessoaUsuario
	EXEC SQL 
		SELECT
		 pessoaCon.idpessoa,
		 pessoaCon.nmpessoa
		INTO
          :iIdPessoaCR,
		  :tTabela.sNome
		FROM
		  customer.pessoadepara         pessoadepara
		 ,customer.pessoa               pessoa
		 ,customer.pessoarelacionamento pessoarelacionamento
		 ,customer.pessoadepara         pessoadeparaCon
		 ,customer.pessoa               pessoaCon
		WHERE pessoadepara.idpessoa                          = pessoa.idpessoa
		  AND pessoadepara.idpessoadepara                    = pessoarelacionamento.Idpessoadepara
		  AND pessoarelacionamento.dtfimrelacionamento is null
		  AND pessoarelacionamento.idtiporelacionamento      = 3
		  AND pessoarelacionamento.idpessoadepararelacionada = pessoadeparaCon.idpessoadepara
		  AND pessoadeparaCon.idpessoa                       = pessoaCon.Idpessoa
		  AND PESSOA.IDPESSOA = :pIdPessoa;

	if (sqlca.sqlcode == 1403) {
		ULOG("Não tem consultor.");
		// Não tem consultor de relacionamento.
		ZERA_TO_ORA(tTabela.sEmail);
		ZERA_TO_ORA(tTabela.sTelefone);
		ZERA_TO_ORA(tTabela.sNome);
		ULOG_END("CCarteirizacao::RecuperaPorIdPessoaUsuario()");
		return OK;
	} else {
		tTabela.sNome.arr[255] = 0;
	}

	ULOG("Consultor: %s", tTabela.sNome.arr);

	// Select para buscar os dados esperados
	EXEC SQL 
		SELECT dsemail, 
		       nrtelefone 
		  INTO :tTabela.sEmail:iEmail,
		       :tTabela.sTelefone:iFone
		  FROM acesso.usuario
		 WHERE idpessoausuario = :iIdPessoaCR;  

	if (sqlca.sqlcode == 1403) {
		ZERA_TO_ORA(tTabela.sEmail);
		ZERA_TO_ORA(tTabela.sTelefone);
	} else {
		tTabela.sEmail.arr[255]=0;
		tTabela.sTelefone.arr[255]=0;
	}

	if (iEmail < 0)
		ZERA_TO_ORA(tTabela.sEmail);
	if (iFone < 0)
		ZERA_TO_ORA(tTabela.sTelefone);

	ULOG("Telefone: %s\nEmail: %s", tTabela.sEmail.arr, tTabela.sTelefone.arr);
    ULOG_END("CCarteirizacao::RecuperaPorIdPessoaUsuario()");
	return OK;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCarteirizacao::RecuperaPorIdPessoaUsuario()");
		throw new TuxBasicOraException(sqlca.sqlcode);
}

int CCarteirizacao::obterQtdeLinhas(char* pID)
{
    ULOG_START("CCarteirizacao::obterQtdeLinhas()");
    struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		char *pIdPessoa = pID;
        int iQtdLinha;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorQtdeLinhas;

	// Select para buscar os dados esperados
	EXEC SQL 
	SELECT
	    COUNT(1)
	INTO
		:iQtdLinha
	FROM
	    CUSTOMER.PESSOADEPARA PESSOADEPARA,
	    CUSTOMER.PESSOALINHA PESSOALINHA,
	    LINHA.LINHATELEFONICA LINHATELEFONICA,
	    LINHA.LINHABASE LINHABASE,
	    CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO
	WHERE PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
	AND   PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
	AND   PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
	AND   LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
	AND   TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C'
	AND   LINHATELEFONICA.IDTIPOLINHA IN (1, 2)
	AND   LINHABASE.IDESTADOLINHA = 1
	AND   PESSOADEPARA.IDPESSOA = :pIdPessoa;

	ULOG_END("CCarteirizacao::obterQtdeLinhas()");
	return iQtdLinha;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorQtdeLinhas:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCarteirizacao::obterQtdeLinhas()");
		throw new TuxBasicOraException(sqlca.sqlcode);
}
