///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  Sincronismo
 * @usecase PessoaJuridica
 * @author  Renato Striitzel Russo
 * @author  Carlos Eduardo Barbosa Braga
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:18 $
 **/
///////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/PessoaJuridicapc.h"
#include <memory.h>


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
void CPessoaJuridicapc::proCInserePessoaJuridica(TPessoaJuridica *ptPessoaJuridica)
{
    ULOG_START("CPessoaJuridicapc::proCInserePessoaJuridica()");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszdtFundacao[LEN_DTULTIMAALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    ULOGI( "Iniciando proCInserePessoaJuridica");

    // Copias os dados da estrutura C++ para a estrutura ProC.
    STRCPY_TO_ORA(oszIdPessoa, ptPessoaJuridica->szIdPessoa);
    STRCPY_TO_ORA(oszNmPessoaFilial, ptPessoaJuridica->szNmPessoaFilial);
    STRCPY_TO_ORA(oszNmFantasia, ptPessoaJuridica->szNmFantasia);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);
    STRCPY_TO_ORA(oszdtFundacao, ptPessoaJuridica->szdtFundacao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL INSERT INTO Customer.PessoaJuridica
                       ( idpessoa
                       , nmpessoafilial
                       , nmfantasia
                       , idusuarioalteracao
					   , dtfundacao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoa
                       , :oszNmPessoaFilial
                       , :oszNmFantasia
                       , :oszIdUsuarioAlteracao
					   , to_date(:oszdtFundacao,'DD/MM/YYYY')
                       , SYSDATE );

    ULOG_END("CPessoaJuridicapc::proCInserePessoaJuridica()");
    return;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaJuridicapc::proCInserePessoaJuridica()");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
void CPessoaJuridicapc::proCAtualizaPessoaJuridica(TPessoaJuridica tPessoaJuridica)
{
    ULOG_START("CPessoaJuridicapc::proCAtualizaPessoaJuridica()");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
		VARCHAR oszdtFundacao[LEN_DTULTIMAALTERACAO];
        // VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    ULOGI( "Iniciando proCAtualizaPessoaJuridica");

    // Copias os dados da estrutura C++ para a estrutura ProC.
    STRCPY_TO_ORA(oszIdPessoa, tPessoaJuridica.szIdPessoa);
    STRCPY_TO_ORA(oszNmPessoaFilial, tPessoaJuridica.szNmPessoaFilial);
    STRCPY_TO_ORA(oszNmFantasia, tPessoaJuridica.szNmFantasia);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIO_ALTERACAO);
    STRCPY_TO_ORA(oszdtFundacao, tPessoaJuridica.szdtFundacao);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    // Atualiza a tabela Pessoa
    EXEC SQL UPDATE Customer.PessoaJuridica
                SET 
                    nmpessoafilial      = :oszNmPessoaFilial
                  , nmfantasia          = :oszNmFantasia
                  , idusuarioalteracao  = :oszIdUsuarioAlteracao
				  , dtfundacao			= to_date(:oszdtFundacao,'DD/MM/YYYY')
                  , dtultimaalteracao   = SYSDATE
              WHERE idpessoa            = to_number(:oszIdPessoa);

    ULOG_END("CPessoaJuridicapc::proCAtualizaPessoaJuridica()");
    return;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CPessoaJuridicapc::proCAtualizaPessoaJuridica()");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/************************************************************************************/
bool CPessoaJuridicapc::proCBuscaPessoaJuridica(TPessoaJuridica *ptPessoaJuridica)
{
    // Declaração das variáveis ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoaFilial[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmPessoa[LEN_NMPESSOAFILIAL];
        VARCHAR oszNmFantasia[LEN_NMFANTASIA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];
        VARCHAR oszdtFundacao[LEN_DTULTIMAALTERACAO];
		VARCHAR oszIdTipoCarteira[LEN_IDPESSOA];

        short iIdPessoa = 0;
        short iNmPessoaFilial = 0;
        short iNmPessoa = 0;
        short iNmFantasia = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
		short idtFundacao=0;
		short iIdTipoCarteira=0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    ULOGI( "Iniciando proCBuscaPessoaJuridica [%s]",
		ptPessoaJuridica->szIdPessoa);

    // Diretivas de tratamento de excessão.
    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    // Cópia dos valores chaves para as variáveis ProC.
    STRCPY_TO_ORA(oszIdPessoa, ptPessoaJuridica->szIdPessoa);

    // Bloco de definição e execução do SQL.
    EXEC SQL 
    SELECT 
	      PESSOA.IDPESSOA
	    , PESSOAJURIDICA.NMPESSOAFILIAL
	    , PESSOAJURIDICA.NMFANTASIA
	    , PESSOAJURIDICA.IDUSUARIOALTERACAO
	    , PESSOAJURIDICA.DTULTIMAALTERACAO
	    , PESSOA.NMPESSOA
	    , TO_CHAR(PESSOAJURIDICA.DTFUNDACAO,'DD/MM/YYYY')
	    , PESSOA.IDTIPOCARTEIRA
               INTO :oszIdPessoa:iIdPessoa
                  , :oszNmPessoaFilial:iNmPessoaFilial
                  , :oszNmFantasia:iNmFantasia
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
				  , :oszNmPessoa:iNmPessoa
				  , :oszdtFundacao:idtFundacao
				  , :oszIdTipoCarteira:iIdTipoCarteira
	    
	FROM 
	    CUSTOMER.PESSOA PESSOA,
	    CUSTOMER.PESSOAJURIDICA PESSOAJURIDICA
	WHERE PESSOA.IDPESSOA = PESSOAJURIDICA.IDPESSOA
	AND   PESSOA.IDPESSOA = TO_NUMBER(:oszIdPessoa);

    // Copias os dados da estrutura ProC para a estrutura C++.
    if(iIdTipoCarteira != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdTipoCarteira, oszIdTipoCarteira);
    }
    if(iIdPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdPessoa, oszIdPessoa);
    }
    if(iNmPessoaFilial != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szNmPessoaFilial, oszNmPessoaFilial);
    }
    if(iNmFantasia != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szNmFantasia, oszNmFantasia);
    }
    if(iIdUsuarioAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if(iDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }
    if(idtFundacao != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szdtFundacao, oszdtFundacao);
    }

ULOGI( "proCBuscaPessoaJuridica 1 [%d]",iNmPessoa);
    if(iNmPessoa != -1) {
        STRCPY_FROM_ORA(ptPessoaJuridica->szNmPessoa, oszNmPessoa);
ULOGI( "proCBuscaPessoaJuridica 2 [%s]",ptPessoaJuridica->szNmPessoa);
    }

    ULOGI( "Finalizando proCBuscaPessoaJuridica <FOUND>");
    return true;

    naoexiste:
        ULOGI( "Finalizando proCBuscaPessoaJuridica <NOT FOUND>");
        return false;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
