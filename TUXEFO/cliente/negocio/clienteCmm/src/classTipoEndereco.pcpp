#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classTipoEndereco.h";

// Construtor e Destrutor
CTipoEndereco::CTipoEndereco()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}
CTipoEndereco::~CTipoEndereco()
{
}

//Setter
void CTipoEndereco::setId(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iId_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sId, pDado);
        tTabela.iId_ora = 0;
    }
}

void CTipoEndereco::setSigla(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iSigla_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sSigla, pDado);
        tTabela.iSigla_ora = 0;
    }
}

void CTipoEndereco::setDescricao(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iDescricao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sDescricao, pDado);
        tTabela.iDescricao_ora = 0;
    }
}

//Getter
char* CTipoEndereco::getId()
{
        return ((char*)tTabela.sId.arr);
}
char* CTipoEndereco::getSigla()
{
        return ((char*)tTabela.sSigla.arr);
}
char* CTipoEndereco::getDescricao()
{
        return ((char*)tTabela.sDescricao.arr);
}

//Metodos de acesso ao Banco de Dados
CTipoEndereco* CTipoEndereco::RecuperarTodos(int* iNroObjetos)
{
    ULOG_START("CTipoEndereco::RecuperarTodos()");
    
    struct sqlca sqlca;
    CTipoEndereco* poObj = NULL;
    int iNroObjLocal = 1;
    
    EXEC SQL BEGIN DECLARE SECTION;
    TTIPOENDERECO tSt;
    EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor
	EXEC SQL DECLARE CTipoEndereco CURSOR FOR
            SELECT idtipoendereco,
                   sgtipoendereco,
                   dstipoendereco
              FROM apoio.tipoendereco
             WHERE idtipoendereco > 0;

	EXEC SQL OPEN CTipoEndereco;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        memset(&tSt, 0x00, sizeof(tSt));
		EXEC SQL FETCH CTipoEndereco 
                  INTO :tSt.sId:tSt.iId_ora,
                       :tSt.sSigla:tSt.iSigla_ora,
                       :tSt.sDescricao:tSt.iDescricao_ora;

		// Aloca memória para o objeto atual.
		if ((poObj = (CTipoEndereco*) realloc((void *)poObj, (sizeof(CTipoEndereco) * iNroObjLocal))) != NULL)
        {
			poObj[iNroObjLocal-1].setId((char*)tSt.sId.arr);
			poObj[iNroObjLocal-1].setSigla((char*)tSt.sSigla.arr);
			poObj[iNroObjLocal-1].setDescricao((char*)tSt.sDescricao.arr);
		} 
        else 
        {
			if (poObj) 
                free(poObj);

            ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
            ULOG_END("CTipoEndereco::RecuperarTodos()");
			throw  TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
			
            EXEC SQL CLOSE CTipoEndereco;
		}
	}

    EXEC SQL CLOSE CTipoEndereco;

	*iNroObjetos = iNroObjLocal - 1;

	ULOG_END("CTipoEndereco::RecuperarTodos()");
	return poObj;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CTipoEndereco::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}

