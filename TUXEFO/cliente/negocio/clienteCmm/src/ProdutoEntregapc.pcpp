/**
 * @modulo  Clientes
 * @usecase Aba Tracking
 * @remark  Rotinas básicas para a tabela ProdutoEntrega
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:17 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/ProdutoEntregapc.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/GlobalPedido.h"
EXEC SQL END DECLARE SECTION;

//==============================================================================
int CProdutoEntregapc::proCbuscarProdEntregaPorId(struct DadosParametros *pDadosParametros
                                                 ,VEC_TPRODUTOENTREGA &vecTProdutoEntrega)
{
    ULOG_START("CProdutoEntregapc::proCbuscarProdEntregaPorId()");

    if ( *pDadosParametros->idProdutoEntrega == 0 )
    {
        throw new TuxException("04E9999","idProdutoEntrega não informado!");
    }

    int retorno = RET_SUCESSO;
    struct sqlca sqlca;
    TProdutoEntrega tProdutoEntrega;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR cdCpfCnpj[LEN_CDCPFCNPJ+LEN_EOS];
            VARCHAR dsCanalOrigem[LEN_DSCANALORIGEM+LEN_EOS];
            VARCHAR dsComprovanteEntrega[LEN_DSCOMPROVANTEENTREGA+LEN_EOS];
            VARCHAR dsTipoEntrega[LEN_DSTIPOENTREGA+LEN_EOS];
            VARCHAR dtNotaFiscal[LEN_DTNOTAFISCAL+LEN_EOS];
            VARCHAR dtPrevisaoEntrega[LEN_DTPREVISAOENTREGA+LEN_EOS];
            VARCHAR enderecoEntrega[LEN_ENDERECOENTREGA+LEN_EOS];
            VARCHAR idProdutoEntrega[LEN_IDPRODUTOENTREGA+LEN_EOS];
            VARCHAR idSistemaOrigem[LEN_IDSISTEMAORIGEM+LEN_EOS];
            VARCHAR nmRecebedorPedido[LEN_NMRECEBEDORPEDIDO+LEN_EOS];
            VARCHAR nrDocumentoRecebedor[LEN_NRDOCUMENTORECEBEDOR+LEN_EOS];
            VARCHAR nrNotaFiscal[LEN_NRNOTAFISCAL+LEN_EOS];
            VARCHAR nrOrdemVenda[LEN_NRORDEMVENDA+LEN_EOS];
            VARCHAR observacaoEntrega[LEN_OBSERVACAOENTREGA+LEN_EOS];
            VARCHAR serieNotaFiscal[LEN_NRNOTAFISCAL+LEN_EOS];
            VARCHAR statusEntrega[LEN_STATUSENTREGA+LEN_EOS];
            VARCHAR ufNotaFiscal[LEN_NM_SISTEMA_ORIGEM+LEN_EOS];
        } tProdutoEntregaOra;

        struct
        {
            short cdCpfCnpj;
            short dsCanalOrigem;
            short dsComprovanteEntrega;
            short dsTipoEntrega;
            short dtNotaFiscal;
            short dtPrevisaoEntrega;
            short enderecoEntrega;
            short idProdutoEntrega;
            short idSistemaOrigem;
            short nmRecebedorPedido;
            short nrDocumentoRecebedor;
            short nrNotaFiscal;
            short nrOrdemVenda;
            short observacaoEntrega;
            short serieNotaFiscal;
            short statusEntrega;
            short ufNotaFiscal;
        } tProdutoEntregaStatusOra;

        const char *poraIdProdutoEntrega = pDadosParametros->idProdutoEntrega;

    EXEC SQL END DECLARE SECTION;

    ULOG("idProdutoEntrega= '%s'",pDadosParametros->idProdutoEntrega);

    memset( &tProdutoEntregaOra, 0, sizeof(tProdutoEntregaOra) );
    memset( &tProdutoEntregaStatusOra,-1, sizeof(tProdutoEntregaStatusOra) );

    EXEC SQL WHENEVER SQLERROR GOTO erro;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            CDCPFCNPJ,
            DSCANALORIGEM,
            DSCOMPROVANTEENTREGA,
            DSTIPOENTREGA,
            TO_DATE(DTNOTAFISCAL,'DD/MM/YYYY') AS DTNOTAFISCAL,
            TO_DATE(DTPREVISAOENTREGA,'DD/MM/YYYY') AS DTPREVISAOENTREGA,
            ENDERECOENTREGA,
            IDPRODUTOENTREGA,
            IDSISTEMAORIGEM,
            NMRECEBEDORPEDIDO,
            NRDOCUMENTORECEBEDOR,
            NRNOTAFISCAL,
            NRORDEMVENDA,
            OBSERVACAOENTREGA,
            SERIENOTAFISCAL,
            STATUSENTREGA,
            UFNOTAFISCAL
        INTO
            :tProdutoEntregaOra:tProdutoEntregaStatusOra
        FROM
            RETENCAO.PRODUTOENTREGA PRODUTOENTREGA
        WHERE
            PRODUTOENTREGA.IDPRODUTOENTREGA = :poraIdProdutoEntrega;

    CONVIND(tProdutoEntregaOra.cdCpfCnpj,tProdutoEntregaStatusOra.cdCpfCnpj);
    CONVIND(tProdutoEntregaOra.dsCanalOrigem,tProdutoEntregaStatusOra.dsCanalOrigem);
    CONVIND(tProdutoEntregaOra.dsComprovanteEntrega,tProdutoEntregaStatusOra.dsComprovanteEntrega);
    CONVIND(tProdutoEntregaOra.dsTipoEntrega,tProdutoEntregaStatusOra.dsTipoEntrega);
    CONVIND(tProdutoEntregaOra.dtNotaFiscal,tProdutoEntregaStatusOra.dtNotaFiscal);
    CONVIND(tProdutoEntregaOra.dtPrevisaoEntrega,tProdutoEntregaStatusOra.dtPrevisaoEntrega);
    CONVIND(tProdutoEntregaOra.enderecoEntrega,tProdutoEntregaStatusOra.enderecoEntrega);
    CONVIND(tProdutoEntregaOra.idProdutoEntrega,tProdutoEntregaStatusOra.idProdutoEntrega);
    CONVIND(tProdutoEntregaOra.idSistemaOrigem,tProdutoEntregaStatusOra.idSistemaOrigem);
    CONVIND(tProdutoEntregaOra.nmRecebedorPedido,tProdutoEntregaStatusOra.nmRecebedorPedido);
    CONVIND(tProdutoEntregaOra.nrDocumentoRecebedor,tProdutoEntregaStatusOra.nrDocumentoRecebedor);
    CONVIND(tProdutoEntregaOra.nrNotaFiscal,tProdutoEntregaStatusOra.nrNotaFiscal);
    CONVIND(tProdutoEntregaOra.nrOrdemVenda,tProdutoEntregaStatusOra.nrOrdemVenda);
    CONVIND(tProdutoEntregaOra.observacaoEntrega,tProdutoEntregaStatusOra.observacaoEntrega);
    CONVIND(tProdutoEntregaOra.serieNotaFiscal,tProdutoEntregaStatusOra.serieNotaFiscal);
    CONVIND(tProdutoEntregaOra.statusEntrega,tProdutoEntregaStatusOra.statusEntrega);
    CONVIND(tProdutoEntregaOra.ufNotaFiscal,tProdutoEntregaStatusOra.ufNotaFiscal);

    tProdutoEntrega.setCdCpfCnpj(tProdutoEntregaOra.cdCpfCnpj.arr);
    tProdutoEntrega.setDsCanalOrigem(tProdutoEntregaOra.dsCanalOrigem.arr);
    tProdutoEntrega.setDsComprovanteEntrega(tProdutoEntregaOra.dsComprovanteEntrega.arr);
    tProdutoEntrega.setDsTipoEntrega(tProdutoEntregaOra.dsTipoEntrega.arr);
    tProdutoEntrega.setDtNotaFiscal(tProdutoEntregaOra.dtNotaFiscal.arr);
    tProdutoEntrega.setDtPrevisaoEntrega(tProdutoEntregaOra.dtPrevisaoEntrega.arr);
    tProdutoEntrega.setEnderecoEntrega(tProdutoEntregaOra.enderecoEntrega.arr);
    tProdutoEntrega.setIdProdutoEntrega(tProdutoEntregaOra.idProdutoEntrega.arr);
    tProdutoEntrega.setIdSistemaOrigem(tProdutoEntregaOra.idSistemaOrigem.arr);
    tProdutoEntrega.setNmRecebedorPedido(tProdutoEntregaOra.nmRecebedorPedido.arr);
    tProdutoEntrega.setNrDocumentoRecebedor(tProdutoEntregaOra.nrDocumentoRecebedor.arr);
    tProdutoEntrega.setNrNotaFiscal(tProdutoEntregaOra.nrNotaFiscal.arr);
    tProdutoEntrega.setNrOrdemVenda(tProdutoEntregaOra.nrOrdemVenda.arr);
    tProdutoEntrega.setObservacaoEntrega(tProdutoEntregaOra.observacaoEntrega.arr);
    tProdutoEntrega.setSerieNotaFiscal(tProdutoEntregaOra.serieNotaFiscal.arr);
    tProdutoEntrega.setStatusEntrega(tProdutoEntregaOra.statusEntrega.arr);
    tProdutoEntrega.setUfNotaFiscal(tProdutoEntregaOra.ufNotaFiscal.arr);

    vecTProdutoEntrega.push_back(tProdutoEntrega);

    if ( 1403 == sqlca.sqlcode )
    {
        retorno = RET_NAO_EXISTEM_DADOS;
    }

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("retorno=%d",retorno);

    ULOG_END("CProdutoEntregapc::proCbuscarProdEntregaPorId()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CProdutoEntregapc::proCbuscarProdEntregaPorId()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

//==============================================================================
int CProdutoEntregapc::proCbuscarLstProdEntregaPorDocOVenda(struct DadosParametros *pDadosParametros
                                                           ,VEC_TPRODUTOENTREGA &vecTProdutoEntrega)
{
    ULOG_START("CProdutoEntregapc::proCbuscarLstProdEntregaPorDocOVenda()");

    if ( 0 == *pDadosParametros->nrDoc )
    {
        throw new TuxException("24E9999","Número do documento não fornecido para busca de produtos entregues.");
    }

    //if ( 0 == *pDadosParametros->nrOrdemVenda )
    //{
    //    throw new TuxException("24E9999","Número da ordem de venda não fornecido para busca de produtos entregues.");
    //}

    if ( 0 == *pDadosParametros->nrNotaFiscal )
    {
        throw new TuxException("24E9999","Número da nota fiscal não fornecido para busca de produtos entregues.");
    }

    int retorno = RET_SUCESSO;
    int nLinhas = 0;
    struct sqlca sqlca;
    TProdutoEntrega tProdutoEntrega;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR cdCpfCnpj[LEN_CDCPFCNPJ+LEN_EOS];
            VARCHAR dsCanalOrigem[LEN_DSCANALORIGEM+LEN_EOS];
            VARCHAR dsComprovanteEntrega[LEN_DSCOMPROVANTEENTREGA+LEN_EOS];
            VARCHAR dsTipoEntrega[LEN_DSTIPOENTREGA+LEN_EOS];
            VARCHAR dtNotaFiscal[LEN_DTNOTAFISCAL+LEN_EOS];
            VARCHAR dtPrevisaoEntrega[LEN_DTPREVISAOENTREGA+LEN_EOS];
            VARCHAR enderecoEntrega[LEN_ENDERECOENTREGA+LEN_EOS];
            VARCHAR idProdutoEntrega[LEN_IDPRODUTOENTREGA+LEN_EOS];
            VARCHAR idSistemaOrigem[LEN_IDSISTEMAORIGEM+LEN_EOS];
            VARCHAR nmRecebedorPedido[LEN_NMRECEBEDORPEDIDO+LEN_EOS];
            VARCHAR nrDocumentoRecebedor[LEN_NRDOCUMENTORECEBEDOR+LEN_EOS];
            VARCHAR nrNotaFiscal[LEN_NRNOTAFISCAL+LEN_EOS];
            VARCHAR nrOrdemVenda[LEN_NRORDEMVENDA+LEN_EOS];
            VARCHAR observacaoEntrega[LEN_OBSERVACAOENTREGA+LEN_EOS];
            VARCHAR serieNotaFiscal[LEN_SERIENOTAFISCAL+LEN_EOS];
            VARCHAR statusEntrega[LEN_STATUSENTREGA+LEN_EOS];
            VARCHAR ufNotaFiscal[LEN_NM_SISTEMA_ORIGEM+LEN_EOS];
            VARCHAR dsMotivoEntrega[LEN_DSMOTIVOENTREGA+LEN_EOS];
        } tProdutoEntregaOra;

        struct
        {
            short cdCpfCnpj;
            short dsCanalOrigem;
            short dsComprovanteEntrega;
            short dsTipoEntrega;
            short dtNotaFiscal;
            short dtPrevisaoEntrega;
            short enderecoEntrega;
            short idProdutoEntrega;
            short idSistemaOrigem;
            short nmRecebedorPedido;
            short nrDocumentoRecebedor;
            short nrNotaFiscal;
            short nrOrdemVenda;
            short observacaoEntrega;
            short serieNotaFiscal;
            short statusEntrega;
            short ufNotaFiscal;
            short dsMotivoEntrega;
        } tProdutoEntregaStatusOra;

        const char *pOraCdCpfCnpj = pDadosParametros->nrDoc;
        //const char *pOraNrOrdemVenda = pDadosParametros->nrOrdemVenda;
        const char *pOraNrNotaFiscal = pDadosParametros->nrNotaFiscal;

    EXEC SQL END DECLARE SECTION;

    ULOG("          nrDoc = '%s'",pDadosParametros->nrDoc);
    //ULOG( "  nrOrdemVenda = '%s'",pDadosParametros->nrOrdemVenda);
    ULOG("   nrNotaFiscal = '%s'",pDadosParametros->nrNotaFiscal);

    EXEC SQL WHENEVER SQLERROR GOTO erro;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE CursorProdutoEntrega CURSOR FOR
        SELECT
            CDCPFCNPJ,
            DSCANALORIGEM,
            DSCOMPROVANTEENTREGA,
            DSTIPOENTREGA,
            TO_CHAR(DTNOTAFISCAL,'DD/MM/YYYY HH24:MI:SS') AS DTNOTAFISCAL,
            TO_CHAR(DTPREVISAOENTREGA,'DD/MM/YYYY HH24:MI:SS') AS DTPREVISAOENTREGA,
            ENDERECOENTREGA,
            IDPRODUTOENTREGA,
            IDSISTEMAORIGEM,
            NMRECEBEDORPEDIDO,
            NRDOCUMENTORECEBEDOR,
            NRNOTAFISCAL,
            NRORDEMVENDA,
            OBSERVACAOENTREGA,
            SERIENOTAFISCAL,
            STATUSENTREGA,
            UFNOTAFISCAL,
            DSMOTIVOENTREGA
        FROM
            RETENCAO.PRODUTOENTREGA PRODUTOENTREGA
        WHERE
            PRODUTOENTREGA.CDCPFCNPJ = :pOraCdCpfCnpj
        AND PRODUTOENTREGA.NRNOTAFISCAL = :pOraNrNotaFiscal
        ORDER BY
            PRODUTOENTREGA.DTPREVISAOENTREGA;

    EXEC SQL OPEN CursorProdutoEntrega;

    while(true)
    {
        memset( &tProdutoEntregaOra, 0, sizeof(tProdutoEntregaOra) );
        memset( &tProdutoEntregaStatusOra,-1, sizeof(tProdutoEntregaStatusOra) );

        EXEC SQL FETCH CursorProdutoEntrega INTO :tProdutoEntregaOra:tProdutoEntregaStatusOra;

        nLinhas++;

        CONVIND(tProdutoEntregaOra.cdCpfCnpj,tProdutoEntregaStatusOra.cdCpfCnpj);
        CONVIND(tProdutoEntregaOra.dsCanalOrigem,tProdutoEntregaStatusOra.dsCanalOrigem);
        CONVIND(tProdutoEntregaOra.dsComprovanteEntrega,tProdutoEntregaStatusOra.dsComprovanteEntrega);
        CONVIND(tProdutoEntregaOra.dsTipoEntrega,tProdutoEntregaStatusOra.dsTipoEntrega);
        CONVIND(tProdutoEntregaOra.dtNotaFiscal,tProdutoEntregaStatusOra.dtNotaFiscal);
        CONVIND(tProdutoEntregaOra.dtPrevisaoEntrega,tProdutoEntregaStatusOra.dtPrevisaoEntrega);
        CONVIND(tProdutoEntregaOra.enderecoEntrega,tProdutoEntregaStatusOra.enderecoEntrega);
        CONVIND(tProdutoEntregaOra.idProdutoEntrega,tProdutoEntregaStatusOra.idProdutoEntrega);
        CONVIND(tProdutoEntregaOra.idSistemaOrigem,tProdutoEntregaStatusOra.idSistemaOrigem);
        CONVIND(tProdutoEntregaOra.nmRecebedorPedido,tProdutoEntregaStatusOra.nmRecebedorPedido);
        CONVIND(tProdutoEntregaOra.nrDocumentoRecebedor,tProdutoEntregaStatusOra.nrDocumentoRecebedor);
        CONVIND(tProdutoEntregaOra.nrNotaFiscal,tProdutoEntregaStatusOra.nrNotaFiscal);
        CONVIND(tProdutoEntregaOra.nrOrdemVenda,tProdutoEntregaStatusOra.nrOrdemVenda);
        CONVIND(tProdutoEntregaOra.observacaoEntrega,tProdutoEntregaStatusOra.observacaoEntrega);
        CONVIND(tProdutoEntregaOra.serieNotaFiscal,tProdutoEntregaStatusOra.serieNotaFiscal);
        CONVIND(tProdutoEntregaOra.statusEntrega,tProdutoEntregaStatusOra.statusEntrega);
        CONVIND(tProdutoEntregaOra.ufNotaFiscal,tProdutoEntregaStatusOra.ufNotaFiscal);
        CONVIND(tProdutoEntregaOra.dsMotivoEntrega,tProdutoEntregaStatusOra.dsMotivoEntrega);

        tProdutoEntrega.setCdCpfCnpj(tProdutoEntregaOra.cdCpfCnpj.arr);
        tProdutoEntrega.setDsCanalOrigem(tProdutoEntregaOra.dsCanalOrigem.arr);
        tProdutoEntrega.setDsComprovanteEntrega(tProdutoEntregaOra.dsComprovanteEntrega.arr);
        tProdutoEntrega.setDsTipoEntrega(tProdutoEntregaOra.dsTipoEntrega.arr);
        tProdutoEntrega.setDtNotaFiscal(tProdutoEntregaOra.dtNotaFiscal.arr);
        tProdutoEntrega.setDtPrevisaoEntrega(tProdutoEntregaOra.dtPrevisaoEntrega.arr);
        tProdutoEntrega.setEnderecoEntrega(tProdutoEntregaOra.enderecoEntrega.arr);
        tProdutoEntrega.setIdProdutoEntrega(tProdutoEntregaOra.idProdutoEntrega.arr);
        tProdutoEntrega.setIdSistemaOrigem(tProdutoEntregaOra.idSistemaOrigem.arr);
        tProdutoEntrega.setNmRecebedorPedido(tProdutoEntregaOra.nmRecebedorPedido.arr);
        tProdutoEntrega.setNrDocumentoRecebedor(tProdutoEntregaOra.nrDocumentoRecebedor.arr);
        tProdutoEntrega.setNrNotaFiscal(tProdutoEntregaOra.nrNotaFiscal.arr);
        tProdutoEntrega.setNrOrdemVenda(tProdutoEntregaOra.nrOrdemVenda.arr);
        tProdutoEntrega.setObservacaoEntrega(tProdutoEntregaOra.observacaoEntrega.arr);
        tProdutoEntrega.setSerieNotaFiscal(tProdutoEntregaOra.serieNotaFiscal.arr);
        tProdutoEntrega.setStatusEntrega(tProdutoEntregaOra.statusEntrega.arr);
        tProdutoEntrega.setUfNotaFiscal(tProdutoEntregaOra.ufNotaFiscal.arr);
        tProdutoEntrega.setDsMotivoEntrega(tProdutoEntregaOra.dsMotivoEntrega.arr);

        vecTProdutoEntrega.push_back(tProdutoEntrega);
    }

    if ( 1403 == sqlca.sqlcode )
    {
        if ( 0 == nLinhas )
        {
            retorno = RET_NAO_EXISTEM_DADOS;
        }
        else
        {
            retorno = RET_FIM_LEITURA;
        }
    }

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);
    ULOG("retorno=%d",retorno);

    EXEC SQL CLOSE CursorProdutoEntrega;

    ULOG("sqlca.sqlcode(close)=%d",sqlca.sqlcode);

    ULOG_END("CProdutoEntregapc::proCbuscarLstProdEntregaPorDocOVenda()");

    return retorno;

    erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CProdutoEntregapc::proCbuscarLstProdEntregaPorDocOVenda()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
