//---------------------------------------------------------------------
//*
//* Class: classUsuario
//---------------------------------------------------------------------
//* Purpose:
//*
//* Utilizada em Lupa Linha
//* 
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio
//---------------------------------------------------------------------

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

#include <tuxfw.h>
#include "../include/Exception.h"

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE "../include/Global.h";
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classUsuario.h";


//
// Construtor e Destrutor
CUsuario::CUsuario()
{
    memset(&tUsuVO, 0x00, sizeof(tUsuVO));
}

CUsuario::CUsuario(char* pDado)
{
    ULOG_START("CUsuario::CUsuario()");
    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
	//VARCHAR sIdLinhaTelefonica[LEN_NUMBER + LEN_EOS];
    const char *sIdLinhaTelefonica = pDado;
    EXEC SQL END DECLARE SECTION;

    memset(&tUsuVO, 0x00, sizeof(tUsuVO));
    //STRCPY_TO_ORA(sIdLinhaTelefonica, pDado);
    
    ULOG("pDado=[%s]", sIdLinhaTelefonica);

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

    //
    // Esta query foi quebrada em duas para atender a incidência de homologação 4321,
    // para que seja exibido o documento conforme o nrprioridade
    //
    EXEC SQL
        SELECT pessoa.idpessoa,
               SUBSTR(pessoa.nmpessoa, 1, 80),
               tipocomunicacao.dstipocomunicacao,
               pessoacomunicacao.dscontato,
               linhatelefonica.indivulgacaonrlinha,
               TO_CHAR(linhatelefonica.dtultimaalteracao, 'DD/MM/YYYY'),
               pessoadepara.idpessoadepara
         INTO :tUsuVO.sIdPessoa:tUsuVO.iIdPessoa_ora,
              :tUsuVO.sNmPessoa:tUsuVO.iNmPessoa_ora,
              :tUsuVO.sDsTipoComunicacao:tUsuVO.iDsTipoComunicacao_ora,
              :tUsuVO.sDsContato:tUsuVO.iDsContato_ora,
              :tUsuVO.sInDivulgacaoNrLinha:tUsuVO.iInDivulgacaoNrLinha_ora,
              :tUsuVO.sDtUltimaAlteracao:tUsuVO.iDtUltimaAlteracao_ora,
              :tUsuVO.sIdPessoaDePara:tUsuVO.iIdPessoaDePara_ora
         FROM customer.pessoalinha,
              customer.pessoadepara,
              customer.pessoacomunicacao,
              customer.pessoa,
              linha.linhabase,
              linha.linhatelefonica,
              customer.tiporelacionamento,
              apoio.tipocomunicacao,
              apoio.arearegistro
        WHERE pessoadepara.idpessoadepara                = pessoalinha.idpessoadepara
          AND pessoa.idpessoa                            = pessoadepara.idpessoa
          AND pessoa.idpessoa                            = pessoacomunicacao.idpessoa (+)
          AND linhabase.idlinhabase                      = linhatelefonica.idlinhabase
          AND linhatelefonica.idlinhatelefonica          = pessoalinha.idlinhatelefonica
          AND tiporelacionamento.idtiporelacionamento    = pessoalinha.idtiporelacionamento
          AND tipocomunicacao.idtipocomunicacao (+)      = pessoacomunicacao.idtipocomunicacao
          AND arearegistro.idarearegistro                = linhabase.idarearegistro
          AND tiporelacionamento.sgtiporelacionamento    = 'U'
          AND rownum                                     = 1
          AND pessoalinha.idlinhatelefonica              = :sIdLinhaTelefonica;


    ULOG("Procesando a query para pegar nrdocumento, dstipodocumento, sgclassificacao.");

    EXEC SQL
        SELECT
		       nrdocumento,
		       sgclassificacao,
		       dstipodocumento
         INTO :tUsuVO.sNrDocumento:tUsuVO.iNrDocumento_ora,
              :tUsuVO.sSgTipoDocumento:tUsuVO.iSgTipoDocumento_ora,
              :tUsuVO.sDsTipoDocumento:tUsuVO.iDsTipoDocumento_ora              
        FROM (
               SELECT documento.nrdocumento          nrdocumento,
                      tipodocumento.sgclassificacao  sgclassificacao,
                      tipodocumento.dstipodocumento  dstipodocumento
                 FROM customer.documento,
                      customer.pessoadocumento,
			          apoio.tipodocumento
                WHERE documento.iddocumento   		= pessoadocumento.iddocumento
		          AND pessoadocumento.idpessoa		= :tUsuVO.sIdPessoa 
		          AND tipodocumento.idtipodocumento = documento.idtipodocumento
	         ORDER BY tipodocumento.nrprioridade
	         )
        WHERE rownum = 1;


    ULOG("Local DsCargoContato a1");

    /* Nao existe registro seta IdPessoa = -1 */
	if (sqlca.sqlcode == NO_DATA_FOUND)
    {
        ULOG("Local DsCargoContato a2");
        tUsuVO.iIdPessoa_ora = -1;
    }
    else
    {
        ULOG("Local DsCargoContato a3");
        ULOG("tUsuVO.sIdPessoa[%s]", (char *)tUsuVO.sIdPessoa.arr);
        ULOG("DDD***");

        EXEC SQL
		SELECT 
			VALORPOSSIVEL.DSVALORPOSSIVEL
	    INTO 
	    	:tUsuVO.sDsCargoContato:tUsuVO.iDsCargoContato_ora
		FROM
		    CUSTOMER.PESSOAVALORPOSSIVEL PESSOAVALORPOSSIVEL,
		    CUSTOMER.VALORPOSSIVEL VALORPOSSIVEL,
		    CUSTOMER.ATRIBUTO ATRIBUTO
		WHERE PESSOAVALORPOSSIVEL.IDVALORPOSSIVEL = VALORPOSSIVEL.IDVALORPOSSIVEL
		AND   VALORPOSSIVEL.IDATRIBUTO = ATRIBUTO.IDATRIBUTO
		AND   ATRIBUTO.IDATRIBUTO = 99
		AND   PESSOAVALORPOSSIVEL.IDPESSOA = :tUsuVO.sIdPessoa;

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG("tUsuVO.sDsCargoContato[%s]", (char *)tUsuVO.sDsCargoContato.arr);
    }

    ULOG_END("CUsuario::CUsuario()");

	return;

	sqlErrorConstrutor:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CUsuario::CUsuario()");
		throw TuxBasicOraException(sqlca.sqlcode);

}


CUsuario::~CUsuario()
{
}

//
// Metodos getter
char* CUsuario::getIdPessoa(void)
{
    return ((char *)tUsuVO.sIdPessoa.arr);
}
char* CUsuario::getIdPessoaDePara(void)
{
    return ((char *)tUsuVO.sIdPessoaDePara.arr);
}
char* CUsuario::getIdDocumento(void)
{
    return ((char *)tUsuVO.sIdDocumento.arr);
}
char* CUsuario::getNmPessoa(void)
{
    return ((char *)tUsuVO.sNmPessoa.arr);
}
char* CUsuario::getSgTipoDocumento(void)
{
    return ((char *)tUsuVO.sSgTipoDocumento.arr);
}
char* CUsuario::getDsTipoDocumento(void)
{
    return ((char *)tUsuVO.sDsTipoDocumento.arr);
}
char* CUsuario::getNrDocumento(void)
{
    return ((char *)tUsuVO.sNrDocumento.arr);
}
char* CUsuario::getDsTipoComunicacao(void)
{
    return ((char *)tUsuVO.sDsTipoComunicacao.arr);
}
char* CUsuario::getDsContato(void)
{
    return ((char *)tUsuVO.sDsContato.arr);
}
char* CUsuario::getVlRentabilidade(void)
{
    return ((char *)tUsuVO.sVlRentabilidade.arr);
}
char* CUsuario::getDsCargoContato(void)
{
    ULOG("getDsCargoContato");
    return ((char *)tUsuVO.sDsCargoContato.arr);
}
char* CUsuario::getInDivulgacaoNrLinha(void)
{
    return ((char *)tUsuVO.sInDivulgacaoNrLinha.arr);
}
char* CUsuario::getDtUltimaAlteracao(void)
{
    return ((char *)tUsuVO.sDtUltimaAlteracao.arr);
}

//
// Metodos setter
void CUsuario::setIdPessoa(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sIdPessoa, pDado);
}
void CUsuario::setIdPessoaDePara(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sIdPessoaDePara, pDado);
}
void CUsuario::setIdDocumento(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sIdDocumento, pDado);
}
void CUsuario::setNmPessoa(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sNmPessoa, pDado);
}
void CUsuario::setSgTipoDocumento(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sSgTipoDocumento, pDado);
}
void CUsuario::setDsTipoDocumento(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sDsTipoDocumento, pDado);
}
void CUsuario::setNrDocumento(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sNrDocumento, pDado);
}
void CUsuario::setDsTipoComunicacao(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sDsTipoComunicacao, pDado);
}
void CUsuario::setDsContato(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sDsContato, pDado);
}
void CUsuario::setVlRentabilidade(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sVlRentabilidade, pDado);
}
void CUsuario::setDsCargoContato(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sDsCargoContato, pDado);
}
void CUsuario::setInDivulgacaoNrLinha(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sInDivulgacaoNrLinha, pDado);
}
void CUsuario::setDtUltimaAlteracao(char* pDado)
{
    STRCPY_TO_ORA(tUsuVO.sDtUltimaAlteracao, pDado);
}

int CUsuario::buscarDadosTIPorNrLinha(char* pNrLin)
{
    ULOG_START("CUsuario::buscarDadosTIPorNrLinha()");
    struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
	    char cOraDDD[3];
	    char cOraFone[10];
	EXEC SQL END DECLARE SECTION;

	strncpy(cOraDDD, pNrLin, 2);
	cOraDDD[2]='\0';
	strcpy( cOraFone, (char*)&pNrLin[2] );

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorDadosTIPorNrLinha;

    EXEC SQL
        SELECT pessoa.idpessoa,
               documento.iddocumento,
               substr(pessoa.nmpessoa, 1, 80),
               tipodocumento.sgclassificacao,
               tipodocumento.dstipodocumento,
               documento.nrdocumento,
               tipocomunicacao.dstipocomunicacao,
               pessoacomunicacao.dscontato,
               linhatelefonica.indivulgacaonrlinha,
               to_char(linhatelefonica.dtultimaalteracao, 'DD/MM/YYYY')
         INTO :tUsuVO.sIdPessoa:tUsuVO.iIdPessoa_ora,
              :tUsuVO.sIdDocumento:tUsuVO.iIdDocumento_ora,
              :tUsuVO.sNmPessoa:tUsuVO.iNmPessoa_ora,
              :tUsuVO.sSgTipoDocumento:tUsuVO.iSgTipoDocumento_ora,
              :tUsuVO.sDsTipoDocumento:tUsuVO.iDsTipoDocumento_ora,
              :tUsuVO.sNrDocumento:tUsuVO.iNrDocumento_ora,
              :tUsuVO.sDsTipoComunicacao:tUsuVO.iDsTipoComunicacao_ora,
              :tUsuVO.sDsContato:tUsuVO.iDsContato_ora,
              :tUsuVO.sInDivulgacaoNrLinha:tUsuVO.iInDivulgacaoNrLinha_ora,
              :tUsuVO.sDtUltimaAlteracao:tUsuVO.iDtUltimaAlteracao_ora
         FROM customer.pessoalinha         pessoalinha,
              customer.pessoadepara        pessoadepara,
              customer.pessoacomunicacao   pessoacomunicacao,
              customer.pessoa              pessoa,
              customer.documento           documento,
              customer.pessoadocumento     pessoadocumento,
              linha.linhabase              linhabase,
              linha.linhatelefonica        linhatelefonica,
              customer.tiporelacionamento  tiporelacionamento,
              apoio.tipocomunicacao        tipocomunicacao,
              apoio.tipodocumento          tipodocumento,
              apoio.arearegistro           arearegistro
        WHERE pessoadepara.idpessoadepara             = pessoalinha.idpessoadepara
          AND pessoa.idpessoa                         = pessoadepara.idpessoaorigem
          AND pessoa.idpessoa                         = pessoacomunicacao.idpessoa (+)
          AND pessoa.idpessoa                         = pessoadocumento.idpessoa
          AND documento.iddocumento                   = pessoadocumento.iddocumento
          AND linhabase.idlinhabase                   = linhatelefonica.idlinhabase
          AND linhatelefonica.idlinhatelefonica       = pessoalinha.idlinhatelefonica
          AND tiporelacionamento.idtiporelacionamento = pessoalinha.idtiporelacionamento
          AND tipocomunicacao.idtipocomunicacao (+)   = pessoacomunicacao.idtipocomunicacao
          AND tipodocumento.idtipodocumento           = documento.idtipodocumento
          AND arearegistro.idarearegistro             = linhabase.idarearegistro
          AND tiporelacionamento.sgtiporelacionamento = 'U'
          AND rownum                                  = 1
          AND linhabase.NRLINHA                       = :cOraFone
          AND arearegistro.cdarearegistro             = :cOraDDD;

    /* Nao existe registro seta IdPessoa = -1 */
	if (sqlca.sqlcode == NO_DATA_FOUND)
	{
	    ULOG_END("CUsuario::buscarDadosTIPorNrLinha()");
        return NOK;
    }
    else{
        EXEC SQL
            SELECT valorpossivel.dsvalorpossivel
              FROM customer.pessoavalorpossivel,
                   customer.valorpossivel
             WHERE valorpossivel.idvalorpossivel = pessoavalorpossivel.idvalorpossivel
               AND valorpossivel.idatributo      = 99
               AND pessoavalorpossivel.idpessoa  = :tUsuVO.sIdPessoa;
    }

    ULOG_END("CUsuario::buscarDadosTIPorNrLinha()");
	return OK;

	sqlErrorDadosTIPorNrLinha:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CUsuario::buscarDadosTIPorNrLinha()");
		throw TuxBasicOraException(sqlca.sqlcode);

}

char* CUsuario::getDsCargoContatoDeVerdade(char *pszIdPessoa)
{
    ULOG_START("CUsuario::getDsCargoContatoDeVerdade");
    struct sqlca sqlca;
    static char szDsCargoContato[255 + 1];
    EXEC SQL BEGIN DECLARE SECTION;
	    VARCHAR oszIdPessoa[21];
        VARCHAR oszDsCargoContato[255];
        short ioszDsCargoContato = -1;
    EXEC SQL END DECLARE SECTION;

    memset(szDsCargoContato, 0x00, sizeof(szDsCargoContato));

    STRCPY_TO_ORA(oszIdPessoa, pszIdPessoa); ULOG("pszIdPessoa[%s]", pszIdPessoa);

	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

    EXEC SQL
        SELECT
            cp.dscargocontato
        INTO
            :oszDsCargoContato:ioszDsCargoContato
        FROM
            customer.pessoa cp
        WHERE
            cp.idpessoa = :oszIdPessoa;

    ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);

    if(sqlca.sqlcode == NO_DATA_FOUND)
    {
        ULOG_END("CUsuario::getDsCargoContatoDeVerdade <NOT FOUND>");
    }
    else
    {
        ULOG("oszDsCargoContato[%.*s]", oszDsCargoContato.len, oszDsCargoContato.arr);
        STRCPY_FROM_ORA(szDsCargoContato, oszDsCargoContato);
        ULOG_END("CUsuario::getDsCargoContatoDeVerdade <FOUND>");
    }

	return szDsCargoContato;

	sqlErrorConstrutor:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CUsuario::getDsCargoContatoDeVerdade");
		throw TuxBasicOraException(sqlca.sqlcode);
}
