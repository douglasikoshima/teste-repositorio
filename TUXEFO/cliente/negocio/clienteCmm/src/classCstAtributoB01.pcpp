#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"
#include "../include/Funcoes.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classCstAtributoB01.h";

CCstAtributoB01::CCstAtributoB01()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}


//*****
//Setters
void CCstAtributoB01::setIdAtributo(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sIdAtributo, pDado);
}

void CCstAtributoB01::setIdSubAssunto(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sIdSubAssunto, pDado);
}

void CCstAtributoB01::setDsAtributo(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sDsAtributo, pDado);
}

void CCstAtributoB01::setSqApresentacao(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sSqApresentacao, pDado);
}

void CCstAtributoB01::setIdTAPergunta(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sIdTAPergunta, pDado);
}

void CCstAtributoB01::setInDisponibilidade(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sInDisponibilidade, pDado);
}

void CCstAtributoB01::setDsTipoApresentacaoPergunta(char* value)
{
    STRCPY_TO_ORA(tTabela.sDsTipoApresentacaoPergunta, value);
}

void CCstAtributoB01::setIdAssunto(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iIdAssuntoNull = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sIdAssunto, pDado);
        tTabela.iIdAssuntoNull = 0;
    }
}

void CCstAtributoB01::setNmSubAssunto(char*pDado)
{
    STRCPY_TO_ORA(tTabela.sNmSubAssunto, pDado);
}

void CCstAtributoB01::setDsAssunto(char *pDado)
{
    STRCPY_TO_ORA(tTabela.sDsAssunto, pDado);
}


void CCstAtributoB01::setSgTipoApresentacaoPergunta(char* value)
{
    STRCPY_TO_ORA(tTabela.sSgTipoApresentacaoPergunta, value);
}


void CCstAtributoB01::setCanais(CCanal* value)
{
    poCanal = value;
}

void CCstAtributoB01::setQtdCanais(int value)
{
    ULOG("CCstAtributoB01::setQtdCanais->value(%d)", value);
    iQtdCanais = value;
}


//*****
//Getters
char *CCstAtributoB01::getIdAtributo()
{
    ZERA_TO_ORA(tTabela.sIdAtributo);
    return((char*)tTabela.sIdAtributo.arr);
}

char *CCstAtributoB01::getIdSubAssunto()
{
    ZERA_TO_ORA(tTabela.sIdSubAssunto);
    return((char*)tTabela.sIdSubAssunto.arr);
}

char *CCstAtributoB01::getDsAtributo()
{
    ZERA_TO_ORA(tTabela.sDsAtributo);
    return((char*)tTabela.sDsAtributo.arr);
}

char *CCstAtributoB01::getSqApresentacao()
{
    ZERA_TO_ORA(tTabela.sSqApresentacao);
    return((char*)tTabela.sSqApresentacao.arr);
}

char *CCstAtributoB01::getIdTAPergunta()
{
    ZERA_TO_ORA(tTabela.sIdTAPergunta);
    return((char*)tTabela.sIdTAPergunta.arr);
}

char *CCstAtributoB01::getInDisponibilidade()
{
    ZERA_TO_ORA(tTabela.sInDisponibilidade);
    return((char*)tTabela.sInDisponibilidade.arr);
}

char* CCstAtributoB01::getDsTipoApresentacaoPergunta()
{
    ZERA_TO_ORA(tTabela.sDsTipoApresentacaoPergunta);
    return((char*)tTabela.sDsTipoApresentacaoPergunta.arr);
}

char *CCstAtributoB01::getIdAssunto()
{
    ZERA_TO_ORA(tTabela.sIdAssunto);
    return ((char*)tTabela.sIdAssunto.arr);
}

char *CCstAtributoB01::getNmSubAssunto()
{
    ZERA_TO_ORA(tTabela.sNmSubAssunto);
    return((char*)tTabela.sNmSubAssunto.arr);
}

char *CCstAtributoB01::getDsAssunto()
{
    ZERA_TO_ORA(tTabela.sDsAssunto);
    return ((char *)tTabela.sDsAssunto.arr);
}


char* CCstAtributoB01::getSgTipoApresentacaoPergunta()
{
    ZERA_TO_ORA(tTabela.sSgTipoApresentacaoPergunta);
    return((char*)tTabela.sSgTipoApresentacaoPergunta.arr);
}


CCanal * CCstAtributoB01::getCanais()
{
    return poCanal;
}

int CCstAtributoB01::getQtdCanais()
{
    ULOG("CCstAtributoB01::getQtdCanais()iQtdCanais(%d)", iQtdCanais);
    return iQtdCanais;
}

//*****
//Outros metodos
//*****
CCstAtributoB01* CCstAtributoB01::RecuperarTodos(int* iNroObjetos, char* pParam)
{
    ULOG_START("CCstAtributoB01::RecuperarTodos()");
    struct sqlca sqlca;

	CCstAtributoB01* oObj = NULL;
	int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
        TATRIBUTOB01 tST;
        VARCHAR sWhere[255];
	EXEC SQL END DECLARE SECTION;

    ULOG("LOCAL1");

    if (!*pParam){/* Para obter todos os registros da tabela */
        STRCPY_TO_ORA(sWhere, "0"); 
    }
    else{
        STRCPY_TO_ORA(sWhere, pParam); 
    }

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor
	EXEC SQL DECLARE cCursor CURSOR FOR
	SELECT 
	    ATRIBUTO.IDATRIBUTO,
	    ATRIBUTO.DSATRIBUTO,
	    SUBASSUNTO.IDSUBASSUNTO,
	    ASSUNTO.IDASSUNTO,
	    SUBASSUNTO.NMSUBASSUNTO,
	    ATRIBUTO.INDISPONIBILIDADE,
	    ASSUNTO.DSASSUNTO,
	    ATRIBUTO.SQAPRESENTACAO,
	    TIPOAPRESENTACAOPERGUNTA.IDTIPOAPRESENTACAOPERGUNTA,
	    TIPOAPRESENTACAOPERGUNTA.SGTIPOAPRESENTACAOPERGUNTA,
	    TIPOAPRESENTACAOPERGUNTA.DSTIPOAPRESENTACAOPERGUNTA
	FROM 
	    CUSTOMER.ATRIBUTO ATRIBUTO,
	    CUSTOMER.ASSUNTO ASSUNTO,
	    CUSTOMER.SUBASSUNTO SUBASSUNTO,
	    APOIO.TIPOAPRESENTACAOPERGUNTA TIPOAPRESENTACAOPERGUNTA
	WHERE ATRIBUTO.IDSUBASSUNTO = SUBASSUNTO.IDSUBASSUNTO
	AND   ATRIBUTO.IDTIPOAPRESENTACAOPERGUNTA = TIPOAPRESENTACAOPERGUNTA.IDTIPOAPRESENTACAOPERGUNTA
	AND   SUBASSUNTO.IDASSUNTO = ASSUNTO.IDASSUNTO
	AND   ( (ATRIBUTO.IDSUBASSUNTO = :sWhere) OR (0 = :sWhere) );

	EXEC SQL OPEN cCursor;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        memset(&tST, 0x00, sizeof(tST));
		EXEC SQL FETCH cCursor
                  INTO :tST.sIdAtributo:tST.iIdAtributoNull,
                       :tST.sDsAtributo:tST.iDsAtributoNull,
                       :tST.sIdSubAssunto:tST.iIdSubAssuntoNull,
                       :tST.sIdAssunto:tST.iIdAssuntoNull,
                       :tST.sNmSubAssunto:tST.iNmSubAssuntoNull,
                       :tST.sInDisponibilidade:tST.iInDisponibilidadeNull,
                       :tST.sDsAssunto:tST.iDsAssuntoNull,
                       :tST.sSqApresentacao:tST.iSqApresentacaoNull,
                       :tST.sIdTAPergunta:tST.iIdTAPerguntaNull,
                       :tST.sSgTipoApresentacaoPergunta:tST.iSgTipoApresentacaoPerguntaNull,
                       :tST.sDsTipoApresentacaoPergunta:tST.iDsTipoApresentacaoPerguntaNull;

		// Aloca memória para o objeto atual.
		if ((oObj = (CCstAtributoB01*) realloc((void *)oObj, (sizeof(CCstAtributoB01) * iNroObjLocal))) != NULL)
        {
			// Coloca os dados do objeto atual.
			oObj[iNroObjLocal-1].setIdAtributo((char*)tST.sIdAtributo.arr);
			oObj[iNroObjLocal-1].setIdSubAssunto((char*)tST.sIdSubAssunto.arr);
			oObj[iNroObjLocal-1].setDsAtributo((char*)tST.sDsAtributo.arr);
			oObj[iNroObjLocal-1].setSqApresentacao((char*)tST.sSqApresentacao.arr);
			oObj[iNroObjLocal-1].setIdTAPergunta((char*)tST.sIdTAPergunta.arr);
			oObj[iNroObjLocal-1].setInDisponibilidade((char*)tST.sInDisponibilidade.arr);
			oObj[iNroObjLocal-1].setIdAssunto((char*)tST.sIdAssunto.arr);
			oObj[iNroObjLocal-1].setNmSubAssunto((char*)tST.sNmSubAssunto.arr);
			oObj[iNroObjLocal-1].setDsAssunto((char*)tST.sDsAssunto.arr);
			oObj[iNroObjLocal-1].setSgTipoApresentacaoPergunta((char*)tST.sSgTipoApresentacaoPergunta.arr);
			oObj[iNroObjLocal-1].setDsTipoApresentacaoPergunta((char*)tST.sDsTipoApresentacaoPergunta.arr);

		} 
        else 
        {
			if (oObj) free(oObj);
		}
	}

	*iNroObjetos = iNroObjLocal - 1;
	ULOG_END("CCstAtributoB01::RecuperarTodos()");
	return oObj;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CCstAtributoB01::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}


CCstAtributoB01* CCstAtributoB01::RecuperarTodosComCanal(int* iNroObjetos, char* pParam)
{
    ULOG_START("CCstAtributoB01::RecuperarTodosComCanal()");
    struct sqlca sqlca;

	CCstAtributoB01* poAtributo = NULL;
	int iNroObjLocal = 0;
    int iIdAtributoControle = -1;
    int iCanaisNoAtributo = 0;

	EXEC SQL BEGIN DECLARE SECTION;
        TATRIBUTOB01 tST;
        VARCHAR sWhere[255];
        VARCHAR sIdCanal[255];
        VARCHAR sNmCanal[255];
        short iIdCanal_ora;
        short iNmCanal_ora;
	EXEC SQL END DECLARE SECTION;

    ULOG("Local - 0");

    if (!*pParam){/* Para obter todos os registros da tabela */
        STRCPY_TO_ORA(sWhere, "0"); 
    }
    else{
        STRCPY_TO_ORA(sWhere, pParam); 
    }

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorTodosComCanal;

	// Declara e abre o cursor
	EXEC SQL DECLARE cCursorTodosComCanal CURSOR FOR
            SELECT /*+ INDEX (subassunto SUBASSUNTOPK) INDEX (atributocanal ATRIBUTOCANALAK1)*/
                   atributo.idatributo,
                   atributo.dsatributo,
                   subassunto.idsubassunto,
                   assunto.idassunto,
                   subassunto.nmsubassunto,
                   atributo.indisponibilidade,
//                   subassunto.indisponibilidade,
                   assunto.dsassunto,
                   atributo.sqapresentacao,
//                   subassunto.sqapresentacao,
                   tap.idtipoapresentacaopergunta,
                   tap.sgtipoapresentacaopergunta,
                   tap.dstipoapresentacaopergunta,
                   canal.idcanal,
                   canal.nmcanal
              FROM customer.atributocanal         atributocanal,
                   customer.atributo              atributo,
                   apoio.canal                    canal,
                   customer.subassunto            subassunto,
                   customer.assunto               assunto,
                   apoio.tipoapresentacaopergunta tap
             WHERE atributo.idatributo            = atributocanal.idatributo(+)
               AND canal.idcanal(+)               = atributocanal.idcanal
               AND subassunto.idsubassunto        = atributo.idsubassunto
               AND assunto.idassunto              = subassunto.idassunto
               AND tap.idtipoapresentacaopergunta = atributo.idtipoapresentacaopergunta
               AND ( (subassunto.idsubassunto = :sWhere) OR (0 = :sWhere) )
            ORDER BY upper(atributo.dsatributo);

	EXEC SQL OPEN cCursorTodosComCanal;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; ) 
    {
        memset(&tST, 0x00, sizeof(tST));
        memset(&sIdCanal, 0x00, sizeof(sIdCanal));
        memset(&sNmCanal, 0x00, sizeof(sNmCanal));
		EXEC SQL FETCH cCursorTodosComCanal
                  INTO :tST.sIdAtributo:tST.iIdAtributoNull,
                       :tST.sDsAtributo:tST.iDsAtributoNull,
                       :tST.sIdSubAssunto:tST.iIdSubAssuntoNull,
                       :tST.sIdAssunto:tST.iIdAssuntoNull,
                       :tST.sNmSubAssunto:tST.iNmSubAssuntoNull,
                       :tST.sInDisponibilidade:tST.iInDisponibilidadeNull,
                       :tST.sDsAssunto:tST.iDsAssuntoNull,
                       :tST.sSqApresentacao:tST.iSqApresentacaoNull,
                       :tST.sIdTAPergunta:tST.iIdTAPerguntaNull,
                       :tST.sSgTipoApresentacaoPergunta:tST.iSgTipoApresentacaoPerguntaNull,
                       :tST.sDsTipoApresentacaoPergunta:tST.iDsTipoApresentacaoPerguntaNull,
                       :sIdCanal:iIdCanal_ora,
                       :sNmCanal:iNmCanal_ora;

        //Verifica se ainda e´ o mesmo Atributo
		CCanal* poCanal = NULL;

        ULOG("tST.sIdAtributo.arr[%s]", tST.sIdAtributo.arr);
        ULOG("iIdAtributoControle(%d)", iIdAtributoControle);

        if (atoi((char*)tST.sIdAtributo.arr) == iIdAtributoControle)
        {
			iCanaisNoAtributo++;
            ULOG("iCanaisNoAtributo(%d)", iCanaisNoAtributo);

			poCanal = poAtributo[iNroObjLocal-1].getCanais();
			if ((poCanal = (CCanal*) realloc((void *)poCanal, (sizeof(CCanal) * iCanaisNoAtributo))) != NULL) {
                ULOG("local2");
				poCanal[iCanaisNoAtributo-1].setId((char*)sIdCanal.arr);
				poCanal[iCanaisNoAtributo-1].setDescricao((char*)sNmCanal.arr);

                ULOG("iNroObjLocal(%d)", iNroObjLocal);
				poAtributo[iNroObjLocal-1].setCanais(poCanal);
				poAtributo[iNroObjLocal-1].setQtdCanais(iCanaisNoAtributo);
			} 
			else 
			{
				ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
				ULOG_END("CCstAtributoB01::RecuperarTodosComCanal()");
				throw TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
			}
        }
        else{
            iNroObjLocal++;
            ULOG("iNroObjLocal(%d)", iNroObjLocal);

		    // Aloca memória para o objeto atual.
		    if ((poAtributo = (CCstAtributoB01*) realloc((void *)poAtributo, (sizeof(CCstAtributoB01) * iNroObjLocal))) != NULL)
            {
			    // Coloca os dados do objeto atual.
			    poAtributo[iNroObjLocal-1].setIdAtributo((char*)tST.sIdAtributo.arr);
			    poAtributo[iNroObjLocal-1].setIdSubAssunto((char*)tST.sIdSubAssunto.arr);
			    poAtributo[iNroObjLocal-1].setDsAtributo((char*)tST.sDsAtributo.arr);
			    poAtributo[iNroObjLocal-1].setSqApresentacao((char*)tST.sSqApresentacao.arr);
			    poAtributo[iNroObjLocal-1].setIdTAPergunta((char*)tST.sIdTAPergunta.arr);
			    poAtributo[iNroObjLocal-1].setInDisponibilidade((char*)tST.sInDisponibilidade.arr);
			    poAtributo[iNroObjLocal-1].setIdAssunto((char*)tST.sIdAssunto.arr);
			    poAtributo[iNroObjLocal-1].setNmSubAssunto((char*)tST.sNmSubAssunto.arr);
			    poAtributo[iNroObjLocal-1].setDsAssunto((char*)tST.sDsAssunto.arr);
			    poAtributo[iNroObjLocal-1].setSgTipoApresentacaoPergunta((char*)tST.sSgTipoApresentacaoPergunta.arr);
			    poAtributo[iNroObjLocal-1].setDsTipoApresentacaoPergunta((char*)tST.sDsTipoApresentacaoPergunta.arr);

                ULOG("b.tST.sIdAtributo.arr[%s]", tST.sIdAtributo.arr);
				iIdAtributoControle = atoi((char*)tST.sIdAtributo.arr);

                ULOG("iIdCanal_ora(%d)", iIdCanal_ora);
				if(iIdCanal_ora >= 0) {
                    ULOG("local1");

					// Monta novo objeto de lista de canais.
				    CCanal* poCanal = NULL;

					poCanal = (CCanal*) malloc(sizeof(CCanal));

					poCanal->setId((char*)sIdCanal.arr);
					poCanal->setDescricao((char*)sNmCanal.arr);
					iCanaisNoAtributo = 1;
					poAtributo[iNroObjLocal-1].setCanais(poCanal);
                    ULOG("*** iCanaisNoAtributo(%d)", iCanaisNoAtributo);
					poAtributo[iNroObjLocal-1].setQtdCanais(iCanaisNoAtributo);
				}
                else
                {
					poAtributo[iNroObjLocal-1].setCanais(NULL);
					poAtributo[iNroObjLocal-1].setQtdCanais(0);
                }
		    } 
            else 
            {
			    if (poAtributo) 
                    free(poAtributo);

                EXEC SQL CLOSE cCursorTodosComCanal;
				ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
				ULOG_END("CCstAtributoB01::RecuperarTodosComCanal()");
				throw TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
		    }
        }
	}

    EXEC SQL CLOSE cCursorTodosComCanal;

    ULOG("iNroObjLocal(%d)", iNroObjLocal);

	*iNroObjetos = iNroObjLocal;
	ULOG_END("CCstAtributoB01::RecuperarTodosComCanal()");
	return poAtributo;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorTodosComCanal:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	    ULOG_END("CCstAtributoB01::RecuperarTodosComCanal()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}
