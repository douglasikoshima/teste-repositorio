#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../include/LogDeviceManager.h"
#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/*******************************************************************************************************/
LogDeviceManager::LogDeviceManager(void)
{
    ULOG_START("LogDeviceManager::LogDeviceManager");
    memset(&tLogDeviceManager, 0x00, sizeof(TLogDeviceManager));
    ULOG_END("LogDeviceManager::LogDeviceManager");
}

/*******************************************************************************************************/
LogDeviceManager::~LogDeviceManager(void)
{
    ULOG_START("LogDeviceManager::~LogDeviceManager");
    ULOG_END("LogDeviceManager::~LogDeviceManager");
}

/*******************************************************************************************************/
void LogDeviceManager::setIP(char *pszIP)
{
    strcpy(tLogDeviceManager.szIP, pszIP);
}

/*******************************************************************************************************/
void LogDeviceManager::setIdUsuarioAlteracao(char *pszIdUsuarioAlteracao)
{
    strcpy(tLogDeviceManager.szIdUsuarioAlteracao, pszIdUsuarioAlteracao);
}

/*******************************************************************************************************/
void LogDeviceManager::setNomeParametroAtualizado(char *pszNomeParametroAtualizado)
{
    strcpy(tLogDeviceManager.szNomeParametroAtualizado, pszNomeParametroAtualizado);
}

/*******************************************************************************************************/
void LogDeviceManager::setEstadoConsulta(char *pszEstadoConsulta)
{
    strcpy(tLogDeviceManager.szEstadoConsulta, pszEstadoConsulta);
}

/*******************************************************************************************************/
void LogDeviceManager::setIdLinhaTelefonica(char *pszIdLinhaTelefonica)
{
    strcpy(tLogDeviceManager.szIdLinhaTelefonica, pszIdLinhaTelefonica);
}

/*******************************************************************************************************/
bool LogDeviceManager::insereLogDeviceManager(void)
{
    ULOG_START("LogDeviceManager::insereLogDeviceManager");

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLogDeviceManager[LEN_IDLOGDEVICEMANAGER];
        VARCHAR oszIP[LEN_IP];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszNomeParametroAtualizado[LEN_NOMEPARAMETROATUALIZADO];
        VARCHAR oszEstadoConsulta[LEN_ESTADOCONSULTA];
        VARCHAR oszIdPessoaLinhaHistorico[LEN_IDPESSOALINHAHISTORICO];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR goto erro;

    /* busca idpessoalinhahistorico a partir do idlinhatelefonica */
    if(this->buscaIPLHLogDeviceManager() == false) {
        goto erro;
    }

    STRCPY_TO_ORA(oszIP,                        tLogDeviceManager.szIP);                        ULOG("oszIP[%.*s]", oszIP.len, oszIP.arr);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao,        tLogDeviceManager.szIdUsuarioAlteracao);        ULOG("oszIdUsuarioAlteracao[%.*s]", oszIdUsuarioAlteracao.len, oszIdUsuarioAlteracao.arr);
    STRCPY_TO_ORA(oszNomeParametroAtualizado,   tLogDeviceManager.szNomeParametroAtualizado);   ULOG("oszNomeParametroAtualizado[%.*s]", oszNomeParametroAtualizado.len, oszNomeParametroAtualizado.arr);
    STRCPY_TO_ORA(oszEstadoConsulta,            tLogDeviceManager.szEstadoConsulta);            ULOG("oszEstadoConsulta[%.*s]", oszEstadoConsulta.len, oszEstadoConsulta.arr);
    STRCPY_TO_ORA(oszIdPessoaLinhaHistorico,    tLogDeviceManager.szIdPessoaLinhaHistorico);    ULOG("oszIdPessoaLinhaHistorico[%.*s]", oszIdPessoaLinhaHistorico.len, oszIdPessoaLinhaHistorico.arr);


    EXEC SQL SELECT infra.logdevicemanagersq.nextval
       INTO :oszIdLogDeviceManager
       FROM DUAL;

    ULOG("oszIdLogDeviceManager[%.*s]", oszIdLogDeviceManager.len, oszIdLogDeviceManager.arr);

    EXEC SQL INSERT INTO infra.logdevicemanager
                       ( idlogdevicemanager
                       , ip
                       , idusuarioalteracao
                       , nmparametro
                       , estadoconsulta
                       , dtultimaalteracao
                       , idpessoalinhahistorico)
                VALUES ( :oszIdLogDeviceManager
                       , :oszIP
                       , :oszIdUsuarioAlteracao
                       , :oszNomeParametroAtualizado
                       , :oszEstadoConsulta
                       , SYSDATE
                       , :oszIdPessoaLinhaHistorico);

    ULOGI("Finalizando LogDeviceManager::insereLogDeviceManager <OK>");
    ULOG_END("LogDeviceManager::insereLogDeviceManager");
    return true;

    erro:
        ULOG("sqlca.sqlcode(%d)[%.*s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOGE("Finalizando LogDeviceManager::insereLogDeviceManager <ERROR>");
        return false;
}

/*******************************************************************************************************/
bool LogDeviceManager::buscaIPLHLogDeviceManager(void)
{
    ULOG_START("LogDeviceManager::buscaIPLHLogDeviceManager");

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinhaHistorico[LEN_IDPESSOALINHAHISTORICO];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
    EXEC SQL END DECLARE SECTION;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, tLogDeviceManager.szIdLinhaTelefonica); ULOG("oszIdLinhaTelefonica[%.*s]", oszIdLinhaTelefonica.len, oszIdLinhaTelefonica.arr);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL
        SELECT
            cplh.idpessoalinhahistorico 
        INTO
            :oszIdPessoaLinhaHistorico
        FROM
            customer.pessoalinhahistorico cplh,
            customer.tiporelacionamento ctr
        WHERE
            cplh.idtiporelacionamento = ctr.idtiporelacionamento
        AND
            ctr.sgtiporelacionamento = 'C'
        AND
            cplh.idlinhatelefonica = :oszIdLinhaTelefonica;


    ULOG("oszIdPessoaLinhaHistorico[%.*s]", oszIdPessoaLinhaHistorico.len, oszIdPessoaLinhaHistorico.arr);
    STRCPY_FROM_ORA(tLogDeviceManager.szIdPessoaLinhaHistorico, oszIdPessoaLinhaHistorico);


    ULOGI("Finalizando LogDeviceManager::buscaIPLHLogDeviceManager <FOUND>");
    ULOG_END("LogDeviceManager::buscaIPLHLogDeviceManager");
    return true;

    naoexiste:
        ULOGE("Finalizando LogSIMLock::buscaIPLHLogDeviceManager <NOT FOUND>");
        return false;

    erro:
        ULOG("sqlca.sqlcode(%d)[%.*s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOGE("Finalizando LogDeviceManager::buscaIPLHLogDeviceManager <ERROR>");
        return false;
}
