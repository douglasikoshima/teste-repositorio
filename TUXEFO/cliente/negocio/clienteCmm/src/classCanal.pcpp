#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../include/Exception.h"

#undef MSG_NONE
#define MSG_NONE
#include "../include/Messages.h"


EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../include/classCanal.h";


CCanal::CCanal()
{
    memset(&tTabela, 0x00, sizeof(tTabela));
}

void CCanal::setId(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iId_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sId, pDado);
        tTabela.iId_ora = 0;
    }
}

void CCanal::setSigla(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iSigla_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sSigla, pDado);
        tTabela.iSigla_ora = 0;
    }
}

void CCanal::setDescricao(char *pDado)
{
    if ( pDado == NULL )
    {
        tTabela.iDescricao_ora = -1;
    }
    else
    {
        STRCPY_TO_ORA(tTabela.sDescricao, pDado);
        tTabela.iDescricao_ora = 0;
    }
}



char* CCanal::getId()
{
        return ((char*)tTabela.sId.arr);
}
char* CCanal::getSigla()
{
        return ((char*)tTabela.sSigla.arr);
}
char* CCanal::getDescricao()
{
        return ((char*)tTabela.sDescricao.arr);
}

int CCanal::Incluir()
{
    return OK;
}

int CCanal::Excluir()
{
    return OK;
}


int CCanal::Alterar()
{
    return OK;
}


CCanal* CCanal::RecuperarTodos(int* iNroObjetos)
{
    ULOG_START("CCanal::RecuperarTodos()");
    
    struct sqlca sqlca;

	CCanal* oCanal = NULL;
	int iNroObjLocal = 1;

	EXEC SQL BEGIN DECLARE SECTION;
        TAPOIO tSt;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorLista;

	// Declara e abre o cursor
	EXEC SQL DECLARE cCanal CURSOR FOR
            SELECT idcanal
                  ,cdcanal
                  ,nmcanal
             FROM apoio.canal
            WHERE idcanal > 0;

	EXEC SQL OPEN cCanal;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for (;; iNroObjLocal++) 
    {
        memset(&tSt, 0x00, sizeof(tSt));
		EXEC SQL FETCH cCanal 
                  INTO :tSt.sId:tSt.iId_ora,
                       :tSt.sSigla:tSt.iSigla_ora,
                       :tSt.sDescricao:tSt.iDescricao_ora;

		// Aloca memória para o objeto atual.
		if ((oCanal = (CCanal*) realloc((void *)oCanal, (sizeof(CCanal) * iNroObjLocal))) != NULL)
        {
			oCanal[iNroObjLocal-1].setId((char*)tSt.sId.arr);
			oCanal[iNroObjLocal-1].setSigla((char*)tSt.sSigla.arr);
			oCanal[iNroObjLocal-1].setDescricao((char*)tSt.sDescricao.arr);
		} 
        else 
        {
			if (oCanal) free(oCanal);
            ULOGE("ERRO DE MEMORIA -> NRO_MEMORIA");
            ULOG_END("CCanal::RecuperarTodos()");
			throw  TuxBasicSvcException(sNrMsg,MSG_MEMORIA);
            EXEC SQL CLOSE cCanal;
		}
	}

    EXEC SQL CLOSE cCanal;

	*iNroObjetos = iNroObjLocal - 1;

	ULOG_END("CCanal::RecuperarTodos()");
	return oCanal;

	// Tratamento de erro - Lança excessão com o código oracle do erro.
	sqlErrorLista:
	    ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
		ULOG_END("CCanal::RecuperarTodos()");
		throw  TuxBasicOraException(sqlca.sqlcode);
}

