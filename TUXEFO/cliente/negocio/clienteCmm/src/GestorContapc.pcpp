#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "GestorContapc.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "../include/Global.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CGestorContapc::proCApagaGestorConta(TGestorConta *ptGestorConta)
{
    ULOG_START("CGestorContapc::proCApagaGestorConta()");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdNrCPF[LEN_IDNRCPF];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszIdNrCPF, ptGestorConta->szIdNrCPF);

	EXEC SQL WHENEVER SQLERROR goto erro;

	EXEC SQL
        DELETE
            FROM
                customer.gestorconta
            WHERE
                idnrcpf = :oszIdNrCPF;


    ULOG_END("CGestorContapc::proCApagaGestorConta()");
    return;

	erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CGestorContapc::proCApagaGestorConta()");
		throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CGestorContapc::proCInsereGestorConta(TGestorConta *ptGestorConta)
{
    ULOG_START("CGestorContapc::proCInsereGestorConta()");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdNrCPF[LEN_IDNRCPF];
        VARCHAR oszDsTipoGestor[LEN_DSTIPOGESTOR];
        VARCHAR oszNmNome[LEN_NMNOMEGC];
        VARCHAR oszNmNomeMeio[LEN_NMNOMEMEIOGC];
        VARCHAR oszNmSobreNome[LEN_NMSOBRENOMEGC];
        VARCHAR oszNmCargo[LEN_NMCARGO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOUROGC];
        VARCHAR oszNrEndereco[LEN_NRENDERECOGC];
        VARCHAR oszNmEnderecoComplemento[LEN_NMENDERECOCOMPLEMENTO];
        VARCHAR oszNmBairro[LEN_NMBAIRROGC];
        VARCHAR oszNmCidade[LEN_NMCIDADE];
        VARCHAR oszNrCEP[LEN_NRCEPGC];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsEmail[LEN_DSEMAIL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszIdNrCPF, ptGestorConta->szIdNrCPF);
	STRCPY_TO_ORA(oszDsTipoGestor, ptGestorConta->szDsTipoGestor);
	STRCPY_TO_ORA(oszNmNome, ptGestorConta->szNmNome);
	STRCPY_TO_ORA(oszNmNomeMeio, ptGestorConta->szNmNomeMeio);
	STRCPY_TO_ORA(oszNmSobreNome, ptGestorConta->szNmSobreNome);
	STRCPY_TO_ORA(oszNmCargo, ptGestorConta->szNmCargo);
	STRCPY_TO_ORA(oszNmLogradouro, ptGestorConta->szNmLogradouro);
	STRCPY_TO_ORA(oszNrEndereco, ptGestorConta->szNrEndereco);
	STRCPY_TO_ORA(oszNmEnderecoComplemento, ptGestorConta->szNmEnderecoComplemento);
	STRCPY_TO_ORA(oszNmBairro, ptGestorConta->szNmBairro);
	STRCPY_TO_ORA(oszNmCidade, ptGestorConta->szNmCidade);
	STRCPY_TO_ORA(oszNrCEP, ptGestorConta->szNrCEP);
	STRCPY_TO_ORA(oszIdUF, ptGestorConta->szIdUF);
	STRCPY_TO_ORA(oszDsEmail, ptGestorConta->szDsEmail);
	STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptGestorConta->szIdUsuarioAlteracao);

	EXEC SQL WHENEVER SQLERROR goto erro;

	EXEC SQL INSERT INTO Customer.GestorConta
    (
        idnrcpf,
        dstipogestor,
        nmnome,
        nmnomemeio,
        nmsobrenome,
        nmcargo,
        iduf,
        nmlogradouro,
        nrendereco,
        nmenderecocomplemento,
        nmbairro,
        nmcidade,
        nrcep,
        dsemail,
        idusuarioalteracao,
        dtultimaalteracao
    )
    VALUES
    (
        :oszIdNrCPF,
        :oszDsTipoGestor,
        :oszNmNome,
        :oszNmNomeMeio,
        :oszNmSobreNome,
        :oszNmCargo,
        :oszIdUF,
        :oszNmLogradouro,
        :oszNrEndereco,
        :oszNmEnderecoComplemento,
        :oszNmBairro,
        :oszNmCidade,
        :oszNrCEP,
        :oszDsEmail,
        :oszIdUsuarioAlteracao,
        SYSDATE
    );

    ULOG_END("CGestorContapc::proCInsereGestorConta()");
    return;

	erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CGestorContapc::proCInsereGestorConta()");
		throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CGestorContapc::proCAtualizaGestorConta(TGestorConta *ptGestorConta)
{
    ULOG_START("CGestorContapc::proCAtualizaGestorConta()");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdNrCPF[LEN_IDNRCPF];
        VARCHAR oszDsTipoGestor[LEN_DSTIPOGESTOR];
        VARCHAR oszNmNome[LEN_NMNOMEGC];
        VARCHAR oszNmNomeMeio[LEN_NMNOMEMEIOGC];
        VARCHAR oszNmSobreNome[LEN_NMSOBRENOMEGC];
        VARCHAR oszNmCargo[LEN_NMCARGO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOUROGC];
        VARCHAR oszNrEndereco[LEN_NRENDERECOGC];
        VARCHAR oszNmEnderecoComplemento[LEN_NMENDERECOCOMPLEMENTO];
        VARCHAR oszNmBairro[LEN_NMBAIRROGC];
        VARCHAR oszNmCidade[LEN_NMCIDADE];
        VARCHAR oszNrCEP[LEN_NRCEPGC];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsEmail[LEN_DSEMAIL];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszIdNrCPF, ptGestorConta->szIdNrCPF);
	STRCPY_TO_ORA(oszDsTipoGestor, ptGestorConta->szDsTipoGestor);
	STRCPY_TO_ORA(oszNmNome, ptGestorConta->szNmNome);
	STRCPY_TO_ORA(oszNmNomeMeio, ptGestorConta->szNmNomeMeio);
	STRCPY_TO_ORA(oszNmSobreNome, ptGestorConta->szNmSobreNome);
	STRCPY_TO_ORA(oszNmCargo, ptGestorConta->szNmCargo);
	STRCPY_TO_ORA(oszNmLogradouro, ptGestorConta->szNmLogradouro);
	STRCPY_TO_ORA(oszNrEndereco, ptGestorConta->szNrEndereco);
	STRCPY_TO_ORA(oszNmEnderecoComplemento, ptGestorConta->szNmEnderecoComplemento);
	STRCPY_TO_ORA(oszNmBairro, ptGestorConta->szNmBairro);
	STRCPY_TO_ORA(oszNmCidade, ptGestorConta->szNmCidade);
	STRCPY_TO_ORA(oszNrCEP, ptGestorConta->szNrCEP);
	STRCPY_TO_ORA(oszIdUF, ptGestorConta->szIdUF);
	STRCPY_TO_ORA(oszDsEmail, ptGestorConta->szDsEmail);
	STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptGestorConta->szIdUsuarioAlteracao);

	EXEC SQL WHENEVER SQLERROR goto erro;

	EXEC SQL
        UPDATE Customer.GestorConta
            SET
                dstipogestor = :oszDsTipoGestor,
                nmnome = :oszNmNome,
                nmnomemeio = :oszNmNomeMeio,
                nmsobrenome = :oszNmSobreNome,
                nmcargo = :oszNmCargo,
                iduf = :oszIdUF,
                nmlogradouro = :oszNmLogradouro,
                nrendereco = :oszNrEndereco,
                nmenderecocomplemento = :oszNmEnderecoComplemento,
                nmbairro = :oszNmBairro,
                nmcidade = :oszNmCidade,
                nrcep = :oszNrCEP,
                dsemail = :oszDsEmail,
                idusuarioalteracao = :oszIdUsuarioAlteracao,
                dtultimaalteracao = SYSDATE
            WHERE
                idnrcpf = :oszIdNrCPF;

    ULOG_END("CGestorContapc::proCAtualizaGestorConta()");
    return;

	erro:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("CGestorContapc::proCAtualizaGestorConta()");
		throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CGestorContapc::proCBuscaGestorConta(TGestorConta *ptGestorConta)
{
    ULOG_START("CGestorContapc::proCBuscaGestorConta");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdNrCPF[LEN_IDNRCPF];
        VARCHAR oszDsTipoGestor[LEN_DSTIPOGESTOR];
        VARCHAR oszNmNome[LEN_NMNOMEGC];
        VARCHAR oszNmNomeMeio[LEN_NMNOMEMEIOGC];
        VARCHAR oszNmSobreNome[LEN_NMSOBRENOMEGC];
        VARCHAR oszNmCargo[LEN_NMCARGO];
        VARCHAR oszNmLogradouro[LEN_NMLOGRADOUROGC];
        VARCHAR oszNrEndereco[LEN_NRENDERECOGC];
        VARCHAR oszNmEnderecoComplemento[LEN_NMENDERECOCOMPLEMENTO];
        VARCHAR oszNmBairro[LEN_NMBAIRROGC];
        VARCHAR oszNmCidade[LEN_NMCIDADE];
        VARCHAR oszNrCEP[LEN_NRCEPGC];
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszDsEmail[LEN_DSEMAIL];
        VARCHAR oszDtUltimaAlteracao[LEN_DATA_HORA];

        short oiIdNrCPF = 0;
        short oiDsTipoGestor = 0;
        short oiNmNome = 0;
        short oiNmNomeMeio = 0;
        short oiNmSobreNome = 0;
        short oiNmCargo = 0;
        short oiNmLogradouro = 0;
        short oiNrEndereco = 0;
        short oiNmEnderecoComplemento = 0;
        short oiNmBairro = 0;
        short oiNmCidade = 0;
        short oiNrCEP = 0;
        short oiIdUF = 0;
        short oiDsEmail = 0;
        short oiDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

	struct sqlca sqlca;

	STRCPY_TO_ORA(oszIdNrCPF, ptGestorConta->szIdNrCPF);

	EXEC SQL WHENEVER SQLERROR	goto erro;
	EXEC SQL WHENEVER NOT FOUND goto naoexiste;

	EXEC SQL
        SELECT
            cgc.idnrcpf,
            cgc.dstipogestor,
            cgc.nmnome,
            cgc.nmnomemeio,
            cgc.nmsobrenome,
            cgc.nmcargo,
            cgc.iduf,
            cgc.nmlogradouro,
            cgc.nrendereco,
            cgc.nmenderecocomplemento,
            cgc.nmbairro,
            cgc.nmcidade,
            cgc.nrcep,
            cgc.dsemail,
            TO_CHAR(cgc.dtultimaalteracao, 'DD/MM/YYYY HH24:MI')
        INTO
            :oszIdNrCPF:oiIdNrCPF,
            :oszDsTipoGestor:oiDsTipoGestor,
            :oszNmNome:oiNmNome,
            :oszNmNomeMeio:oiNmNomeMeio,
            :oszNmSobreNome:oiNmSobreNome,
            :oszNmCargo:oiNmCargo,
            :oszIdUF:oiIdUF,
            :oszNmLogradouro:oiNmLogradouro,
            :oszNrEndereco:oiNrEndereco,
            :oszNmEnderecoComplemento:oiNmEnderecoComplemento,
            :oszNmBairro:oiNmBairro,
            :oszNmCidade:oiNmCidade,
            :oszNrCEP:oiNrCEP,
            :oszDsEmail:oiDsEmail,
            :oszDtUltimaAlteracao:oiDtUltimaAlteracao
        FROM
            customer.gestorconta cgc
        WHERE
            cgc.idnrcpf = :oszIdNrCPF;


    if(oiIdNrCPF != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szIdNrCPF, oszIdNrCPF);
    }
    if(oiDsTipoGestor != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szDsTipoGestor, oszDsTipoGestor);
    }
    if(oiNmNome != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmNome, oszNmNome);
    }
    if(oiNmNomeMeio != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmNomeMeio, oszNmNomeMeio);
    }
    if(oiNmSobreNome != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmSobreNome, oszNmSobreNome);
    }
    if(oiNmCargo != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmCargo, oszNmCargo);
    }
    if(oiIdUF != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szIdUF, oszIdUF);
    }
    if(oiNmLogradouro != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmLogradouro, oszNmLogradouro);
    }
    if(oiNrEndereco != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNrEndereco, oszNrEndereco);
    }
    if(oiNmEnderecoComplemento != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmEnderecoComplemento, oszNmEnderecoComplemento);
    }
    if(oiNmBairro != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmBairro, oszNmBairro);
    }
    if(oiNmCidade != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNmCidade, oszNmCidade);
    }
    if(oiNrCEP != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szNrCEP, oszNrCEP);
    }
    if(oiDsEmail != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szDsEmail, oszDsEmail);
    }
    if(oiDtUltimaAlteracao != -1) {
        STRCPY_FROM_ORA(ptGestorConta->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }


    ULOGI("Finalizando proCBuscaGestorConta <FOUND>");
    ULOG_END("CGestorContapc::proCBuscaGestorConta");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaGestorConta <NOT FOUND>");
        ULOG_END("CGestorContapc::proCBuscaGestorConta");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaGestorConta <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
