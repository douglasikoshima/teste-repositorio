//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: ListValorPossId
//* Servidor: admValorPossivel
//*
//* Ficheiro: TUXEFO/cliente/admValorPossivel/ListValorPossId/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson Martins
//*
//* Fecha primeira version:20/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Carrega a tela inicial da Lupa Linha.
//* 
//*
//*//-------------------------------------------------------------------------------
//*  ALTERACAO  DESCRICAO
//*    01.00    Alteracao do nome do servico internamente a pedido da equipe
//*             de Suporte Tecnologico. 30/08/2004
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../include/ListValorPossId.h"

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE "Global.h";
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstValorPossivel.h";

DECLARE_TUXEDO_SERVICE(LISTVALORPOSS);

void implLISTVALORPOSS::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CCstValorPossivel *oObj;
    char* pParam;
    int iNroReg = 0;
    int iAux = 0;

    ULOG_START( "implLISTVALORPOSS::Execute()" );
    try{
         pParam = walkTree(pDnode, XML_IN_P_PARAM, 0);

         if(!pParam)
         {
             ERROR(NRO_ID_CONTEUDO_NE);
             TAG_INEXISTENTE(XML_IN_P_PARAM);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

         if (!*pParam)
         {
             ERROR(NRO_ID_CONTEUDO_VI);
             TAG_INEXISTENTE(XML_IN_P_PARAM);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }


         oObj = CCstValorPossivel::RecuperarPorIdConteudo(&iNroReg, pParam);
         XMLString::release(&pParam);

         pXmlG->createTag(XML_OUT_ROOT_VLPOSS);
         pXmlG->addProp("xmlns",XML_PROP);
         for (; iAux < iNroReg; iAux++) 
         {
             pXmlG->createTag(XML_OUT_NO_VLPOSS);
                 pXmlG->addItem(XML_OUT_CODIGO, oObj[iAux].getIdValorPossivel());
                 pXmlG->addItem(XML_OUT_DESCRI, oObj[iAux].getDsValorPossivel());
                 pXmlG->addItem(XML_OUT_SQAPRE, oObj[iAux].getSqApresentacao());
                 pXmlG->addItem(XML_OUT_DISPON, oObj[iAux].getInDisponibilidade());
                 pXmlG->addItem(XML_OUT_CODCON, oObj[iAux].getIdAtributo());
             pXmlG->closeTag();
         }
         pXmlG->closeTag();

        if (oObj)
            free(oObj);

    }catch(...){
        throw;
    }

	// Execução OK.
    ULOG_END( "implLISTVALORPOSS::Execute()" );
	INFORMATION(NRO_OK);
	setStatusCode(sNrMsg, MSG_OK);
}



