/*
 * Serviço de Associar consultor de relacionamento
 * Versão inicial, 10/07/2004
 */
/*
 * Para que o serviço saibam quais usuários são consultores de relacionamento,
 * deve existir a linha abaixo na tabela apoio.parametro indicando qual o ID
 * do grupo consultor de relacionamento.
 *
 * Para executar a query, substituir --ID-- pelo ID do grupo de consultor 
 * de relacionamento e --SQ-- pelo valor da sequence, resultante da query
 * select apoio.parametrosq.sextval from dual;
 * 
 * insert into apoio.parametro
 * (idparametro, 
 *  cdparametro, 
 *  dsparametro, 
 *  dsvalorparametro, 
 *  idusuarioalteracao, 
 *  dtultimaalteracao)
 * values
 * (--SQ--, 
 *  'ID_CR', 
 *  'ID do grupo de consultor de relacionamento na tabela Acesso.Grupo', 
 *  --ID--,
 *  0,
 *  SYSDATE);
 *
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/ConRelIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classSegmentacao.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoCarteira.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/PessoaCR.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoDocumento.h";

DECLARE_TUXEDO_SERVICE(ConRelIni);

void implConRelIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CTipoCarteira* poTipoCart;
	CSegmentacao* poSegmentacao;
	CPessoaCR* poPessoa;
    CTipoDocumento* pObjTipoDoc;
	int iNroReg = 0;
	int iAux = 0;

    ULOG_START( "implConRelIni::Execute()" );
    
    try{
         xml_g->createTag(XML_OUT_ROOT);
         xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);


         // Busca todos os consultores de relacionamento
         poPessoa = CPessoaCR::listaConsultores(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_CONS_RELA);
             xml_g->addItem("idConsultor", poPessoa[iAux].getIdPessoaCR());
             xml_g->addItem("nmConsultor", rtrim(poPessoa[iAux].getNmPessoaCR()));
             xml_g->closeTag();
         }

         // Busca todos os tipos de carteira
         poTipoCart = CTipoCarteira::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_TIPO_CART);
             xml_g->addItem("idCarteirizacao", poTipoCart[iAux].getIdTipoCarteira());
             xml_g->addItem("dsCarteirizacao", rtrim(poTipoCart[iAux].getDsTipoCarteira()));
             xml_g->closeTag();
         }

         // Busca todos os tipos de segmentacao
         poSegmentacao = CSegmentacao::RecuperarTodos(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_SEG);
             xml_g->addItem("idSegmentacao", poSegmentacao[iAux].getId());
             xml_g->addItem("dsSegmentacao", rtrim(poSegmentacao[iAux].getDescricao()));
             xml_g->closeTag();
         }

        //Busca todos os tipo de documentos
         pObjTipoDoc = CTipoDocumento::listaFiltrado(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_TIPO_DOC);
             xml_g->addItem("idTipoDocumento", pObjTipoDoc[iAux].getSgTipoDocumento());
             xml_g->addItem("dsTipoDocumento", rtrim(pObjTipoDoc[iAux].getDsTipoDocumento()));
             xml_g->closeTag();
         }
        
         // Fecha Raiz
         xml_g->closeTag();

        //Liberando memoria
        free(poTipoCart);
        free(poSegmentacao);
        free(poPessoa);
        free(pObjTipoDoc);

    }catch(...){
        throw;
    }
	
	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implConRelIni::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
