//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte   : main.cpp
//* Servico : CarregaParam
//* Servidor: TelaInicial
//*
//* Ficheiro: TUXEFO/cliente/TelaInicial/CarregaParam/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson Martins
//*
//* Fecha primeira version:13/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Servico para buscar dados para serem carregados na sessao.
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include <tuxfw.h>
//#include "../../negocio/clienteCmm/include/Exception.h"
#include "../include/CarregaParam.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/Parametro.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/AreaRegistroBloqueado.h";

DECLARE_TUXEDO_SERVICE(CarregaParam);

void implCarregaParam::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    char* pParam1=0;
    char* pParam2=0;
    bool bFlagLegado;
    char szIdSistemaOrigem[21+1]={0};
    char szNrLinha[21 + 1]={0};
    char szIdLinhaTelefonica[LEN_IDLINHATELEFONICA + LEN_EOS]={0};

    CParametro oParam;

    ULOG_START( "implCarregaParam::Execute()" );

    try{
    	pParam1 = walkTree(pDnode, XML_IN_IDLINHATELEFONICA, 0);
    	if (pParam1)
    	{
            if ( !*pParam1)
            {
                ERROR(NRO_IDLINHATELEFONICA_VV);
                TAG_VALOR_VAZIO(XML_IN_IDLINHATELEFONICA);
                if (pParam1) XMLString::release(&pParam1);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            if ( !IsNumeric(pParam1) ){
                ERROR(NRO_IDLINHATELEFONICA_VI);
                TAG_VALOR_INVALIDO(XML_IN_IDLINHATELEFONICA);
        		if (pParam1) XMLString::release(&pParam1);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
    		strcpy(szIdLinhaTelefonica, pParam1);
    	}
    	else
    	{
        pParam1 = walkTree(pDnode, XML_IN_NRLINHA, 0);
        if(!pParam1)
        {
            ERROR(NRO_NR_LINHA_NE);
            TAG_INEXISTENTE(XML_IN_NRLINHA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam1)
        {
            ERROR(NRO_NR_LINHA_VV);
            TAG_VALOR_VAZIO(XML_IN_NRLINHA);

            if (pParam1) XMLString::release(&pParam1);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam1) ){
            ERROR(NRO_NR_LINHA_VI);
            TAG_VALOR_INVALIDO(XML_IN_NRLINHA);

    		if (pParam1) XMLString::release(&pParam1);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        strcpy(szNrLinha, pParam1);
    	}

        pParam2 = walkTree(pDnode, XML_IN_TIPORELACIONAMENTO, 0);
        if(!pParam2)
        {
            ERROR(NRO_ID_TPRELACIONA_VV);
            TAG_INEXISTENTE(XML_IN_TIPORELACIONAMENTO);
            if (pParam1) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam2)
        {
            ERROR(NRO_ID_TPRELACIONA_VV);
            TAG_VALOR_VAZIO(XML_IN_TIPORELACIONAMENTO);

       		if (pParam1) XMLString::release(&pParam1);
       		if (pParam2) XMLString::release(&pParam2);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam2) ){
            ERROR(NRO_ID_TPRELACIONA_VV);
            TAG_VALOR_INVALIDO(XML_IN_TIPORELACIONAMENTO);

       		if (pParam1) XMLString::release(&pParam1);
       		if (pParam2) XMLString::release(&pParam2);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        if (szIdLinhaTelefonica[0])
        	oParam.RecuperarPorIdLinhaTelefonica(pParam1, pParam2);
        else
        oParam.Recuperar(pParam1, atoi(pParam2));

   		if (pParam1) XMLString::release(&pParam1);
   		if (pParam2) XMLString::release(&pParam2);

        pXmlG->createTag(XML_OUT_ROOT);
        pXmlG->addProp("xmlns", XML_OUT_PROP);

            pXmlG->addItem(XML_OUT_IDLINHA, oParam.getIdLinhaTelefonica());
            pXmlG->addItem(XML_OUT_IDTIPOLINHA, oParam.getIdTipoLinha());
            pXmlG->addItem(XML_OUT_NRLINHA, oParam.getNrLinha());
            pXmlG->addItem(XML_OUT_IDLINHAHIST, oParam.getIdPessoaLinhaHistorico());
            pXmlG->addItem(XML_OUT_CODAREA, oParam.getCdAreaRegistro());
            pXmlG->addItem(XML_OUT_IDCONTA, oParam.getIdConta());
            pXmlG->addItem(XML_OUT_CDCONTA, oParam.getCdConta());
            pXmlG->addItem(XML_OUT_LINSISTORIG, oParam.getIdLinhaSistemaOrigem());
            pXmlG->addItem(XML_OUT_CTASISTORIG, oParam.getIdContaSistemaOrigem());
            pXmlG->addItem(XML_OUT_PESSOACLI, oParam.getIdCliente());
            pXmlG->addItem(XML_OUT_CLIDEPARA, oParam.getIdClienteDePara());
            pXmlG->addItem(XML_OUT_PESSOAUSU, oParam.getIdUsuario());
            pXmlG->addItem(XML_OUT_USUDEPARA, oParam.getIdUsuarioDePara());
            pXmlG->addItem(XML_OUT_TIPOPESSOA, oParam.getIdTipoPessoa());
            pXmlG->addItem(XML_OUT_NMCLIENTE, oParam.getNmPessoa());
            pXmlG->addItem(XML_OUT_TPCARTEIRA, oParam.getIdTipoCarteira());
            pXmlG->addItem(XML_OUT_IDSEGMENTACAO, oParam.getIdSegmentacao());
            pXmlG->addItem(XML_OUT_UFOPERADORA, oParam.getIdUfOperador());
            pXmlG->addItem(XML_OUT_DSTPCARTEIRA, oParam.getDsTipoCarteira());
            pXmlG->addItem(XML_OUT_DSSEGMENTACAO, oParam.getDsSegmentacao());
            pXmlG->addItem(XML_OUT_INCORRESPDEVOL, oParam.getInCorrespDevolvida());
            pXmlG->addItem(XML_OUT_INCORPORATIVO, oParam.getInCorporativo());
            pXmlG->addItem(XML_IN_TIPORELACIONAMENTO, oParam.getIdTipoRelacionamento());

            CAreaRegistroBloqueado carearegistrobloqueado;
            if (szIdLinhaTelefonica[0])
            	carearegistrobloqueado.setNrLinha(oParam.getNrLinha());
            else
            carearegistrobloqueado.setNrLinha(szNrLinha);

            if(carearegistrobloqueado.DDDBloqueado() == true)
            {
                pXmlG->addItem("inBloqueado", "1");
            }
            else
            {
                pXmlG->addItem("inBloqueado", "0");
            }

	        ULOG("antes de buscaLegado");
	
	        // Busca IdSistemaOrigem
	        if(oParam.buscaIdSistemaOrigem((oParam.getNrLinha()+2), oParam.getCdAreaRegistro(), szIdSistemaOrigem) == true) {
		        // busca pelo idTipoLinha e IdUfOperadora
		        bFlagLegado = oParam.buscaLegado(oParam.getIdUfOperador(), szIdSistemaOrigem);

	            if(bFlagLegado == false)
                {
	                pXmlG->addItem(XML_OUT_INLEGADO, "1");
	            }
	            else
                {
	                pXmlG->addItem(XML_OUT_INLEGADO, "0");
	            }
	        }
            else {
                pXmlG->addItem(XML_OUT_INLEGADO, "0");
            }

        	ULOG("depois de buscaLegado");

        pXmlG->closeTag();  // fecha a tag principal

        ULOG("Final CarregaParam");

    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCarregaParam::Execute()" );

	setStatusCode(sNrMsg, MSG_OK);
}
