/*
 * Serviço de cadastro básico de status de correspondencia
 * Versão inicial, 24/05/2004
 */

//EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/StatusCorrespondencia.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/StatusUnidade.h";

#include "../include/StatusCorrespondenciaAltera.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Global.h"
#include <tuxfw.h>

DECLARE_TUXEDO_SERVICE(StatCorrAlt);

void implStatCorrAlt::Execute(DOMNode* dnode, XMLGen* xml_g) {

    CStatusCorrespondencia oStatCorr;
    char* pcIdStatCorr;
    int iIdStatCorr;
    int iQtDiasValido;
    int iIdProx;
    char* pcDisp;
    int iDisp;

    int iAux=0;
    int iIdUnidade;
    CStatusUnidade oStatusUnidade;
    int iRet;

    ULOG_START( "implStatCorrAlt::Execute()" );

    // Navega o XML e recupera as informacoes obrigatorias
    pcIdStatCorr = walkTree(dnode, XML_IN_ID_TIPO, 0);
    if (pcIdStatCorr == NULL) {
        ERROR(NRO_STAT_CORR_ID_NE);
        TAG_INEXISTENTE(XML_IN_ID_TIPO);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcIdStatCorr) {
        ERROR(NRO_STAT_CORR_ID_VV);
        TAG_VALOR_VAZIO(XML_IN_ID_TIPO);
        if (pcIdStatCorr)
            XMLString::release(&pcIdStatCorr);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if ((iIdStatCorr = atoi(pcIdStatCorr)) <= 0) {
        ERROR(NRO_STAT_CORR_ID_VI);
        TAG_VALOR_INVALIDO(XML_IN_ID_TIPO);
        if (pcIdStatCorr)
            XMLString::release(&pcIdStatCorr);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (pcIdStatCorr)
        XMLString::release(&pcIdStatCorr);
    
    pcDisp = walkTree(dnode, XML_IN_DISP, 0);
    if (pcDisp == NULL) {
        ERROR(NRO_INDISPON_NE);
        TAG_INEXISTENTE(XML_IN_DISP);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcDisp) {
        ERROR(NRO_INDISPON_VI);
        TAG_VALOR_VAZIO(XML_IN_DISP);
        if (pcDisp)
            XMLString::release(&pcDisp);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    iDisp = atoi(pcDisp);
    if (iDisp != 0 && iDisp != 1) {
        ERROR(NRO_INDISPON_VI);
        TAG_VALOR_INVALIDO(XML_IN_DISP);
        if (pcDisp)
            XMLString::release(&pcDisp);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (pcDisp)
        XMLString::release(&pcDisp);

    // Monta o objeto de StatusCorrespondencia
    oStatCorr.setIdStatusCorrespondencia(iIdStatCorr);

    char* p = walkTree(dnode, XML_IN_SG_TIPO, 0);

    oStatCorr.setSgStatus( p );
    XMLString::release(&p);

    p = walkTree(dnode, XML_IN_DS_TIPO, 0);

    oStatCorr.setDsStatus( p );
    XMLString::release(&p);

    oStatCorr.setInDisponibilidade(iDisp);

    p = walkTree(dnode, XML_IN_QT_VALIDO, 0);

    if (p == NULL || !p)
        oStatCorr.setQtDiasValido(NULL);
    else {
        if ((iQtDiasValido = atoi( p )) <= 0) {
            ERROR(NRO_STAT_CORR_QT_DIAS_VI);
            TAG_VALOR_INVALIDO(XML_IN_QT_VALIDO);
            if (p)
                XMLString::release(&p);
            TuxBasicSvcException(sNrMsg, sMsg);
        } else 
            oStatCorr.setQtDiasValido(&iQtDiasValido);
    }

    if (p)
        XMLString::release(&p);

    p = walkTree(dnode, XML_IN_ID_PROXIMO, 0);

    if (p == NULL || !p)
        oStatCorr.setIdProximoStatus(NULL);
    else {
        if ((iIdProx = atoi( p )) <= 0) {
            ERROR(NRO_STAT_CORR_PROX_ID_VI);
            TAG_VALOR_INVALIDO(XML_IN_ID_PROXIMO);
            if (p)
                XMLString::release(&p);
            TuxBasicSvcException(sNrMsg, sMsg);
        } else 
            oStatCorr.setIdProximoStatus(&iIdProx);
    }

    if (p)
        XMLString::release(&p);

    // Atualiza as informações no banco de dados
    oStatCorr.setUsuarioAlteracao(getUser());
    iRet = oStatCorr.altera();
    if (iRet == DUPLICATE_KEY)
    {
            xml_g->addItem("FAILED", "DUPLICATE KEY");

    }
    else{
        // Remove todos os status de unidade
        CStatusUnidade::excluiPorStatus(oStatCorr.getIdStatusCorrespondencia());
        // Busca a lista que veio no XML de entrada e insere.

        while(true) {
            p = walkTree(dnode, XML_IN_ID_UNIDADE, iAux);

            if (p == NULL)
                break;

            iIdUnidade = atoi( p );

            XMLString::release(&p);

            oStatusUnidade.setIdUnidade(iIdUnidade);
            oStatusUnidade.setIdStatusCorrespondencia(oStatCorr.getIdStatusCorrespondencia());

            // Inclui
            oStatusUnidade.inclui();
            iAux++;     
        }
    }

    ULOG_END( "implStatCorrAlt::Execute()" );

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}

