/*
 * Serviço de Correspondencia devolvida - Manutenção de correspondencia, tela inicial.
 * Versão inicial, 26/05/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevMantIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/CorrespondenciaDevolvida.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoCorrespondencia.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/StatusCorrespondencia.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/HistoricoStatusCorrespondencia.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/MotivoDevolucao.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/UF.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/Pais.h";

DECLARE_TUXEDO_SERVICE(CorrDevMantIni);

void implCorrDevMantIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CStatusCorrespondencia* poStatCorr;
	int nroReg = 0;
	int iAux = 0;

	char** ppcNomeEDocto;
    char *pCdConta;
    char *pNrLinha;

	CTipoCorrespondencia* poTpoCorr;
	CMotivoDevolucao* poMotDev;
	CUF* poUF;
	CPais* poPais;
	CHistoricoStatusCorrespondencia* poHistStatCorr;

	CCorrespondenciaDevolvida* poCorrDev;
	char *pcIdCorrDev;
	int iIdCorrDev;

    ULOG_START( "implCorrDevMantIni::Execute()" );
	
    try{
         // Navega o XML e recupera as informacoes obrigatorias
         pcIdCorrDev = walkTree(dnode, XML_IN_ID_CORR_DEV, 0);
         if (pcIdCorrDev == NULL) {
             ERROR(NRO_ID_CORR_DEV_NE);
             TAG_INEXISTENTE(XML_IN_ID_CORR_DEV);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdCorrDev) {
             ERROR(NRO_ID_CORR_DEV_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_CORR_DEV);

		     if (pcIdCorrDev)
			    XMLString::release(&pcIdCorrDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdCorrDev = atoi(pcIdCorrDev)) <= 0) {
             ERROR(NRO_ID_CORR_DEV_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_CORR_DEV);

		     if (pcIdCorrDev)
			    XMLString::release(&pcIdCorrDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         ULOG("pcIdCorrDev(%s)", pcIdCorrDev );	
         ULOG("iIdCorrDev[%d]", iIdCorrDev );

		 if (pcIdCorrDev)
			XMLString::release(&pcIdCorrDev);

         // Cria correspondência devolvida e traz os dados do banco de dados
         poCorrDev = new CCorrespondenciaDevolvida(iIdCorrDev);
         if (poCorrDev == NULL || poCorrDev->getIdCorrespondenciaDevolvida() < 0) {
             ERROR(NRO_ID_CORR_DEV_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_CORR_DEV);
             delete poCorrDev;
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

         // Traz as informações de Tipo Correspondencia, Motivo de Devolucao, Estado e Pais
         poTpoCorr = new CTipoCorrespondencia(poCorrDev->getIdTipoCorrespondencia());
         poMotDev = new CMotivoDevolucao(poCorrDev->getIdMotivoDevolucao());
         poUF = new CUF(poCorrDev->getIdUf());
         poPais = new CPais(poCorrDev->getIdPais());

         // Recupera nome do cliente, número do documento e Tipo do Documento
         ULOG("Recupera nome do cliente, número do documento e Tipo do Documento");	

         ppcNomeEDocto = poCorrDev->getNomeEDoctoCliente();

         // Cria o XML com os dados da correpondencia
         xml_g->createTag(XML_OUT_ROOT);
         xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);

         pCdConta = poCorrDev->getCodigoConta(iIdCorrDev);
         pNrLinha = poCorrDev->getNumeroLinha(iIdCorrDev);

         xml_g->addItem(XML_OUT_CD_CONTA, pCdConta);
         xml_g->addItem(XML_OUT_NR_LINHA, pNrLinha);

         xml_g->addItem(XML_OUT_ID_CORR_DEV, poCorrDev->getIdCorrespondenciaDevolvida());
         xml_g->addItem(XML_OUT_ID_PESSOA, poCorrDev->getIdPessoa());
         xml_g->addItem(XML_OUT_DT_DEVOLUCAO, rtrim(poCorrDev->getDtDevolucao()));
         xml_g->addItem(XML_OUT_DS_TIPO_CORRESP, rtrim(poTpoCorr->getDsTipoCorrespondencia()));
         xml_g->addItem(XML_OUT_DS_MOT_DEV, rtrim(poMotDev->getDsMotivoDevolucao()));
         if (ppcNomeEDocto[0] != NULL)
         {
             xml_g->addItem(XML_OUT_NM_CLIENTE,ppcNomeEDocto[0]);
             free(ppcNomeEDocto[0]);
         }
         if (ppcNomeEDocto[1] != NULL)
         {
             xml_g->addItem(XML_OUT_NR_DOCTO,ppcNomeEDocto[1]);
             free(ppcNomeEDocto[1]);
		 }
         if (ppcNomeEDocto[2] != NULL)
		 {
             xml_g->addItem(XML_OUT_TP_DOCUMENTO,ppcNomeEDocto[2]);
			 free(ppcNomeEDocto[2]);
		 }
         xml_g->addItem(XML_OUT_DT_TELEMENSAGEM, rtrim(poCorrDev->getDtEnvioTelemensagem()));
         xml_g->addItem(XML_OUT_DT_SMS, rtrim(poCorrDev->getDtEnvioSMS()));
         
         xml_g->createTag(XML_OUT_ENDERECO_BASE);
         xml_g->addItem(XML_OUT_DS_ENDERECO, rtrim(poCorrDev->getNmLogradouro()));
         xml_g->addItem(XML_OUT_NR_ENDERECO, rtrim(poCorrDev->getNrEndereco()));
         xml_g->addItem(XML_OUT_DS_COMPLEMENTO, rtrim(poCorrDev->getDsComplemento()));
         xml_g->addItem(XML_OUT_DS_BAIRRO, rtrim(poCorrDev->getNmBairro()));
         xml_g->addItem(XML_OUT_DS_CIDADE, rtrim(poCorrDev->getNmCidade()));
         xml_g->addItem(XML_OUT_NR_CEP, rtrim(poCorrDev->getNrCEP()));
         
         xml_g->createTag(XML_OUT_UF);
         xml_g->addItem(XML_OUT_UF_ID, poUF->getIdUF());
         xml_g->addItem(XML_OUT_UF_SG, rtrim(poUF->getSgUF()));
         xml_g->addItem(XML_OUT_UF_DS, rtrim(poUF->getNmUF()));
         xml_g->closeTag();

         xml_g->createTag(XML_OUT_PAIS);
         xml_g->addItem(XML_OUT_PAIS_ID, poPais->getIdPais());
         xml_g->addItem(XML_OUT_PAIS_SG, rtrim(poPais->getSgPais()));
         xml_g->addItem(XML_OUT_PAIS_DS, rtrim(poPais->getNmPais()));
         xml_g->closeTag();

         xml_g->closeTag();

         // Monta lista de Histórico de status de correspondencia
         poHistStatCorr = CHistoricoStatusCorrespondencia::listaPorCorrespondencia(poCorrDev->getIdCorrespondenciaDevolvida(), &nroReg);
         for (iAux = 0; iAux < nroReg; iAux++) {
             xml_g->createTag(XML_OUT_LISTA_HSTATUS_CORR);
             xml_g->addItem(XML_OUT_DS_HSTATUS, rtrim(poHistStatCorr[iAux].getDsStatus()));
             xml_g->addItem(XML_OUT_DT_HSTATUS, rtrim(poHistStatCorr[iAux].getDtStatus()));
             xml_g->addItem(XML_OUT_ID_STATUS, poHistStatCorr[iAux].getIdStatus());
             xml_g->closeTag();
         }

         // Recuperando o status atual
		 char* pcIdStatAtu = poHistStatCorr->getStatusAtual(poCorrDev->getIdCorrespondenciaDevolvida());
         xml_g->addItem(XML_OUT_ID_HSTATUS, pcIdStatAtu);

         // Monta lista de status de correspondencia
         poStatCorr = CStatusCorrespondencia::listaPorTipoUnidade(&nroReg, "CORRALTERAR");
         for (iAux = 0; iAux < nroReg; iAux++) {
			if (poStatCorr[iAux].getInDisponibilidade() || poStatCorr[iAux].getIdStatusCorrespondencia() == atoi(pcIdStatAtu)) {
				xml_g->createTag(XML_OUT_STATUS_CORRESP);
				xml_g->addItem(XML_OUT_ID_STATUS, poStatCorr[iAux].getIdStatusCorrespondencia());
				xml_g->addItem(XML_OUT_DS_STATUS, rtrim(poStatCorr[iAux].getDsStatus()));
				xml_g->closeTag();
			}
         }

		if (pcIdStatAtu)
			free (pcIdStatAtu);

         // Traz todos os estados
         if (poUF) delete poUF;

         poUF = CUF::lista(&nroReg);
         for (iAux = 0; iAux < nroReg; iAux++) {
             xml_g->createTag(XML_OUT_UF);
             xml_g->addItem(XML_OUT_UF_ID, poUF[iAux].getIdUF());
             xml_g->addItem(XML_OUT_UF_SG, rtrim(poUF[iAux].getSgUF()));
             xml_g->addItem(XML_OUT_UF_DS, rtrim(poUF[iAux].getNmUF()));
             xml_g->closeTag();
         }

         // Traz todos os países
         if (poPais) delete poPais;

         poPais = CPais::lista(&nroReg);
         for (iAux = 0; iAux < nroReg; iAux++) {
             xml_g->createTag(XML_OUT_PAIS);
             xml_g->addItem(XML_OUT_PAIS_ID, poPais[iAux].getIdPais());
             xml_g->addItem(XML_OUT_PAIS_SG, rtrim(poPais[iAux].getSgPais()));
             xml_g->addItem(XML_OUT_PAIS_DS, rtrim(poPais[iAux].getNmPais()));
             xml_g->closeTag();
         }

         xml_g->closeTag();

         // Libera a memória ocupada
		 if (ppcNomeEDocto)
			 free (ppcNomeEDocto);

		 if (pNrLinha)
			 free (pNrLinha);

         free(poStatCorr);
         free(poHistStatCorr);
         free(poUF);
         free(poPais);
         delete poMotDev;
         delete poCorrDev;
         delete poTpoCorr;
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCorrDevMantIni::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
