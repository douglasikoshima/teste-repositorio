#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"


EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

#include "../include/FILAPREPAGO.h"
#include "../../negocio/clienteCmm/include/ApoioParametro.h"
#include "../../negocio/clienteCmm/include/FilaSetClientInfo.h"
#include "../../negocio/clienteCmm/include/LogFilaSetClientInfo.h"

DECLARE_TUXEDO_SERVICE(FILAPREPAGO);

void implFILAPREPAGO::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    char szDsOperacao[21 + 1];
    char szAux[512 + 1];
    int iCount;
    char *pwt;

    ApoioParametro *pclApoioParametro=NULL;
    FilaSetClientInfo *pclFilaSetClientInfo=NULL;
    LogFilaSetClientInfo *pclLogFilaSetClientInfo=NULL;

    TFilaSetClientInfo *pFSCInfo=NULL;

    TFilaSetClientInfo tFilaSetClientInfoAux;
    TFilaSetClientInfo *ptFilaSetClientInfoAux=NULL;


    try
    {
        ULOG_START("implFILAPREPAGO::Execute");

        pclFilaSetClientInfo = new FilaSetClientInfo();
        pclApoioParametro = new ApoioParametro(getUser());
        pclLogFilaSetClientInfo = new LogFilaSetClientInfo(getUser());

        /* Referente a dsOperacao */
        GET_WALKTREE("dsOperacao", szDsOperacao);

        pXmlG->createTag("FilaPrePagoVO");
        pXmlG->addProp("xmlns", "cliente.fo.vivo.com.br/vo");

        /* Verifica operacao */
        if(!strcmp(szDsOperacao, "getStatusParametro")) {
            /* referente ao status do processamento (ativo/inativo) */
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_ATIVO");
            if(pclApoioParametro->buscaApoioParametro() == false) {
                sprintf(szAux, "Parametro nao encontrado [%s]", pclApoioParametro->getCdParametro());
                throw new TuxBasicSvcException("13E0001", szAux);
            }
            pXmlG->addItem("nrStatusFila", pclApoioParametro->getDsValorParametro()); ULOG("nrStatusFila[%s]", pclApoioParametro->getDsValorParametro());

            /* referente ao tamanho do cursor */
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_CURSOR");
            if(pclApoioParametro->buscaApoioParametro() == false) {
                sprintf(szAux, "Parametro nao encontrado [%s]", pclApoioParametro->getCdParametro());
                throw new TuxBasicSvcException("13E0001", szAux);
            }
            pXmlG->addItem("nrCursor", pclApoioParametro->getDsValorParametro()); ULOG("nrCursor[%s]", pclApoioParametro->getDsValorParametro());


            /* referente ao tempo de espera quando nao ha mais registros para serem processados */
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_SLEEP_EOF");
            if(pclApoioParametro->buscaApoioParametro() == false) {
                sprintf(szAux, "Parametro nao encontrado [%s]", pclApoioParametro->getCdParametro());
                throw new TuxBasicSvcException("13E0001", szAux);
            }
            pXmlG->addItem("nrSleep", pclApoioParametro->getDsValorParametro()); ULOG("nrSleep[%s]", pclApoioParametro->getDsValorParametro());

        }
        else if(!strcmp(szDsOperacao, "setStatusParametro")) {
            /* Referente a nrSleep */
            GET_WALKTREE("nrSleep", szAux);
            pclApoioParametro->setDsValorParametro(szAux);
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_SLEEP_EOF");
            pclApoioParametro->atualizaApoioParametro();

            /* Referente a nrCursor */
            GET_WALKTREE("nrCursor", szAux);
            pclApoioParametro->setDsValorParametro(szAux);
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_CURSOR");
            pclApoioParametro->atualizaApoioParametro();
        }
        else if(!strcmp(szDsOperacao, "stopDaemonParametro")) {
            pclApoioParametro->setDsValorParametro("0");
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_ATIVO");
            pclApoioParametro->atualizaApoioParametro();
        }
        else if(!strcmp(szDsOperacao, "startDaemonParametro")) {
            pclApoioParametro->setDsValorParametro("1");
            pclApoioParametro->setCdParametro("ENVIA_LEGADO_ATIVO");
            pclApoioParametro->atualizaApoioParametro();
        }
        else if(!strcmp(szDsOperacao, "consultaFila")) {
            for(iCount=0, pFSCInfo=NULL; (pFSCInfo=pclFilaSetClientInfo->buscaFilaSetClientInfoGroupError()) != NULL; iCount++) {
                pXmlG->createTag("GrupoErroVO");
                    pXmlG->addItem("cdErro", pFSCInfo->szCdErro); ULOG("pFSCInfo->szCdErro[%s]", pFSCInfo->szCdErro);
                    pXmlG->addItem("dsErro", pFSCInfo->szDsErro); ULOG("pFSCInfo->szDsErro[%s]", pFSCInfo->szDsErro);
                    pXmlG->addItem("countErro", pFSCInfo->szCount); ULOG("pFSCInfo->szCount[%s]", pFSCInfo->szCount);
                pXmlG->closeTag();
            }
        }
        else if(!strcmp(szDsOperacao, "consultaDetalheFila")) {
            /* Referente a cdErro */
            GET_WALKTREE("cdErro", szAux); pclFilaSetClientInfo->setCdErro(szAux);
            GET_WALKTREE("regIni", szAux); pclFilaSetClientInfo->setRegIni(szAux);
            GET_WALKTREE("regFim", szAux); pclFilaSetClientInfo->setRegFim(szAux);
            
            for(iCount=0, pFSCInfo=NULL; (pFSCInfo=pclFilaSetClientInfo->buscaFilaSetClientInfoDetailError()) != NULL; iCount++) {
                pXmlG->createTag("GrupoErroVO");
                    pXmlG->addItem("idFilaSetClientInfo", pFSCInfo->szIdFilaSetClientInfo); ULOG("pFSCInfo->szIdFilaSetClientInfo[%s]", pFSCInfo->szIdFilaSetClientInfo);
                    pXmlG->addItem("dtTimeStamp", pFSCInfo->szDtTimeStamp); ULOG("pFSCInfo->szDtTimeStamp[%s]", pFSCInfo->szDtTimeStamp);
                    pXmlG->addItem("dtErro", pFSCInfo->szDtErro); ULOG("pFSCInfo->szDtErro[%s]", pFSCInfo->szDtErro);
                    pXmlG->addItem("xml", pFSCInfo->szXml1); ULOG("pFSCInfo->szXml1[%s]", pFSCInfo->szXml1);
                pXmlG->closeTag();
            }
        }
        else if(!strcmp(szDsOperacao, "apagaGrupoErroFila")) {
            GET_WALKTREE("cdErro", szAux);

            for(iCount=0; (ptFilaSetClientInfoAux=pclFilaSetClientInfo->buscaFilaSetClientInfoCdErro(szAux)) != NULL; iCount++)
            {
                pclLogFilaSetClientInfo->clearLogFilaSetClientInfo();
                pclLogFilaSetClientInfo->setIdLinhaTelefonica((char *)ptFilaSetClientInfoAux->szIdLinhaTelefonica);
                pclLogFilaSetClientInfo->setXml((char *)ptFilaSetClientInfoAux->szXml1);
                pclLogFilaSetClientInfo->insereLogFilaSetClientInfo();
            }

            ULOG("iCount(%d)", iCount);
            if(iCount > 0)
            {
                pclFilaSetClientInfo->clearFilaSetClientInfo();
                pclFilaSetClientInfo->setCdErro(szAux);
                pclFilaSetClientInfo->apagaGrupoErroFilaSetClientInfo();
            }
        }
        else if(!strcmp(szDsOperacao, "apagaIdErroFila")) {
            for(iCount=0; (pwt = walkTree(pDnode, "idFilaSetClientInfo", iCount)) != NULL; iCount++) {
                ULOG("pwt[%s]iCount(%d)", pwt?pwt:"..NULL..", iCount);

                if(!*pwt) {
                    ERROR(NRO_TAG_ACAO_VI); TAG_VALOR_VAZIO("idFilaSetClientInfo");
                    if(pwt) XMLString::release(&pwt);
                    throw new TuxBasicSvcException(sNrMsg, sMsg);
                }
                strcpy(szAux, pwt);
                if(pwt) XMLString::release(&pwt);


                /* usado para obter as informacoes para log */
                memset(&tFilaSetClientInfoAux, 0x00, sizeof(TFilaSetClientInfo));
                strcpy(tFilaSetClientInfoAux.szIdFilaSetClientInfo, szAux);
                pclFilaSetClientInfo->buscaFilaSetClientInfo(&tFilaSetClientInfoAux);

                /* Grava log */
                pclLogFilaSetClientInfo->clearLogFilaSetClientInfo();
                pclLogFilaSetClientInfo->setIdLinhaTelefonica((char *)&tFilaSetClientInfoAux.szIdLinhaTelefonica);
                pclLogFilaSetClientInfo->setXml((char *)&tFilaSetClientInfoAux.szXml1);
                pclLogFilaSetClientInfo->insereLogFilaSetClientInfo();

                /* Apaga o registro efetivamente */
                pclFilaSetClientInfo->clearFilaSetClientInfo();
                pclFilaSetClientInfo->setIdFilaSetClientInfo(szAux);
                pclFilaSetClientInfo->apagaIdFilaSetClientInfo();
            }
        }
        else if(!strcmp(szDsOperacao, "atualizaGrupoErroFila")) {
            GET_WALKTREE("cdErro", szAux);
            pclFilaSetClientInfo->clearFilaSetClientInfo();
            pclFilaSetClientInfo->setCdErro(szAux);
            pclFilaSetClientInfo->atualizaGrupoErroFilaSetClientInfo();
        }
        else if(!strcmp(szDsOperacao, "atualizaIdErroFila")) {
            for(iCount=0; (pwt = walkTree(pDnode, "idFilaSetClientInfo", iCount)) != NULL; iCount++) {
                ULOG("pwt[%s]iCount(%d)", pwt?pwt:"..NULL..", iCount);

                if(!*pwt) {
                    ERROR(NRO_TAG_ACAO_VI); TAG_VALOR_VAZIO("idFilaSetClientInfo");
                    if(pwt) XMLString::release(&pwt);
                    throw new TuxBasicSvcException(sNrMsg, sMsg);
                }

                strcpy(szAux, pwt);
                if(pwt) XMLString::release(&pwt);

                pclFilaSetClientInfo->clearFilaSetClientInfo();
                pclFilaSetClientInfo->setIdFilaSetClientInfo(szAux);
                pclFilaSetClientInfo->atualizaIdFilaSetClientInfo();
            }
        }
        else {
            ERROR(NRO_TAG_ACAO_VI);
            TAG_VALOR_INVALIDO("dsOperacao");
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        pXmlG->closeTag();
    }
    catch(...)
    {
        ULOG("Exception!");
        delete pclApoioParametro;
        delete pclFilaSetClientInfo;
        delete pclLogFilaSetClientInfo;

        ULOG_END("implFILAPREPAGO::Execute");
        throw;
    }

    delete pclApoioParametro;
    delete pclFilaSetClientInfo;
    delete pclLogFilaSetClientInfo;

    ULOG_END("implFILAPREPAGO::Execute");

	INFORMATION(NRO_OK);
	setStatusCode(sNrMsg, MSG_OK);
}
