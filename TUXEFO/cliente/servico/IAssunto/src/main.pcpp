//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: IAssunto
//* Servidor: admAssunto
//*
//* Ficheiro: TUXEFO/cliente/admPermissao/IAssunto/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:01/05/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* 
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

#include "../include/IAssunto.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstAssunto.h";

DECLARE_TUXEDO_SERVICE(IAssunto);

void implIAssunto::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
char *pParam;
CCstAssunto oObj;
int iRet;

    try{
        ULOG_START( "implIAssunto::Execute()" );

        pParam = walkTree(pDnode, XML_DESC, 0);
        if(!pParam)
        {
            ERROR(NRO_DS_ASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_DESC);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_DS_ASSUNTO_NR_NE);
            TAG_VALOR_VAZIO(XML_DESC);
			XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
	    oObj.setDsAssunto(pParam);
		if (pParam) XMLString::release(&pParam);

        //
        pParam = walkTree(pDnode, XML_DISP, 0);
        if(!pParam)
        {
            ERROR(NRO_DISPONIB_NR_NE);
            TAG_INEXISTENTE(XML_DISP);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_DISPONIB_NR_VI);
            TAG_VALOR_VAZIO(XML_DISP);
			XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
	    oObj.setInDisponibilidade(pParam);
		if (pParam) XMLString::release(&pParam);
        //

	    // Guarda o usuario que esta executando esse servico
	    oObj.setUsuarioAlteracao(getUser());

        iRet = oObj.Incluir();

        switch(iRet){
            case NOK:
                ERROR(NRO_INSERT_NAO_EFETUADO);
                throw new TuxBasicSvcException(sNrMsg, MSG_INSERT_NAO_EFETUADO);
                
            case DUPLICATE_KEY:
                pXmlG->addItem("FAILED", "DUPLICATE KEY");                

        }
        ULOG_END( "implIAssunto::Execute()" );
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}
