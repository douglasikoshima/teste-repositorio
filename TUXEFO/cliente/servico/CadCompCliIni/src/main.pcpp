/*
 * Serviço de cadastro de dados comportamentais de cliente - carga inicial de
 * dados de assunto e subassunto
 * Versão inicial, 09/06/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/CadCompCliIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstAssunto.h";

DECLARE_TUXEDO_SERVICE(CadCompCliIni);

void implCadCompCliIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CCstAssunto* poAss = NULL;
	CCstSubAssunto* poSubAss = NULL;
	int iNroReg = 0;
	int iAux = 0;
	int iAuxSub = 0;
    char *pAux;
    char szIdGrupo[LEN_NUMBER_ORA + LEN_EOS];

    ULOG_START( "implCadCompCliIni::Execute()" );
    
    try{	

        pAux = walkTree(dnode, XML_IN_ID_GRUPO, 0);
        if(pAux == NULL) {
            ERROR(NRO_ID_GRUPO_NE);
            TAG_VALOR_INVALIDO(XML_IN_ID_GRUPO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        } else {
            strcpy(szIdGrupo, pAux);
            XMLString::release(&pAux);
        }

        if ( !IsNumeric(szIdGrupo) ) {
            ERROR(NRO_ID_GRUPO_VI);
            TAG_VALOR_INVALIDO(XML_IN_ID_GRUPO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

         // Busca todos os assuntos e subassuntos.
         poAss = CCstAssunto::RecuperarTodosComSubAssunto(&iNroReg, szIdGrupo);

         // Monta XML de saída
         xml_g->createTag(XML_OUT_ROOT);
         xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
         for (iAux = 0; iAux < iNroReg; iAux++) {

             xml_g->createTag(XML_OUT_ASSUNTO);
             xml_g->addItem(XML_OUT_ID_ASSUNTO, poAss[iAux].getIdAssunto());
             xml_g->addItem(XML_OUT_DS_ASSUNTO, poAss[iAux].getDsAssunto());

             poSubAss = poAss[iAux].getSubAssuntos();

             for (iAuxSub = 0; iAuxSub < poAss[iAux].getNrSubAssuntos(); iAuxSub++) {
                 xml_g->createTag(XML_OUT_SUB_ASS);
                 xml_g->addItem(XML_OUT_ID_SUB_ASSUNTO, poSubAss[iAuxSub].getIdSubAssunto());
                 xml_g->addItem(XML_OUT_DS_SUB_ASSUNTO, poSubAss[iAuxSub].getNmSubAssunto());
                 xml_g->addItem(XML_OUT_SEQ_APR, poSubAss[iAuxSub].getSqApresentacao());
                 xml_g->closeTag();

             }

             free(poSubAss);

             if (poAss[iAux].getNrSubAssuntos() <= 0) {
                 xml_g->createTag(XML_OUT_SUB_ASS);
                 xml_g->closeTag();
             }

             xml_g->closeTag();

         }
         xml_g->closeTag();

         // Libera memória
         free(poAss);
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCadCompCliIni::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}