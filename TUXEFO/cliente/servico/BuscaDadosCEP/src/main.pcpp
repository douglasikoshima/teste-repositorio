//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: BuscaDadosCEP
//* Servidor: LupaCliente
//*
//* Ficheiro: TUXEFO/cliente/LupaCliente/AbaEndereco/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:11/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Servico para gerar o arquivo XML com as informacoes de um determinado CEP.
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include "../include/BuscaDadosCEP.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/RelCepLogradBairro.h";

DECLARE_TUXEDO_SERVICE(BuscaDadosCEP);

void implBuscaDadosCEP::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
char *pParam;
CRelCepLogradBairro oCEP;

    ULOG_START( "implBuscaDadosCEP::Execute()" );
    
    pParam = walkTree(pDnode, XML_IN_NUMCEP, 0);
    if(!pParam)
    {
        ERROR(NRO_ID_PESSOA_NE);
        TAG_INEXISTENTE(XML_IN_NUMCEP);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if ( !*pParam)
    {
        ERROR(NRO_ID_PESSOA_VV);
        TAG_VALOR_VAZIO(XML_IN_NUMCEP);

        if (pParam) XMLString::release(&pParam);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if ( !IsNumeric(pParam) ){
        ERROR(NRO_ID_PESSOA_VI);
        TAG_VALOR_INVALIDO(XML_IN_NUMCEP);

        if (pParam) XMLString::release(&pParam);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    //

    try{
		pXmlG->createTag(XML_VO_NO_ENDERECO);
		pXmlG->addProp("xmlns",XML_PROP);
	    if ( oCEP.RecuperarPorCep(pParam) == OK ) 
        {
		    pXmlG->addItem("nmTipoLogradouro", oCEP.getDscTipoLograd());
		    pXmlG->addItem("nmTituloLogradouro", oCEP.getDscTituloLograd());
		    pXmlG->addItem("nmLogradouro", oCEP.getNomLogradouro());
		    pXmlG->addItem("nmBairro", oCEP.getNomBairro());
		    pXmlG->addItem("nmMunicipio", oCEP.getDscLocalidade());

		    pXmlG->createTag("UFVO");
		        pXmlG->addItem("idUF", oCEP.getCodUF());
		        pXmlG->addItem("sgUF", oCEP.getSglUF());
		        pXmlG->addItem("nmUF", oCEP.getNomUF());
            pXmlG->closeTag();

		    pXmlG->createTag("PaisVO");
		        pXmlG->addItem("idPais", oCEP.getCodPais());
		        pXmlG->addItem("sgPais", oCEP.getSglIso2Pais());
		        pXmlG->addItem("nmPais", oCEP.getNomPais());
            pXmlG->closeTag();
	    }
        pXmlG->closeTag();
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implBuscaDadosCEP::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}



