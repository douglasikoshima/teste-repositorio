//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: AAssunto
//* Servidor: admAssunto
//*
//* Ficheiro: TUXEFO/cliente/admAssunto/AAssunto/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:01/05/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* 
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------

//EXEC SQL INCLUDE SQLCA;

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/Messages.h"

#include "../include/AAssunto.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "classCstAssunto.h";

DECLARE_TUXEDO_SERVICE(AAssunto);

void implAAssunto::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
CCstAssunto oAssunto;
char* pParam;
int iRet;

    ULOG_START( "implAAssunto::Execute()" );
    
    try{
        pParam = walkTree(pDnode, XML_IDASS, 0);
        if(!pParam)
        {
            ERROR(NRO_ID_ASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IDASS);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_ID_ASSUNTO_NR_VV);
            TAG_VALOR_VAZIO(XML_IDASS);
       		XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam) ){
            ERROR(NRO_ID_ASSUNTO_NR_VI);
            TAG_VALOR_INVALIDO(XML_IDASS);
		    XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
	    oAssunto.setIdAssunto(pParam);
		XMLString::release(&pParam);
        //
        pParam = walkTree(pDnode, XML_DSASS, 0);
        if(!pParam)
        {
            ERROR(NRO_DS_ASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_DSASS);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_DS_ASSUNTO_NR_NE);
            TAG_VALOR_VAZIO(XML_DSASS);
		    XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        oAssunto.setDsAssunto(pParam);
		XMLString::release(&pParam);
        //
        pParam = walkTree(pDnode, XML_DISP, 0);
        if(!pParam)
        {
            ERROR(NRO_DISPONIB_NR_NE);
            TAG_INEXISTENTE(XML_DISP);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_DISPONIB_NR_VI);
            TAG_VALOR_VAZIO(XML_DISP);
       		XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
	    oAssunto.setInDisponibilidade(pParam);
		XMLString::release(&pParam);
        //

	    // Guarda o usuario que esta executando esse servico
	    oAssunto.setUsuarioAlteracao(getUser());

        iRet = oAssunto.Alterar();

        switch(iRet)
        {
            case NOK:
                ERROR(NRO_UPDATE_NAO_EFETUADO);
                pXmlG->addItem("FAILED", MSG_UPDATE_NAO_EFETUADO);
//                throw new TuxBasicSvcException(sNrMsg, MSG_UPDATE_NAO_EFETUADO);
                break;              
            case DUPLICATE_KEY:
                pXmlG->addItem("FAILED", "DUPLICATE KEY");
                break;
        }
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implAAssunto::Execute()" );

	setStatusCode(sNrMsg, MSG_OK);
}
