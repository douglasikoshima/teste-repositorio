//****************************************************************************************
//* Fonte: main.pcpp - Servico: ListAtributoId - Servidor: admAtributo
//*
//* Purpose: Servico para montar o XML de retorno do Conteudos
//*          Executa chamada do metodo RecuperaPorIdSubAss da classe CAtributo.
//* 
//* Criacao: 01/07/2004
//* 
//* ALTERACAO   DESCRICAO
//*  
//****************************************************************************************

//EXEC SQL INCLUDE SQLCA;

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"

#include "../include/ListAtributoId.h"

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE "Global.h";
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstAtributo.h";

DECLARE_TUXEDO_SERVICE(ListAtributoId);

void implListAtributoId::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CCstAtributo *oObj;
    char* pParam;
    int iNroReg = 0;
    int iAux = 0;
    char *pParam1;

    try{
        ULOG_START( "implListAtributoId::Execute()" );
        
        pParam = walkTree(pDnode, XML_IN_IDSUBASSUNTO, 0);

        if(!pParam){
            ERROR(NRO_ID_SUBASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_IDSUBASSUNTO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        if (!*pParam){
            ERROR(NRO_ID_SUBVASSUNTO_NR_VI);
            TAG_INEXISTENTE(XML_IN_IDSUBASSUNTO);

            if (pParam) XMLString::release(&pParam);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        pParam1 = walkTree(pDnode, XLM_IN_FILTRO, 0);

        if(!pParam1)        {
            ERROR(NRO_FILTRO_QUERY_NE);
            TAG_INEXISTENTE(XLM_IN_FILTRO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam1){
            pParam1 = NULL;
        }

        oObj = CCstAtributo::RecuperarPorIdSubAssETipoApresentacao(&iNroReg, pParam, pParam1);

        pXmlG->createTag(XML_OUT_ROOT_CONTEUDO);
        pXmlG->addProp("xmlns", XML_PROP);
        for (; iAux < iNroReg; iAux++) 
        {
            pXmlG->createTag(XML_OUT_NO_CONTEUDO);
                pXmlG->addItem(XML_OUT_CODIGO, oObj[iAux].getIdAtributo());
                pXmlG->addItem(XML_OUT_DESCRI, oObj[iAux].getDsAtributo());
            pXmlG->closeTag();
        }
        pXmlG->closeTag();
    
        if (oObj)
            free(oObj); //Liberando a memoria alocada dentro da classe.

        ULOG_END( "implListAtributoId::Execute()" );
        
    }
    catch(...){
        throw;
    }

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);

}



