/*
 * Serviço de Correspondencia devolvida - Executa a consulta por correspondencias a partir de um filtro
 * Versão inicial, 28/05/2004
 */
//*  ALTERACAO  DESCRICAO
//*    01.00    Alteracao do nome do servico internamente a pedido da equipe
//*             de Suporte Tecnologico. 30/08/2004


//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevFiltCons.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/BuscaCorrespondencia.h";

DECLARE_TUXEDO_SERVICE(CORRDEVFILTCO);

void implCORRDEVFILTCO::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CBuscaCorrespondencia* poBuscaCorr;
	int iNroReg;
	int iAux;
	
	char* pcDtDevIni;
	char* pcDtDevFim;
	char* pcDtRegIni;
	char* pcDtRegFim;
	char* pcNrLinha;
	char* pcIdTpCorr;
	int iIdTpCorr = -1;
	char* pcIdMotDev;
	int iIdMotDev = -1;
	char* pcIdStat;
	int iIdStat = -1;

    ULOG_START( "implCORRDEVFILTCO::Execute()" );
        
    try{
         // Navega o XML e recupera as informacoes obrigatorias
         pcDtDevIni = walkTree(dnode, "dtDevolucaoIni", 0);
         if (pcDtDevIni && !*pcDtDevIni) pcDtDevIni = NULL;
         pcDtDevFim = walkTree(dnode, "dtDevolucaoFim", 0);
         if (pcDtDevFim && !*pcDtDevFim) pcDtDevFim = NULL;
         pcDtRegIni = walkTree(dnode, "dtRegistroIni", 0);
         if (pcDtRegIni && !*pcDtRegIni) pcDtRegIni = NULL;
         pcDtRegFim = walkTree(dnode, "dtRegistroFim", 0);
         if (pcDtRegFim && !*pcDtRegFim) pcDtRegFim = NULL;
         pcNrLinha = walkTree(dnode, "nrLinha", 0);
         if (pcNrLinha && !*pcNrLinha) pcNrLinha = NULL;
         pcIdTpCorr = walkTree(dnode, "idTipoCorrespondencia", 0);
         if (pcIdTpCorr && !*pcIdTpCorr) pcIdTpCorr = NULL;
         pcIdMotDev = walkTree(dnode, "idMotivoDevolucao", 0);
         if (pcIdMotDev && !*pcIdMotDev) pcIdMotDev = NULL;
         pcIdStat = walkTree(dnode, "idStatus", 0);
         if (pcIdStat && !*pcIdStat) pcIdStat = NULL;

         // Converte para número os campos de entrada
         if(pcIdTpCorr)
             iIdTpCorr = atoi(pcIdTpCorr);
         if(pcIdMotDev)
             iIdMotDev = atoi(pcIdMotDev);
         if(pcIdStat)
             iIdStat = atoi(pcIdStat);

         // Monta a lista de correspondencias
         poBuscaCorr = CBuscaCorrespondencia::busca(pcDtDevIni,
                                                  pcDtDevFim,
                                                  pcDtRegIni,
                                                  pcDtRegFim,
                                                  pcNrLinha,
                                                  iIdTpCorr,
                                                  iIdMotDev,
                                                  iIdStat,
                                                  &iNroReg);

		 if (pcDtDevIni)
			 XMLString::release(&pcDtDevIni);

		 if (pcDtDevFim)
			 XMLString::release(&pcDtDevFim);

		 if (pcDtRegIni)
			 XMLString::release(&pcDtRegIni);

		 if (pcDtRegFim)
			 XMLString::release(&pcDtRegFim);

		 if (pcNrLinha)
			 XMLString::release(&pcNrLinha);

		 if (pcIdTpCorr)
			 XMLString::release(&pcIdTpCorr);

		 if (pcIdMotDev)
			 XMLString::release(&pcIdMotDev);

		 if (pcIdStat)
			 XMLString::release(&pcIdStat);

         xml_g->createTag("CorrespDevolvidaVO");
         xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag("ListaCorrespDevolvida");
             xml_g->addItem("idCorrespondencia", poBuscaCorr[iAux].getIdCorrespondencia());
             xml_g->addItem("nrLinha", rtrim(poBuscaCorr[iAux].getNrLinha()));
             xml_g->addItem("nrConta", rtrim(poBuscaCorr[iAux].getNrConta()));
             xml_g->addItem("dsTipoCorrespondencia", rtrim(poBuscaCorr[iAux].getDsTipoCorrespondencia()));
             xml_g->addItem("dsMotivoDevolucao", rtrim(poBuscaCorr[iAux].getDsMotivoDevolucao()));
             xml_g->addItem("dtDevolucao", rtrim(poBuscaCorr[iAux].getDtDevolucao()));
             xml_g->addItem("dtRegistro", rtrim(poBuscaCorr[iAux].getDtRegistro()));
             xml_g->addItem("nmPessoa", rtrim(poBuscaCorr[iAux].getNomePessoa()));
             xml_g->closeTag();
         }
         xml_g->closeTag();

        //Liberando memoria
        if (poBuscaCorr) 
            free(poBuscaCorr);
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCORRDEVFILTCO::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
