/*
 * Serviço de Correspondencia devolvida - Consulta de correspondencias via TELA INICIAL
 * Versão inicial, 02/07/2004
 */

//*
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio

//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevTICons.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/BuscaCorrespondenciaTI.h";

DECLARE_TUXEDO_SERVICE(CorrDevTICons);

void implCorrDevTICons::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CBuscaCorrespondenciaTI* poBuscaCorr;
	int iNroReg = 0;
	int iAux = 0;

	char* pcIdPessoa;
	int iIdPessoa;
	char* pcIdTpRel;
	int iIdTpRel;
	char* pcIdStat;
	int iIdStat;
	char* pcDtRegIni;
	char* pcDtRegFim;

    ULOG_START( "implCorrDevTICons::Execute()" );
    
    try{	
        // Checa se os campos obrigatórios vieram e são válidos.
        pcIdPessoa = walkTree(dnode, XML_IN_ID_PESSOA, 0);
        if (pcIdPessoa == NULL) {
            ERROR(NRO_ID_PESSOA_NE);
            TAG_INEXISTENTE(XML_IN_ID_PESSOA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if (!*pcIdPessoa) {
            ERROR(NRO_ID_PESSOA_VV);
            TAG_VALOR_VAZIO(XML_IN_ID_PESSOA);

            XMLString::release(&pcIdPessoa);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ((iIdPessoa = atoi(pcIdPessoa)) <= 0) {
            ERROR(NRO_ID_PESSOA_VI);
            TAG_VALOR_INVALIDO(XML_IN_ID_PESSOA);

            XMLString::release(&pcIdPessoa);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        XMLString::release(&pcIdPessoa);
        pcIdPessoa = 0;

        pcIdTpRel = walkTree(dnode, XML_IN_ID_TP_REL, 0);
        if (pcIdTpRel == NULL) {
            ERROR(NRO_TP_CORR_ID_NE);
            TAG_INEXISTENTE(XML_IN_ID_TP_REL);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if (!*pcIdTpRel) {
            ERROR(NRO_TP_CORR_ID_VV);
            TAG_VALOR_VAZIO(XML_IN_ID_TP_REL);
            XMLString::release(&pcIdTpRel);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ((iIdTpRel = atoi(pcIdTpRel)) <= 0) {
            ERROR(NRO_TP_CORR_ID_VI);
            TAG_VALOR_INVALIDO(XML_IN_ID_TP_REL);
            XMLString::release(&pcIdTpRel);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        XMLString::release(&pcIdTpRel);
        pcIdTpRel = 0;

        pcIdStat = walkTree(dnode, XML_IN_ID_STAT, 0);
        if (pcIdStat == NULL) {
            ERROR(NRO_TP_CORR_ID_NE);
            TAG_INEXISTENTE(XML_IN_ID_STAT);

            if (pcIdStat) XMLString::release(&pcIdStat);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        if( strlen( pcIdStat ) <= 0 ) {
            iIdStat = 0;
        }
        else {
            iIdStat = atoi( pcIdStat );
        }
        XMLString::release(&pcIdStat);
        pcIdStat = 0;

        // Busca os dados não obrigatórios
        pcDtRegIni = walkTree(dnode, XML_IN_DT_REG_INI, 0);
        if (pcDtRegIni && !*pcDtRegIni) {
         if ( pcDtRegIni ) XMLString::release(&pcDtRegIni);
         pcDtRegIni = NULL;
        }

        pcDtRegFim = walkTree(dnode, XML_IN_DT_REG_FIM, 0);
        if (pcDtRegFim && !*pcDtRegFim) {
         if ( pcDtRegFim ) XMLString::release(&pcDtRegFim);
         pcDtRegFim = NULL;
        }

        ULOG("Local A1");

        if (iIdTpRel == 2) {
            poBuscaCorr = CBuscaCorrespondenciaTI::buscaCli(pcDtRegIni, pcDtRegFim, iIdPessoa, iIdStat, &iNroReg);
        }
        else if (iIdTpRel == 1) {
            poBuscaCorr = CBuscaCorrespondenciaTI::buscaUsu(pcDtRegIni, pcDtRegFim, iIdPessoa, iIdStat, &iNroReg);
        }
        else
        {
            ULOG("iIdTpRel=%d",iIdTpRel);
        }

        ULOG("Local A2");

        // Monta o XML
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);
        for (iAux = 0; iAux < iNroReg; iAux++) {
            xml_g->createTag(XML_OUT_LISTA_CORR_DEV);
            xml_g->addItem(XML_OUT_ID_CORR, poBuscaCorr[iAux].getIdCorrespondencia());
            xml_g->addItem(XML_OUT_NR_LINHA, rtrim(poBuscaCorr[iAux].getNrLinha()));
            xml_g->addItem(XML_OUT_NR_CONTA, rtrim(poBuscaCorr[iAux].getNrConta()));
            xml_g->addItem(XML_OUT_DS_TP_CORR, rtrim(poBuscaCorr[iAux].getDsTipoCorrespondencia()));
            xml_g->addItem(XML_OUT_DS_MOT_DEV, rtrim(poBuscaCorr[iAux].getDsMotivoDevolucao()));
            xml_g->addItem(XML_OUT_DT_DEV, rtrim(poBuscaCorr[iAux].getDtDevolucao()));
            xml_g->addItem(XML_OUT_DT_REG, rtrim(poBuscaCorr[iAux].getDtRegistro()));
            xml_g->addItem(XML_OUT_NM_PESSOA, rtrim(poBuscaCorr[iAux].getNmPessoa()));
            xml_g->addItem(XML_OUT_ID_TP_REL, poBuscaCorr[iAux].getIdTipoRelacionamento());
            xml_g->addItem(XML_OUT_DS_TP_REL, rtrim(poBuscaCorr[iAux].getDsTipoRelacionamento()));
            xml_g->closeTag();
        }

        xml_g->closeTag();

        // libera memoria alocada
        if ( pcDtRegIni ) XMLString::release(&pcDtRegIni);
        pcDtRegIni = 0;
        if ( pcDtRegFim ) XMLString::release(&pcDtRegFim);
        pcDtRegFim = 0;
        if (poBuscaCorr) free(poBuscaCorr);

    }catch(...){
        if (poBuscaCorr) free(poBuscaCorr);
        if ( pcDtRegIni ) XMLString::release(&pcDtRegIni);
        if ( pcDtRegFim ) XMLString::release(&pcDtRegFim);
        if ( pcIdPessoa ) XMLString::release(&pcIdPessoa);
        if ( pcIdTpRel ) XMLString::release(&pcIdTpRel);

        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCorrDevTICons::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
