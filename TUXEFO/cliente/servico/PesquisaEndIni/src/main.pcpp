//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: PesquisaEndIni
//* Servidor: PesquisaEndereco
//*
//* Ficheiro: TUXEFO/cliente/PesquisaEndereco/PesquisaEndIni/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:23/08/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Servico para gerar o arquivo de XML com a pesquisa de endereços.
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include "../include/PesqEnderecoIni.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/RelCepLogradBairro.h";

DECLARE_TUXEDO_SERVICE(PesquisaEndIni);

void implPesquisaEndIni::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    int iNroReg = 0;
    int iAux;
    CRelCepLogradBairro* poUF;

    ULOG_START( "implPesquisaEndIni::Execute()" );
    try{
        poUF = CRelCepLogradBairro::RecuperarTodasUF(&iNroReg);
        pXmlG->createTag(XML_OUT_NO_ROOT);
        pXmlG->addProp("xmlns", XML_OUT_PROP);
            for (iAux=0; iAux < iNroReg; iAux++) 
            {
                pXmlG->createTag(XML_OUT_NO_LISTAUF);
                    pXmlG->addItem(XML_OUT_IDUF, poUF[iAux].getCodUF());
                    pXmlG->addItem(XML_OUT_SGUF, rtrim(poUF[iAux].getSglUF()));
                    pXmlG->addItem(XML_OUT_NMUF, rtrim(poUF[iAux].getNomUF()));
                pXmlG->closeTag();
            }
        pXmlG->closeTag();

        //Liberando memoria alocada
        free(poUF);
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

    ULOG_END( "implPesquisaEndIni::Execute()" );

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}



