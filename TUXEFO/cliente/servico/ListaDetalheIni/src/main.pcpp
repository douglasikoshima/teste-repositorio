//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: ListaDetalheIni
//* Servidor: LupaLinha
//*
//* Ficheiro: TUXEFO/cliente/LupaLinha/ListaDetalheIni/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson Martins
//*
//* Fecha primeira version:20/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Carrega a tela inicial da Lupa Linha.
//* 
//*
//*//-------------------------------------------------------------------------------
//*  ALTERACAO  DESCRICAO
//*    01.00    Alteracao do nome do servico internamente a pedido da equipe
//*             de Suporte Tecnologico. 30/08/2004
//---------------------------------------------------------------------

//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

#include "../include/ListaDetalheIni.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPessoaLinha.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classServico.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPlanoServicoLinha.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classUsuario.h";

DECLARE_TUXEDO_SERVICE(LISTADETALHEI);

void implLISTADETALHEI::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    int iNroReg=0;
    int iAux;
    
    char* pParam1=0;
    char* pParam2=0;
    char* pParam3=0;
    char* pParam4=0;
    
    CPessoaLinha* oPL;
    CPlanoServicoLinha* oPSL;

    ULOG_START( "implLISTADETALHEI::Execute()" );
    try{
        pParam1 = walkTree(pDnode, XML_IDPESSOA, 0);
        if(!pParam1)
        {
            ERROR(NRO_ID_PESSOA_NE);
            TAG_INEXISTENTE(XML_IDPESSOA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam1)
        {
            ERROR(NRO_ID_PESSOA_VV);
            TAG_VALOR_VAZIO(XML_IDPESSOA);
            if (pParam1) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam1) ){
            ERROR(NRO_ID_PESSOA_VI);
            TAG_VALOR_INVALIDO(XML_IDPESSOA);
            if (pParam1) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
       //
        pParam2 = walkTree(pDnode, XML_IDLINHA, 0);
        if(!pParam2)
        {
            ERROR(NRO_ID_LINHA_NE);
            TAG_INEXISTENTE(XML_IDLINHA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam2)
        {
            ERROR(NRO_ID_LINHA_VV);
            TAG_VALOR_VAZIO(XML_IDLINHA);
            if (pParam1) XMLString::release(&pParam1);
            if (pParam2) XMLString::release(&pParam2);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam2) ){
            ERROR(NRO_ID_LINHA_VI);
            TAG_VALOR_INVALIDO(XML_IDLINHA);
            if (pParam1) XMLString::release(&pParam1);
            if (pParam2) XMLString::release(&pParam2);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
	    //
        pParam3 = walkTree(pDnode, XML_TPLINHA, 0);
        //
        pParam4 = walkTree(pDnode, XML_STATUS, 0);
        //

        pXmlG->createTag(XML_ROOT);
        pXmlG->addProp("xmlns", XML_PROP);
                
            oPL = CPessoaLinha::RecuperarTodosB01(&iNroReg, pParam1, pParam3, pParam4);
            for (iAux=0; iAux < iNroReg; iAux++) 
            {
                pXmlG->createTag(XML_NO_LISTA);
                    pXmlG->addItem(XML_IDPESSOA, oPL[iAux].getIdPessoa());
                    pXmlG->addItem(XML_IDLINHA, oPL[iAux].getIdLinhaTelefonica());
                    pXmlG->addItem(XML_CODAREA, oPL[iAux].getCdAreaRegistro());
                    pXmlG->addItem(XML_NRLINHA, oPL[iAux].getNrLinha());
                    pXmlG->addItem(XML_TIPOLINHA, oPL[iAux].getDsTipoLinha());
                    //pXmlG->addItem(XML_PLANOSERV, oPL[iAux].);
                    pXmlG->addItem(XML_ESTADOLINHA, oPL[iAux].getDsEstadoLinha());
                    pXmlG->addItem(XML_DTHABILITA, oPL[iAux].getDtHabilitacaoOut());
                    pXmlG->addItem(XML_DIVULGA, oPL[iAux].getInDivulgacaoNrLinha());
                    //pXmlG->addItem(XML_TERMINOCO, oPL[iAux].getDescricao());
	            pXmlG->closeTag();
            }

			oPSL = CPlanoServicoLinha::RecuperarTodosServico(&iNroReg, pParam2);
            for (iAux=0; iAux < iNroReg; iAux++) 
            {
                pXmlG->createTag(XML_NO_SERVICO);
                    pXmlG->addItem(XML_IDSERVICO, oPSL[iAux].getIdServicoLinha());
                    pXmlG->addItem(XML_INPLANO, oPSL[iAux].getInPlano());
                    pXmlG->addItem(XML_IDPACOTE, oPSL[iAux].getIdPacote());
                    pXmlG->addItem(XML_NMSERVICO, oPSL[iAux].getNmServico());
	            pXmlG->closeTag();
            }

            pXmlG->createTag(XML_NO_DADOS);

                /***************************/
                /* Falta os dados do Atlys */
                /***************************/
                CUsuario oUsu(pParam2);
                pXmlG->createTag(XML_NO_USUARIO);
                    pXmlG->addItem(XML_IDPESSOA, oUsu.getIdPessoa());
                    pXmlG->addItem(XML_NMUSUARIO, oUsu.getNmPessoa());
                    pXmlG->addItem(XML_IDDOCUM, oUsu.getIdDocumento());
                    pXmlG->addItem(XML_TPDOCUM, oUsu.getDsTipoDocumento());
                    pXmlG->addItem(XML_NRDOCUM, oUsu.getNrDocumento());
                    pXmlG->addItem(XML_TPCONTATO, oUsu.getDsTipoComunicacao());
                    pXmlG->addItem(XML_NRCONTATO, oUsu.getDsContato());
                    pXmlG->addItem(XML_VLRENTAB, oUsu.getVlRentabilidade());
                    pXmlG->addItem(XML_DSCARGO, oUsu.getDsCargoContato());
	            pXmlG->closeTag();
                pXmlG->addItem(XML_INDIVULGA, oUsu .getInDivulgacaoNrLinha());
            pXmlG->closeTag();


        pXmlG->closeTag();

        //Liberando memoria alocada
        if (pParam1) XMLString::release(&pParam1);
        if (pParam2) XMLString::release(&pParam2);
        if (pParam3) XMLString::release(&pParam3);
        if (pParam4) XMLString::release(&pParam4);
        free(oPL);
        free(oPSL);
    }
    catch(CException sE){
        throw;  //repassando o erro para nucleo
    }

	// Execução OK.
    ULOG_END( "implLISTADETALHEI::Execute()" );
	INFORMATION(NRO_OK);
	setStatusCode(sNrMsg, MSG_OK);
}



