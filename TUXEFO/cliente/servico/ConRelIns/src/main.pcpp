/*
 * Serviço de Associar consultor de relacionamento - Inserção
 * Versão inicial, 12/07/2004
 */
/* Alteracao - 27/09/2004
 * Esse servico foi alterado para ser utilizado tanto para associar e dessaciar um Cliente com 
 * Consultor de Relacionamento.
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/ConRelIns.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/PessoaCR.h";

DECLARE_TUXEDO_SERVICE(ConRelIns);

void implConRelIns::Execute(DOMNode* dnode, XMLGen* xml_g) {

	DOMNode* nodeAux = NULL;
    CPessoaCR oPess;
    char* pcIdPessoa;
	int iNrAtt = 0;
	int iQtElem = 0;

	char* pcIdCR;

    ULOG_START( "implConRelIns::Execute()" );
    
    try{
         // Se existir id de Consultor de Relacionamento faz a associacao.
         pcIdCR = walkTree(dnode, XML_IN_ID_CR, 0);

         //ASSOCIAR
         if (pcIdCR && *pcIdCR) {

             if (!*pcIdCR) {
                 ERROR(NRO_ID_PESSOA_VV);
                 TAG_VALOR_VAZIO(XML_IN_ID_CR);
                 if (pcIdCR) XMLString::release(&pcIdCR);
                 throw new TuxBasicSvcException(sNrMsg, sMsg);
             }
             if ( !IsNumeric(pcIdCR) ){
                 ERROR(NRO_ID_PESSOA_VI);
                 TAG_VALOR_INVALIDO(XML_IN_ID_CR);
                 if (pcIdCR) XMLString::release(&pcIdCR);
                 throw new TuxBasicSvcException(sNrMsg, sMsg);
             }

             for(iNrAtt = 0; walkTree(dnode, XML_IN_ID_PESS_REL, iNrAtt) ;iNrAtt++ ) {
                 pcIdPessoa = walkTree(dnode, XML_IN_ID_PESS_REL, iNrAtt); //buscando o idCliente
                 if (pcIdPessoa == NULL) {
                     ERROR(NRO_ID_PESSOA_NE);
                     TAG_INEXISTENTE(XML_IN_ID_PESS_REL);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }
                 if (!*pcIdPessoa) {
                     ERROR(NRO_ID_PESSOA_VV);
                     TAG_VALOR_VAZIO(XML_IN_ID_PESS_REL);
                     if (pcIdPessoa) XMLString::release(&pcIdPessoa);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }
                 if ( !IsNumeric(pcIdPessoa) ){
                     ERROR(NRO_ID_PESSOA_VI);
                     TAG_VALOR_INVALIDO(XML_IN_ID_PESS_REL);
                     if (pcIdPessoa) XMLString::release(&pcIdPessoa);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }

                oPess.setIdPessoaRelacionamento(atoi(pcIdPessoa));
                oPess.setIdPessoaCR(atoi(pcIdCR));
                oPess.setUsuarioAlteracao(getUser());
                oPess.criaVinculo();
            }
            XMLString::release(&pcIdPessoa);
         }
         //DESSASSOCIAR
         else{ 

             for (iNrAtt = 0; walkTree(dnode, XML_IN_ID_PESS_REL, iNrAtt) ;iNrAtt++) {
                 pcIdPessoa = walkTree(dnode, XML_IN_ID_PESS_REL, iNrAtt); //buscando o idCliente
                 if (pcIdPessoa == NULL) {
                     ERROR(NRO_ID_PESSOA_NE);
                     TAG_INEXISTENTE(XML_IN_ID_PESS_REL);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }
                 if (!*pcIdPessoa) {
                     ERROR(NRO_ID_PESSOA_VV);
                     TAG_VALOR_VAZIO(XML_IN_ID_PESS_REL);
                     if (pcIdPessoa) XMLString::release(&pcIdPessoa);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }
                 if ( !IsNumeric(pcIdPessoa) ){
                     ERROR(NRO_ID_PESSOA_VI);
                     TAG_VALOR_INVALIDO(XML_IN_ID_PESS_REL);
                     if (pcIdPessoa) XMLString::release(&pcIdPessoa);
                     throw new TuxBasicSvcException(sNrMsg, sMsg);
                 }
    
                 oPess.setIdPessoaRelacionamento(atoi(pcIdPessoa));
                 oPess.setUsuarioAlteracao(getUser());
                 oPess.removeVinculo();

                 XMLString::release(&pcIdPessoa);

             }
         }

         
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implConRelIns::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
