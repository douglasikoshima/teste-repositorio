/*
 * Serviço de Correspondencia devolvida - Manutenção de status de correspondencia
 * Versão inicial, 27/05/2004
 */
//*  ALTERACAO  DESCRICAO
//*    01.00    Alteracao do nome do servico internamente a pedido da equipe
//*             de Suporte Tecnologico. 30/08/2004

//EXEC SQL INCLUDE SQLCA;

#include <time.h>

#include "../include/CorrDevMantStat.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/CorrespondenciaDevolvida.h";

DECLARE_TUXEDO_SERVICE(CORRDEVMANTST);

void implCORRDEVMANTST::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CCorrespondenciaDevolvida oCorrDev;
	CHistoricoStatus oHistStat;

	char* pcIdCorrDev;
	int iIdCorrDev;
	char* pcIdStatus;
	int iIdStatus;
	char* pcIdUsu;
	int iIdUsu;

    ULOG_START( "implCORRDEVMANTST::Execute()" );
    
    try{
         // Navega o XML e recupera as informacoes obrigatorias
         // Id Correspondencia Devolvida
         pcIdCorrDev = walkTree(dnode, XML_IN_ID_CORR_DEV, 0);
         if (pcIdCorrDev == NULL) {
             ERROR(NRO_ID_CORR_DEV_NE);
             TAG_INEXISTENTE(XML_IN_ID_CORR_DEV);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdCorrDev) {
             ERROR(NRO_ID_CORR_DEV_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_CORR_DEV);

		     if (pcIdCorrDev)
			    XMLString::release(&pcIdCorrDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdCorrDev = atoi(pcIdCorrDev)) <= 0) {
             ERROR(NRO_ID_CORR_DEV_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_CORR_DEV);

		     if (pcIdCorrDev)
			    XMLString::release(&pcIdCorrDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

		 if (pcIdCorrDev)
			XMLString::release(&pcIdCorrDev);

         // Id Status
         pcIdStatus = walkTree(dnode, XML_IN_ID_STAT, 0);
         if (pcIdStatus == NULL) {
             ERROR(NRO_STAT_CORR_ID_NE);
             TAG_INEXISTENTE(XML_IN_ID_STAT);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdStatus) {
             ERROR(NRO_STAT_CORR_ID_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_STAT);

		     if (pcIdStatus)
			    XMLString::release(&pcIdStatus);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdStatus = atoi(pcIdStatus)) <= 0) {
             ERROR(NRO_STAT_CORR_ID_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_STAT);

		     if (pcIdStatus)
			    XMLString::release(&pcIdStatus);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

		 if (pcIdStatus)
			XMLString::release(&pcIdStatus);

         // Id Pessoa Usuário
         pcIdUsu = walkTree(dnode, XML_IN_ID_USU, 0);
         if (pcIdUsu == NULL) {
             ERROR(NRO_ID_USUARIO_NE);
             TAG_INEXISTENTE(XML_IN_ID_USU);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdUsu) {
             ERROR(NRO_ID_USUARIO_NE);
             TAG_VALOR_VAZIO(XML_IN_ID_USU);

		     if (pcIdUsu)
			    XMLString::release(&pcIdUsu);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdUsu = atoi(pcIdUsu)) <= 0) {
             ERROR(NRO_ID_USUARIO_NE);
             TAG_VALOR_INVALIDO(XML_IN_ID_USU);

    		 if (pcIdUsu)
	    		XMLString::release(&pcIdUsu);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

		 if (pcIdUsu)
			XMLString::release(&pcIdUsu);

         // Monta objeto de correspondencia.
         oCorrDev.setIdCorrespondenciaDevolvida(iIdCorrDev);
         // Monta objeto de histórico de status.
         oHistStat.setIdPessoaUsuario(iIdUsu);
         oHistStat.setIdCorrespondenciaDevolvida(iIdCorrDev);
         oHistStat.setIdStatusCorrespondencia(iIdStatus);

         // Atualiza o status da correspondencia. O zero é pra indicar que não é status inicial.
         oCorrDev.setUsuarioAlteracao(getUser());
         oCorrDev.atualizaStatus(&oHistStat, 0);
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCORRDEVMANTST::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
