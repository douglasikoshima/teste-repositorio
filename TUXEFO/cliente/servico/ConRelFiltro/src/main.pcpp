/*
 * Serviço de Associar consultor de relacionamento - Busca de clientes
 * Versão inicial, 13/07/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/ConRelFiltro.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/PessoaCR.h";

DECLARE_TUXEDO_SERVICE(ConRelFiltro);

void implConRelFiltro::Execute(DOMNode* dnode, XMLGen* xml_g)
{
    CPessoaCR *poPess = NULL;
    int iAux = 0;
    int iNroReg = 0;

    char* pcIdCR;
    int iIdCR;
    char* pcIdSeg;
    int iIdSeg;
    char* pcIdCart;
    int iIdCart;
    char* pcIdTpDoc;
    char  cIdTpDoc[256];
    char* pcNrDoc;
    char* pcNmPessoa;

    ULOG_START( "implConRelFiltro::Execute()" );

    try
    {
        // Checa se os campos obrigatórios vieram e são válidos.
        pcIdCart = walkTree(dnode, XML_IN_ID_CART, 0);
        if ( pcIdCart && *pcIdCart )
        {
            iIdCart = atoi(pcIdCart);
        }
        else
        {
            iIdCart = -1;
        }

        if (pcIdCart)
        {
            XMLString::release(&pcIdCart);
        }

        pcIdSeg = walkTree(dnode, XML_IN_ID_SEG, 0);
        pcIdCR = walkTree(dnode, XML_IN_ID_CR, 0);
        if ( pcIdSeg && *pcIdSeg )
        {
            iIdSeg = atoi(pcIdSeg);
        }
        else
        {
            iIdSeg = -1;
        }

        if (pcIdSeg)
        {
            XMLString::release(&pcIdSeg);
        }

        // Id do Consultor, nao obrigatorios
        pcIdCR = walkTree(dnode, XML_IN_ID_CR, 0);
        if ( pcIdCR && *pcIdCR )
        {
            iIdCR = atoi(pcIdCR);
        }
        else
        {
            iIdCR = -1;
        }

        if (pcIdCR)
        {
            XMLString::release(&pcIdCR);
        }

        // Nome para busca, não obrigatório
        pcNmPessoa = walkTree(dnode, XML_IN_NM_PESSOA, 0);

        // Nome para busca, não obrigatório
        pcIdTpDoc = walkTree(dnode, XML_IN_ID_TP_DOC, 0);
        if ( pcIdTpDoc && *pcIdTpDoc )
        {
            strcpy( cIdTpDoc, pcIdTpDoc );
        }
        else
        {
            strcpy( cIdTpDoc, "-1" );
        }

        if (pcIdTpDoc)
        {
            XMLString::release(&pcIdTpDoc);
        }

        // Numero do documento para busca, não obrigatório
        pcNrDoc = walkTree(dnode, XML_IN_NR_DOCUMENTO, 0);

        // Busca as pessoas selecionadas E não selecionadas.
        poPess = CPessoaCR::listaClientesEConsultoresFiltroDoc(iIdCR, iIdSeg, iIdCart
                                                              ,pcNmPessoa, cIdTpDoc, pcNrDoc, &iNroReg);

        if (pcNmPessoa)
        {
            XMLString::release(&pcNmPessoa);
        }

        if (pcNrDoc)
        {
            XMLString::release(&pcNrDoc);
        }

        // Monta XML de saída
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);

        if ( iNroReg == 51)
        {
            xml_g->addItem("erro", "Refinar pesquisa!!! Qtde superior a 50 registros.");
        }
        else
        {
            for (iAux = 0; iAux < iNroReg; iAux++)
            {
                xml_g->createTag(XML_OUT_CLIENTES);
                xml_g->addItem("idCliente",       poPess[iAux].getIdCliente());
                xml_g->addItem("nmCliente",       poPess[iAux].getNmCliente());
                xml_g->addItem("idConsultor",     poPess[iAux].getIdPessoaCR());
                xml_g->addItem("nmConsultor",     poPess[iAux].getNmPessoaCR());
                xml_g->addItem("nrDocumento",     poPess[iAux].getNrDocumento());
                xml_g->addItem("dsTipoDocumento", poPess[iAux].getDsTipoDocumento());
                xml_g->addItem("dsSegmentacao",   poPess[iAux].getDsSegmentacao());
                xml_g->addItem("dsCarteirizacao", poPess[iAux].getDsCarteirizacao());
                xml_g->closeTag();
            }
        }

        xml_g->closeTag();

        //Liberando a memoria alocada
        free(poPess);
    }
    catch (TuxBasicSvcException *ex)
    {
        ULOGE("Erro %s:%s",ex->getCode(),ex->getMessage());
        setStatusCode(ex->getCode(),ex->getMessage());
        delete ex;
    }
    catch (TuxBasicOraException *ex)
    {
        char codErro[25];
        sprintf(codErro,"04E%04d",ex->eCode<0 ?ex->eCode*(-1):ex->eCode);
        setStatusCode(codErro,ex->pMsg);
        delete ex;
    }
    catch (TuxException *ex)
    {
        ULOGE("Erro %s:%s",ex->getCode(),ex->getMessage());
        setStatusCode(ex->getCode(),ex->getMessage());
        delete ex;
    }
    catch(...)
    {
        throw;
    }
	
	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implConRelFiltro::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
