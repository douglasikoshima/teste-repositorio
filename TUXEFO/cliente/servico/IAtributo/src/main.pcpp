//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: IAtributo
//* Servidor: admAtributo
//*
//* Ficheiro: TUXEFO/cliente/admAtributo/IAtributo/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:01/05/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* 
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

#include "../include/IAtributo.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstAtributo.h";

DECLARE_TUXEDO_SERVICE(IAtributo);

void implIAtributo::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
CCstAtributo oObj;
char *pParam;
int iRet;
char* canal = NULL;
int iCan = 0;

    ULOG("Inicio IAtributo");

    try{

        ULOG_START( "implIAtributo::Execute()" );

        //*
        //* Campos obrigatorios
        //*
        pParam = walkTree(walkDOM(pDnode, XML_IN_NO_SUBASS), XML_IN_CODIGO, 0);
        if(!pParam)
        {
            ERROR(NRO_ID_SUBASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_NO_SUBASS);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_ID_SUBVASSUNTO_NR_VV);
            TAG_VALOR_VAZIO(XML_IN_NO_SUBASS);
		    if (pParam) XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam) ){
            ERROR(NRO_ID_SUBVASSUNTO_NR_VI);
            TAG_VALOR_INVALIDO(XML_IN_NO_SUBASS);
		    if (pParam) XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        ULOG("setIdSubAssunto - pParam[%s]", pParam);
        oObj.setIdSubAssunto(pParam);

		if (pParam) XMLString::release(&pParam);

        pParam = walkTree(walkDOM(pDnode, XML_IN_NO_ATRIBU), XML_IN_CONTEUDO, 0);
        if(!pParam)
        {
            ERROR(NRO_ID_SUBASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_NO_ATRIBU);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_ID_ATRIBUTO_NR_VI);
            TAG_VALOR_VAZIO(XML_IN_NO_ATRIBU);
		    if (pParam) XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        ULOG("setDsAtributo - pParam[%s]", pParam);
        oObj.setDsAtributo(pParam);

		if (pParam) XMLString::release(&pParam);

        pParam = walkTree(walkDOM(pDnode, XML_IN_NO_TPAPRE), XML_IN_CODIGO, 0);
        if(!pParam)
        {
            ERROR(NRO_SQ_ATRIBUTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_NO_TPAPRE);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam)
        {
            ERROR(NRO_SQ_ATRIBUTO_NR_VI);
            TAG_VALOR_VAZIO(XML_IN_NO_TPAPRE);
		    if (pParam) XMLString::release(&pParam);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        ULOG("setIdTAPergunta - pParam[%s]", pParam);
        oObj.setIdTAPergunta(pParam);

		if (pParam) XMLString::release(&pParam);

        //*
        //* Campos nao obrigatorios
        //*
        pParam = walkTree(pDnode, XML_IN_SEQUEN, 0);
        ULOG("Local 1 pParam[%s]", pParam ? pParam : "...NULL...");
        if(!pParam || !*pParam)
            oObj.setSqApresentacao("");
        else
            oObj.setSqApresentacao(pParam);

		if (pParam) XMLString::release(&pParam);

        pParam = walkTree(walkDOM(pDnode, XML_IN_NO_DISPON), XML_IN_CODIGO, 0);
        ULOG("Local 2 pParam[%s]", pParam ? pParam : "...NULL...");
        if(!pParam || !*pParam)
            oObj.setInDisponibilidade("");
        else
            oObj.setInDisponibilidade(pParam);

		if (pParam) XMLString::release(&pParam);

	    // Guarda o usuario que esta executando esse servico
	    oObj.setUsuarioAlteracao(getUser());

        ULOG("Local1");
        iRet = oObj.Incluir();
        ULOG("iRet(%d)", iRet);

        switch(iRet)
        {
            case DUPLICATE_KEY:
                pXmlG->addItem("FAILED", "DUPLICATE KEY");
                break;
            case OK:
                // Insere os canais.
                while ((canal = walkTree(pDnode, "idCanal", iCan)) != NULL)
                {
                    ULOG("Associando canal id %s ao atributo id %d", canal, oObj.getIdAtributo());
                    oObj.associaCanal(atoi(canal));
                    iCan++;
					if (canal) XMLString::release(&canal);
                }
                break;
            default:
                ERROR(NRO_INSERT_NAO_EFETUADO);
                pXmlG->addItem(sNrMsg, MSG_UPDATE_NAO_EFETUADO);
                // throw new TuxBasicSvcException(sNrMsg, MSG_INSERT_NAO_EFETUADO);
                break;              
        }
        ULOG_END( "implIAtributo::Execute()" );
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}
