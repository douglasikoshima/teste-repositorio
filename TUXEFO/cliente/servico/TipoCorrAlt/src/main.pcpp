/*
 * Serviço de cadastro básico de tipo de correspondencia
 * Versão inicial, 19/05/2004
 */

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoCorrespondencia.h";

#include "../include/TipoCorrespondenciaAltera.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Global.h"
#include <tuxfw.h>

DECLARE_TUXEDO_SERVICE(TipoCorrAlt);

void implTipoCorrAlt::Execute(DOMNode* dnode, XMLGen* xml_g) {

    CTipoCorrespondencia oTpoCorr;
    char* pcIdTpoCorr = (char *)malloc(sizeof(char));
    int iIdTpoCorr;
    int iRet;
    char* pcDisp;
    int iDisp;

    ULOG_START( "implTipoCorrAlt::Execute()" );
    try{
        // Navega o XML e recupera as informacoes obrigatorias
        pcIdTpoCorr = walkTree(dnode, XML_IN_ID_TIPO, 0);
        if (pcIdTpoCorr == NULL) {
         ERROR(NRO_TP_CORR_ID_NE);
         TAG_INEXISTENTE(XML_IN_ID_TIPO);
         throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if (!*pcIdTpoCorr) {
         ERROR(NRO_TP_CORR_ID_VV);
         TAG_VALOR_VAZIO(XML_IN_ID_TIPO);
         throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ((iIdTpoCorr = atoi(pcIdTpoCorr)) <= 0) {
         ERROR(NRO_TP_CORR_ID_VI);
         TAG_VALOR_INVALIDO(XML_IN_ID_TIPO);
         throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
         
        pcDisp = walkTree(dnode, XML_IN_DISP, 0);
        if (pcDisp == NULL) {
            ERROR(NRO_INDISPON_NE);
            TAG_INEXISTENTE(XML_IN_DISP);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if (!*pcDisp) {
            ERROR(NRO_INDISPON_VI);
            TAG_VALOR_VAZIO(XML_IN_DISP);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        iDisp = atoi(pcDisp);
        if (iDisp != 0 && iDisp != 1) {
            ERROR(NRO_INDISPON_VI);
            TAG_VALOR_INVALIDO(XML_IN_DISP);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

         // Monta o objeto de TipoCorrespondencia
         oTpoCorr.setIdTipoCorrespondencia(iIdTpoCorr);
         oTpoCorr.setSgTipoCorrespondencia(walkTree(dnode, XML_IN_SG_TIPO, 0));
         oTpoCorr.setDsTipoCorrespondencia(walkTree(dnode, XML_IN_DS_TIPO, 0));
         oTpoCorr.setInDisponibilidade(iDisp);

         // Atualiza as informações no banco de dados
         oTpoCorr.setUsuarioAlteracao(getUser());
         iRet = oTpoCorr.altera();

         switch(iRet)
         {
             case DUPLICATE_KEY:
                 xml_g->addItem("FAILED", "DUPLICATE KEY");
                 break;
         }

         //Liberando memoria alocada
         free(pcIdTpoCorr);
    }catch(...){
        throw;
    }

    ULOG_END( "implTipoCorrAlt::Execute()" );

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}

