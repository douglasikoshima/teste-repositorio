//****************************************************************************************
//* Fonte: main.pcpp - Servico: LConteudo - Servidor: admConteudo
//*
//* Purpose: Servico para montar o XML de retorno do ListaConteudoVO
//*          Executa chamada do metodo RecuperaTodos da classe CCstAtributoB01.
//* 
//* Criacao: 01/05/2004
//* 
//* ALTERACAO   DESCRICAO
//*  00.01      Inclusao de mais campos no XML de retorno - 28/06/2004 - JSM
//****************************************************************************************

//EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE "Global.h";
EXEC SQL END DECLARE SECTION;

#include "../include/CustConteudo.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstAtributoB01.h";

DECLARE_TUXEDO_SERVICE(LConteudo);

void implLConteudo::Execute(DOMNode* pDnode, XMLGen* pXml)
{
int iAux;
int iNroAss = 0;
int iNroRegCan = 0;
char *pParam;
CCstAtributoB01* oAB01;
CCanal*          poCanal;


    try{
        ULOG_START( "implLConteudo::Execute()" );

        pParam = walkTree(pDnode, XML_IDSUBASSUNTO, 0);

        if(!pParam)
        {
            ERROR(NRO_ID_SUBASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IDSUBASSUNTO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        if (!*pParam)
        {
            ERROR(NRO_ID_SUBVASSUNTO_NR_VI);
            TAG_INEXISTENTE(XML_IDSUBASSUNTO);

            if (pParam) XMLString::release(&pParam);

            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        // Monta raiz do XML
        pXml->createTag(XML_OUT_ROOT);
        pXml->addProp("xmlns", XML_OUT_PROP);


        // Recupera a lista de todos os assuntos e monta essa parte do XML
        oAB01 = CCstAtributoB01::RecuperarTodosComCanal(&iNroAss, pParam);
        XMLString::release(&pParam);

        for (iAux = 0; iAux < iNroAss; iAux++)
        {
            pXml->createTag(XML_OUT_DADOSCOMPORTAMENTAL);
                pXml->createTag(XML_ASSUNTOVO);
                    pXml->addItem(XML_OUT_CODIGO,    oAB01[iAux].getIdAssunto());
                    pXml->addItem(XML_OUT_DESCRICAO, oAB01[iAux].getDsAssunto());
                pXml->closeTag();
                pXml->createTag(XML_SUBASSUNTOVO);
                    pXml->addItem(XML_OUT_CODIGO,    oAB01[iAux].getIdSubAssunto());
                    pXml->addItem(XML_OUT_DESCRICAO, oAB01[iAux].getNmSubAssunto());
                pXml->closeTag();
                pXml->createTag(XML_TIPOAPRESENTACAOVO);
                    pXml->addItem(XML_OUT_CODIGO   , oAB01[iAux].getIdTAPergunta());
                    pXml->addItem(XML_OUT_DESCRICAO, oAB01[iAux].getDsTipoApresentacaoPergunta());
                pXml->closeTag();
                pXml->createTag(XML_OUT_DISPONIBILIDADES);
                    pXml->addItem(XML_OUT_CODIGO, oAB01[iAux].getInDisponibilidade());
                    if ( atol(oAB01[iAux].getInDisponibilidade()) )
                        pXml->addItem(XML_OUT_DESCRICAO, "Sim");
                    else
                        pXml->addItem(XML_OUT_DESCRICAO, "Não");
                pXml->closeTag();

                pXml->createTag(XML_CONTEUDOVO);
                    pXml->addItem(XML_OUT_CODIGO, oAB01[iAux].getIdAtributo());
                    pXml->addItem(XML_OUT_DESCRICAO, oAB01[iAux].getDsAtributo());
                    
                    //Recuperando os canais do atributo
                    pXml->createTag("Canais");
                        poCanal = oAB01[iAux].getCanais();

                        ULOG("oAB01[%d].getQtdCanais()->(%d)",iAux, oAB01[iAux].getQtdCanais());

                        for(iNroRegCan=0; iNroRegCan < oAB01[iAux].getQtdCanais() ;iNroRegCan++){
                            pXml->createTag("Canal");
                                ULOG("poCanal[%d].getId()[%s]",iNroRegCan, poCanal[iNroRegCan].getId());
                                pXml->addItem("idCanal", poCanal[iNroRegCan].getId());
                                ULOG("poCanal[%d].getDescricao()[%s]",iNroRegCan, poCanal[iNroRegCan].getDescricao());
                                pXml->addItem("nmCanal", poCanal[iNroRegCan].getDescricao());
                            pXml->closeTag();
                        }
                        if (poCanal)
                        {
                            free( poCanal );
                            poCanal = 0;
                        }
                        
                    pXml->closeTag();
                pXml->closeTag();

                pXml->addItem(XML_SEQUENCIAAPRESENTACAO, oAB01[iAux].getSqApresentacao());


            pXml->closeTag();
        }

        // Fecha o nó principal
        pXml->closeTag();

        if (oAB01)
            free(oAB01); //Liberando a memoria alocada dentro da classe.

        ULOG_END( "implLConteudo::Execute()" );

    }catch(...){
        throw;
    }


    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}