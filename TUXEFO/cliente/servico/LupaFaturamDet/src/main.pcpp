/*
 * Serviço de preenchimento da lupa de faturamento do cliente - Detalhes
 * Versão inicial, 16/06/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/AtlysLFFaturamento.h"
#include "../../negocio/clienteCmm/include/AtlysLFCobranca.h"
#include "../../negocio/clienteCmm/include/AtlysLFLinhaIntraGrupo.h"
#include "../../negocio/clienteCmm/include/AtlysLFPagamento.h"
#include "../../negocio/clienteCmm/include/AtlysLFAjustes.h"
#include "../../negocio/clienteCmm/include/AtlysLFContaDetalhada.h"
#include "../../negocio/clienteCmm/include/AtlysLFEstimativa.h"
#include "../../negocio/clienteCmm/include/Messages.h"

#include "../include/LupaFaturamDet.h"

DECLARE_TUXEDO_SERVICE(LupaFaturamDet);

void implLupaFaturamDet::Execute(DOMNode* dnode, XMLGen* xml_g) {

    char* pcIdConta;
    int iIdConta;
    char* pcTpDet;
    char* pcNrConta;
    char* pcCicloFatura;

    ULOG_START( "implLupaFaturamDet::Execute()" );
    // Traz ID da conta, informação obrigatória.
    pcIdConta = walkTree(dnode, XML_IN_ID_CONTA, 0);
    if (pcIdConta == NULL) {
        ERROR(NRO_CONTA_ID_NE);
        TAG_INEXISTENTE(XML_IN_ID_CONTA);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcIdConta) {
        ERROR(NRO_CONTA_ID_VV);
        TAG_VALOR_VAZIO(XML_IN_ID_CONTA);

        XMLString::release(&pcIdConta);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if ((iIdConta = atoi(pcIdConta)) <= 0) {
        ERROR(NRO_CONTA_ID_VI);
        TAG_VALOR_INVALIDO(XML_IN_ID_CONTA);

        XMLString::release(&pcIdConta);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    XMLString::release(&pcIdConta);


    // Número da conta, informação obrigatória
    pcNrConta = walkTree(dnode, XML_IN_NR_CONTA, 0);
    if (pcNrConta == NULL) {
        ERROR(NRO_CONTA_NR_NE);
        TAG_INEXISTENTE(XML_IN_NR_CONTA);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcNrConta) {
        ERROR(NRO_CONTA_NR_VV);
        TAG_VALOR_VAZIO(XML_IN_NR_CONTA);

        XMLString::release(&pcNrConta);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }

    // Número da conta, informação obrigatória
    pcCicloFatura = walkTree(dnode, XML_IN_DS_CICLO_FATURA, 0);
    if (pcCicloFatura == NULL) {
        ERROR(NRO_DS_CICLO_FATURA_NE);
        TAG_INEXISTENTE(XML_IN_DS_CICLO_FATURA);

        XMLString::release(&pcNrConta);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcCicloFatura) {
        ERROR(NRO_DS_CICLO_FATURA_VV);
        TAG_VALOR_VAZIO(XML_IN_DS_CICLO_FATURA);

        XMLString::release(&pcNrConta);
        XMLString::release(&pcCicloFatura);

        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }

    // Traz tipo de detalhe, informação obrigatória.
    pcTpDet = walkTree(dnode, XML_IN_TP_DET, 0);
    if (pcTpDet == NULL) {
        ERROR(NRO_TP_DET_NE);
        TAG_INEXISTENTE(XML_IN_TP_DET);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if (!*pcTpDet) {
        ERROR(NRO_TP_DET_VV);
        TAG_VALOR_VAZIO(XML_IN_TP_DET);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }

    // Ve qual é o tipo de detalhe.
    if (!strcmp(pcTpDet, DET_FATURAMENTO)) {
        CAtlysLFFaturamento* poFat = new CAtlysLFFaturamento(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poFat->getXMLLFFaturamento() != NULL)
            xml_g->aggregateXML(poFat->getXMLLFFaturamento());
        xml_g->closeTag();
    } else 

    if (!strcmp(pcTpDet, DET_COBRANCA)) {
        CAtlysLFCobranca* poCob = new CAtlysLFCobranca(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poCob->getXMLLFCobranca() != NULL)
            xml_g->aggregateXML(poCob->getXMLLFCobranca());
        xml_g->closeTag();
    } else

    if (!strcmp(pcTpDet, DET_PAGAMENTO)) {
        CAtlysLFPagamento* poPag = new CAtlysLFPagamento(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poPag->getXMLLFPagamento() != NULL)
            xml_g->aggregateXML(poPag->getXMLLFPagamento());
        xml_g->closeTag();
    } else

    if (!strcmp(pcTpDet, DET_AJUSTES)) {
        CAtlysLFAjustes* poAj = new CAtlysLFAjustes(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poAj->getXMLLFAjustes() != NULL)
            xml_g->aggregateXML(poAj->getXMLLFAjustes());
        xml_g->closeTag();
    } else

    if (!strcmp(pcTpDet, DET_ESTIMATIVAS)) {
        CAtlysLFEstimativa* poLIG = new CAtlysLFEstimativa(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poLIG->getXMLLFEstimativa() != NULL)
            xml_g->aggregateXML(poLIG->getXMLLFEstimativa());
        xml_g->closeTag();
    } else

    if (!strcmp(pcTpDet, DET_LINHA_INTRA_GRUPO)) {
        CAtlysLFEstimativa* poEst = new CAtlysLFEstimativa(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poEst->getXMLLFEstimativa() != NULL)
            xml_g->aggregateXML(poEst->getXMLLFEstimativa());
        xml_g->closeTag();
    } else

    if (!strcmp(pcTpDet, DET_CONTA_DETALHADA)) {
        CAtlysLFContaDetalhada* poCDet = new CAtlysLFContaDetalhada(iIdConta, pcNrConta, pcCicloFatura);
        xml_g->createTag(XML_OUT_ROOT);
        xml_g->addProp(XML_OUT_PROP_XMLNS, XML_OUT_PROP_XMLNS_VALUE);
        if (poCDet->getXMLLFContaDetalhada() != NULL)
            xml_g->aggregateXML(poCDet->getXMLLFContaDetalhada());
        xml_g->closeTag();
    
    } else {
        ERROR(NRO_TP_DET_VI);
        TAG_VALOR_VAZIO(XML_IN_TP_DET);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }

    ULOG_END( "implLupaFaturamDet::Execute()" );
    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}
