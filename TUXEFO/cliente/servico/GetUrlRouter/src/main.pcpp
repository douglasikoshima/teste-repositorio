
EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

#include "../include/GetUrlRouter.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classApoioParametro.h";

DECLARE_TUXEDO_SERVICE(GETURLROUTER);

void implGETURLROUTER::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CApoioParametro clApoioParametro;
    char szCdParametro[LEN_CDPARAMETRO + LEN_EOS];

    ULOG_START( "implGETURLROUTER::Execute()" );

    char *pszCdParametro=walkTree(pDnode, XML_IN_CDPARAMETRO, 0);
    if(!pszCdParametro){
        ERROR(NRO_CD_PARAMETRO_NE);
        TAG_INEXISTENTE(XML_IN_CDPARAMETRO);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }
    if(!*pszCdParametro){
        ERROR(NRO_CD_PARAMETRO_VV);
        TAG_VALOR_VAZIO(XML_IN_CDPARAMETRO);
        XMLString::release(&pszCdParametro);
        throw new TuxBasicSvcException(sNrMsg, sMsg);
    }

    ULOG("pszCdParametro[%s]", pszCdParametro);

    strcpy(szCdParametro, pszCdParametro);
    XMLString::release(&pszCdParametro);


    try {
        clApoioParametro.buscaApoioParametro(szCdParametro);

        pXmlG->createTag(XML_VO_ROOT);
            pXmlG->addProp("xmlns", XML_PROP);
            pXmlG->addItem(XML_VO_CDPARAMETRO, clApoioParametro.getCdParametro());
            pXmlG->addItem(XML_VO_IDPARAMETRO, clApoioParametro.getIdParametro());
            pXmlG->addItem(XML_VO_DSPARAMETRO, clApoioParametro.getDsParametro());
            pXmlG->addItem(XML_VO_DSVALORPARAMETRO, clApoioParametro.getDsValorParametro());
        pXmlG->closeTag();

    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

	// Execução OK.
	INFORMATION(NRO_OK);
    ULOG_END( "implGETURLROUTER::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
