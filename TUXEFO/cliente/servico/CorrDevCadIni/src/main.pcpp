/*
 * Serviço de Correspondencia devolvida - tela inicial de cadastro de correspondência nova
 * Versão inicial, 26/05/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevCadIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoCorrespondencia.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/MotivoDevolucao.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/UF.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/Pais.h";

DECLARE_TUXEDO_SERVICE(CorrDevCadIni);

void implCorrDevCadIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CTipoCorrespondencia* poTpoCorr;
	CMotivoDevolucao* poMotDev;
	CUF* poUF;
	CPais* poPais;
	int iNroReg;
	int iAux;

    ULOG_START( "implCorrDevCadIni::Execute()" );
    
    try{
         // Cria o nó principal
         xml_g->createTag(XML_OUT_ROOT);
         xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);

         // Traz todos os tipos de correspondência
         poTpoCorr = CTipoCorrespondencia::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
			if (poTpoCorr[iAux].getInDisponibilidade()) {
				xml_g->createTag(XML_OUT_TIPO_CORRESP);
				xml_g->addItem(XML_OUT_TIPO_CORR_ID, poTpoCorr[iAux].getIdTipoCorrespondencia());
				xml_g->addItem(XML_OUT_TIPO_CORR_SG, rtrim(poTpoCorr[iAux].getSgTipoCorrespondencia()));
				xml_g->addItem(XML_OUT_TIPO_CORR_DS, rtrim(poTpoCorr[iAux].getDsTipoCorrespondencia()));
				xml_g->closeTag();
			}
         }

         // Traz todos os motivos de devolução
         poMotDev = CMotivoDevolucao::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
			if (poMotDev[iAux].getInDisponibilidade()) {
				xml_g->createTag(XML_OUT_MOTIVO_DEVOLUCAO);
				xml_g->addItem(XML_OUT_MOT_DEV_ID, poMotDev[iAux].getIdMotivoDevolucao());
				xml_g->addItem(XML_OUT_MOT_DEV_SG, rtrim(poMotDev[iAux].getSgMotivoDevolucao()));
				xml_g->addItem(XML_OUT_MOT_DEV_DS, rtrim(poMotDev[iAux].getDsMotivoDevolucao()));
				xml_g->closeTag();
			}
         }

         // Traz todos os estados
         poUF = CUF::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_UF);
             xml_g->addItem(XML_OUT_UF_ID, poUF[iAux].getIdUF());
             xml_g->addItem(XML_OUT_UF_SG, rtrim(poUF[iAux].getSgUF()));
             xml_g->addItem(XML_OUT_UF_DS, rtrim(poUF[iAux].getNmUF()));
             xml_g->closeTag();
         }

         // Traz todos os países
         poPais = CPais::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_PAIS);
             xml_g->addItem(XML_OUT_PAIS_ID, poPais[iAux].getIdPais());
             xml_g->addItem(XML_OUT_PAIS_SG, rtrim(poPais[iAux].getSgPais()));
             xml_g->addItem(XML_OUT_PAIS_DS, rtrim(poPais[iAux].getNmPais()));
             xml_g->closeTag();
         }

         // Fecha nó principal
         xml_g->closeTag();

         //Liberando memoria
         if (poTpoCorr) free(poTpoCorr);
         if (poMotDev) free(poMotDev);
         if (poUF) free(poUF);
         if (poPais) free(poPais);
    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCorrDevCadIni::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}