/*
 * Serviço de Correspondencia devolvida - Insere correspondencia devolvida
 * Versão inicial, 28/05/2004
 */

//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevInsere.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/CorrespondenciaDevolvida.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/CorrespDevLinhaTelefonic.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/CorrespDevolvidaConta.h";

DECLARE_TUXEDO_SERVICE(CorrDevInsere);

void implCorrDevInsere::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CCorrespondenciaDevolvida oCorr;
	CCorrespDevLinhaTelefonic oCorrLin;
	CCorrespDevolvidaConta oCorrConta;

	// Campos obrigatórios
	char* pcIdTpCorr;
	int iIdTpCorr;
	char* pcIdPessoa;
	int iIdPessoa;
	char* pcIdMotDev;
	int iIdMotDev;
	char* pcIdUF;
	int iIdUF;
	char* pcIdPais;
	int iIdPais;
	char* pcIdPessoaUsuario;
	int iIdPessoaUsuario;

	// Campos não obrigatórios
	char* pcIdLinha;
	int iIdLinha;
	char* pcIdConta;
	int iIdConta;
	char* pcDtDevolucao;
	char* pcDsEndereco;
	char* pcNrEndereco;
	char* pcDsComplemento;
	char* pcDsBairro;
	char* pcDsCidade;
	char* pcNrCEP;

    ULOG_START( "implCorrDevInsere::Execute()" );
    
    try{
         // Checa se os campos obrigatórios vieram e são válidos.
         pcIdPessoa = walkTree(dnode, XML_IN_ID_PESSOA, 0);
         if (pcIdPessoa == NULL) {
             ERROR(NRO_ID_PESSOA_NE);
             TAG_INEXISTENTE(XML_IN_ID_PESSOA);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdPessoa) {
             ERROR(NRO_ID_PESSOA_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_PESSOA);

   		     if (pcIdPessoa)
			     XMLString::release(&pcIdPessoa);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdPessoa = atoi(pcIdPessoa)) <= 0) {
             ERROR(NRO_ID_PESSOA_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_PESSOA);

   		     if (pcIdPessoa)
			     XMLString::release(&pcIdPessoa);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdPessoa)
			 XMLString::release(&pcIdPessoa);

         pcIdTpCorr = walkTree(dnode, XML_IN_ID_TIPO_CORR, 0);
         if (pcIdTpCorr == NULL) {
             ERROR(NRO_TP_CORR_ID_NE);
             TAG_INEXISTENTE(XML_IN_ID_TIPO_CORR);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdTpCorr) {
             ERROR(NRO_TP_CORR_ID_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_TIPO_CORR);

   		     if (pcIdTpCorr)
			     XMLString::release(&pcIdTpCorr);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdTpCorr = atoi(pcIdTpCorr)) <= 0) {
             ERROR(NRO_TP_CORR_ID_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_TIPO_CORR);

   		     if (pcIdTpCorr)
			     XMLString::release(&pcIdTpCorr);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdTpCorr)
			 XMLString::release(&pcIdTpCorr);

         pcIdMotDev = walkTree(dnode, XML_IN_ID_MOT_DEV, 0);
         if (pcIdMotDev == NULL) {
             ERROR(NRO_MOT_DEV_ID_NE);
             TAG_INEXISTENTE(XML_IN_ID_MOT_DEV);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdMotDev) {
             ERROR(NRO_MOT_DEV_ID_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_MOT_DEV);

   		     if (pcIdMotDev)
			     XMLString::release(&pcIdMotDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdMotDev = atoi(pcIdMotDev)) <= 0) {
             ERROR(NRO_MOT_DEV_ID_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_MOT_DEV);

   		     if (pcIdMotDev)
			     XMLString::release(&pcIdMotDev);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdMotDev)
			 XMLString::release(&pcIdMotDev);

         
         pcIdUF = walkTree(dnode, XML_IN_ID_UF, 0);
         if (pcIdUF == NULL) {
             ERROR(NRO_ID_UF_NE);
             TAG_INEXISTENTE(XML_IN_ID_UF);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdUF) {
             ERROR(NRO_ID_UF_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_UF);

   		     if (pcIdUF)
			     XMLString::release(&pcIdUF);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdUF = atoi(pcIdUF)) <= 0) {
             ERROR(NRO_ID_UF_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_UF);

   		     if (pcIdUF)
			     XMLString::release(&pcIdUF);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdUF)
			 XMLString::release(&pcIdUF);

         pcIdPais = walkTree(dnode, XML_IN_ID_PAIS, 0);
         if (pcIdPais == NULL) {
             ERROR(NRO_ID_PAIS_NE);
             TAG_INEXISTENTE(XML_IN_ID_PAIS);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdPais) {
             ERROR(NRO_ID_PAIS_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_PAIS);

   		     if (pcIdPais)
			     XMLString::release(&pcIdPais);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdPais = atoi(pcIdPais)) <= 0) {
             ERROR(NRO_ID_PAIS_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_PAIS);

   		     if (pcIdPais)
			     XMLString::release(&pcIdPais);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdPais)
			 XMLString::release(&pcIdPais);

         pcIdPessoaUsuario = walkTree(dnode, XML_IN_ID_USUARIO, 0);
         if (pcIdPessoaUsuario == NULL) {
             ERROR(NRO_ID_USUARIO_NE);
             TAG_INEXISTENTE(XML_IN_ID_USUARIO);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdPessoaUsuario) {
             ERROR(NRO_ID_USUARIO_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_USUARIO);

   		     if (pcIdPessoaUsuario)
			     XMLString::release(&pcIdPessoaUsuario);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdPessoaUsuario = atoi(pcIdPessoaUsuario)) <= 0) {
             ERROR(NRO_ID_USUARIO_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_USUARIO);

      		 if (pcIdPessoaUsuario)
			    XMLString::release(&pcIdPessoaUsuario);

             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
   		 if (pcIdPessoaUsuario)
			 XMLString::release(&pcIdPessoaUsuario);

         // Recupera os não obrigatórios
         pcIdLinha = walkTree(dnode, XML_IN_ID_LINHA, 0);
         if (pcIdLinha && *pcIdLinha)
             iIdLinha = atoi(pcIdLinha);

         pcIdConta = walkTree(dnode, XML_IN_ID_CONTA, 0);
         if (pcIdConta && *pcIdConta)
             iIdConta = atoi(pcIdConta);

         pcDtDevolucao = walkTree(dnode, XML_IN_DT_DEVOLUCAO, 0);
         pcDsEndereco = walkTree(dnode, XML_IN_DS_END, 0);
         pcNrEndereco = walkTree(dnode, XML_IN_NR_END, 0);
         pcDsComplemento = walkTree(dnode, XML_IN_DS_COMPLEMENTO, 0);
         pcDsBairro = walkTree(dnode, XML_IN_DS_BAIRRO, 0);
         pcDsCidade = walkTree(dnode, XML_IN_DS_CIDADE, 0);
         pcNrCEP = walkTree(dnode, XML_IN_NR_CEP, 0);

         // Coloca os dados no objeto de correspondencia
         oCorr.setIdPessoaUsuarioInclusao(iIdPessoaUsuario);
         oCorr.setIdMotivoDevolucao(iIdMotDev);
         oCorr.setIdPessoa(iIdPessoa);
         oCorr.setIdPais(iIdPais);
         oCorr.setIdUf(iIdUF);
         oCorr.setIdTipoCorrespondencia(iIdTpCorr);
         oCorr.setDtDevolucao(pcDtDevolucao);
         oCorr.setNmLogradouro(pcDsEndereco);
         oCorr.setNrEndereco(pcNrEndereco);
         oCorr.setDsComplemento(pcDsComplemento);
         oCorr.setNmBairro(pcDsBairro);
         oCorr.setNmCidade(pcDsCidade);
         oCorr.setNrCEP(pcNrCEP);
         
         // Inclui a correspondencia
         oCorr.setUsuarioAlteracao(getUser());
         oCorr.inclui();

         // Verifica se tem que incluir conta e/ou linha.
         if (pcIdConta && *pcIdConta) {
             oCorrConta.setIdCorrespondenciaDevolvida(oCorr.getIdCorrespondenciaDevolvida());
             oCorrConta.setIdConta(iIdConta);
             oCorrConta.setUsuarioAlteracao(getUser());
             oCorrConta.inclui();
         }
         if (pcIdLinha && *pcIdLinha) {
             oCorrLin.setIdCorrespondenciaDevolvida(oCorr.getIdCorrespondenciaDevolvida());
             oCorrLin.setIdLinhaTelefonica(iIdLinha);
             oCorrLin.setUsuarioAlteracao(getUser());
             oCorrLin.inclui();
         }


		if (pcIdLinha)
			XMLString::release(&pcIdLinha);

   		if (pcIdConta)
			XMLString::release(&pcIdConta);

		if (pcDtDevolucao) XMLString::release(&pcDtDevolucao);
		if (pcDsEndereco) XMLString::release(&pcDsEndereco);
		if (pcNrEndereco) XMLString::release(&pcNrEndereco);
		if (pcDsComplemento) XMLString::release(&pcDsComplemento);
		if (pcDsBairro) XMLString::release(&pcDsBairro);
		if (pcDsCidade) XMLString::release(&pcDsCidade);
		if (pcNrCEP) XMLString::release(&pcNrCEP);

    }catch(...){
        throw;
    }

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implCorrDevInsere::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}