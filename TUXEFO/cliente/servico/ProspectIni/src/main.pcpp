/*
 * Serviço para montar tela inicial de cadastro de dados prospect
 * Versão inicial, 31/05/2004
 */

/*
 * Task force to seek potential memory leaks and exception errors - March,2005 - Cassio
 */

//EXEC SQL INCLUDE SQLCA;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoDocumento.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoComunicacao.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/Pais.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/UF.h";

#include "../include/ProspectIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

DECLARE_TUXEDO_SERVICE(ProspectIni);

void implProspectIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

    CTipoDocumento* poTpDoc=0;
    CTipoComunicacao* poTpComm=0;
    CPais* poPais=0;
    CUF* poUF=0;
    char *pParam = 0;

    int iNroReg = 0;
    int iAux = 0;

    ULOG_START( "implProspectIni::Execute()" );

    ULOG("Local1");

    try{
         pParam = walkTree(dnode, XML_IN_ID_TPPESSOA, 0);
         if (pParam == NULL) {
             ERROR(NRO_ID_TP_PESSOA_NE);
             TAG_INEXISTENTE(XML_IN_ID_TPPESSOA);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pParam) {
             ERROR(NRO_ID_TP_PESSOA_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_TPPESSOA);
             if ( pParam ) XMLString::release(&pParam);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!IsNumeric(pParam)) {
             ERROR(NRO_ID_TP_PESSOA_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_TPPESSOA);
             if ( pParam ) XMLString::release(&pParam);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }

        ULOG("pParam[%s]", pParam);

         // Monta o XML de saída
         xml_g->createTag(XML_OUT_ROOT);
         xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);


        ULOG("Antes de listaPorIdTipoPessoa");

        // Consulta os tipos de documento
        poTpDoc = CTipoDocumento::listaPorIdTipoPessoa(&iNroReg, pParam);

        ULOG("Depois de listaPorIdTipoPessoa");
        ULOG("iNroReg(%d)", iNroReg);

         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_TIPO_DOCTO);
             xml_g->addItem(XML_OUT_ID_DOCTO, poTpDoc[iAux].getIdTipoDocumento());
             xml_g->addItem(XML_OUT_SG_DOCTO, rtrim(poTpDoc[iAux].getSgTipoDocumento()));
             xml_g->addItem(XML_OUT_DS_DOCTO, rtrim(poTpDoc[iAux].getDsTipoDocumento()));
             xml_g->addItem(XML_OUT_TP_PESSOA, poTpDoc[iAux].getIdTipoPessoa());
             xml_g->closeTag();
         }

         // Consulta os países
         poPais = CPais::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_PAIS);
             xml_g->addItem(XML_OUT_ID_PAIS, poPais[iAux].getIdPais());
             xml_g->addItem(XML_OUT_SG_PAIS, rtrim(poPais[iAux].getSgPais()));
             xml_g->addItem(XML_OUT_NM_PAIS, rtrim(poPais[iAux].getNmPais()));
             xml_g->closeTag();
         }

         // Busca todos os tipos de comunicacao
         poTpComm = CTipoComunicacao::lista(&iNroReg);
         for (iAux = 0; iAux < iNroReg; iAux++) {
             xml_g->createTag(XML_OUT_TIPO_COMM);
             xml_g->addItem(XML_OUT_ID_COMM, poTpComm[iAux].getIdTipoComunicacao());
             xml_g->addItem(XML_OUT_SG_COMM, rtrim(poTpComm[iAux].getSgTipoComunicacao()));
             xml_g->addItem(XML_OUT_DS_COMM, rtrim(poTpComm[iAux].getDsTipoComunicacao()));
             xml_g->closeTag();
         }

         // Busca todos as unidades federativas
         poUF = CUF::lista(&iNroReg);
         for (iAux=0; iAux < iNroReg; iAux++) 
         {
             xml_g->createTag(XML_OUT_NO_LISTAUF);
                 xml_g->addItem(XML_OUT_IDUF, poUF[iAux].getIdUF());
                 xml_g->addItem(XML_OUT_SGUF, rtrim(poUF[iAux].getSgUF()));
                 xml_g->addItem(XML_OUT_NMUF, rtrim(poUF[iAux].getNmUF()));
             xml_g->closeTag();
         }

         ULOG("Local2");

         // Libera a memória
         if ( poTpDoc ) free(poTpDoc);
         if ( poPais ) free(poPais);
         if ( poTpComm ) free(poTpComm);
         if ( poUF ) free(poUF);
         XMLString::release(&pParam);

    }catch(...){
        if ( poTpDoc ) free(poTpDoc);
        if ( poPais ) free(poPais);
        if ( poTpComm ) free(poTpComm);
        if ( poUF ) free(poUF);
        if ( pParam ) XMLString::release(&pParam);
        throw;
    }

    ULOG_END( "implProspectIni::Execute()" );

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}
