#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>

#include "../include/GETTRACK.h"
#include "../../negocio/clienteCmm/include/ParametroEntrega.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

DECLARE_TUXEDO_SERVICE(GETTRACK);

void implGETTRACK::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CParametroEntregapc *pclParametroEntrega=NULL;
    TParametroEntrega *ptParametroEntrega=NULL;

    DOMNode *DNFiltro=NULL;
    DOMNode *DNCombos=NULL;

    char szTpOperacao[25 + 1];
    char szSelect[25 + 1];
    char szAux[255 + 1];
    int iIndex=0;

    ULOG_START("implGETTRACK::Execute");

    try
    {
        pclParametroEntrega = new CParametroEntregapc;

        GETTREE(szTpOperacao, pDnode, "tpOperacao", 0, OBRIGATORIO, "tpOperacao"); ULOG("tpOperacao[%s]", szTpOperacao);


        pXmlG->createTag("TrackingPrevisaoEntregaVO");
        pXmlG->addProp("xmlns", "tracking.fo.vivo.com.br/vo");

        if(!strcmp(szTpOperacao, "select"))
        {
            if((DNFiltro = walkDOM(pDnode, "Filtro", 0)) != NULL)
            {
                pXmlG->createTag("Combos");

                if((DNCombos = walkDOM(DNFiltro, "Combos", 0)) != NULL)
                {
                    while(true)
                    {
                        ULOG("iIndex(%d)", iIndex);
                        GETTREE(szSelect, DNCombos, "nmSelect", iIndex, NOBRIGATORIO, "nmSelect"); ULOG("nmSelect[%s]", szSelect);
                        if(szSelect[0] == 0x00)
                            break;
    
                        pXmlG->createTag("Lista");
                        pXmlG->addItem("nmSelect", szSelect);
            
                        if(!strcmp(szSelect, "UF"))
                        {
                            while((ptParametroEntrega = pclParametroEntrega->buscaParametroEntrega(ID_LISTA_UF)) != NULL)
                            {
                                pXmlG->createTag("It");
                                    pXmlG->addItem("id", ptParametroEntrega->szSgUF);
                                pXmlG->closeTag(); //It
                            }
                        }
                        else if(!strcmp(szSelect, "SO"))
                        {
                            while((ptParametroEntrega = pclParametroEntrega->buscaParametroEntrega(ID_LISTA_SO)) != NULL)
                            {
                                pXmlG->createTag("It");
                                    pXmlG->addItem("id", ptParametroEntrega->szIdSistemaOrigem);
                                    pXmlG->addItem("ds", ptParametroEntrega->szNmSistemaOrigem);
                                pXmlG->closeTag(); //It
                            }
                        }
                        else
                            throw new TuxBasicSvcException("13E0001", "Select invalido!");
            
                        pXmlG->closeTag(); //Lista
    
                        iIndex++;
                    } //while(true)

                    if(iIndex == 0)
                        throw new TuxBasicSvcException("13E0001", "Noh nmSelect inexistente!");
                }
                else
                    throw new TuxBasicSvcException("13E0001", "Noh Combos inexistente!");

                pXmlG->closeTag(); //Combos

            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtro inexistente!");

        }
        else if(!strcmp(szTpOperacao, "pesquisar"))
        {
            if((DNFiltro = walkDOM(pDnode, "Filtro", 0)) != NULL)
            {
                GETTREE(szAux, DNFiltro, "idSO", 0, NOBRIGATORIO, "idSO"); ULOG("idSO[%s]", szAux);
                pclParametroEntrega->setIdSistemaOrigem(szAux);

                GETTREE(szAux, DNFiltro, "sgUF", 0, NOBRIGATORIO, "sgUF"); ULOG("sgUF[%s]", szAux);
                pclParametroEntrega->setUFRegiao(szAux);

                if((strlen(pclParametroEntrega->getUFRegiao()) == 0) && (strlen(pclParametroEntrega->getIdSistemaOrigem()) == 0))
                    throw new TuxBasicSvcException("13E0001", "Valores nulos para pesquisa");


                pXmlG->createTag("Tabela");

                while((ptParametroEntrega = pclParametroEntrega->buscaParametroEntrega(ID_BUSCA)) != NULL)
                {
                    pXmlG->createTag("Campos");
                        pXmlG->addItem("idSO",              ptParametroEntrega->szIdSistemaOrigem);
                        pXmlG->addItem("nmSO",              ptParametroEntrega->szNmSistemaOrigem);
                        pXmlG->addItem("sgUF",              ptParametroEntrega->szUFRegiao);
                        pXmlG->addItem("qtFornecimento",    ptParametroEntrega->szQtDiaFornecimento);
                        pXmlG->addItem("qtPicking",         ptParametroEntrega->szQtDiaPicking);
                        pXmlG->addItem("qtConfPicking",     ptParametroEntrega->szQtDiaConfirmaPicking);
                        pXmlG->addItem("qtFaturamento",     ptParametroEntrega->szQtDiaFaturamento);
                        pXmlG->addItem("qtRegSaida",        ptParametroEntrega->szQtDiaRegistroSaida);
                        pXmlG->addItem("qtEntrega",         ptParametroEntrega->szQtDiaEntrega);
                    pXmlG->closeTag(); //Campos
                }

                pXmlG->closeTag(); //Tabela

            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtro inexistente!");

        }
        else
            throw new TuxBasicSvcException("13E0001", "Tipo de operacao invalido!");


        pXmlG->closeTag(); //TrackingPrevisaoEntrega

    }
    catch(...)
    {
        ULOG("Exception!");
        if(pclParametroEntrega) delete pclParametroEntrega;
        ULOG_END("implGETTRACK::Execute");
        throw;
    }

    ULOG("Normal");
    if(pclParametroEntrega) delete pclParametroEntrega;

    ULOG_END("implGETTRACK::Execute");
    setStatusCode("13I0000", "Sucesso");
}
