#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include "../include/LCInicial.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPessoa.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classContaPontuacao.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classLinhaPonto.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classDocumentoVO.h";

DECLARE_TUXEDO_SERVICE(LCInicial);

void implLCInicial::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    char *pParam1=NULL;
    char *pIdCtaSisOrig=NULL;
    
    char *pParam2=NULL;//variavel temp para idtipolinha
    int  idTipoLinha=0; //variavel de tipo da linha
    					//para encaminhamento de tuxproxy correto
    int iNroReg = 0;
    int iAux = 0;
    
    CPessoa oObjP;
    CDocumentoVO* poDoc=NULL;
    XMLGen xmlImpedimento;
    
    TuxRemoteService* remoteService=NULL;
    TuxMessage* inputMessage=NULL;
    XercesDOMParser *pParser=NULL;
    MemBufInputSource *pMemBuf=NULL;
    const char *pMemBufId = "inputInfo";
    TuxHelper tuxhp;
    DOMNode *xmlRet;

    ULOG_START( "implLCInicial::Execute()" );

    ULOG("LocalAA");

    try
    {
        //capturando tipo de linha	
        pParam2 = walkTree(pDnode, "idTipoLinha", 0);
        if(!pParam2) {
        	ERROR("idTipoLinha");
        	TAG_INEXISTENTE("idTipoLinha");
        	throw new TuxBasicSvcException("00E0666","faltando idTipoLinha");
        }
        if(!*pParam2) {
            if(pParam2) XMLString::release(&pParam2);
            throw new TuxBasicSvcException("00E0666","faltando idTipoLinha");
        }

        idTipoLinha=atoi(pParam2);
        XMLString::release(&pParam2);
        
        /*
        if(idTipoLinha != 0 && idTipoLinha != 1 && idTipoLinha != 2 && idTipoLinha != 5 && 
           idTipoLinha != 6 && idTipoLinha != 4 && idTipoLinha != 7) {
            throw new TuxBasicSvcException("00E0666", "IdTipoLinha diferente de 1(pos) 2(pre) 5(poschip) 6(prechip) "
                                                      "4(Controle CDMA) 7(Controle GSM)");
        }
        */

        pParam1 = walkTree(pDnode, XML_IN_IDPESSOA, 0);
        if(!pParam1) {
            ERROR(NRO_ID_PESSOA_NE);
            TAG_INEXISTENTE(XML_IN_IDPESSOA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if(!*pParam1) {
            ERROR(NRO_ID_PESSOA_VI);
            TAG_VALOR_VAZIO(XML_IN_IDPESSOA);

            if(pParam1) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam1) ){
            ERROR(NRO_ID_PESSOA_VI);
            TAG_VALOR_INVALIDO(XML_IN_IDPESSOA);

            if(pParam1) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        ULOG("pParam1[%s]", pParam1);

	    pXmlG->createTag(XML_OUT_NO_ROOT);
	    pXmlG->addProp("xmlns", XML_OUT_PROP);

        ULOG("LocalAB");

        oObjP.RecuperarPorTipoPessoa(pParam1);

        pXmlG->createTag(XML_OUT_NO_DADOSLUPA);
	    pXmlG->addItem(XML_IN_IDPESSOA, oObjP.getIdPessoa());
	    pXmlG->addItem(XML_OUT_NOME, oObjP.getNmPessoa());
	    pXmlG->addItem(XML_OUT_CLIDESDE, oObjP.getDtCadastroOut());
        if ( oObjP.getTipoPessoa() == 1 ) {
	        pXmlG->addItem(XML_OUT_ESTADOCIVIL, oObjP.getDsEstadoCivil());
	        pXmlG->addItem(XML_OUT_NASCIMENTO, oObjP.getDtNascimentoOut());
        }

        try {
            ULOGI("Primeira linha depois do try");

            /* Verificacao efetuada para nao entrar quando for Pre-Pago */
            pIdCtaSisOrig = walkTree(pDnode, "idcontasistemaorigem", 0);
            if( pIdCtaSisOrig && *pIdCtaSisOrig)
            {

            	ULOGI("Variavel pIdCtaSisOrig esta OK");
				if(idTipoLinha==1 || idTipoLinha==5)
				{
                	ULOGI("localABC");
                    xmlImpedimento.addItem("ProxyLinha", "");
                    xmlImpedimento.addItem("ProxyOperacao", "getImpedimentos");
                    xmlImpedimento.addItem("idcontasistemaorigem", pIdCtaSisOrig);
    
    	            remoteService = new TuxRemoteService();
    	            inputMessage = new TuxMessage();
    
    	            inputMessage->setUser(getUser());
    	            inputMessage->setService("LCInicial");
    	            inputMessage->setMessageBody(&xmlImpedimento);
    
    				remoteService->setServiceName("DTUXATLYSBE");
    	            remoteService->setInputMessage(inputMessage);
    	
    				ULOGI("remoteService preechido");

    	            if(remoteService->remoteCall() != TUXFWRET_OK){
                        pXmlG->createTag(XML_OUT_NO_IMPEDIMENTO);
                            pXmlG->addItem("erro", "Impedimento fora");
                        pXmlG->closeTag();
                    }
                    else
                    {
                		ULOGI("Apos remoteService->remoteCall()");
    	                if(remoteService->getOutputMessage()->getStatusCode() != NULL && strlen(remoteService->getOutputMessage()->getStatusCode()) >= 3 && remoteService->getOutputMessage()->getStatusCode()[2] !='I')
                        {
                            pXmlG->createTag(XML_OUT_NO_IMPEDIMENTO);
                                pXmlG->addItem("erro", "Impedimento fora");
                            pXmlG->closeTag();
    		            }
                        else{   
                			ULOGI("Apos remoteService->getOutputMessage()->getStatusCode()");
    	                    char* ret = remoteService->getOutputMessage()->getMessageBody();
    						char* pOutMsg = (char *)malloc(strlen(ret) + 64); /* <?xml version='1.0' encoding='ISO-8859-1'?> */
    						sprintf(pOutMsg, "<?xml version='1.0' encoding='ISO-8859-1'?>%s", ret);
    
                			ULOGI("Antes de montar o XML");
                            pParser =  new XercesDOMParser;
                            pMemBuf =  new MemBufInputSource( (const XMLByte*)pOutMsg, strlen(pOutMsg), pMemBufId);
    
                            pParser->parse(*pMemBuf);
                            DOMNode* pDoc = pParser->getDocument();
                            xmlRet = tuxhp.walkDOM(pDoc, "ListaImpedimentoVO", 0);
                            if ( xmlRet == NULL ){
                                pXmlG->createTag(XML_OUT_NO_IMPEDIMENTO);
                                    pXmlG->addItem("erro", "Impedimento fora");
                                pXmlG->closeTag();
                            }
                            else
                                pXmlG->aggregateXML(getNodeAsString(xmlRet));
    
                			ULOGI("Depois de montar o XML");
                            //Liberando memoria alocada
    						free(pOutMsg);
                            free(pParser);
                            free(pMemBuf);
                			ULOGI("Depois dos frees");
                        }
                    }
                }
                else
                {
                    pXmlG->createTag(XML_OUT_NO_IMPEDIMENTO);
                    pXmlG->closeTag();
                }
            }
        }
        catch(...)
        {
            pXmlG->createTag(XML_OUT_NO_IMPEDIMENTO);
                pXmlG->addItem("erro", "Impedimento fora");
            pXmlG->closeTag();
        }

        if ( pIdCtaSisOrig ) XMLString::release(&pIdCtaSisOrig);
        pIdCtaSisOrig = 0;

        pXmlG->closeTag();

        pXmlG->createTag(XML_OUT_NO_DADOSABA);

        poDoc = CDocumentoVO::RecuperarTodos(&iNroReg, pParam1);
        XMLString::release(&pParam1);
        pParam1 = 0;

        ULOG("iNroReg(%d)", iNroReg);

        if ( poDoc )
	    {
	        for (iAux = 0; iAux < iNroReg; iAux++) 
            {
                ULOG("iAux(%d)", iAux);

		        pXmlG->createTag(XML_OUT_NO_DOCUMENTO);
		            pXmlG->addItem(XML_OUT_IDDOCUMENTO, poDoc[iAux].getIdDocumento());
		            pXmlG->createTag(XML_OUT_NO_TPDOCUMENTO);
		                pXmlG->addItem(XML_OUT_IDTPDOCUMENTO, poDoc[iAux].getIdTipoDocumento());
		                pXmlG->addItem(XML_OUT_SGTIPODOCUMENTO, poDoc[iAux].getSgTipoDocumento());
		                pXmlG->addItem(XML_OUT_DSTIPODOCUMENTO, poDoc[iAux].getDsTipoDocumento());
                    pXmlG->closeTag();
		            pXmlG->addItem(XML_OUT_NRDOCUMENTO, poDoc[iAux].getNrDocumento());
		            pXmlG->addItem(XML_OUT_ORGAOEXPEDIDOR, poDoc[iAux].getSgOrgaoExpedidor());
		            pXmlG->addItem(XML_OUT_SGUF, poDoc[iAux].getSgUf());
		            pXmlG->addItem(XML_OUT_DTEMISSAO, poDoc[iAux].getDtEmissaoOut());
		            pXmlG->addItem(XML_OUT_NRPRIORIDADE, poDoc[iAux].getNrPrioridade());
		            pXmlG->createTag(XML_OUT_NO_PAIS);
		                pXmlG->addItem(XML_OUT_IDPAIS, poDoc[iAux].getIdPais());
		                pXmlG->addItem(XML_OUT_SGPAIS, poDoc[iAux].getSgPais());
		                pXmlG->addItem(XML_OUT_NMPAIS, poDoc[iAux].getNmPais());
		                pXmlG->addItem(XML_OUT_DSNACIONALIDADE, poDoc[iAux].getDsNacionalidade());
                    pXmlG->closeTag();
		            pXmlG->addItem(XML_OUT_CDCPFCNPJBASE, poDoc[iAux].getCdCpfCnpjBase());
		            pXmlG->addItem(XML_OUT_CDCNPJFILIAL, poDoc[iAux].getCdCnpjFilial());
		            pXmlG->addItem(XML_OUT_CPFCNPJCONTROLE, poDoc[iAux].getCdCpfCnpjControle());
			        if ( poDoc[iAux].getTsSincronismo() && poDoc[iAux].getSqSincronismo() )
				        pXmlG->addItem(XML_OUT_INSINCRONISMO,"1");
			        else
				        pXmlG->addItem(XML_OUT_INSINCRONISMO,"0");
		        pXmlG->closeTag();
	        }
	    }

        pXmlG->closeTag();
        pXmlG->closeTag();

    }
    catch(...)
    {
	    if(remoteService) delete remoteService;
	    if(inputMessage) delete inputMessage;
        if(pParser) delete pParser;
        if(pMemBuf) delete pMemBuf;
        if(poDoc) free(poDoc);
        if(pParam1) XMLString::release(&pParam1);

        throw;  //repassando o erro para nucleo
    }

    ULOG("saida normal");
    if(remoteService) delete remoteService;
    if(inputMessage) delete inputMessage;
    if(pParser) delete pParser;
    if(pMemBuf) delete pMemBuf;
    if(poDoc) free(poDoc);
    if(pParam1) XMLString::release(&pParam1);

    ULOG_END( "implLCInicial::Execute()" );

	INFORMATION(NRO_OK);
	setStatusCode(sNrMsg, MSG_OK);
}
