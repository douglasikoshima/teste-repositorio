//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: ISubAssunto
//* Servidor: admSubAssunto
//*
//* Ficheiro: TUXEFO/cliente/admSubAssunto/ISubAssunto/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:01/05/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* 
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Funcoes.h"

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"

#include "../include/ISubAssunto.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classCstSubAssunto.h";

DECLARE_TUXEDO_SERVICE(ISubAssunto);

void implISubAssunto::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
CCstSubAssunto oObj;
char *pParam = 0;
int iRet;

    try{

        ULOG_START( "implISubAssunto::Execute()" );

        if ( walkDOM(pDnode, XML_IN_ASSUNTO) != NULL )
        {
            pParam = walkTree(walkDOM(pDnode, XML_IN_ASSUNTO), XML_IN_CODIGO, 0);
            if(!pParam)
            {
                ERROR(NRO_CODIGO_NE);
                TAG_INEXISTENTE(XML_IN_CODIGO);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            if (!*pParam)
            {
                ERROR(NRO_CODIGO_VV);
                TAG_VALOR_VAZIO(XML_IN_CODIGO);
                if (pParam) XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            if ( !IsNumeric(pParam) ){
                ERROR(NRO_CODIGO_VI);
                TAG_VALOR_INVALIDO(XML_IN_CODIGO);
                if (pParam) XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
        }
        else
        {
            ERROR(NRO_ID_ASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_ASSUNTO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        oObj.setIdAssunto(pParam);
        XMLString::release(&pParam);


        if ( walkDOM(pDnode, XML_IN_SUBASSUNTO) != NULL )
        {
            pParam = walkTree(walkDOM(pDnode, XML_IN_SUBASSUNTO), XML_IN_DESCRI, 0);
            if (!pParam || !*pParam)
                oObj.setNmSubAssunto("");
            else
                oObj.setNmSubAssunto(pParam);

            XMLString::release(&pParam);

            pParam = walkTree(walkDOM(pDnode, XML_IN_SUBASSUNTO), XML_IN_DISPON, 0);
            if(!pParam)
            {
                ERROR(NRO_INDISPON_NE);
                TAG_INEXISTENTE(XML_IN_DISPON);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            if ( !*pParam)
            {
                ERROR(NRO_INDISPON_VI);
                TAG_VALOR_VAZIO(XML_IN_DISPON);
                if (pParam) XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            oObj.setInDisponibilidade(pParam);

            XMLString::release(&pParam);

            pParam = walkTree(walkDOM(pDnode, XML_IN_SUBASSUNTO), XML_IN_SEQAPE, 0);
            if(!pParam)
            {
                ERROR(NRO_SQ_ATRIBUTO_NR_NE);
                TAG_INEXISTENTE(XML_IN_SEQAPE);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            if ( !*pParam)
            {
                ERROR(NRO_SQ_ATRIBUTO_NR_VI);
                TAG_VALOR_VAZIO(XML_IN_SEQAPE);
                if (pParam) XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            oObj.setSqApresentacao(pParam);
            XMLString::release(&pParam);
    
        }
        else
        {
            ERROR(NRO_ID_SUBASSUNTO_NR_NE);
            TAG_INEXISTENTE(XML_IN_SUBASSUNTO);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        // Guarda o usuario que esta executando esse servico
        oObj.setUsuarioAlteracao(getUser());

        iRet = oObj.Incluir();
        switch(iRet)
        {
            case NOK:
                ERROR(NRO_INSERT_NAO_EFETUADO);
                pXmlG->addItem(sNrMsg, MSG_INSERT_NAO_EFETUADO);
                break;              
            case DUPLICATE_KEY:
                pXmlG->addItem("FAILED", "DUPLICATE KEY");
                break;
        }

        ULOG_END( "implISubAssunto::Execute()" );

    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}



