//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte: main.pcpp
//* Servico: ARecusaMContato
//* Servidor: admPermissao
//*
//* Ficheiro: TUXEFO/cliente/admPermissao/ARecusaMContato/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson da S. Martins
//*
//* Fecha primeira version:11/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Servico para atualizar as linhas da tabela PessoaRecusaMeioContato.
//*
//*//-------------------------------------------------------------------------------
//*  ALTERACAO  DESCRICAO
//*    01.00    Alteracao do nome do servico internamente a pedido da equipe
//*             de Suporte Tecnologico. 30/08/2004
//---------------------------------------------------------------------
//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../include/ARecusaMContato.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPessoaRecusaMeioContato.h";

DECLARE_TUXEDO_SERVICE(ARECUSAMCONTA);

void implARECUSAMCONTA::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
char* pParam;
int iNroReg = 0;
int iAux = 0;
int iSubno = 0;
int iObjCorr = 0;
CPessoaRecusaMeioContato oPRMC;
DOMNode *pNo; 

    ULOG_START( "implARECUSAMCONTA::Execute()" );
    
    try{
        pParam = walkTree(pDnode, XML_ID, 0);
        if(!pParam)
        {
            ERROR(NRO_ID_PESSOA_NE);
            TAG_INEXISTENTE(XML_ID);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        if ( !*pParam)
        {
            ERROR(NRO_ID_PESSOA_VV);
            TAG_VALOR_VAZIO(XML_ID);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam) ){
            ERROR(NRO_ID_PESSOA_VI);
            TAG_VALOR_INVALIDO(XML_ID);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        //

	    // Guarda o usuario que esta executando esse servico
	    oPRMC.setUsuarioAlteracao(getUser());

        // Efetuando a delecao dos registros
        // Nao tem controle de retorno por nao existir registro na primeira vez
        oPRMC.ExcluirPorPessoa(pParam); 

        for(; (pNo = walkDOM(pDnode, XML_NO, &iSubno, iObjCorr)) ; iSubno=0, iObjCorr++)
        {
            oPRMC.setIdPessoa(pParam);
            oPRMC.setIdMeioContato(walkTree(pNo, XML_IDMC, 0)); 
            if ( oPRMC.Incluir() == NOK )
            {
                ERROR(NRO_INSERT_NAO_EFETUADO);
                throw new TuxBasicSvcException(sNrMsg, MSG_INSERT_NAO_EFETUADO);
            }
        }
    }
    catch(...){
        throw;  //repassando o erro para nucleo
    }

    // Execução OK.
    INFORMATION(NRO_OK);
    ULOG_END( "implARECUSAMCONTA::Execute()" );
    setStatusCode(sNrMsg, MSG_OK);
}
