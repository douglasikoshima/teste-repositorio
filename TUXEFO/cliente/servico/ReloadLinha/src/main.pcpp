//------------------------------------------------------------------------------------
  //                           (c) Consorcio Indra/PT-SI.
  //                              xxxxxxxxxxxxxxxxxxxxxxx
  //                                  xxxxxxxxxxxxxx 
  //----------------------------------------------------------------------------------
  // Los contenidos de este fichero son propiedad de Telefonica Consorsio Indra/Pt-SI.
  // titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado,
  // em su totalidad o en parte, con el permiso escrito de Consorcio Indra/Pt-SI o de
  // acuerdo com los terminos y condiciones establecidas em el acuerdo/contrato bajo el
  // que se suministra.
//----------------------------------------------------------------------------------
//* Fonte   : main.cpp
//* Servico : ReloadLinha
//* Servidor: TelaInicial
//*
//* Ficheiro: TUXEFO/cliente/TelaInicial/ReloadLinha/src
//*
//* Tipo: Pro*C
//*
//* Autor: Jefferson Martins
//*
//* Fecha primeira version:13/06/2004
//*
//* Version actual: 01.00
//*
//* Purpose:
//*//-------------------------------------------------------------------------------
//* Purpose:
//*
//* Servico para recuperar os dados de uma nova linha para a Tela Inicial.
//*
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio
//*
//*//-------------------------------------------------------------------------------
//---------------------------------------------------------------------

//EXEC SQL INCLUDE SQLCA;

#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Exception.h"

#include "../include/ReloadLinha.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/Parametro.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classUsuario.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPlanoServicoLinha.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPessoaLinha.h";

DECLARE_TUXEDO_SERVICE(RELOADLINHA);

void implRELOADLINHA::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    char* pParam1=0;
    char* pParam2=0;
    
    CParametro oParam;
    CPlanoServicoLinha oPSL;
    CPessoaLinha oPessLinha;

    ULOG_START( "implRELOADLINHA::Execute()" );
    try{
        pParam1 = walkTree(pDnode, XML_OUT_IDLINHA, 0);
        if(!pParam1)
        {
            ERROR(NRO_ID_LINHA_NE);
            TAG_INEXISTENTE(XML_OUT_IDLINHA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam1)
        {
            ERROR(NRO_ID_LINHA_VV);
            TAG_VALOR_VAZIO(XML_IN_NRLINHA);
            if ( pParam1 ) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam1) ){
            ERROR(NRO_ID_LINHA_VI);
            TAG_VALOR_INVALIDO(XML_IN_NRLINHA);
            if ( pParam1 ) XMLString::release(&pParam1);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        pParam2 = walkTree(pDnode, XML_IN_IDPESSOADEPARA, 0);
        if(!pParam2)
        {
            ERROR(NRO_ID_PESSOA_DE_PARA_NE);
            TAG_INEXISTENTE(XML_IN_IDPESSOADEPARA);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !*pParam2)
        {
            ERROR(NRO_ID_PESSOA_DE_PARA_VV);
            TAG_VALOR_VAZIO(XML_IN_IDPESSOADEPARA);
            if ( pParam1 ) XMLString::release(&pParam1);
            if ( pParam2 ) XMLString::release(&pParam2);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        if ( !IsNumeric(pParam2) ){
            ERROR(NRO_ID_PESSOA_DE_PARA_VI);
            TAG_VALOR_INVALIDO(XML_IN_IDPESSOADEPARA);
            if ( pParam1 ) XMLString::release(&pParam1);
            if ( pParam2 ) XMLString::release(&pParam2);
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }
        
        pXmlG->createTag(XML_OUT_ROOT);
        pXmlG->addProp("xmlns", XML_OUT_PROP);

            ULOGI("CUsuario oUsu(pParam1);");
            CUsuario oUsu(pParam1);
            pXmlG->createTag(XML_OUT_NO_USUARIOLIN);
                pXmlG->addItem(XML_OUT_IDPESSOA, oUsu.getIdPessoa());
                pXmlG->addItem(XML_OUT_NMUSUARIO, oUsu.getNmPessoa());
                pXmlG->addItem(XML_OUT_IDDOCUM, oUsu.getIdDocumento());
                pXmlG->addItem(XML_OUT_TPDOCUM, oUsu.getSgTipoDocumento());
                pXmlG->addItem(XML_OUT_NRDOCUM, oUsu.getNrDocumento());
                pXmlG->addItem(XML_OUT_TPCONTATO, oUsu.getDsTipoComunicacao());
                pXmlG->addItem(XML_OUT_NRCONTATO, oUsu.getDsContato());
                pXmlG->addItem(XML_OUT_VLRENTAB, oUsu.getVlRentabilidade());
                pXmlG->addItem(XML_OUT_DSCARGO, oUsu.getDsCargoContato());
            pXmlG->closeTag();

            ULOGI("oParam.RecuperarPorIdLinTelefETpRelac(pParam1, \"U\");");
            oParam.RecuperarPorIdLinTelefETpRelac(pParam1, "U");

            pXmlG->addItem(XML_OUT_IDLINHA, oParam.getIdLinhaTelefonica());
            pXmlG->addItem(XML_OUT_IDTIPOLINHA, oParam.getIdTipoLinha());
            pXmlG->addItem(XML_OUT_NRLINHA, oParam.getNrLinha());
            pXmlG->addItem("nrLinhaFormat", oParam.getDddLinhaFormatada());
            pXmlG->addItem(XML_OUT_IDLINHAHIST, oParam.getIdPessoaLinhaHistorico());
            pXmlG->addItem(XML_OUT_CODAREA, oParam.getCdAreaRegistro());
            pXmlG->addItem(XML_OUT_IDCONTA, oParam.getIdConta());
            pXmlG->addItem(XML_OUT_CDCONTA, oParam.getCdConta());
            pXmlG->addItem(XML_OUT_LINSISTORIG, oParam.getIdLinhaSistemaOrigem());
            pXmlG->addItem(XML_OUT_CTASISTORIG, oParam.getIdContaSistemaOrigem());
            pXmlG->addItem(XML_OUT_PESSOAUSU, oParam.getIdUsuario());
            pXmlG->addItem(XML_OUT_USUDEPARA, oParam.getIdUsuarioDePara());
            pXmlG->addItem(XML_OUT_DSTIPOLINHA, oParam.getTipoLinha());
            pXmlG->addItem(XML_OUT_DSESTADOLINHA, oParam.getEstadoLinha());

            ULOGI("oPSL.buscarPlanoServico(oParam.getIdLinhaTelefonica());");
            oPSL.buscarPlanoServico(oParam.getIdLinhaTelefonica());
            pXmlG->addItem(XML_OUT_DSPLANOSERVICO, oPSL.getNmServico());

            ULOGI("oPessLinha.obterQtdEstadoLinha(pParam2, \"A\")");
            pXmlG->addItem(XML_OUT_QTDLINHAATIVA, oPessLinha.obterQtdEstadoLinha(pParam2, "A")); //"A"=Ativa

            ULOGI("oPessLinha.obterQtdEstadoLinha(pParam2, \"D\")");
            pXmlG->addItem(XML_OUT_QTDLINHAINATIVA, oPessLinha.obterQtdEstadoLinha(pParam2, "D")); //"D"=Cancelado

            ULOGI("oPessLinha.obterQtdTipoLinha(pParam2, 2)");
            pXmlG->addItem(XML_OUT_QTDLINHAPRE, oPessLinha.obterQtdTipoLinha(pParam2, 2));     //2=pre-pago
            ULOGI("oPessLinha.obterQtdTipoLinha(pParam2, 1)");
            pXmlG->addItem(XML_OUT_QTDLINHAPOS, oPessLinha.obterQtdTipoLinha(pParam2, 1));     //1=pos-pago 

        pXmlG->closeTag();  // fecha a tag principal

        XMLString::release(&pParam1);
        XMLString::release(&pParam2);
    }
    catch(...){
        if ( pParam1 ) XMLString::release(&pParam1);
        if ( pParam2 ) XMLString::release(&pParam2);
        throw;  //repassando o erro para nucleo
    }

    ULOG_END( "implRELOADLINHA::Execute()" );
    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}



