/*
 * Serviço de consulta de setalhes de segmentação do cliente
 * Versão inicial, 31/05/2004
 */

//*
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio

//EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/PessoaSegmentacaoHistorico.h";

#include "../include/DetSegConsulta.h"

#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

DECLARE_TUXEDO_SERVICE(DetSegConsulta);

void implDetSegConsulta::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CPessoaSegmentacaoHistorico* poHist;
	char* pcIdPessoa=0;
	long iIdPessoa;
	int iNroReg = 0;
	int iAux = 0;

    ULOG_START( "implDetSegConsulta::Execute()" );
    
	// Recupera o Id da pessoa para busca.
	pcIdPessoa = walkTree(dnode, XML_IN_ID_PESSOA, 0);
	if (pcIdPessoa == NULL) {
		ERROR(NRO_ID_PESSOA_NE);
		TAG_INEXISTENTE(XML_IN_ID_PESSOA);
		throw new TuxBasicSvcException(sNrMsg, sMsg);
	}
	if (!*pcIdPessoa) {
		ERROR(NRO_ID_PESSOA_VV);
		TAG_VALOR_VAZIO(XML_IN_ID_PESSOA);
        XMLString::release(&pcIdPessoa);
		throw new TuxBasicSvcException(sNrMsg, sMsg);
	}
	if ((iIdPessoa = atol(pcIdPessoa)) <= 0) {
		ERROR(NRO_ID_PESSOA_VI);
		TAG_VALOR_INVALIDO(XML_IN_ID_PESSOA);
        XMLString::release(&pcIdPessoa);
		throw new TuxBasicSvcException(sNrMsg, sMsg);
	}
    XMLString::release(&pcIdPessoa);

	// Consulta o objeto no banco de dados
	poHist = CPessoaSegmentacaoHistorico::listaPorIdPessoa(iIdPessoa, &iNroReg);

	// Monta o XML de saída
	xml_g->createTag(XML_OUT_ROOT);
	xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);
	for (; iAux < iNroReg; iAux++) {
		xml_g->createTag(XML_OUT_LISTA_SEGMENTACAO);
		xml_g->addItem(XML_OUT_DS_SEGMENTACAO, rtrim(poHist[iAux].getDsSegmentacao()));
		xml_g->addItem(XML_OUT_DT_SEGMENTACAO, rtrim(poHist[iAux].getDtSegmentacao()));
		if (poHist[iAux].getVlRentabilidade() != NULL)
			xml_g->addItem(XML_OUT_VL_RENTABILIDADE, *poHist[iAux].getVlRentabilidade());
		xml_g->closeTag();
	}
	xml_g->closeTag();

	// Libera a memória
	free(poHist);

	// Execução OK.
	INFORMATION(NRO_OK);

    ULOG_END( "implDetSegConsulta::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}

