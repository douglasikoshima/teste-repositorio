#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../negocio/clienteCmm/include/Exception.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include "../../negocio/clienteCmm/include/LogSIMLock.h"
#include "../../negocio/clienteCmm/include/TripleDES.h"

#include "../include/GETSIMLOCK.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

DECLARE_TUXEDO_SERVICE(GETSIMLOCK);

void implGETSIMLOCK::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    TuxRemoteService* remoteService = NULL;
    TuxMessage* inputMessage = NULL;
    const char *pMemBufId = "inputInfo";
    char* ret = NULL;
    MemBufInputSource *pMemBuf = NULL;
    XercesDOMParser* pParser = NULL;
    DOMNode* pDoc = NULL;
    char *fullRet = NULL;
    XMLGen *pclXmlGen = NULL;

    char *pPointer = NULL;
    int iFlagErro=0;
    char szAux[512 + 1];
    bool bFlagEstadoConsulta;

    LogSIMLock *pclLogSIMLock=NULL;
    char szKey1[LEN_KEY + LEN_EOS];
    char szKey2[LEN_KEY + LEN_EOS];
    char szKey3[LEN_KEY + LEN_EOS];

    ULOG_START("implGETSIMLOCK::Execute");

    TDadosEntrada tDadosEntrada;
    memset(&tDadosEntrada, 0x00, sizeof(TDadosEntrada));

    TDadosSaida tDadosSaida;
    memset(&tDadosSaida, 0x00, sizeof(TDadosSaida));

    TDadosRetornoVivoSafe tDadosRetornoVivoSafe;
    memset(&tDadosRetornoVivoSafe, 0x00, sizeof(TDadosRetornoVivoSafe));
    
    try
    {

        pclLogSIMLock = new LogSIMLock;

        /* Referente a IMEI */
        pPointer = walkTree(pDnode, "nrIMEI", 0); ULOG("nrIMEI[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szIMEI, pPointer?pPointer:"");
        if(!pPointer) {
            ERROR(NRO_NR_IMEI_NE); TAG_INEXISTENTE("nrIMEI"); iFlagErro=1;
        }
        else if(!*pPointer) {
            ERROR(NRO_NR_IMEI_VV); TAG_VALOR_VAZIO("nrIMEI"); iFlagErro=1;
        }
        if(pPointer) XMLString::release(&pPointer);
        if(iFlagErro) {
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        /* Referente a IP */
        pPointer = walkTree(pDnode, "nrIP", 0); ULOG("nrIP[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szIP, pPointer?pPointer:"");
        if(!pPointer) {
            ERROR(NRO_NR_IP_NE); TAG_INEXISTENTE("nrIP"); iFlagErro=1;
        }
        else if(!*pPointer) {
            ERROR(NRO_NR_IP_VV); TAG_VALOR_VAZIO("nrIP"); iFlagErro=1;
        }
        if(pPointer) XMLString::release(&pPointer);
        if(iFlagErro) {
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        /* Referente a idTipoRelacionamento */
        pPointer = walkTree(pDnode, "idTipoRelacionamento", 0); ULOG("idTipoRelacionamento[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szInResponsavelAbertura, pPointer?pPointer:"");
        if(!pPointer) {
            ERROR(NRO_ID_TPRELACIONA_NE); TAG_INEXISTENTE("idTipoRelacionamento"); iFlagErro=1;
        }
        else if(!*pPointer) {
            ERROR(NRO_ID_TPRELACIONA_VV); TAG_VALOR_VAZIO("idTipoRelacionamento"); iFlagErro=1;
        }
        else if(!IsNumeric(pPointer)){
            ERROR(NRO_ID_TPRELACIONA_VI); TAG_VALOR_INVALIDO("idTipoRelacionamento"); iFlagErro=1;
        }
        if(pPointer) XMLString::release(&pPointer);
        if(iFlagErro) {
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        /* Referente a idPessoa */
        pPointer = walkTree(pDnode, "idPessoa", 0); ULOG("idPessoa[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szIdPessoa, pPointer?pPointer:"");
        if(!pPointer) {
            ERROR(NRO_ID_PESSOA_NE); TAG_INEXISTENTE("idPessoa"); iFlagErro=1;
        }
        else if(!*pPointer) {
            ERROR(NRO_ID_PESSOA_VV); TAG_VALOR_VAZIO("idPessoa"); iFlagErro=1;
        }
        else if(!IsNumeric(pPointer)){
            ERROR(NRO_ID_PESSOA_VI); TAG_VALOR_INVALIDO("idPessoa"); iFlagErro=1;
        }
        if(pPointer) XMLString::release(&pPointer);
        if(iFlagErro) {
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        /* Referente a idTipoDocumento */
        pPointer = walkTree(pDnode, "idTipoDocumento", 0); ULOG("idTipoDocumento[%s]", pPointer?pPointer:"..NULL..");
        if(pPointer == NULL)
        {

            TDadosPesq2 tDadosPesq2;
            memset(&tDadosPesq2, 0x00, sizeof(TDadosPesq2));
            strcpy(tDadosPesq2.szIdPessoa, tDadosEntrada.szIdPessoa);

            if(pclLogSIMLock->buscaPDLogSIMLock(&tDadosPesq2) == false ) {
                sprintf(szAux, "not found em customer.pessoadocumento idPessoa[%s]", tDadosPesq2.szIdPessoa);
                // throw new TuxBasicSvcException("13E1313", szAux);
                ULOG("[%s]", szAux);
                strcpy(tDadosEntrada.szIdTipoDocumento, "0");
                strcpy(tDadosEntrada.szNrDocumento, "0");
            }
            else
            {
                strcpy(tDadosEntrada.szIdTipoDocumento, tDadosPesq2.szIdTipoDocumento);
                strcpy(tDadosEntrada.szNrDocumento, tDadosPesq2.szNrDocumento);
            }
        }
        else
        {
            strcpy(tDadosEntrada.szIdTipoDocumento, pPointer);
            if(pPointer) XMLString::release(&pPointer);


            /* Referente a NrDocumento */
            pPointer = walkTree(pDnode, "nrDocumento", 0); ULOG("nrDocumento[%s]", pPointer?pPointer:"..NULL..");
            strcpy(tDadosEntrada.szNrDocumento, pPointer?pPointer:"0");
            if(!pPointer) {
                ERROR(NRO_DOCTO_NE); TAG_INEXISTENTE("nrDocumento"); iFlagErro=1;
            }
            else if(!*pPointer) {
                ERROR(NRO_DOCTO_VV); TAG_VALOR_VAZIO("nrDocumento"); iFlagErro=1;
            }
            if(pPointer) XMLString::release(&pPointer);
            if(iFlagErro) {
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
        }


        /* Referente a idGrupoAbertura */
        pPointer = walkTree(pDnode, "idGrupoAbertura", 0); ULOG("idGrupoAbertura[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szIdGrupoAbertura, pPointer?pPointer:"");
        if(!pPointer) {
            ERROR(NRO_ID_GRUPO_ABERTURA_NE); TAG_INEXISTENTE("idGrupoAbertura"); iFlagErro=1;
        }
        else if(!*pPointer) {
            ERROR(NRO_ID_GRUPO_ABERTURA_VV); TAG_VALOR_VAZIO("idGrupoAbertura"); iFlagErro=1;
        }
        else if(!IsNumeric(pPointer)){
            ERROR(NRO_ID_GRUPO_ABERTURA_VI); TAG_VALOR_INVALIDO("idGrupoAbertura"); iFlagErro=1;
        }
        if(pPointer) XMLString::release(&pPointer);
        if(iFlagErro) {
            throw new TuxBasicSvcException(sNrMsg, sMsg);
        }

        /* Referente a cdAreaRegistro */
        pPointer = walkTree(pDnode, "cdAreaRegistro", 0); ULOG("cdAreaRegistro[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szCdAreaRegistro, pPointer?pPointer:"");
        if(pPointer) XMLString::release(&pPointer);

        /* Referente a nrLinha */
        pPointer = walkTree(pDnode, "nrLinha", 0); ULOG("nrLinha[%s]", pPointer?pPointer:"..NULL..");
        strcpy(tDadosEntrada.szNrLinha, pPointer?pPointer:"");
        if(pPointer) XMLString::release(&pPointer);

        /* referente a idUsuarioAlteracao */
        strcpy(tDadosEntrada.szIdUsuarioAlteracao, getUser());


        /* busca o IdPessoaLinhaHistorico a partir do idPessoa */
        TDadosPesq1 tDadosPesq1;
        memset(&tDadosPesq1, 0x00, sizeof(TDadosPesq1));
        strcpy(tDadosPesq1.szIdPessoa, tDadosEntrada.szIdPessoa);
        strcpy(tDadosPesq1.szIdTipoRelacionamento, tDadosEntrada.szInResponsavelAbertura);
        strcpy(tDadosPesq1.szNrLinha, tDadosEntrada.szNrLinha);
        strcpy(tDadosPesq1.szCdAreaRegistro, tDadosEntrada.szCdAreaRegistro);

        /* 14/04/2011 - ao inserir na tabela CUSTOMER.LOGSIMLOCK, 
		   o campo idpessoalinhahistorico estava nulo e ocorria erro.
		   Vamos descomentar o método abaixo para recuperar esse campo. 
		   Mesmo que não tenha valor, vamos colocar um try catch logo abaixo.
		*/
        // Palitagem nao esta mais sendo executada pelo serviço.
        //
        if(pclLogSIMLock->buscaPLHLogSIMLock(&tDadosPesq1) == false ) {
            sprintf(szAux, "not found em customer.pessoalinhahistorico idPessoa[%s]", tDadosPesq1.szIdPessoa);
            // throw new TuxBasicSvcException("13E1313", szAux);
        }

        TDadosEntradaVivoSafe tDadosEntradaVivoSafe;
        memset(&tDadosEntradaVivoSafe, 0x00, sizeof(TDadosEntradaVivoSafe));

        strcpy(tDadosEntradaVivoSafe.szSistemaOperacional,     "VVNET");
        strcpy(tDadosEntradaVivoSafe.szIMEI,                   tDadosEntrada.szIMEI);
        strcpy(tDadosEntradaVivoSafe.szIdGrupoAbertura,        tDadosEntrada.szIdGrupoAbertura);
        strcpy(tDadosEntradaVivoSafe.szCdAreaRegistro,         tDadosEntrada.szCdAreaRegistro);
        strcpy(tDadosEntradaVivoSafe.szNrLinha,                tDadosEntrada.szNrLinha);
        strcpy(tDadosEntradaVivoSafe.szIdPessoa,               tDadosEntrada.szIdPessoa);
        strcpy(tDadosEntradaVivoSafe.szTpOperacao,             "1");
        strcpy(tDadosEntradaVivoSafe.szInResponsavelAbertura,  tDadosEntrada.szInResponsavelAbertura);



        /* Referente a procedencia */
        TDadosPesq3 tDadosPesq3;
        memset(&tDadosPesq3, 0x00, sizeof(TDadosPesq3));
        strcpy(tDadosPesq3.szIdGrupo, tDadosEntrada.szIdGrupoAbertura);
        if(pclLogSIMLock->buscaProcedenciaLogSIMLock(&tDadosPesq3) == false) {
            strcpy(tDadosSaida.szErrorDescription, "Este Grupo não possui procedencia identificada nas regras de encaminhamento. Favor solicitar a parametrização ao responsavel.");
            strcpy(tDadosSaida.szErrorCode, "7");
            bFlagEstadoConsulta=false;
        }

        ULOG("tDadosSaida.szErrorCode[%s]", tDadosSaida.szErrorCode);
        if(strcmp(tDadosSaida.szErrorCode, "7"))
        {

            strcpy(tDadosEntradaVivoSafe.szIdProcedencia,         tDadosPesq3.szIdProcedencia);
    
    
            /* Referente a canal */
            TDadosPesq4 tDadosPesq4;
            memset(&tDadosPesq4, 0x00, sizeof(TDadosPesq4));
            strcpy(tDadosPesq4.szIdGrupo, tDadosEntrada.szIdGrupoAbertura);
            if(pclLogSIMLock->buscaCanalLogSIMLock(&tDadosPesq4) == false) {
                sprintf(szAux, "not found em acesso.grupocanal para idgrupo[%s]", tDadosPesq4.szIdGrupo);
                throw new TuxBasicSvcException("13E1313", szAux);
            }
            strcpy(tDadosEntradaVivoSafe.szIdCanal,              tDadosPesq4.szIdCanal);
    
    
            /* Referente a contato */
            TDadosPesq5 tDadosPesq5;
            memset(&tDadosPesq5, 0x00, sizeof(TDadosPesq5));
            if(pclLogSIMLock->buscaContatoLogSIMLock(&tDadosPesq5) == false) {
                strcpy(szAux, "not found em contatoadm.contato");
                throw new TuxBasicSvcException("13E1313", szAux);
            }
            strcpy(tDadosEntradaVivoSafe.szIdContato,              tDadosPesq5.szIdContato);
    

	    if (!strcmp(tDadosEntrada.szIdUsuarioAlteracao, "2")) /*VOL */
		strcpy(tDadosEntradaVivoSafe.szIdCanal, "15");

	     else if (!strcmp(tDadosEntrada.szIdUsuarioAlteracao, "3")) /*TAV */
		strcpy(tDadosEntradaVivoSafe.szIdCanal, "13");

    
            /* Inicio do acesso ao Vivo Safe */
            pclXmlGen = new XMLGen;
            pclXmlGen->addItem("SistemaOperacional", tDadosEntradaVivoSafe.szSistemaOperacional);
            pclXmlGen->addItem("Imei", tDadosEntradaVivoSafe.szIMEI);
            pclXmlGen->addItem("cdAreaRegistro", tDadosEntradaVivoSafe.szCdAreaRegistro);
            pclXmlGen->addItem("nrLinha", tDadosEntradaVivoSafe.szNrLinha);
    
            pclXmlGen->addItem("idGrupoAbertura", tDadosEntradaVivoSafe.szIdGrupoAbertura);
            pclXmlGen->addItem("idPessoa", tDadosEntradaVivoSafe.szIdPessoa);
            pclXmlGen->addItem("tpOperacao", tDadosEntradaVivoSafe.szTpOperacao);
            pclXmlGen->addItem("idProcedencia", tDadosEntradaVivoSafe.szIdProcedencia);
            pclXmlGen->addItem("idCanal", tDadosEntradaVivoSafe.szIdCanal);
            pclXmlGen->addItem("idContato", tDadosEntradaVivoSafe.szIdContato);
            pclXmlGen->addItem("inResponsavelAbertura", tDadosEntradaVivoSafe.szInResponsavelAbertura);
    
    
            try {
                remoteService = new TuxRemoteService();
                inputMessage = new TuxMessage();
            
                inputMessage->setUser(getUser());
                inputMessage->setService("SIMLOCK");
                inputMessage->setMessageBody(pclXmlGen);
            
                remoteService->setServiceName("SIMLOCK");
                remoteService->setInputMessage(inputMessage);
            
                if(remoteService->remoteCall() != TUXFWRET_OK) {
                    ULOG("LOCAL 1");
                    throw new TuxBasicSvcException("13E0001", "Sistema SIMLock sem resposta.");
                }
    
    
                ULOG("remoteService->getOutputMessage()->getStatusCode()[%s]", remoteService->getOutputMessage()->getStatusCode()?remoteService->getOutputMessage()->getStatusCode():"...NULL...");
                if (remoteService->getOutputMessage()->getStatusCode() != NULL) {
                    if(strlen(remoteService->getOutputMessage()->getStatusCode()) >= 3) {
                        if(remoteService->getOutputMessage()->getStatusCode()[2] !='I') {
                            ULOG("LOCAL 2");
                            throw new TuxBasicSvcException("13E0001", "Sistema SIMLock sem resposta..");
                        }
                    }
                }
    
                ret = remoteService->getOutputMessage()->getMessageBody();
                ULOG("XML recebido do SIMLock[%s]", ret);
            }
            catch(TuxException* tE) {
                ULOG("LOCAL 3");
                throw tE;
            }
    
    
            fullRet = (char*) malloc(strlen(ret) + 100);
            sprintf(fullRet, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>%s", ret);
            
            pParser = new XercesDOMParser;
            pMemBuf = new MemBufInputSource((const XMLByte*)fullRet, strlen(fullRet), pMemBufId);
    
            pParser->parse(*pMemBuf);
            pDoc = pParser->getDocument();
    
            /* Referente a cod */
            pPointer = walkTree(pDoc, "cod", 0); ULOG("cod[%s]", pPointer?pPointer:"..NULL..");
            strcpy(tDadosRetornoVivoSafe.szCod, pPointer?pPointer:"");
            if(!pPointer) {
                ERROR(NRO_CODIGO_NE); TAG_INEXISTENTE("cod"); iFlagErro=1;
            }
            else if(!*pPointer) {
                ERROR(NRO_CODIGO_VV); TAG_VALOR_VAZIO("cod"); iFlagErro=1;
            }
            else if(!IsNumeric(pPointer)){
                ERROR(NRO_CODIGO_VI); TAG_VALOR_INVALIDO("cod"); iFlagErro=1;
            }
            if(pPointer) XMLString::release(&pPointer);
            if(iFlagErro) {
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
    
            strcpy(tDadosSaida.szErrorCode, tDadosRetornoVivoSafe.szCod);

        }

        if(!strcmp(tDadosRetornoVivoSafe.szCod, "0"))
        {
            /* Referente a SimLock */
            pPointer = walkTree(pDoc, "SimLock", 0); ULOG("SimLock[%s]", pPointer?pPointer:"..NULL..");
            strcpy(tDadosRetornoVivoSafe.szSIMLock3des, pPointer?pPointer:"");
            if(!pPointer) {
                ERROR(NRO_SIM_LOCK_NE); TAG_INEXISTENTE("SimLock"); iFlagErro=1;
            }
            else if(!*pPointer) {
                ERROR(NRO_SIM_LOCK_VV); TAG_VALOR_VAZIO("SimLock"); iFlagErro=1;
            }
            if(pPointer) XMLString::release(&pPointer);
            if(iFlagErro) {
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }

            /* Referente a valor */
            pPointer = walkTree(pDoc, "valor", 0); ULOG("valor[%s]", pPointer?pPointer:"..NULL..");
            strcpy(tDadosRetornoVivoSafe.szValor, pPointer?pPointer:"");
            if(!pPointer) {
                ERROR(NRO_VALOR_NE); TAG_INEXISTENTE("valor"); iFlagErro=1;
            }
            else if(!*pPointer) {
                ERROR(NRO_VALOR_VV); TAG_VALOR_VAZIO("valor"); iFlagErro=1;
            }
            if(pPointer) XMLString::release(&pPointer);
            if(iFlagErro) {
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }

            /* copia as chaves passadas */
            memset(szKey1, 0x00, sizeof(szKey1)); memcpy(szKey1, tDadosRetornoVivoSafe.szValor, LEN_KEY); ULOG("szKey1[%s]", szKey1);
            memset(szKey2, 0x00, sizeof(szKey2)); memcpy(szKey2, tDadosRetornoVivoSafe.szValor+16, LEN_KEY); ULOG("szKey2[%s]", szKey2);
            memset(szKey3, 0x00, sizeof(szKey3)); memcpy(szKey3, tDadosRetornoVivoSafe.szValor+32, LEN_KEY); ULOG("szKey3[%s]", szKey3);

            // objeto para criptografia 3des
            CTripleDES *pclTripleDES;
            pclTripleDES = new CTripleDES;
            pclTripleDES->setKeys(szKey1, szKey2, szKey3);

            pclTripleDES->decryptString(tDadosRetornoVivoSafe.szSIMLock3des, tDadosSaida.szSIMLock);
            ULOG("BINARIO tDadosSaida.szSIMLock[%s]", tDadosSaida.szSIMLock);

            delete pclTripleDES;

            bFlagEstadoConsulta=true;
        }
        else if(strcmp(tDadosSaida.szErrorCode, "7"))
        {
            /* Referente a msg */
            pPointer = walkTree(pDoc, "msg", 0); ULOG("msg[%s]", pPointer?pPointer:"..NULL..");
            strcpy(tDadosRetornoVivoSafe.szMsg, pPointer?pPointer:"");
            if(pPointer) XMLString::release(&pPointer);

            strcpy(tDadosSaida.szErrorDescription, tDadosRetornoVivoSafe.szMsg);

            bFlagEstadoConsulta=false;
        }


        /* grava log */
        ULOG("Inicio LogSIMLock");
        pclLogSIMLock->setIP(tDadosEntrada.szIP);
        pclLogSIMLock->setIMEI(tDadosEntrada.szIMEI);
        pclLogSIMLock->setEstadoConsulta(bFlagEstadoConsulta?"OK":"ERRO");
        pclLogSIMLock->setIdTipoDocumento(tDadosEntrada.szIdTipoDocumento);
        pclLogSIMLock->setNrDocumento(tDadosEntrada.szNrDocumento);
        pclLogSIMLock->setIdPessoaLinhaHistorico(tDadosPesq1.szIdPessoaLinhaHistorico);
        pclLogSIMLock->setIdPessoa(tDadosEntrada.szIdPessoa);
        pclLogSIMLock->setIdUsuarioAlteracao(tDadosEntrada.szIdUsuarioAlteracao);
		try {
			pclLogSIMLock->insereLogSIMLock();
		} catch (...) {
			 ULOG("não inseriu na tabela CUSTOMER.LOGSIMLOCK");
		}
        ULOG("Final LogSIMLock");


        /* Formatacao dos dados de saida */
        pXmlG->createTag("DesbloqueioGsmVO");
        pXmlG->addProp("xmlns", "cliente.fo.vivo.com.br/vo");
        pXmlG->addItem("statusConsulta", bFlagEstadoConsulta?"OK":"ERRO");
        pXmlG->addItem("nrSimLock", tDadosSaida.szSIMLock);
        pXmlG->addItem("errorCode", tDadosSaida.szErrorCode);
        if(bFlagEstadoConsulta == false) {
            pXmlG->addItem("errorDescription", tDadosSaida.szErrorDescription);
        }
        pXmlG->closeTag();

    }
    catch(...)
    {
        ULOG("Exception!");

        if(fullRet) free(fullRet);
        if(pParser) delete pParser;
        if(pMemBuf) delete pMemBuf;
        if(remoteService) delete remoteService;
        if(inputMessage) delete inputMessage;
        if(pclXmlGen) delete pclXmlGen;
        if(pclLogSIMLock) delete pclLogSIMLock;

        ULOG_END("implGETSIMLOCK::Execute");
        throw;
    }

    ULOG("local D");
    if(fullRet) free(fullRet);
    if(pParser) delete pParser;
    if(pMemBuf) delete pMemBuf;
    if(remoteService) delete remoteService;
    if(inputMessage) delete inputMessage;
    if(pclXmlGen) delete pclXmlGen;
    if(pclLogSIMLock) delete pclLogSIMLock;

    ULOG_END("implGETSIMLOCK::Execute");

	INFORMATION(NRO_OK);
	setStatusCode(sNrMsg, MSG_OK);
}
