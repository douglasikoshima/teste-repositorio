#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>

#include <tuxfw.h>

#include "../../negocio/clienteCmm/include/Messages.h"
/* #include "../../negocio/clienteCmm/include/Funcoes.h" */
#include "../../negocio/clienteCmm/include/Tools.h"

#include "../include/GETGESTORCONT.h"
#include "../../negocio/clienteCmm/include/GestorMisc.h"
#include "../../negocio/clienteCmm/include/GestorConta.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

DECLARE_TUXEDO_SERVICE(GETGESTORCONT);

void implGETGESTORCONT::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CGestorMiscpc *pclGestorMisc=NULL;
    TGestorMisc *ptGestorMisc=NULL;

    CGestorConta *pclGestorConta=NULL;

    DOMNode *DNFiltros=NULL;
    DOMNode *DNCombos=NULL;

    TDesmembraNome tDesmembraNome;

    char szAux[255 + 1];
    char szTpOperacao[25 + 1];
    char szSelect[25 + 1];
    bool bExiste;

    ULOG_START("implGETGESTORCONT::Execute");

    try
    {
        pclGestorConta = new CGestorConta;
        pclGestorMisc = new CGestorMiscpc;

        GETTREE(szTpOperacao, pDnode, "tpOperacao", 0, OBRIGATORIO, "tpOperacao"); ULOG("tpOperacao[%s]", szTpOperacao);


        pXmlG->createTag("GestorContasVO");
        pXmlG->addProp("xmlns", "cliente.fo.vivo.com.br/vo");

        if(!strcmp(szTpOperacao, "select"))
        {
            if((DNCombos = walkDOM(pDnode, "Combos", 0)) != NULL)
            {
                GETTREE(szSelect, DNCombos, "nmSelect", 0, OBRIGATORIO, "nmSelect"); ULOG("nmSelect[%s]", szSelect);
            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Combos inexistente!");


            if(!strcmp(szSelect, "UF"))
            {
                pXmlG->createTag("ListasVO");
                pXmlG->addProp("xmlns", "cliente.fo.vivo.com.br/vo");
                pXmlG->createTag("Lista");
                pXmlG->addItem("nmSelect", szSelect);
                pXmlG->createTag("Disponivel");

                while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_LISTA_UF_)) != NULL)
                {
                    pXmlG->createTag("It");
                        pXmlG->addItem("id", ptGestorMisc->szIdUF);
                        pXmlG->addItem("ds", ptGestorMisc->szSgUF);
                    pXmlG->closeTag(); //It
                }

                pXmlG->closeTag(); //Disponivel
                pXmlG->closeTag(); //Lista
                pXmlG->closeTag(); //ListasVO
                pXmlG->closeTag(); //GestorContasVO

            }
            else
                throw new TuxBasicSvcException("13E0001", "Select invalido!");
        }
        else if(!strcmp(szTpOperacao, "pesquisarGestor"))
        {

            if((DNFiltros = walkDOM(pDnode, "Filtros", 0)) != NULL)
            {
                GETTREE(szAux, DNFiltros, "nrCNPJ", 0, NOBRIGATORIO, "nrCNPJ"); ULOG("nrCNPJ[%s]", szAux);
                pclGestorMisc->setNrDocumentoCliente(szAux);
    
                GETTREE(szAux, DNFiltros, "nrConta", 0, NOBRIGATORIO, "nrConta"); ULOG("nrConta[%s]", szAux);
                pclGestorMisc->setCdContaCliente(szAux);
    
                GETTREE(szAux, DNFiltros, "nrCPF", 0, NOBRIGATORIO, "nrCPF"); ULOG("nrCPF[%s]", szAux);
                pclGestorMisc->setNrDocumento(szAux);

                GETTREE(szAux, DNFiltros, "nmGestor", 0, NOBRIGATORIO, "nmGestor"); ULOG("nmGestor[%s]", szAux);
                strcpy(tDesmembraNome.szNomeCompleto, szAux);
                DesmembraNome(&tDesmembraNome);
    
                pclGestorMisc->setNmNome(tDesmembraNome.szNomePrimeiro);
                pclGestorMisc->setNmNomeMeio(tDesmembraNome.szNomeMeio);
                pclGestorMisc->setNmSobreNome(tDesmembraNome.szNomeFim);
    
            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtros inexistente!");


            pXmlG->createTag("Tabela");

            while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_GESTOR_CONTA_)) != NULL)
            {
                pXmlG->createTag("Linha");
                    pXmlG->addItem("nrCPF", ptGestorMisc->szIdNrCPF);
                    pXmlG->addItem("nmGestor", ptGestorMisc->szNmNomeGestor);
                    pXmlG->addItem("nmCliente", ptGestorMisc->szNmNomeCliente);
                    pXmlG->addItem("nrCelular", ptGestorMisc->szIdNrLinha);
                    pXmlG->addItem("nrConta", ptGestorMisc->szCdConta);
                    pXmlG->addItem("tpGestor", ptGestorMisc->szDsTipoGestor);
                pXmlG->closeTag(); //Linha
            }

            pXmlG->closeTag(); //Tabela
            pXmlG->closeTag(); //TelaInicialVO

        }
        else if(!strcmp(szTpOperacao, "pesquisarContas"))
        {
            if((DNFiltros = walkDOM(pDnode, "Filtros", 0)) != NULL)
            {
                GETTREE(szAux, DNFiltros, "nrCNPJ", 0, NOBRIGATORIO, "nrCNPJ"); ULOG("nrCNPJ[%s]", szAux);
                pclGestorMisc->setNrDocumento(szAux);
    
                GETTREE(szAux, DNFiltros, "nrConta", 0, NOBRIGATORIO, "nrConta"); ULOG("nrConta[%s]", szAux);
                pclGestorMisc->setCdConta(szAux);
            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtros inexistente!");



            pXmlG->createTag("ListasVO");
            pXmlG->createTag("Lista");
            pXmlG->createTag("Disponivel");
    

            if(strlen(pclGestorMisc->getCdConta()) > 0)
            {
                bExiste = pclGestorMisc->buscaGestorMiscContasCount();

                while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_CONTAS_)) != NULL)
                {
                    sprintf(szAux, "%s|%d", ptGestorMisc->szIdConta, bExiste?1:0);

                    pXmlG->createTag("It");
                    pXmlG->addItem("id", szAux);
                    pXmlG->addItem("ds", ptGestorMisc->szCdConta);
                    pXmlG->closeTag(); //It
                }
            }
            else if(strlen(pclGestorMisc->getNrDocumento()) > 0)
            {
                bExiste = pclGestorMisc->buscaGestorMiscCNPJCount();

                while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_CNPJ_)) != NULL)
                {
                    sprintf(szAux, "%s|%d", ptGestorMisc->szIdConta, bExiste?1:0);

                    pXmlG->createTag("It");
                    pXmlG->addItem("id", szAux);
                    pXmlG->addItem("ds", ptGestorMisc->szCdConta);
                    pXmlG->closeTag(); //It
                }
            }
            else
                throw new TuxBasicSvcException("13E0001", "Pesquisa Invalida!");

            pXmlG->closeTag(); //Disponivel
            pXmlG->closeTag(); //Lista
            pXmlG->closeTag(); //ListasVO

        }
        else if(!strcmp(szTpOperacao, "pesquisarDadosGestor"))
        {
            if((DNFiltros = walkDOM(pDnode, "Filtros", 0)) != NULL)
            {
                GETTREE(szAux, DNFiltros, "nrCPF", 0, OBRIGATORIO, "nrCPF"); ULOG("nrCPF[%s]", szAux);
                pclGestorConta->setIdNrCPF(szAux);
            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtros inexistente!");


            if((pclGestorConta->buscaGestorConta()) == false)
            {
                sprintf(szAux, "Nao ha idNrCPF [%s] Pesquisado", pclGestorConta->getIdNrCPF());
                throw new TuxBasicSvcException("13E0001", szAux);
            }

            pXmlG->createTag("GestorVO");
            pXmlG->addItem("nrCPF", pclGestorConta->getIdNrCPF());
            pXmlG->addItem("nmPrimeiro", pclGestorConta->getNmNome());
            pXmlG->addItem("nmMeio", pclGestorConta->getNmNomeMeio());
            pXmlG->addItem("nmUltimo", pclGestorConta->getNmSobreNome());
            pXmlG->addItem("nmCargo", pclGestorConta->getNmCargo());
            pXmlG->addItem("tpGestor", pclGestorConta->getDsTipoGestor());
            pXmlG->addItem("nmEmail", pclGestorConta->getDsEmail());
            pXmlG->addItem("dtAlteracao", pclGestorConta->getDtUltimaAlteracao());

            pclGestorMisc->setIdNrCPF(pclGestorConta->getIdNrCPF());
            while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_BUSCA_TELEFONE)) != NULL)
            {
                pXmlG->createTag("TelefoneVO");
                    pXmlG->addItem("tpTelefone", ptGestorMisc->szDsTipoComunicacao);
                    pXmlG->addItem("nrDdd", ptGestorMisc->szCdAreaRegistro);
                    pXmlG->addItem("nrTelefone", ptGestorMisc->szIdNrLinha);
                    pXmlG->addItem("nrRamal", ptGestorMisc->szNrRamal);
                pXmlG->closeTag(); //TelefoneVO
            }


            while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_BUSCA_ENDERECO)) != NULL)
            {
                pXmlG->createTag("EnderecoVO");
                    pXmlG->addItem("nmLogradouro", ptGestorMisc->szNmLogradouro);
                    pXmlG->addItem("nrLogradouro", ptGestorMisc->szNrEndereco);
                    pXmlG->addItem("nmComplemento", ptGestorMisc->szNmEnderecoComplemento);
                    pXmlG->addItem("nmBairro", ptGestorMisc->szNmBairro);
                    pXmlG->addItem("nmMunicipio", ptGestorMisc->szNmCidade);
                    pXmlG->addItem("idUF", ptGestorMisc->szIdUF);
                    pXmlG->addItem("nrCEP", ptGestorMisc->szNrCEP);
                pXmlG->closeTag(); //EnderecoVO
            }

            pXmlG->closeTag(); //GestorVO

            pXmlG->createTag("ListasVO");
            pXmlG->createTag("Lista");
            pXmlG->createTag("Selecionado");

            while((ptGestorMisc = pclGestorMisc->buscaGestorMisc(ID_BUSCA_CONTA)) != NULL)
            {
                pXmlG->createTag("It");
                pXmlG->addItem("id", ptGestorMisc->szIdConta);
                pXmlG->addItem("ds", ptGestorMisc->szCdConta);
                pXmlG->closeTag(); //It
            }

            pXmlG->closeTag(); //Selecionado
            pXmlG->closeTag(); //Lista
            pXmlG->closeTag(); //ListasVO

        }
        else
            throw new TuxBasicSvcException("13E0001", "Tipo de operacao invalido!");


        pXmlG->closeTag(); //GestorContasVO

    }
    catch(...)
    {
        ULOG("Exception!");
        if(pclGestorMisc) delete pclGestorMisc;
        if(pclGestorConta) delete pclGestorConta;
        ULOG_END("implGETGESTORCONT::Execute");
        throw;
    }

    ULOG("Normal");
    if(pclGestorMisc) delete pclGestorMisc;
    if(pclGestorConta) delete pclGestorConta;

    ULOG_END("implGETGESTORCONT::Execute");
    setStatusCode("13I0000", "Sucesso");
}
