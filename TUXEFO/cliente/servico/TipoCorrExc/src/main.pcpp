/*
 * Serviço de cadastro básico de tipo de correspondencia
 * Versão inicial, 19/05/2004
 */

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/TipoCorrespondencia.h";

#include "../include/TipoCorrespondenciaExclui.h"
#include "../../negocio/clienteCmm/include/Messages.h"
#include <tuxfw.h>

DECLARE_TUXEDO_SERVICE(TipoCorrExc);

void implTipoCorrExc::Execute(DOMNode* dnode, XMLGen* xml_g) {

    CTipoCorrespondencia oTpoCorr;
    char* pcIdTpoCorr = (char *)malloc(sizeof(char));
    int iIdTpoCorr;

    ULOG_START( "implTipoCorrExc::Execute()" );
    try{
         // Navega o XML e recupera as informacoes obrigatorias
         pcIdTpoCorr = walkTree(dnode, XML_IN_ID_TIPO, 0);
         if (pcIdTpoCorr == NULL) {
             ERROR(NRO_TP_CORR_ID_NE);
             TAG_INEXISTENTE(XML_IN_ID_TIPO);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if (!*pcIdTpoCorr) {
             ERROR(NRO_TP_CORR_ID_VV);
             TAG_VALOR_VAZIO(XML_IN_ID_TIPO);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         if ((iIdTpoCorr = atoi(pcIdTpoCorr)) <= 0) {
             ERROR(NRO_TP_CORR_ID_VI);
             TAG_VALOR_INVALIDO(XML_IN_ID_TIPO);
             throw new TuxBasicSvcException(sNrMsg, sMsg);
         }
         
         // Monta o objeto de TipoCorrespondencia
         oTpoCorr.setIdTipoCorrespondencia(iIdTpoCorr);

         // Exclui o objeto no banco de dados
         if (oTpoCorr.checaExclusaoPossivel())
             xml_g->addItem(XML_OUT_MENSAGEM, XML_VAL_REMOCAO_NOK);
         else
             oTpoCorr.exclui();

        //Liberando memoria alocada
        free(pcIdTpoCorr);
    }catch(...){
        throw;
    }

    ULOG_END( "implTipoCorrExc::Execute()" );

    // Execução OK.
    INFORMATION(NRO_OK);
    setStatusCode(sNrMsg, MSG_OK);
}

