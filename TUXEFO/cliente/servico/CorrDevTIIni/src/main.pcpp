/*
 * Serviço de Correspondencia devolvida - Inicial da TELA INICIAL
 * Versão inicial, 02/07/2004
 */

//*
//* Review:
//*
//* Task force to seek potential memory leaks and exception errors - March,2005 - Cassio

//EXEC SQL INCLUDE SQLCA;

#include "../include/CorrDevTIIni.h"

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"
#include <tuxfw.h>

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/StatusCorrespondencia.h";

DECLARE_TUXEDO_SERVICE(CorrDevTIIni);

void implCorrDevTIIni::Execute(DOMNode* dnode, XMLGen* xml_g) {

	CStatusCorrespondencia* poStatCorr;
	int nroReg = 0;
	int iAux = 0;

    ULOG_START( "implCorrDevTIIni::Execute()" );

	// Cria o XML com os dados da correpondencia
	xml_g->createTag(XML_OUT_ROOT);
	xml_g->addProp(XML_OUT_PROP_XMLNS,XML_OUT_PROP_XMLNS_VALUE);

	// Monta lista de status de correspondencia
	poStatCorr = CStatusCorrespondencia::lista(&nroReg);
	for (iAux = 0; iAux < nroReg; iAux++) {
		if (poStatCorr[iAux].getInDisponibilidade()) {
			xml_g->createTag(XML_OUT_STAT_CORR);
			xml_g->addItem(XML_OUT_ID_STATUS, poStatCorr[iAux].getIdStatusCorrespondencia());
			xml_g->addItem(XML_OUT_DS_STATUS, rtrim(poStatCorr[iAux].getDsStatus()));
			xml_g->closeTag();
		}
	}

	xml_g->closeTag();

	// Libera a memória ocupada
	free(poStatCorr);

	// Execução OK.
	INFORMATION(NRO_OK);
    ULOG_END( "implCorrDevTIIni::Execute()" );
	setStatusCode(sNrMsg, MSG_OK);
}
