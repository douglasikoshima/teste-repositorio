#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include <tuxfw.h>
#include "../../negocio/clienteCmm/include/Exception.h"

#include "../include/AbaGeral.h"

struct stAtendimento
{
    char idLinhaTelefonica[256];
    char nrLinha[256];
    int  idTipoLinha;
};

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classUsuario.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classPlanoServicoLinha.h";
EXEC SQL INCLUDE "../../negocio/clienteCmm/include/classLinhaTelefonica.h";

//
// Prototipos
char *ObtemValorTag(char *pXml, char *pTag);
void GetInformacoesAtendimento(int idAtendimentoPrm, stAtendimento *pAtd );
void GetTipoLinha(int idTipoLinhaPrm, char * dsTipoLinhaPrm );

DECLARE_TUXEDO_SERVICE(AbaGeral);

void implAbaGeral::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    char *pParam=NULL;
    int iIdTipoLinha=0;
    char szIdLinhaFiltro[LEN_NUMBER + LEN_EOS];
    char szNrLinha[LEN_NRLINHA + LEN_EOS];

    int iNroReg=0;
    int iAux;

    char *pRetorno=NULL;
    char *pStatusCode=NULL;

    XercesDOMParser *pParserFidelizacao=NULL;
    MemBufInputSource *pMemBufFidelizacao=NULL;
    DOMNode *pDocFidelizacao=NULL;
    TuxRemoteService* remoteServiceFidelizacao=NULL;
    TuxMessage* inputMessageFidelizacao=NULL;

    XMLGen xmlDetalheLinha;

    // XercesDOMParser *pParser=NULL;
    // MemBufInputSource *pMemBuf=NULL;
    const char *pMemBufId = "inputInfo";
    // TuxHelper tuxhp;

    TuxRemoteService *remoteService=NULL;
    TuxMessage *inputMessage=NULL;
    // DOMNode* pDoc;
    char *ret=NULL;
    char *pPointer=NULL;


    //
    // Alteracao para campos dependentes. OS 566
    //
    int  idAtendimento;
    char dsOperacao[64];
    stAtendimento pAtd;
    char dsTipoLinha[256];
    dsTipoLinha[0] = 0x0;
    //

    ULOG_START( "implAbaGeral::Execute()" );
    
    try {

        //
        // Alteracao para campos dependentes. OS 566
        //
        dsOperacao[0] = 0x0;
        pParam = walkTree(pDnode, "idProcesso", 0); ULOG("idProcesso[%s]", pParam ? pParam : "...NULL..");
        idAtendimento=atoi(pParam);
        if(pParam) XMLString::release(&pParam);
        ULOG( "Obteve idAtendimento [%d]",idAtendimento );

        pParam = walkTree(pDnode, "dsOperacao", 0); ULOG("dsOperacao[%s]", pParam ? pParam : "...NULL..");
        if(pParam)
        {
            strcpy(dsOperacao, pParam);
            XMLString::release(&pParam);
        }
        ULOG( "Obteve dsOperacao [%s]",dsOperacao );

        if(!strcmp(dsOperacao,"dadosLinhaVOProcesso"))
        {
            GetInformacoesAtendimento( idAtendimento, &pAtd );

            iIdTipoLinha = pAtd.idTipoLinha;
            /* verifica os idtipolinha */
			/* Luiz - 20130319 - iIdTipoLinha validation is no longer needed
            if(iIdTipoLinha != 1 && iIdTipoLinha != 2 && iIdTipoLinha != 5 && iIdTipoLinha != 6 && iIdTipoLinha != 4 && iIdTipoLinha != 7) {
                throw new TuxBasicSvcException("13E1313", "IdTipoLinha diferente de 1(pos) 2(pre) 5(poschip) 6(prechip) 4(Controle CDMA) 7(Controle GSM)");
            }			
			*/

            strcpy(szIdLinhaFiltro, (char *)pAtd.idLinhaTelefonica);
            strcpy(szNrLinha, (char *)pAtd.nrLinha);
        }
        else
        {
            // referente a idTipoLinha
            pParam = walkTree(pDnode, "idTipoLinha", 0); ULOG("idTipoLinha[%s]", pParam ? pParam : "...NULL..");
            if(!pParam) {
                ERROR(NRO_ID_TIPOLINHA_NE);
                TAG_INEXISTENTE("idTipoLinha");
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            } else if(!*pParam) {
                ERROR(NRO_ID_TIPOLINHA_VV);
                TAG_VALOR_VAZIO("idTipoLinha");
                if(pParam) XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            iIdTipoLinha=atoi(pParam);
            if(pParam) XMLString::release(&pParam);


            /* verifica os idtipolinha */
			/* Luiz - 20130319 - iIdTipoLinha validation is no longer needed
            if(iIdTipoLinha != 1 && iIdTipoLinha != 2 && iIdTipoLinha != 5 && iIdTipoLinha != 6 && iIdTipoLinha != 4 && iIdTipoLinha != 7) {
                throw new TuxBasicSvcException("13E1313", "IdTipoLinha diferente de 1(pos) 2(pre) 5(poschip) 6(prechip) 4(Controle CDMA) 7(Controle GSM)");
            }
			*/


            /* referente a idLinhaFiltro */
            pParam = walkTree(pDnode, "idLinhaFiltro", 0); ULOG("idLinhaFiltro[%s]", pParam ? pParam : "...NULL..");
            if(!pParam) {
                ERROR(NRO_ID_LINHA_NE);
                TAG_INEXISTENTE("idLinhaFiltro");
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            } else if(!*pParam) {
                ERROR(NRO_ID_LINHA_VV);
                TAG_VALOR_VAZIO("idLinhaFiltro");
                XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            } else if(!IsNumeric(pParam)) {
                ERROR(NRO_ID_LINHA_VI);
                TAG_VALOR_INVALIDO("idLinhaFiltro");
                XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            strcpy(szIdLinhaFiltro, pParam);
            if(pParam) XMLString::release(&pParam);
    
    
            /* referente a nrLinha */
            pParam = walkTree(pDnode, "nrLinha", 0); ULOG("nrLinha[%s]", pParam ? pParam : "...NULL..");
            if(!pParam) {
                ERROR(NRO_NR_LINHA_NE);
                TAG_INEXISTENTE("nrLinha");
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            } else if(!*pParam) {
                ERROR(NRO_NR_LINHA_VV);
                TAG_VALOR_VAZIO("nrLinha");
                XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            } else if(!IsNumeric(pParam)) {
                ERROR(NRO_NR_LINHA_VI);
                TAG_VALOR_INVALIDO("nrLinha");
                XMLString::release(&pParam);
                throw new TuxBasicSvcException(sNrMsg, sMsg);
            }
            strcpy(szNrLinha, pParam);
            if(pParam) XMLString::release(&pParam);
        }

    
        pXmlG->createTag("LupaLinhaVO");
        pXmlG->addProp("xmlns", "cliente.fo.vivo.com.br/vo");
        pXmlG->createTag("DadosLupaLinha");

    
        bool bFlagGetDetalheLinha=false;
        try {
            xmlDetalheLinha.addItem("ProxyLinha", szNrLinha);
            if (iIdTipoLinha == 1 || iIdTipoLinha == 5)
            {
                xmlDetalheLinha.addItem("ProxyOperacao", "getDetalheLinha");
            }
            else if(iIdTipoLinha == 2 || iIdTipoLinha == 6 || iIdTipoLinha == 4 || iIdTipoLinha == 7)
            {
                xmlDetalheLinha.addItem("ProxyOperacao", "getDetalheAparelho");
            }

            xmlDetalheLinha.addItem("idlinhasistemaorigem", CLinhaTelefonica::getIdLinhaSisOrigem(szIdLinhaFiltro));
            xmlDetalheLinha.addItem("usuario", "FO");
    
            remoteService = new TuxRemoteService();
            inputMessage = new TuxMessage();
            inputMessage->setUser(getUser());
            inputMessage->setService("LupaLinhaIni");
            inputMessage->setMessageBody(&xmlDetalheLinha);
    
            if(iIdTipoLinha == 1 || iIdTipoLinha == 5)
            {
                remoteService->setServiceName("DTUXATLYSBE"); // pos (1) poschip (5)
            }
            else if(iIdTipoLinha == 2 || iIdTipoLinha == 6 || iIdTipoLinha == 4 || iIdTipoLinha == 7)
            {
                remoteService->setServiceName("DTUXNGINBE"); // pre (2) prechip (6) ControleCDMA(4) ControleGSM(7)
            }
    
            remoteService->setInputMessage(inputMessage);
    
            if(remoteService->remoteCall() != TUXFWRET_OK)
            {
                GetTipoLinha(iIdTipoLinha,dsTipoLinha);
                pXmlG->addItem("dsTecnologia",dsTipoLinha);
                pXmlG->addItem("erro", "Detalhe linha fora");
            }
            else
            {
                pStatusCode = remoteService->getOutputMessage()->getStatusCode(); ULOG("pStatusCode[%s]", pStatusCode ? pStatusCode : "...NULL...");
                if(pStatusCode == NULL) {
                    GetTipoLinha(iIdTipoLinha,dsTipoLinha);
                    pXmlG->addItem("dsTecnologia",dsTipoLinha);
                    pXmlG->addItem("erro", "Detalhe linha fora.");
                }
                else if((strlen(pStatusCode) < 3) || (pStatusCode[2] != 'I')) {
                    GetTipoLinha(iIdTipoLinha,dsTipoLinha);
                    pXmlG->addItem("dsTecnologia",dsTipoLinha);
                    pXmlG->addItem("erro", "Detalhe linha fora..");
                }
                else
                {   

                    ret = remoteService->getOutputMessage()->getMessageBody(); ULOG("ret[%s]", ret);


                    // pParser =  new XercesDOMParser; ULOG("pParser(%p)", pParser);
                    // pMemBuf =  new MemBufInputSource( (const XMLByte*)ret, strlen(ret), pMemBufId); ULOG("pMemBuf(%p)", pMemBuf);

                    //if(pParser == NULL || pMemBuf == NULL) {
                        //throw new TuxBasicSvcException("13E1313", "Parser ERROR <pParser pMemBuf>");
                    // }
    
                    // pParser->parse(*pMemBuf);
                    // pDoc = pParser->getDocument();
                    //ULOG("pDoc(%p)", pDoc);

                    if(iIdTipoLinha == 1 || iIdTipoLinha == 5)
                    {
                        ULOG("local Z1.RSR");

                        pPointer = ObtemValorTag(ret, "modelo"); ULOG("modelo[%s]", pPointer ? pPointer : "...NULL..");
                        // pParam = tuxhp.walkTree(pDoc, "modelo", 0); ULOG("modelo[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("modelo", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "descricao"); ULOG("descricao[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "descricao", 0); ULOG("descricao[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("descricao", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "marca"); ULOG("marca[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "marca", 0); ULOG("marca[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("marca", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "esn"); ULOG("esn[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "esn", 0); ULOG("esn[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("esn", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "dsTecnologia"); ULOG("dsTecnologia[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "dsTecnologia", 0); ULOG("dsTecnologia[%s]", pParam ? pParam : "...NULL..");
                        if ( !pPointer )
                        {
                            GetTipoLinha(iIdTipoLinha,dsTipoLinha);
                        }
                        pXmlG->addItem("dsTecnologia", pPointer?pPointer:dsTipoLinha); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "dsMultaContrato"); ULOG("dsMultaContrato[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "dsMultaContrato", 0); ULOG("dsMultaContrato[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("dsMultaContrato", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
        
                        pPointer = ObtemValorTag(ret, "ContratoFidelizacao"); ULOG("ContratoFidelizacao[%s]", pPointer ? pPointer : "...NULL..");
                        //pParam = tuxhp.walkTree(pDoc, "ContratoFidelizacao", 0); ULOG("ContratoFidelizacao[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("ContratoFidelizacao", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);
                    }
                    else if(iIdTipoLinha == 2 || iIdTipoLinha == 6 || iIdTipoLinha == 4 || iIdTipoLinha == 7)
                    {
                        ULOG("local Z2.RSR");
                        pPointer = ObtemValorTag(ret, "ESNIMEI"); ULOG("ESNIMEI[%s]", pPointer ? pPointer : "...NULL..");
                        // pParam = tuxhp.walkTree(pDoc, "ESNIMEI", 0); ULOG("ESNIMEI[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("esn", pPointer?pPointer:" "); // if(pParam) XMLString::release(&pParam);

                        pPointer = ObtemValorTag(ret, "codigoModelo"); ULOG("codigoModelo[%s]", pPointer ? pPointer : "...NULL..");
                        // pParam = tuxhp.walkTree(pDoc, "codigoModelo", 0); ULOG("codigoModelo[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("modelo", pPointer?pPointer:" "); //if(pParam) XMLString::release(&pParam);

                        pPointer = ObtemValorTag(ret, "descricaoModelo"); ULOG("descricaoModelo[%s]", pPointer ? pPointer : "...NULL..");
                        // pParam = tuxhp.walkTree(pDoc, "descricaoModelo", 0); ULOG("descricaoModelo[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("descricao", pPointer?pPointer:" "); // if(pParam) XMLString::release(&pParam);

                        pPointer = ObtemValorTag(ret, "descricaoMarca"); ULOG("descricaoMarca[%s]", pPointer ? pPointer : "...NULL..");
                        // pParam = tuxhp.walkTree(pDoc, "descricaoMarca", 0); ULOG("descricaoMarca[%s]", pParam ? pParam : "...NULL..");
                        pXmlG->addItem("marca", pPointer?pPointer:" "); // if(pParam) XMLString::release(&pParam);
                    }
        
                    ULOG("local Z3.RSR");
    
                    bFlagGetDetalheLinha=true;
                    bool bFlagErro = false;
    
                    XMLGen oEntrada;
                    oEntrada.addItem("ProxyLinha","");
                    oEntrada.addItem("ProxyOperacao","getFidelizacao");
                    oEntrada.addItem("idlinhasistemaorigem", CLinhaTelefonica::getIdLinhaSisOrigem(szIdLinhaFiltro));
    
                    remoteServiceFidelizacao = new TuxRemoteService();
                    inputMessageFidelizacao = new TuxMessage();
                    inputMessageFidelizacao->setUser(getUser());
                    inputMessageFidelizacao->setService("DTUXATLYSBE");
                    inputMessageFidelizacao->setMessageBody(&oEntrada);
    
                    ULOG("local1");
    
                    remoteServiceFidelizacao->setServiceName("DTUXATLYSBE");
                    remoteServiceFidelizacao->setInputMessage(inputMessageFidelizacao);
                    ULOG("local1.1");
					//correcao urgente para problema de homologacao =>smp

					if(iIdTipoLinha == 1 || iIdTipoLinha == 5) {
						if(remoteServiceFidelizacao->remoteCall() != TUXFWRET_OK){
							ULOG("local2");
							bFlagErro=true;
						}
                    }
    
                    ULOG("local3");
    
                    if(iIdTipoLinha == 1 || iIdTipoLinha == 5) {
                        if(bFlagErro == false) {
                            pStatusCode = remoteServiceFidelizacao->getOutputMessage()->getStatusCode(); ULOG("pStatusCode[%s]", pStatusCode ? pStatusCode : "...NULL...");
                            if(pStatusCode == NULL) {
                                bFlagErro=true;
                            }
                            else if((strlen(pStatusCode) >= 3) && (pStatusCode[2] == 'I')) {
            
                                pRetorno = remoteServiceFidelizacao->getOutputMessage()->getMessageBody();
                                ULOG("pRetorno[%s]", pRetorno ? pRetorno : "...NULL...");
            
                                pParserFidelizacao = new XercesDOMParser;
                                pMemBufFidelizacao = new MemBufInputSource((const XMLByte*)pRetorno, strlen(pRetorno), pMemBufId);
            
                                if(pParserFidelizacao && pMemBufFidelizacao) {
                                    ULOG("local A");
                                    pParserFidelizacao->parse(*pMemBufFidelizacao);
                                    pDocFidelizacao = pParserFidelizacao->getDocument(); ULOG("pDocFidelizacao(%p)", pDocFidelizacao);
            
                                    pParam=walkTree(pDocFidelizacao, "contrato", 0 ); ULOG("contrato[%s]", pParam ? pParam : "...NULL...");
                                    pXmlG->addItem("dsTipoContrato", pParam?pParam:"Indisponivel");
                                    if(pParam) XMLString::release(&pParam);
        
                                    pParam=walkTree(pDocFidelizacao, "dtFimContrato", 0 ); ULOG("dtFimContrato[%s]", pParam ? pParam : "...NULL...");
                                    pXmlG->addItem("dtTerminoContrato", pParam?pParam:"Indisponivel");
                                    if(pParam) XMLString::release(&pParam);
        
                                }
                                else
                                    bFlagErro=true;
                            }
                            else
                                bFlagErro=true;
                        }
                        else
                        {
                            pXmlG->addItem("dsTipoContrato", "Indisponivel");
                            pXmlG->addItem("dtTerminoContrato", "Indisponivel");
                        }
                    }
                }
            }
            ULOG("localA");
            if(pDocFidelizacao) free(pDocFidelizacao);

            // if(pParser) delete(pParser);
            // if(pMemBuf) delete(pMemBuf);

            if(pRetorno) free(pRetorno);
            if(pStatusCode) free(pStatusCode);
    
            if(remoteServiceFidelizacao) delete remoteServiceFidelizacao;
            if(inputMessageFidelizacao) delete inputMessageFidelizacao;
    
            if(pParserFidelizacao) delete pParserFidelizacao;
            if(pMemBufFidelizacao) delete pMemBufFidelizacao;
    
            if (remoteService) delete remoteService;
            if (inputMessage) delete inputMessage;
    
        }
        catch(...)
        {
            ULOG("localB");
            if(pDocFidelizacao) free(pDocFidelizacao);

            // if(pParser) delete(pParser);
            // if(pMemBuf) delete(pMemBuf);

            if(pRetorno) free(pRetorno);
            if(pStatusCode) free(pStatusCode);
        
            if(remoteServiceFidelizacao) delete remoteServiceFidelizacao;
            if(inputMessageFidelizacao) delete inputMessageFidelizacao;
        
            if(pParserFidelizacao) delete pParserFidelizacao;
            if(pMemBufFidelizacao) delete pMemBufFidelizacao;
        
            if (remoteService) delete remoteService;
            if (inputMessage) delete inputMessage;
        
            if(bFlagGetDetalheLinha == false)
                pXmlG->addItem("erro", "Detalhe linha fora");

            if(iIdTipoLinha == 1 || iIdTipoLinha == 5) {
                pXmlG->addItem("dsTipoContrato", "Indisponivel");
                pXmlG->addItem("dtTerminoContrato", "Indisponivel");
            }
        }
    
        ULOG("localC");
    
        CUsuario oUsu(szIdLinhaFiltro);
        pXmlG->createTag("UsuarioLinhaVO");
            pXmlG->addItem("idPessoa", oUsu.getIdPessoa());
            pXmlG->addItem("nmUsuario", oUsu.getNmPessoa());
            pXmlG->addItem("idDocumento", oUsu.getIdDocumento());
            pXmlG->addItem("dsTipoDocumento", oUsu.getDsTipoDocumento());
            pXmlG->addItem("nrDocumento", oUsu.getNrDocumento());
            pXmlG->addItem("dsTipoContato", oUsu.getDsTipoComunicacao());
            pXmlG->addItem("nrContato", oUsu.getDsContato());
            pXmlG->addItem("vlRentabilidade", oUsu.getVlRentabilidade());
            pXmlG->addItem("dsCargo", oUsu.getDsCargoContato());
        pXmlG->closeTag();
        pXmlG->addItem("inDivulgaNumero", oUsu .getInDivulgacaoNrLinha());
        pXmlG->addItem("dtUltimaAtualizacao", oUsu.getDtUltimaAlteracao());
    
        CPlanoServicoLinha* oPSL;
        oPSL = CPlanoServicoLinha::RecuperarTodosServico(&iNroReg, szIdLinhaFiltro);
        for(iAux=0; iAux < iNroReg; iAux++) {
            pXmlG->createTag("ServicosVO");
                pXmlG->addItem("idServico", oPSL[iAux].getIdServicoLinha());
                pXmlG->addItem("inPlanoServico", oPSL[iAux].getInPlano());
                pXmlG->addItem("idPacote", oPSL[iAux].getIdPacote());
                pXmlG->addItem("nmServico", oPSL[iAux].getNmServico());
                pXmlG->addItem("dtExpiracao", oPSL[iAux].getDataFinal());
            pXmlG->closeTag();
        }
    
        pXmlG->addItem("idTipoLinha", CLinhaTelefonica::getIdTipoLinha(szIdLinhaFiltro));
        pXmlG->closeTag();
        pXmlG->closeTag();
    
        free(oPSL);
    
    }
    catch(...)
    {
        ULOG("localC2");
        throw;
    }

    INFORMATION(NRO_OK);
    ULOG_END( "implAbaGeral::Execute()" );
    setStatusCode(sNrMsg, MSG_OK);
}

/************************************************************************************************************/
char *ObtemValorTag(char *pXml, char *pTag)
{
    static char szValue[255 + 1];
    char szXmlAux[2000 + 1];
    char *pTok;
    int iFlag=0;

    /* copia string a ser analisada para buffer local (strtok altera o ponteiro de entrada) */
    strcpy(szXmlAux, pXml);

    for(pTok = strtok(szXmlAux, "<>"); pTok != NULL; pTok = strtok(NULL, "<>")) {
        if(iFlag) {
            strcpy(szValue, pTok);
            iFlag=0;

            return szValue;
        }

        if(!strcmp(pTag, pTok)) {
            iFlag=1;
        }
    }

    return NULL;
}


//
// Implementacao para carregar as informacoes: idLinhaFiltro, nrLinha e idTipoLinha.
// OS 566 - Campos Dependentes
//
void GetInformacoesAtendimento(int idAtendimentoPrm, stAtendimento *pAtd )
{
	ULOG_START("GetInformacoesAtendimento()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        int idAtendimento = idAtendimentoPrm;
        VARCHAR idLinhaTelefonica[256];
        short i_idLinhaTelefonica = -1;
        int idTipoLinha;
        short i_idTipoLinha = -1;
        VARCHAR nrLinha[256];
        short i_nrLinha = -1;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO errorSql;

	// Recupera o ID se a linha for da pessoa.
	EXEC SQL
        SELECT
           ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA IDLINHATELEFONICA,
           ATENDIMENTOPRIORIZACAO.IDTIPOLINHA IDTIPOLINHA,
           AREAREGISTRO.CDAREAREGISTRO || LINHABASE.NRLINHA NRLINHA 
        INTO
           :idLinhaTelefonica:i_idLinhaTelefonica ,
           :idTipoLinha:i_idTipoLinha ,
           :nrLinha:i_nrLinha
        FROM
           ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO ,
           LINHA.LINHABASE LINHABASE ,
           LINHA.LINHATELEFONICA LINHATELEFONICA ,
           APOIO.AREAREGISTRO AREAREGISTRO
        WHERE
           LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
        AND
           LINHATELEFONICA.IDLINHATELEFONICA = ATENDIMENTOPRIORIZACAO.IDLINHATELEFONICA
        AND
           AREAREGISTRO.IDAREAREGISTRO = LINHABASE.IDAREAREGISTRO
        AND
           ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = :idAtendimento
        AND ROWNUM < 2;

    CONVIND(idLinhaTelefonica, i_idLinhaTelefonica);
    CONVIND(nrLinha, i_nrLinha);
    strcpy(pAtd->idLinhaTelefonica, (char *)idLinhaTelefonica.arr);
    pAtd->idTipoLinha = idTipoLinha;
    strcpy(pAtd->nrLinha, (char*)nrLinha.arr);

    ULOG("Obteve idLinhaTelefonica[%s], idTipoLinha[%d], nrLinha[%s]",pAtd->idLinhaTelefonica, pAtd->idTipoLinha, pAtd->nrLinha);
        
	ULOG_END("GetInformacoesAtendimento()");
	return;

	errorSql:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("GetInformacoesAtendimento()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}



//
// Implementacao para carregar descricao do tipo de linha.
// OS 566 - Campos Dependentes
//
void GetTipoLinha(int idTipoLinhaPrm, char * dsTipoLinhaPrm )
{
	ULOG_START("GetTipoLinha()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        int idTipoLinha = idTipoLinhaPrm;
        VARCHAR nmTipoLinha[256];
        short i_nmTipoLinha = -1;
	EXEC SQL END DECLARE SECTION;

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO errorSql_Linha;

	// Recupera o ID se a linha for da pessoa.
	EXEC SQL
        SELECT
           DSTIPOLINHA
        INTO
           :nmTipoLinha:i_nmTipoLinha
        FROM
           APOIO.TIPOLINHA
        WHERE
           IDTIPOLINHA = :idTipoLinha;

    CONVIND(nmTipoLinha, i_nmTipoLinha);
    strcpy(dsTipoLinhaPrm, (char *)nmTipoLinha.arr);

    ULOG("Obteve dsTipoLinhaPrm[%s]",dsTipoLinhaPrm);
        
	ULOG_END("GetTipoLinha()");
	return;

	errorSql_Linha:
        ULOGE("ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
        ULOG_END("GetTipoLinha()");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

