#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>

#include <tuxfw.h>

#include "../../negocio/clienteCmm/include/Messages.h"
#include "../../negocio/clienteCmm/include/Funcoes.h"

#include "../include/SETGESTORCONT.h"
#include "../../negocio/clienteCmm/include/GestorConta.h"
#include "../../negocio/clienteCmm/include/GestorContaContato.h"
#include "../../negocio/clienteCmm/include/GestorContaPessoaConta.h"
#include "../../negocio/clienteCmm/include/GestorMisc.h"
#include "../../negocio/clienteCmm/include/ApoioTipoComunicacao.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "Global.h"
EXEC SQL END DECLARE SECTION;

DECLARE_TUXEDO_SERVICE(SETGESTORCONT);

void implSETGESTORCONT::Execute(DOMNode *pDnode, XMLGen *pXmlG)
{
    CGestorConta *pclGestorConta=NULL;
    CGestorContaContato *pclGestorContaContato=NULL;
    CGestorContaPessoaConta *pclGestorContaPessoaConta=NULL;
    CGestorMiscpc *pclGestorMisc=NULL;
    CApoioTipoComunicacao *pclApoioTipoComunicacao=NULL;

    DOMNode *DNTelefoneVO=NULL;
    DOMNode *DNEnderecoVO=NULL;
    DOMNode *DNGestorVO=NULL;
    DOMNode *DNListasVO=NULL;
    DOMNode *DNLista=NULL;
    DOMNode *DNSelecionado=NULL;
    DOMNode *DNIt=NULL;
    DOMNode *DNFiltros=NULL;

    char szSelect[25 + 1];
    char szTpOperacao[25 + 1];
    char szAux[512 + 1];
    int iIndex;

    ULOG_START("implSETGESTORCONT::Execute");

    try
    {
        pclGestorConta = new CGestorConta;
        pclGestorContaContato = new CGestorContaContato;
        pclGestorContaPessoaConta = new CGestorContaPessoaConta;
        pclGestorMisc = new CGestorMiscpc;
        pclApoioTipoComunicacao = new CApoioTipoComunicacao;


        GETTREE(szTpOperacao, pDnode, "tpOperacao", 0, OBRIGATORIO, "tpOperacao"); ULOG("tpOperacao[%s]", szTpOperacao);


        if(!strcmp(szTpOperacao, "gravarGestor") || !strcmp(szTpOperacao, "alterarGestor"))
        {
            if((DNGestorVO = walkDOM(pDnode, "GestorVO", 0)) != NULL)
            {
                ULOG("GestorVO>>");
                GETTREE(szAux, DNGestorVO, "nrCPF", 0, NOBRIGATORIO, "nrCPF"); ULOG("nrCPF[%s]", szAux);
                pclGestorConta->setIdNrCPF(szAux);

                /* se for alteracao, apaga tudo e insere novamente */
                if(!strcmp(szTpOperacao, "alterarGestor"))
                {
                    pclGestorContaContato->setIdNrCPF(pclGestorConta->getIdNrCPF());
                    pclGestorContaPessoaConta->setIdNrCPF(pclGestorConta->getIdNrCPF());
    
                    pclGestorContaPessoaConta->apagaGestorContaPessoaConta();
                    pclGestorContaContato->apagaGestorContaContato();
                    pclGestorConta->apagaGestorConta();
                }


                GETTREE(szAux, DNGestorVO, "nmPrimeiro", 0, OBRIGATORIO, "nmPrimeiro"); ULOG("nmPrimeiro[%s]", szAux);
                pclGestorConta->setNmNome(szAux);

                GETTREE(szAux, DNGestorVO, "nmMeio", 0, NOBRIGATORIO, "nmMeio"); ULOG("nmMeio[%s]", szAux);
                pclGestorConta->setNmNomeMeio(szAux);

                GETTREE(szAux, DNGestorVO, "nmUltimo", 0, NOBRIGATORIO, "nmUltimo"); ULOG("nmUltimo[%s]", szAux);
                pclGestorConta->setNmSobreNome(szAux);

                GETTREE(szAux, DNGestorVO, "tpGestor", 0, OBRIGATORIO, "tpGestor"); ULOG("tpGestor[%s]", szAux);
                pclGestorConta->setDsTipoGestor(szAux);

                GETTREE(szAux, DNGestorVO, "nmCargo", 0, NOBRIGATORIO, "nmCargo"); ULOG("nmCargo[%s]", szAux);
                pclGestorConta->setNmCargo(szAux);

                GETTREE(szAux, DNGestorVO, "nmEmail", 0, NOBRIGATORIO, "nmEmail"); ULOG("nmEmail[%s]", szAux);
                pclGestorConta->setDsEmail(szAux);


                if((DNEnderecoVO = walkDOM(pDnode, "EnderecoVO", 0)) != NULL)
                {
                    ULOG("EnderecoVO>>");

                    GETTREE(szAux, DNEnderecoVO, "nmLogradouro", 0, OBRIGATORIO, "nmLogradouro"); ULOG("nmLogradouro[%s]", szAux);
                    pclGestorConta->setNmLogradouro(szAux);

                    GETTREE(szAux, DNEnderecoVO, "nrLogradouro", 0, OBRIGATORIO, "nrLogradouro"); ULOG("nrLogradouro[%s]", szAux);
                    pclGestorConta->setNrEndereco(szAux);

                    GETTREE(szAux, DNEnderecoVO, "nmComplemento", 0, NOBRIGATORIO, "nmComplemento"); ULOG("nmComplemento[%s]", szAux);
                    pclGestorConta->setNmEnderecoComplemento(szAux);

                    GETTREE(szAux, DNEnderecoVO, "nmBairro", 0, OBRIGATORIO, "nmBairro"); ULOG("nmBairro[%s]", szAux);
                    pclGestorConta->setNmBairro(szAux);

                    GETTREE(szAux, DNEnderecoVO, "nmMunicipio", 0, OBRIGATORIO, "nmMunicipio"); ULOG("nmMunicipio[%s]", szAux);
                    pclGestorConta->setNmCidade(szAux);

                    GETTREE(szAux, DNEnderecoVO, "idUF", 0, OBRIGATORIO, "idUF"); ULOG("idUF[%s]", szAux);
                    pclGestorConta->setIdUF(szAux);

                    GETTREE(szAux, DNEnderecoVO, "nrCEP", 0, OBRIGATORIO, "nrCEP"); ULOG("nrCEP[%s]", szAux);
                    pclGestorConta->setNrCEP(szAux);

                    ULOG("<<EnderecoVO");
                }
                else
                    throw new TuxBasicSvcException("13E0001", "Noh EnderecoVO inexistente!");


                pclGestorConta->setIdUsuarioAlteracao(getUser());
                pclGestorConta->insereGestorConta();


                if((DNListasVO = walkDOM(pDnode, "ListasVO", 0)) != NULL)
                {
                    ULOG("ListasVO>>");

                    if((DNLista = walkDOM(DNListasVO, "Lista", 0)) != NULL)
                    {
                        ULOG("Lista>>");

                        GETTREE(szSelect, DNLista, "nmSelect", 0, OBRIGATORIO, "nmSelect"); ULOG("nmSelect[%s]", szSelect);

                        if(!strcmp(szSelect, "contas"))
                        {
                            if((DNSelecionado = walkDOM(DNLista, "Selecionado", 0)) != NULL)
                            {
                                ULOG("Selecionado>>");

                                for(iIndex=0; (DNIt = walkDOM(DNSelecionado, "It", iIndex)) != NULL; iIndex++)
                                {
                                    ULOG("It>>");

                                    ULOG("iIndex(%d)", iIndex);
                                    pclGestorMisc->clearStruct();

                                    GETTREE(szAux, DNIt, "id", 0, OBRIGATORIO, "id"); ULOG("id[%s]", szAux);
                                    pclGestorMisc->setIdConta(szAux);

                                    if(pclGestorMisc->buscaIdPessoaConta() == false)
                                    {
                                        sprintf(szAux, "Nao ha idPessoaConta para idConta[%s] + nrConta[%s] Pesquisado", pclGestorMisc->getIdConta(), pclGestorMisc->getCdConta());
                                        throw new TuxBasicSvcException("13E0001", szAux);
                                    }

                                    pclGestorContaPessoaConta->clearStruct();
                                    pclGestorContaPessoaConta->setIdUsuarioAlteracao(getUser());
                                    pclGestorContaPessoaConta->setIdNrCPF(pclGestorConta->getIdNrCPF());
                                    pclGestorContaPessoaConta->setIdPessoaConta(pclGestorMisc->getIdPessoaConta());
                                    pclGestorContaPessoaConta->insereGestorContaPessoaConta();

                                    ULOG("<<It");

                                }
                                if(iIndex == 0)
                                    throw new TuxBasicSvcException("13E0001", "Noh It inexistente!");

                                ULOG("<<Selecionado");
                            }
                            else
                                throw new TuxBasicSvcException("13E0001", "Noh Selecionado inexistente!");
                        }
                        else
                            throw new TuxBasicSvcException("13E0001", "Valor de select invalido!");

                        ULOG("<<Lista");
                    }
                    else
                        throw new TuxBasicSvcException("13E0001", "Noh Lista inexistente!");

                    ULOG("<<ListasVO");
                }
                else
                    throw new TuxBasicSvcException("13E0001", "Noh ListasVO inexistente!");



                for(iIndex=0; (DNTelefoneVO = walkDOM(DNGestorVO, "TelefoneVO", iIndex)) != NULL; iIndex++)
                {
                    ULOG("TelefoneVO>> iIndex(%d)", iIndex);

                    pclGestorContaContato->clearStruct();

                    GETTREE(szAux, DNTelefoneVO, "tpTelefone", 0, OBRIGATORIO, "tpTelefone"); ULOG("tpTelefone[%s]", szAux);
                    pclApoioTipoComunicacao->setDsTipoComunicacao(szAux);
                    if(pclApoioTipoComunicacao->buscaTipoComunicacao() == false)
                    {
                        sprintf(szAux, "Nao ha IdTipoComunicacao para DsTipoComunicacao[%s]", pclApoioTipoComunicacao->getDsTipoComunicacao());
                        throw new TuxBasicSvcException("13E0000", szAux);
                    }
                    pclGestorContaContato->setIdTipoComunicacao(pclApoioTipoComunicacao->getIdTipoComunicacao());

                    GETTREE(szAux, DNTelefoneVO, "nrDdd", 0, OBRIGATORIO, "nrDdd"); ULOG("nrDdd[%s]", szAux);
                    pclGestorContaContato->setCdAreaRegistro(szAux);

                    GETTREE(szAux, DNTelefoneVO, "nrTelefone", 0, OBRIGATORIO, "nrTelefone"); ULOG("nrTelefone[%s]", szAux);
                    pclGestorContaContato->setIdNrLinha(szAux);

                    GETTREE(szAux, DNTelefoneVO, "nrRamal", 0, NOBRIGATORIO, "nrRamal"); ULOG("nrRamal[%s]", szAux);
                    pclGestorContaContato->setNrRamal(szAux);

                    pclGestorContaContato->setIdNrCPF(pclGestorConta->getIdNrCPF());
                    pclGestorContaContato->setIdUsuarioAlteracao(getUser());
                    pclGestorContaContato->insereGestorContaContato();

                    ULOG("<<TelefoneVO");
                }
                if(iIndex == 0)
                    throw new TuxBasicSvcException("13E0001", "Noh TelefoneVO inexistente!");

                ULOG("<<GestorVO");
            }
            else //if((DNGestorVO = walkDOM(pDnode, "GestorVO", 0)) != NULL)
                throw new TuxBasicSvcException("13E0001", "Noh GestorVO inexistente!");

        }
        else if(!strcmp(szTpOperacao, "excluirGestor"))
        {

            if((DNFiltros = walkDOM(pDnode, "Filtros", 0)) != NULL)
            {
                ULOG("Filtros>>");
                GETTREE(szAux, DNFiltros, "nrCPF", 0, OBRIGATORIO, "nrCPF"); ULOG("nrCPF[%s]", szAux);
                pclGestorConta->setIdNrCPF(szAux);
                pclGestorContaContato->setIdNrCPF(pclGestorConta->getIdNrCPF());
                pclGestorContaPessoaConta->setIdNrCPF(pclGestorConta->getIdNrCPF());

                pclGestorContaPessoaConta->apagaGestorContaPessoaConta();
                pclGestorContaContato->apagaGestorContaContato();
                pclGestorConta->apagaGestorConta();
                ULOG("<<Filtros");
            }
            else
                throw new TuxBasicSvcException("13E0001", "Noh Filtros inexistente!");

        }
        else
            throw new TuxBasicSvcException("13E0001", "Tipo de operacao invalido!");

    }
    catch(...)
    {
        ULOG("Exception!");
        if(pclGestorConta) delete pclGestorConta;
        if(pclGestorContaContato) delete pclGestorContaContato;
        if(pclGestorContaPessoaConta) delete pclGestorContaPessoaConta;
        if(pclGestorMisc) delete pclGestorMisc;
        if(pclApoioTipoComunicacao) delete pclApoioTipoComunicacao;
        ULOG_END("implSETGESTORCONT::Execute");
        throw;
    }

    ULOG("Normal");
    if(pclGestorConta) delete pclGestorConta;
    if(pclGestorContaContato) delete pclGestorContaContato;
    if(pclGestorContaPessoaConta) delete pclGestorContaPessoaConta;
    if(pclGestorMisc) delete pclGestorMisc;
    if(pclApoioTipoComunicacao) delete pclApoioTipoComunicacao;

    ULOG_END("implSETGESTORCONT::Execute");
    setStatusCode("13I0000", "Sucesso");
}
