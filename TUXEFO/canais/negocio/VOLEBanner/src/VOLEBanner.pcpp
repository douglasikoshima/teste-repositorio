
#undef SQLCA
#define SQLCA_NONE

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
 
EXEC SQL INCLUDE SQLCA;

char * rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim(char *pStr)
{
	int lInd = 0;

	if (pStr == NULL)
			return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char * trim(char *pStr){
	return ltrim(rtrim(pStr));		
}



void getBanners( char * sgUFPrm, XMLGen * xml_g )
{
    ULOG_START( "getBanners()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char sgUF[256];
       
       char idBannervole[43];
       char nmBannervole[256];
       char urlBannervole[256];
       char idAreaBannerVole[43];
       char idTipoBannerVole[43];
       char dsBannerVole[256];
       char ipBannerVole[128];
       char dtInicial[32];
       char dtFinal[32];
       char nrContador[256];

       short i_idBannervole = -1;
       short i_nmBannervole = -1;
       short i_urlBannervole = -1;
       short i_idAreaBannerVole = -1;
       short i_idTipoBannerVole = -1;
       short i_dsBannerVole = -1;
       short i_ipBannerVole = -1;
       short i_dtInicial = -1;
       short i_dtFinal = -1;
       short i_nrContador = -1;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( sgUF, sgUFPrm );
    ULOG( "sgUF  [%s]", sgUF );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL DECLARE csrBanner CURSOR FOR
    SELECT 
       banner.idbannervole, 
       banner.nmbannervole, 
       banner.urlbannervole, 
       banner.idareabannervole, 
       banner.idtipobannervole, 
       banner.dsbannervole, 
       banner.ipbannervole, 
       to_char( banner.dtinicial, 'DD/MM/YYYY HH24:MI:SS' ), 
       to_char( banner.dtfinal  , 'DD/MM/YYYY HH24:MI:SS' ), 
       banner.nrcontador 
    FROM 
       ACESSO.bannervole banner,
       ACESSO.relacionamentobannervole relacionamento,
       APOIO.areabannervole area
    WHERE 
       banner.idareabannervole = area.idareabannervole
    AND relacionamento.idbannervole = banner.idbannervole
    AND banner.dtinicial <= SYSDATE 
    AND( banner.dtfinal >= SYSDATE or banner.dtfinal is null )
    AND relacionamento.iduf in 
    (
       select aUf.iduf from apoio.uf aUf where aUf.sguf = :sgUF
    );
                
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csrBanner;
    for( ;; ) 
    {
	    memset( idBannervole, 0x0, sizeof(idBannervole) );
		memset( nmBannervole, 0x0, sizeof(nmBannervole) );
		memset( urlBannervole, 0x0, sizeof(urlBannervole) );
		memset( idAreaBannerVole, 0x0, sizeof(idAreaBannerVole) );
		memset( idTipoBannerVole, 0x0, sizeof(idTipoBannerVole) );
		memset( dsBannerVole, 0x0, sizeof(dsBannerVole) );
		memset( ipBannerVole, 0x0, sizeof(ipBannerVole) );
		memset( dtInicial, 0x0, sizeof(dtInicial) );
		memset( dtFinal, 0x0, sizeof(dtFinal) );
		memset( nrContador, 0x0, sizeof(nrContador) );
				
        EXEC SQL FETCH csrBanner INTO 
           :idBannervole:i_idBannervole ,
           :nmBannervole:i_nmBannervole ,
           :urlBannervole:i_urlBannervole ,
           :idAreaBannerVole:i_idAreaBannerVole ,
           :idTipoBannerVole:i_idTipoBannerVole ,
           :dsBannerVole:i_dsBannerVole ,
           :ipBannerVole:i_ipBannerVole ,
           :dtInicial:i_dtInicial ,
           :dtFinal:i_dtFinal ,
           :nrContador:i_nrContador ;
    
		xml_g->createTag( "BannerVO" );
			xml_g->addItem( "idBanner",  trim(idBannervole) );
			xml_g->addItem( "nmBanner",  trim(nmBannervole) );
			xml_g->addItem( "urlBanner",  trim(urlBannervole) );
			xml_g->addItem( "idAreaBanner",  trim(idAreaBannerVole) );
			xml_g->addItem( "idTipoBanner",  trim(idTipoBannerVole) );
			xml_g->addItem( "dsBanner",  trim(dsBannerVole) );
			xml_g->addItem( "ipBanner",  trim(ipBannerVole) );
			xml_g->addItem( "dtInicial",  trim(dtInicial) );
			xml_g->addItem( "dtFinal",  trim(dtFinal) );
			xml_g->addItem( "nrContador",  trim(nrContador) );
		xml_g->closeTag();
	
	}
    
    EXEC SQL CLOSE csrBanner;
    ULOG_END( "getBanners()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 

} 



void getBannerByLocalizacao( char * idBannerPrm, XMLGen * xml_g )
{
    ULOG_START( "getBannerByLocalizacao()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idBanner[43];
       
       char idBannervole[43];
       char nmBannervole[256];
       char urlBannervole[256];
       char idAreaBannerVole[43];
       char idTipoBannerVole[43];
       char dsBannerVole[256];
       char ipBannerVole[128];
       char dtInicial[32];
       char dtFinal[32];
       char nrContador[256];

       short i_idBannervole = -1;
       short i_nmBannervole = -1;
       short i_urlBannervole = -1;
       short i_idAreaBannerVole = -1;
       short i_idTipoBannerVole = -1;
       short i_dsBannerVole = -1;
       short i_ipBannerVole = -1;
       short i_dtInicial = -1;
       short i_dtFinal = -1;
       short i_nrContador = -1;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idBanner, idBannerPrm );
    ULOG( "idBanner  [%s]", idBanner );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL DECLARE csrBannerLocal CURSOR FOR
    SELECT 
       banner.idbannervole, 
       banner.nmbannervole, 
       banner.urlbannervole, 
       banner.idareabannervole, 
       banner.idtipobannervole, 
       banner.dsbannervole, 
       banner.ipbannervole, 
       banner.dtinicial, 
       banner.dtfinal, 
       banner.nrcontador  
    FROM ACESSO.bannervole banner, 
       APOIO.areabannervole area 
    WHERE 
       banner.idareabannervole = area.idareabannervole 
    AND area.idareabannervole = :idBanner ;
                
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csrBannerLocal;
    for( ;; ) 
    {
	    memset( idBannervole, 0x0, sizeof(idBannervole) );
		memset( nmBannervole, 0x0, sizeof(nmBannervole) );
		memset( urlBannervole, 0x0, sizeof(urlBannervole) );
		memset( idAreaBannerVole, 0x0, sizeof(idAreaBannerVole) );
		memset( idTipoBannerVole, 0x0, sizeof(idTipoBannerVole) );
		memset( dsBannerVole, 0x0, sizeof(dsBannerVole) );
		memset( ipBannerVole, 0x0, sizeof(ipBannerVole) );
		memset( dtInicial, 0x0, sizeof(dtInicial) );
		memset( dtFinal, 0x0, sizeof(dtFinal) );
		memset( nrContador, 0x0, sizeof(nrContador) );
				
        EXEC SQL FETCH csrBannerLocal INTO 
           :idBannervole:i_idBannervole ,
           :nmBannervole:i_nmBannervole ,
           :urlBannervole:i_urlBannervole ,
           :idAreaBannerVole:i_idAreaBannerVole ,
           :idTipoBannerVole:i_idTipoBannerVole ,
           :dsBannerVole:i_dsBannerVole ,
           :ipBannerVole:i_ipBannerVole ,
           :dtInicial:i_dtInicial ,
           :dtFinal:i_dtFinal ,
           :nrContador:i_nrContador ;
    
		xml_g->createTag( "BannerVO" );
			xml_g->addItem( "idBanner",  trim(idBannervole) );
			xml_g->addItem( "nmBanner",  trim(nmBannervole) );
			xml_g->addItem( "urlBanner",  trim(urlBannervole) );
			xml_g->addItem( "idAreaBanner",  trim(idAreaBannerVole) );
			xml_g->addItem( "idTipoBanner",  trim(idTipoBannerVole) );
			xml_g->addItem( "dsBanner",  trim(dsBannerVole) );
			xml_g->addItem( "ipBanner",  trim(ipBannerVole) );
			xml_g->addItem( "dtInicial",  trim(dtInicial) );
			xml_g->addItem( "dtFinal",  trim(dtFinal) );
			xml_g->addItem( "nrContador",  trim(nrContador) );
		xml_g->closeTag();
	
	}
    
    EXEC SQL CLOSE csrBannerLocal;
    ULOG_END( "getBannerByLocalizacao()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
} 



void getBannerById( char * idBannerPrm, XMLGen * xml_g )
{
    ULOG_START( "getBannerById()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idBanner[43];
       
       char idBannervole[43];
       char nmBannervole[256];
       char urlBannervole[256];
       char idAreaBannerVole[43];
       char idTipoBannerVole[43];
       char dsBannerVole[256];
       char ipBannerVole[128];
       char dtInicial[32];
       char dtFinal[32];
       char nrContador[256];

       short i_idBannervole = -1;
       short i_nmBannervole = -1;
       short i_urlBannervole = -1;
       short i_idAreaBannerVole = -1;
       short i_idTipoBannerVole = -1;
       short i_dsBannerVole = -1;
       short i_ipBannerVole = -1;
       short i_dtInicial = -1;
       short i_dtFinal = -1;
       short i_nrContador = -1;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idBanner, idBannerPrm );
    ULOG( "idBanner  [%s]", idBanner );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL DECLARE csrBannerAcesso CURSOR FOR
    SELECT 
       banner.idbannervole, 
       banner.nmbannervole, 
       banner.urlbannervole, 
       banner.idareabannervole, 
       banner.idtipobannervole, 
       banner.dsbannervole, 
       banner.ipbannervole, 
       to_char(trunc(banner.dtinicial),'DD/MM/YYYY'), 
       to_char(trunc(banner.dtfinal),'DD/MM/YYYY'), 
       banner.nrcontador  
    FROM ACESSO.bannervole banner 
    WHERE 
       banner.idbannervole = :idBanner ;
                
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csrBannerAcesso;
    for( ;; ) 
    {
	    memset( idBannervole, 0x0, sizeof(idBannervole) );
		memset( nmBannervole, 0x0, sizeof(nmBannervole) );
		memset( urlBannervole, 0x0, sizeof(urlBannervole) );
		memset( idAreaBannerVole, 0x0, sizeof(idAreaBannerVole) );
		memset( idTipoBannerVole, 0x0, sizeof(idTipoBannerVole) );
		memset( dsBannerVole, 0x0, sizeof(dsBannerVole) );
		memset( ipBannerVole, 0x0, sizeof(ipBannerVole) );
		memset( dtInicial, 0x0, sizeof(dtInicial) );
		memset( dtFinal, 0x0, sizeof(dtFinal) );
		memset( nrContador, 0x0, sizeof(nrContador) );
				
        EXEC SQL FETCH csrBannerAcesso INTO 
           :idBannervole:i_idBannervole ,
           :nmBannervole:i_nmBannervole ,
           :urlBannervole:i_urlBannervole ,
           :idAreaBannerVole:i_idAreaBannerVole ,
           :idTipoBannerVole:i_idTipoBannerVole ,
           :dsBannerVole:i_dsBannerVole ,
           :ipBannerVole:i_ipBannerVole ,
           :dtInicial:i_dtInicial ,
           :dtFinal:i_dtFinal ,
           :nrContador:i_nrContador ;
    
		xml_g->createTag( "BannerVO" );
			xml_g->addItem( "idBanner",  trim(idBannervole) );
			xml_g->addItem( "nmBanner",  trim(nmBannervole) );
			xml_g->addItem( "urlBanner",  trim(urlBannervole) );
			xml_g->addItem( "idAreaBanner",  trim(idAreaBannerVole) );
			xml_g->addItem( "idTipoBanner",  trim(idTipoBannerVole) );
			xml_g->addItem( "dsBanner",  trim(dsBannerVole) );
			xml_g->addItem( "ipBanner",  trim(ipBannerVole) );
			xml_g->addItem( "dtInicial",  trim(dtInicial) );
			xml_g->addItem( "dtFinal",  trim(dtFinal) );
			xml_g->addItem( "nrContador",  trim(nrContador) );
		xml_g->closeTag();
	
	}
    
    EXEC SQL CLOSE csrBannerAcesso;
    ULOG_END( "getBannerById()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
} 



void atualizaContadorBanner( char * idBannerPrm )
{
    ULOG_START( "atualizaContadorBanner()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;	

        char idBanner[43];
        
    EXEC SQL END DECLARE SECTION;	


    strcpy ( idBanner, idBannerPrm );

    ULOG( "idBanner [%s]", idBanner );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    update acesso.bannervole 
    set nrcontador = nrcontador + 1 
    where idbannervole = :idBanner
    and incontador = 1;

    ULOG_END( "atualizaContadorBanner()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}
