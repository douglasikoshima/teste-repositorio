
#undef SQLCA
#define SQLCA_NONE

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
 
EXEC SQL INCLUDE SQLCA;

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}



char * rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim(char *pStr)
{
	int lInd = 0;

    if (pStr == NULL)
            return NULL;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char * trim(char *pStr){
	return ltrim(rtrim(pStr));		
}



void getGestorByPhoneNumber( char * phoneNumberPrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "getGestorByPhoneNumber()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char phoneNumber[16];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_1 CURSOR FOR
        select 
            pg.idpessoagestor, 
            pg.idpessoasistemaorigem, 
            pg.nmpessoagestor, 
            pg.nmgestor, 
            pg.nmmeiogestor, 
            pg.nmsobrenomegestor, 
            pg.nrtelefonecelularvivo, 
            pg.nrtelefonecelularoutro, 
            pg.nrtelefonefixo, 
            pg.email, 
            pg.idusuarioalteracao, 
            to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
            pg.inprimeiroacesso, 
            to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
            pg.nrdocumento  
        from 
            customer.pessoagestor      pg 
        where 
            pg.idpessoagestor is not null
        and pg.nrtelefonecelularvivo = :phoneNumber ;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_1;
    for( ;; ) 
    {
        memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
        memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
        memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
        memset( nmgestor, 0x0, sizeof(nmgestor) );
        memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
        memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
        memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
        memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
        memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
        memset( email, 0x0, sizeof(email) );
        memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
        memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
        memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
        memset( dtnascimento, 0x0, sizeof(dtnascimento) );
        memset( nrdocumento, 0x0, sizeof(nrdocumento) );

        EXEC SQL FETCH csr_1 INTO
             :idpessoagestor:i_idpessoagestor ,
             :idpessoasistemaorigem:i_idpessoasistemaorigem ,
             :nmpessoagestor:i_nmpessoagestor ,
             :nmgestor:i_nmgestor ,
             :nmmeiogestor:i_nmmeiogestor ,
             :nmsobrenomegestor:i_nmsobrenomegestor ,
             :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
             :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
             :nrtelefonefixo:i_nrtelefonecelularoutro ,
             :email:i_email ,
             :idusuarioalteracao:i_idusuarioalteracao ,
             :dtultimaalteracao:i_dtultimaalteracao ,
             :inprimeiroacesso:i_inprimeiroacesso ,
             :dtnascimento:i_dtnascimento ,
             :nrdocumento:i_nrdocumento ;

        xml_g->createTag( "PessoaGestorVO" );
            xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
            xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
            xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
            xml_g->addItem( "nmGestor", trim(nmgestor) );
            xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
            xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
            xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
            xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
            xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
            xml_g->addItem( "EMail", trim(email) );
            xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
            xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
            xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
            xml_g->addItem( "dtNascimento", trim(dtnascimento) );
            xml_g->addItem( "nrDocumento", trim(nrdocumento) );
        xml_g->closeTag();
    }
    EXEC SQL CLOSE csr_1;

    ULOG_END( "getGestorByPhoneNumber()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getGestorByPhoneNumberConta( char * idContaPrm, XMLGen * xml_g )
{
    ULOG_START( "getGestorByPhoneNumberConta()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char phoneNumber[16];
       char idConta[64];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idConta    , idContaPrm );
    
    ULOG( "idConta     [%s]", idConta );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    select 
        pg.idpessoagestor, 
        pg.idpessoasistemaorigem, 
        pg.nmpessoagestor, 
        pg.nmgestor, 
        pg.nmmeiogestor, 
        pg.nmsobrenomegestor, 
        pg.nrtelefonecelularvivo, 
        pg.nrtelefonecelularoutro, 
        pg.nrtelefonefixo, 
        pg.email, 
        pg.idusuarioalteracao, 
        to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
        pg.inprimeiroacesso, 
        to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
        pg.nrdocumento
    into
       :idpessoagestor:i_idpessoagestor ,
       :idpessoasistemaorigem:i_idpessoasistemaorigem ,
       :nmpessoagestor:i_nmpessoagestor ,
       :nmgestor:i_nmgestor ,
       :nmmeiogestor:i_nmmeiogestor ,
       :nmsobrenomegestor:i_nmsobrenomegestor ,
       :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
       :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
       :nrtelefonefixo:i_nrtelefonecelularoutro ,
       :email:i_email ,
       :idusuarioalteracao:i_idusuarioalteracao ,
       :dtultimaalteracao:i_dtultimaalteracao ,
       :inprimeiroacesso:i_inprimeiroacesso ,
       :dtnascimento:i_dtnascimento ,
       :nrdocumento:i_nrdocumento
    from 
        customer.pessoagestor      pg ,
        customer.pessoagestorconta pgc ,
        customer.conta             c
    where 
        pg.idpessoagestor is not null
    and pgc.idconta = c.idconta
    and pgc.idtiporelacionamento = 5
    AND PG.NRDOCUMENTO = PGC.NRDOCUMENTO
    and c.idconta = :idConta
    and rownum < 2 ;
    
    if ( idpessoagestor[0] == 0x0 )
    {
        EXEC SQL
        select 
            pg.idpessoagestor, 
            pg.idpessoasistemaorigem, 
            pg.nmpessoagestor, 
            pg.nmgestor, 
            pg.nmmeiogestor, 
            pg.nmsobrenomegestor, 
            pg.nrtelefonecelularvivo, 
            pg.nrtelefonecelularoutro, 
            pg.nrtelefonefixo, 
            pg.email, 
            pg.idusuarioalteracao, 
            to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
            pg.inprimeiroacesso, 
            to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
            pg.nrdocumento
        into
           :idpessoagestor:i_idpessoagestor ,
           :idpessoasistemaorigem:i_idpessoasistemaorigem ,
           :nmpessoagestor:i_nmpessoagestor ,
           :nmgestor:i_nmgestor ,
           :nmmeiogestor:i_nmmeiogestor ,
           :nmsobrenomegestor:i_nmsobrenomegestor ,
           :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
           :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
           :nrtelefonefixo:i_nrtelefonecelularoutro ,
           :email:i_email ,
           :idusuarioalteracao:i_idusuarioalteracao ,
           :dtultimaalteracao:i_dtultimaalteracao ,
           :inprimeiroacesso:i_inprimeiroacesso ,
           :dtnascimento:i_dtnascimento ,
           :nrdocumento:i_nrdocumento
        from 
            customer.pessoagestor      pg ,
            customer.pessoagestorconta pgc ,
            customer.conta             c
        where 
            pg.idpessoagestor is not null
        and pgc.idconta = c.idconta
        and pgc.idtiporelacionamento = 5
        AND pg.NMMEIOGESTOR = PGC.NRDOCUMENTO
        and c.idconta = :idConta
        and rownum < 2 ;
    }


    xml_g->createTag( "PessoaGestorVO" );
        xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
        xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
        xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
        xml_g->addItem( "nmGestor", trim(nmgestor) );
        xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
        xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
        xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
        xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
        xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
        xml_g->addItem( "EMail", trim(email) );
        xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
        xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
        xml_g->addItem( "dtNascimento", trim(dtnascimento) );
        xml_g->addItem( "nrDocumento", trim(nrdocumento) );
    xml_g->closeTag();

    ULOG_END( "getGestorByPhoneNumberConta()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int getGestorByPhoneNumberCPF_VOLE( char * phoneNumberPrm, char * cpfPrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "getGestorByPhoneNumberCPF_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       int  ctGestores;
       
       char phoneNumber[16];
       char cpf[256];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       short i_ctGestores = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    strcpy( cpf, cpfPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );
    ULOG( "cpf         [%s]", cpf );

    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        select 
           pg.idpessoagestor,  
           pg.idpessoasistemaorigem,  
           pg.nmpessoagestor,  
           pg.nmgestor,  
           pg.nmmeiogestor,  
           pg.nmsobrenomegestor,  
           pg.nrtelefonecelularvivo,  
           pg.nrtelefonecelularoutro, 
           pg.nrtelefonefixo, 
           pg.email, 
           pg.idusuarioalteracao, 
           to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'),  
           pg.inprimeiroacesso,  
           to_char(pg.dtnascimento,'DD/MM/YYYY HH24:MI:SS'),  
           pg.nrdocumento
        into
          :idpessoagestor:i_idpessoagestor ,
          :idpessoasistemaorigem:i_idpessoasistemaorigem ,
          :nmpessoagestor:i_nmpessoagestor ,
          :nmgestor:i_nmgestor ,
          :nmmeiogestor:i_nmmeiogestor ,
          :nmsobrenomegestor:i_nmsobrenomegestor ,
          :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
          :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
          :nrtelefonefixo:i_nrtelefonecelularoutro ,
          :email:i_email ,
          :idusuarioalteracao:i_idusuarioalteracao ,
          :dtultimaalteracao:i_dtultimaalteracao ,
          :inprimeiroacesso:i_inprimeiroacesso ,
          :dtnascimento:i_dtnascimento ,
          :nrdocumento:i_nrdocumento
        from 
           customer.pessoagestor pg, 
           CUSTOMER.PESSOAGESTORCONTA PGC 
        where 
           pg.idpessoagestor is not null 
        AND PG.NRDOCUMENTO = PGC.NRDOCUMENTO
        and pg.nrtelefonecelularvivo = :phoneNumber
        and pg.nrdocumento = :cpf
        and rownum < 2;
    
    if ( idpessoagestor[0] == 0x0 )
    {
        memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
        memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
        memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
        memset( nmgestor, 0x0, sizeof(nmgestor) );
        memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
        memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
        memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
        memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
        memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
        memset( email, 0x0, sizeof(email) );
        memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
        memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
        memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
        memset( dtnascimento, 0x0, sizeof(dtnascimento) );
        memset( nrdocumento, 0x0, sizeof(nrdocumento) );
        EXEC SQL
            select 
               pg.idpessoagestor,  
               pg.idpessoasistemaorigem,  
               pg.nmpessoagestor,  
               pg.nmgestor,  
               pg.nmmeiogestor,  
               pg.nmsobrenomegestor,  
               pg.nrtelefonecelularvivo,  
               pg.nrtelefonecelularoutro, 
               pg.nrtelefonefixo, 
               pg.email, 
               pg.idusuarioalteracao, 
               to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'),  
               pg.inprimeiroacesso,  
               to_char(pg.dtnascimento,'DD/MM/YYYY HH24:MI:SS'),  
               pg.nrdocumento
            into
              :idpessoagestor:i_idpessoagestor ,
              :idpessoasistemaorigem:i_idpessoasistemaorigem ,
              :nmpessoagestor:i_nmpessoagestor ,
              :nmgestor:i_nmgestor ,
              :nmmeiogestor:i_nmmeiogestor ,
              :nmsobrenomegestor:i_nmsobrenomegestor ,
              :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
              :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
              :nrtelefonefixo:i_nrtelefonecelularoutro ,
              :email:i_email ,
              :idusuarioalteracao:i_idusuarioalteracao ,
              :dtultimaalteracao:i_dtultimaalteracao ,
              :inprimeiroacesso:i_inprimeiroacesso ,
              :dtnascimento:i_dtnascimento ,
              :nrdocumento:i_nrdocumento
            from 
               customer.pessoagestor pg, 
               CUSTOMER.PESSOAGESTORCONTA PGC 
            where 
               pg.idpessoagestor is not null 
            AND pg.nmmeiogestor = PGC.NRDOCUMENTO
            and pg.nrtelefonecelularvivo = :phoneNumber
            and pg.nmmeiogestor = :cpf
            and rownum < 2;
    }
    
    xml_g->createTag( "PessoaGestorVO" );
        xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
        xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
        xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
        xml_g->addItem( "nmGestor", trim(nmgestor) );
        xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
        xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
        xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
        xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
        xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
        xml_g->addItem( "EMail", trim(email) );
        xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
        xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
        xml_g->addItem( "dtNascimento", trim(dtnascimento) );
        xml_g->addItem( "nrDocumento", trim(nrdocumento) );
    xml_g->closeTag();
    
    ULOG_END( "getGestorByPhoneNumberCPF_VOLE()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int getGestorByPhoneNumberCPF( char * phoneNumberPrm, char * cpfPrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "getGestorByPhoneNumberCPF()" );
    
    struct sqlca sqlca;
    int inGestorMaster;
    char bf[2];

    EXEC SQL BEGIN DECLARE SECTION;

       int  ctGestores;
       int  ctGestorMaster;
       
       char phoneNumber[16];
       char cpf[256];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       short i_ctGestores = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    strcpy( cpf, cpfPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );
    ULOG( "cpf         [%s]", cpf );

    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        select 
           pg.idpessoagestor,  
           pg.idpessoasistemaorigem,  
           pg.nmpessoagestor,  
           pg.nmgestor,  
           pg.nmmeiogestor,  
           pg.nmsobrenomegestor,  
           pg.nrtelefonecelularvivo,  
           pg.nrtelefonecelularoutro, 
           pg.nrtelefonefixo, 
           pg.email, 
           pg.idusuarioalteracao, 
           to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'),  
           pg.inprimeiroacesso,  
           to_char(pg.dtnascimento,'DD/MM/YYYY HH24:MI:SS'),  
           pg.nrdocumento
        into
          :idpessoagestor:i_idpessoagestor ,
          :idpessoasistemaorigem:i_idpessoasistemaorigem ,
          :nmpessoagestor:i_nmpessoagestor ,
          :nmgestor:i_nmgestor ,
          :nmmeiogestor:i_nmmeiogestor ,
          :nmsobrenomegestor:i_nmsobrenomegestor ,
          :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
          :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
          :nrtelefonefixo:i_nrtelefonecelularoutro ,
          :email:i_email ,
          :idusuarioalteracao:i_idusuarioalteracao ,
          :dtultimaalteracao:i_dtultimaalteracao ,
          :inprimeiroacesso:i_inprimeiroacesso ,
          :dtnascimento:i_dtnascimento ,
          :nrdocumento:i_nrdocumento
        from 
           customer.pessoagestor pg 
           /* CUSTOMER.PESSOAGESTORCONTA PGC */
        where 
           pg.idpessoagestor is not null 
        /* AND PG.NRDOCUMENTO = PGC.NRDOCUMENTO  */
        and pg.nrtelefonecelularvivo = :phoneNumber
        and pg.nrdocumento = :cpf
        and rownum < 2;
    
    if ( idpessoagestor[0] == 0x0 )
    {
        memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
        memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
        memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
        memset( nmgestor, 0x0, sizeof(nmgestor) );
        memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
        memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
        memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
        memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
        memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
        memset( email, 0x0, sizeof(email) );
        memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
        memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
        memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
        memset( dtnascimento, 0x0, sizeof(dtnascimento) );
        memset( nrdocumento, 0x0, sizeof(nrdocumento) );
        EXEC SQL
            select 
               pg.idpessoagestor,  
               pg.idpessoasistemaorigem,  
               pg.nmpessoagestor,  
               pg.nmgestor,  
               pg.nmmeiogestor,  
               pg.nmsobrenomegestor,  
               pg.nrtelefonecelularvivo,  
               pg.nrtelefonecelularoutro, 
               pg.nrtelefonefixo, 
               pg.email, 
               pg.idusuarioalteracao, 
               to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'),  
               pg.inprimeiroacesso,  
               to_char(pg.dtnascimento,'DD/MM/YYYY HH24:MI:SS'),  
               pg.nrdocumento
            into
              :idpessoagestor:i_idpessoagestor ,
              :idpessoasistemaorigem:i_idpessoasistemaorigem ,
              :nmpessoagestor:i_nmpessoagestor ,
              :nmgestor:i_nmgestor ,
              :nmmeiogestor:i_nmmeiogestor ,
              :nmsobrenomegestor:i_nmsobrenomegestor ,
              :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
              :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
              :nrtelefonefixo:i_nrtelefonecelularoutro ,
              :email:i_email ,
              :idusuarioalteracao:i_idusuarioalteracao ,
              :dtultimaalteracao:i_dtultimaalteracao ,
              :inprimeiroacesso:i_inprimeiroacesso ,
              :dtnascimento:i_dtnascimento ,
              :nrdocumento:i_nrdocumento
            from 
               customer.pessoagestor pg
               /* CUSTOMER.PESSOAGESTORCONTA PGC */
            where 
               pg.idpessoagestor is not null 
            /* AND pg.nmmeiogestor = PGC.NRDOCUMENTO */
            and pg.nrtelefonecelularvivo = :phoneNumber
            and pg.nmmeiogestor = :cpf
            and rownum < 2;
    }
    
    memset( bf, 0x0, sizeof(bf) );
    if ( idpessoagestor[0] != 0x0 )
    {
        if ( nrdocumento[0] != 0x0 )
        {
            EXEC SQL
            SELECT 
               COUNT(PGM.NRDOCUMENTOGESTOR) 
            INTO
               :ctGestorMaster
            FROM 
               CUSTOMER.PESSOAGESTORMASTER PGM 
            WHERE 
               PGM.NRDOCUMENTOGESTOR = TRIM(:nrdocumento);
            
            inGestorMaster = ( ctGestorMaster > 0 ) ? 1 : 0 ;
            sprintf( bf, "%d", inGestorMaster );
        }
    }

    xml_g->createTag( "PessoaGestorVO" );
        xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
        xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
        xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
        xml_g->addItem( "nmGestor", trim(nmgestor) );
        xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
        xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
        xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
        xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
        xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
        xml_g->addItem( "EMail", trim(email) );
        xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
        xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
        xml_g->addItem( "dtNascimento", trim(dtnascimento) );
        xml_g->addItem( "nrDocumento", trim(nrdocumento) );
        xml_g->addItem( "inGestorMaster", bf );
        
    xml_g->closeTag();
    
    ULOG_END( "getGestorByPhoneNumberCPF()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int ValidaGestorByPhoneNumberCPF( char * phoneNumberPrm, char * cpfPrm )
{
    ULOG_START( "ValidaGestorByPhoneNumberCPF()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       int   ctGestores;
       short i_ctGestores = -1;
       
       char phoneNumber[16];
       char cpf[256];
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    strcpy( cpf, cpfPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );
    ULOG( "cpf         [%s]", cpf );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    select 
        count(pg.idpessoagestor)
    into
        :ctGestores:i_ctGestores
    from 
        customer.pessoagestor pg, 
        CUSTOMER.PESSOAGESTORCONTA PGC 
    where 
        pg.idpessoagestor is not null 
        AND (PG.NRDOCUMENTO = PGC.NRDOCUMENTO or pg.nmmeiogestor = PGC.NRDOCUMENTO)
        and pg.nrtelefonecelularvivo = :phoneNumber
        and (pg.nrdocumento = :cpf or pg.nmmeiogestor = :cpf);

    // if ( ctGestores > 1 )   // Correcao para o Problema - #16807205
    // {
        // ULOG( ">>> Encontrados [%d] registros para o CPF [%s], nrTelefone [%s]", ctGestores, cpf, phoneNumber );
        // ULOG_END( "ValidaGestorByPhoneNumberCPF()" );
        // return -1;
    // }
    
    ULOG_END( "ValidaGestorByPhoneNumberCPF()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int getGestorByPhoneNumberWithOutCpf_VOLE( char * phoneNumberPrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "getGestorByPhoneNumberWithOutCpf_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char phoneNumber[16];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       int  ctGes;
       
       short i_ctGes = -1;
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );

        EXEC SQL
        select 
           pg.idpessoagestor, 
           pg.idpessoasistemaorigem, 
           pg.nmpessoagestor, 
           pg.nmgestor, 
           pg.nmmeiogestor, 
           pg.nmsobrenomegestor, 
           pg.nrtelefonecelularvivo, 
           pg.nrtelefonecelularoutro, 
           pg.nrtelefonefixo, 
           pg.email, 
           pg.idusuarioalteracao, 
           to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
           pg.inprimeiroacesso, 
           to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
           pg.nrdocumento 
        into
         :idpessoagestor:i_idpessoagestor ,
         :idpessoasistemaorigem:i_idpessoasistemaorigem ,
         :nmpessoagestor:i_nmpessoagestor ,
         :nmgestor:i_nmgestor ,
         :nmmeiogestor:i_nmmeiogestor ,
         :nmsobrenomegestor:i_nmsobrenomegestor ,
         :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
         :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
         :nrtelefonefixo:i_nrtelefonecelularoutro ,
         :email:i_email ,
         :idusuarioalteracao:i_idusuarioalteracao ,
         :dtultimaalteracao:i_dtultimaalteracao ,
         :inprimeiroacesso:i_inprimeiroacesso ,
         :dtnascimento:i_dtnascimento ,
         :nrdocumento:i_nrdocumento 
        from 
           customer.pessoagestor pg
       where pg.idpessoagestor is not null 
    and exists (select 1 from  customer.pessoagestorconta pgc
            where PGC.IDTIPORELACIONAMENTO = 5
            and   (PG.NRDOCUMENTO = PGC.NRDOCUMENTO
                   and pg.IDPESSOAGESTOR=pgc.IDPESSOAGESTOR))
        and pg.nrtelefonecelularvivo = :phoneNumber 
        and rownum < 2;

    if ( i_idpessoagestor == -1 )
    {
        memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
        memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
        memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
        memset( nmgestor, 0x0, sizeof(nmgestor) );
        memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
        memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
        memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
        memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
        memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
        memset( email, 0x0, sizeof(email) );
        memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
        memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
        memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
        memset( dtnascimento, 0x0, sizeof(dtnascimento) );
        memset( nrdocumento, 0x0, sizeof(nrdocumento) );

            EXEC SQL
            select 
               pg.idpessoagestor, 
               pg.idpessoasistemaorigem, 
               pg.nmpessoagestor, 
               pg.nmgestor, 
               pg.nmmeiogestor, 
               pg.nmsobrenomegestor, 
               pg.nrtelefonecelularvivo, 
               pg.nrtelefonecelularoutro, 
               pg.nrtelefonefixo, 
               pg.email, 
               pg.idusuarioalteracao, 
               to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
               pg.inprimeiroacesso, 
               to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
               pg.nrdocumento 
            into
             :idpessoagestor:i_idpessoagestor ,
             :idpessoasistemaorigem:i_idpessoasistemaorigem ,
             :nmpessoagestor:i_nmpessoagestor ,
             :nmgestor:i_nmgestor ,
             :nmmeiogestor:i_nmmeiogestor ,
             :nmsobrenomegestor:i_nmsobrenomegestor ,
             :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
             :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
             :nrtelefonefixo:i_nrtelefonecelularoutro ,
             :email:i_email ,
             :idusuarioalteracao:i_idusuarioalteracao ,
             :dtultimaalteracao:i_dtultimaalteracao ,
             :inprimeiroacesso:i_inprimeiroacesso ,
             :dtnascimento:i_dtnascimento ,
             :nrdocumento:i_nrdocumento 
            from 
               customer.pessoagestor pg
           where pg.idpessoagestor is not null 
        and exists (select 1 from  customer.pessoagestorconta pgc
                where PGC.IDTIPORELACIONAMENTO = 5
                and   (pg.NMMEIOGESTOR = PGC.NRDOCUMENTO
                       and pg.IDPESSOAGESTOR=pgc.IDPESSOAGESTOR))
            and pg.nrtelefonecelularvivo = :phoneNumber 
            and rownum < 2;

    }

    xml_g->createTag( "PessoaGestorVO" );
        xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
        xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
        xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
        xml_g->addItem( "nmGestor", trim(nmgestor) );
        xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
        xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
        xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
        xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
        xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
        xml_g->addItem( "EMail", trim(email) );
        xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
        xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
        xml_g->addItem( "dtNascimento", trim(dtnascimento) );
        xml_g->addItem( "nrDocumento", trim(nrdocumento) );
    xml_g->closeTag();

    ULOG_END( "getGestorByPhoneNumberWithOutCpf_VOLE()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int getGestorByPhoneNumberWithOutCpf( char * phoneNumberPrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "getGestorByPhoneNumberWithOutCpf()" );
    
    struct sqlca sqlca;
    int inGestorMaster;

    EXEC SQL BEGIN DECLARE SECTION;

       int ctGestorMaster;
       char phoneNumber[16];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       int  ctGes;
       
       short i_ctGes = -1;
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );

        EXEC SQL
        select 
           pg.idpessoagestor, 
           pg.idpessoasistemaorigem, 
           pg.nmpessoagestor, 
           pg.nmgestor, 
           pg.nmmeiogestor, 
           pg.nmsobrenomegestor, 
           pg.nrtelefonecelularvivo, 
           pg.nrtelefonecelularoutro, 
           pg.nrtelefonefixo, 
           pg.email, 
           pg.idusuarioalteracao, 
           to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
           pg.inprimeiroacesso, 
           to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
           pg.nrdocumento 
        into
         :idpessoagestor:i_idpessoagestor ,
         :idpessoasistemaorigem:i_idpessoasistemaorigem ,
         :nmpessoagestor:i_nmpessoagestor ,
         :nmgestor:i_nmgestor ,
         :nmmeiogestor:i_nmmeiogestor ,
         :nmsobrenomegestor:i_nmsobrenomegestor ,
         :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
         :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
         :nrtelefonefixo:i_nrtelefonecelularoutro ,
         :email:i_email ,
         :idusuarioalteracao:i_idusuarioalteracao ,
         :dtultimaalteracao:i_dtultimaalteracao ,
         :inprimeiroacesso:i_inprimeiroacesso ,
         :dtnascimento:i_dtnascimento ,
         :nrdocumento:i_nrdocumento 
        from 
           customer.pessoagestor pg
    where 
        pg.idpessoagestor is not null 
    and exists (select 1 from  customer.pessoagestorconta pgc
                where 
                    ( PGC.IDTIPORELACIONAMENTO = 5 OR PGC.IDTIPORELACIONAMENTO = 21 )
            and   (PG.NRDOCUMENTO = PGC.NRDOCUMENTO
                and pg.IDPESSOAGESTOR = pgc.IDPESSOAGESTOR))
        and pg.nrtelefonecelularvivo = :phoneNumber 
        and rownum < 2;

    if ( i_idpessoagestor == -1 )
    {
        memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
        memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
        memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
        memset( nmgestor, 0x0, sizeof(nmgestor) );
        memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
        memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
        memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
        memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
        memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
        memset( email, 0x0, sizeof(email) );
        memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
        memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
        memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
        memset( dtnascimento, 0x0, sizeof(dtnascimento) );
        memset( nrdocumento, 0x0, sizeof(nrdocumento) );

            EXEC SQL
            select 
               pg.idpessoagestor, 
               pg.idpessoasistemaorigem, 
               pg.nmpessoagestor, 
               pg.nmgestor, 
               pg.nmmeiogestor, 
               pg.nmsobrenomegestor, 
               pg.nrtelefonecelularvivo, 
               pg.nrtelefonecelularoutro, 
               pg.nrtelefonefixo, 
               pg.email, 
               pg.idusuarioalteracao, 
               to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
               pg.inprimeiroacesso, 
               to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
               pg.nrdocumento 
            into
             :idpessoagestor:i_idpessoagestor ,
             :idpessoasistemaorigem:i_idpessoasistemaorigem ,
             :nmpessoagestor:i_nmpessoagestor ,
             :nmgestor:i_nmgestor ,
             :nmmeiogestor:i_nmmeiogestor ,
             :nmsobrenomegestor:i_nmsobrenomegestor ,
             :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
             :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
             :nrtelefonefixo:i_nrtelefonecelularoutro ,
             :email:i_email ,
             :idusuarioalteracao:i_idusuarioalteracao ,
             :dtultimaalteracao:i_dtultimaalteracao ,
             :inprimeiroacesso:i_inprimeiroacesso ,
             :dtnascimento:i_dtnascimento ,
             :nrdocumento:i_nrdocumento 
            from 
               customer.pessoagestor pg
           where pg.idpessoagestor is not null 
        and exists (select 1 from  customer.pessoagestorconta pgc
                    where 
                    ( PGC.IDTIPORELACIONAMENTO = 5 OR PGC.IDTIPORELACIONAMENTO = 21 )
                and   (pg.NMMEIOGESTOR = PGC.NRDOCUMENTO
                       and pg.IDPESSOAGESTOR=pgc.IDPESSOAGESTOR))
            and pg.nrtelefonecelularvivo = :phoneNumber 
            and rownum < 2;

    }

    if ( idpessoagestor[0] != 0x0 )
    {
        if ( nrdocumento[0] != 0x0 )
        {
            EXEC SQL
            SELECT 
               COUNT(PGM.NRDOCUMENTOGESTOR) 
            INTO
               :ctGestorMaster
            FROM 
               CUSTOMER.PESSOAGESTORMASTER PGM 
            WHERE 
               PGM.NRDOCUMENTOGESTOR = TRIM(:nrdocumento);
            
            inGestorMaster = ( ctGestorMaster > 0 ) ? 1 : 0 ;
        }
    }
    
    xml_g->createTag( "PessoaGestorVO" );
        xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
        xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
        xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
        xml_g->addItem( "nmGestor", trim(nmgestor) );
        xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
        xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
        xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
        xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
        xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
        xml_g->addItem( "EMail", trim(email) );
        xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
        xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
        xml_g->addItem( "dtNascimento", trim(dtnascimento) );
        xml_g->addItem( "nrDocumento", trim(nrdocumento) );
        xml_g->addItem( "inGestorMaster", inGestorMaster );
    xml_g->closeTag();

    ULOG_END( "getGestorByPhoneNumberWithOutCpf()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int ValidaGestorByPhoneNumberWithOutCpf( char * phoneNumberPrm )
{
    ULOG_START( "ValidaGestorByPhoneNumberWithOutCpf()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char phoneNumber[16];
       
       int     ctGes;
       short i_ctGes = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( phoneNumber, phoneNumberPrm );
    
    ULOG( "phoneNumber [%s]", phoneNumber );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;      // Correcao para o Problema - #16807205
    ULOG( "Validando pelo nro. do documento" );
    EXEC SQL
    select 
       count (pg.idpessoagestor)
    into
       :ctGes:i_ctGes
    from 
       customer.pessoagestor pg
    where pg.idpessoagestor is not null 
    and exists (select 1 from  customer.pessoagestorconta pgc
            where PGC.IDTIPORELACIONAMENTO = 5
            and PG.NRDOCUMENTO = PGC.NRDOCUMENTO
            and pg.IDPESSOAGESTOR=pgc.IDPESSOAGESTOR)
        and pg.nrtelefonecelularvivo = :phoneNumber ;
        
    ULOG( "Encontrou [%d] relacionamentos pelo nro. documento", ctGes );

    if ( ctGes == 0 )   // Correcao para o Problema - #16807205
    {
        ULOG( "Validando pelo nro. do documento pelo NMMEIOGESTOR" );
        EXEC SQL
        select 
           count (pg.idpessoagestor)
        into
           :ctGes:i_ctGes
        from 
           customer.pessoagestor pg
        where pg.idpessoagestor is not null 
        and exists (select 1 from  customer.pessoagestorconta pgc
                where PGC.IDTIPORELACIONAMENTO = 5
                and pg.NMMEIOGESTOR = PGC.NRDOCUMENTO
                and pg.IDPESSOAGESTOR=pgc.IDPESSOAGESTOR)
            and pg.nrtelefonecelularvivo = :phoneNumber ;
        
        ULOG( "Encontrou [%d] relacionamentos pelo nro. documento e NMMEIOGESTOR", ctGes );
    }

    if ( ctGes > 1 )   // Correcao para o Problema - #16807205
    {
        ULOG( ">>> Encontrados [%d] registros para o telefone [%s]", ctGes, phoneNumber );
        ULOG_END( "ValidaGestorByPhoneNumberWithOutCpf()" );
        return -1;
    }

    ULOG_END( "ValidaGestorByPhoneNumberWithOutCpf()" );

    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void gravaCelularProtocolo( char * idContaPrm, char * nrTelefoneSmsPrm )
{
    ULOG_START( "gravaCelularProtocolo()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idConta = idContaPrm;
        char * nrTelefoneSms = nrTelefoneSmsPrm;
        char cdConta[256];
        short i_cdConta = -1;
        
    EXEC SQL END DECLARE SECTION;


    ULOG( "### idConta       [%s]", idConta );
    ULOG( "### nrTelefoneSms [%s]", nrTelefoneSms );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT CDCONTA INTO cdConta:i_cdConta FROM CUSTOMER.CONTA WHERE IDCONTA = :idConta ;
    if ( i_cdConta != -1 )
    {
        trim(cdConta);
    }

    EXEC SQL
    INSERT INTO VOLE.INF_CAD_PROTOCOLO
    (
        NR_CONTRATO ,
        NR_TELEFONE_SMS 
    )
    VALUES
    (
        :cdConta ,
        :nrTelefoneSms
    );
                
    ULOG_END( "gravaCelularProtocolo()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void updatePrimeiroAcesso( char * gestorIdPrm )
{
    ULOG_START( "updatePrimeiroAcesso()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;	

        char gestorId[256];
        
    EXEC SQL END DECLARE SECTION;	


    strcpy ( gestorId, gestorIdPrm );

    ULOG( "gestorId        [%s]", gestorId );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    update customer.pessoagestor 
    set inprimeiroacesso = 0,
        dtprimeiroacesso = sysdate	
    where idpessoagestor = :gestorId ;
	
    ULOG_END( "updatePrimeiroAcesso()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



int getGestorByCpf( char * s_cpf, char * s_idPessoaGestor )
{
    ULOG_START( "getGestorByCpf()" );

    struct sqlca sqlca;
    bool retorno;

    EXEC SQL BEGIN DECLARE SECTION;

       char cpf[32];
       
       int ctGestor;
       short i_ctGestor = -1;
       char idPessoaGestor[42];
       short i_idPessoaGestor = -1;
       
    EXEC SQL END DECLARE SECTION;
    
    strcpy( cpf, s_cpf );
    
    ULOG( "cpf [%s]", cpf );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL
    select
       pg.idpessoagestor as idpessoagestor 
    into
       :idPessoaGestor:i_idPessoaGestor
    from 
       customer.pessoagestor pg 
    where 
       pg.nrdocumento = :cpf
    and rownum < 2;
    
    if ( i_idPessoaGestor == -1 )
    {
        EXEC SQL
        select
           pg.idpessoagestor as idpessoagestor 
        into
           :idPessoaGestor:i_idPessoaGestor
        from 
           customer.pessoagestor pg 
        where 
           pg.nmmeiogestor = :cpf
        and rownum < 2;
    }

    strcpy( s_idPessoaGestor,trim(idPessoaGestor) );
    ULOG( "s_idPessoaGestor [%s]", s_idPessoaGestor );
    
    ULOG_END( "getGestorByCpf()" );
    
    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int ValidaGestorByCpf( char * s_cpf )
{
    ULOG_START( "ValidaGestorByCpf()" );

    struct sqlca sqlca;
    bool retorno;

    EXEC SQL BEGIN DECLARE SECTION;

       char cpf[32];
       
       int ctGestor;
       short i_ctGestor = -1;
       
    EXEC SQL END DECLARE SECTION;
    
    strcpy( cpf, s_cpf );
    
    ULOG( "cpf [%s]", cpf );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    select
       count(pg.idpessoagestor) as ctGestores
    into
       :ctGestor:i_ctGestor
    from 
       customer.pessoagestor pg 
    where 
       pg.nrdocumento = :cpf or pg.nmmeiogestor = :cpf ;
    
    // if ( ctGestor > 1 )
    // {
        // ULOG( ">>> Encontrados [%d] registros para o CPF [%s]", ctGestor, cpf );
        // ULOG_END( "ValidaGestorByCpf()" );
        // return -1;
    // }

    
    ULOG_END( "ValidaGestorByCpf()" );
    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void insertLoginReg( char * idPessoaGestorPrm, char * phoneNumberPrm, bool isLinhaVivo )
{
    ULOG_START( "insertLoginReg()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;	

        char gestorId[42];
        char phoneNumber[16];
        int  inflvivo;
        
    EXEC SQL END DECLARE SECTION;

    strcpy ( gestorId   , idPessoaGestorPrm );
    strcpy ( phoneNumber, phoneNumberPrm );
    inflvivo = ( isLinhaVivo == true ) ? 1: 0;
    
    ULOG( "idpessoagestor [%s]", gestorId );
    ULOG( "phoneNumber    [%s]", phoneNumber );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    insert into vole.historicologin 
    ( nrtelefone, flvivo, idpessoagestor, dtacesso )
    values 
    ( :phoneNumber, :inflvivo, :gestorId, SYSTIMESTAMP ) ;
                
    ULOG_END( "insertLoginReg()" );
    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void updateEmail( char * idPessoaGestorPrm, char * emailPrm )
{
    ULOG_START( "updateEmail()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;	

        char gestorId[43];
        char email[64];
        
    EXEC SQL END DECLARE SECTION;	


    strcpy ( gestorId, idPessoaGestorPrm );
    strcpy ( email   , emailPrm );

    ULOG( "gestorId [%s]", gestorId );
    ULOG( "email    [%s]", email );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    update customer.pessoagestor 
    set email = :email
    where idpessoagestor = :gestorId ;
                
    ULOG_END( "updateEmail()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void updateTelefoneFixo( char * idPessoaGestorPrm, char * telefonePrm )
{
    ULOG_START( "updateTelefoneFixo()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;	

        char gestorId[43];
        char telefone[16];
        
    EXEC SQL END DECLARE SECTION;	

    strcpy ( gestorId , idPessoaGestorPrm );
    strcpy ( telefone , telefonePrm );

    ULOG( "gestorId [%s]", gestorId );
    ULOG( "telefone [%s]", telefone );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    update customer.pessoagestor 
    set nrtelefonefixo = :telefone
    where idpessoagestor = :gestorId ;
                
    ULOG_END( "updateTelefoneFixo()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void getGestorByConta( char * idContaPrm, XMLGen* xml_g  )
{
    ULOG_START( "getGestorByConta()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idConta[42];
       
       char idpessoagestor[42];
       char idpessoasistemaorigem[42];
       char nmpessoagestor[256];
       char nmgestor[256];
       char nmmeiogestor[256];
       char nmsobrenomegestor[256];
       char nrtelefonecelularvivo[16];
       char nrtelefonecelularoutro[16];
       char nrtelefonefixo[16];
       char email[64];
       char idusuarioalteracao[42];
       char dtultimaalteracao[32];
       char inprimeiroacesso[3];
       char dtnascimento[32];
       char nrdocumento[256];
       char cdConta[256];
       
       short i_idpessoagestor = -1;
       short i_idpessoasistemaorigem = -1;
       short i_nmpessoagestor = -1;
       short i_nmgestor = -1;
       short i_nmmeiogestor = -1;
       short i_nmsobrenomegestor = -1;
       short i_nrtelefonecelularvivo = -1;
       short i_nrtelefonecelularoutro = -1;
       short i_nrtelefonefixo = -1;
       short i_email = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inprimeiroacesso = -1;
       short i_dtnascimento = -1;
       short i_nrdocumento = -1;
       short i_cdConta = -1;
       
    EXEC SQL END DECLARE SECTION;
    
    strcpy( idConta, idContaPrm );
    
    ULOG( "idConta [%s]", idConta );

    memset( cdConta, 0x0, sizeof(cdConta) );
    memset( idpessoagestor, 0x0, sizeof(idpessoagestor) );
    memset( idpessoasistemaorigem, 0x0, sizeof(idpessoasistemaorigem) );
    memset( nmpessoagestor, 0x0, sizeof(nmpessoagestor) );
    memset( nmgestor, 0x0, sizeof(nmgestor) );
    memset( nmmeiogestor, 0x0, sizeof(nmmeiogestor) );
    memset( nmsobrenomegestor, 0x0, sizeof(nmsobrenomegestor) );
    memset( nrtelefonecelularvivo, 0x0, sizeof(nrtelefonecelularvivo) );
    memset( nrtelefonecelularoutro, 0x0, sizeof(nrtelefonecelularoutro) );
    memset( nrtelefonefixo, 0x0, sizeof(nrtelefonefixo) );
    memset( email, 0x0, sizeof(email) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inprimeiroacesso, 0x0, sizeof(inprimeiroacesso) );
    memset( dtnascimento, 0x0, sizeof(dtnascimento) );
    memset( nrdocumento, 0x0, sizeof(nrdocumento) );
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL
    select 
        pg.idpessoagestor, 
        pg.idpessoasistemaorigem, 
        pg.nmpessoagestor, 
        pg.nmgestor, 
        pg.nmmeiogestor, 
        pg.nmsobrenomegestor, 
        pg.nrtelefonecelularvivo, 
        pg.nrtelefonecelularoutro, 
        pg.nrtelefonefixo, 
        pg.email, 
        pg.idusuarioalteracao, 
        to_char(pg.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
        pg.inprimeiroacesso,  
        to_char(trunc(pg.dtnascimento),'DD/MM/YYYY'), 
        pg.nrdocumento
    into
        :idpessoagestor:i_idpessoagestor ,
        :idpessoasistemaorigem:i_idpessoasistemaorigem ,
        :nmpessoagestor:i_nmpessoagestor ,
        :nmgestor:i_nmgestor ,
        :nmmeiogestor:i_nmmeiogestor ,
        :nmsobrenomegestor:i_nmsobrenomegestor ,
        :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
        :nrtelefonecelularoutro:i_nrtelefonecelularoutro ,
        :nrtelefonefixo:i_nrtelefonefixo ,
        :email:i_email ,
        :idusuarioalteracao:i_idusuarioalteracao ,
        :dtultimaalteracao:i_dtultimaalteracao ,
        :inprimeiroacesso:i_inprimeiroacesso ,
        :dtnascimento:i_dtnascimento ,
        :nrdocumento:i_nrdocumento 
    from 
        customer.pessoagestor pg,
        customer.pessoagestorconta pgc
    where  
        pg.idpessoagestor = pgc.idpessoagestor
    and pgc.idconta = :idConta 
    and pgc.idtiporelacionamento in (5, 21)       
    and rownum < 2;

    if ( i_idpessoagestor < 0 )
    {
        ULOG( "*** Gestor nao encontrado, buscando cdConta ***" );
        
        memset( cdConta,0x0,sizeof(cdConta) );
        i_cdConta = -1;
        
        EXEC SQL SELECT CDCONTA INTO :cdConta:i_cdConta FROM CUSTOMER.CONTA WHERE IDCONTA = :idConta ;
        if ( i_cdConta < 0 )
        {
            ULOG( "@@@ Conta nao encontrada..." );
            
            xml_g->createTag( "PessoaGestorVO" );
                xml_g->addItem( "idPessoaGestor", "" );
                xml_g->addItem( "idPessoaSistemaOrigem", "" );
                xml_g->addItem( "nmPessoaGestor", "" );
                xml_g->addItem( "nmGestor", "" );
                xml_g->addItem( "nmMeioGestor", "" );
                xml_g->addItem( "nmSobrenomeGestor", "" );
                xml_g->addItem( "nrTelefoneCelularVivo", "" );
                xml_g->addItem( "nrTelefoneCelularOutro", "" );
                xml_g->addItem( "nrTelefoneFixo", "" );
                xml_g->addItem( "EMail", "" );
                xml_g->addItem( "idUsuarioAlteracao", "" );
                xml_g->addItem( "dtUltimaAlteracao", "" );
                xml_g->addItem( "inPrimeiroAcesso", "" );
                xml_g->addItem( "dtNascimento", "" );
                xml_g->addItem( "nrDocumento", "" );
            xml_g->closeTag();
        }
        else
        {
            trim(cdConta);
            ULOG( "### Pesquisando informacoes do contrato cdConta [%s]", cdConta );
            
            EXEC SQL 
            SELECT 
               NR_TELEFONE_SMS, 
               DS_EMAIL, 
               NR_TELEFONE_COM 
            INTO
               :nrtelefonecelularvivo:i_nrtelefonecelularvivo ,
               :email:i_email ,
               :nrtelefonefixo:i_nrtelefonefixo
            FROM 
               VOLE.INF_CAD_PROTOCOLO 
            WHERE
               NR_CONTRATO = :cdConta ;
            
            trim(nrtelefonecelularvivo);
            trim(email);
            trim(nrtelefonefixo);
            ULOG( "### nrtelefonecelularvivo [%s]", nrtelefonecelularvivo );
            ULOG( "### email [%s]", email );
            ULOG( "### nrtelefonefixo [%s]", nrtelefonefixo );

            xml_g->createTag( "PessoaGestorVO" );
                xml_g->addItem( "idPessoaGestor", "" );
                xml_g->addItem( "idPessoaSistemaOrigem", "" );
                xml_g->addItem( "nmPessoaGestor", "" );
                xml_g->addItem( "nmGestor", "" );
                xml_g->addItem( "nmMeioGestor", "" );
                xml_g->addItem( "nmSobrenomeGestor", "" );
                xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
                xml_g->addItem( "nrTelefoneCelularOutro", "" );
                xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
                xml_g->addItem( "EMail", trim(email) );
                xml_g->addItem( "idUsuarioAlteracao", "" );
                xml_g->addItem( "dtUltimaAlteracao", "" );
                xml_g->addItem( "inPrimeiroAcesso", "" );
                xml_g->addItem( "dtNascimento", "" );
                xml_g->addItem( "nrDocumento", "" );
            xml_g->closeTag();

        }
    }
    else
    {
        xml_g->createTag( "PessoaGestorVO" );
            xml_g->addItem( "idPessoaGestor",  trim(idpessoagestor) );
            xml_g->addItem( "idPessoaSistemaOrigem", trim(idpessoasistemaorigem) );
            xml_g->addItem( "nmPessoaGestor", trim(nmpessoagestor) );
            xml_g->addItem( "nmGestor", trim(nmgestor) );
            xml_g->addItem( "nmMeioGestor", trim(nmmeiogestor) );
            xml_g->addItem( "nmSobrenomeGestor",  trim(nmsobrenomegestor) );
            xml_g->addItem( "nrTelefoneCelularVivo", trim(nrtelefonecelularvivo) );
            xml_g->addItem( "nrTelefoneCelularOutro", trim(nrtelefonecelularoutro) );
            xml_g->addItem( "nrTelefoneFixo", trim(nrtelefonefixo) );
            xml_g->addItem( "EMail", trim(email) );
            xml_g->addItem( "idUsuarioAlteracao",  trim(idusuarioalteracao) );
            xml_g->addItem( "dtUltimaAlteracao", trim(dtultimaalteracao) );
            xml_g->addItem( "inPrimeiroAcesso", trim(inprimeiroacesso) );
            xml_g->addItem( "dtNascimento", trim(dtnascimento) );
            xml_g->addItem( "nrDocumento", trim(nrdocumento) );
        xml_g->closeTag();
    }

    ULOG_END( "getGestorByConta()" );
    
    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getEnderecoGestor( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getEnderecoGestor()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[42];
       
       char idpessoaendereco[43];
       char idpessoa[43];
       char nrsequencia[43];
       char idpais[43];
       char nmmunicipio[256];
       char nmlocalidade[256];
       char nmbairro[256];
       char nmtipologradouro[256];
       char nmtitulologradouro[256];
       char nmlogradouro[256];
       char nrendereco[256];
       char dsenderecocomplemento[256];
       char inenderecopreferencial[256];
       char nrcep[16];
       char dtcadastro[32];
       char idtipoendereco[43];
       char tssincronismo[256];
       char dtexpiracao[32];
       char sqsincronismo[256];
       char iduf[43];
       char dsaoscuidados[256];
       char cdcaixapostal[128];
       char idsistemaorigem[43];
       char idenderecosistemaorigem[43];
       char idusuarioalteracao[43];
       char dtultimaalteracao[32];
       char inenderecosujo[256];
       char sgUF[3];
       
       short i_idpessoaendereco = -1;
       short i_idpessoa = -1;
       short i_nrsequencia = -1;
       short i_idpais = -1;
       short i_nmmunicipio = -1;
       short i_nmlocalidade = -1;
       short i_nmbairro = -1;
       short i_nmtipologradouro = -1;
       short i_nmtitulologradouro = -1;
       short i_nmlogradouro = -1;
       short i_nrendereco = -1;
       short i_dsenderecocomplemento = -1;
       short i_inenderecopreferencial = -1;
       short i_nrcep = -1;
       short i_dtcadastro = -1;
       short i_idtipoendereco = -1;
       short i_tssincronismo = -1;
       short i_dtexpiracao = -1;
       short i_sqsincronismo = -1;
       short i_iduf = -1;
       short i_dsaoscuidados = -1;
       short i_cdcaixapostal = -1;
       short i_idsistemaorigem = -1;
       short i_idenderecosistemaorigem = -1;
       short i_idusuarioalteracao = -1;
       short i_dtultimaalteracao = -1;
       short i_inenderecosujo = -1;
       short i_sgUF = -1;
       
    EXEC SQL END DECLARE SECTION;
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    memset( idpessoaendereco, 0x0, sizeof(idpessoaendereco) );
    memset( idpessoa, 0x0, sizeof(idpessoa) );
    memset( nrsequencia, 0x0, sizeof(nrsequencia) );
    memset( idpais, 0x0, sizeof(idpais) );
    memset( nmmunicipio, 0x0, sizeof(nmmunicipio) );
    memset( nmlocalidade, 0x0, sizeof(nmlocalidade) );
    memset( nmbairro, 0x0, sizeof(nmbairro) );
    memset( nmtipologradouro, 0x0, sizeof(nmtipologradouro) );
    memset( nmtitulologradouro, 0x0, sizeof(nmtitulologradouro) );
    memset( nmlogradouro, 0x0, sizeof(nmlogradouro) );
    memset( nrendereco, 0x0, sizeof(nrendereco) );
    memset( dsenderecocomplemento, 0x0, sizeof(dsenderecocomplemento) );
    memset( inenderecopreferencial, 0x0, sizeof(inenderecopreferencial) );
    memset( nrcep, 0x0, sizeof(nrcep) );
    memset( dtcadastro, 0x0, sizeof(dtcadastro) );
    memset( idtipoendereco, 0x0, sizeof(idtipoendereco) );
    memset( tssincronismo, 0x0, sizeof(tssincronismo) );
    memset( dtexpiracao, 0x0, sizeof(dtexpiracao) );
    memset( sqsincronismo, 0x0, sizeof(sqsincronismo) );
    memset( iduf, 0x0, sizeof(iduf) );
    memset( dsaoscuidados, 0x0, sizeof(dsaoscuidados) );
    memset( cdcaixapostal, 0x0, sizeof(cdcaixapostal) );
    memset( idsistemaorigem, 0x0, sizeof(idsistemaorigem) );
    memset( idenderecosistemaorigem, 0x0, sizeof(idenderecosistemaorigem) );
    memset( idusuarioalteracao, 0x0, sizeof(idusuarioalteracao) );
    memset( dtultimaalteracao, 0x0, sizeof(dtultimaalteracao) );
    memset( inenderecosujo, 0x0, sizeof(inenderecosujo) );
    memset( sgUF, 0x0, sizeof(sgUF) );
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL
    SELECT 
        pe.idpessoaendereco, 
        pe.idpessoa, 
        pe.nrsequencia, 
        pe.idpais, 
        pe.nmmunicipio, 
        pe.nmlocalidade, 
        pe.nmbairro, 
        pe.nmtipologradouro, 
        pe.nmtitulologradouro, 
        pe.nmlogradouro, 
        pe.nrendereco, 
        pe.dsenderecocomplemento, 
        pe.inenderecopreferencial, 
        pe.nrcep, 
        to_char(pe.dtcadastro,'DD/MM/YYYY HH24:MI:SS'), 
        pe.idtipoendereco, 
        pe.tssincronismo, 
        to_char(pe.dtexpiracao,'DD/MM/YYYY HH24:MI:SS'), 
        pe.sqsincronismo, 
        pe.iduf, 
        pe.dsaoscuidados, 
        pe.cdcaixapostal, 
        pe.idsistemaorigem, 
        pe.idenderecosistemaorigem, 
        pe.idusuarioalteracao, 
        to_char(pe.dtultimaalteracao,'DD/MM/YYYY HH24:MI:SS'), 
        pe.inenderecosujo ,
        u.sguf
    into
        :idpessoaendereco:i_idpessoaendereco ,
        :idpessoa:i_idpessoa ,
        :nrsequencia:i_nrsequencia ,
        :idpais:i_idpais ,
        :nmmunicipio:i_nmmunicipio ,
        :nmlocalidade:i_nmlocalidade ,
        :nmbairro:i_nmbairro ,
        :nmtipologradouro:i_nmtipologradouro ,
        :nmtitulologradouro:i_nmtitulologradouro ,
        :nmlogradouro:i_nmlogradouro ,
        :nrendereco:i_nrendereco ,
        :dsenderecocomplemento:i_dsenderecocomplemento ,
        :inenderecopreferencial:i_inenderecopreferencial ,
        :nrcep:i_nrcep ,
        :dtcadastro:i_dtcadastro ,
        :idtipoendereco:i_idtipoendereco ,
        :tssincronismo:i_tssincronismo ,
        :dtexpiracao:i_dtexpiracao ,
        :sqsincronismo:i_sqsincronismo ,
        :iduf:i_iduf ,
        :dsaoscuidados:i_dsaoscuidados ,
        :cdcaixapostal:i_cdcaixapostal ,
        :idsistemaorigem:i_idsistemaorigem ,
        :idenderecosistemaorigem:i_idenderecosistemaorigem ,
        :idusuarioalteracao:i_idusuarioalteracao ,
        :dtultimaalteracao:i_dtultimaalteracao ,
        :inenderecosujo:i_inenderecosujo ,
        :sgUF:i_sgUF
    FROM 
        customer.pessoaendereco pe,
        apoio.uf u
    where 
        pe.idPessoa = :idPessoaGestor 
    and pe.iduf = u.iduf
    and rownum < 2;
                
    xml_g->createTag( "EnderecoGestorVO" );
        xml_g->addItem( "idPessoaEndereco",        trim(idpessoaendereco) );
        xml_g->addItem( "idPessoa",                trim(idpessoa) );
        xml_g->addItem( "nrSequencia",             trim(nrsequencia) );
        xml_g->addItem( "idPais",                  trim(idpais) );
        xml_g->addItem( "nmMunicipio",             trim(nmmunicipio) );
        xml_g->addItem( "nmLocalidade",            trim(nmlocalidade) );
        xml_g->addItem( "nmBairro",                trim(nmbairro) );
        xml_g->addItem( "nmTipoLogradouro",        trim(nmtipologradouro) );
        xml_g->addItem( "nmTituloLogradouro",      trim(nmtitulologradouro) );
        xml_g->addItem( "nmLogradouro",            trim(nmlogradouro) );
        xml_g->addItem( "nrEndereco",              trim(nrendereco) );
        xml_g->addItem( "dsEnderecoComplemento",   trim(dsenderecocomplemento) );
        xml_g->addItem( "inEnderecoPreferencial",  trim(inenderecopreferencial) );
        xml_g->addItem( "nrCep",                   trim(nrcep) );
        xml_g->addItem( "dtCadastro",              trim(dtcadastro) );
        xml_g->addItem( "idTipoEndereco",          trim(idtipoendereco) );
        xml_g->addItem( "tsSincronismo",           trim(tssincronismo) );
        xml_g->addItem( "dtExpiracao",             trim(dtexpiracao) );
        xml_g->addItem( "sqSincronismo",           trim(sqsincronismo) );
        xml_g->addItem( "idUF",                    trim(iduf) );
        xml_g->addItem( "dsAosCuidados",           trim(dsaoscuidados) );
        xml_g->addItem( "cdCaixaPostal",           trim(cdcaixapostal) );
        xml_g->addItem( "idSistemaOrigem",         trim(idsistemaorigem) );
        xml_g->addItem( "idEnderecoSistemaOrigem", trim(idenderecosistemaorigem) );
        xml_g->addItem( "idUsuarioAlteracao",      trim(idusuarioalteracao) );
        xml_g->addItem( "dtUltimaAlteracao",       trim(dtultimaalteracao) );
        xml_g->addItem( "inEnderecoSujo",          trim(inenderecosujo) );
        xml_g->addItem( "sgUF",                    trim(sgUF) );
    xml_g->closeTag();


    ULOG_END( "getEnderecoGestor()" );
 
    return;
    
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void validaGestorCPFTelefone( char * cpfPrm, char * telefonePrm, bool identifyOnlyByLinhaVivo, XMLGen* xml_g )
{
    ULOG_START( "validaGestorCPFTelefone()" );

    struct sqlca sqlca;
    bool retorno;

    EXEC SQL BEGIN DECLARE SECTION;

       int ct;
       char cpf[32];
       char telefone[16];
       
    EXEC SQL END DECLARE SECTION;
    
    strcpy( cpf, cpfPrm );
    strcpy( telefone, telefonePrm );
    
    ULOG( "cpf [%s]", cpf );
    ULOG( "telefone [%s]", telefone );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL
    select 
       count (pg.IDPESSOAGESTOR) as count
    into
       :ct
    from 
       customer.pessoagestor pg
    where 
       pg.nrdocumento = :cpf
    and pg.nrtelefonecelularvivo = :telefone;
    
    if ( ct == 0 )
    {
        EXEC SQL
        select 
           count (pg.IDPESSOAGESTOR) as count
        into
           :ct
        from 
           customer.pessoagestor pg
        where 
           pg.nmmeiogestor = :cpf 
        and pg.nrtelefonecelularvivo = :telefone;
    }
    
    ULOG( "ct [%d]", ct );
    
    xml_g->createTag( "ValidaGestorVO" );
        xml_g->addItem( "Count", ct );
    xml_g->closeTag();
    ULOG_END( "validaGestorCPFTelefone()" );
    
    return;
    
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void LogAdm( char * idPessoaGestorPrm, char * nrProtocoloPrm, char * nrCNPJPrm, char * cdContaPrm )
{
    ULOG_START( "LogAdm()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm;
        char * nrProtocolo = nrProtocoloPrm;
        char * nrCNPJ = nrCNPJPrm;
        char * cdConta = cdContaPrm;
        
    EXEC SQL END DECLARE SECTION;


    ULOG( "### idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "### nrProtocolo    [%s]", nrProtocolo );
    ULOG( "### nrCNPJ         [%s]", nrCNPJ );
    ULOG( "### cdConta        [%s]", cdConta );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;

    EXEC SQL
    INSERT INTO VOLE.ADMCONTASLOG
    (
        IDPESSOAGESTOR ,
        NRCNPJ ,
        CDCONTA ,
        NRPROTOCOLO ,
        DATAALTERACAO 
    )
    VALUES
    (
        :idPessoaGestor ,
        :nrCNPJ ,
        :cdConta ,
        :nrProtocolo ,
        SYSDATE
    );
                
    ULOG_END( "LogAdm()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void GravaLogLogin( char * idPessoaGestorPrm, char * tpGestorPrm, char * IPClientePrm )
{
    ULOG_START( "GravaLogLogin()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char * idPessoaGestor = idPessoaGestorPrm;
        char * tpGestor = tpGestorPrm;
        char * IPCliente = IPClientePrm;
        int    inPrimeiroAcesso;
        int    ct;

    EXEC SQL END DECLARE SECTION;


    ULOG( "### idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "### tpGestor       [%s]", tpGestor );
    ULOG( "### IPCliente      [%s]", IPCliente );

    EXEC SQL WHENEVER SQLERROR  GOTO  sqlErrorConstrutor;
    
    EXEC SQL
    SELECT 
       COUNT(IDPESSOAGESTOR) 
    INTO 
       :ct
    FROM
       VOLE.LOGINGESTORLOG
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;
    
    ULOG( ">>> idPessoaGestor [%s] possui [%d] acessos", idPessoaGestor, ct );
    
    inPrimeiroAcesso = (ct > 0 ? 0 : 1 );  /* ZERO indica que nao eh primeiro acesso */
    
    ULOG( "### inPrimeiroAcesso [%d]", inPrimeiroAcesso );

    EXEC SQL
    INSERT INTO VOLE.LOGINGESTORLOG
    (
        IDPESSOAGESTOR ,
        SGTIPORELACIONAMENTO ,
        IPCLIENTE ,
        DATALOGIN 
    )
    VALUES
    (
        :idPessoaGestor ,
        :tpGestor ,
        :IPCliente ,
        SYSDATE
    );
                
    ULOG_END( "GravaLogLogin()" );

    return;

    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode);

}



void getGestorProtocolo( char * nrProtocoloPrm, XMLGen* xml_g )
{
    ULOG_START( "getGestorProtocolo()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char nrProtocolo[65];
        
        VARCHAR idPessoaGestor[42];
        short   i_idPessoaGestor = -1;
        VARCHAR nrCPF[128];
        short   i_nrCPF = -1;
        VARCHAR nmGestor[256];
        short   i_nmGestor = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    strcpy( nrProtocolo, nrProtocoloPrm );
    
    ULOG( "nrProtocolo [%s]", nrProtocolo );

    memset( &idPessoaGestor, 0x0, sizeof(idPessoaGestor) );
    memset( &nrCPF, 0x0, sizeof(nrCPF) );
    memset( &nmGestor, 0x0, sizeof(nmGestor) );
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL
    SELECT
       IDPESSOAGESTOR
    INTO
       :idPessoaGestor:i_idPessoaGestor
    FROM
       VOLE.ADMCONTASLOG
    WHERE 
       NRPROTOCOLO = :nrProtocolo;
    
    CONVIND( idPessoaGestor, i_idPessoaGestor );
       
    EXEC SQL
    SELECT
       NRDOCUMENTO ,
       NMPESSOAGESTOR
    INTO
       :nrCPF:i_nrCPF ,
       :nmGestor:i_nmGestor
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE 
       IDPESSOAGESTOR = :idPessoaGestor;
                
    CONVIND( nrCPF, i_nrCPF );
    CONVIND( nmGestor, i_nmGestor );

    xml_g->addItem( "idPessoaGestor", (char*)idPessoaGestor.arr );
    xml_g->addItem( "nrCPF", (char*)nrCPF.arr );
    xml_g->addItem( "nmGestor", (char*)nmGestor.arr );

    ULOG_END( "getGestorProtocolo()" );
 
    return;
    
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}
