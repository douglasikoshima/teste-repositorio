
#undef SQLCA
#define SQLCA_NONE

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
 
#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

 
EXEC SQL INCLUDE SQLCA;

char * rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim(char *pStr)
{
	int lInd = 0;

	if (pStr == NULL)
			return NULL;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char * trim(char *pStr){
	return ltrim(rtrim(pStr));		
}



void getContaByCnpjAccountNumber_VOLE( char * idPessoaGestorPrm,
                                       char * cnpjPrm,
                                       char * accountNumberPrm, 
                                       XMLGen * xml_g )
{
    ULOG_START( "getContaByCnpjAccountNumber_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char cnpj[64];
       char accountNumber[128];
       
       char idConta[43];
       short i_idConta = -1;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( cnpj          , cnpjPrm );
    strcpy( accountNumber , accountNumberPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "cnpj           [%s]", cnpj );
    ULOG( "accountNumber  [%s]", accountNumber );
    
    memset( idConta, 0x0, sizeof(idConta) );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    select 
       c.idconta
    into
      :idConta:i_idConta    
    from 
       customer.pessoadocumento pd, 
       customer.documento d, 
       apoio.tipodocumento td, 
       customer.pessoadepara pdp, 
       (select idconta 
        from customer.conta 
        where cdconta = :accountNumber) c, 
       customer.pessoaconta pc, 
       customer.pessoagestorconta pgc 
    where td.sgclassificacao = 'CNPJ' 
    and td.idtipodocumento = d.idtipodocumento 
    and pd.iddocumento = d.iddocumento 
    and pdp.idpessoa = pd.idpessoa 
    and pc.idpessoadepara = pdp.idpessoadepara 
    and pc.idconta = c.idconta 
    and d.nrdocumento = :cnpj 
    and c.idconta = pgc.idconta 
    and pgc.idpessoagestor = :idPessoaGestor
    and rownum < 2;
    
    xml_g->createTag( "ContaVO" );
        xml_g->addItem( "idConta",  trim(idConta) );
    xml_g->closeTag();


    ULOG_END( "getContaByCnpjAccountNumber_VOLE()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getContaByCnpjAccountNumber( char * idPessoaGestorPrm,
                                  char * cnpjPrm,
                                  char * accountNumberPrm, 
                                  XMLGen * xml_g )
{
    ULOG_START( "getContaByCnpjAccountNumber()" );
    
    struct sqlca sqlca;
    char   MsgRet[256];

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char cnpj[64];
       char accountNumber[128];
       
       VARCHAR  idConta[43];
       short i_idConta = -1;
       
       VARCHAR cdConta[43];
       short i_cdConta = -1;
       
       int ctMaster;
       int ctConta;
       int inExisteGestor;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( cnpj          , cnpjPrm );
    strcpy( accountNumber , accountNumberPrm );

    strcpy( MsgRet, "OK" );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "cnpj           [%s]", cnpj );
    ULOG( "accountNumber  [%s]", accountNumber );
    
    memset( &idConta, 0x0, sizeof(idConta) );
    memset( &cdConta, 0x0, sizeof(cdConta) );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT 
       count(idpessoagestor)
    INTO
       :inExisteGestor
    FROM
       customer.pessoagestor
    WHERE
       idpessoagestor = :idPessoaGestor ;
       
    if ( inExisteGestor == 0 )
    {
        ULOG( "*** Nao foi encontrado idPessoaGestor" );
        
        xml_g->createTag( "Gestor" );
            xml_g->addItem( "nrDocumento", "" );
            xml_g->addItem( "MsgRet" ,  "NOK - Gestor não encontrado" );
        xml_g->closeTag();

        ULOG_END( "getContaByCnpjAccountNumber()" );
        return;
    }
    
    if ( cnpj[0] != 0x0 && accountNumber[0] == 0x0 )
    {
        EXEC SQL
        SELECT
           COUNT(PG.IDPESSOAGESTOR)
        INTO
           :ctMaster
        FROM
           CUSTOMER.PESSOAGESTORMASTER   PGM ,
           CUSTOMER.PESSOAGESTOR         PG
        WHERE
           PG.IDPESSOAGESTOR = :idPessoaGestor
        AND
           PG.NRDOCUMENTO = PGM.NRDOCUMENTOGESTOR
        AND
           PGM.NRDOCUMENTOEMPRESA = :cnpj ;
        
        if ( ctMaster == 0 )
        {
            ULOG( "*** Nao foi encontrado CNPJ associado a este Gestor" );
            
            xml_g->createTag( "Gestor" );
                xml_g->addItem( "nrDocumento",  trim(cnpj) );
                xml_g->addItem( "MsgRet" ,  "NOK - Gestor não pertence ao CNPJ informado" );
            xml_g->closeTag();

            ULOG_END( "getContaByCnpjAccountNumber()" );
            return;
        }
        else
        {
            xml_g->createTag( "Gestor" );
                xml_g->addItem( "nrDocumento",  trim(cnpj) );
                xml_g->addItem( "MsgRet" ,  "OK" );
            xml_g->closeTag();
            return;
        }
    }
    else
    {
        if ( cnpj[0] != 0x0 && accountNumber[0] != 0x0 )
        {
            EXEC SQL
            select 
               COUNT(pd.idpessoa)
            into
              :ctConta
            from 
               customer.pessoadocumento pd, 
               customer.documento d, 
               apoio.tipodocumento td, 
               customer.pessoadepara pdp, 
               (select idconta 
                from customer.conta 
                where cdconta = :accountNumber) c, 
               customer.pessoaconta pc, 
               customer.pessoagestorconta pgc 
            where td.sgclassificacao = 'CNPJ' 
            and td.idtipodocumento = d.idtipodocumento 
            and pd.iddocumento = d.iddocumento 
            and pdp.idpessoa = pd.idpessoa 
            and pc.idpessoadepara = pdp.idpessoadepara 
            and pc.idconta = c.idconta 
            and d.nrdocumento = :cnpj 
            and c.idconta = pgc.idconta 
            and pgc.idpessoagestor = :idPessoaGestor ;

            if ( ctConta == 0 )
            {
                ULOG( "*** Nao foi encontrado Conta associada a este Gestor" );
                
                xml_g->createTag( "ContaVO" );
                    xml_g->addItem( "cdConta",  trim(accountNumber) );
                    xml_g->addItem( "MsgRet" ,  "NOK - Conta informada não está associada a este Gestor" );
                xml_g->closeTag();

                ULOG_END( "getContaByCnpjAccountNumber()" );
                return;
            }
            
        }
    }
    
    EXEC SQL
    select 
       c.idconta
    into
      :idConta:i_idConta    
    from 
       customer.pessoadocumento pd, 
       customer.documento d, 
       apoio.tipodocumento td, 
       customer.pessoadepara pdp, 
       (select idconta 
        from customer.conta 
        where cdconta = :accountNumber) c, 
       customer.pessoaconta pc, 
       customer.pessoagestorconta pgc 
    where td.sgclassificacao = 'CNPJ' 
    and td.idtipodocumento = d.idtipodocumento 
    and pd.iddocumento = d.iddocumento 
    and pdp.idpessoa = pd.idpessoa 
    and pc.idpessoadepara = pdp.idpessoadepara 
    and pc.idconta = c.idconta 
    and d.nrdocumento = :cnpj 
    and c.idconta = pgc.idconta 
    and pgc.idpessoagestor = :idPessoaGestor
    and rownum < 2;
    
    CONVIND( idConta,i_idConta );
    EXEC SQL select cdconta into :cdConta:i_cdConta from customer.conta where idconta = :idConta;
    CONVIND( cdConta,i_cdConta );
    
    xml_g->createTag( "ContaVO" );
        xml_g->addItem( "cdConta", (char*)cdConta.arr );
        xml_g->addItem( "MsgRet" , "OK" );
    xml_g->closeTag();


    ULOG_END( "getContaByCnpjAccountNumber()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void hasContaAssociada( char * idPessoaGestorPrm, XMLGen * xml_g )
{
    ULOG_START( "hasContaAssociada()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       int  ct;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    select count(1) as numberOfAccounts
    into :ct
    from vole.contagestor cg 
    where cg.idpessoagestor = :idPessoaGestor ;
    
    xml_g->createTag( "ContaVO" );
        xml_g->addItem( "nrContas", ct );
    xml_g->closeTag();


    ULOG_END( "hasContaAssociada()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void jaCadastrada( char * idPessoaGestorPrm, char * idContaPrm, XMLGen * xml_g )
{
    ULOG_START( "jaCadastrada()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char idConta[43];
       int  ct;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( idConta       , idContaPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "idConta        [%s]", idConta );
    

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    select count(1) as numberOfAccounts
    into :ct
    from vole.contagestor cg 
    where cg.idpessoagestor = :idPessoaGestor
    and cg.idconta = :idConta;
    
    xml_g->createTag( "ContaVO" );
        xml_g->addItem( "ContaCadastrada", ct );
    xml_g->closeTag();


    ULOG_END( "jaCadastrada()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void associaContaByIdGestor_VOLE( char * idPessoaGestorPrm, char * idContaPrm )
{
    ULOG_START( "associaContaByIdGestor_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char idConta[43];
       int  ct;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( idConta       , idContaPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "idConta        [%s]", idConta );
    

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    UPDATE vole.contagestor 
    SET DTULTIMAALTERACAO = SYSDATE
    WHERE IDPESSOAGESTOR = :idPessoaGestor
    AND IDCONTA = :idConta;
    if ( sqlca.sqlerrd[2] == 0 )
    {
        EXEC SQL
        insert into vole.contagestor 
        (
           IDPESSOAGESTOR ,
           IDCONTA ,
           DTULTIMAALTERACAO
        ) 
        values 
        (
           :idPessoaGestor , 
           :idConta , 
           sysdate
        );
    }
    
    ULOG_END( "associaContaByIdGestor_VOLE()" );
    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



int associaContaByIdGestor( char * idPessoaGestorPrm, char * cdContaPrm )
{
    ULOG_START( "associaContaByIdGestor()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char cdConta[43];
       char cdCnpj[32];
       char cpf[32];
       int  ct;
       VARCHAR idConta[65];
       short i_idConta = -1;
       VARCHAR nrCPF[65];
       short i_nrCPF = -1;
       int ctConta;
       
    EXEC SQL END DECLARE SECTION;

    cdConta[0] = 0x0;
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    if ( cdContaPrm[0] != 0x0 ) strcpy( cdConta, cdContaPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    
    if ( cdConta[0] != 0x0 ) ULOG( "cdConta [%s]", cdConta );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       IDCONTA
    INTO
       :idConta:i_idConta
    FROM
       CUSTOMER.CONTA
    WHERE
       CDCONTA = :cdConta;
    
    CONVIND( idConta, i_idConta );

    if ( i_idConta != -1 )
    {
        EXEC SQL
        UPDATE vole.contagestor 
        SET DTULTIMAALTERACAO = SYSDATE
        WHERE IDPESSOAGESTOR = :idPessoaGestor
        AND IDCONTA = :idConta;
        
        if ( sqlca.sqlerrd[2] == 0 )
        {
            EXEC SQL
            insert into vole.contagestor 
            (
               IDPESSOAGESTOR ,
               IDCONTA ,
               DTULTIMAALTERACAO
            ) 
            values 
            (
               :idPessoaGestor , 
               :idConta , 
               sysdate
            );
        }
    
    }
    else
    {
        ULOG( "*** VALOR CDCONTA INVALIDO" );
        ULOG_END( "associaContaByIdGestor()" );
        return -1;
    }
    
    ULOG_END( "associaContaByIdGestor()" );
    return 0;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void associaGestorMaster( char * idPessoaGestorPrm, char * cdCNPJPrm )
{
    ULOG_START( "associaGestorMaster()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];
       char cdCnpj[32];
       char cpf[32];
       int  ct;
       VARCHAR nrDocumento[65];
       short i_nrDocumento = -1;
       int ctConta;
       
    EXEC SQL END DECLARE SECTION;

    memset( &nrDocumento, 0x0, sizeof(nrDocumento) );

    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( cdCnpj, cdCNPJPrm );

    ULOG( "idPessoaGestor [%s]", idPessoaGestor );
    ULOG( "cdCnpj         [%s]", cdCnpj );
    

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       NRDOCUMENTO
    INTO
       :nrDocumento:i_nrDocumento
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;
   
    CONVIND( nrDocumento, i_nrDocumento );

    EXEC SQL
    UPDATE customer.pessoagestormaster 
    SET DTULTIMAALTERACAO = SYSDATE ,
        IDUSUARIOALTERACAO = 11 ,
        INASSOCIACAO = 1
    WHERE NRDOCUMENTOGESTOR = :nrDocumento
    AND NRDOCUMENTOEMPRESA = :cdCnpj ;
    
    if ( sqlca.sqlerrd[2] == 0 )
    {
        EXEC SQL
        insert into customer.pessoagestormaster
        (
           NRDOCUMENTOGESTOR ,
           NRDOCUMENTOEMPRESA ,
           IDUSUARIOALTERACAO ,
           DTULTIMAALTERACAO  ,
           INASSOCIACAO 
        ) 
        values 
        (
           :nrDocumento ,
           :cdCnpj ,
           11 ,
           SYSDATE ,
           1
        );
        
    }
    
    
    ULOG_END( "associaGestorMaster()" );
    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}
