#include <stdio.h>
#include <tuxfw.h>

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<string>
#include <iterator>
#include <list>
#include "../../negocio/UtilCanais/include/UtilCanais/UtilCanais.hpp"


using namespace std;

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

typedef list<int> LISTA_ID;


// Prototipos
void SqlErrorConsultaGestor( sqlca * sqlca );
void proCbuscarGestorLinha( char * buffer, XMLGen * Saida );
void proCbuscarCNPJs( char * nrDocumentoPrm, XMLGen * Saida );
void proCbuscarContasPagadoras( char * nrCNPJ, XMLGen * xml_g );


void proCbuscarGestorLinha( char * nrTelefonePrm, XMLGen * Saida )
{
    ULOG_START( "proCbuscarGestorLinha()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int inGestores = 0;
        VARCHAR nrTelefone[16];
        VARCHAR nrDDD[3];
        VARCHAR idConta[40];
        short   i_idConta = -1;

        VARCHAR cdConta[65];
        short   i_cdConta = -1;

        VARCHAR nrTelefoneGestor[256];
        short i_nrTelefoneGestor = -1;
        
        VARCHAR nrDocumento[65];
        short i_nrDocumento = -1;
        
        VARCHAR nmPessoaGestor[128];
        short i_nmPessoaGestor = -1;
    
    EXEC SQL END DECLARE SECTION;

    memset( &nrTelefone,0x0,sizeof(nrTelefone) );
    memset( &nrDDD,0x0,sizeof(nrDDD) );

    ULOG( "*** Linha de parametro [%s]",nrTelefonePrm );
    
    sprintf( (char*)nrDDD.arr,"%.2s",nrTelefonePrm );    nrDDD.len = 2;
    sprintf( (char*)nrTelefone.arr,"%.8s",&nrTelefonePrm[2] );    nrTelefone.len = 8;

    ULOG( "*** DDD    [%s]",(char*)nrDDD.arr );
    ULOG( "*** Linha  [%s]",(char*)nrTelefone.arr );

    EXEC SQL WHENEVER SQLERROR DO SqlErrorConsultaGestor( &sqlca );

    EXEC SQL
    select
       count(1)
    into
       :inGestores
    from
       CUSTOMER.PESSOAGESTOR        PESSOAGESTOR ,
       CUSTOMER.PESSOAGESTORCONTA   PESSOAGESTORCONTA ,
       apoio.arearegistro           arearegistro ,
       linha.linhabase              linhabase ,
       linha.linhatelefonica        linhatelefonica , 
       customer.linhaconta          linhaconta ,
       customer.conta               conta
    where
       arearegistro.cdarearegistro = :nrDDD
    and
       PESSOAGESTORCONTA.NRDOCUMENTO = PESSOAGESTOR.NRDOCUMENTO
    and
       PESSOAGESTORCONTA.IDCONTA = conta.idconta
    and 
       arearegistro.idarearegistro = linhabase.idarearegistro 
    and
       linhabase.nrlinha = :nrTelefone
    and
       linhatelefonica.idlinhabase = linhabase.idlinhabase 
    and
       linhaconta.idlinhatelefonica = linhatelefonica.idlinhatelefonica 
    and
       linhaconta.idconta = conta.idconta ;
       
    if ( inGestores > 1 )    // Mais de um gestor associado...
    {
        ULOG( ">>> Foram encontrados [%d] gestores para esta linha", inGestores );
        Saida->createTag( "ns1:GestorContaPJVO" );
        Saida->addProp( "xmlns:ns1","dados.vol.vivo.com.br/vo" );
        Saida->closeTag();
        ULOG_END("proCbuscarGestorLinha()");
        return;
    }
    
    /*  Primeira versao de query, fazia validacao de linha se existe na base Vivo.   */
    //EXEC SQL
    //select
       //conta.idconta ,
       //conta.cdConta ,
       //NVL(NVL(PESSOAGESTOR.NRTELEFONECELULARVIVO,PESSOAGESTOR.NRTELEFONECELULAROUTRO),PESSOAGESTOR.NRTELEFONEFIXO) as nrTelefone ,
       //PESSOAGESTOR.NRDOCUMENTO ,
       //PESSOAGESTOR.NMPESSOAGESTOR 
    //into
       //:idConta:i_idConta ,
       //:cdConta:i_cdConta ,
       //:nrTelefoneGestor:i_nrTelefoneGestor ,
       //:nrDocumento:i_nrDocumento ,
       //:nmPessoaGestor:i_nmPessoaGestor 
    //from
       //CUSTOMER.PESSOAGESTOR        PESSOAGESTOR ,
       //CUSTOMER.PESSOAGESTORCONTA   PESSOAGESTORCONTA ,
       //apoio.arearegistro           arearegistro ,
       //linha.linhabase              linhabase ,
       //linha.linhatelefonica        linhatelefonica , 
       //customer.linhaconta          linhaconta ,
       //customer.conta               conta
    //where
       //arearegistro.cdarearegistro = :nrDDD
    //and
       //PESSOAGESTORCONTA.NRDOCUMENTO = PESSOAGESTOR.NRDOCUMENTO
    //and
       //PESSOAGESTORCONTA.IDCONTA = conta.idconta
    //and 
       //arearegistro.idarearegistro = linhabase.idarearegistro 
    //and
       //linhabase.nrlinha = :nrTelefone
    //and
       //linhatelefonica.idlinhabase = linhabase.idlinhabase 
    //and
       //linhaconta.idlinhatelefonica = linhatelefonica.idlinhatelefonica 
    //and
       //linhaconta.idconta = conta.idconta 
    //and
       //rownum < 2;
    
    EXEC SQL
    select
       PESSOAGESTORCONTA.idconta ,
       conta.cdConta ,
       NVL(NVL(PESSOAGESTOR.NRTELEFONECELULARVIVO,PESSOAGESTOR.NRTELEFONECELULAROUTRO),PESSOAGESTOR.NRTELEFONEFIXO) as nrTelefone ,
       PESSOAGESTOR.NRDOCUMENTO ,
       PESSOAGESTOR.NMPESSOAGESTOR 
    into
       :idConta:i_idConta ,
       :cdConta:i_cdConta ,
       :nrTelefoneGestor:i_nrTelefoneGestor ,
       :nrDocumento:i_nrDocumento ,
       :nmPessoaGestor:i_nmPessoaGestor 
    from
       CUSTOMER.PESSOAGESTOR        PESSOAGESTOR ,
       CUSTOMER.PESSOAGESTORCONTA   PESSOAGESTORCONTA ,
	   customer.conta               conta 
    where
       PESSOAGESTOR.NRTELEFONECELULARVIVO = :nrDDD||:nrTelefone
    and
       PESSOAGESTORCONTA.NRDOCUMENTO = PESSOAGESTOR.NRDOCUMENTO
	and
	   conta.idconta = pessoagestorconta.idconta
    and
       rownum < 2;
       
    CONVIND( idConta, i_idConta );
    CONVIND( cdConta, i_cdConta );
    CONVIND( nrTelefoneGestor, i_nrTelefoneGestor );
    CONVIND( nrDocumento, i_nrDocumento );
    CONVIND( nmPessoaGestor, i_nmPessoaGestor );
    
    ULOG( "*** Encontrou idConta          [%s]", (char*)idConta.arr );
    ULOG( "*** Encontrou cdConta          [%s]", (char*)cdConta.arr );
    ULOG( "*** Encontrou nrTelefoneGestor [%s]", (char*)nrTelefoneGestor.arr );
    ULOG( "*** Encontrou nrDocumento      [%s]", (char*)nrDocumento.arr );
    ULOG( "*** Encontrou nmPessoaGestor   [%s]", (char*)nmPessoaGestor.arr );

    if ( i_nrDocumento != -1 )
    {
    Saida->createTag( "ns1:GestorContaPJVO" );
    Saida->addProp( "xmlns:ns1","dados.vol.vivo.com.br/vo" );
        Saida->addItem( "ns1:nrTelefoneVivo", (char*)nrTelefoneGestor.arr );
        Saida->addItem( "ns1:nrDocumentoGestor", (char*)nrDocumento.arr );
        Saida->addItem( "ns1:nmGestor", (char*)nmPessoaGestor.arr );
        Saida->createTag( "ns1:clientesAssociados" );
            Saida->createTag( "ns1:conta" );
                Saida->addItem( "ns1:idConta", (char*)idConta.arr );
                Saida->addItem( "ns1:cdConta", (char*)cdConta.arr );
                    Saida->addItem( "ns1:isPagadora", "true" );
                Saida->createTag( "ns1:linhasVO" );
                    Saida->addItem( "ns1:linha", nrTelefonePrm );
                Saida->closeTag();
            Saida->closeTag();
        Saida->closeTag();
    Saida->closeTag();
    }
    else
    {
        Saida->createTag( "ns1:GestorContaPJVO" );
        Saida->addProp( "xmlns:ns1","dados.vol.vivo.com.br/vo" );
        Saida->closeTag();
    }

    ULOG_END("proCbuscarGestorLinha()");
    
    

}


void proCbuscarCNPJs( char * nrDocumentoPrm, XMLGen * Saida )
{
    ULOG_START( "proCbuscarCNPJs()" );

    struct sqlca sqlca;
      
    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR nrDocumento[65];
        VARCHAR cdCNPJ[32];
        short i_cdCNPJ = -1;

    EXEC SQL END DECLARE SECTION;

    nrDocumento.len = strlen(nrDocumentoPrm);
    sprintf( (char*)nrDocumento.arr,"%.*s",nrDocumento.len, nrDocumentoPrm );

    EXEC SQL 
    DECLARE crConsultaCNPJ CURSOR FOR 
    SELECT DISTINCT
          D.NRDOCUMENTO AS CNPJ
    FROM
         CUSTOMER.PESSOAGESTORCONTA PGC,
         CUSTOMER.PESSOACONTA PC,
         CUSTOMER.PESSOADEPARA PDP,
         CUSTOMER.PESSOADOCUMENTO PD,
         CUSTOMER.DOCUMENTO D,     
         APOIO.TIPODOCUMENTO TD
    WHERE
        PGC.IDCONTA = PC.IDCONTA AND
        PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
        PDP.IDPESSOA = PD.IDPESSOA AND
        D.IDDOCUMENTO = PD.IDDOCUMENTO AND
        D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO AND
        TD.SGCLASSIFICACAO = 'CNPJ' AND
        PGC.NRDOCUMENTO = :nrDocumento
    ORDER BY D.NRDOCUMENTO;
        
      EXEC SQL WHENEVER SQLERROR DO SqlErrorConsultaGestor( &sqlca );
      
      EXEC SQL WHENEVER NOT FOUND DO BREAK;
      EXEC SQL OPEN crConsultaCNPJ;
      
    Saida->createTag( "ns1:GestorContaPJVO" );
    Saida->addProp( "xmlns:ns1","dados.vol.vivo.com.br/vo" );
    for( ;; )
    {
        EXEC SQL FETCH crConsultaCNPJ 
                       INTO :cdCNPJ:i_cdCNPJ ;

        CONVIND( cdCNPJ,i_cdCNPJ );
        Saida->createTag( "ns1:clientesAssociados" );
           Saida->addItem( "ns1:nrCNPJ", (char*)cdCNPJ.arr );
        Saida->closeTag();
    }
    Saida->closeTag();

    EXEC SQL CLOSE crConsultaCNPJ;

    ULOG_END("proCbuscarCNPJs()");

}


void proCbuscarContasPagadoras( char * nrCNPJ_Prm, XMLGen * Saida )
{
    ULOG_START( "proCbuscarContasPagadoras()" );

    struct sqlca sqlca;
      
    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR idConta[45];
        short i_idConta = -1;
        VARCHAR cdConta[45];
        short i_cdConta = -1;

        VARCHAR cdCNPJ[32];

    EXEC SQL END DECLARE SECTION;

    cdCNPJ.len = strlen(nrCNPJ_Prm);
    sprintf( (char*)cdCNPJ.arr,"%.*s",cdCNPJ.len, nrCNPJ_Prm );

    EXEC SQL 
    DECLARE crConsultaContasPagad CURSOR FOR 
    SELECT
        C.IDCONTA ,
        C.CDCONTA 
    FROM
        CUSTOMER.CONTA C,
        CUSTOMER.PESSOACONTA PC,
        CUSTOMER.PESSOADEPARA PDP,
        CUSTOMER.PESSOADOCUMENTO PD,
        CUSTOMER.DOCUMENTO D,     
        APOIO.TIPODOCUMENTO TD
    WHERE
        C.IDCONTA = PC.IDCONTA AND
        PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
        PDP.IDPESSOA = PD.IDPESSOA AND
        D.IDDOCUMENTO = PD.IDDOCUMENTO AND
        D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO AND
        TD.SGCLASSIFICACAO = 'CNPJ' AND
        D.NRDOCUMENTO = :cdCNPJ AND
        c.inpagadora = 1
    ORDER BY C.CDCONTA;
        
      EXEC SQL WHENEVER SQLERROR DO SqlErrorConsultaGestor( &sqlca );
      
      EXEC SQL WHENEVER NOT FOUND DO BREAK;
      EXEC SQL OPEN crConsultaContasPagad;
      
    Saida->createTag( "ns1:GestorContaPJVO" );
    Saida->addProp( "xmlns:ns1","dados.vol.vivo.com.br/vo" );
    Saida->createTag( "ns1:clientesAssociados" );
    Saida->addItem( "ns1:nrCNPJ", (char*)cdCNPJ.arr );
    for( ;; )
    {
        EXEC SQL FETCH crConsultaContasPagad 
                       INTO :idConta:i_idConta ,
                            :cdConta:i_cdConta ;

        CONVIND( idConta,i_idConta );
        CONVIND( cdConta,i_cdConta );

        Saida->createTag( "ns1:conta" );
           Saida->addItem( "ns1:idConta", (char*)idConta.arr );
           Saida->addItem( "ns1:cdConta", (char*)cdConta.arr );
           Saida->addItem( "ns1:isPagadora", "true" );
        Saida->closeTag();
    }
    Saida->closeTag();
    Saida->closeTag();

    EXEC SQL CLOSE crConsultaContasPagad;

    ULOG_END( "proCbuscarContasPagadoras()");

}


void SqlErrorConsultaGestor( sqlca * sqlca )
{
   ULOGE("SqlError -> sqlcode=%d,sqlerrmc=%.256s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
   throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
