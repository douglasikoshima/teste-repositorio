#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include "CadastroMSGSitef/CadastroMSGSitef.hpp"
#include <ctype.h>
 
EXEC SQL INCLUDE SQLCA;

CadastroMSGSitef::CadastroMSGSitef()
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::CadastroMSGSitef");
}
CadastroMSGSitef::~CadastroMSGSitef()
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::~CadastroMSGSitef");
}
// Adiciona uma nova mensagem na tabela
int CadastroMSGSitef::addMensagem(char*msgOrigem,char*msgDestino,char*login)
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::addMensagem");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;	
		char*cmsgOrigem = msgOrigem;
		char*cmsgDestino = msgDestino;
		char*clogin = login;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	EXEC SQL
		INSERT INTO 
		VOL.MENSAGEMRECARGA
		(
		IDMENSAGEMRECARGA,
		DSMENSAGEMSITEF,
		DSMENSAGEMTAV,
		DTULTIMAALTERACAO,
		NMLOGINUSUARIO
		)
		VALUES
		(
		VOL.MENSAGEMRECARGASQ.NEXTVAL,
		:cmsgOrigem,
		:cmsgDestino,
		SYSDATE,
		:clogin
		);

	return 1;

sqlErrorConstrutor:
	tuxfw_getlogger()->debug("sqlca.sqlcode = %d\r\n", sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode); 
}
// Atualiza uma mensagem na tabela por id
int CadastroMSGSitef::updateMensagem(char*idMensagemRecarga,char*msgDestino)
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::updateMensagem");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;	
		char*cidMensagemRecarga = idMensagemRecarga;
		char*cmsgDestino = msgDestino;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	EXEC SQL
		UPDATE VOL.MENSAGEMRECARGA
		SET DSMENSAGEMTAV = :cmsgDestino
		WHERE
		IDMENSAGEMRECARGA = :cidMensagemRecarga;
	return 1;

sqlErrorConstrutor:
	tuxfw_getlogger()->debug("sqlca.sqlcode = %d\r\n", sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode); 
}
// Remove a mensagem por id
int CadastroMSGSitef::deleteMensagem(char*idMensagemRecarga)
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::deleteMensagem");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;	
		char*cidMensagemRecarga = idMensagemRecarga;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	EXEC SQL WHENEVER NOT FOUND GOTO  sqlErrorConstrutor;
	EXEC SQL
		DELETE FROM VOL.MENSAGEMRECARGA
		WHERE
		IDMENSAGEMRECARGA = :cidMensagemRecarga;
	return 1;

sqlErrorConstrutor:
	tuxfw_getlogger()->debug("sqlca.sqlcode = %d\r\n", sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode); 
}
// Retorna todas as mensagens parametrizadas na tabela VOL.MENSAGEMRECARGA
int CadastroMSGSitef::getMensagens(XMLGen *xmlgen)
{
	tuxfw_getlogger()->debug("CadastroMSGSitef::getMensagens");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;	
		struct stParametro
		{
			VARCHAR idMensagemRecarga[10+1];
			VARCHAR dsMensagemSitef[500+1];
			VARCHAR dsMensagemTav[500+1];
			VARCHAR dtUltimaAlteracao[21];
			VARCHAR nmLoginUsuario[255+1];
		}m_stParametro;
		struct istParametro
		{
			short idMensagemRecarga;
			short dsMensagemSitef;
			short dsMensagemTav;
			short dtUltimaAlteracao;
			short nmLoginUsuario;
		}m_istParametro;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	EXEC SQL DECLARE LSTMENSAGEM CURSOR FOR
	SELECT
		IDMENSAGEMRECARGA,
		DSMENSAGEMSITEF,
		DSMENSAGEMTAV,
		TO_CHAR(DTULTIMAALTERACAO,'DD/MM/YYYY'),
		NMLOGINUSUARIO		
	FROM
		VOL.MENSAGEMRECARGA
	ORDER BY IDMENSAGEMRECARGA ASC;

	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL OPEN LSTMENSAGEM;
	xmlgen->createTag("MensagemSITEFVO");
	xmlgen->addProp("xmlns","voltav.fo.vivo.com.br/vo");
	for(;;)
	{
		memset(&m_stParametro,0,sizeof(m_stParametro));
		memset(&m_istParametro,0,sizeof(m_istParametro));
		EXEC SQL FETCH LSTMENSAGEM INTO :m_stParametro:m_istParametro;
		xmlgen->createTag("MensagemRecarga");
		xmlgen->addItem("idMensagemRecarga",(char*)m_stParametro.idMensagemRecarga.arr);
		xmlgen->addItem("dsMensagemSitef",(char*)m_stParametro.dsMensagemSitef.arr);
		xmlgen->addItem("dsMensagemTav",(char*)m_stParametro.dsMensagemTav.arr);
		xmlgen->addItem("dtUltimaAlteracao",(char*)m_stParametro.dtUltimaAlteracao.arr);
		xmlgen->addItem("nmLoginUsuario",(char*)m_stParametro.nmLoginUsuario.arr);
		xmlgen->closeTag();
	}	
	EXEC SQL CLOSE  LSTMENSAGEM;
	xmlgen->closeTag();

	return 1;

sqlErrorConstrutor:
	tuxfw_getlogger()->debug("sqlca.sqlcode = %d\r\n", sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode); 
}