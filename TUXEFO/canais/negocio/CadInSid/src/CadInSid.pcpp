// CadInSid.pcpp: implementation of the CadInSid class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <CadInSid/CadInSid.hpp>
#include <ctype.h>
 
EXEC SQL INCLUDE SQLCA;



CCadInSid::CCadInSid()
{
	
}

CCadInSid::~CCadInSid()
{
	
}

char* CCadInSid::rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char* CCadInSid::ltrim(char *pStr)
{
	int lInd = 0;

	if (pStr == NULL)
			return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char* CCadInSid::trim(char *pStr){
	return ltrim(rtrim(pStr));		
}


	
int CCadInSid::getIdCanal ()
{
	return this->iIdCanal;
}


int CCadInSid::getIdGrupoOperadora ()
{
	return this->iIdGrupoOperadora;
}


char* CCadInSid::getNmGrupoOperadora()
{

	return this->cNmGrupoOperadora;
}

int   CCadInSid::getIdApi ()
{
	return this->iIdAPI;

}


int  CCadInSid::getNrInSid()
{
	return this->iNrInSid;
}


char* CCadInSid::getNmCanal()
{
	return this->cNmCanal;

}

char* CCadInSid::getNmFuncionalidade()
{

	return this->cNmFuncionalidade;
}
	

void CCadInSid::setIdCanal(int value)
{
	this->iIdCanal = value;
}

void CCadInSid::setIdGrupoOperadora (int value)
{

	this->iIdGrupoOperadora = value;

}

void CCadInSid::setNmGrupoOperadora (char* value)
{
	strcpy(this->cNmGrupoOperadora, value);
}

void CCadInSid::setNmCanal(char* value)
{
	strcpy(this->cNmCanal, value);

}

void  CCadInSid::setIdApi (int value)
{

	this->iIdAPI = value;
}

void CCadInSid::setNrInSid( int value)
{
	this->iNrInSid = value;
}



void CCadInSid::setNmFuncionalidade (char* value)
{

	strcpy(cNmFuncionalidade, value);
}



void CCadInSid::consultarRegional (list< CCadInSid > & listaCadInSid)
{

	struct sqlca sqlca;

 	// Variáveis de paramentro para o  ProC
	EXEC SQL BEGIN DECLARE SECTION;	
	
	char cRegional[256] ="";
	int iIdGrupoOperadora = 0;


	EXEC SQL END DECLARE SECTION;	
		

	listaCadInSid.clear();

	CCadInSid oCadInSid;

	// marca ponto de controle de erro
	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	
	EXEC SQL DECLARE LSTREGIONAL CURSOR FOR

	SELECT 
		IDGRUPOOPERADORA, 
		NMGRUPOOPERADORA
	FROM
		CUSTOMER.GRUPOOPERADORA
	WHERE 
		IDGRUPOOPERADORA > 0
	ORDER BY
		IDGRUPOOPERADORA;
	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	EXEC SQL OPEN LSTREGIONAL;
	
	for( ;; ) 
	{
		// varre todos os registros para criar a lista com os servicos

		EXEC SQL FETCH LSTREGIONAL INTO
			:iIdGrupoOperadora,
			:cRegional;

			oCadInSid.setIdGrupoOperadora( iIdGrupoOperadora ); 

			oCadInSid.setNmGrupoOperadora( trim(cRegional) ); 
		
			listaCadInSid.push_back( oCadInSid );

	}
	

	EXEC SQL CLOSE  LSTREGIONAL;

	
	return;

	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode); 

}

void CCadInSid::consultarFuncionalidade (list< CCadInSid > & listaCadInSid)
{

	struct sqlca sqlca;

 	// Variáveis de paramentro para o  ProC
	EXEC SQL BEGIN DECLARE SECTION;	
	
	char cNmApi[256] ="";
	int iIdApiNGIN = 0;
	char cDsFuncionalidade[256] = "";
	

	EXEC SQL END DECLARE SECTION;	
	
	CCadInSid oCadInSid;

	// marca ponto de controle de erro
	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	
	EXEC SQL DECLARE LSTFUNCIONALIDADE CURSOR FOR

	SELECT 
		IDAPINGIN,		 
		DSFUNCIONALIDADE
	FROM
		INFRA.APINGIN
	ORDER BY
		NMAPI;
	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	EXEC SQL OPEN LSTFUNCIONALIDADE;

	
	for( ;; ) 
	{
		// varre todos os registros para criar a lista com os servicos

		EXEC SQL FETCH LSTFUNCIONALIDADE INTO
			:iIdApiNGIN,			
			:cDsFuncionalidade;

			oCadInSid.setNmFuncionalidade(trim(cDsFuncionalidade));

			oCadInSid.setIdApi (iIdApiNGIN);
				
			listaCadInSid.push_back( oCadInSid );

	}
	
	



	EXEC SQL CLOSE  LSTFUNCIONALIDADE;

	
	return;

	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode); 

}


void CCadInSid::alterarInSid ( int iIdGrupoOperadora, int iIdApiNGIN, int iIdCanal, int iValorInSid)
{
	struct sqlca sqlca;
 	// Variáveis de paramentro para o  ProC
	EXEC SQL BEGIN DECLARE SECTION;	
	
	int iValorInSidSQL = 0;
	int iIdGrupoOperadoraSQL = 0;
	int iIdCanalSQL = 0;
	int iIdApiNGINSQL = 0;
	int iInSidAtual = 0;
	int iNovoInSid = 0;

	EXEC SQL END DECLARE SECTION;	
		
	
	iIdApiNGINSQL  = iIdApiNGIN;
	iNovoInSid = iValorInSid;
	iIdGrupoOperadoraSQL = iIdGrupoOperadora;
	iIdCanalSQL = iIdCanal;
	
	// marca ponto de controle de erro
	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL
	SELECT 
		NRINSID
	INTO
		:iInSidAtual
	FROM
		INFRA.INSIDAPIOPERADORACANAL
	WHERE
		IDAPINGIN = :iIdApiNGINSQL AND
		IDGRUPOOPERADORA = :iIdGrupoOperadoraSQL AND
		IDCANAL = :iIdCanalSQL;


	tuxfw_getlogger()->debug("iInSidAtual: %d\r\n", iInSidAtual);

	if (sqlca.sqlcode == NO_DATA_FOUND)
	{
		tuxfw_getlogger()->debug("no_data_found \r\n");
		
		EXEC SQL 
		INSERT INTO INFRA.INSIDAPIOPERADORACANAL (IDAPINGIN, IDGRUPOOPERADORA, IDCANAL, NRINSID)
		VALUES (:iIdApiNGINSQL, :iIdGrupoOperadoraSQL,  :iIdCanalSQL, :iNovoInSid);

	}

	else if (iInSidAtual != iNovoInSid)
	{

		tuxfw_getlogger()->debug("iNovoInSid = %d \r\n", iNovoInSid);

		tuxfw_getlogger()->debug("iIdGrupoOperadoraSQL = %d \r\n", iIdGrupoOperadoraSQL);

		tuxfw_getlogger()->debug("iIdApiNGINSQL = %d \r\n", iIdApiNGINSQL);

		tuxfw_getlogger()->debug("iIdCanalSQL = %d \r\n", iIdCanalSQL);
		EXEC SQL 

		UPDATE
			INFRA.INSIDAPIOPERADORACANAL
		SET
			NRINSID = :iNovoInSid
		WHERE
			IDAPINGIN = :iIdApiNGINSQL AND
			IDGRUPOOPERADORA = :iIdGrupoOperadoraSQL AND
			IDCANAL = :iIdCanalSQL;
	}		
	
	
	return;
	


	sqlErrorConstrutor:		
		tuxfw_getlogger()->debug("sqlca.sqlcode = %d\r\n", sqlca.sqlcode);
		throw TuxBasicOraException(sqlca.sqlcode); 

}


void CCadInSid::consultarPesquisa( list< CCadInSid > & listaCadInSid,  int iIdGrupoOperadora, int iIdApiNGIN, int iIdCanal)
{
	struct sqlca sqlca;

 	// Variáveis de paramentro para o  ProC
	EXEC SQL BEGIN DECLARE SECTION;	
	
	char cNmApi[256] = "";
	int iIdApiSQL = 0;
	char cDsFuncionalidade[256] = "";
	int iIdGrupoOperadoraSQL = 0;
	char cNmGrupoOperadora[255] = "";
	int  iIdCanalSQL = 0;
	char cNmCanal[255] = "";
	int  iNrInSid = 0;
	int  iIdConjunto = 0;
	EXEC SQL END DECLARE SECTION;	

	CCadInSid oCadInSid;

	iIdApiSQL = iIdApiNGIN;
	iIdCanalSQL = iIdCanal;
	iIdGrupoOperadoraSQL = iIdGrupoOperadora;

	
	// marca ponto de controle de erro
	// Marca ponto de controle de erro

	EXEC SQL WHENEVER SQLERROR GOTO  sqlErrorConstrutor;
	
	EXEC SQL DECLARE LSTPESQUISAINSID CURSOR FOR
	SELECT 
		APINGIN.IDAPINGIN,		 
		DSFUNCIONALIDADE,
		GRUPOOPERADORA.IDGRUPOOPERADORA,
		NMGRUPOOPERADORA,
		CANAL.IDCANAL,
		NMCANAL,
		NRINSIDDEFAULT,
		APINGIN.IDAPINGIN || GRUPOOPERADORA.IDGRUPOOPERADORA || CANAL.IDCANAL AS IDCONJUNTOUNICO
	FROM
		INFRA.APINGIN APINGIN,
		CUSTOMER.GRUPOOPERADORA GRUPOOPERADORA,
		APOIO.CANAL CANAL		
	WHERE 
		CANAL.IDCANAL      IN (13, 15, 9, 1) AND
		(APINGIN.IDAPINGIN = :iIdApiSQL OR :iIdApiSQL = 0) AND	
		(CANAL.IDCANAL     = :iIdCanalSQL OR :iIdCanalSQL = 0) AND
		(GRUPOOPERADORA.IDGRUPOOPERADORA = :iIdGrupoOperadora  OR :iIdGrupoOperadora = 0) AND
		GRUPOOPERADORA.IDGRUPOOPERADORA > 0 AND
		APINGIN.IDAPINGIN || GRUPOOPERADORA.IDGRUPOOPERADORA || CANAL.IDCANAL NOT IN 
		(SELECT		
		IDAPINGIN || IDGRUPOOPERADORA || IDCANAL 
	FROM
		INFRA.INSIDAPIOPERADORACANAL  INSIDAPIOPERADORACANAL
	WHERE
		(IDAPINGIN = :iIdApiSQL OR :iIdApiSQL = 0) AND
		(IDCANAL     = :iIdCanalSQL OR :iIdCanalSQL = 0) AND
		GRUPOOPERADORA.idgrupooperadora  > 0		AND
		(IDGRUPOOPERADORA = :iIdGrupoOperadora  OR :iIdGrupoOperadora = 0))
	UNION
	SELECT 
		APINGIN.IDAPINGIN,		 
		DSFUNCIONALIDADE,
		GRUPOOPERADORA.IDGRUPOOPERADORA,
		NMGRUPOOPERADORA,
		CANAL.IDCANAL,
		NMCANAL,
		NRINSID,		
		APINGIN.IDAPINGIN || GRUPOOPERADORA.IDGRUPOOPERADORA || CANAL.IDCANAL AS IDCONJUNTOUNICO
	FROM
		INFRA.APINGIN APINGIN,
		CUSTOMER.GRUPOOPERADORA GRUPOOPERADORA,
		APOIO.CANAL CANAL,
		INFRA.INSIDAPIOPERADORACANAL  INSIDAPIOPERADORACANAL
	WHERE 
		CANAL.IDCANAL      IN (13, 15, 9, 1) AND
		(APINGIN.IDAPINGIN = :iIdApiSQL OR :iIdApiSQL = 0) AND
		APINGIN.IDAPINGIN  = INSIDAPIOPERADORACANAL.IDAPINGIN(+) AND
		(CANAL.IDCANAL     = :iIdCanalSQL OR :iIdCanalSQL = 0) AND
		GRUPOOPERADORA.IDGRUPOOPERADORA = INSIDAPIOPERADORACANAL.IDGRUPOOPERADORA AND
		INSIDAPIOPERADORACANAL.IDCANAL = CANAL.IDCANAL AND
		GRUPOOPERADORA.idgrupooperadora  > 0		AND
		(GRUPOOPERADORA.IDGRUPOOPERADORA = :iIdGrupoOperadora  OR :iIdGrupoOperadora = 0)
	ORDER BY DSFUNCIONALIDADE, NMCANAL, NMGRUPOOPERADORA;
	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	EXEC SQL OPEN LSTPESQUISAINSID;
	
	for( ;; ) 
	{
		// varre todos os registros para criar a lista com os servicos

		EXEC SQL FETCH LSTPESQUISAINSID INTO
			:iIdApiNGIN,			
			:cDsFuncionalidade,
			:iIdGrupoOperadora,
			:cNmGrupoOperadora,
			:iIdCanalSQL, 
			:cNmCanal,
			:iNrInSid,
			:iIdConjunto;
			
			oCadInSid.setNmFuncionalidade(trim(cDsFuncionalidade));

			oCadInSid.setIdApi (iIdApiNGIN);

			oCadInSid.setIdGrupoOperadora(iIdGrupoOperadora);

			oCadInSid.setNmGrupoOperadora(trim(cNmGrupoOperadora));

			oCadInSid.setIdCanal(iIdCanalSQL);			

			oCadInSid.setNmCanal(trim(cNmCanal));

			oCadInSid.setNrInSid(iNrInSid);

			listaCadInSid.push_back( oCadInSid );

		
	}
	


	EXEC SQL CLOSE  LSTPESQUISAINSID;
	
	return;

	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode); 

}
  
