
#undef SQLCA
#define SQLCA_NONE

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
 
EXEC SQL INCLUDE SQLCA;

char * rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim(char *pStr)
{
	int lInd = 0;

	if (pStr == NULL)
			return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char * trim(char *pStr){
	return ltrim(rtrim(pStr));		
}


void getConsultorByCnPj( char * cnpjPrm, XMLGen * xml_g )
{
    ULOG_START( "getConsultorByCnPj()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char cnpj[128];
       
       char idPessoa[43];
       char nrDocumento[128];
       char nmPessoa[256];
       short i_idPessoa = -1;
       short i_nrDocumento = -1;
       short i_nmPessoa = -1;
       
    EXEC SQL END DECLARE SECTION;

    strcpy( cnpj , cnpjPrm );
    ULOG( "cnpj  [%s]", cnpj );
    
    memset( idPessoa, 0x0, sizeof(idPessoa) );
    memset( nrDocumento, 0x0, sizeof(nrDocumento) );
    memset( nmPessoa, 0x0, sizeof(nmPessoa) );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL 
    select 
       p.idpessoa, 
       pc.nrdocumento, 
       p.nmpessoa 
    into
       :idPessoa:i_idPessoa ,
       :nrDocumento:i_nrDocumento ,
       :nmPessoa:i_nmPessoa 
    from 
       customer.pessoaconsultor pc, 
       customer.pessoa p 
    where 
       pc.idpessoa = p.idpessoa 
    and pc.nrdocumento = :cnpj
    and rownum < 2;
                     
    
    xml_g->createTag( "ConsultorVO" );
        xml_g->addItem( "idPessoa",  trim(idPessoa) );
        xml_g->addItem( "nrDocumento",  trim(nrDocumento) );
        xml_g->addItem( "nmPessoa",  trim(nmPessoa) );
    xml_g->closeTag();
	
    ULOG_END( "getConsultorByCnPj()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
} 