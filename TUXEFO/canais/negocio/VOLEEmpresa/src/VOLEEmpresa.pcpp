
#undef SQLCA
#define SQLCA_NONE

#include <tuxfw.h>
#include <sqlca.h>
#include <ctype.h>
#include <string>
#include <list>
#include <iterator>
using namespace std;
 
struct stRegistro
{
   char idPessoa[40];
   char nmPessoa[256];
   char idPessoaDePara[40];
   char idUFOperadora[40];
   char sgUFOperadora[256];
   char idTipoCarteira[40];
   char idSegmentacao[40];
   char nrCNPJ[256];
};

 
list<string>::iterator itLst_nrDoc;
typedef list<string> LST_DOCS;
 
 
#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#define strToOra(vchar,bstr)   vchar.len = strlen(bstr);strncpy((char *)vchar.arr,bstr,vchar.len);vchar.arr[vchar.len] = 0

EXEC SQL INCLUDE SQLCA;

void BuscarGestoresDeContaR(char * idPessoaGestorPrm, char *CNPJ, XMLGen* xml_g);
void getCJNPJsByIdGestor_GC( char * idPessoaGestorPrm, char* nrDocumentoPrm, XMLGen * xml_g );
void getCJNPJsByIdGestor_GM( char * idPessoaGestorPrm, XMLGen * xml_g );
void getCNPJsVinculoIdGestor( char * idPessoaGestorPrm, XMLGen * xml_g );

char * rtrim(char *pStr)
{
	int rInd;

	if (pStr == NULL)
			return NULL;

   rInd = strlen(pStr) - 1;
   while ( isspace(pStr[rInd]) && rInd >= 0){
      rInd--;
   }

   pStr[rInd + 1] = '\0';
   
   return pStr;
}

char * ltrim(char *pStr)
{
	int lInd = 0;

	if (pStr == NULL)
			return NULL;

    while (isspace(pStr[lInd])){
        lInd++;
	}

	pStr = pStr + lInd;
     
   return pStr;
}

char * trim(char *pStr){
	return ltrim(rtrim(pStr));		
}



void getEmpresasByIdGestor( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getEmpresasByIdGestor()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[42];

       char idpessoa[43];
       char nmpessoa[256];
       char sgtipopessoa[64];
       char idconta[43];
       char idcontasistemaorigem[43];
       char idpessoadepara[43];
       char idsegmentacao[43];
       char idufoperadora[43];
       char sguf[64];
       char idtipocarteira[43];
       char idpessodeparaconta[43];
	   char nmConta[256];
       
       short i_idpessoa = -1;
       short i_nmpessoa = -1;
       short i_sgtipopessoa = -1;
       short i_idconta = -1;
       short i_idcontasistemaorigem = -1;
       short i_idpessoadepara = -1;
       short i_idsegmentacao = -1;
       short i_idufoperadora = -1;
       short i_sguf = -1;
       short i_idtipocarteira = -1;
       short i_idpessodeparaconta = -1;
	   short i_nmConta = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    /*
    EXEC SQL
    SELECT
       COUNT(IDPESSOAGESTOR)
    INTO
       :inExisteGestor
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;
    
    if ( inExisteGestor == 0 )
    {
    }
    */
    
    EXEC SQL DECLARE csr_1 CURSOR FOR
    select 
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from
       VOL.EMPRESAGESTORV01
    where
       idpessoagestor = :idPessoaGestor
    and rownum < 11	   
    union
    select
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from
       VOL.EMPRESAGESTORV01
    where
       idpessoagestor = :idPessoaGestor    
    and idconta in (select cg.idconta 
                            from vole.contagestor cg 
                           where cg.idpessoagestor = :idPessoaGestor )
    and rownum < 11 ;


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_1;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_1 INTO
           :idpessoa:i_idpessoa ,
           :nmpessoa:i_nmpessoa ,
           :sgtipopessoa:i_sgtipopessoa ,
           :idconta:i_idconta ,
           :idcontasistemaorigem:i_idcontasistemaorigem ,
           :idpessoadepara:i_idpessoadepara ,
           :idsegmentacao:i_idsegmentacao ,
           :idufoperadora:i_idufoperadora ,
           :sguf:i_sguf ,
           :idtipocarteira:i_idtipocarteira ,
           :idpessodeparaconta:i_idpessodeparaconta,
		   :nmConta:i_nmConta;

        xml_g->createTag( "EmpresasByIdGestorVO" );
            xml_g->addItem( "idPessoa"             , trim(idpessoa) );
            xml_g->addItem( "nmPessoa"             , trim(nmpessoa) );
            xml_g->addItem( "sgTipoPessoa"         , trim(sgtipopessoa) );
            xml_g->addItem( "idConta"              , trim(idconta) );
            xml_g->addItem( "idContaSistemaOrigem" , trim(idcontasistemaorigem) );
            xml_g->addItem( "idPessoaDePara"       , trim(idpessoadepara) );
            xml_g->addItem( "idSegmentacao"        , trim(idsegmentacao) );
            xml_g->addItem( "idUFOperadora"        , trim(idufoperadora) );
            xml_g->addItem( "sgUF"                 , trim(sguf) );
            xml_g->addItem( "idTipoCarteira"       , trim(idtipocarteira) );
            xml_g->addItem( "idPessoDeParaConta"   , trim(idpessodeparaconta) );
			xml_g->addItem( "nmConta"   , trim(nmConta) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_1;

    ULOG_END( "getEmpresasByIdGestor()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCNPJ( char * idPessoaPrm, XMLGen* xml_g )
{
    ULOG_START( "getCNPJ()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoa[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoa, idPessoaPrm );
    
    ULOG( "idPessoa [%s]", idPessoa );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_2 CURSOR FOR
    select 
       d.nrdocumento 
	from 
       customer.pessoadocumento pd, 
	   customer.documento d, 
	   apoio.tipodocumento td 
	where 
       pd.iddocumento = d.iddocumento  
    and td.idtipodocumento = d.idtipodocumento 
    and td.sgclassificacao ='CNPJ' 
    and pd.idpessoa = :idPessoa ;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_2;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_2 INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "getCNPJVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_2;

    ULOG_END( "getCNPJ()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getEmpresaByAccountNumber( char * idSistemaOrigemPrm, XMLGen* xml_g )
{
    ULOG_START( "getEmpresaByAccountNumber()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idSistemaOrigem[43];

       char idpessoa[43];
       char nmpessoa[256];
       char sgtipopessoa[64];
       char idconta[43];
       char idcontasistemaorigem[43];
       char idpessoadepara[43];
       char idsegmentacao[43];
       char idufoperadora[43];
       char sguf[64];
       char idtipocarteira[43];
       char idpessodeparaconta[43];
	   char nmConta[256];
       
       short i_idpessoa = -1;
       short i_nmpessoa = -1;
       short i_sgtipopessoa = -1;
       short i_idconta = -1;
       short i_idcontasistemaorigem = -1;
       short i_idpessoadepara = -1;
       short i_idsegmentacao = -1;
       short i_idufoperadora = -1;
       short i_sguf = -1;
       short i_idtipocarteira = -1;
       short i_idpessodeparaconta = -1;
	   short i_nmConta = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idSistemaOrigem, idSistemaOrigemPrm );
    
    ULOG( "idSistemaOrigem [%s]", idSistemaOrigem );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_3 CURSOR FOR
    select 
       idpessoa, 
       nmpessoa, 
       sgtipopessoa, 
       idconta, 
       idcontasistemaorigem, 
       idpessoadepara, 
       idsegmentacao, 
       idufoperadora, 
       sguf, 
       idtipocarteira, 
       idpessodeparaconta,
	   nmConta
    from 
       vol.empresacontav01
    where
       idconta = (select idconta 
                     from customer.conta 
                     where idcontasistemaorigem = :idSistemaOrigem ) ;


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_3;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_3 INTO
           :idpessoa:i_idpessoa ,
           :nmpessoa:i_nmpessoa ,
           :sgtipopessoa:i_sgtipopessoa ,
           :idconta:i_idconta ,
           :idcontasistemaorigem:i_idcontasistemaorigem ,
           :idpessoadepara:i_idpessoadepara ,
           :idsegmentacao:i_idsegmentacao ,
           :idufoperadora:i_idufoperadora ,
           :sguf:i_sguf ,
           :idtipocarteira:i_idtipocarteira ,
           :idpessodeparaconta:i_idpessodeparaconta,
		   :nmConta:i_nmConta;

        xml_g->createTag( "EmpresaByAccountNumberVO" );
            xml_g->addItem( "idPessoa"             , trim(idpessoa) );
            xml_g->addItem( "nmPessoa"             , trim(nmpessoa) );
            xml_g->addItem( "sgTipoPessoa"         , trim(sgtipopessoa) );
            xml_g->addItem( "idConta"              , trim(idconta) );
            xml_g->addItem( "idContaSistemaOrigem" , trim(idcontasistemaorigem) );
            xml_g->addItem( "idPessoaDePara"       , trim(idpessoadepara) );
            xml_g->addItem( "idSegmentacao"        , trim(idsegmentacao) );
            xml_g->addItem( "idUFOperadora"        , trim(idufoperadora) );
            xml_g->addItem( "sgUF"                 , trim(sguf) );
            xml_g->addItem( "idTipoCarteira"       , trim(idtipocarteira) );
            xml_g->addItem( "idPessoDeParaConta"   , trim(idpessodeparaconta) );
			xml_g->addItem( "nmConta"   , trim(nmConta) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_3;

    ULOG_END( "getEmpresaByAccountNumber()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor_VOLE( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor_VOLE()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoaGestor[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_4_VOLE CURSOR FOR
    select 
       distinct(nrdocumento) 
    from 
       vole.contagestor contagestor, 
       customer.pessoaconta pessoaconta, 
       customer.pessoadocumento pessoadocumento, 
       customer.documento documento, 
       apoio.tipodocumento tipodocumento, 
       customer.pessoadepara pessoadepara     
    where 
       pessoadocumento.iddocumento = documento.iddocumento 
    and tipodocumento.idtipodocumento = documento.idtipodocumento 
    and tipodocumento.sgclassificacao = 'CNPJ' 
    and pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
    and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
    and contagestor.idconta=pessoaconta.idconta     
    and pessoaconta.IDTIPORELACIONAMENTO = 2     
    and contagestor.IDPESSOAGESTOR = :idPessoaGestor ;
                
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_4_VOLE;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_4_VOLE INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "CJNPJByIdGestorVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_4_VOLE;

    ULOG_END( "getCJNPJsByIdGestor_VOLE()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor( char * idPessoaGestorPrm, XMLGen* xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor()" );
    
    LST_DOCS     pDocs;
    string       nrCNPJ;
    char   MsgRet[16];

    struct sqlca sqlca;
	int ACESSO_GESTOR_DE_CONTA=0;

    
    EXEC SQL BEGIN DECLARE SECTION;

        int ctGestorMaster;
        char idPessoaGestor[43];

        VARCHAR nrCPF[65];
        short i_nrCPF = -1;
        
        VARCHAR nrDocumento[65];
        short i_nrDocumento = -1;
        
        VARCHAR idConta[65];
        short   i_idConta = -1;
        VARCHAR cdConta[65];
        short   i_cdConta = -1;
        VARCHAR nmConta[65];
        short   i_nmConta = -1;
        
        VARCHAR sgPermissao[256];
        short   i_sgPermissao = -1;
		
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
		
       
        VARCHAR idPessoa[65];
        short   i_idPessoa = -1;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa = -1;
        VARCHAR sgTipoPessoa[65];
        short   i_sgTipoPessoa = -1;
        VARCHAR idPessoaAux[65];
        short   i_idPessoaAux = -1;
        VARCHAR idPessoaDePara[65];
        short   i_idPessoaDePara = -1;
        VARCHAR idSegmentacao[65];
        short   i_idSegmentacao = -1;
        VARCHAR idUFOperadora[65];
        short   i_idUFOperadora = -1;
        VARCHAR sgUF[256];
        short   i_sgUF = -1;
        VARCHAR idTipoCarteira[65];
        short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
        VARCHAR idPessoDeParaConta[256];
        short   i_idPessoDeParaConta = -1;
		
		VARCHAR parametroValor[256];
		const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
		short i_parametroValor = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    memset( &nrCPF, 0x0, sizeof(nrCPF) );
    memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
    memset( &idConta    , 0x0, sizeof(idConta) );
    memset( &cdConta    , 0x0, sizeof(cdConta) );
    memset( &sgPermissao, 0x0, sizeof(sgPermissao) );

    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
	EXEC SQL
	SELECT 
		DSVALORPARAMETRO 
	INTO 
		:parametroValor:i_parametroValor
	FROM 
		APOIO.PARAMETRO
	WHERE 
		CDPARAMETRO = :parametro;
		
	if(i_parametroValor != -1)
	{
		ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
	}
	else
	{
		ACESSO_GESTOR_DE_CONTA = 1;
    }
	
    EXEC SQL
    SELECT
       NRDOCUMENTO
    INTO
       :nrCPF:i_nrCPF
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;

    CONVIND( nrCPF, i_nrCPF );
    
    ULOG( "@@@ Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

    EXEC SQL
    SELECT
       COUNT(NRDOCUMENTOGESTOR)
    INTO
       :ctGestorMaster
    FROM
       CUSTOMER.PESSOAGESTORMASTER
    WHERE
       NRDOCUMENTOGESTOR = :nrCPF ;
    
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    ULOG( "ctGestorMaster [%d]", ctGestorMaster );

    if ( ctGestorMaster > 0 )
    {
        ULOG( "*** Encontrou Gestor Master, realizando busca..." );
    
        EXEC SQL DECLARE csr_GestorMaster CURSOR FOR
		SELECT  		eg.idpessoa,
						eg.nmpessoa,
						eg.sgtipopessoa,
						eg.idpessoadepara,
						eg.idsegmentacao,
						eg.idufoperadora,
						eg.sguf,
						eg.idtipocarteira,
						eg.nrCNPJ
		  FROM VOL.EMPRESAGESTOR_GM_V01 eg
		 WHERE     eg.nrCPF = :nrCPF
			   AND eg.inAssociacao = 1;		   


        EXEC SQL OPEN csr_GestorMaster;
        for( ;; ) 
        {
            memset( &idPessoa       , 0x0, sizeof(idPessoa) );
            memset( &nmPessoa       , 0x0, sizeof(nmPessoa) );
            memset( &sgTipoPessoa   , 0x0, sizeof(sgTipoPessoa) );
            memset( &idPessoaDePara , 0x0, sizeof(idPessoaDePara) );
            memset( &idSegmentacao  , 0x0, sizeof(idSegmentacao) );
            memset( &idUFOperadora  , 0x0, sizeof(idUFOperadora) );
            memset( &sgUF           , 0x0, sizeof(sgUF) );
            memset( &idTipoCarteira , 0x0, sizeof(idTipoCarteira) );
            memset( &nrDocumento    , 0x0, sizeof(nrDocumento) );
            
            EXEC SQL FETCH csr_GestorMaster INTO
                :idPessoa:i_idPessoa ,
                :nmPessoa:i_nmPessoa , 
                :sgTipoPessoa:i_sgTipoPessoa ,
                :idPessoaDePara:i_idPessoaDePara ,
                :idSegmentacao:i_idSegmentacao ,
                :idUFOperadora:i_idUFOperadora ,
                :sgUF:i_sgUF ,
                :idTipoCarteira:i_idTipoCarteira ,
                :nrDocumento:i_nrDocumento ;

            CONVIND( idPessoa       , i_idPessoa );
            CONVIND( nmPessoa       , i_nmPessoa );
            CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
            CONVIND( idPessoaDePara , i_idPessoaDePara );
            CONVIND( idSegmentacao  , i_idSegmentacao );
            CONVIND( idUFOperadora  , i_idUFOperadora );
            CONVIND( sgUF           , i_sgUF );
            CONVIND( idTipoCarteira , i_idTipoCarteira );
            CONVIND( nrDocumento    , i_nrDocumento );
            
            ULOG( "*** idPessoa       [%s]",(char*)idPessoa.arr );
            ULOG( "*** nmPessoa       [%s]",(char*)nmPessoa.arr );
            ULOG( "*** sgTipoPessoa   [%s]",(char*)sgTipoPessoa.arr );
            ULOG( "*** idPessoaDePara [%s]",(char*)idPessoaDePara.arr );
            
            ULOG( "--- Relacionamento com CNPJ [%s]", (char*)nrDocumento.arr );
            
            pDocs.push_back( (char*)nrDocumento.arr );

            xml_g->createTag( "CJNPJByIdGestorVO" );
                xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
                xml_g->addItem( "tpGestor", "GM" );
                xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
                xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
                xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
                xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
                xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
                xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
                xml_g->addItem( "sgUF", (char*)sgUF.arr );
                xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
            xml_g->closeTag();
        }

        EXEC SQL CLOSE csr_GestorMaster;
        ULOG( "*** Finalizando busca de documentos para Gestor Master..." );
        
    }
    
		EXEC SQL DECLARE csr_4 CURSOR FOR
		select 
		   distinct(nrdocumento) 
		from 
		   vole.contagestor contagestor, 
		   customer.pessoaconta pessoaconta, 
		   customer.pessoadocumento pessoadocumento, 
		   customer.documento documento, 
		   apoio.tipodocumento tipodocumento, 
		   customer.pessoadepara pessoadepara     
		where 
		   pessoadocumento.iddocumento = documento.iddocumento 
		and tipodocumento.idtipodocumento = documento.idtipodocumento 
		and tipodocumento.DSTIPODOCUMENTO = 'CNPJ' 
		and pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
		and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
		and contagestor.idconta=pessoaconta.idconta     
		and pessoaconta.IDTIPORELACIONAMENTO = 2     
		and contagestor.IDPESSOAGESTOR = :idPessoaGestor ;
					
		ULOG( "!!! Buscando GC para idPessoaGestor [%s]", idPessoaGestor );
		ULOG( "/// csr_GC_Only_2 alterado..." );
		EXEC SQL WHENEVER NOT FOUND DO BREAK;

		EXEC SQL OPEN csr_4;
		

		for( ;; ) 
		{
			memset( &nrDocumento    , 0x0, 60 );
			
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			
			EXEC SQL FETCH csr_4 INTO
			   :nrDocumento:i_nrDocumento ;
			
			CONVIND( nrDocumento, i_nrDocumento );
			ULOG( "*** Gestor de Conta para o CNPJ => [%s]", (char*)nrDocumento.arr );

			if( ACESSO_GESTOR_DE_CONTA == 1)
			{
					ULOG( "/// ACESSO_GESTOR_DE_CONTA = 1" );
					if ( !pDocs.empty() )  // Testa se este Gestor eh Master de outros CNPJs
					{
						ULOG( "/// Validando pois eh Gestor Master" );
						
						for ( itLst_nrDoc = pDocs.begin(); itLst_nrDoc != pDocs.end(); itLst_nrDoc++ )
						{

							nrCNPJ = *itLst_nrDoc;
							/*
							 *  Aqui compara se o gestor eh MASTER
							 *  do CNPJ encontrado. Se for vai para proxima ocorrencia.
							 *  Serah mostrado apenas se for Gestor de Conta nesta situacao.
							 */
							if ( !strcmp((char*)nrDocumento.arr, nrCNPJ.c_str()) )
							{
								continue;
							}
							else
							{
								xml_g->createTag( "CJNPJByIdGestorVO" );
									xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
									xml_g->addItem( "tpGestor", "GC" );
								
									//EXEC SQL DECLARE csr_GC CURSOR FOR
									//SELECT DISTINCT
									//    PG.SGPERMISSAOGESTOR ,
									//    C.IDCONTA ,
									//    C.CDCONTA ,
									//    C.NMCONTA ,
									//    PDP.IDPESSOADEPARA ,
									//    C.IDCONTASISTEMAORIGEM
									//FROM 
									//    APOIO.PERMISSAOGESTOR      PG ,
									//    CUSTOMER.CONTA             C , 
									//    CUSTOMER.PESSOACONTA       PC ,
									//    CUSTOMER.PESSOADEPARA      PDP ,
									//    CUSTOMER.PESSOADOCUMENTO   PD ,
									//    CUSTOMER.DOCUMENTO         D ,
									//    VOLE.CONTAGESTOR           CG 
									//WHERE  
									//    PC.IDCONTA = CG.IDCONTA
									//AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
									//AND PDP.IDPESSOA = PD.IDPESSOA
									//AND PD.IDDOCUMENTO = D.IDDOCUMENTO
									//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
									//AND C.IDCONTA = CG.IDCONTA
									//AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
									//AND CG.IDPESSOAGESTOR = :idPessoaGestor ;

									
									//EXEC SQL DECLARE csr_GC CURSOR FOR
									//SELECT DISTINCT
									//	PG.SGPERMISSAOGESTOR ,
									//	C.IDCONTA ,
									//	C.CDCONTA ,
									//	C.NMCONTA ,
									//	//PD.IDPESSOA ,
									//	C.IDCONTASISTEMAORIGEM,
									//	C.INCONTROLEPJ
									//FROM 
									//	APOIO.PERMISSAOGESTOR      PG ,
									//	CUSTOMER.CONTA             C , 
									//	CUSTOMER.DOCUMENTO         D ,
									//	CUSTOMER.PESSOADOCUMENTO   PD 
									//WHERE  
									//	PD.IDDOCUMENTO = D.IDDOCUMENTO
									//AND D.NRDOCUMENTO = :nrDocumento   // CNPJ da Empresa com Contas   
									//and exists
									//(
									//	select
									//		pc.IDCONTA
									//	from   
									//		CUSTOMER.PESSOACONTA       PC ,
									//		CUSTOMER.PESSOADEPARA      PDP ,
									//		APOIO.PERMISSAOGESTOR      PG ,
									//		VOLE.CONTAGESTOR           CG  
									//	where
									//			PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
									//		AND PC.IDCONTA = CG.IDCONTA
									//		AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
									//		AND CG.IDPESSOAGESTOR = :idPessoaGestor
									//		and C.IDCONTA = pc.idconta
									//		and pc.idtiporelacionamento = 2
									//) ;
									
									
									EXEC SQL DECLARE csr_GC CURSOR FOR
									SELECT DISTINCT
											PG2.SGPERMISSAOGESTOR ,
											C.IDCONTA ,
											C.CDCONTA ,
											C.NMCONTA ,
											C.IDCONTASISTEMAORIGEM,
				  NVL(C.INCONTROLEPJ,0)
										FROM 
											APOIO.PERMISSAOGESTOR      PG2,
											CUSTOMER.CONTA             C , 
											CUSTOMER.DOCUMENTO         D ,
											CUSTOMER.PESSOADOCUMENTO   PD,
											CUSTOMER.PESSOADEPARA      PDP,
											CUSTOMER.PESSOACONTA       PC,
											VOLE.CONTAGESTOR           CG2  
										WHERE  
											CG2.IDPERMISSAOGESTOR = PG2.IDPERMISSAOGESTOR(+) AND
											C.IDCONTA = CG2.IDCONTA AND
											PC.IDCONTA = CG2.IDCONTA AND
											PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
											PD.IDPESSOA = PDP.IDPESSOA AND
											PD.IDDOCUMENTO = D.IDDOCUMENTO AND
											PC.idtiporelacionamento = 2 AND
											D.NRDOCUMENTO = :nrDocumento    AND 
											CG2.IDPESSOAGESTOR = :idPessoaGestor;
									
									memset( &idConta    , 0x0, sizeof(idConta) );
									memset( &cdConta    , 0x0, sizeof(cdConta) );
									memset( &nmConta    , 0x0, sizeof(nmConta) );
									memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
									memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
									memset( &inControlePJ, 0x0, sizeof(inControlePJ) );
									
									EXEC SQL OPEN csr_GC;
									
									bool bPrimeiroLoop = true;
									for( ;; ) 
									{

										EXEC SQL FETCH csr_GC INTO
										   :sgPermissao:i_sgPermissao ,
										   :idConta:i_idConta ,
										   :cdConta:i_cdConta ,
										   :nmConta:i_nmConta ,
										   //:idPessoaAux:i_idPessoaAux ,
										   :idContaSistemaOrigem:i_idContaSistemaOrigem,
										   :inControlePJ:i_inControlePJ;
										
										//CONVIND( idPessoaAux, i_idPessoaAux );
								
										/*
										exec sql
										select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
										  from customer.pessoadepara where idpessoa = :idPessoaAux;
										CONVIND( idPessoaDePara, i_idPessoaDePara );
										*/

										CONVIND( sgPermissao, i_sgPermissao );
										CONVIND( idConta, i_idConta );
										CONVIND( cdConta, i_cdConta );
										CONVIND( nmConta, i_nmConta );
										CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
										CONVIND( inControlePJ, i_inControlePJ );
										
										
										ULOG( ">>> Conta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
										ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

										EXEC SQL
										SELECT 
										   idpessoa, 
										   nmpessoa, 
										   sgtipopessoa, 
										   idsegmentacao, 
										   idufoperadora, 
										   sguf, 
										   idtipocarteira 
										INTO
										  :idPessoa:i_idPessoa ,
										  :nmPessoa:i_nmPessoa , 
										  :sgTipoPessoa:i_sgTipoPessoa ,
										  :idSegmentacao:i_idSegmentacao ,
										  :idUFOperadora:i_idUFOperadora ,
										  :sgUF:i_sgUF ,
										  :idTipoCarteira:i_idTipoCarteira 
										FROM
										   VOL.EMPRESAGESTOR_GC_V01
										WHERE
										   idpessoagestor = :idPessoaGestor    
										AND
										   idconta = :idConta 
										AND ROWNUM < 2;
										   
										CONVIND( idPessoa       , i_idPessoa );
										CONVIND( nmPessoa       , i_nmPessoa );
										CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
										CONVIND( idSegmentacao  , i_idSegmentacao );
										CONVIND( idUFOperadora  , i_idUFOperadora );
										CONVIND( sgUF           , i_sgUF );
										CONVIND( idTipoCarteira , i_idTipoCarteira );
						
										exec sql
										select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
										  from customer.pessoadepara where idpessoa = :idPessoa;
										CONVIND( idPessoaDePara, i_idPessoaDePara );
										
										if ( bPrimeiroLoop == true )
										{
											xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
											xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
											xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
											xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
											xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
											xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
											xml_g->addItem( "sgUF", (char*)sgUF.arr );
											xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
											
											bPrimeiroLoop = false;	
										}
										
										xml_g->createTag( "ContaVO" );
											xml_g->addItem( "idConta", (char*)idConta.arr );
											xml_g->addItem( "cdConta", (char*)cdConta.arr );
											if ( i_sgPermissao != -1 )
											{
												xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
											}
											xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
											xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
											xml_g->addItem( "nmConta", (char*)nmConta.arr );
							xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
										xml_g->closeTag();
									}
									EXEC SQL CLOSE csr_GC;
								
								xml_g->closeTag();

							}
						}
					}
					else  // Eh apenas Gestor de Contas
					{
						ULOG( "/// Eh apenas Gestor de Contas" );
						
						xml_g->createTag( "CJNPJByIdGestorVO" );
							xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
							xml_g->addItem( "tpGestor", "GC" );
							
							//EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							//SELECT DISTINCT
							//    PG.SGPERMISSAOGESTOR ,
							//    C.IDCONTA ,
							//    C.CDCONTA ,
							//    C.NMCONTA ,
							//    PDP.IDPESSOADEPARA ,
							//    C.IDCONTASISTEMAORIGEM
							//FROM 
							//    APOIO.PERMISSAOGESTOR      PG ,
							//    CUSTOMER.CONTA             C , 
							//    CUSTOMER.PESSOACONTA       PC ,
							//    CUSTOMER.PESSOADEPARA      PDP ,
							//    CUSTOMER.PESSOADOCUMENTO   PD ,
							//    CUSTOMER.DOCUMENTO         D ,
							//    VOLE.CONTAGESTOR           CG 
							//WHERE  
							//    PC.IDCONTA = CG.IDCONTA
							//AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
							//AND PDP.IDPESSOA = PD.IDPESSOA
							//AND PD.IDDOCUMENTO = D.IDDOCUMENTO
							//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
							//AND C.IDCONTA = CG.IDCONTA
							//AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
							//AND CG.IDPESSOAGESTOR = :idPessoaGestor ;
							
							
							//EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							//SELECT DISTINCT
							//	PG.SGPERMISSAOGESTOR ,
							//	C.IDCONTA ,
							//	C.CDCONTA ,
							//	C.NMCONTA ,
							//	//PD.IDPESSOA ,
							//	C.IDCONTASISTEMAORIGEM,
							//	C.INCONTROLEPJ
							//FROM 
							//	APOIO.PERMISSAOGESTOR      PG ,
							//	CUSTOMER.CONTA             C , 
							//	CUSTOMER.DOCUMENTO         D ,
							//	CUSTOMER.PESSOADOCUMENTO   PD 
							//WHERE  
							//	PD.IDDOCUMENTO = D.IDDOCUMENTO
							//AND D.NRDOCUMENTO = :nrDocumento   /* CNPJ da Empresa com Contas   */
							//and exists
							//(
							//	select
							//		pc.IDCONTA
							//	from   
							//		CUSTOMER.PESSOACONTA       PC ,
							//		CUSTOMER.PESSOADEPARA      PDP ,
							//		APOIO.PERMISSAOGESTOR      PG ,
							//		VOLE.CONTAGESTOR           CG  
							//	where
							//			PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
							//		AND PC.IDCONTA = CG.IDCONTA
							//		AND CG.IDPERMISSAOGESTOR = PG.IDPERMISSAOGESTOR(+) 
							//		AND CG.IDPESSOAGESTOR = :idPessoaGestor
							//		and C.IDCONTA = pc.idconta
							//		and pc.idtiporelacionamento = 2
							//) ;
							
							EXEC SQL DECLARE csr_GC_Only CURSOR FOR
							SELECT DISTINCT
								PG2.SGPERMISSAOGESTOR ,
								C.IDCONTA ,
								C.CDCONTA ,
								C.NMCONTA ,
								C.IDCONTASISTEMAORIGEM,
               NVL(C.INCONTROLEPJ,0)			   
							FROM 
								APOIO.PERMISSAOGESTOR      PG2,
								CUSTOMER.CONTA             C , 
								CUSTOMER.DOCUMENTO         D ,
								CUSTOMER.PESSOADOCUMENTO   PD,
								CUSTOMER.PESSOADEPARA      PDP,
								CUSTOMER.PESSOACONTA       PC,
								VOLE.CONTAGESTOR           CG2  
							WHERE  
								CG2.IDPERMISSAOGESTOR = PG2.IDPERMISSAOGESTOR(+) AND
								C.IDCONTA = CG2.IDCONTA AND
								PC.IDCONTA = CG2.IDCONTA AND
								PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA AND
								PD.IDPESSOA = PDP.IDPESSOA AND
								PD.IDDOCUMENTO = D.IDDOCUMENTO AND
								PC.idtiporelacionamento = 2 AND
								D.NRDOCUMENTO = :nrDocumento    AND 
								CG2.IDPESSOAGESTOR = :idPessoaGestor;	
								
							
							memset( &idConta             , 0x0, sizeof(idConta) );
							memset( &cdConta             , 0x0, sizeof(cdConta) );
							memset( &nmConta             , 0x0, sizeof(nmConta) );
							memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
							memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
							memset( &inControlePJ        , 0x0, sizeof(inControlePJ) );
							
							
							bool bPrimeiroLoop = true;
							
							EXEC SQL OPEN csr_GC_Only;
							for( ;; ) 
							{
								
								EXEC SQL FETCH csr_GC_Only INTO
								   :sgPermissao:i_sgPermissao ,
								   :idConta:i_idConta ,
								   :cdConta:i_cdConta ,
								   :nmConta:i_nmConta ,
								   //:idPessoaAux:i_idPessoaAux ,
								   :idContaSistemaOrigem:i_idContaSistemaOrigem,
								   :inControlePJ:i_inControlePJ;
								
								CONVIND( sgPermissao, i_sgPermissao );
								CONVIND( idConta, i_idConta );
								CONVIND( cdConta, i_cdConta );
								CONVIND( nmConta, i_nmConta );
								//CONVIND( idPessoaAux, i_idPessoaAux );
								CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
								CONVIND( inControlePJ, i_inControlePJ );
								
								
								/*
								exec sql
								select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
								  from customer.pessoadepara where idpessoa = :idPessoaAux;
								CONVIND( idPessoaDePara, i_idPessoaDePara );
								*/
								
								ULOG( ">>> Conta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );

								ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

								EXEC SQL
								SELECT 
								   idpessoa, 
								   nmpessoa, 
								   sgtipopessoa, 
								   idsegmentacao, 
								   idufoperadora, 
								   sguf, 
								   idtipocarteira 
								INTO
								  :idPessoa:i_idPessoa ,
								  :nmPessoa:i_nmPessoa , 
								  :sgTipoPessoa:i_sgTipoPessoa ,
								  :idSegmentacao:i_idSegmentacao ,
								  :idUFOperadora:i_idUFOperadora ,
								  :sgUF:i_sgUF ,
								  :idTipoCarteira:i_idTipoCarteira 
								FROM
								   VOL.EMPRESAGESTOR_GC_V01
								WHERE
								   idpessoagestor = :idPessoaGestor    
								AND
								   idconta = :idConta 
								AND ROWNUM < 2;
								   
								CONVIND( idPessoa       , i_idPessoa );
								CONVIND( nmPessoa       , i_nmPessoa );
								CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
								CONVIND( idSegmentacao  , i_idSegmentacao );
								CONVIND( idUFOperadora  , i_idUFOperadora );
								CONVIND( sgUF           , i_sgUF );
								CONVIND( idTipoCarteira , i_idTipoCarteira );
				
								exec sql
								select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
								  from customer.pessoadepara where idpessoa = :idPessoa;
								CONVIND( idPessoaDePara, i_idPessoaDePara );

								if (bPrimeiroLoop == true)
								{
									xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
									xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
									xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
									xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
									xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
									xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
									xml_g->addItem( "sgUF", (char*)sgUF.arr );
									xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
									
									bPrimeiroLoop = false;
								}
										
								xml_g->createTag( "ContaVO" );
									xml_g->addItem( "idConta", (char*)idConta.arr );
									xml_g->addItem( "cdConta", (char*)cdConta.arr );
									if ( i_sgPermissao != -1 )
									{
									   xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
									}
									xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
									xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
									xml_g->addItem( "nmConta", (char*)nmConta.arr );
									xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
								xml_g->closeTag();
							}
							EXEC SQL CLOSE csr_GC_Only;
						
						xml_g->closeTag();
					}
					
			}
			else //ACESSO_GESTOR_DE_CONTA == 2
			{
				nrCNPJ  = (char *)nrDocumento.arr;
				BuscarGestoresDeContaR((char *)idPessoaGestorPrm, (char *)nrCNPJ.c_str(), xml_g);
			}
		} // for(;;)
		EXEC SQL CLOSE csr_4;
	
    ULOG_END( "getCJNPJsByIdGestor()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void BuscarGestoresDeContaR(char * idPessoaGestorPrm, char *CNPJ, XMLGen* xml_g)
{
	ULOG_START( "BuscarGestoresDeContaR()" );
	
/*    LST_DOCS     pDocs;
    string       nrCNPJ;
    char   MsgRet[16];
*/
    struct sqlca sqlca;
	
	
    EXEC SQL BEGIN DECLARE SECTION;

		char idPessoaGestor[43];
	
		char nrDocumentoEmpresa[43];
		short i_nrDocumentoEmpresa = -1;
		
		VARCHAR idConta[65];
		short   i_idConta = -1;
		VARCHAR cdConta[65];
		short   i_cdConta = -1;
		VARCHAR nmConta[65];
		short   i_nmConta = -1;
		
		VARCHAR sgPermissao[256];
		short   i_sgPermissao = -1;
		VARCHAR idPermissao[256];
		short   i_idPermissao = -1;
		
		VARCHAR idPessoa[65];
		short   i_idPessoa = -1;
		VARCHAR nmPessoa[256];
		short   i_nmPessoa = -1;
		VARCHAR sgTipoPessoa[65];
		short   i_sgTipoPessoa = -1;
		VARCHAR idPessoaAux[65];
		short   i_idPessoaAux = -1;
		VARCHAR idPessoaDePara[65];
		short   i_idPessoaDePara = -1;
		VARCHAR idSegmentacao[65];
		short   i_idSegmentacao = -1;
		VARCHAR idUFOperadora[65];
		short   i_idUFOperadora = -1;
		VARCHAR sgUF[256];
		short   i_sgUF = -1;
		VARCHAR idTipoCarteira[65];
		short   i_idTipoCarteira = -1;
        VARCHAR idContaSistemaOrigem[256];
        short   i_idContaSistemaOrigem = -1;
		
				
        VARCHAR inControlePJ[256];
        short   i_inControlePJ = -1;
      
    EXEC SQL END DECLARE SECTION;	
	
    memset( &nrDocumentoEmpresa, 0x0, sizeof(nrDocumentoEmpresa) );
    memset( &idConta    , 0x0, sizeof(idConta) );
    memset( &cdConta    , 0x0, sizeof(cdConta) );
    memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
	memset( &idPermissao, 0x0, sizeof(idPermissao) );
	
    memset( &idPessoa, 0x0, sizeof(idPessoa) );	
    memset( &nmPessoa, 0x0, sizeof(nmPessoa) );	
    memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );	
    memset( &idPessoaAux, 0x0, sizeof(idPessoaAux) );	
    memset( &idPessoaDePara, 0x0, sizeof(idPessoaDePara) );	
    memset( &idSegmentacao, 0x0, sizeof(idSegmentacao) );	
    memset( &idUFOperadora, 0x0, sizeof(idUFOperadora) );	
    memset( &sgUF, 0x0, sizeof(sgUF) );	
    memset( &idTipoCarteira, 0x0, sizeof(idTipoCarteira) );	
	memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );	
		
    strcpy( idPessoaGestor, (const char*)idPessoaGestorPrm );
    strcpy( nrDocumentoEmpresa, (const char*)CNPJ );
    memset( &inControlePJ, 0x0, sizeof(inControlePJ) );	
	
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );	
	
	xml_g->createTag( "CJNPJByIdGestorVO" );
		xml_g->addItem( "nrDocumento", nrDocumentoEmpresa );
		xml_g->addItem( "tpGestor", "GC" );
		
		ULOG( ">>> Executando query para idPessoaGestor [%s] relacionada ao CNPJ [%s]", idPessoaGestor, nrDocumentoEmpresa  );
		
		EXEC SQL DECLARE csr_GC_R CURSOR FOR
				SELECT DISTINCT
					CG.IDPERMISSAOGESTOR,
					C.IDCONTA,
					C.CDCONTA,
					C.NMCONTA,
					C.IDCONTASISTEMAORIGEM,
					C.INCONTROLEPJ
				FROM 
					CUSTOMER.DOCUMENTO         D ,
					CUSTOMER.PESSOADOCUMENTO   PD,
					CUSTOMER.PESSOADEPARA      PDP,
					CUSTOMER.PESSOACONTA       PC,
					CUSTOMER.CONTA             C, 
					VOLE.CONTAGESTOR           CG,
					CUSTOMER.PESSOAGESTORCONTA PGC
				WHERE  
					D.NRDOCUMENTO = :nrDocumentoEmpresa  
				AND PD.IDDOCUMENTO = D.IDDOCUMENTO
				AND PD.IDPESSOA = PDP.IDPESSOA
				AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
				AND PC.IDCONTA = C.IDCONTA
				AND PC.IDTIPORELACIONAMENTO = 2
				AND C.IDCONTA = CG.IDCONTA
				AND PGC.IDCONTA = C.IDCONTA
				AND CG.IDPESSOAGESTOR = :idPessoaGestor
				AND PGC.IDPESSOAGESTOR = CG.IDPESSOAGESTOR;

		bool bPrimeiroLoop = true;
		EXEC SQL OPEN csr_GC_R;
		for( ;; ) 
		{
			memset( &idConta             , 0x0, sizeof(idConta) );
			memset( &cdConta             , 0x0, sizeof(cdConta) );
			memset( &nmConta             , 0x0, sizeof(nmConta) );
			memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
			memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
			memset( &idPermissao         , 0x0, sizeof(idPermissao) );
			memset( &inControlePJ		 , 0x0, sizeof(inControlePJ) );

			
			i_idPermissao = -1;
			
			EXEC SQL WHENEVER NOT FOUND DO BREAK;
			
			EXEC SQL FETCH csr_GC_R INTO
			   :idPermissao:i_idPermissao ,
			   :idConta:i_idConta ,
			   :cdConta:i_cdConta ,
			   :nmConta:i_nmConta ,
			   //:idPessoaAux:i_idPessoaAux ,
			   :idContaSistemaOrigem:i_idContaSistemaOrigem,
			   :inControlePJ:i_inControlePJ;
			   
			
			CONVIND( idPermissao, i_idPermissao );
			CONVIND( idConta, i_idConta );
			CONVIND( cdConta, i_cdConta );
			CONVIND( nmConta, i_nmConta );
			//CONVIND( idPessoaAux, i_idPessoaAux );
			CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
			CONVIND( inControlePJ, i_inControlePJ );
			
			ULOG( ">>> CDConta [%s] relacionada ao GC [%s]", (char*)cdConta.arr, idPessoaGestor );
			ULOG( ">>> IdConta [%s] relacionada ao GC [%s]", (char*)idConta.arr, idPessoaGestor );
			ULOG( ">>> inControlePJ [%s]", (char*)inControlePJ.arr);
			ULOG( ">>> Permissao ao Gestor [%s]", (char*)sgPermissao.arr );

			EXEC SQL WHENEVER NOT FOUND CONTINUE;
			
			EXEC SQL 
				SELECT 
					NVL(PG.SGPERMISSAOGESTOR,'ND') SGPERMISSAOGESTOR
				INTO
					:sgPermissao:i_sgPermissao
				FROM 
					APOIO.PERMISSAOGESTOR PG
				WHERE  
					PG.IDPERMISSAOGESTOR = :idPermissao AND ROWNUM < 2;
					
			ULOG( ">>> SGPERMISSAOGESTOR [%s] relacionada ao GC [%s]", (char*)sgPermissao.arr, idPessoaGestor );
			
			EXEC SQL
			SELECT 
			   idpessoa, 
			   nmpessoa, 
			   sgtipopessoa, 
			   idsegmentacao, 
			   idufoperadora, 
			   sguf, 
			   idtipocarteira 
			INTO
			  :idPessoa:i_idPessoa ,
			  :nmPessoa:i_nmPessoa , 
			  :sgTipoPessoa:i_sgTipoPessoa ,
			  :idSegmentacao:i_idSegmentacao ,
			  :idUFOperadora:i_idUFOperadora ,
			  :sgUF:i_sgUF ,
			  :idTipoCarteira:i_idTipoCarteira 
			FROM
			   VOL.EMPRESAGESTOR_GC_V01
			WHERE
			   idpessoagestor = :idPessoaGestor    
			AND
			   idconta = :idConta 
			AND ROWNUM < 2;
			   
			CONVIND( idPessoa       , i_idPessoa );
			CONVIND( nmPessoa       , i_nmPessoa );
			CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
			CONVIND( idSegmentacao  , i_idSegmentacao );
			CONVIND( idUFOperadora  , i_idUFOperadora );
			CONVIND( sgUF           , i_sgUF );
			CONVIND( idTipoCarteira , i_idTipoCarteira );

			exec sql
			select idpessoadepara into :idPessoaDePara:i_idPessoaDePara 
			  from customer.pessoadepara where idpessoa = :idPessoa;
			CONVIND( idPessoaDePara, i_idPessoaDePara );

			if (bPrimeiroLoop == true)
			{			
				xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
				xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
				xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
				xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
				xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
				xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
				xml_g->addItem( "sgUF", (char*)sgUF.arr );
				xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
				
				bPrimeiroLoop = false;
			}		
			
			xml_g->createTag( "ContaVO" );
				xml_g->addItem( "idConta", (char*)idConta.arr );
				xml_g->addItem( "cdConta", (char*)cdConta.arr );
				if ( i_sgPermissao != -1 )
				{
				   xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
				}
				xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
				xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
				xml_g->addItem( "nmConta", (char*)nmConta.arr );
				xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
			xml_g->closeTag();
		}
		EXEC SQL CLOSE csr_GC_R;

		xml_g->closeTag();

    ULOG_END( "BuscarGestoresDeContaR()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



void getInscricaoEstadualByEmpresa( char * idPessoaPrm, XMLGen* xml_g )
{
    ULOG_START( "getInscricaoEstadualByEmpresa()" );
    
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char idPessoa[43];

       char nrDocumento[65];
       short i_nrDocumento = -1;
       
    EXEC SQL END DECLARE SECTION;	
    
    strcpy( idPessoa, idPessoaPrm );
    
    ULOG( "idPessoa [%s]", idPessoa );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL DECLARE csr_5 CURSOR FOR
    select 
       d.nrdocumento 
    from 
       customer.pessoadocumento pd, 
       customer.documento d, 
       apoio.tipodocumento td 
    where 
       pd.iddocumento = d.iddocumento  
    and td.idtipodocumento = d.idtipodocumento 
    and td.sgclassificacao ='IE' 
    and pd.idpessoa = :idPessoa ;

                
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN csr_5;
    for( ;; ) 
    {
        EXEC SQL FETCH csr_5 INTO
           :nrDocumento:i_nrDocumento ;

        xml_g->createTag( "IEByEmpresaVO" );
            xml_g->addItem( "nrDocumento", trim(nrDocumento) );
        xml_g->closeTag();
    }

    EXEC SQL CLOSE csr_5;

    ULOG_END( "getInscricaoEstadualByEmpresa()" );

    return;
 
    sqlErrorConstrutor:
        throw TuxBasicOraException(sqlca.sqlcode); 
}



/*
void getCJNPJsByIdGestor_GM( char * idPessoaGestorPrm, XMLGen * xml_g )
{
   ULOG_START( "getCJNPJsByIdGestor_GM()" );
    
   int j;
   stRegistro       m_stRegistro;
   
   string registro;
   
   LST_DOCS     pDocs;

   string       nrCNPJ;
   char   MsgRet[16];
   char   idPessoaAnter[65];

   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      int rows_to_fetch = 500;
      int rows_this_time;
      int rows_before = 0;
      int ctGestorMaster;
      char idPessoaGestor[43];

      VARCHAR nrCPF[65];
      short i_nrCPF = -1;

      VARCHAR nrDocumento_gm[500][65];
      short i_nrDocumento_gm[500];
      VARCHAR nrDocumento[65];
      short i_nrDocumento;

      VARCHAR idConta[65];
      short   i_idConta = -1;
      VARCHAR cdConta[65];
      short   i_cdConta = -1;
      VARCHAR nmConta[65];
      short   i_nmConta = -1;

      VARCHAR sgPermissao[256];
      short   i_sgPermissao = -1;

      VARCHAR idPessoa_gm[500][65];
      short   i_idPessoa_gm[500];
      VARCHAR idPessoa[65];
      short   i_idPessoa;

      VARCHAR nmPessoa_gm[500][256];
      short   i_nmPessoa_gm[500];
      VARCHAR nmPessoa[256];
      short   i_nmPessoa;

      VARCHAR sgTipoPessoa_gm[500][65];
      short   i_sgTipoPessoa_gm[500];
      VARCHAR sgTipoPessoa[65];
      short   i_sgTipoPessoa;

      VARCHAR idPessoaAux[65];
      short   i_idPessoaAux = -1;

      VARCHAR idPessoaDePara_gm[500][65];
      short   i_idPessoaDePara_gm[500];
      VARCHAR idPessoaDePara[65];
      short   i_idPessoaDePara;

      VARCHAR idSegmentacao_gm[500][65];
      short   i_idSegmentacao_gm[500];
      VARCHAR idSegmentacao[65];
      short   i_idSegmentacao;

      VARCHAR idUFOperadora_gm[500][65];
      short   i_idUFOperadora_gm[500];
      VARCHAR idUFOperadora[65];
      short   i_idUFOperadora;

      VARCHAR sgUF_gm[500][256];
      short   i_sgUF_gm[500];
      VARCHAR sgUF[256];
      short   i_sgUF;

      VARCHAR idTipoCarteira_gm[500][65];
      short   i_idTipoCarteira_gm[500];
      VARCHAR idTipoCarteira[65];
      short   i_idTipoCarteira;

      VARCHAR idContaSistemaOrigem[256];
      short   i_idContaSistemaOrigem = -1;
      VARCHAR idPessoDeParaConta[256];
      short   i_idPessoDeParaConta = -1;

      VARCHAR idPessoaConta[40];
      short   i_idPessoaConta = -1;
      VARCHAR idContaPessoaConta[40];
      short   i_idContaPessoaConta = -1;
     
      VARCHAR idPessoa_Master[40]; 
      short   i_idPessoa_Master = -1;
      VARCHAR nrCNPJ_Master[64];
      short   i_nrCNPJ_Master = -1;
        
   EXEC SQL END DECLARE SECTION;	

   memset( &nrCPF, 0x0, sizeof(nrCPF) );
   memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
   memset( &idConta    , 0x0, sizeof(idConta) );
   memset( &cdConta    , 0x0, sizeof(cdConta) );
   memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
   memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );

   strcpy( idPessoaGestor, idPessoaGestorPrm );

   ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

   EXEC SQL WHENEVER NOT FOUND CONTINUE;

   EXEC SQL
   SELECT
      NRDOCUMENTO
   INTO
      :nrCPF:i_nrCPF
   FROM
      CUSTOMER.PESSOAGESTOR
   WHERE
      IDPESSOAGESTOR = :idPessoaGestor ;

   CONVIND( nrCPF, i_nrCPF );

   ULOG( "/// Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

   EXEC SQL
   SELECT
      COUNT(NRDOCUMENTOGESTOR)
   INTO
      :ctGestorMaster
   FROM
      CUSTOMER.PESSOAGESTORMASTER
   WHERE
      NRDOCUMENTOGESTOR = :nrCPF ;

   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   ULOG( "ctGestorMaster [%d]", ctGestorMaster );


   xml_g->createTag( "CJNPJByIdGestorVO" );
          xml_g->addItem( "nrDocumento", "10922331907480" );
          xml_g->addItem( "tpGestor", "GM" );
          xml_g->addItem( "idPessoa", "2001594646" );
          xml_g->addItem( "nmPessoa", "FABRICA DE CARROS" );
          xml_g->addItem( "sgTipoPessoa", "PJ" );
          xml_g->addItem( "idPessoaDePara", "2001593381" );
          xml_g->addItem( "idSegmentacao", "11" );
          xml_g->addItem( "idUFOperadora", "21" );
          xml_g->addItem( "sgUF", "NC" );
          xml_g->addItem( "idTipoCarteira", "13" );
   xml_g->closeTag();
         

   ULOG( "*** Finalizando busca de documentos para Gestor Master..." );

   ULOG_END( "getCJNPJsByIdGestor_GM()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCNPJsVinculoIdGestor( char * idPessoaGestorPrm, XMLGen * xml_g )
{
   ULOG_START( "getCNPJsVinculoIdGestor()" );
    
   int j;
   stRegistro       m_stRegistro;
   
   string registro;
   
   LST_DOCS     pDocs;

   string       nrCNPJ;
   char   MsgRet[16];
   char   idPessoaAnter[65];

   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      int rows_to_fetch = 500;
      int rows_this_time;
      int rows_before = 0;
      int ctGestorMaster;
      char idPessoaGestor[43];

      VARCHAR nrCPF[65];
      short i_nrCPF = -1;

      VARCHAR nrDocumento_gm[500][65];
      short i_nrDocumento_gm[500];
      VARCHAR nrDocumento[65];
      short i_nrDocumento;

      VARCHAR idConta[65];
      short   i_idConta = -1;
      VARCHAR cdConta[65];
      short   i_cdConta = -1;
      VARCHAR nmConta[65];
      short   i_nmConta = -1;

      VARCHAR sgPermissao[256];
      short   i_sgPermissao = -1;

      VARCHAR idPessoa_gm[500][65];
      short   i_idPessoa_gm[500];
      VARCHAR idPessoa[65];
      short   i_idPessoa;

      VARCHAR nmPessoa_gm[500][256];
      short   i_nmPessoa_gm[500];
      VARCHAR nmPessoa[256];
      short   i_nmPessoa;

      VARCHAR sgTipoPessoa_gm[500][65];
      short   i_sgTipoPessoa_gm[500];
      VARCHAR sgTipoPessoa[65];
      short   i_sgTipoPessoa;

      VARCHAR idPessoaAux[65];
      short   i_idPessoaAux = -1;

      VARCHAR idPessoaDePara_gm[500][65];
      short   i_idPessoaDePara_gm[500];
      VARCHAR idPessoaDePara[65];
      short   i_idPessoaDePara;

      VARCHAR idSegmentacao_gm[500][65];
      short   i_idSegmentacao_gm[500];
      VARCHAR idSegmentacao[65];
      short   i_idSegmentacao;

      VARCHAR idUFOperadora_gm[500][65];
      short   i_idUFOperadora_gm[500];
      VARCHAR idUFOperadora[65];
      short   i_idUFOperadora;

      VARCHAR sgUF_gm[500][256];
      short   i_sgUF_gm[500];
      VARCHAR sgUF[256];
      short   i_sgUF;

      VARCHAR idTipoCarteira_gm[500][65];
      short   i_idTipoCarteira_gm[500];
      VARCHAR idTipoCarteira[65];
      short   i_idTipoCarteira;

      VARCHAR idContaSistemaOrigem[256];
      short   i_idContaSistemaOrigem = -1;
      VARCHAR idPessoDeParaConta[256];
      short   i_idPessoDeParaConta = -1;

      VARCHAR idPessoaConta[40];
      short   i_idPessoaConta = -1;
      VARCHAR idContaPessoaConta[40];
      short   i_idContaPessoaConta = -1;
     
      VARCHAR idPessoa_Master[40]; 
      short   i_idPessoa_Master = -1;
      VARCHAR nrCNPJ_Master[64];
      short   i_nrCNPJ_Master = -1;
        
   EXEC SQL END DECLARE SECTION;	

   memset( &nrCPF, 0x0, sizeof(nrCPF) );
   memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
   memset( &idConta    , 0x0, sizeof(idConta) );
   memset( &cdConta    , 0x0, sizeof(cdConta) );
   memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
   memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );

   strcpy( idPessoaGestor, idPessoaGestorPrm );

   ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

   EXEC SQL WHENEVER NOT FOUND CONTINUE;

   EXEC SQL
   SELECT
      NRDOCUMENTO
   INTO
      :nrCPF:i_nrCPF
   FROM
      CUSTOMER.PESSOAGESTOR
   WHERE
      IDPESSOAGESTOR = :idPessoaGestor ;

   CONVIND( nrCPF, i_nrCPF );

   ULOG( "/// Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

   xml_g->createTag( "CJNPJByIdGestorVO" );
      xml_g->addItem( "idPessoaGestor", "1363710" );
      xml_g->createTag( "CNPJ" );
          xml_g->addItem( "nrDocumento", "15102288000182" );
          xml_g->addItem( "nrDocumento", "15102288028516" );
          xml_g->addItem( "nrDocumento", "15102288008248" );
          xml_g->addItem( "nrDocumento", "15102288005494" );
          xml_g->addItem( "nrDocumento", "15102288000930" );
          xml_g->addItem( "nrDocumento", "15102288032386" );
          xml_g->addItem( "nrDocumento", "61156410000200" );
          xml_g->addItem( "nrDocumento", "15102288030928" );
          xml_g->addItem( "nrDocumento", "15102288002045" );
          xml_g->addItem( "nrDocumento", "10143462000111" );
          xml_g->addItem( "nrDocumento", "15102288034400" );
          xml_g->addItem( "nrDocumento", "15102288033277" );
          xml_g->addItem( "nrDocumento", "13015974000190" );
      xml_g->closeTag();
   xml_g->closeTag();
         

   ULOG( "*** Finalizando busca de documentos para Gestor..." );

   ULOG_END( "getCNPJsVinculoIdGestor()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor_GC( char * idPessoaGestorPrm, XMLGen * xml_g )
{
    ULOG_START( "getCJNPJsByIdGestor_GC()" );
    
   int j;
   stRegistro       m_stRegistro;
   
   string registro;
   string       nrCNPJ;
   char   MsgRet[16];
   char   idPessoaAnter[65];

   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      char idPessoaGestor[43];

      VARCHAR nrCPF[65];
      short i_nrCPF = -1;

      VARCHAR nrDocumento[65];
      short i_nrDocumento;

      VARCHAR idConta[65];
      short   i_idConta = -1;
      VARCHAR cdConta[65];
      short   i_cdConta = -1;
      VARCHAR nmConta[65];
      short   i_nmConta = -1;

      VARCHAR sgPermissao[256];
      short   i_sgPermissao = -1;

      VARCHAR idPessoa[65];
      short   i_idPessoa;

      VARCHAR nmPessoa[256];
      short   i_nmPessoa;

      VARCHAR sgTipoPessoa[65];
      short   i_sgTipoPessoa;

      VARCHAR idPessoaAux[65];
      short   i_idPessoaAux = -1;

      VARCHAR idPessoaDePara[65];
      short   i_idPessoaDePara;

      VARCHAR idSegmentacao[65];
      short   i_idSegmentacao;

      VARCHAR idUFOperadora[65];
      short   i_idUFOperadora;

      VARCHAR sgUF[256];
      short   i_sgUF;

      VARCHAR idTipoCarteira[65];
      short   i_idTipoCarteira;

      VARCHAR idContaSistemaOrigem[256];
      short   i_idContaSistemaOrigem = -1;
      VARCHAR idPessoDeParaConta[256];
      short   i_idPessoDeParaConta = -1;

      VARCHAR idPessoaConta[40];
      short   i_idPessoaConta = -1;
      VARCHAR idContaPessoaConta[40];
      short   i_idContaPessoaConta = -1;

      VARCHAR idPessoa_Master[40]; 
      short   i_idPessoa_Master = -1;
      VARCHAR nrCNPJ_Master[64];
      short   i_nrCNPJ_Master = -1;
        
    EXEC SQL END DECLARE SECTION;	
    
    memset( &nrCPF       , 0x0, sizeof(nrCPF) );
    memset( &nrDocumento , 0x0, sizeof(nrDocumento) );
    memset( &idConta     , 0x0, sizeof(idConta) );
    memset( &cdConta     , 0x0, sizeof(cdConta) );
    memset( &sgPermissao , 0x0, sizeof(sgPermissao) );
    memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    
    ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT
       NRDOCUMENTO
    INTO
       :nrCPF:i_nrCPF
    FROM
       CUSTOMER.PESSOAGESTOR
    WHERE
       IDPESSOAGESTOR = :idPessoaGestor ;

    CONVIND( nrCPF, i_nrCPF );
    
    ULOG( "@@@ Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

    
                
   ULOG( "!!! Buscando GC para idPessoaGestor [%s]", idPessoaGestor );
    
   xml_g->createTag( "CJNPJByIdGestorVO" );
      xml_g->addItem( "nrDocumento", "21135922982043" );
      xml_g->addItem( "tpGestor", "GC" );
      xml_g->addItem( "idPessoa", "2001585128" );
      xml_g->addItem( "nmPessoa", "SOCIEDADE FOGM-AS LTDA." );
      xml_g->addItem( "sgTipoPessoa", "PJ" );
      xml_g->addItem( "idPessoaDePara", "2001583932" );
      xml_g->addItem( "idSegmentacao", "11" );
      xml_g->addItem( "idUFOperadora", "1" );
      xml_g->addItem( "sgUF", "SP" );
      xml_g->addItem( "idTipoCarteira", "13" );
      xml_g->createTag( "ContaVO" );
         xml_g->addItem( "idConta", "2003509739" );
         xml_g->addItem( "cdConta", "0030043709" );
         xml_g->addItem( "sgPermissaoGestor", "LR" );
         xml_g->addItem( "idContaSistemaOrigem", "0030043709" );
         xml_g->addItem( "idPessoaDeParaConta", "2001583932" );
         xml_g->addItem( "nmConta", "TESTE SOCIEDADE FOGA" );
      xml_g->closeTag();
      xml_g->createTag( "ContaVO" );
         xml_g->addItem( "idConta", "2003509741" );
         xml_g->addItem( "cdConta", "0030043712" );
         xml_g->addItem( "sgPermissaoGestor", "A" );
         xml_g->addItem( "idContaSistemaOrigem", "0030043712" );
         xml_g->addItem( "idPessoaDeParaConta", "2001583932" );
         xml_g->addItem( "nmConta", "" );
      xml_g->closeTag();
   xml_g->closeTag();
   xml_g->createTag( "CJNPJByIdGestorVO" );
      xml_g->addItem( "nrDocumento", "36489961598500" );
      xml_g->addItem( "tpGestor", "GC" );
      xml_g->addItem( "idPessoa", "2001585203" );
      xml_g->addItem( "nmPessoa", "VIDROHOUSE VIDRAM-GARIA LTDA ME" );
      xml_g->addItem( "sgTipoPessoa", "PJ" );
      xml_g->addItem( "idPessoaDePara", "2001584007" );
      xml_g->addItem( "idSegmentacao", "11" );
      xml_g->addItem( "idUFOperadora", "1" );
      xml_g->addItem( "sgUF", "SP" );
      xml_g->addItem( "idTipoCarteira", "13" );
      xml_g->createTag( "ContaVO" );
         xml_g->addItem( "idConta", "2003509807" );
         xml_g->addItem( "cdConta", "0030043860" );
         xml_g->addItem( "sgPermissaoGestor", "A" );
         xml_g->addItem( "idContaSistemaOrigem", "0030043860" );
         xml_g->addItem( "idPessoaDeParaConta", "2001584007" );
         xml_g->addItem( "nmConta", "VIDROHOUSE" );
      xml_g->closeTag();
   xml_g->closeTag();

   ULOG_END( "getCJNPJsByIdGestor_GC()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}
*/



void getCJNPJsByIdGestor_GM( char * idPessoaGestorPrm, XMLGen * xml_g )
{
   ULOG_START( "getCJNPJsByIdGestor_GM()" );
    
   int j;
   stRegistro       m_stRegistro;
   
   string registro;
   
   LST_DOCS     pDocs;

   string       nrCNPJ;
   char   MsgRet[16];
   char   idPessoaAnter[65];

   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      int rows_to_fetch = 500;
      int rows_this_time;
      int rows_before = 0;
      int ctGestorMaster;
      char idPessoaGestor[43];

      VARCHAR nrCPF[65];
      short i_nrCPF = -1;

      VARCHAR nrDocumento_gm[500][65];
      short i_nrDocumento_gm[500];
      VARCHAR nrDocumento[65];
      short i_nrDocumento;

      VARCHAR idConta[65];
      short   i_idConta = -1;
      VARCHAR cdConta[65];
      short   i_cdConta = -1;
      VARCHAR nmConta[65];
      short   i_nmConta = -1;

      VARCHAR sgPermissao[256];
      short   i_sgPermissao = -1;

      VARCHAR idPessoa_gm[500][65];
      short   i_idPessoa_gm[500];
      VARCHAR idPessoa[65];
      short   i_idPessoa;

      VARCHAR nmPessoa_gm[500][256];
      short   i_nmPessoa_gm[500];
      VARCHAR nmPessoa[256];
      short   i_nmPessoa;

      VARCHAR sgTipoPessoa_gm[500][65];
      short   i_sgTipoPessoa_gm[500];
      VARCHAR sgTipoPessoa[65];
      short   i_sgTipoPessoa;

      VARCHAR idPessoaAux[65];
      short   i_idPessoaAux = -1;

      VARCHAR idPessoaDePara_gm[500][65];
      short   i_idPessoaDePara_gm[500];
      VARCHAR idPessoaDePara[65];
      short   i_idPessoaDePara;

      VARCHAR idSegmentacao_gm[500][65];
      short   i_idSegmentacao_gm[500];
      VARCHAR idSegmentacao[65];
      short   i_idSegmentacao;

      VARCHAR idUFOperadora_gm[500][65];
      short   i_idUFOperadora_gm[500];
      VARCHAR idUFOperadora[65];
      short   i_idUFOperadora;

      VARCHAR sgUF_gm[500][256];
      short   i_sgUF_gm[500];
      VARCHAR sgUF[256];
      short   i_sgUF;

      VARCHAR idTipoCarteira_gm[500][65];
      short   i_idTipoCarteira_gm[500];
      VARCHAR idTipoCarteira[65];
      short   i_idTipoCarteira;

      VARCHAR idContaSistemaOrigem[256];
      short   i_idContaSistemaOrigem = -1;
      VARCHAR idPessoDeParaConta[256];
      short   i_idPessoDeParaConta = -1;

      VARCHAR idPessoaConta[40];
      short   i_idPessoaConta = -1;
      VARCHAR idContaPessoaConta[40];
      short   i_idContaPessoaConta = -1;
     
      VARCHAR idPessoa_Master[40]; 
      short   i_idPessoa_Master = -1;
      VARCHAR nrCNPJ_Master[64];
      short   i_nrCNPJ_Master = -1;
        
   EXEC SQL END DECLARE SECTION;	

   memset( &nrCPF, 0x0, sizeof(nrCPF) );
   memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
   memset( &idConta    , 0x0, sizeof(idConta) );
   memset( &cdConta    , 0x0, sizeof(cdConta) );
   memset( &sgPermissao, 0x0, sizeof(sgPermissao) );
   memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );

   strcpy( idPessoaGestor, idPessoaGestorPrm );

   ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

   EXEC SQL WHENEVER NOT FOUND CONTINUE;

   EXEC SQL
   SELECT
      NRDOCUMENTO
   INTO
      :nrCPF:i_nrCPF
   FROM
      CUSTOMER.PESSOAGESTOR
   WHERE
      IDPESSOAGESTOR = :idPessoaGestor ;

   CONVIND( nrCPF, i_nrCPF );

   ULOG( "/// Encontrado CPF Gestor [%s]", (char*)nrCPF.arr );

   EXEC SQL
   SELECT
      COUNT(NRDOCUMENTOGESTOR)
   INTO
      :ctGestorMaster
   FROM
      CUSTOMER.PESSOAGESTORMASTER
   WHERE
      NRDOCUMENTOGESTOR = :nrCPF ;

   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   ULOG( "ctGestorMaster [%d]", ctGestorMaster );

   if ( ctGestorMaster > 0 )
   {
      ULOG( "*** Eh Gestor Master, realizando busca..." );
    
      EXEC SQL DECLARE csr_Empresas_GM CURSOR FOR
        SELECT DISTINCT
           idpessoa, 
           nmpessoa, 
           idpessoadepara, 
           idufoperadora, 
           sguf, 
           idtipocarteira ,
           idsegmentacao, 
           nrCNPJ  
        FROM
           VOL.EMPRESAGESTOR_GM_V01
        WHERE
           nrCPF = :nrCPF
        AND
           inAssociacao = 1 ;
      
      /*
      SELECT UNIQUE
         P.IDPESSOA ,
         p.NMPESSOA ,
         ps.IDPESSOADEPARA ,
         uf.IDUFOPERADORA ,
         auf.SGUF ,
         p.IDTIPOCARTEIRA,
         nvl( psh.idsegmentacao, 11 ),
         PGM.NRDOCUMENTOEMPRESA
      FROM 
         customer.pessoa p,
         customer.pessoaendereco pe,
         customer.ufoperadora uf,
         apoio.uf auf,
         CUSTOMER.DOCUMENTO DOCUMENTO,
         CUSTOMER.PESSOAGESTORMASTER PGM,
         CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO ,
         customer.pessoasegmentacaohistorico psh,
         customer.pessoasegmentacao ps
      WHERE
      exists
      (
         select 1 from CUSTOMER.PESSOADEPARA PDP 
         where ps.idpessoadepara = pdp.IDPESSOADEPARA 
         and p.idpessoa = pdp.idpessoa 
         and PDP.IDPESSOA = PESSOADOCUMENTO.IDPESSOA  
      )
      and ps.idpessoasegmentacao = psh.idpessoasegmentacao
      and p.IDTIPOPESSOA = 2
      and pe.IDPESSOA = p.IDPESSOA
      AND pe.iduf = uf.iduf
      AND pe.iduf = auf.iduf
      AND PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO
      AND DOCUMENTO.IDTIPODOCUMENTO = 2
      AND PGM.NRDOCUMENTOGESTOR = :nrCPF
      AND PGM.INASSOCIACAO = 1
      AND PGM.NRDOCUMENTOEMPRESA = DOCUMENTO.NRDOCUMENTO ;
      */
      

      EXEC SQL WHENEVER NOT FOUND CONTINUE;

      EXEC SQL OPEN csr_Empresas_GM;
      for ( ;; )
      {
         //ULOG( ">>> Vai executar o fecth..." );

         EXEC SQL FOR :rows_to_fetch FETCH csr_Empresas_GM INTO
          :idPessoa_gm:i_idPessoa_gm ,
          :nmPessoa_gm:i_nmPessoa_gm ,
          :idPessoaDePara_gm:i_idPessoaDePara_gm ,
          :idUFOperadora_gm:i_idUFOperadora_gm ,
          :sgUF_gm:i_sgUF_gm ,
          :idTipoCarteira_gm:i_idTipoCarteira_gm ,
          :idSegmentacao_gm:i_idSegmentacao_gm ,
          :nrDocumento_gm:i_nrDocumento_gm ;

         //ULOG( "*** sqlca.sqlerrd[2] [%d]", sqlca.sqlerrd[2] );
         //ULOG( "*** rows_before      [%d]", rows_before );
         
         rows_this_time = sqlca.sqlerrd[2] - rows_before; 
         rows_before = sqlca.sqlerrd[2]; 
            
         //ULOG( "*** rows_this_time [%d]", rows_this_time );
            
         for ( j=0 ; j < rows_this_time; j++ )
         {
            CONVIND( idPessoa_gm[j], i_idPessoa_gm[j] );
            CONVIND( nmPessoa_gm[j], i_nmPessoa_gm[j] );
            CONVIND( idPessoaDePara_gm[j], i_idPessoaDePara_gm[j] );
            CONVIND( idUFOperadora_gm[j], i_idUFOperadora_gm[j] );
            CONVIND( sgUF_gm[j], i_sgUF_gm[j] );
            CONVIND( idTipoCarteira_gm[j], i_idTipoCarteira_gm[j] );
            CONVIND( idSegmentacao_gm[j], i_idSegmentacao_gm[j] );
            CONVIND( nrDocumento_gm[j], i_nrDocumento_gm[j] );

            nrCNPJ = (char*)nrDocumento_gm[j].arr;

            xml_g->createTag( "CJNPJByIdGestorVO" );
                   xml_g->addItem( "nrDocumento", (char*)nrDocumento_gm[j].arr );
                xml_g->addItem( "tpGestor", "GM" );
                   xml_g->addItem( "idPessoa", (char*)idPessoa_gm[j].arr );
                   xml_g->addItem( "nmPessoa", (char*)nmPessoa_gm[j].arr );
                   xml_g->addItem( "sgTipoPessoa", "PJ" );
                   xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara_gm[j].arr );
                   xml_g->addItem( "idSegmentacao", (char*)idSegmentacao_gm[j].arr );
                   xml_g->addItem( "idUFOperadora", (char*)idUFOperadora_gm[j].arr );
                   xml_g->addItem( "sgUF", (char*)sgUF_gm[j].arr );
                   xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira_gm[j].arr );
            xml_g->closeTag();
         
         }

         if ( sqlca.sqlcode == 1403 )
            break;
               
      }
      EXEC SQL CLOSE csr_Empresas_GM;
      ULOG( "*** Finalizando busca de documentos para Gestor Master..." );
        
   }
   else
   {
      ULOG( "*** Nao eh Gestor Master." );
   }
    
   ULOG_END( "getCJNPJsByIdGestor_GM()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCNPJsVinculoIdGestor( char * idPessoaGestorPrm, XMLGen * xml_g )
{
   ULOG_START( "getCNPJsVinculoIdGestor()" );
   
   struct sqlca sqlca;

    
   EXEC SQL BEGIN DECLARE SECTION;

      char idPessoaGestor[43];

      VARCHAR nrDocumento[65];
      short i_nrDocumento;
        
   EXEC SQL END DECLARE SECTION;	
    
   memset( &nrDocumento , 0x0, sizeof(nrDocumento) );
   strcpy( idPessoaGestor, idPessoaGestorPrm );
    
   ULOG( "### Pesquisando CNPJs para idPessoaGestor [%s]", idPessoaGestor );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
   EXEC SQL DECLARE csr_CNPJs_Gestor CURSOR FOR
   select 
      nrdocumento 
   from 
      customer.documento documento 
   where 
      documento.iddocumento
   in
   (
      select
         pessoadocumento.iddocumento
      from 
       vole.contagestor contagestor, 
       customer.pessoaconta pessoaconta, 
       customer.pessoadocumento pessoadocumento, 
       customer.pessoadepara pessoadepara     
      where 
         pessoadepara.IDPESSOA=pessoadocumento.idpessoa 
      and pessoadepara.idpessoadepara=pessoaconta.idpessoadepara 
      and contagestor.idconta=pessoaconta.idconta     
      and pessoaconta.IDTIPORELACIONAMENTO = 2     
      and contagestor.IDPESSOAGESTOR = :idPessoaGestor 
   ) 
   and documento.idtipodocumento = 2;
    
   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   xml_g->createTag( "CJNPJByIdGestorVO" );
      xml_g->addItem( "idPessoaGestor", idPessoaGestor );
      xml_g->createTag( "CNPJ" );
      EXEC SQL OPEN csr_CNPJs_Gestor;
      for( ;; ) 
      {
         EXEC SQL FETCH csr_CNPJs_Gestor INTO
           :nrDocumento:i_nrDocumento ;
           
         CONVIND( nrDocumento, i_nrDocumento );
         ULOG( "*** Encontrado CNPJ => [%s]", (char*)nrDocumento.arr );

         xml_g->addItem( "nrDocumento", (char*)nrDocumento.arr );
      }
      EXEC SQL CLOSE csr_CNPJs_Gestor;
      xml_g->closeTag();
   xml_g->closeTag();
   
   ULOG_END( "getCNPJsVinculoIdGestor()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}



void getCJNPJsByIdGestor_GC( char * idPessoaGestorPrm, char* nrDocumentoPrm, XMLGen * xml_g )
{
   ULOG_START( "getCJNPJsByIdGestor_GC()" );
    
   int j;
   
   char   MsgRet[16];
   char   idPessoaAnter[65];
	int ACESSO_GESTOR_DE_CONTA=0;

   struct sqlca sqlca;
    
	EXEC SQL BEGIN DECLARE SECTION;

		char idPessoaGestor[43];

		char  nrDocumento[65];

		VARCHAR idConta[65];
		short   i_idConta = -1;
		VARCHAR cdConta[65];
		short   i_cdConta = -1;
		VARCHAR nmConta[65];
		short   i_nmConta = -1;

		VARCHAR sgPermissao[256];
		short   i_sgPermissao = -1;

		VARCHAR idPessoa[65];
		short   i_idPessoa;

		VARCHAR nmPessoa[256];
		short   i_nmPessoa;

		VARCHAR sgTipoPessoa[65];
		short   i_sgTipoPessoa;

		VARCHAR idPessoaAux[65];
		short   i_idPessoaAux = -1;

		VARCHAR idPessoaDePara[65];
		short   i_idPessoaDePara;

		VARCHAR idSegmentacao[65];
		short   i_idSegmentacao;

		VARCHAR idUFOperadora[65];
		short   i_idUFOperadora;

		VARCHAR sgUF[256];
		short   i_sgUF;

		VARCHAR idTipoCarteira[65];
		short   i_idTipoCarteira;

		VARCHAR idContaSistemaOrigem[256];
		short   i_idContaSistemaOrigem = -1;

		VARCHAR inControlePJ[256];
		short   i_inControlePJ = -1;

		VARCHAR parametroValor[256];
		const char* parametro = {"ACESSO_GESTOR_DE_CONTA"};
		short i_parametroValor = -1;

	EXEC SQL END DECLARE SECTION;	

    memset( &idConta     , 0x0, sizeof(idConta) );
    memset( &cdConta     , 0x0, sizeof(cdConta) );
    memset( &sgPermissao , 0x0, sizeof(sgPermissao) );
    memset( idPessoaAnter, 0x0, sizeof(idPessoaAnter) );
    
    strcpy( idPessoaGestor, idPessoaGestorPrm );
    strcpy( nrDocumento, nrDocumentoPrm );
    
   ULOG( "### Pesquisando idPessoaGestor [%s]", idPessoaGestor );
   ULOG( "*** Gestor de Conta para o CNPJ => [%s]", nrDocumento );

   EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
   	EXEC SQL
    SELECT
		DSVALORPARAMETRO 
	INTO 
		:parametroValor:i_parametroValor
    FROM 
		APOIO.PARAMETRO
    WHERE  
		CDPARAMETRO = :parametro;
	CONVIND( idConta, i_idConta );

	if(i_parametroValor != -1)
	{
		ACESSO_GESTOR_DE_CONTA = atoi((const char*)parametroValor.arr);
	}
	else
	{
		ACESSO_GESTOR_DE_CONTA = 1;
    }

   
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	if( ACESSO_GESTOR_DE_CONTA == 1)
	{
		xml_g->createTag( "CJNPJByIdGestorVO" );
			xml_g->addItem( "nrDocumento", nrDocumento );
			xml_g->addItem( "tpGestor", "GC" );
					
		EXEC SQL DECLARE csr_Contas_GC CURSOR FOR
		SELECT 
			C.IDCONTA,
			C.CDCONTA,
			C.NMCONTA,
			C.IDCONTASISTEMAORIGEM,
			NVL(C.INCONTROLEPJ,0) ,
			GC_V01.idpessoa, 
			GC_V01.nmpessoa, 
			GC_V01.sgtipopessoa, 
			GC_V01.idsegmentacao, 
			GC_V01.idufoperadora, 
			GC_V01.sguf, 
			GC_V01.idtipocarteira,
			pG.SGPERMISSAOGESTOR,
			PDP.IDPESSOADEPARA 
		FROM 
			VOL.EMPRESAGESTOR_GC_V01   GC_V01,
			APOIO.PERMISSAOGESTOR      PG ,
			CUSTOMER.CONTA             C ,
			CUSTOMER.DOCUMENTO         D ,
			CUSTOMER.PESSOADOCUMENTO   PD,
			CUSTOMER.PESSOACONTA       PC,
			CUSTOMER.PESSOADEPARA      PDP,
			VOLE.CONTAGESTOR           CG
		WHERE  
			PC.IDTIPORELACIONAMENTO = 2
			AND gc_V01.idpessoagestor = CG.IDPESSOAGESTOR
			and cg.IDPERMISSAOGESTOR = pg.IDPERMISSAOGESTOR(+)    
			AND gc_V01.idconta = C.IDCONTA
			AND PD.IDDOCUMENTO = D.IDDOCUMENTO
			AND PC.IDPESSOADEPARA = PDP.IDPESSOADEPARA
			AND PDP.IDPESSOA = PD.IDPESSOA
			AND PDP.IDPESSOADEPARA = PC.IDPESSOADEPARA
			AND PC.IDCONTA = CG.IDCONTA
			AND PC.IDCONTA = C.IDCONTA
			AND D.NRDOCUMENTO = :nrDocumento
			AND CG.IDPESSOAGESTOR = :idPessoaGestor ;
		  
			 
		bool bPrimeiroLoop = true;
		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		EXEC SQL OPEN csr_Contas_GC;
		
		for( ;; ) 
		{
			i_sgPermissao = -1;

			memset( &idConta             , 0x0, sizeof(idConta) );
			memset( &cdConta             , 0x0, sizeof(cdConta) );
			memset( &nmConta             , 0x0, sizeof(nmConta) );
			memset( &sgPermissao         , 0x0, sizeof(sgPermissao) );
			memset( &idContaSistemaOrigem, 0x0, sizeof(idContaSistemaOrigem) );
			memset( &idPessoa            , 0x0, sizeof(idPessoa) );
			memset( &nmPessoa            , 0x0, sizeof(nmPessoa) );
			memset( &sgTipoPessoa        , 0x0, sizeof(sgTipoPessoa) );
			memset( &idSegmentacao       , 0x0, sizeof(idSegmentacao) );
			memset( &idUFOperadora       , 0x0, sizeof(idUFOperadora) );
			memset( &sgUF                , 0x0, sizeof(sgUF) );
			memset( &idTipoCarteira      , 0x0, sizeof(idTipoCarteira) );
			memset( &idPessoaDePara      , 0x0, sizeof(idPessoaDePara) );
					 
			EXEC SQL FETCH csr_Contas_GC INTO
				:idConta:i_idConta ,
				:cdConta:i_cdConta ,
				:nmConta:i_nmConta ,
				:idContaSistemaOrigem:i_idContaSistemaOrigem ,
				:inControlePJ:i_inControlePJ ,
				:idPessoa:i_idPessoa ,
				:nmPessoa:i_nmPessoa , 
				:sgTipoPessoa:i_sgTipoPessoa ,
				:idSegmentacao:i_idSegmentacao ,
				:idUFOperadora:i_idUFOperadora ,
				:sgUF:i_sgUF ,
				:idTipoCarteira:i_idTipoCarteira ,
				:sgPermissao:i_sgPermissao ,
				:idPessoaDePara:i_idPessoaDePara ;
				
			CONVIND( idConta, i_idConta );
			CONVIND( sgPermissao, i_sgPermissao );
			CONVIND( cdConta, i_cdConta );
			CONVIND( nmConta, i_nmConta );
			CONVIND( idContaSistemaOrigem, i_idContaSistemaOrigem );
			CONVIND( inControlePJ, i_inControlePJ );
			CONVIND( idPessoa       , i_idPessoa );
			CONVIND( nmPessoa       , i_nmPessoa );
			CONVIND( sgTipoPessoa   , i_sgTipoPessoa );
			CONVIND( idSegmentacao  , i_idSegmentacao );
			CONVIND( idUFOperadora  , i_idUFOperadora );
			CONVIND( sgUF           , i_sgUF );
			CONVIND( idTipoCarteira , i_idTipoCarteira );
			CONVIND( idPessoaDePara, i_idPessoaDePara );
			 
			if ( !strcmp( idPessoaAnter, (char*)idPessoa.arr ) )
			{
				bPrimeiroLoop = false;
			}
			else
			{
				bPrimeiroLoop = true;
				strcpy( idPessoaAnter, (char*)idPessoa.arr );
			}
			 
			if (bPrimeiroLoop == true)
			{
				xml_g->addItem( "idPessoa", (char*)idPessoa.arr );
				xml_g->addItem( "nmPessoa", (char*)nmPessoa.arr );
				xml_g->addItem( "sgTipoPessoa", (char*)sgTipoPessoa.arr );
				xml_g->addItem( "idPessoaDePara", (char*)idPessoaDePara.arr );
				xml_g->addItem( "idSegmentacao", (char*)idSegmentacao.arr );
				xml_g->addItem( "idUFOperadora", (char*)idUFOperadora.arr );
				xml_g->addItem( "sgUF", (char*)sgUF.arr );
				xml_g->addItem( "idTipoCarteira", (char*)idTipoCarteira.arr );
							
				// bPrimeiroLoop = false;
			}
							   
			xml_g->createTag( "ContaVO" );
				xml_g->addItem( "idConta", (char*)idConta.arr );
				xml_g->addItem( "cdConta", (char*)cdConta.arr );
				if ( i_sgPermissao != -1 )
				{
				   xml_g->addItem( "sgPermissaoGestor", (char*)sgPermissao.arr );
				}
				xml_g->addItem( "idContaSistemaOrigem", (char*)idContaSistemaOrigem.arr );
				xml_g->addItem( "idPessoaDeParaConta", (char*)idPessoaDePara.arr );
				xml_g->addItem( "nmConta", (char*)nmConta.arr );
				xml_g->addItem( "inControlePJ", (char*)inControlePJ.arr );
			xml_g->closeTag();
		}
		EXEC SQL CLOSE csr_Contas_GC;
		xml_g->closeTag();
	}
	else //ACESSO_GESTOR_DE_CONTA == 2
	{
		BuscarGestoresDeContaR((char *)idPessoaGestorPrm, nrDocumentoPrm, xml_g);
	}

   ULOG_END( "getCJNPJsByIdGestor_GC()" );

   return;
 
   sqlErrorConstrutor:
      throw TuxBasicOraException(sqlca.sqlcode); 
}
