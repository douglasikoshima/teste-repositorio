/**
 * @author  Renato Teixeira
 * @version $Revision: 1.1.2.1.6.3 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:34:35 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoConta.h"
#include "../include/stWFAtendimentoConta.h"

void sql_error_WFAtendimentoConta(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#include "../include/stWFAtendimentoConta.h"
EXEC SQL END DECLARE SECTION;

long proCIncluirWFAtendimentoConta(st_AtendimentoConta* dados, st_vlAtendimentoConta* status)
{
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoConta   oDados;
		struct st_vlAtendimentoConta oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoConta(&sqlca);

	EXEC SQL 
		INSERT INTO
			atendimento.AtendimentoConta
			(
				idAtendimento,
				cdConta,
				cdDigitoConta,
				idUsuarioAlteracao,
				dtUltimaAlteracao
			)
			VALUES
			(
				:oDados.idAtendimento,
				:oDados.cdConta,
				:oDados.cdDigitoConta,
				DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
			);

	return oDados.idAtendimento;
}

bool proCAlterarWFAtendimentoConta(st_AtendimentoConta* dados, st_vlAtendimentoConta* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoConta   oDados;
		struct st_vlAtendimentoConta oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoConta(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoConta SET ");

	bool separa = false;

	if (status->cdConta != -1) 
		montaUpdate("cdConta", oDados.cdConta, 2);

	if (status->cdDigitoConta != -1) 
		montaUpdate("cdDigitoConta", oDados.cdDigitoConta, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

	sprintf(query, "%s WHERE idAtendimento = %ld", query, dados->idAtendimento);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoConta(st_AtendimentoConta* dados, st_vlAtendimentoConta* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = dados->idAtendimento;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoConta(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoConta
		WHERE
			idAtendimento = :idAtendimento;

	return true;
}

bool proCConsultaWFAtendimentoConta(st_AtendimentoConta* dados, st_vlAtendimentoConta* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento;
		VARCHAR cdConta[256];
		int  cdDigitoConta;
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short  i_idAtendimento;
		short  i_cdConta;
		short  i_cdDigitoConta;
		short  i_idUsuarioAlteracao;
		short  i_dtUltimaAlteracao;

		char query[800] = "SELECT idAtendimento,cdConta,cdDigitoConta,idUsuarioAlteracao,"
                                 "TO_CHAR(dtUltimaAlteracao, 'DD/MM/YYYY HH24:MI:SS') "
                            "FROM atendimento.AtendimentoConta ";


    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	bool separa = false;

	if (status->idAtendimento != -1) 
		montaWhere("idAtendimento", dados->idAtendimento, WHERE_LONG);

	if (status->cdConta != -1)
		montaWhere("cdConta", dados->cdConta, 2);

	if (status->cdDigitoConta != -1)
		montaWhere("cdDigitoConta", dados->cdDigitoConta, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

    //	if (status->dtUltimaAlteracao != -1) 
    //		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

	ULOG("WFAtdConta: %s", query);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoConta(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoConta FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoConta;

	EXEC SQL OPEN consulta;

	while (true)
	{
		i_idAtendimento = i_cdConta = i_cdDigitoConta 
            = i_idUsuarioAlteracao = i_dtUltimaAlteracao = -1;

		EXEC SQL FETCH consulta INTO 
									:idAtendimento:i_idAtendimento, 
									:cdConta:i_cdConta, 
									:cdDigitoConta:i_cdDigitoConta,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONVIND(cdConta, i_cdConta);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoContaVO");
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("cdConta", (char*)cdConta.arr);
			saida->addItem("cdDigitoConta", (char*)CONVINT(cdDigitoConta,i_cdDigitoConta));
			saida->addItem("idUsuarioAlteracao", (char*)CONVINT(idUsuarioAlteracao,i_idUsuarioAlteracao));
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;

	return true;
}



bool proCConsultaWFAtendimentoContaEx(st_AtendimentoConta* dados, st_vlAtendimentoConta* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento;
		VARCHAR cdConta[256];
		int  cdDigitoConta;
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short  i_idAtendimento;
		short  i_cdConta;
		short  i_cdDigitoConta;
		short  i_idUsuarioAlteracao;
		short  i_dtUltimaAlteracao;

		char query[800] = "SELECT idAtendimento,cdConta,cdDigitoConta,null as idUsuarioAlteracao,"
                                 "null as dtUltimaAlteracao "
                            "FROM FOHIST_OW.Atendimento ";


    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	bool separa = false;

	if (status->idAtendimento != -1) 
		montaWhere("idAtendimento", dados->idAtendimento, 1);

	if (status->cdConta != -1)
		montaWhere("cdConta", dados->cdConta, 2);

	if (status->cdDigitoConta != -1)
		montaWhere("cdDigitoConta", dados->cdDigitoConta, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

	ULOG("WFAtdConta: %s", query);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoConta(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoContaEx FROM :query;
	EXEC SQL DECLARE consultaEx CURSOR FOR consultaAtendimentoContaEx;

	EXEC SQL OPEN consultaEx;

	while (true)
	{
		i_idAtendimento = i_cdConta = i_cdDigitoConta 
            = i_idUsuarioAlteracao = i_dtUltimaAlteracao = -1;

		EXEC SQL FETCH consultaEx INTO 
									:idAtendimento:i_idAtendimento, 
									:cdConta:i_cdConta, 
									:cdDigitoConta:i_cdDigitoConta,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONVIND(cdConta, i_cdConta);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoContaVO");
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("cdConta", (char*)cdConta.arr);
			saida->addItem("cdDigitoConta", (char*)CONVINT(cdDigitoConta,i_cdDigitoConta));
			saida->addItem("idUsuarioAlteracao", (char*)CONVINT(idUsuarioAlteracao,i_idUsuarioAlteracao));
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();
	}

	EXEC SQL CLOSE consultaEx;

	return true;
}



bool proCObterWFAtendimentoConta(long _idAtendimento, AtendimentoConta *atdConta)
{
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
		long idAtendimento = _idAtendimento;

		VARCHAR cdConta[256];
		VARCHAR cdDigitoConta[256];

		short i_cdConta=-1;
		short i_cdDigitoConta=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoConta(&sqlca);

	EXEC SQL
        SELECT
            CDCONTA,
            CDDIGITOCONTA
        INTO
            cdConta:i_cdConta,
            cdDigitoConta:i_cdDigitoConta
        FROM
            ATENDIMENTO.ATENDIMENTOCONTA
        WHERE
            IDATENDIMENTO = :idAtendimento;

	if ( !sqlca.sqlcode )
	{
        if ( atdConta )
        {
		    CONVIND(cdConta,i_cdConta);
		    CONVIND(cdDigitoConta,i_cdDigitoConta);

            strncpy(atdConta->cdConta,(char*)cdConta.arr,sizeof(atdConta->cdConta)-1);
            strncpy(atdConta->cdDigitoConta,(char*)cdDigitoConta.arr,sizeof(atdConta->cdDigitoConta)-1);
        }
	}

    return sqlca.sqlcode ? false : true;
}

void sql_error_WFAtendimentoConta(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
