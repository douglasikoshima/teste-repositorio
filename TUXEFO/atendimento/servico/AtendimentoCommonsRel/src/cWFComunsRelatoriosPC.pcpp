/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @remarks Rotinas comuns aos relatórios 1 a 7
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:34:06 $
 **/

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>

void sql_error(sqlca*sqlca);

char* procGetIdGrupo(char* sNmGrupo,char *idGrupoRetorno)
{
    ULOG_START( "procGetIdGrupo()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;
      VARCHAR     idGrupo[256];
      short    i_idGrupo = -1;
      char     nmGrupo[256];
    EXEC SQL END DECLARE SECTION;

    strcpy(nmGrupo, sNmGrupo);

    EXEC SQL WHENEVER SQLERROR DO sql_error(&sqlca);
    EXEC SQL 
        SELECT IDGRUPO into :idGrupo:i_idGrupo 
          FROM ACESSO.GRUPO 
         WHERE nmGrupo=:nmGrupo AND ROWNUM <= 1;
    
    if (i_idGrupo != -1)
    {
        CONVIND(idGrupo, i_idGrupo);
        strcpy(idGrupoRetorno, (char*)idGrupo.arr);

        ULOG( "idGrupoRetorno = '%s' PARA nmGrupo = '%s'"
                        ,idGrupoRetorno,nmGrupo );
    }
    else
    {
        *idGrupoRetorno = 0;

        ULOG( "idGrupoRetorno NAO ENCONTRADO PARA nmGrupo = '%s'"
                        ,nmGrupo );
    }

    ULOG_END( "procGetIdGrupo()" );

    return idGrupoRetorno;
}

char* procGetIdGrupoOperadora(char* sNmGrupoOperadora,char *idGrupoOperadoraRetorno)
{
    ULOG_START( "procGetIdGrupoOperadora()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;
      VARCHAR     idGrupoOperadora[256];
      short i_idGrupoOperadora = -1;
      char     nmGrupoOperadora[256];
    EXEC SQL END DECLARE SECTION;

    strcpy(nmGrupoOperadora, sNmGrupoOperadora);

    EXEC SQL WHENEVER SQLERROR DO sql_error(&sqlca);
    EXEC SQL 
        SELECT IDGRUPOOPERADORA into :idGrupoOperadora:i_idGrupoOperadora 
          FROM CUSTOMER.GRUPOOPERADORA 
         WHERE nmGrupoOperadora=:nmGrupoOperadora AND ROWNUM <= 1;
    
    if (i_idGrupoOperadora != -1)
    {
        CONVIND(idGrupoOperadora, i_idGrupoOperadora);
        strcpy(idGrupoOperadoraRetorno, (char*)idGrupoOperadora.arr);

        ULOG( "idGrupoOperadoraRetorno = '%s' PARA nmGrupoOperadora='%s'"
                        ,idGrupoOperadoraRetorno,nmGrupoOperadora );
    }
    else
    {
        *idGrupoOperadoraRetorno = 0;

        ULOG("idGrupoOperadoraRetorno NAO ENCONTRADO PARA nmGrupoOperadora='%s'"
                        ,nmGrupoOperadora );
    }

    ULOG_END( "procGetIdGrupoOperadora()" );

    return idGrupoOperadoraRetorno;
}

char* procGetIdUf(char* sNmUf,char *idUfRetorno)
{
    ULOG_START( "procGetIdUf()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;
      VARCHAR     idUf[256];
      short i_idUf = -1;
      char     nmUf[256];
    EXEC SQL END DECLARE SECTION;

    strcpy(nmUf, sNmUf);

    EXEC SQL WHENEVER SQLERROR DO sql_error(&sqlca);
    EXEC SQL 
        SELECT IDUF into :idUf:i_idUf FROM APOIO.UF WHERE nmUf=:nmUf AND ROWNUM <= 1;
    
    if (i_idUf != -1)
    {
        CONVIND(idUf, i_idUf);
        strcpy(idUfRetorno, (char*)idUf.arr);

        ULOG( "UF '%s', idUfRetorno = '%s'",nmUf,idUfRetorno );
    }
    else
    {
        *idUfRetorno = 0;

        ULOG( "idUfRetorno NAO ENCONTRADO PARA UF='%s",nmUf );
    }

    ULOG_END( "procGetIdUf()" );

    return idUfRetorno;
}

char* procGetIdPessoaUsuario(char* sNmLoginUsuario,char *idPessoaUsuarioRetorno)
{
    ULOG_START( "procGetIdPessoaUsuario()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;
      VARCHAR     idPessoaUsuario[256];
      short i_idPessoaUsuario = -1;
      char     nmLoginUsuario[256];
    EXEC SQL END DECLARE SECTION;

    strcpy(nmLoginUsuario, sNmLoginUsuario);

    EXEC SQL WHENEVER SQLERROR DO sql_error(&sqlca);
    EXEC SQL 
        SELECT IDPESSOAUSUARIO into :idPessoaUsuario:i_idPessoaUsuario 
          FROM ACESSO.USUARIO 
         WHERE nmLoginUsuario=:nmLoginUsuario AND ROWNUM <= 1;
    
    if (i_idPessoaUsuario != -1)
    {
        CONVIND(idPessoaUsuario, i_idPessoaUsuario);

        strcpy(idPessoaUsuarioRetorno, (char*)idPessoaUsuario.arr);

        ULOG( "idPessoaUsuarioRetorno = '%s' PARA nmLoginUsuario='%s'"
                        ,idPessoaUsuarioRetorno,nmLoginUsuario );
    }
    else
    {
        *idPessoaUsuarioRetorno = 0;

        ULOG( "idPessoaUsuarioRetorno NAO ENCONTRADO PARA nmLoginUsuario='%s'"
                        ,nmLoginUsuario );
    }

    ULOG_END( "procGetIdPessoaUsuario()" );

    return idPessoaUsuarioRetorno;
}

void sql_error(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
