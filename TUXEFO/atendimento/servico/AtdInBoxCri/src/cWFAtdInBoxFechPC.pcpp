/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:27 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtdInBox.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

void sql_error_WFAtdInBoxFech(sqlca*sqlca);
bool proCConsultaTotalWFInboxFechUsuario(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida);
bool proCConsultaTotalWFInboxFechUsuarioDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida);
bool proCConsultaTotalWFInboxFechLinha(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida);
bool proCConsultaTotalWFInboxFechLinhaDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtdInBox.h"
EXEC SQL END DECLARE SECTION;


bool proCConsultaTotalWFInboxFechUsuario(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaTotalWFInboxFechUsuario()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtdInBox oDados;
        struct st_vlAtdInBox oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));


    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);

    EXEC SQL 
            SELECT 
            COUNT(1)
        INTO
            :numRegistros:i_numRegistros
             FROM 
                Atendimento.AtdFechCriWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim);

    saida->addItem("totalRegistros", numRegistros);

    ULOG_END( "proCConsultaTotalWFInboxFechUsuario()" );

    return true;


}

bool proCConsultaTotalWFInboxFechUsuarioDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaTotalWFInboxFechUsuarioDocumento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtdInBox oDados;
        struct st_vlAtdInBox oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));


    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);

    EXEC SQL 
        SELECT 
            COUNT(1)
        INTO
            :numRegistros:i_numRegistros
        FROM 
            Atendimento.AtdFechCriWFV01
        WHERE 
            idPessoaUsuarioCri = :oDados.idPessoaUsuario
        AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
        AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
        AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
        AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
        AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
        AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
        AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
        AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
        AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
        AND idPessoaDePara IN  (SELECT 
                                    PDP.IDPESSOADEPARA
                                FROM
                                    CUSTOMER.PESSOADEPARA PDP,
                                    CUSTOMER.PESSOADOCUMENTO PD,
                                    CUSTOMER.DOCUMENTO D,
                                    APOIO.TIPODOCUMENTO TD
                                WHERE
                                    PDP.IDPESSOA = PD.IDPESSOA
                                AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                                AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                                AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                                AND D.NRDOCUMENTO = :oDados.documento);

    saida->addItem("totalRegistros", numRegistros);

    ULOG_END( "proCConsultaTotalWFInboxFechUsuarioDocumento()" );

    return true;
}


bool proCConsultaTotalWFInboxFechLinha(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaTotalWFInboxFechLinha()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int   oprefixo         = prefixo;
        int   otelefone        = numero;

        struct st_AtdInBox oDados;
        struct st_vlAtdInBox oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));


    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);

    EXEC SQL 
        SELECT 
            COUNT(1)
        INTO
            :numRegistros:i_numRegistros
        FROM 
            Atendimento.AtdFechCriLinhaWFV01
        WHERE 
            idPessoaUsuarioCri = :oDados.idPessoaUsuario
        AND cdAreaRegistro = :oprefixo
        AND nrLinha = :otelefone
        AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
        AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
        AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
        AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
        AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
        AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
        AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
        AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
        AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim);

    saida->addItem("totalRegistros", numRegistros);

    ULOG_END( "proCConsultaTotalWFInboxFechLinha()" );

    return true;
}

bool proCConsultaTotalWFInboxFechLinhaDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaTotalWFInboxFechLinhaDocumento()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int   oprefixo         = prefixo;
        int   otelefone        = numero;

        struct st_AtdInBox oDados;
        struct st_vlAtdInBox oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));


    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);

    EXEC SQL 
        SELECT 
            COUNT(1)
        INTO
            :numRegistros:i_numRegistros
        FROM 
            Atendimento.AtdFechCriLinhaWFV01
        WHERE 
            idPessoaUsuarioCri = :oDados.idPessoaUsuario
        AND cdAreaRegistro = :oprefixo
        AND nrLinha = :otelefone
        AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
        AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
        AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
        AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
        AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
        AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
        AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
        AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
        AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
        AND idPessoaDePara IN
                (SELECT 
                    PDP.IDPESSOADEPARA
                FROM
                    CUSTOMER.PESSOADEPARA PDP,
                    CUSTOMER.PESSOADOCUMENTO PD,
                    CUSTOMER.DOCUMENTO D,
                    APOIO.TIPODOCUMENTO TD
                WHERE
                    PDP.IDPESSOA = PD.IDPESSOA
                AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                AND D.NRDOCUMENTO = :oDados.documento);

    saida->addItem("totalRegistros", numRegistros);

    ULOG_END( "proCConsultaTotalWFInboxFechLinhaDocumento()" );

    return true;


}

bool proCConsultaWFInboxFechUsuario(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxFechUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

    struct st_SaidaAtdInBox
    {
        VARCHAR idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR idPessoaDePara[21];
        int idEstado;
        VARCHAR dsEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));
    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL DECLARE consultaWFInboxFechUsuario CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' AS dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
            ORDER BY dtAbertura DESC;

    EXEC SQL OPEN consultaWFInboxFechUsuario;

    while (true)
    {
        EXEC SQL FETCH consultaWFInboxFechUsuario INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
        {
            break;
        }
    }

    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechUsuario(dados, status, saida);
    }
    else
    {
        saida->addItem("totalRegistros", totalRegistros);
    }

    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInboxFechUsuario;

    ULOG_END( "proCConsultaWFInboxFechUsuario()" );

    return true;
}

bool proCConsultaWFInboxFechUsuarioEnc(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechUsuarioEnc()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

    struct st_SaidaAtdInBox
    {
        VARCHAR idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR idPessoaDePara[21];
        int idEstado;
        VARCHAR dsEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE proCConsultaWFInboxFechUsuarioEnc CURSOR FOR
            SELECT 
                idAtendimento,
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
            ORDER BY dtAbertura DESC;

    EXEC SQL OPEN proCConsultaWFInboxFechUsuarioEnc;

    while (true)
    {
        EXEC SQL FETCH proCConsultaWFInboxFechUsuarioEnc INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechUsuario(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);

    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE proCConsultaWFInboxFechUsuarioEnc;

    ULOG_END( "proCConsultaWFInboxFechUsuarioEnc()" );

    return true;


}

bool proCConsultaWFInboxFechUsuarioDocumentoEnc(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechUsuarioDocumentoEnc()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE proCConsultaWFInboxFechUsuarioDocumentoEnc CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa
             FROM 
                Atendimento.AtdFechCriWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
                AND idPessoaDePara IN
                        (SELECT 
                    PDP.IDPESSOADEPARA
                FROM
                    CUSTOMER.PESSOADEPARA PDP,
                    CUSTOMER.PESSOADOCUMENTO PD,
                    CUSTOMER.DOCUMENTO D,
                    APOIO.TIPODOCUMENTO TD
                WHERE
                    PDP.IDPESSOA = PD.IDPESSOA
                    AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                    AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                    AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                    AND D.NRDOCUMENTO = :oDados.documento)
        ORDER BY dtAbertura DESC;

    EXEC SQL OPEN proCConsultaWFInboxFechUsuarioDocumentoEnc;

    while (true)
    {
        EXEC SQL FETCH proCConsultaWFInboxFechUsuarioDocumentoEnc INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
        {
            break;
        }
    }

    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechUsuarioDocumento(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);

    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE proCConsultaWFInboxFechUsuarioDocumentoEnc;

    ULOG_END( "proCConsultaWFInboxFechUsuarioDocumentoEnc()" );

    return true;


}

bool proCConsultaWFInboxFechUsuarioDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechUsuarioDocumento()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFInboxFechUsuarioDocumento CURSOR FOR
            SELECT 
                idAtendimento,
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa
             FROM 
                Atendimento.AtdFechCriWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
                AND idPessoaDePara IN
                        (SELECT 
                    PDP.IDPESSOADEPARA
                FROM
                    CUSTOMER.PESSOADEPARA PDP,
                    CUSTOMER.PESSOADOCUMENTO PD,
                    CUSTOMER.DOCUMENTO D,
                    APOIO.TIPODOCUMENTO TD
                WHERE
                    PDP.IDPESSOA = PD.IDPESSOA
                    AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                    AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                    AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                    AND D.NRDOCUMENTO = :oDados.documento)
           ORDER BY dtAbertura DESC;

    EXEC SQL OPEN consultaWFInboxFechUsuarioDocumento;
    while (true)
    {
        EXEC SQL FETCH consultaWFInboxFechUsuarioDocumento INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechUsuarioDocumento(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInboxFechUsuarioDocumento;

    ULOG_END( "proCConsultaWFInboxFechUsuarioDocumento()" );

    return true;


}

bool proCConsultaWFInboxFechLinhaEnc(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechLinhaEnc()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

    int   oprefixo         = prefixo;
    int   otelefone        = numero;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE proCConsultaWFInboxFechLinhaEnc CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriLinhaWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
             ORDER BY dtAbertura DESC;

    EXEC SQL OPEN proCConsultaWFInboxFechLinhaEnc;
    while (true)
    {
        EXEC SQL FETCH proCConsultaWFInboxFechLinhaEnc INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechLinha(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE proCConsultaWFInboxFechLinhaEnc;

    ULOG_END( "proCConsultaWFInboxFechLinhaEnc()" );

    return true;


}

bool proCConsultaWFInboxFechLinha(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

    int   oprefixo         = prefixo;
    int   otelefone        = numero;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFInboxFechLinha CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriLinhaWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
             ORDER BY dtAbertura DESC;

    EXEC SQL OPEN consultaWFInboxFechLinha;
    while (true)
    {
        EXEC SQL FETCH consultaWFInboxFechLinha INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechLinha(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInboxFechLinha;

    ULOG_END( "proCConsultaWFInboxFechLinha()" );

    return true;


}

bool proCConsultaWFInboxFechLinhaDocumentoEnc(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechLinhaDocumentoEnc()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

    int   oprefixo         = prefixo;
    int   otelefone        = numero;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE proCConsultaWFInboxFechLinhaDocumentoEnc CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriLinhaWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
                AND idPessoaDePara IN
                        (SELECT 
                    PDP.IDPESSOADEPARA
                FROM
                    CUSTOMER.PESSOADEPARA PDP,
                    CUSTOMER.PESSOADOCUMENTO PD,
                    CUSTOMER.DOCUMENTO D,
                    APOIO.TIPODOCUMENTO TD
                WHERE
                    PDP.IDPESSOA = PD.IDPESSOA
                    AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                    AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                    AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                    AND D.NRDOCUMENTO = :oDados.documento)
        ORDER BY dtAbertura DESC;

    EXEC SQL OPEN proCConsultaWFInboxFechLinhaDocumentoEnc;
    while (true)
    {
        EXEC SQL FETCH proCConsultaWFInboxFechLinhaDocumentoEnc INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechLinhaDocumento(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE proCConsultaWFInboxFechLinhaDocumentoEnc;

    ULOG_END( "proCConsultaWFInboxFechLinhaDocumentoEnc()" );

    return true;


}

bool proCConsultaWFInboxFechLinhaDocumento(st_AtdInBox* dados, st_vlAtdInBox* status, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFInboxFechLinhaDocumento()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

    int   oprefixo         = prefixo;
    int   otelefone        = numero;

    struct st_SaidaAtdInBox
    {
        VARCHAR  idAtendimento[21];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nmCor[256];
        int  idContato;
        VARCHAR dtAbertura[22];
        int qtInsistencia;
        VARCHAR dtPrazoFinalInterno[21];    
        VARCHAR dtPrazoFinalAnatel[21]; 
        VARCHAR  idPessoaDePara[21];
        int  idEstado;
        VARCHAR dsEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR dtFimPausa[256];
        int  inCri;
        VARCHAR arvore[800];
        VARCHAR nmRegional[256];
        VARCHAR nrTelefone[256];
        VARCHAR nmPessoaBko[256];
        VARCHAR nmGrupoBko[256];
        VARCHAR nmPessoaCri[256];
        VARCHAR nmGrupoCri[256];
        VARCHAR dtEntrada[22];
        VARCHAR dtSaida[22];
        VARCHAR nmPessoa[256];
        VARCHAR nrDocumento[256];
        VARCHAR dtFechamento[21];
        int tipoPessoa; 
    }oDadosSaida;
    
    struct st_vlSaidaAtdInBox
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short nmCor;
        short idContato;
        short dtAbertura;
        short qtInsistencia;
        short dtPrazoFinalInterno;  
        short dtPrazoFinalAnatel;   
        short idPessoaDePara;
        short idEstado;
        short dsEstado;
        short idSubEstado;
        short dsSubEstado;
        short dtFimPausa;
        short inCri;
        short arvore;
        short nmRegional;
        short nrTelefone;
        short nmPessoaBko;
        short nmGrupoBko;
        short nmPessoaCri;
        short nmGrupoCri;
        short dtEntrada;
        short dtSaida;
        short nmPessoa;
        short nrDocumento;
        short dtFechamento;
        short tipoPessoa;
    }oStatusSaida;

    struct st_AtdInBox oDados;
    struct st_vlAtdInBox oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", dados->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", dados->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", status->idEstado);
    ULOG("Filtro por SubEstado =  [%d]", status->idSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxFech(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFInboxFechLinhaDocumento CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                nmCor, 
                idContato, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS'), 
                qtInsistencia, 
                TO_CHAR(dtPrazoFinalInterno,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalInterno, 
                TO_CHAR(dtPrazoFinalAnatel,'DD/MM/YYYY HH24:MI:SS') dtPrazoFinalAnatel, 
                idPessoaDePara, 
                idEstado, 
                dsEstado, 
                idSubEstado, 
                dsSubEstado, 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                inCri, 
                path,
                nmRegional,
                nrTelefone,
                nmPessoaBko,
                nmGrupoBko,
                nmPessoaCri,
                nmGrupoCri,
                TO_CHAR(dtEntrada,'DD/MM/YYYY  HH24:MI:SS'), 
                TO_CHAR(dtSaida,'DD/MM/YYYY  HH24:MI:SS'), 
                nmPessoa, 
                nrDocumento, 
                '' dtFechamento,
                idTipoPessoa 
             FROM 
                Atendimento.AtdFechCriLinhaWFV01
             WHERE 
                idPessoaUsuarioCri = :oDados.idPessoaUsuario
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
                AND (idAlerta = :oDados.idAlerta OR -1=:oStatus.idAlerta)
                AND (idContato = :oDados.idContato OR -1=:oStatus.idContato)
                AND (idEstado = :oDados.idEstado OR -1=:oStatus.idEstado)
                AND (idSubEstado = :oDados.idSubEstado OR -1=:oStatus.idSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
                AND (TRUNC(dtFechamento)>=TO_DATE(:oDados.dtFechamentoInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:oDados.dtFechamentoFim,'DD/MM/YYYY') OR -1 = :oStatus.dtFechamentoFim)
                AND idPessoaDePara IN
                        (SELECT 
                    PDP.IDPESSOADEPARA
                FROM
                    CUSTOMER.PESSOADEPARA PDP,
                    CUSTOMER.PESSOADOCUMENTO PD,
                    CUSTOMER.DOCUMENTO D,
                    APOIO.TIPODOCUMENTO TD
                WHERE
                    PDP.IDPESSOA = PD.IDPESSOA
                    AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                    AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                    AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
                    AND D.NRDOCUMENTO = :oDados.documento)
        ORDER BY dtAbertura DESC;

    EXEC SQL OPEN consultaWFInboxFechLinhaDocumento;
    while (true)
    {
        EXEC SQL FETCH consultaWFInboxFechLinhaDocumento INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;
        numeroRegistros++;

        CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
        CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
        CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
        CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
        CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
        CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
        CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
        CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
        CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
        CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
        CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
        CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
        CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
        CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
        CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
        CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

        if (numeroRegistros <= 100)
        {
            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
            
        }
        else
            break;

    }


    if (numeroRegistros > 100)
    {
        numeroRegistros = 100;
        proCConsultaTotalWFInboxFechLinhaDocumento(dados, status, saida);
    }
    else
        saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInboxFechLinhaDocumento;

    ULOG_END( "proCConsultaWFInboxFechLinhaDocumento()" );

    return true;


}

void sql_error_WFAtdInBoxFech( sqlca * sqlca )
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE(
            "sql_error_WFAtdInBoxFech:sqlcode=%d,sqlerrmc=%.70s"
            ,sqlca->sqlcode
            ,sqlca->sqlerrm.sqlerrmc
         );

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}







