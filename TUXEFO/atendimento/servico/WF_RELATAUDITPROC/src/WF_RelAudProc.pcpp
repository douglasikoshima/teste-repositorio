#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../include/WF_RelAudProc.h"

void WF_RelAudProcError( sqlca * sqlca );

WF_RelAudProc::WF_RelAudProc(DOMNode* in, XMLGen* out)
{
	entrada = in;
	saida = out;
}

int WF_RelAudProc::Executar()
{
	int idRegional, idgrupo, prazo, qtdLinhasBloco, inTotal, i;
	int idConsultor, filtroDePrioridade, iCsv, TipoConsulta, inFin;
	long *pIdAtendimentos = NULL;
	char *p, *dtInicio, *dtFim, filename[MAX_LENGTH+1];
    FILE *file;

	idRegional = 0;
	if (p=tx.walkTree( entrada, "idRegional", 0 ),p) 
	{
		idRegional = atoi(p);
		XMLString::release(&p);
	}
	
	idgrupo = 0;
	if (p=tx.walkTree( entrada, "idGrupo", 0 ),p) 
	{
		idgrupo = atoi(p);
		XMLString::release(&p);
	}
	
	prazo = 0;
	if (p=tx.walkTree( entrada, "prazo", 0 ),p) 
	{
		prazo = atoi(p);
		XMLString::release(&p);
	}
	
	qtdLinhasBloco = 1;
	if (p=tx.walkTree( entrada, "qtdLinhasBloco", 0 ),p) 
	{
		qtdLinhasBloco = atoi(p);
		XMLString::release(&p);
	}
	
	inTotal = 0;
	if (p=tx.walkTree( entrada, "inTotal", 0 ),p) 
	{
		inTotal = atoi(p);
		XMLString::release(&p);
	}	

	if (p=tx.walkTree( entrada, "dtInicio", 0 ),p) 
	{
		dtInicio = (char*)malloc(sizeof(strlen(p)));
		strcpy(dtInicio,(const char*)p);
		XMLString::release(&p);
	}
	
	if (p=tx.walkTree( entrada, "dtFim", 0 ),p) 
	{
		dtFim = (char*)malloc(sizeof(strlen(p)));
		strcpy(dtFim,(const char*)p);
		XMLString::release(&p);
	}

	idConsultor = 0;
	if (p=tx.walkTree( entrada, "id", 0 ),p) 
	{
		idConsultor = atoi(p);
		XMLString::release(&p);
	}
	

	if (p=tx.walkTree( entrada, "filtroDePrioridade", 0 ),p) 
	{
		filtroDePrioridade = atoi(p);
		XMLString::release(&p);
	}

    iCsv = 0;
	if (p=tx.walkTree( entrada, "csv", 0 ),p) 
	{
		iCsv = atoi(p);
		XMLString::release(&p);
        if(iCsv==1)
        {
	        if (p=tx.walkTree( entrada, "csvfilename", 0 ),p) 
            {
                // ?? free?? filename = (char*)malloc(MAX_LENGTH*sizeof(char));
                // strcpy(filename, p);

                sprintf(filename,"%.*s",sizeof(filename)-1,p);

                file = fopen(filename,"w");
                if(!file)
                {
                    // FILE EXCEPTION HERE
					return -1;
                }
            }
        }
	}

	TipoConsulta = 0;
	if (idRegional > 0 && idgrupo > 0 && dtInicio && dtFim)
	{
		if(idConsultor > 0)
			TipoConsulta += 1;

		if(prazo > 0)
			TipoConsulta += 2;

	}
	else
	{
		// INPUT DATA EXCEPTION
		return -2;
	}

	struct sqlca sqlca;

	EXEC SQL WHENEVER NOT FOUND DO break;    
	EXEC SQL WHENEVER SQLERROR  DO WF_RelAudProcError(&sqlca);

	EXEC SQL BEGIN DECLARE SECTION;
		long idAtendimento = 0;
		int idUfOperadora;
		int idGrupo;
		int idRepresentante;
		int idAlerta;
		int startidx, length;

		#define MAXNMPATH                           2000
		#define MAXDTABERTURA                         32
		#define MAXTERMINAL                           16
		#define MAXNMCLIENTE                         255
		#define MAXNMSOLICITANTE                     255
		#define MAXNMCONSULTOR                       255
		#define MAXDTENCAMINHAMENTO                   32
		#define MAXNMSUPERVISORRESPONSAVELATUAL      255
		#define MAXNMRESPONSAVELATUAL                255
		#define MAXNMGRUPORESPONSAVELATUAL           255
		#define MAXREGIONAL                          255
		#define MAXDATE                               32

		VARCHAR stDate[MAXDATE];
		VARCHAR fnDate[MAXDATE];

		int IdPrioridade = 0;			
        short i_Prioridade, i_nmPath, i_dtAbertura, i_terminal, i_nmCliente;
        short i_nmSolicitante, i_nmConsultor, i_dtEncaminhamento;
        short i_nmSupervisorResponsavelAtual, i_nmResponsavelAtual;
        short i_nmGrupoResponsavelAtual, i_Regional;
		short i_QtdeInsistencias,i_idAtendimento,i_TempoTratamento,i_QtdeReencaminhamentos;

		VARCHAR Prioridade[5];
		VARCHAR nmPath[MAXNMPATH];
		VARCHAR dtAbertura[MAXDTABERTURA];
		VARCHAR terminal[MAXTERMINAL];
		VARCHAR nmCliente[MAXNMCLIENTE];
		VARCHAR nmSolicitante[MAXNMSOLICITANTE];
		VARCHAR nmConsultor[MAXNMCONSULTOR];
		VARCHAR dtEncaminhamento[MAXDTENCAMINHAMENTO];
		VARCHAR nmSupervisorResponsavelAtual[MAXNMSUPERVISORRESPONSAVELATUAL];
		VARCHAR nmResponsavelAtual[MAXNMRESPONSAVELATUAL];
		VARCHAR nmGrupoResponsavelAtual[MAXNMGRUPORESPONSAVELATUAL];
		VARCHAR Regional[MAXREGIONAL];
		int TempoTratamento = 0;
		int QtdeReencaminhamentos = 0;
		int QtdeInsistencias = 0;
	EXEC SQL END DECLARE SECTION;

	idUfOperadora   = idRegional;
	idGrupo         = idgrupo;
	idRepresentante = idConsultor; 
	idAlerta        = prazo;
	
	strcpy((char*)stDate.arr, dtInicio);
    stDate.len = strlen(dtInicio);
	
    strcpy((char*)fnDate.arr, dtFim);
	fnDate.len = strlen(dtFim);

	saida->createTag("WFRelatorioDinamicoVO");
	saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Prior.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "No.Proc.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Tp. Proc.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Dt.Abertura");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Terminal");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Cliente");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Solicitante");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Dt. Enc.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Sup. Resp. Atual");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Nome Resp. Atual");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Grp. Resp. Atual");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Reg. Resp. Atual");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Tempo Trat.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Qtde. Re-enc.");
		saida->closeTag();
		saida->createTag("ColunasRelatorio");
			saida->addItem("dsColuna", "Qtde. Insist.");
		saida->closeTag();    

	if(TipoConsulta == 1)
	{

        startidx = inTotal*qtdLinhasBloco;
		length = qtdLinhasBloco;

		EXEC SQL 
		DECLARE 
			CursorIdAtendimento1 CURSOR FOR
		SELECT 
			IDATENDIMENTO, 
			PRIORIDADE, 
			DTABERTURA, 
			TIPOPROCESSO, 
			TERMINAL, 
			FALANDOCOM, 
			NOME_CONSULTOR, 
			DTENCAMINHAMENTO, 
			SUPERVISOR_ATUAL, 
			RESPONSAVEL_ATUAL, 
			TEMPO_TRATAMENTO, 
			QTDEINTERCAMBIO, 
			QTINSISTENCIA, 
			REGIONALRESPONSAVEL, 
			NMCLIENTE, 
			NMGRUPO
		FROM 
		(
			SELECT 
				ROWNUM AS I, 
				IDATENDIMENTO, 
				PRIORIDADE, 
				DTABERTURA, 
				TIPOPROCESSO, 
				TERMINAL, 
				FALANDOCOM, 
				NOME_CONSULTOR, 
				DTENCAMINHAMENTO, 
				SUPERVISOR_ATUAL, 
				RESPONSAVEL_ATUAL, 
				TEMPO_TRATAMENTO, 
				QTDEINTERCAMBIO, 
				QTINSISTENCIA, 
				REGIONALRESPONSAVEL, 
				NMCLIENTE, 
				NMGRUPO
			FROM 
				ATENDIMENTO.RELATAUDITPROCV02
			WHERE 
				TO_CHAR( DTABERTURADATA, 'YYYYMMDD HH24MISS' ) BETWEEN TO_CHAR( TO_DATE(:stDate||' 00:00:00','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
				                                               AND     TO_CHAR( TO_DATE(:fnDate||' 23:59:59','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
			AND 
				IDGRUPOCRI = :idGrupo
			AND 
				IDUFOPERADORA = :idUfOperadora
			AND 
				IDCONSULTOR   = :idRepresentante
		)
		WHERE 
			I > :startidx
		AND 
			I < :startidx + :length + 2; 

		EXEC SQL OPEN CursorIdAtendimento1;

        for(i=startidx; i<=startidx+length; i++)
        {
			EXEC SQL FETCH CursorIdAtendimento1 
			INTO 
				:idAtendimento:i_idAtendimento,
				:Prioridade:i_Prioridade,
				:dtAbertura:i_dtAbertura,
				:nmPath:i_nmPath,
				:terminal:i_terminal,
				:nmSolicitante:i_nmSolicitante,
				:nmConsultor:i_nmConsultor,
				:dtEncaminhamento:i_dtEncaminhamento,
				:nmSupervisorResponsavelAtual:i_nmSupervisorResponsavelAtual,
				:nmResponsavelAtual:i_nmResponsavelAtual,
				:TempoTratamento:i_TempoTratamento,
				:QtdeReencaminhamentos:i_QtdeReencaminhamentos,
				:QtdeInsistencias:i_QtdeInsistencias,
				:Regional:i_Regional,
				:nmCliente:i_nmCliente,
				:nmGrupoResponsavelAtual:i_nmGrupoResponsavelAtual;

			if(i!=startidx+length)
			{
				saida->createTag("ValoresRelatorio");
					CONVIND(Prioridade, i_Prioridade);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Prioridade.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", idAtendimento);
					saida->closeTag();
					CONVIND(nmPath, i_nmPath);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmPath.arr);
					saida->closeTag();
					CONVIND(dtAbertura, i_dtAbertura);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtAbertura.arr);
					saida->closeTag();
					CONVIND(terminal, i_terminal);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)terminal.arr);
					saida->closeTag();
					CONVIND(nmCliente, i_nmCliente);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmCliente.arr);
					saida->closeTag();
					CONVIND(nmSolicitante, i_nmSolicitante);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSolicitante.arr);
					saida->closeTag();
					CONVIND(dtEncaminhamento, i_dtEncaminhamento);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtEncaminhamento.arr);
					saida->closeTag();
					CONVIND(nmSupervisorResponsavelAtual, i_nmSupervisorResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSupervisorResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmResponsavelAtual, i_nmResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmGrupoResponsavelAtual, i_nmGrupoResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmGrupoResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(Regional, i_Regional);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Regional.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", TempoTratamento);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeReencaminhamentos);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeInsistencias);
					saida->closeTag();						    
				saida->closeTag();
			}
		}

		inFin = (sqlca.sqlcode == 1403) ? 1 : 0;

		EXEC SQL CLOSE CursorIdAtendimento1;

		saida->addItem( "inFin", inFin);
		saida->closeTag();
		free(pIdAtendimentos);

	}





	if(TipoConsulta == 2)
	{

        startidx = inTotal*qtdLinhasBloco;
		length = qtdLinhasBloco;

		EXEC SQL DECLARE CursorIdAtendimento2 CURSOR FOR
		SELECT 
			IDATENDIMENTO, 
			PRIORIDADE, 
			DTABERTURA, 
			TIPOPROCESSO, 
			TERMINAL, 
			FALANDOCOM, 
			NOME_CONSULTOR, 
			DTENCAMINHAMENTO, 
			SUPERVISOR_ATUAL, 
			RESPONSAVEL_ATUAL, 
			TEMPO_TRATAMENTO, 
			QTDEINTERCAMBIO, 
			QTINSISTENCIA, 
			REGIONALRESPONSAVEL, 
			NMCLIENTE, 
			NMGRUPO
		FROM 
		(
			SELECT 
				ROWNUM AS I, 
				IDATENDIMENTO, 
				PRIORIDADE, 
				DTABERTURA, 
				TIPOPROCESSO, 
				TERMINAL, 
				FALANDOCOM, 
				NOME_CONSULTOR, 
				DTENCAMINHAMENTO, 
				SUPERVISOR_ATUAL, 
				RESPONSAVEL_ATUAL, 
				TEMPO_TRATAMENTO, 
				QTDEINTERCAMBIO, 
				QTINSISTENCIA, 
				REGIONALRESPONSAVEL, 
				NMCLIENTE, 
				NMGRUPO
			FROM 
				ATENDIMENTO.RELATAUDITPROCV02
			WHERE 
				TO_CHAR( DTABERTURADATA, 'YYYYMMDD HH24MISS' ) BETWEEN TO_CHAR( TO_DATE(:stDate||' 00:00:00','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
				                                               AND     TO_CHAR( TO_DATE(:fnDate||' 23:59:59','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
			AND 
				IDGRUPOCRI = :idGrupo
			AND 
				IDUFOPERADORA = :idUfOperadora
			AND 
				PRIORIDADE = DECODE(:idAlerta, 1, 'Baixo',DECODE(:idAlerta,2,'Medio','Alto'))
		)
		WHERE 
			I > :startidx
		AND 
			I < :startidx + :length + 2; 

		EXEC SQL OPEN CursorIdAtendimento2;

        for(i=startidx; i<=startidx+length; i++)
        {
			EXEC SQL FETCH CursorIdAtendimento2 INTO :idAtendimento:i_idAtendimento,:Prioridade:i_Prioridade,:dtAbertura:i_dtAbertura,:nmPath:i_nmPath,:terminal:i_terminal,:nmSolicitante:i_nmSolicitante,:nmConsultor:i_nmConsultor,:dtEncaminhamento:i_dtEncaminhamento,:nmSupervisorResponsavelAtual:i_nmSupervisorResponsavelAtual,:nmResponsavelAtual:i_nmResponsavelAtual,:TempoTratamento:i_TempoTratamento,:QtdeReencaminhamentos:i_QtdeReencaminhamentos,:QtdeInsistencias:i_QtdeInsistencias,:Regional:i_Regional,:nmCliente:i_nmCliente,:nmGrupoResponsavelAtual:i_nmGrupoResponsavelAtual;
			if(i!=startidx+length)
			{
				saida->createTag("ValoresRelatorio");
					CONVIND(Prioridade, i_Prioridade);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Prioridade.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", idAtendimento);
					saida->closeTag();
					CONVIND(nmPath, i_nmPath);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmPath.arr);
					saida->closeTag();
					CONVIND(dtAbertura, i_dtAbertura);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtAbertura.arr);
					saida->closeTag();
					CONVIND(terminal, i_terminal);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)terminal.arr);
					saida->closeTag();
					CONVIND(nmCliente, i_nmCliente);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmCliente.arr);
					saida->closeTag();
					CONVIND(nmSolicitante, i_nmSolicitante);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSolicitante.arr);
					saida->closeTag();
					CONVIND(dtEncaminhamento, i_dtEncaminhamento);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtEncaminhamento.arr);
					saida->closeTag();
					CONVIND(nmSupervisorResponsavelAtual, i_nmSupervisorResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSupervisorResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmResponsavelAtual, i_nmResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmGrupoResponsavelAtual, i_nmGrupoResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmGrupoResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(Regional, i_Regional);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Regional.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", TempoTratamento);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeReencaminhamentos);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeInsistencias);
					saida->closeTag();						    
				saida->closeTag();
			}
		}

		inFin = (sqlca.sqlcode == 1403) ? 1 : 0;

		EXEC SQL CLOSE CursorIdAtendimento2;

		saida->addItem( "inFin", inFin);
		saida->closeTag();
		free(pIdAtendimentos);

	}

	if(TipoConsulta == 3)
	{
        startidx = inTotal*qtdLinhasBloco;
		length = qtdLinhasBloco;

		EXEC SQL DECLARE CursorIdAtendimento3 CURSOR FOR
		SELECT 
			IDATENDIMENTO, 
			PRIORIDADE, 
			DTABERTURA, 
			TIPOPROCESSO, 
			TERMINAL, 
			FALANDOCOM, 
			NOME_CONSULTOR, 
			DTENCAMINHAMENTO, 
			SUPERVISOR_ATUAL, 
			RESPONSAVEL_ATUAL, 
			TEMPO_TRATAMENTO, 
			QTDEINTERCAMBIO, 
			QTINSISTENCIA, 
			REGIONALRESPONSAVEL, 
			NMCLIENTE, 
			NMGRUPO
		FROM 
		(
			SELECT 
				ROWNUM AS I, 
				IDATENDIMENTO, 
				PRIORIDADE, 
				DTABERTURA, 
				TIPOPROCESSO, 
				TERMINAL, 
				FALANDOCOM, 
				NOME_CONSULTOR, 
				DTENCAMINHAMENTO, 
				SUPERVISOR_ATUAL, 
				RESPONSAVEL_ATUAL, 
				TEMPO_TRATAMENTO, 
				QTDEINTERCAMBIO, 
				QTINSISTENCIA, 
				REGIONALRESPONSAVEL, 
				NMCLIENTE, 
				NMGRUPO
			FROM 
				ATENDIMENTO.RELATAUDITPROCV02
			WHERE 
				TO_CHAR( DTABERTURADATA, 'YYYYMMDD HH24MISS' ) BETWEEN TO_CHAR( TO_DATE(:stDate||' 00:00:00','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
				                                               AND     TO_CHAR( TO_DATE(:fnDate||' 23:59:59','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
			AND 
				IDGRUPOCRI = :idGrupo
			AND 
				IDUFOPERADORA = :idUfOperadora
			AND 
				IDCONSULTOR = :idRepresentante
			AND 
				PRIORIDADE = DECODE(:idAlerta, 1, 'Baixo',DECODE(:idAlerta,2,'Medio','Alto'))
		)
		WHERE 
			I > :startidx
		AND 
			I < :startidx + :length + 2; 

		EXEC SQL OPEN CursorIdAtendimento3;

        for(i=startidx; i<=startidx+length; i++)
        {
			EXEC SQL FETCH CursorIdAtendimento3 INTO :idAtendimento:i_idAtendimento,
													 :Prioridade:i_Prioridade,
													 :dtAbertura:i_dtAbertura,
													 :nmPath:i_nmPath,
													 :terminal:i_terminal,
													 :nmSolicitante:i_nmSolicitante,
													 :nmConsultor:i_nmConsultor,
													 :dtEncaminhamento:i_dtEncaminhamento,
													 :nmSupervisorResponsavelAtual:i_nmSupervisorResponsavelAtual,
													 :nmResponsavelAtual:i_nmResponsavelAtual,
													 :TempoTratamento:i_TempoTratamento,
													 :QtdeReencaminhamentos:i_QtdeReencaminhamentos,
													 :QtdeInsistencias:i_QtdeInsistencias,
													 :Regional:i_Regional,:nmCliente:i_nmCliente,
													 :nmGrupoResponsavelAtual:i_nmGrupoResponsavelAtual;
			if(i!=startidx+length)
			{
				saida->createTag("ValoresRelatorio");
					CONVIND(Prioridade, i_Prioridade);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Prioridade.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", idAtendimento);
					saida->closeTag();
					CONVIND(nmPath, i_nmPath);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmPath.arr);
					saida->closeTag();
					CONVIND(dtAbertura, i_dtAbertura);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtAbertura.arr);
					saida->closeTag();
					CONVIND(terminal, i_terminal);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)terminal.arr);
					saida->closeTag();
					CONVIND(nmCliente, i_nmCliente);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmCliente.arr);
					saida->closeTag();
					CONVIND(nmSolicitante, i_nmSolicitante);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSolicitante.arr);
					saida->closeTag();
					CONVIND(dtEncaminhamento, i_dtEncaminhamento);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtEncaminhamento.arr);
					saida->closeTag();
					CONVIND(nmSupervisorResponsavelAtual, i_nmSupervisorResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSupervisorResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmResponsavelAtual, i_nmResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmGrupoResponsavelAtual, i_nmGrupoResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmGrupoResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(Regional, i_Regional);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Regional.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", TempoTratamento);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeReencaminhamentos);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeInsistencias);
					saida->closeTag();						    
				saida->closeTag();
			}
		}

		inFin = (sqlca.sqlcode == 1403) ? 1 : 0;

		EXEC SQL CLOSE CursorIdAtendimento3;

		saida->addItem( "inFin", inFin);
		saida->closeTag();
		free(pIdAtendimentos);
	}


	if(TipoConsulta == 0)
	{

        startidx = inTotal*qtdLinhasBloco;
		length = qtdLinhasBloco;

		//EXEC SQL WHENEVER NOT FOUND DO break;

		EXEC SQL DECLARE CursorIdAtendimento CURSOR FOR
		SELECT 
			IDATENDIMENTO, 
			PRIORIDADE, 
			DTABERTURA, 
			TIPOPROCESSO, 
			TERMINAL, 
			FALANDOCOM, 
			NOME_CONSULTOR, 
			DTENCAMINHAMENTO, 
			SUPERVISOR_ATUAL, 
			RESPONSAVEL_ATUAL, 
			TEMPO_TRATAMENTO, 
			QTDEINTERCAMBIO, 
			QTINSISTENCIA, 
			REGIONALRESPONSAVEL, 
			NMCLIENTE, 
			NMGRUPO
		FROM 
		(
			SELECT 
				ROWNUM AS I, 
				IDATENDIMENTO, 
				PRIORIDADE, 
				DTABERTURA, 
				TIPOPROCESSO, 
				TERMINAL, 
				FALANDOCOM, 
				NOME_CONSULTOR, 
				DTENCAMINHAMENTO, 
				SUPERVISOR_ATUAL, 
				RESPONSAVEL_ATUAL, 
				TEMPO_TRATAMENTO, 
				QTDEINTERCAMBIO, 
				QTINSISTENCIA, 
				REGIONALRESPONSAVEL, 
				NMCLIENTE, 
				NMGRUPO
			FROM 
				ATENDIMENTO.RELATAUDITPROCV02
			WHERE 
				TO_CHAR( DTABERTURADATA, 'YYYYMMDD HH24MISS' ) BETWEEN TO_CHAR( TO_DATE(:stDate||' 00:00:00','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
				                                               AND     TO_CHAR( TO_DATE(:fnDate||' 23:59:59','DD/MM/YYYY HH24:MI:SS'), 'YYYYMMDD HH24MISS' )
			AND 
				IDGRUPOCRI = :idGrupo
			AND 
				IDUFOPERADORA = :idUfOperadora
		)
		WHERE
			I > :startidx
		AND
			I < :startidx + :length + 2; 

		EXEC SQL OPEN CursorIdAtendimento;

        for(i=startidx; i<=startidx+length; i++)
        {
			EXEC SQL FETCH CursorIdAtendimento INTO :idAtendimento:i_idAtendimento,
													:Prioridade:i_Prioridade,
													:dtAbertura:i_dtAbertura,
													:nmPath:i_nmPath,
													:terminal:i_terminal,
													:nmSolicitante:i_nmSolicitante,
													:nmConsultor:i_nmConsultor,
													:dtEncaminhamento:i_dtEncaminhamento,
													:nmSupervisorResponsavelAtual:i_nmSupervisorResponsavelAtual,
													:nmResponsavelAtual:i_nmResponsavelAtual,
													:TempoTratamento:i_TempoTratamento,
													:QtdeReencaminhamentos:i_QtdeReencaminhamentos,
													:QtdeInsistencias:i_QtdeInsistencias,
													:Regional:i_Regional,
													:nmCliente:i_nmCliente,
													:nmGrupoResponsavelAtual:i_nmGrupoResponsavelAtual;
			if(i!=startidx+length)
			{
				saida->createTag("ValoresRelatorio");
					CONVIND(Prioridade, i_Prioridade);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Prioridade.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", idAtendimento);
					saida->closeTag();
					CONVIND(nmPath, i_nmPath);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmPath.arr);
					saida->closeTag();
					CONVIND(dtAbertura, i_dtAbertura);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtAbertura.arr);
					saida->closeTag();
					CONVIND(terminal, i_terminal);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)terminal.arr);
					saida->closeTag();
					CONVIND(nmCliente, i_nmCliente);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmCliente.arr);
					saida->closeTag();
					CONVIND(nmSolicitante, i_nmSolicitante);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSolicitante.arr);
					saida->closeTag();
					CONVIND(dtEncaminhamento, i_dtEncaminhamento);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)dtEncaminhamento.arr);
					saida->closeTag();
					CONVIND(nmSupervisorResponsavelAtual, i_nmSupervisorResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmSupervisorResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmResponsavelAtual, i_nmResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(nmGrupoResponsavelAtual, i_nmGrupoResponsavelAtual);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)nmGrupoResponsavelAtual.arr);
					saida->closeTag();
					CONVIND(Regional, i_Regional);
					saida->createTag("ValorColuna");
						saida->addItem( "valor", (char*)Regional.arr);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", TempoTratamento);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeReencaminhamentos);
					saida->closeTag();
					saida->createTag("ValorColuna");
						saida->addItem( "valor", QtdeInsistencias);
					saida->closeTag();						    
				saida->closeTag();
			}
		}

		inFin = (sqlca.sqlcode == 1403) ? 1 : 0;

		EXEC SQL CLOSE CursorIdAtendimento;

		saida->addItem( "inFin", inFin);
		saida->closeTag();
		free(pIdAtendimentos);

	}
	return 0;
}

void WF_RelAudProcError( sqlca * sqlca )
{
    ULOGE("WF_RelAudProcError -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
