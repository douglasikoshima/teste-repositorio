/**
 * 
 * @modulo  Atendimento
 * @usecase Protocolo
 * @author  Cassio Garcia
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2010/12/17 22:27:36 $
 **/

#include "../include/cWfAtdGetDadoProPC.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/cWfAtdProtocoloException.h"

bool cWfAtdGetDadoProPC::proCObterDadosProtocolo(const char *idAtendimentoProtocolo)
{
    ULOG_START("cWfAtdGetDadoProPC::proCObterDadosProtocolo(const char *idAtendimentoProtocolo)");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct
        {
            VARCHAR idAtendimentoProtocolo[39];
            VARCHAR cdAreaRegistro[5];
            VARCHAR nrTelefone[10];
            VARCHAR idSistemaOrigem[39];
            VARCHAR nmSistemaOrigem[256];
            VARCHAR idPessoaDePara[39];
            VARCHAR cdConta[101];
            VARCHAR dtAbertura[32];
            VARCHAR dtEncerramento[32];
            VARCHAR qtProcessoAberto[5];
            VARCHAR qtProcessoPendente[5];
            VARCHAR idLinhaTelefonica[39];
            VARCHAR idTipoAberturaProtocolo[2];
            VARCHAR dsTipoAberturaProtocolo[256];
            VARCHAR dsStatusProtocolo[256];
        } dadoOraDadosProtocolo;

        struct
        {
            short idAtendimentoProtocolo;
            short cdAreaRegistro;
            short nrTelefone;
            short idSistemaOrigem;
            short nmSistemaOrigem;
            short idPessoaDePara;
            short cdConta;
            short dtAbertura;
            short dtEncerramento;
            short qtProcessoAberto;
            short qtProcessoPendente;
            short idLinhaTelefonica;
            short idTipoAberturaProtocolo;
            short dsTipoAberturaProtocolo;
            short dsStatusProtocolo;
        } statOraDadosProtocolo;

        const char *paramOraIdAtendimentoProtocolo = idAtendimentoProtocolo;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfAtdGetDadoProPC(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&dadoOraDadosProtocolo,0,sizeof(dadoOraDadosProtocolo));
    memset(&statOraDadosProtocolo,-1,sizeof(statOraDadosProtocolo));

    //EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
        SELECT
             ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.CDAREAREGISTRO
            ,ESTADOATDPROTOCOLOV01.NRTELEFONE
            ,ESTADOATDPROTOCOLOV01.IDSISTEMAORIGEM
            ,ESTADOATDPROTOCOLOV01.NMSISTEMAORIGEM
            ,ESTADOATDPROTOCOLOV01.IDPESSOADEPARA
            ,ESTADOATDPROTOCOLOV01.CDCONTA
            ,TO_CHAR(ESTADOATDPROTOCOLOV01.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA
            ,TO_CHAR(ESTADOATDPROTOCOLOV01.DTENCERRAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTENCERRAMENTO
            ,ESTADOATDPROTOCOLOV01.QTPROCESSOABERTO
            ,ESTADOATDPROTOCOLOV01.QTPROCESSOPENDENTE
            ,ESTADOATDPROTOCOLOV01.IDLINHATELEFONICA
            ,ESTADOATDPROTOCOLOV01.IDTIPOABERTURAPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.DSTIPOABERTURAPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.DSSTATUSPROTOCOLO
        INTO
            :dadoOraDadosProtocolo:statOraDadosProtocolo
        FROM
            ATENDIMENTO.ESTADOATENDIMENTOPROTOCOLOV01 ESTADOATDPROTOCOLOV01
        WHERE
            ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO = :paramOraIdAtendimentoProtocolo;

    bool retorno = false;

    if ( 0 == sqlca.sqlcode )
    {
        SAFE_STRNCPY(dadosVOSaida.idAtendimentoProtocolo,(char*)dadoOraDadosProtocolo.idAtendimentoProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.cdAreaRegistro,(char*)dadoOraDadosProtocolo.cdAreaRegistro.arr);
        SAFE_STRNCPY(dadosVOSaida.nrTelefone,(char*)dadoOraDadosProtocolo.nrTelefone.arr);
        SAFE_STRNCPY(dadosVOSaida.idSistemaOrigem,(char*)dadoOraDadosProtocolo.idSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.nmSistemaOrigem,(char*)dadoOraDadosProtocolo.nmSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.idPessoaDePara,(char*)dadoOraDadosProtocolo.idPessoaDePara.arr);
        SAFE_STRNCPY(dadosVOSaida.cdConta,(char*)dadoOraDadosProtocolo.cdConta.arr);
        SAFE_STRNCPY(dadosVOSaida.dtAbertura,(char*)dadoOraDadosProtocolo.dtAbertura.arr);
        SAFE_STRNCPY(dadosVOSaida.dtEncerramento,(char*)dadoOraDadosProtocolo.dtEncerramento.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoAberto,(char*)dadoOraDadosProtocolo.qtProcessoAberto.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoPendente,(char*)dadoOraDadosProtocolo.qtProcessoPendente.arr);
        SAFE_STRNCPY(dadosVOSaida.idLinhaTelefonica,(char*)dadoOraDadosProtocolo.idLinhaTelefonica.arr);
        SAFE_STRNCPY(dadosVOSaida.idTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.idTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.dsTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsStatusProtocolo,(char*)dadoOraDadosProtocolo.dsStatusProtocolo.arr);

        retorno = true;
    }
        
    ULOG_END("cWfAtdGetDadoProPC::proCObterDadosProtocolo(const char *idAtendimentoProtocolo)");

    return retorno;
}

bool cWfAtdGetDadoProPC::proCObterDadosProtocoloSMS(const char *idAtendimentoProtocolo)
{
    ULOG_START("cWfAtdGetDadoProPC::proCObterDadosProtocoloSMS(const char *idAtendimentoProtocolo)");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct
        {
            VARCHAR idAtendimentoProtocolo[64];
            VARCHAR cdAreaRegistro[5];
            VARCHAR nrTelefone[16];
            VARCHAR idSistemaOrigem[64];
            VARCHAR nmSistemaOrigem[512];
            VARCHAR idPessoaDePara[64];
            VARCHAR cdConta[101];
            VARCHAR dtAbertura[32];
            VARCHAR dtEncerramento[32];
            VARCHAR qtProcessoAberto[5];
            VARCHAR qtProcessoPendente[5];
            VARCHAR idLinhaTelefonica[39];
            VARCHAR idTipoAberturaProtocolo[5];
            VARCHAR dsTipoAberturaProtocolo[256];
            VARCHAR dsStatusProtocolo[256];
            VARCHAR cdAreaRegistroSMS[5];
            VARCHAR nrTelefoneSMS[16];
        } dadoOraDadosProtocolo;

        struct
        {
            short idAtendimentoProtocolo;
            short cdAreaRegistro;
            short nrTelefone;
            short idSistemaOrigem;
            short nmSistemaOrigem;
            short idPessoaDePara;
            short cdConta;
            short dtAbertura;
            short dtEncerramento;
            short qtProcessoAberto;
            short qtProcessoPendente;
            short idLinhaTelefonica;
            short idTipoAberturaProtocolo;
            short dsTipoAberturaProtocolo;
            short dsStatusProtocolo;
            short cdAreaRegistroSMS;
            short nrTelefoneSMS;
        } statOraDadosProtocolo;

        const char *paramOraIdAtendimentoProtocolo = idAtendimentoProtocolo;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfAtdGetDadoProPC(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&dadoOraDadosProtocolo,0,sizeof(dadoOraDadosProtocolo));
    memset(&statOraDadosProtocolo,-1,sizeof(statOraDadosProtocolo));

    //EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
        SELECT
             ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.CDAREAREGISTRO
            ,ESTADOATDPROTOCOLOV01.NRTELEFONE
            ,ESTADOATDPROTOCOLOV01.IDSISTEMAORIGEM
            ,ESTADOATDPROTOCOLOV01.NMSISTEMAORIGEM
            ,ESTADOATDPROTOCOLOV01.IDPESSOADEPARA
            ,ESTADOATDPROTOCOLOV01.CDCONTA
            ,TO_CHAR(ESTADOATDPROTOCOLOV01.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA
            ,TO_CHAR(ESTADOATDPROTOCOLOV01.DTENCERRAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTENCERRAMENTO
            ,ESTADOATDPROTOCOLOV01.QTPROCESSOABERTO
            ,ESTADOATDPROTOCOLOV01.QTPROCESSOPENDENTE
            ,ESTADOATDPROTOCOLOV01.IDLINHATELEFONICA
            ,ESTADOATDPROTOCOLOV01.IDTIPOABERTURAPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.DSTIPOABERTURAPROTOCOLO
            ,ESTADOATDPROTOCOLOV01.DSSTATUSPROTOCOLO
            ,FILASMSPROTOCOLO.CDAREAREGISTRO AS CDAREAREGISTROSMS
            ,FILASMSPROTOCOLO.NRLINHA AS NRLINHASMS
        INTO
            :dadoOraDadosProtocolo:statOraDadosProtocolo
        FROM
            ATENDIMENTO.ESTADOATENDIMENTOPROTOCOLOV01 ESTADOATDPROTOCOLOV01,
            ATENDIMENTO.FILASMSPROTOCOLO FILASMSPROTOCOLO
        WHERE
            ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO = :paramOraIdAtendimentoProtocolo
        AND ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO = FILASMSPROTOCOLO.IDATENDIMENTOPROTOCOLO(+);

    bool retorno = false;

    if ( 0 == sqlca.sqlcode )
    {
        SAFE_STRNCPY(dadosVOSaida.idAtendimentoProtocolo,(char*)dadoOraDadosProtocolo.idAtendimentoProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.cdAreaRegistro,(char*)dadoOraDadosProtocolo.cdAreaRegistro.arr);
        SAFE_STRNCPY(dadosVOSaida.nrTelefone,(char*)dadoOraDadosProtocolo.nrTelefone.arr);
        SAFE_STRNCPY(dadosVOSaida.idSistemaOrigem,(char*)dadoOraDadosProtocolo.idSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.nmSistemaOrigem,(char*)dadoOraDadosProtocolo.nmSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.idPessoaDePara,(char*)dadoOraDadosProtocolo.idPessoaDePara.arr);
        SAFE_STRNCPY(dadosVOSaida.cdConta,(char*)dadoOraDadosProtocolo.cdConta.arr);
        SAFE_STRNCPY(dadosVOSaida.dtAbertura,(char*)dadoOraDadosProtocolo.dtAbertura.arr);
        SAFE_STRNCPY(dadosVOSaida.dtEncerramento,(char*)dadoOraDadosProtocolo.dtEncerramento.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoAberto,(char*)dadoOraDadosProtocolo.qtProcessoAberto.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoPendente,(char*)dadoOraDadosProtocolo.qtProcessoPendente.arr);
        SAFE_STRNCPY(dadosVOSaida.idLinhaTelefonica,(char*)dadoOraDadosProtocolo.idLinhaTelefonica.arr);
        SAFE_STRNCPY(dadosVOSaida.idTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.idTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.dsTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsStatusProtocolo,(char*)dadoOraDadosProtocolo.dsStatusProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.cdAreaRegistroSMS,(char*)dadoOraDadosProtocolo.cdAreaRegistroSMS.arr);
        SAFE_STRNCPY(dadosVOSaida.nrTelefoneSMS,(char*)dadoOraDadosProtocolo.nrTelefoneSMS.arr);

        retorno = true;
    }
    ULOG( "dadosVOSaida.idAtendimentoProtocolo [%s]", dadosVOSaida.idAtendimentoProtocolo);
    ULOG( "dadosVOSaida.cdAreaRegistro [%s]", dadosVOSaida.cdAreaRegistro);
    ULOG( "dadosVOSaida.nrTelefone [%s]", dadosVOSaida.nrTelefone);
    ULOG( "dadosVOSaida.idSistemaOrigem [%s]", dadosVOSaida.idSistemaOrigem);
    ULOG( "dadosVOSaida.nmSistemaOrigem [%s]", dadosVOSaida.nmSistemaOrigem);
    ULOG( "dadosVOSaida.idPessoaDePara [%s]", dadosVOSaida.idPessoaDePara);
    ULOG( "dadosVOSaida.cdConta [%s]", dadosVOSaida.cdConta);
    ULOG( "dadosVOSaida.dtAbertura [%s]", dadosVOSaida.dtAbertura);
    ULOG( "dadosVOSaida.dtEncerramento [%s]", dadosVOSaida.dtEncerramento);
    ULOG( "dadosVOSaida.qtProcessoAberto [%s]", dadosVOSaida.qtProcessoAberto);
    ULOG( "dadosVOSaida.qtProcessoPendente [%s]", dadosVOSaida.qtProcessoPendente);
    ULOG( "dadosVOSaida.idLinhaTelefonica [%s]", dadosVOSaida.idLinhaTelefonica);
    ULOG( "dadosVOSaida.idTipoAberturaProtocolo [%s]", dadosVOSaida.idTipoAberturaProtocolo);
    ULOG( "dadosVOSaida.dsTipoAberturaProtocolo [%s]", dadosVOSaida.dsTipoAberturaProtocolo);
    ULOG( "dadosVOSaida.dsStatusProtocolo [%s]", dadosVOSaida.dsStatusProtocolo);
    ULOG( "dadosVOSaida.cdAreaRegistroSMS [%s]", dadosVOSaida.cdAreaRegistroSMS);
    ULOG( "dadosVOSaida.nrTelefoneSMS [%s]", dadosVOSaida.nrTelefoneSMS);
        
    ULOG_END("cWfAtdGetDadoProPC::proCObterDadosProtocoloSMS(const char *idAtendimentoProtocolo)");

    return retorno;
}


bool cWfAtdGetDadoProPC::proCObterDadosProtocoloEmAtendimento(const char *cdAreaRegistro,
                                                              const char *nrTelefone,
                                                              const char *idSistemaOrigem)
{
    ULOG_START("cWfAtdGetDadoProPC::proCObterDadosProtocoloEmAtendimento()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *paramOraCdAreaRegistro = cdAreaRegistro;
        const char *paramOraNrTelefone = nrTelefone;
        const char *paramOraIdSistemaOrigem = idSistemaOrigem;

        struct
        {
            VARCHAR idAtendimentoProtocolo[39];
            VARCHAR cdAreaRegistro[5];
            VARCHAR nrTelefone[10];
            VARCHAR idSistemaOrigem[39];
            VARCHAR nmSistemaOrigem[256];
            VARCHAR idPessoaDePara[39];
            VARCHAR cdConta[101];
            VARCHAR dtAbertura[32];
            VARCHAR dtEncerramento[32];
            VARCHAR qtProcessoAberto[5];
            VARCHAR qtProcessoPendente[5];
            VARCHAR idLinhaTelefonica[39];
            VARCHAR idTipoAberturaProtocolo[2];
            VARCHAR dsTipoAberturaProtocolo[256];
            VARCHAR dsStatusProtocolo[256];
            VARCHAR cdAreaRegistroSMS[5];
            VARCHAR nrTelefoneSMS[10];
        } dadoOraDadosProtocolo;

        struct
        {
            short idAtendimentoProtocolo;
            short cdAreaRegistro;
            short nrTelefone;
            short idSistemaOrigem;
            short nmSistemaOrigem;
            short idPessoaDePara;
            short cdConta;
            short dtAbertura;
            short dtEncerramento;
            short qtProcessoAberto;
            short qtProcessoPendente;
            short idLinhaTelefonica;
            short idTipoAberturaProtocolo;
            short dsTipoAberturaProtocolo;
            short dsStatusProtocolo;
            short cdAreaRegistroSMS;
            short nrTelefoneSMS;
        } statOraDadosProtocolo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfAtdGetDadoProPC(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&dadoOraDadosProtocolo,0,sizeof(dadoOraDadosProtocolo));
    memset(&statOraDadosProtocolo,-1,sizeof(statOraDadosProtocolo));

    //EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
        SELECT
             TEMP.IDATENDIMENTOPROTOCOLO
            ,TEMP.CDAREAREGISTRO
            ,TEMP.NRTELEFONE
            ,TEMP.IDSISTEMAORIGEM
            ,TEMP.NMSISTEMAORIGEM
            ,TEMP.IDPESSOADEPARA
            ,TEMP.CDCONTA
            ,TO_CHAR(TEMP.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA
            ,TO_CHAR(TEMP.DTENCERRAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTENCERRAMENTO
            ,TEMP.QTPROCESSOABERTO
            ,TEMP.QTPROCESSOPENDENTE
            ,TEMP.IDLINHATELEFONICA
            ,TEMP.IDTIPOABERTURAPROTOCOLO
            ,TEMP.DSTIPOABERTURAPROTOCOLO
            ,TEMP.DSSTATUSPROTOCOLO
            ,FILASMSPROTOCOLO.CDAREAREGISTRO AS CDAREAREGISTROSMS
            ,FILASMSPROTOCOLO.NRLINHA AS NRLINHASMS
        INTO
            :dadoOraDadosProtocolo:statOraDadosProtocolo
        FROM
        (
            SELECT
                 ESTADOATDPROTOCOLOV01.IDATENDIMENTOPROTOCOLO
                ,ESTADOATDPROTOCOLOV01.CDAREAREGISTRO
                ,ESTADOATDPROTOCOLOV01.NRTELEFONE
                ,ESTADOATDPROTOCOLOV01.IDSISTEMAORIGEM
                ,ESTADOATDPROTOCOLOV01.NMSISTEMAORIGEM
                ,ESTADOATDPROTOCOLOV01.IDPESSOADEPARA
                ,ESTADOATDPROTOCOLOV01.CDCONTA
                ,ESTADOATDPROTOCOLOV01.DTABERTURA
                ,ESTADOATDPROTOCOLOV01.DTENCERRAMENTO
                ,ESTADOATDPROTOCOLOV01.QTPROCESSOABERTO
                ,ESTADOATDPROTOCOLOV01.QTPROCESSOPENDENTE
                ,ESTADOATDPROTOCOLOV01.IDLINHATELEFONICA
                ,ESTADOATDPROTOCOLOV01.IDTIPOABERTURAPROTOCOLO
                ,ESTADOATDPROTOCOLOV01.DSTIPOABERTURAPROTOCOLO
                ,ESTADOATDPROTOCOLOV01.DSSTATUSPROTOCOLO
            FROM
                ATENDIMENTO.ESTADOATENDIMENTOPROTOCOLOV01 ESTADOATDPROTOCOLOV01
            WHERE
                ESTADOATDPROTOCOLOV01.CDAREAREGISTRO = :paramOraCdAreaRegistro
            AND ESTADOATDPROTOCOLOV01.NRTELEFONE = :paramOraNrTelefone
            AND ESTADOATDPROTOCOLOV01.IDSISTEMAORIGEM = :paramOraIdSistemaOrigem
            AND ESTADOATDPROTOCOLOV01.DSSTATUSPROTOCOLO = 'Em Atendimento'
            ORDER BY ESTADOATDPROTOCOLOV01.DTABERTURA DESC
        ) TEMP,
            ATENDIMENTO.FILASMSPROTOCOLO FILASMSPROTOCOLO
        WHERE
            TEMP.IDATENDIMENTOPROTOCOLO = FILASMSPROTOCOLO.IDATENDIMENTOPROTOCOLO(+)
        AND ROWNUM < 2;

    bool retorno = false;

    if ( 0 == sqlca.sqlcode )
    {
        SAFE_STRNCPY(dadosVOSaida.idAtendimentoProtocolo,(char*)dadoOraDadosProtocolo.idAtendimentoProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.cdAreaRegistro,(char*)dadoOraDadosProtocolo.cdAreaRegistro.arr);
        SAFE_STRNCPY(dadosVOSaida.nrTelefone,(char*)dadoOraDadosProtocolo.nrTelefone.arr);
        SAFE_STRNCPY(dadosVOSaida.idSistemaOrigem,(char*)dadoOraDadosProtocolo.idSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.nmSistemaOrigem,(char*)dadoOraDadosProtocolo.nmSistemaOrigem.arr);
        SAFE_STRNCPY(dadosVOSaida.idPessoaDePara,(char*)dadoOraDadosProtocolo.idPessoaDePara.arr);
        SAFE_STRNCPY(dadosVOSaida.cdConta,(char*)dadoOraDadosProtocolo.cdConta.arr);
        SAFE_STRNCPY(dadosVOSaida.dtAbertura,(char*)dadoOraDadosProtocolo.dtAbertura.arr);
        SAFE_STRNCPY(dadosVOSaida.dtEncerramento,(char*)dadoOraDadosProtocolo.dtEncerramento.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoAberto,(char*)dadoOraDadosProtocolo.qtProcessoAberto.arr);
        SAFE_STRNCPY(dadosVOSaida.qtProcessoPendente,(char*)dadoOraDadosProtocolo.qtProcessoPendente.arr);
        SAFE_STRNCPY(dadosVOSaida.idLinhaTelefonica,(char*)dadoOraDadosProtocolo.idLinhaTelefonica.arr);
        SAFE_STRNCPY(dadosVOSaida.idTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.idTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsTipoAberturaProtocolo,(char*)dadoOraDadosProtocolo.dsTipoAberturaProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.dsStatusProtocolo,(char*)dadoOraDadosProtocolo.dsStatusProtocolo.arr);
        SAFE_STRNCPY(dadosVOSaida.cdAreaRegistroSMS,(char*)dadoOraDadosProtocolo.cdAreaRegistroSMS.arr);
        SAFE_STRNCPY(dadosVOSaida.nrTelefoneSMS,(char*)dadoOraDadosProtocolo.nrTelefoneSMS.arr);

        retorno = true;
    }
        
    ULOG_END("cWfAtdGetDadoProPC::proCObterDadosProtocoloEmAtendimento()");

    return retorno;
}

void cWfAtdGetDadoProPC::sql_error_WfAtdGetDadoProPC(sqlca *sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
