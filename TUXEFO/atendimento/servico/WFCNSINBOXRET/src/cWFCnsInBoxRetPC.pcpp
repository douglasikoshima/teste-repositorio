
#include "../include/cWFCnsInBoxRetPC.h"

void cWFCnsInBoxRetPC::consultaWFRetornoCTI( st_VariaveisCnsCTI *_dadosEntradaPC, Collection *_ResultadoPC )
{
    ULOG_START("cWFCnsInBoxRetPC::consultaWFRetornoCTI()");

    struct sqlca sqlca;
    st_VariaveisCnsCTI *pCTI;

    EXEC SQL BEGIN DECLARE SECTION;

        int idretornowfctiAux =  _dadosEntradaPC->idretornowfcti ? 
                                    atoi(_dadosEntradaPC->idretornowfcti) : 0;

        VARCHAR sgretornowfcti[256];
        VARCHAR dsretornowfcti[256];
        VARCHAR sgstatus[2];
        VARCHAR inpadrao[23];

        short i_sgretornowfcti;
        short i_dsretornowfcti;
        short i_sgstatus;
        short i_inpadrao;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFRetornoCTI( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE ConsultaCTI CURSOR FOR
      SELECT 
         sgretornowfcti,
         dsretornowfcti,
         sgstatus,
         inpadrao 
      FROM 
         workflow.retornowfcti
      WHERE 
         idretornowfcti = :idretornowfctiAux;

    EXEC SQL OPEN ConsultaCTI;

    ULOG("sqlca.sqlcode = '%d'",sqlca.sqlcode);

    for ( ;; )
    {
        EXEC SQL FETCH ConsultaCTI INTO
                                     :sgretornowfcti:i_sgretornowfcti,
                                     :dsretornowfcti:i_dsretornowfcti,
                                     :sgstatus:i_sgstatus,
                                     :inpadrao:i_inpadrao;

        CONVIND( sgretornowfcti,i_sgretornowfcti );
        CONVIND( dsretornowfcti,i_dsretornowfcti );
        CONVIND( sgstatus,i_sgstatus );
        CONVIND( inpadrao,i_inpadrao );

        pCTI = new st_VariaveisCnsCTI;
        if ( pCTI )
        {
            strcpy( pCTI->idretornowfcti,(char*)_dadosEntradaPC->idretornowfcti );
            strcpy( pCTI->sgretornowfcti,(char*)sgretornowfcti.arr );
            strcpy( pCTI->dsretornowfcti,(char*)dsretornowfcti.arr );
            strcpy( pCTI->sgstatus      ,(char*)sgstatus.arr );
            strcpy( pCTI->inpadrao      ,(char*)inpadrao.arr );

            _ResultadoPC->AddItem( (void*) pCTI );
        }
        else
        {
            ULOG(erroFalhaAlocacaoMemoria());
        }
    }

    EXEC SQL CLOSE ConsultaCTI;

    ULOG_END("cWFCnsInBoxRetPC::consultaWFRetornoCTI()");
}

void cWFCnsInBoxRetPC::sql_error_WFRetornoCTI( sqlca * sqlca )
{
    ULOG("Ocorreu um erro na consulta de Retorno CTI.");
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
