
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/cInclPerfil.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/msgPadrao.h"

//===========================================================================================
// Prototipos
bool proCAlteraPerfil(const unsigned long idUser,const unsigned long idPerfil,const char * sNomePerfil,VEC_TPLINHAXML     * idTpLinhaXML,VEC_SEGMENTOXML    * idSegmentacaoXML,VEC_CARTEIRAXML    * idCarteiraXML,VEC_PROCEDENCIAXML * idProcedenciaXML,VEC_NATUREZAXML    * idNaturezaXML,VEC_GRUPOXML       * idGrupoXML,VEC_TPCLIENTEXML   * idTipoClienteXML,VEC_CANALXML       * idCanalXML,VEC_REGIONALXML    * idUFOperadoraXML);
bool proCAlteraVariaveis(const unsigned long idPerfilPrm,VEC_TPLINHAXML     * idTpLinhaXML,VEC_SEGMENTOXML    * idSegmentacaoXML,VEC_CARTEIRAXML    * idCarteiraXML,VEC_PROCEDENCIAXML * idProcedenciaXML,VEC_NATUREZAXML    * idNaturezaXML,VEC_GRUPOXML       * idGrupoXML,VEC_TPCLIENTEXML   * idTipoClienteXML,VEC_CANALXML       * idCanalXML,VEC_REGIONALXML    * idUFOperadoraXML);
bool proCInsereNomePerfil( const unsigned long idUser, const char * sNomePerfil, unsigned long * idPerfilPrm );
bool proCInserePerfil(const unsigned long idUser,const char * sNomePerfil,VEC_TPLINHAXML     * idTpLinhaXML,VEC_SEGMENTOXML    * idSegmentacaoXML,VEC_CARTEIRAXML    * idCarteiraXML,VEC_PROCEDENCIAXML * idProcedenciaXML,VEC_NATUREZAXML    * idNaturezaXML,VEC_GRUPOXML       * idGrupoXML,VEC_TPCLIENTEXML   * idTipoClienteXML,VEC_CANALXML       * idCanalXML,VEC_REGIONALXML    * idUFOperadoraXML);
bool proCInsereProcedencia(const unsigned long idPerfilPrm,VEC_PROCEDENCIAXML * idProcedenciaXML);
bool proCInsereVariaveis(const unsigned long idPerfilPrm,VEC_TPLINHAXML     * idTpLinhaXML,VEC_SEGMENTOXML    * idSegmentacaoXML,VEC_CARTEIRAXML    * idCarteiraXML,VEC_PROCEDENCIAXML * idProcedenciaXML,VEC_NATUREZAXML    * idNaturezaXML,VEC_GRUPOXML       * idGrupoXML,VEC_TPCLIENTEXML   * idTipoClienteXML,VEC_CANALXML       * idCanalXML,VEC_REGIONALXML    * idUFOperadoraXML);
int proCAlteraNomePerfil(const unsigned long idUser,const char * sNomePerfil,const unsigned long idPerfilPrm);
void proCDeletaTabelasAuxiliares( const unsigned long idPerfilPrm );
void proCInsereCanal(const unsigned long  idPerfilPrm,VEC_CANALXML       * idCanalXML);
void proCInsereGrupo(const unsigned long idPerfilPrm,VEC_GRUPOXML       * idGrupoXML);
void proCInsereNatureza(const unsigned long idPerfilPrm,VEC_NATUREZAXML    * idNaturezaXML);
void proCInsereOperadora(const unsigned long idPerfilPrm,VEC_REGIONALXML    * idUFOperadoraXML);
void proCInsereSegmentacao( const unsigned long  idPerfilPrm,VEC_SEGMENTOXML    * idSegmentacaoXML);
void proCInsereTipoCarteira(const unsigned long idPerfilPrm,VEC_CARTEIRAXML    * idCarteiraXML);
void proCInsereTipoCliente(const unsigned long idPerfilPrm,VEC_TPCLIENTEXML   * idTipoClienteXML);
void proCInsereTipoLinha(const unsigned long idPerfilPrm,VEC_TPLINHAXML     * idTpLinhaXML);
void SqlError( sqlca * sqlca );

//===========================================================================================
// Implementação
bool proCValidaNomePerfil( const unsigned long idPerfilPrm,const char * sNomePerfil )
{
    ULOG_START("proCValidaNomePerfil()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const char *NomePerfil = sNomePerfil;
        unsigned long idPerfil = 0;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    EXEC SQL
        SELECT
            idPerfil
        INTO
            :idPerfil
        FROM
	        ContatoAdm.Perfil
        WHERE
            UPPER(nmPerfil) = UPPER(:NomePerfil);

    ULOG_END("proCValidaNomePerfil()");

    if( idPerfil > 0 )
    {
        return idPerfil != idPerfilPrm ? true : false;
    }

   return false;			
}

int proCAlteraNomePerfil(const unsigned long idUser,
                         const char * sNomePerfil,
                         const unsigned long idPerfilPrm)
{
    ULOG_START("proCAlteraNomePerfil()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        const unsigned long idUsuario = idUser;

        const char *NomePerfil = sNomePerfil;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    EXEC SQL
    UPDATE 
        CONTATOADM.PERFIL 
    SET 
        NMPERFIL = :NomePerfil,
        IDUSUARIOALTERACAO = :idUsuario,
        DTULTIMAALTERACAO = SYSDATE 
    WHERE 
        IDPERFIL = :idPerfil;
    
    ULOG_END("proCAlteraNomePerfil()");

    return 0;

}

bool proCAlteraVariaveis(const unsigned long idPerfil,
                         VEC_TPLINHAXML     * idTpLinhaXML,
                         VEC_SEGMENTOXML    * idSegmentacaoXML,
                         VEC_CARTEIRAXML    * idCarteiraXML,
                         VEC_PROCEDENCIAXML * idProcedenciaXML,
                         VEC_NATUREZAXML    * idNaturezaXML,
                         VEC_GRUPOXML       * idGrupoXML,
                         VEC_TPCLIENTEXML   * idTipoClienteXML,
                         VEC_CANALXML       * idCanalXML,
                         VEC_REGIONALXML    * idUFOperadoraXML)
{
    ULOG_START("proCAlteraVariaveis()");

    proCDeletaTabelasAuxiliares( idPerfil );
   
    proCInsereProcedencia( idPerfil, idProcedenciaXML );

    proCInsereTipoLinha( idPerfil, idTpLinhaXML );
	
    proCInsereCanal( idPerfil, idCanalXML );

    proCInsereSegmentacao( idPerfil, idSegmentacaoXML );

    proCInsereTipoCarteira( idPerfil, idCarteiraXML );

    proCInsereNatureza( idPerfil, idNaturezaXML );

    proCInsereGrupo( idPerfil, idGrupoXML );

    proCInsereTipoCliente( idPerfil, idTipoClienteXML );

    proCInsereOperadora( idPerfil, idUFOperadoraXML );

    ULOG_END("proCAlteraVariaveis()");

    return true;
}

void proCInsereTipoLinha(const unsigned long idPerfilPrm,VEC_TPLINHAXML     * idTpLinhaXML)
{
    ULOG_START("proCInsereTipoLinha()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTpLinha;
        int nReg;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

	for ( int i=0; i < idTpLinhaXML->size(); i++ )
    {
        idTpLinha = idTpLinhaXML->at(i);

        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilTipoLinha
		    WHERE idPerfil = :idPerfil AND idTipoLinha  = :idTpLinha ;

    
        if ( nReg > 0)
        {
       
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilTipoLinha
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idTipoLinha  = :idTpLinha;
        }
        else
        {
            EXEC SQL 
            INSERT INTO CONTATOADM.PERFILTIPOLINHA
                (
                    IDPERFILTIPOLINHA,
                    IDPERFIL,
                    IDTIPOLINHA,
                    DTULTIMAALTERACAO,
                    IDUSUARIOALTERACAO
                )
                VALUES
                (
                    ContatoAdm.PerfilTipoLinhaSQ.NEXTVAL,
                    :idPerfil,
                    :idTpLinha,
                    SYSDATE,
                    NULL
                );
        }
    }

    ULOG_END("proCInsereTipoLinha()");
}

void proCInsereCanal(const unsigned long  idPerfilPrm,VEC_CANALXML       * idCanalXML)
{
    ULOG_START("proCInsereCanal()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idCanal;
        int nReg;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

	for ( int i=0; i < idCanalXML->size(); i++ )
    {
        idCanal = idCanalXML->at(i);


        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilCanal
		    WHERE idPerfil = :idPerfil AND idCanal  = :idCanal ;

    
        if ( nReg > 0)
        {
       
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilCanal
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idCanal  = :idCanal;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILCANAL
                    (
                        IDPERFILCANAL,
                        IDPERFIL,
                        IDCANAL,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilCanalSQ.NEXTVAL,
                        :idPerfil,
                        :idCanal,
                        SYSDATE,
                        NULL
                    );
        }
    }

    ULOG_END("proCInsereCanal()");
}

void proCInsereSegmentacao(const unsigned long  idPerfilPrm,VEC_SEGMENTOXML    * idSegmentacaoXML)
{
    ULOG_START("proCInsereSegmentacao()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idSegmentacao;
        int nReg = 0 ;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
	for ( int i=0; i < idSegmentacaoXML->size(); i++ )
    {
        idSegmentacao = idSegmentacaoXML->at(i);


        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilSegmentacao
		    WHERE idPerfil = :idPerfil AND idSegmentacao  = :idSegmentacao ;

    
        if ( nReg > 0)
        {
       
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilSegmentacao
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idSegmentacao  = :idSegmentacao;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILSEGMENTACAO
                    (
                        IDPERFILSEGMENTACAO,
                        IDPERFIL,
                        IDSEGMENTACAO,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilSegmentacaoSQ.NEXTVAL,
                        :idPerfil,
                        :idSegmentacao,
                        SYSDATE,
                        NULL
                    );
        }
    }

    ULOG_END("proCInsereSegmentacao()");
}

void proCInsereTipoCarteira(const unsigned long idPerfilPrm,VEC_CARTEIRAXML    * idCarteiraXML)
{
    ULOG_START("proCInsereTipoCarteira()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idCarteira;
        int nReg = 0 ;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
	for ( int i=0; i < idCarteiraXML->size(); i++ )
    {
        idCarteira = idCarteiraXML->at(i);
        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilCarteira
		    WHERE idPerfil = :idPerfil AND idTipoCarteira  = :idCarteira ;
        if ( nReg > 0)
        {
       
             EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilCarteira
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idTipoCarteira  = :idCarteira;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILCARTEIRA
                    (
                        IDPERFILCARTEIRA,
                        IDPERFIL,
                        IDTIPOCARTEIRA,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilCarteiraSQ.NEXTVAL,
                        :idPerfil,
                        :idCarteira,
                        SYSDATE,
                        NULL
                    );
        }
    }
   ULOG_END("proCInsereTipoCarteira()");
}

void proCInsereNatureza(const unsigned long idPerfilPrm,VEC_NATUREZAXML * idNaturezaXML)
{
    ULOG_START("proCInsereNatureza()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idNatureza;
        int nReg;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
	for ( int i=0; i < idNaturezaXML->size(); i++ )
    {
        idNatureza = idNaturezaXML->at(i);
        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilNatureza
		    WHERE idPerfil = :idPerfil AND idTipoPessoa  = :idNatureza ;
        if ( nReg > 0)
        {
       
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilNatureza
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idTipoPessoa  = :idNatureza;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILNATUREZA
                    (
                        IDPERFILNATUREZA,
                        IDPERFIL,
                        IDTIPOPESSOA,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilNaturezaSQ.NEXTVAL,
                        :idPerfil,
                        :idNatureza,
                        SYSDATE,
                        NULL
                    );
        }
    }

    ULOG_END("proCInsereNatureza()");
}

void proCInsereTipoCliente(const unsigned long idPerfilPrm,VEC_TPCLIENTEXML *idTipoClienteXML)
{
    ULOG_START("proCInsereTipoCliente()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTipoCliente;
        int nReg;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

	for ( int i=0; i < idTipoClienteXML->size(); i++ )
    {
        idTipoCliente = idTipoClienteXML->at(i);

        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilTipoCliente
		    WHERE idPerfil = :idPerfil AND idTipoRelacionamento  = :idTipoCliente ;
        if ( nReg > 0)
        {
        
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilTipoCliente
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idTipoRelacionamento  = :idTipoCliente;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILTIPOCLIENTE
                    (
                        IDPERFILTIPOCLIENTE,
                        IDPERFIL,
                        IDTIPORELACIONAMENTO,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilTipoClienteSQ.NEXTVAL,
                        :idPerfil,
                        :idTipoCliente,
                        SYSDATE,
                        NULL
                    );
        }
    }
    ULOG_END("proCInsereTipoCliente()");
}

void proCInsereGrupo(const unsigned long idPerfilPrm,VEC_GRUPOXML *idGrupoXML)
{
    ULOG_START("proCInsereGrupo()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
		unsigned long idGrupo;
        int nReg = 0 ;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

	for ( int i=0; i < idGrupoXML->size(); i++ )
    {
        idGrupo = idGrupoXML->at(i);
        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilGrupoAbertura
		    WHERE idPerfil = :idPerfil AND idGrupo  = :idGrupo ;
        if ( nReg > 0)
        {
        
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilGrupoAbertura
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idGrupo  = :idGrupo;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILGRUPOABERTURA
                    (
                        IDPERFILGRUPOABERTURA,
                        IDPERFIL,
                        IDGRUPO,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilGrupoAberturaSQ.NEXTVAL,
                        :idPerfil,
                        :idGrupo,
                        SYSDATE,
                        NULL
                    );
        }
    }
    ULOG_END("proCInsereGrupo()");
}

void proCInsereOperadora(const unsigned long idPerfilPrm,VEC_REGIONALXML *idUFOperadoraXML)
{
    ULOG_START("proCInsereOperadora()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
		unsigned long idUFOperadora;
        int nReg = 0 ;
	EXEC SQL END DECLARE SECTION;

    int i;


    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
	for ( i=0; i < idUFOperadoraXML->size(); i++ )
    {
        idUFOperadora = idUFOperadoraXML->at(i);

        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilUFOperadora
		    WHERE idPerfil = :idPerfil AND idUFOperadora  = :idUFOperadora;

        if ( nReg > 0)
        {
        
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilUFOperadora
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfil 
                AND 
                    idUFOperadora  = :idUFOperadora;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILUFOPERADORA
                    (
                        IDPERFILUFOPERADORA,
                        IDPERFIL,
                        IDUFOPERADORA,
                        DTULTIMAALTERACAO,
                        IDUSUARIOALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilUFOperadoraSQ.NEXTVAL,
                        :idPerfil,
                        :idUFOperadora,
                        SYSDATE,
                        NULL
                    );
        }
    }

    ULOG_END("proCInsereOperadora()");
}


bool proCInsereProcedencia(const unsigned long idPerfilPrm,VEC_PROCEDENCIAXML * idProcedenciaXML)
{
    ULOG_START("proCInsereProcedencia()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPerfilArr;
		unsigned long idProcedenciaArr;
        int nReg = 0 ;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    idPerfilArr = idPerfilPrm;
	for ( int i=0; i < idProcedenciaXML->size(); i++ )
    {
        idProcedenciaArr = idProcedenciaXML->at(i);

     
        EXEC SQL
	    	SELECT COUNT(1)
		    INTO :nReg
		    FROM ContatoAdm.PerfilProcedencia
		    WHERE idPerfil = :idPerfilArr AND idProcedencia = :idProcedenciaArr ;

     
        if ( nReg > 0)
        {
        
            EXEC SQL
                UPDATE 
			        ContatoAdm.PerfilProcedencia
		        SET
		            DTEXCLUSAO = NULL
		        WHERE 
			        IDPERFIL = :idPerfilArr 
                AND 
                    idProcedencia  = :idProcedenciaArr;
        }
        else
        {
	        EXEC SQL 
                INSERT INTO
                    CONTATOADM.PERFILPROCEDENCIA
                    (
                        IDPERFILPROCEDENCIA,
                        IDPERFIL,
                        IDPROCEDENCIA,
                        DTULTIMAALTERACAO
                    )
                    VALUES
                    (
                        ContatoAdm.PerfilProcedenciaSQ.NEXTVAL,
                        :idPerfilArr,
                        :idProcedenciaArr,
                        SYSDATE
                    );
        }
    }

    ULOG_END("proCInsereProcedencia()");

    return true;
}

void proCDeletaTabelasAuxiliares( const unsigned long idPerfilPrm )
{
    ULOG_START("proCDeletaTabelasAuxiliares()");
    
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILTIPOLINHA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE
			CONTATOADM.PERFILSEGMENTACAO 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE
			CONTATOADM.PERFILCARTEIRA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILPROCEDENCIA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILNATUREZA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILTIPOCLIENTE 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILGRUPOABERTURA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILCANAL 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    EXEC SQL
        UPDATE 
			CONTATOADM.PERFILUFOPERADORA 
		SET
		    DTEXCLUSAO = SYSDATE
		WHERE 
			IDPERFIL = :idPerfil;

    ULOG_END("proCDeletaTabelasAuxiliares()");

}

bool proCInsereNomePerfil( const unsigned long idUser,
                           const char *sNomePerfil,
                           unsigned long *idPerfilPrm )
{
    ULOG_START("proCInsereNomePerfil()");

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idUsuario = idUser;
        unsigned long idPerfil = 0;
        int qtde;

        const char *NomePerfil = sNomePerfil;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL SELECT ContatoAdm.PerfilSQ.NEXTVAL INTO :idPerfil FROM DUAL;

	EXEC SQL 
        SELECT COUNT(1)
        INTO
            :qtde
        FROM
            CONTATOADM.PERFIL
        WHERE
            NMPERFIL = :NomePerfil;

    if ( qtde == 0 )
    {
	    EXEC SQL 
            INSERT INTO
                CONTATOADM.PERFIL
                (
                    IDPERFIL,
                    NMPERFIL,
                    INATIVO,
		            DTEXCLUSAO,
                    IDUSUARIOALTERACAO,
                    DTULTIMAALTERACAO
                )
                VALUES
                (
                    :idPerfil,
                    :NomePerfil,
                    0,
		            NULL,
                    :idUsuario,
                    SYSDATE
                );

        *idPerfilPrm = idPerfil;
    }
    
    ULOG_END("proCInsereNomePerfil()");   
    
    return qtde ? false : true;
}

bool proCInsereVariaveis(const unsigned long idPerfil,
                         VEC_TPLINHAXML     * idTpLinhaXML,
                         VEC_SEGMENTOXML    * idSegmentacaoXML,
                         VEC_CARTEIRAXML    * idCarteiraXML,
                         VEC_PROCEDENCIAXML * idProcedenciaXML,
                         VEC_NATUREZAXML    * idNaturezaXML,
                         VEC_GRUPOXML       * idGrupoXML,
                         VEC_TPCLIENTEXML   * idTipoClienteXML,
                         VEC_CANALXML       * idCanalXML,
                         VEC_REGIONALXML    * idUFOperadoraXML)
{

    ULOG_START("proCInsereVariaveis()");
    
    proCDeletaTabelasAuxiliares( idPerfil );

    proCInsereProcedencia( idPerfil, idProcedenciaXML );

    proCInsereTipoLinha( idPerfil, idTpLinhaXML );

    proCInsereCanal( idPerfil, idCanalXML );

    proCInsereSegmentacao( idPerfil, idSegmentacaoXML );

    proCInsereTipoCarteira( idPerfil, idCarteiraXML );

    proCInsereNatureza( idPerfil, idNaturezaXML );

    proCInsereGrupo( idPerfil, idGrupoXML );

    proCInsereTipoCliente( idPerfil, idTipoClienteXML );

    proCInsereOperadora( idPerfil, idUFOperadoraXML );

    ULOG_END("proCInsereVariaveis()");
    
    return true;

}

void proCCarregaPerfil( VEC_TPLINHAXML * idTpLinhaXML,
                        VEC_SEGMENTOXML * idSegmentacaoXML,
                        VEC_CARTEIRAXML * idCarteiraXML,
                        VEC_PROCEDENCIAXML * idProcedenciaXML,
                        VEC_NATUREZAXML * idNaturezaXML,
                        VEC_GRUPOXML * idGrupoXML,
                        VEC_TPCLIENTEXML * idTipoClienteXML,
                        VEC_CANALXML * idCanalXML,
                        VEC_REGIONALXML * idUFOperadoraXML,
                        VEC_PERFIL * pDados)
{
    ULOG_START("proCCarregaPerfil()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

		char *        queryChar;
        unsigned long idPerfil;

	EXEC SQL END DECLARE SECTION;

    int i = 0;

  	SmallString query;
  	SmallString parcial;

    query = 
	    "SELECT "
	        "PERFIL.IDPERFIL "
	    "FROM "
	        "CONTATOADM.PERFIL PERFIL "
	    "WHERE "
		    "DTEXCLUSAO IS NULL "
		"AND "
	        "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILTIPOLINHA WHERE DTEXCLUSAO IS NULL AND IDTIPOLINHA IN (";
    for ( i=0; i < idTpLinhaXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial += 
               idTpLinhaXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILPROCEDENCIA WHERE DTEXCLUSAO IS NULL AND IDPROCEDENCIA IN (";
    for ( i=0; i < idProcedenciaXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idProcedenciaXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILSEGMENTACAO WHERE DTEXCLUSAO IS NULL AND IDSEGMENTACAO IN (";
    for ( i=0; i < idSegmentacaoXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idSegmentacaoXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }
    
    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILCARTEIRA WHERE DTEXCLUSAO IS NULL AND IDTIPOCARTEIRA IN (";
    for ( i=0; i < idCarteiraXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idCarteiraXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILNATUREZA WHERE DTEXCLUSAO IS NULL AND IDTIPOPESSOA IN (";
    for ( i=0; i < idNaturezaXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idNaturezaXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILGRUPOABERTURA WHERE DTEXCLUSAO IS NULL AND IDGRUPO IN (";
    for ( i=0; i < idGrupoXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idGrupoXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILTIPOCLIENTE WHERE DTEXCLUSAO IS NULL AND IDTIPORELACIONAMENTO IN (";
    for ( i=0; i < idTipoClienteXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idTipoClienteXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILCANAL WHERE DTEXCLUSAO IS NULL AND IDCANAL IN (";
    for ( i=0; i < idCanalXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idCanalXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    query +=
        " AND "
           "PERFIL.IDPERFIL IN ( ";

	parcial = "SELECT IDPERFIL FROM CONTATOADM.PERFILUFOPERADORA WHERE DTEXCLUSAO IS NULL AND IDUFOPERADORA IN(";
    for ( i=0; i < idUFOperadoraXML->size(); i++ )
    {
        if ( i > 0 )
        {
            parcial +=
                   ",";
        }
        parcial +=       
               idUFOperadoraXML->at(i);
    }
    if ( i != 0 )
    {
        parcial +=
            " ) )";
    }
    else
    {
        parcial +=
            "0 ) )";
    }

    query += parcial;
    queryChar = query;


    ULOG("Executando Query [%s]",queryChar);

	EXEC SQL PREPARE Consulta FROM :queryChar;
    EXEC SQL DECLARE CarregaPerfil CURSOR FOR Consulta;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    bool primeiro = true;
    bool encontrou = false;
    EXEC SQL OPEN CarregaPerfil;
    for( ;; )
    {
        
        EXEC SQL FETCH CarregaPerfil INTO 
            :idPerfil;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idPerfil )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idPerfil);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idPerfil);
        }

    }
    EXEC SQL CLOSE CarregaPerfil;

    ULOG_END("proCCarregaPerfil()");
}

void proCCarregaTipoLinha( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaTipoLinha()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTipoLinha;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadTipoLinha CURSOR FOR 
        SELECT 
            idTipoLinha 
        FROM 
            Contatoadm.PerfilTipoLinha 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

  
    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadTipoLinha;
    for( ;; )
    {
        EXEC SQL FETCH ReadTipoLinha INTO :idTipoLinha;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idTipoLinha )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idTipoLinha);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idTipoLinha);
        }


    }
    EXEC SQL CLOSE ReadTipoLinha;

    ULOG_END("proCCarregaTipoLinha()");
}

void proCCarregaSegmentacao( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaSegmentacao()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idSegmentacao;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadSegmentacao CURSOR FOR 
        SELECT 
            idSegmentacao 
        FROM 
            Contatoadm.PerfilSegmentacao 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

 
    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadSegmentacao;
    for( ;; )
    {
        EXEC SQL FETCH ReadSegmentacao INTO :idSegmentacao;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idSegmentacao )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idSegmentacao);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idSegmentacao);
        }


    }
    EXEC SQL CLOSE ReadSegmentacao;

    ULOG_END("proCCarregaSegmentacao()");
}

void proCCarregaCarteira( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaCarteira()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTipoCarteira;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadCarteira CURSOR FOR 
        SELECT 
            idTipoCarteira 
        FROM 
            Contatoadm.PerfilCarteira 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;


    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadCarteira;
    for( ;; )
    {
        EXEC SQL FETCH ReadCarteira INTO :idTipoCarteira;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idTipoCarteira )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idTipoCarteira);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idTipoCarteira);
        }


    }
    EXEC SQL CLOSE ReadCarteira;

    ULOG_END("proCCarregaCarteira()");
}

void proCCarregaProcedencia( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaProcedencia()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idProcedencia;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadProcedencia CURSOR FOR 
        SELECT 
            idProcedencia 
        FROM 
            Contatoadm.PerfilProcedencia 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;


    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadProcedencia;
    for( ;; )
    {
        EXEC SQL FETCH ReadProcedencia INTO :idProcedencia;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idProcedencia )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idProcedencia);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idProcedencia);
        }


    }
    EXEC SQL CLOSE ReadProcedencia;

    ULOG_END("proCCarregaProcedencia()");
}

void proCCarregaNatureza( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaNatureza()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTipoPessoa;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadNatureza CURSOR FOR 
        SELECT 
            idTipoPessoa 
        FROM 
            Contatoadm.PerfilNatureza 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

  
    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadNatureza;
    for( ;; )
    {
        EXEC SQL FETCH ReadNatureza INTO :idTipoPessoa;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idTipoPessoa )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idTipoPessoa);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idTipoPessoa);
        }


    }
    EXEC SQL CLOSE ReadNatureza;

    ULOG_END("proCCarregaNatureza()");
}

void proCCarregaTipoCliente( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaTipoCliente()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idTipoRelacionamento;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadTipoCliente CURSOR FOR 
        SELECT 
            idTipoRelacionamento 
        FROM 
            Contatoadm.PerfilTipoCliente 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadTipoCliente;
    for( ;; )
    {
        EXEC SQL FETCH ReadTipoCliente INTO :idTipoRelacionamento;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idTipoRelacionamento )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idTipoRelacionamento);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idTipoRelacionamento);
        }


    }
    EXEC SQL CLOSE ReadTipoCliente;

    ULOG_END("proCCarregaTipoCliente()");
}

void proCCarregaGrupo( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaGrupo()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idGrupo;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadGrupo CURSOR FOR 
        SELECT 
            idGrupo 
        FROM 
            Contatoadm.PerfilGrupoAbertura 
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadGrupo;
    for( ;; )
    {
        EXEC SQL FETCH ReadGrupo INTO :idGrupo;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idGrupo )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idGrupo);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idGrupo);
        }


    }
    EXEC SQL CLOSE ReadGrupo;

    ULOG_END("proCCarregaGrupo()");
}

void proCCarregaCanal( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaCanal()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idCanal;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadCanal CURSOR FOR 
        SELECT 
            idCanal 
        FROM 
            Contatoadm.PerfilCanal
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadCanal;
    for( ;; )
    {
        EXEC SQL FETCH ReadCanal INTO :idCanal;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idCanal )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idCanal);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idCanal);
        }


    }
    EXEC SQL CLOSE ReadCanal;

    ULOG_END("proCCarregaCanal()");

}

void proCCarregaRegional( const unsigned long idPerfilPrm, VEC_VARIAVEL * pDados )
{
    ULOG_START("proCCarregaRegional()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long idPerfil = idPerfilPrm;
        unsigned long idUFOperadora;

	EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadRegional CURSOR FOR 
        SELECT 
            idUFOperadora 
        FROM 
            Contatoadm.PerfilUFOperadora
        WHERE 
		    DTEXCLUSAO IS NULL
		AND
            idPerfil = :idPerfil;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    bool primeiro = true;
    bool encontrou = false;
    int i;

    EXEC SQL OPEN ReadRegional;
    for( ;; )
    {
        EXEC SQL FETCH ReadRegional INTO :idUFOperadora;

        if ( primeiro != true )  // Jah existe elemento
        {
            encontrou = false;
            for ( i=0;i < pDados->size(); i++ )
            {
               if( pDados->at(i) != idUFOperadora )
                  continue;
               else
               {
                  encontrou = true;
                  break;
               }
            }
            if ( encontrou == false )
                pDados->push_back(idUFOperadora);
        }
        else
        {
            primeiro = false;  // Nao existe nenhum elemento
            pDados->push_back(idUFOperadora);
        }


    }
    EXEC SQL CLOSE ReadRegional;

    ULOG_END("proCCarregaRegional()");
}

bool proCHabilitaDesabilitaPerfil(unsigned long idPerfil,unsigned long idUser,unsigned int  iStatus)
{
    ULOG_START("proCHabilitaDesabilitaPerfil()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        const unsigned long idPerfilAux = idPerfil;
        const unsigned long idUsuario = idUser;
        unsigned int iStatusAux = iStatus;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        UPDATE 
            CONTATOADM.PERFIL 
        SET 
            INATIVO = :iStatusAux,
            IDUSUARIOALTERACAO = :idUsuario,
            DTULTIMAALTERACAO = SYSDATE 
        WHERE 
            IDPERFIL = :idPerfilAux;
    
    ULOG_END("proCHabilitaDesabilitaPerfil()");

    return 0;

}

bool proCVerificaPerfilRelacionado(unsigned long idPerfil)
{
    ULOG_START("proCVerificaPerfilRelacionado()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        unsigned long idPerfilAux = idPerfil;
        int iRetorno;
	EXEC SQL END DECLARE SECTION;
   
    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
	        COUNT(1)
        INTO
            :iRetorno
	    FROM 
	        CONTATOADM.GRUPOPERFIL GRUPOPERFIL,
		    CONTATOADM.CONTATOPERFIL CONTATOPERFIL
	    WHERE
	        GRUPOPERFIL.IDPERFIL =  :idPerfilAux
	    AND
		    GRUPOPERFIL.IDGRUPOPERFIL = CONTATOPERFIL.IDGRUPOPERFIL
	    AND 
		    CONTATOPERFIL.DTEXCLUSAO IS NULL
	    AND
	        ROWNUM < 2;

    ULOG_END("proCVerificaPerfilRelacionado()");

    return iRetorno == 0 ? false : true;
}

bool proCVerificaPerfilHabilitado( unsigned long idPerfil )
{
    ULOG_START("proCVerificaPerfilHabilitado()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        const unsigned long idPerfilAux = idPerfil;
        int iRetorno = 0;
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            INATIVO
        INTO 
            :iRetorno
        FROM 
            CONTATOADM.PERFIL
        WHERE 
            IDPERFIL = :idPerfilAux;      
      
    ULOG_END("proCVerificaPerfilHabilitado()");

    return iRetorno == 1 ? true : false;
}


bool proCVerificaVariaveis( unsigned long idPerfil )
{
    ULOG_START("proCVerificaVariaveis()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        const unsigned long idPerfilAux = idPerfil;
        int iRetorno = 0;
	EXEC SQL END DECLARE SECTION;

    
    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	SELECT 
	    COUNT(1) 
	INTO
		:iRetorno
	FROM 
	    CONTATOADM.PERFILCANAL
	WHERE
	    IDPERFIL =  :idPerfilAux
	AND
		DTEXCLUSAO IS NULL
	AND
	    ROWNUM < 2;
	    
	if( !iRetorno )
	{
	    EXEC SQL
		SELECT 
		    COUNT(1) 
		INTO
			:iRetorno
		FROM 
		    CONTATOADM.PERFILCARTEIRA
		WHERE
		    IDPERFIL =  :idPerfilAux
		AND
			DTEXCLUSAO IS NULL
		AND
		    ROWNUM < 2;
	} 
	else
	{
		if( !iRetorno )
		{
		    EXEC SQL
			SELECT 
			    COUNT(1) 
			INTO
				:iRetorno
			FROM 
			    CONTATOADM.PERFILGRUPOABERTURA
			WHERE
			    IDPERFIL =  :idPerfilAux
			AND
				DTEXCLUSAO IS NULL
			AND
			    ROWNUM < 2;
		} 
		else
		{
			if( !iRetorno )
			{
			    EXEC SQL
				SELECT 
				    COUNT(1) 
				INTO
					:iRetorno
				FROM 
				    CONTATOADM.PERFILNATUREZA
				WHERE
				    IDPERFIL =  :idPerfilAux
				AND
					DTEXCLUSAO IS NULL
				AND
				    ROWNUM < 2;
			} 
			else
			{
				if( !iRetorno )
				{
				    EXEC SQL
					SELECT 
					    COUNT(1) 
					INTO
						:iRetorno
					FROM 
					    CONTATOADM.PERFILPROCEDENCIA
					WHERE
					    IDPERFIL =  :idPerfilAux
					AND
						DTEXCLUSAO IS NULL
					AND
					    ROWNUM < 2;
				} 
				else
				{
					if( !iRetorno )
					{
					    EXEC SQL
						SELECT 
						    COUNT(1) 
						INTO
							:iRetorno
						FROM 
						    CONTATOADM.PERFILSEGMENTACAO
						WHERE
						    IDPERFIL =  :idPerfilAux
						AND
							DTEXCLUSAO IS NULL
						AND
						    ROWNUM < 2;
					} 
					else
					{
						if( !iRetorno )
						{
						    EXEC SQL
							SELECT 
							    COUNT(1) 
							INTO
								:iRetorno
							FROM 
							    CONTATOADM.PERFILTIPOCLIENTE
							WHERE
							    IDPERFIL =  :idPerfilAux
							AND
								DTEXCLUSAO IS NULL
							AND
							    ROWNUM < 2;
						} 
						else
						{
							if( !iRetorno )
							{
							    EXEC SQL
								SELECT 
								    COUNT(1) 
								INTO
									:iRetorno
								FROM 
								    CONTATOADM.PERFILTIPOLINHA
								WHERE
								    IDPERFIL =  :idPerfilAux
								AND
									DTEXCLUSAO IS NULL
								AND
								    ROWNUM < 2;
							} 
							else
							{
								if( !iRetorno )
								{
								    EXEC SQL
									SELECT 
									    COUNT(1) 
									INTO
										:iRetorno
									FROM 
									    CONTATOADM.PERFILUFOPERADORA
									WHERE
									    IDPERFIL =  :idPerfilAux
									AND
										DTEXCLUSAO IS NULL
									AND
									    ROWNUM < 2;
								} 
							}
						}
					}
				}
			}
		}
	}
    
    ULOG_END("proCVerificaVariaveis()");

	return iRetorno == 1 ? true : false;

}

void SqlError( sqlca * sqlca )
{
	throw new 
        TuxBasicOraException(
            sqlca->sqlcode,
            sqlca->sqlerrm.sqlerrmc,
            sqlca->sqlerrm.sqlerrml
            );
}
