#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>

#include "../../../commons/queryMacro.h"

void sql_error_WFAgrupamentoEstadoAtividade(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAgrupEstadoAtividade.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAgrupamentoEstadoAtividade(st_AgrupamentoEstadoAtividade* dados, st_vlAgrupamentoEstadoAtividade* status, XMLGen* saida)
{
   ULOG_START("proCIncluirWFAgrupamentoEstadoAtividade()");
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AgrupamentoEstadoAtividade   oDados;
		struct st_vlAgrupamentoEstadoAtividade oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAgrupamentoEstadoAtividade(&sqlca);

	EXEC SQL SELECT workflow.AgrupamentoEstadoAtividadeSQ.NEXTVAL INTO :oDados.idAgrupamentoEstadoAtividade FROM DUAL;

	EXEC SQL 
		INSERT INTO
			workflow.AgrupamentoEstadoAtividade
			(
				idAgrupamentoEstadoAtividade,
				idAtividade,
				idAgrupamentoEstado
			)
			VALUES
			(
				:oDados.idAgrupamentoEstadoAtividade,
				:oDados.idAtividade,
				:oDados.idAgrupamentoEstado
			);

	saida->createTag("Registro");
		saida->addItem("idAgrupamentoEstadoAtividade", oDados.idAgrupamentoEstadoAtividade);
	saida->closeTag();
	
   ULOG_END("proCIncluirWFAgrupamentoEstadoAtividade()");
   
	return true;
}

bool proCAlterarWFAgrupamentoEstadoAtividade(st_AgrupamentoEstadoAtividade* dados, st_vlAgrupamentoEstadoAtividade* status, XMLGen* saida)
{
   ULOG_START("proCAlterarWFAgrupamentoEstadoAtividade()");
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AgrupamentoEstadoAtividade   oDados;
		struct st_vlAgrupamentoEstadoAtividade oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAgrupamentoEstadoAtividade(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE workflow.AgrupamentoEstadoAtividade SET ");

	bool separa = false;

	if (status->idAgrupamentoEstadoAtividade != -1) 
		montaUpdate("idAgrupamentoEstadoAtividade", oDados.idAgrupamentoEstadoAtividade, 1);

	if (status->idAtividade != -1) 
		montaUpdate("idAtividade", oDados.idAtividade, 1);

	if (status->idAgrupamentoEstado != -1) 
		montaUpdate("idAgrupamentoEstado", oDados.idAgrupamentoEstado, 1);

	sprintf(query, "%s WHERE idAgrupamentoEstadoAtividade = %i", query, dados->idAgrupamentoEstadoAtividade);

	EXEC SQL EXECUTE IMMEDIATE :query;

   ULOG_END("proCAlterarWFAgrupamentoEstadoAtividade()");
	return true;
}

bool proCExcluirWFAgrupamentoEstadoAtividade(st_AgrupamentoEstadoAtividade* dados, st_vlAgrupamentoEstadoAtividade* status, XMLGen* saida)
{
   ULOG_START("proCExcluirWFAgrupamentoEstadoAtividade()");
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idAgrupamentoEstadoAtividade = dados->idAgrupamentoEstadoAtividade;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAgrupamentoEstadoAtividade(&sqlca);

	EXEC SQL 
		DELETE
			workflow.AgrupamentoEstadoAtividade
		WHERE
			idAgrupamentoEstadoAtividade = :idAgrupamentoEstadoAtividade;
			
   ULOG_END("proCExcluirWFAgrupamentoEstadoAtividade()");
   
	return true;
}

bool proCConsultaWFAgrupamentoEstadoAtividade(st_AgrupamentoEstadoAtividade* dados, st_vlAgrupamentoEstadoAtividade* status, char* order, XMLGen* saida)
{
   ULOG_START("proCConsultaWFAgrupamentoEstadoAtividade()");
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idAgrupamentoEstadoAtividade;
		int idAtividade;
		int idAgrupamentoEstado;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	strcpy(query,"SELECT idAgrupamentoEstadoAtividade, idAtividade, idAgrupamentoEstado "
                   "FROM workflow.AgrupamentoEstadoAtividade ");

	bool separa = false;

	if (status->idAgrupamentoEstadoAtividade != -1) 
		montaWhere("idAgrupamentoEstadoAtividade", dados->idAgrupamentoEstadoAtividade, 1);

	if (status->idAtividade != -1) 
		montaWhere("idAtividade", dados->idAtividade, 1);

	if (status->idAgrupamentoEstado != -1)
		montaWhere("idAgrupamentoEstado", dados->idAgrupamentoEstado, 1);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAgrupamentoEstadoAtividade(&sqlca);

	EXEC SQL PREPARE consultaAgrupamentoEstadoAtividade FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAgrupamentoEstadoAtividade;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idAgrupamentoEstadoAtividade, :idAtividade, :idAgrupamentoEstado;

		saida->createTag("WFAgrupamentoEstadoAtividadeVO");
			saida->addItem("idAgrupamentoEstadoAtividade", idAgrupamentoEstadoAtividade);
			saida->addItem("idAtividade", idAtividade);
			saida->addItem("idAgrupamentoEstado", idAgrupamentoEstado);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;
	
	ULOG_END("proCConsultaWFAgrupamentoEstadoAtividade()");

	return true;

}

void sql_error_WFAgrupamentoEstadoAtividade(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
