/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  
 * @version $Revision: 1.1.2.3.6.2 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:36:43 $
 **/


#include "../include/cMigracaoACS.h"

bool cMigracaoACSPC::ConsultaWFMigracaoAcsPC( st_VariaveisMigracaoACS *_dadosEntradaPC, Collection *_ResultadoPC )
{
    ULOG_START("cMigracaoACSPC::ConsultaWFMigracaoAcsPC()");

    struct sqlca sqlca;
    char *fixQuery = 
            "SELECT idAtendimento,idSistemaOrigem,nmUsuarioGrupoBKO,nmUsuarioBKO,"
                   "inProcessoTecnico,obsAtendimento,nmClienteUsuario,inClienteVIVO,"
                   "nmTipoCliente,nmCPF_CNPJ,nmContato,nmTelefoneContato,nmEmailContato,"
                   "nmTipoCarteira,nmSegmentacao,idLinhaTelefonica,nrLinha,nmTipoServico,"
                   "nmProcesso,TO_CHAR(dtTratamentoBKO,'dd/mm/yyyy hh24:mi'),"
                   "TO_CHAR(dtAtualizacao,'dd/mm/yyyy hh24:mi'),"
                   "TO_CHAR(dtImportacao,'dd/mm/yyyy hh24:mi'),obsHistorico,"
                   "idPessoaDePara,idProcesso,idTipoAtendimentoMigracao,idAndamento,"
                   "idAtividade,idContatoFolhaBaixa,"
                   "TO_CHAR(dtAndamento,'dd/mm/yyyy hh24:mi'),nmUsuarioGrupo,nmUsuario,"
                   "idTipoAtendimento,dsTipoAtendimento,idComentario,"
                   "nmUsuarioGrupoMigracao,nmLoginUsuario,"
                   "TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'),Observacao "
            "FROM "
                "Atendimento.MigracaoACSV01 WHERE idAtendimento = ";

    st_VariaveisMigracaoACS * pResult;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        int idSistemaOrigem;
        VARCHAR idProcesso[21];
        VARCHAR nmUsuarioGrupoBKO[256];
        VARCHAR nmUsuarioBKO[256];
        int inProcessoTecnico;
        VARCHAR obsAtendimento[256];
        VARCHAR nmClienteUsuario[256];
        int inClienteVIVO;
        VARCHAR nmTipoCliente[256];
        VARCHAR nmCPF_CNPJ[256];
        VARCHAR nmContato[256];
        VARCHAR nmTelefoneContato[256];
        VARCHAR nmEmailContato[256];
        VARCHAR nmTipoCarteira[256];
        VARCHAR nmSegmentacao[256];
        int idLinhaTelefonica;
        int nrLinha;
        VARCHAR nmTipoServico[256];
        VARCHAR nmProcesso[256];
        VARCHAR dtTratamentoBKO[20];
        VARCHAR dtAtualizacao[20];
        VARCHAR dtImportacao[20];
        VARCHAR obsHistorico[4001];
        int idPessoaDePara;
        int idTipoAtendimento;
        long idAndamento;
        int idAtividade;
        int idContatoFolhaBaixa;
        VARCHAR dtAndamento[20];
        VARCHAR nmUsuarioGrupo[256];
        VARCHAR nmUsuario[256];
        VARCHAR dsTipoAtendimento[256];
        int idComentario;
        VARCHAR nmUsuarioGrupoMigracao[256];
        VARCHAR nmLoginUsuario[256];
        VARCHAR dtAbertura[20];
        VARCHAR Observacao[4001];
        int idTipoAtendimentoMigracao;

        short   i_nmUsuarioGrupoBKO;
        short   i_nmUsuarioBKO;
        short   i_obsAtendimento;
        short   i_nmClienteUsuario;
        short   i_nmTipoCliente;
        short   i_nmCPF_CNPJ;
        short   i_nmContato;
        short   i_nmTelefoneContato;
        short   i_nmEmailContato;
        short   i_nmTipoCarteira;
        short   i_nmSegmentacao;
        short   i_nmTipoServico;
        short   i_nmProcesso;
        short   i_dtTratamentoBKO;
        short   i_dtImportacao;
        short   i_obsHistorico;
        short   i_dtAndamento;
        short   i_nmUsuarioGrupo;
        short   i_nmUsuario;
        short   i_dsTipoAtendimento;
        short   i_nmUsuarioGrupoMigracao;
        short   i_nmLoginUsuario;
        short   i_dtAbertura;
        short   i_Observacao;
        short   i_dtAtualizacao;
        short   i_idProcesso;
        short   i_inProcessoTecnico;
        short   i_idContatoFolhaBaixa;
        short   i_idComentario;

        char query[1024];

    EXEC SQL END DECLARE SECTION;

    sprintf(query,"%s%s",fixQuery,_dadosEntradaPC->idAtendimento );
   
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFMigracaoAcs(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE consultaMigracaoAcs FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaMigracaoAcs;

    EXEC SQL OPEN consulta;

	for ( ;; )
	{
		EXEC SQL FETCH consulta INTO 
                                 :idAtendimento,
                                 :idSistemaOrigem,
                                 :nmUsuarioGrupoBKO:i_nmUsuarioGrupoBKO,
                                 :nmUsuarioBKO:i_nmUsuarioBKO,
                                 :inProcessoTecnico:i_inProcessoTecnico,
                                 :obsAtendimento:i_obsAtendimento,
                                 :nmClienteUsuario:i_nmClienteUsuario,
                                 :inClienteVIVO,
                                 :nmTipoCliente:i_nmTipoCliente,
                                 :nmCPF_CNPJ:i_nmCPF_CNPJ,
                                 :nmContato:i_nmContato,
                                 :nmTelefoneContato:i_nmTelefoneContato,
                                 :nmEmailContato:i_nmEmailContato,
                                 :nmTipoCarteira:i_nmTipoCarteira,
                                 :nmSegmentacao:i_nmSegmentacao,
                                 :idLinhaTelefonica,
                                 :nrLinha,
                                 :nmTipoServico:i_nmTipoServico,
                                 :nmProcesso:i_nmProcesso,
                                 :dtTratamentoBKO:i_dtTratamentoBKO,
                                 :dtAtualizacao:i_dtAtualizacao,
                                 :dtImportacao:i_dtImportacao,
                                 :obsHistorico:i_obsHistorico,
                                 :idPessoaDePara,
                                 :idProcesso:i_idProcesso,
                                 :idTipoAtendimentoMigracao,
                                 :idAndamento,
                                 :idAtividade,
                                 :idContatoFolhaBaixa:i_idContatoFolhaBaixa,
                                 :dtAndamento:i_dtAndamento,
                                 :nmUsuarioGrupo:i_nmUsuarioGrupo,
                                 :nmUsuario:i_nmUsuario,
                                 :idTipoAtendimento,
                                 :dsTipoAtendimento:i_dsTipoAtendimento,
                                 :idComentario:i_idComentario,
                                 :nmUsuarioGrupoMigracao:i_nmUsuarioGrupoMigracao,
                                 :nmLoginUsuario:i_nmLoginUsuario,
                                 :dtAbertura:i_dtAbertura,
                                 :Observacao:i_Observacao;

      if ( i_inProcessoTecnico == -1 )
         inProcessoTecnico = 0;
         
      if ( i_idContatoFolhaBaixa == -1 )
         idContatoFolhaBaixa = 0;
         
      if ( i_idComentario == -1 )
         idComentario = 0;
         
		CONVIND(nmUsuarioGrupoBKO,i_nmUsuarioGrupoBKO);
      CONVIND(nmUsuarioBKO,i_nmUsuarioBKO);
      CONVIND(obsAtendimento,i_obsAtendimento);
		CONVIND(nmClienteUsuario,i_nmClienteUsuario);
		CONVIND(nmTipoCliente,i_nmTipoCliente);
		CONVIND(nmCPF_CNPJ,i_nmCPF_CNPJ);
		CONVIND(nmContato,i_nmContato);
		CONVIND(nmTelefoneContato,i_nmTelefoneContato);
		CONVIND(nmEmailContato,i_nmEmailContato);
		CONVIND(nmTipoCarteira,i_nmTipoCarteira);
		CONVIND(nmSegmentacao,i_nmSegmentacao);
		CONVIND(dtAbertura,i_dtAbertura);

		CONVIND(nmTipoServico,i_nmTipoServico);
		CONVIND(nmProcesso,i_nmProcesso);
		CONVIND(nmUsuarioGrupo,i_nmUsuarioGrupo);
		CONVIND(nmUsuario,i_nmUsuario);
		CONVIND(nmUsuarioGrupoMigracao,i_nmUsuarioGrupoMigracao);
		CONVIND(nmLoginUsuario,i_nmLoginUsuario);
		CONVIND(Observacao,i_Observacao);
		CONVIND(dtAtualizacao,i_dtAtualizacao);
		CONVIND(idProcesso,i_idProcesso);
		CONVIND(dtTratamentoBKO,i_dtTratamentoBKO);
		CONVIND(dtImportacao,i_dtImportacao);
      CONVIND(obsHistorico,i_obsHistorico);
      CONVIND(dtAndamento,i_dtAndamento);
      CONVIND(dsTipoAtendimento,i_dsTipoAtendimento);

      pResult = new st_VariaveisMigracaoACS;
      if ( pResult )
      {

         ULOG("idAtendimento     = '%d'",idAtendimento);
         ULOG("idSistemaOrigem   = '%d'",idSistemaOrigem);
         ULOG("nmUsuarioGrupoBKO = '%s'",(char*)nmUsuarioGrupoBKO.arr);
         ULOG("inProcessoTecnico = '%d'",inProcessoTecnico);
         ULOG("obsAtendimento    = '%s'",(char*)obsAtendimento.arr);
         ULOG("nmClienteUsuario  = '%s'",(char*)nmClienteUsuario.arr);

         sprintf( pResult->idAtendimento,"%ld",idAtendimento );
         sprintf( pResult->idSistemaOrigem,"%d",idSistemaOrigem );
         strcpy( pResult->nmUsuarioGrupoBKO,(char*)nmUsuarioGrupoBKO.arr );
         strcpy( pResult->nmUsuarioBKO,(char*)nmUsuarioBKO.arr );
         sprintf( pResult->inProcessoTecnico,"%d",inProcessoTecnico );
         strcpy( pResult->obsAtendimento,(char*)obsAtendimento.arr );
         strcpy( pResult->nmClienteUsuario,(char*)nmClienteUsuario.arr );
         sprintf( pResult->inClienteVIVO,"%d",inClienteVIVO );
         strcpy( pResult->nmTipoCliente,(char*)nmTipoCliente.arr );
         strcpy( pResult->nmCPF_CNPJ,(char*)nmCPF_CNPJ.arr );
         strcpy( pResult->nmContato,(char*)nmContato.arr );
         strcpy( pResult->nmTelefoneContato,(char *)nmTelefoneContato.arr );
         strcpy( pResult->nmEmailContato,(char*)nmEmailContato.arr );
         strcpy( pResult->nmTipoCarteira,(char*)nmTipoCarteira.arr );
         strcpy( pResult->nmSegmentacao,(char *)nmSegmentacao.arr );
         sprintf( pResult->idLinhaTelefonica,"%d",idLinhaTelefonica );
         sprintf( pResult->nrLinha,"%d",nrLinha );
         strcpy( pResult->nmTipoServico,(char*)nmTipoServico.arr );
         strcpy( pResult->nmProcesso,(char*)nmProcesso.arr );
         strcpy( pResult->dtTratamentoBKO,(char*)dtTratamentoBKO.arr );
         strcpy( pResult->dtAtualizacao,(char*)dtAtualizacao.arr );
         strcpy( pResult->dtImportacao,(char*)dtImportacao.arr );
         strcpy( pResult->obsHistorico,(char*)obsHistorico.arr );
         sprintf( pResult->idPessoaDePara,"%d",idPessoaDePara );
         strcpy( pResult->idProcesso,(char*)idProcesso.arr );
         sprintf( pResult->idTipoAtendimentoMigracao,"%d",idTipoAtendimentoMigracao );
         sprintf( pResult->idAndamento,"%ld",idAndamento );
         sprintf( pResult->idAtividade,"%d",idAtividade );
         sprintf( pResult->idContatoFolhaBaixa,"%d",idContatoFolhaBaixa );
         strcpy( pResult->dtAndamento,(char*)dtAndamento.arr );
         strcpy( pResult->nmUsuarioGrupo,(char*)nmUsuarioGrupo.arr );
         strcpy( pResult->nmUsuario,(char*)nmUsuario.arr );
         sprintf( pResult->idTipoAtendimento,"%d",idTipoAtendimento );
         strcpy( pResult->dsTipoAtendimento,(char*)dsTipoAtendimento.arr );
         sprintf( pResult->idComentario,"%d",idComentario );
         strcpy( pResult->nmUsuarioGrupoMigracao,(char*)nmUsuarioGrupoMigracao.arr );
         strcpy( pResult->nmLoginUsuario,(char*)nmLoginUsuario.arr );
         strcpy( pResult->dtAbertura,(char*)dtAbertura.arr );
         strcpy( pResult->Observacao,(char*)Observacao.arr );

         _ResultadoPC->AddItem( (void*) pResult );
      }
      else
      {
        ULOGE("Nao Consegue Alocar Memoria para os Dados.");
      }
	}

	EXEC SQL CLOSE consulta;

	return true;


   ULOG_END("cMigracaoACSPC::ConsultaWFMigracaoAcsPC()");

}


void cMigracaoACSPC::sql_error_WFMigracaoAcs( sqlca * sqlca )
{
    ULOG("Ocorreu um erro na consulta de migracao ACS.");
    
    ULOGE("sql_error_WFAtdInBoxAdq:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
