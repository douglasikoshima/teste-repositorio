/**
 * @author  Renato Teixeira
 * @version $Revision: 1.1.2.1.6.2 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:36:49 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoContatoComunic.h"
#include "../include/stWFAtendimentoContatoComunic.h"

void sql_error_WFAtendimentoContatoComunic(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoContatoComunic.h"
    EXEC SQL END DECLARE SECTION;

long proCIncluirWFAtendimentoContatoComunic(st_AtendimentoContatoComunic* dados, st_vlAtendimentoContatoComunic* status,XMLDPR *xmlDpr)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoContatoComunic   oDados;
		struct st_vlAtendimentoContatoComunic oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);

	EXEC SQL SELECT atendimento.AtendimentoContatoComunicSQ.NEXTVAL INTO :oDados.idAtendimentoContatoComunic FROM DUAL;

	EXEC SQL 
		INSERT INTO
			atendimento.AtendimentoContatoComunic
			(
				idAtendimentoContatoComunic,
				idAtendimento,
				dsComunicacao,
				nrOrdemUtilizacao,
				idTipoComunicacao,
				idUsuarioAlteracao,
				dtUltimaAlteracao
			)
			VALUES
			(
				:oDados.idAtendimentoContatoComunic,
				:oDados.idAtendimento,
				:oDados.dsComunicacao,
				:oDados.nrOrdemUtilizacao,
				:oDados.idTipoComunicacao,
				DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
			);

    // ==> SM324--DPR--DEZ/2006--Cassio
    if ( xmlDpr )
    {
        AtendimentoContatoComunicDPR atendimentocontatocomunicdpr;

        atendimentocontatocomunicdpr.setIdAtendimentoContatoComunic(oDados.idAtendimentoContatoComunic);
        atendimentocontatocomunicdpr.setIdAtendimento(oDados.idAtendimento);
        atendimentocontatocomunicdpr.setIdTipoComunicacao(oDados.idTipoComunicacao);
        atendimentocontatocomunicdpr.setDsComunicacao(oDados.dsComunicacao);
        atendimentocontatocomunicdpr.setNrOrdemutilizacao(oDados.nrOrdemUtilizacao);
        atendimentocontatocomunicdpr.setOpCode(OPCODE_INSERT);
        xmlDpr->atendimentocontatocomunicvo.inserir(&atendimentocontatocomunicdpr);
    }
    // <== SM324--DPR--DEZ/2006--Cassio

	return oDados.idAtendimentoContatoComunic;
}

bool proCAlterarWFAtendimentoContatoComunic(st_AtendimentoContatoComunic* dados, st_vlAtendimentoContatoComunic* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoContatoComunic   oDados;
		struct st_vlAtendimentoContatoComunic oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoContatoComunic SET ");

	bool separa = false;

	if (status->idAtendimento != -1) 
		montaUpdate("idAtendimento", oDados.idAtendimento, 1);

	if (status->dsComunicacao != -1)
		montaUpdate("dsComunicacao", oDados.dsComunicacao, 2);

	if (status->nrOrdemUtilizacao != -1) 
		montaUpdate("nrOrdemUtilizacao", oDados.nrOrdemUtilizacao, 1);

	if (status->idTipoComunicacao != -1) 
		montaUpdate("idTipoComunicacao", oDados.idTipoComunicacao, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

	sprintf(query, "%s WHERE idAtendimentoContatoComunic = %ld", query, dados->idAtendimentoContatoComunic);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoContatoComunic(st_AtendimentoContatoComunic* dados, st_vlAtendimentoContatoComunic* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoContatoComunic = dados->idAtendimentoContatoComunic;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoContatoComunic
		WHERE
			idAtendimentoContatoComunic = :idAtendimentoContatoComunic;

	return true;
}

bool proCConsultaWFAtendimentoContatoComunic(st_AtendimentoContatoComunic* dados, st_vlAtendimentoContatoComunic* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoContatoComunic;
		long idAtendimento;
		VARCHAR dsComunicacao[256];
		int nrOrdemUtilizacao;
		int idTipoComunicacao;
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short i_idUsuarioAlteracao;
		short i_dtUltimaAlteracao;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idAtendimentoContatoComunic, idAtendimento, TO_CHAR(dsComunicacao), nrOrdemUtilizacao, idTipoComunicacao, idUsuarioAlteracao, TO_CHAR(dtUltimaAlteracao, 'DD/MM/YYYY HH24:MI') AS dtUltimaAlteracao FROM atendimento.AtendimentoContatoComunic ");

	bool separa = false;

	if (status->idAtendimentoContatoComunic != -1) 
		montaWhere("idAtendimentoContatoComunic", dados->idAtendimentoContatoComunic, 1);

	if (status->idAtendimento != -1) 
		montaWhere("idAtendimento", dados->idAtendimento, 1);

	if (status->dsComunicacao != -1) 
		montaWhere("dsComunicacao", dados->dsComunicacao, 2);

	if (status->nrOrdemUtilizacao != -1)
		montaWhere("nrOrdemUtilizacao", dados->nrOrdemUtilizacao, 1);

	if (status->idTipoComunicacao != -1)
		montaWhere("idTipoComunicacao", dados->idTipoComunicacao, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoContatoComunic FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoContatoComunic;

	EXEC SQL OPEN consulta;

    int nRegs = 0;

	while (true)
	{
        i_dtUltimaAlteracao = -1;

		EXEC SQL FETCH consulta INTO 
									:idAtendimentoContatoComunic, 
									:idAtendimento, 
									:dsComunicacao, 
									:nrOrdemUtilizacao, 
									:idTipoComunicacao,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONV(dsComunicacao);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoContatoComunicVO");
			saida->addItem("idAtendimentoContatoComunic", idAtendimentoContatoComunic);
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("dsComunicacao", (char *)dsComunicacao.arr);
			saida->addItem("nrOrdemUtilizacao", nrOrdemUtilizacao);
			saida->addItem("idTipoComunicacao", idTipoComunicacao);
			saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();

        nRegs++;
	}

	EXEC SQL CLOSE consulta;

    if ( nRegs == 0 )
    {
		saida->createTag("WFAtendimentoContatoComunicVO");
		saida->closeTag();
    }

	return true;

}

bool proCObtemWFAtendimentoContatoComunic(long sIdAtendimento, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoContatoComunic;
		long idAtendimento = sIdAtendimento;
		VARCHAR dsComunicacao[256];
		int nrOrdemUtilizacao;
		int idTipoComunicacao;
		VARCHAR dsTipoComunicacao[256];
		VARCHAR dsAuxiliar[300];
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short i_idAtendimentoContatoComunic;
		short i_dsComunicacao;
		short i_nrOrdemUtilizacao;
		short i_idTipoComunicacao;
		short i_dsTipoComunicacao;
		short i_dsAuxiliar;
		short i_idUsuarioAlteracao;
		short i_dtUltimaAlteracao;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

/* @Marcelo Retirar B01
	EXEC SQL DECLARE consultaAtdComunic CURSOR FOR
	SELECT 
		idAtendimentoContatoComunic, 
		dsComunicacao, 
		nrOrdemUtilizacao, 
		idTipoComunicacao, 
		dsTipoComunicacao, 
		CONCAT(CONCAT(TO_CHAR(idTipoComunicacao),','), dsComunicacao),
		idUsuarioAlteracao, 
		TO_CHAR(dtUltimaAlteracao, 'DD/MM/YYYY HH24:MI') AS dtUltimaAlteracao
	FROM 
		atendimento.AtendimentoContatoComunicB01
	WHERE 
		IDATENDIMENTO = :idAtendimento
	ORDER BY 
		NRORDEMUTILIZACAO;
*/


	EXEC SQL DECLARE consultaAtdComunic CURSOR FOR
        SELECT
            ATENDIMENTOCONTATOCOMUNIC.IDATENDIMENTOCONTATOCOMUNIC,
            ATENDIMENTOCONTATOCOMUNIC.DSCOMUNICACAO,
            ATENDIMENTOCONTATOCOMUNIC.NRORDEMUTILIZACAO,
            TIPOCOMUNICACAO.IDTIPOCOMUNICACAO,
            TIPOCOMUNICACAO.DSTIPOCOMUNICACAO,
    		CONCAT(CONCAT(TO_CHAR(TIPOCOMUNICACAO.IDTIPOCOMUNICACAO),','), ATENDIMENTOCONTATOCOMUNIC.DSCOMUNICACAO ),
            TIPOCOMUNICACAO.IDUSUARIOALTERACAO,
            TO_CHAR(TIPOCOMUNICACAO.DTULTIMAALTERACAO, 'DD/MM/YYYY HH24:MI') AS dtUltimaAlteracao
        FROM 
            ATENDIMENTO.ATENDIMENTOCONTATO ATENDIMENTOCONTATO,
            APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO,
            ATENDIMENTO.ATENDIMENTOCONTATOCOMUNIC ATENDIMENTOCONTATOCOMUNIC
        WHERE 
            ATENDIMENTOCONTATOCOMUNIC.IDTIPOCOMUNICACAO = TIPOCOMUNICACAO.IDTIPOCOMUNICACAO
        AND 
            ATENDIMENTOCONTATOCOMUNIC.IDATENDIMENTO = ATENDIMENTOCONTATO.IDATENDIMENTO
        AND
		    ATENDIMENTOCONTATOCOMUNIC.IDATENDIMENTO = :idAtendimento
	    ORDER BY 
		    ATENDIMENTOCONTATOCOMUNIC.NRORDEMUTILIZACAO;


	EXEC SQL OPEN consultaAtdComunic;

    int nRegs = 0;

	while (true)
	{
        i_dsComunicacao = i_dsTipoComunicacao = i_dsAuxiliar = i_dtUltimaAlteracao = -1;

		EXEC SQL FETCH consultaAtdComunic INTO 
									:idAtendimentoContatoComunic:i_idAtendimentoContatoComunic, 
									:dsComunicacao:i_dsComunicacao, 
									:nrOrdemUtilizacao:i_nrOrdemUtilizacao, 
									:idTipoComunicacao:i_idTipoComunicacao,
									:dsTipoComunicacao:i_dsTipoComunicacao,
									:dsAuxiliar:i_dsAuxiliar,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONVIND(dsComunicacao, i_dsComunicacao);
		CONVIND(dsTipoComunicacao, i_dsTipoComunicacao);
		CONVIND(dsAuxiliar, i_dsAuxiliar);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoContatoComunicVO");
			saida->addItem("idAtendimentoContatoComunic", idAtendimentoContatoComunic);
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("dsComunicacao", (char *)dsComunicacao.arr);
			saida->addItem("nrOrdemUtilizacao", nrOrdemUtilizacao);
			saida->addItem("idTipoComunicacao", idTipoComunicacao);
			saida->addItem("dsTipoComunicacao", (char *)dsTipoComunicacao.arr);
			saida->addItem("dsAuxiliar", (char *)dsAuxiliar.arr);
			saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();

        nRegs++;
	}

	EXEC SQL CLOSE consultaAtdComunic;

    if ( nRegs == 0 )
    {
		saida->createTag("WFAtendimentoContatoComunicVO");
		saida->closeTag();
    }

	return true;

}



bool proCObtemWFAtendimentoContatoComunicEx(long sIdAtendimento, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoContatoComunic;
		long idAtendimento = sIdAtendimento;
		VARCHAR dsComunicacao[256];
		int nrOrdemUtilizacao;
		int idTipoComunicacao;
		VARCHAR dsTipoComunicacao[256];
		VARCHAR dsAuxiliar[300];
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short i_idAtendimentoContatoComunic;
		short i_dsComunicacao;
		short i_nrOrdemUtilizacao;
		short i_idTipoComunicacao;
		short i_dsTipoComunicacao;
		short i_dsAuxiliar;
		short i_idUsuarioAlteracao;
		short i_dtUltimaAlteracao;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContatoComunic(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;


	EXEC SQL DECLARE consultaAtdComunicEx CURSOR FOR
        SELECT
            ATENDIMENTOCONTATOCOMUNIC.IDATENDIMENTOCONTATOCOMUNIC,
            ATENDIMENTOCONTATOCOMUNIC.DSCOMUNICACAO,
            ATENDIMENTOCONTATOCOMUNIC.NRORDEMUTILIZACAO,
            TIPOCOMUNICACAO.IDTIPOCOMUNICACAO,
            TIPOCOMUNICACAO.DSTIPOCOMUNICACAO,
            CONCAT(CONCAT(TO_CHAR(TIPOCOMUNICACAO.IDTIPOCOMUNICACAO),','), ATENDIMENTOCONTATOCOMUNIC.DSCOMUNICACAO ),
            NULL AS IDUSUARIOALTERACAO,
            NULL AS DTULTIMAALTERACAO
        FROM 
            APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO,
            FOHIST_OW.ATENDIMENTOCONTATOCOMUNIC ATENDIMENTOCONTATOCOMUNIC
        WHERE 
            ATENDIMENTOCONTATOCOMUNIC.IDTIPOCOMUNICACAO = TIPOCOMUNICACAO.IDTIPOCOMUNICACAO
        AND
            ATENDIMENTOCONTATOCOMUNIC.IDATENDIMENTO = :idAtendimento
        ORDER BY 
            ATENDIMENTOCONTATOCOMUNIC.NRORDEMUTILIZACAO;

	EXEC SQL OPEN consultaAtdComunicEx;

    int nRegs = 0;

	while (true)
	{
        i_dsComunicacao = i_dsTipoComunicacao = i_dsAuxiliar = i_dtUltimaAlteracao = -1;

		EXEC SQL FETCH consultaAtdComunicEx INTO 
									:idAtendimentoContatoComunic:i_idAtendimentoContatoComunic, 
									:dsComunicacao:i_dsComunicacao, 
									:nrOrdemUtilizacao:i_nrOrdemUtilizacao, 
									:idTipoComunicacao:i_idTipoComunicacao,
									:dsTipoComunicacao:i_dsTipoComunicacao,
									:dsAuxiliar:i_dsAuxiliar,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONVIND(dsComunicacao, i_dsComunicacao);
		CONVIND(dsTipoComunicacao, i_dsTipoComunicacao);
		CONVIND(dsAuxiliar, i_dsAuxiliar);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoContatoComunicVO");
			saida->addItem("idAtendimentoContatoComunic", idAtendimentoContatoComunic);
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("dsComunicacao", (char *)dsComunicacao.arr);
			saida->addItem("nrOrdemUtilizacao", nrOrdemUtilizacao);
			saida->addItem("idTipoComunicacao", idTipoComunicacao);
			saida->addItem("dsTipoComunicacao", (char *)dsTipoComunicacao.arr);
			saida->addItem("dsAuxiliar", (char *)dsAuxiliar.arr);
			saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();

        nRegs++;
	}

	EXEC SQL CLOSE consultaAtdComunicEx;

    if ( nRegs == 0 )
    {
		saida->createTag("WFAtendimentoContatoComunicVO");
		saida->closeTag();
    }

	return true;

}



void sql_error_WFAtendimentoContatoComunic(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
