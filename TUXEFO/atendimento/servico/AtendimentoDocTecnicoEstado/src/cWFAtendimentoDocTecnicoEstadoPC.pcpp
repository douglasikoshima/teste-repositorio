#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"

#include <tuxfw.h>
#include "cWFAtendimentoDocTecnicoEstado.h"
#include "stWFAtendimentoDocTecnicoEstado.h"

void sql_error_WFAtendimentoDocTecnicoEstado(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "stWFAtendimentoDocTecnicoEstado.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoDocTecnicoEstado(st_AtendimentoDocTecnicoEstado* dados, st_vlAtendimentoDocTecnicoEstado* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoDocTecnicoEstado   oDados;
		struct st_vlAtendimentoDocTecnicoEstado oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoEstado(&sqlca);

	EXEC SQL SELECT Atendimento.DocumentoTecnicoEstadoSQ.NEXTVAL INTO :oDados.idDocumentoTecnicoEstado FROM DUAL;

	EXEC SQL 
		INSERT INTO
			Atendimento.DocumentoTecnicoEstado
			(
				idDocumentoTecnicoEstado,
                dsDocumentoTecnicoEstado,
                idUsuarioAlteracao,
                dtUltimaAlteracao    
			)                                
			VALUES                           
			(
				:oDados.idDocumentoTecnicoEstado,
				:oDados.dsDocumentoTecnicoEstado,
				:oDados.idUsuarioAlteracao,
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
			);

	saida->createTag("WFDocumentoTecnicoEstadoVO");
		saida->addItem("idDocumentoTecnicoEstado", oDados.idDocumentoTecnicoEstado);
	saida->closeTag();

	return true;
}

bool proCAlterarWFAtendimentoDocTecnicoEstado(st_AtendimentoDocTecnicoEstado* dados, st_vlAtendimentoDocTecnicoEstado* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoDocTecnicoEstado   oDados;
		struct st_vlAtendimentoDocTecnicoEstado oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoEstado(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE Atendimento.DocumentoTecnicoEstado SET ");

	bool separa = false;

	if (status->dsDocumentoTecnicoEstado != -1)
		montaUpdate("dsDocumentoTecnicoEstado", oDados.dsDocumentoTecnicoEstado,TIPO_CHAR);

	if (status->idUsuarioAlteracao != -1)
		montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao,TIPO_INT);

	if (status->dtUltimaAlteracao != -1)
		montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao,TIPO_DATAHORA);

	sprintf(query, "%s WHERE idDocumentoTecnicoEstado = %i", query, dados->idDocumentoTecnicoEstado);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoDocTecnicoEstado(st_AtendimentoDocTecnicoEstado* dados, st_vlAtendimentoDocTecnicoEstado* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnicoEstado = dados->idDocumentoTecnicoEstado;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoEstado(&sqlca);

	EXEC SQL 
		DELETE
			Atendimento.DocumentoTecnicoEstado
		WHERE
			idDocumentoTecnicoEstado = :idDocumentoTecnicoEstado;

	return true;
}

bool proCConsultaWFAtendimentoDocTecnicoEstado(st_AtendimentoDocTecnicoEstado* dados, st_vlAtendimentoDocTecnicoEstado* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnicoEstado;
		VARCHAR dsDocumentoTecnicoEstado[256];
		int idUsuarioAlteracao;
		VARCHAR dtUltimaAlteracao[256];

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idDocumentoTecnicoEstado, dsDocumentoTecnicoEstado, idUsuarioAlteracao, TO_CHAR( dtUltimaAlteracao, 'DD/MM/YYYY' ) FROM Atendimento.DocumentoTecnicoEstado ");

	bool separa = false;

	if (status->idDocumentoTecnicoEstado != -1) 
		montaWhere("idDocumentoTecnicoEstado", dados->idDocumentoTecnicoEstado, TIPO_INT);

	if (status->dsDocumentoTecnicoEstado != -1) 
		montaWhere("dsDocumentoTecnicoEstado", dados->dsDocumentoTecnicoEstado, TIPO_CHAR);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoEstado(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoDocTecnicoEstado FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoDocTecnicoEstado;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idDocumentoTecnicoEstado, :dsDocumentoTecnicoEstado;

      dsDocumentoTecnicoEstado.arr[dsDocumentoTecnicoEstado.len] = 0x0;
		saida->createTag("WFDocumentoTecnicoEstadoVO");
			saida->addItem("idDocumentoTecnicoEstado", idDocumentoTecnicoEstado);
			saida->addItem("dsDocumentoTecnicoEstado", (char *)dsDocumentoTecnicoEstado.arr);
		saida->closeTag();
      dsDocumentoTecnicoEstado.arr[0] = 0x0;
	}

	EXEC SQL CLOSE consulta;

	return true;

}

void sql_error_WFAtendimentoDocTecnicoEstado(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
