
/*---------------------------------------------------------
 * Modulo..: Atendimento
 * Servico.: Consulta Documentos Associados
 * Migracao: Script 105
 * Revisao.: Nov-23-2004 - Marcelo Nunes
 *--------------------------------------------------------*/

#include "../include/cWF_LstDocTecAssPC.h"

bool cWF_LstDocTecAss::consultaWFRespostaTeste( char* sIdAtendimentoTeste, XMLGen* saida )
{
    ULOG_START("cWF_LstDocTecAss::consultaWFRespostaTeste()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoTeste = atol(sIdAtendimentoTeste);

	VARCHAR idTeste[21];
	VARCHAR dsTeste[256];
	VARCHAR dsResposta[256];

	short i_idTeste;
	short i_dsTeste;
	short i_dsResposta;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WF_LstDocTecAss(&sqlca);

    EXEC SQL DECLARE consultaRespostaTestes CURSOR FOR 
       SELECT 
		a.dsresposta,
		a.idteste,
		b.dsteste 
	FROM 
		atendimento.testeresposta a,
		atendimento.teste b 
	WHERE a.idteste=b.idteste 
	    AND a.idatendimentoteste=:idAtendimentoTeste
	ORDER BY a.idatendimentoteste;

	EXEC SQL OPEN consultaRespostaTestes;

	for( ;; )
	{
		EXEC SQL FETCH consultaRespostaTestes INTO 
                                        :dsResposta:i_dsResposta,
                                        :idTeste:i_idTeste,
                                        :dsTeste:i_dsTeste;

		CONVIND(dsResposta, i_dsResposta);
		CONVIND(idTeste, i_idTeste);
		CONVIND(dsTeste, i_dsTeste);

		saida->createTag("AtendimentoWorkflowTesteVO");
			saida->addItem("idTeste", (char*)idTeste.arr);
			saida->addItem("dsTeste", (char*)dsTeste.arr);
			saida->addItem("dsResposta", (char*)dsResposta.arr);
		saida->closeTag();


	}

	EXEC SQL CLOSE consultaRespostaTestes;

    ULOG_END("cWF_LstDocTecAss::consultaWFRespostaTeste()");

	return true;
}

bool cWF_LstDocTecAss::consultaWFTestes( XMLGen* saida )
{
    ULOG_START("cWF_LstDocTecAss::consultaWFTestes()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

	VARCHAR idTeste[21];
	VARCHAR dsTeste[256];

	short i_idTeste;
	short i_dsTeste;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WF_LstDocTecAss(&sqlca);

    EXEC SQL DECLARE consultaTestes CURSOR FOR 
        SELECT 
		idteste,
		dsteste 
	FROM 
		atendimento.teste
	ORDER BY dsteste;

	EXEC SQL OPEN consultaTestes;

	for( ;; )
	{
		EXEC SQL FETCH consultaTestes INTO 
                                        :idTeste:i_idTeste,
                                        :dsTeste:i_dsTeste;

		CONVIND(idTeste, i_idTeste);
		CONVIND(dsTeste, i_dsTeste);

		saida->createTag("AtendimentoWorkflowTesteVO");
			saida->addItem("idTeste", (char*)idTeste.arr);
			saida->addItem("dsTeste", (char*)dsTeste.arr);
		saida->closeTag();


	}

	EXEC SQL CLOSE consultaTestes;

    ULOG_END("cWF_LstDocTecAss::consultaWFTestes()");

	return true;
}


bool cWF_LstDocTecAss::consultaWFTestesAtendimento( st_VariaveisLstDocTecAss * dados, XMLGen* saida )
{
    ULOG_START("cWF_LstDocTecAss::consultaWFTestesAtendimento()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idatendimento = atol(dados->idAtendimento);

		VARCHAR idAtendimentoTeste[21];
		VARCHAR dsObservacao[256];
		VARCHAR dtTeste[256];
		VARCHAR idPessoaUsuario[21];
		VARCHAR nmLoginUsuario[256];

		short i_idAtendimentoTeste;
		short i_dsObservacao;
		short i_dtTeste;
		short i_idPessoaUsuario;
		short i_nmLoginUsuario;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WF_LstDocTecAss(&sqlca);

    EXEC SQL DECLARE consultaTesteAtendimento CURSOR FOR 
	SELECT 
		a.idatendimentoteste,
		a.dsobservacao,
		TO_CHAR(a.dtteste,'DD/MM/YYYY') dtteste, 
		a.idpessoausuario,
		b.nmloginusuario 
	FROM 
		atendimento.atendimentoteste a,
		acesso.usuario b 
	WHERE 
		a.idpessoausuario=b.idpessoausuario 
		and a.idatendimento=:idatendimento 
	ORDER BY a.idatendimentoteste;

	EXEC SQL OPEN consultaTesteAtendimento;

	for( ;; )
	{
		EXEC SQL FETCH consultaTesteAtendimento INTO 
                                        :idAtendimentoTeste:i_idAtendimentoTeste,
                                        :dsObservacao:i_dsObservacao, 
                                        :dtTeste:i_dtTeste,
                                        :idPessoaUsuario:i_idPessoaUsuario, 
                                        :nmLoginUsuario:i_nmLoginUsuario;

		CONVIND(idAtendimentoTeste, i_idAtendimentoTeste);
		CONVIND(dsObservacao, i_dsObservacao);
		CONVIND(dtTeste, i_dtTeste);
		CONVIND(idPessoaUsuario, i_idPessoaUsuario);
		CONVIND(nmLoginUsuario, i_nmLoginUsuario);

		saida->createTag("AtendimentoWorkflowTestesQuestVO");
			saida->addItem("idAtendimentoTeste", (char*)idAtendimentoTeste.arr);
			saida->addItem("dsObservacao", (char*)dsObservacao.arr);
			saida->addItem("dtTeste", (char*)dtTeste.arr);
			consultaWFRespostaTeste((char*)idAtendimentoTeste.arr, saida);
			saida->createTag("UsuarioVIVO");
			saida->addProp( "xmlns","usuario.fo.vivo.com.br/vo" );
			saida->addItem("idPessoaUsuario", (char*)idPessoaUsuario.arr);
			saida->addItem("nmLoginUsuario", (char*)nmLoginUsuario.arr);
			saida->closeTag();

		saida->closeTag();
	}

	EXEC SQL CLOSE consultaTesteAtendimento;

    ULOG_END("cWF_LstDocTecAss::consultaWFTestesAtendimento()");

	return true;
}

void cWF_LstDocTecAss::sql_error_WF_LstDocTecAss( sqlca * sqlca )
{
    ULOGE("Ocorreu um erro na Consulta de Documentos Tecnicos Associados");
    ULOGE("cWF_LstDocTecAss::sql_error_WF_LstDocTecAss -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
