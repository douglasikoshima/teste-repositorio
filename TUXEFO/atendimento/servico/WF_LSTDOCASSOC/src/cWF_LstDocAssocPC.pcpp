
/*---------------------------------------------------------
 * Modulo..: Atendimento
 * Servico.: Lista Documentos Associados
 * Migracao: Script 231
 * Revisao.: Nov-22-2004 - Marcelo Nunes
 *--------------------------------------------------------*/


#include "../include/cWF_LstDocAssocPC.h"


bool cWF_LstDocAssoc::selecaoDocumentosTecnicos( st_DocumentoTecnico * dados,st_vlDocumentoTecnico * status,Collection *_ResultadoPC )
{
    ULOG_START("cWF_LstDocAssoc::selecaoDocumentosTecnicos()");

    struct sqlca sqlca;

    st_VariaveisLstDocAssoc *pLstDoc;

    int numRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idDocumentoTecnico;
        VARCHAR nrDocumento[256];
        VARCHAR dtAbertura[256];
        VARCHAR dtEstimadaFechamento[256];
        VARCHAR dtFechamento[256];
        VARCHAR dsDocumento[256];
        VARCHAR dsDocumentoTecnicoTipo[256];
        VARCHAR dsResposta[501];
        int idDocumentoTecnicoTipo;
        int inEstadoTecnico;
        int qtdProcessosVinculados = 0;

        short i_nrDocumento;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_dtEstimadaFechamento;
        short i_dsDocumento;
        short i_dsResposta;
        short i_dsDocumentoTecnicoTipo;

    	char nrDocumentoFiltro[256];
    	int  idDocumentoTecnicoTipoFiltro;
    	char ComentarioAberturaFiltro[256];
    	int  inEstadoTecnicoFiltro;
    	char dtInicioFiltro[20];
    	char dtFinalFiltro[20];
    
    	short i_nrDocumentoFiltro = -1;
    	short i_idDocumentoTecnicoTipoFiltro= -1;
    	short i_ComentarioAberturaFiltro= -1;
    	short i_inEstadoTecnicoFiltro= -1;
    	short i_dtInicioFiltro= -1;
    	short i_dtFinalFiltro= -1;

    EXEC SQL END DECLARE SECTION;

    TString tNrDocumento;
    TString tComentarioAbertura;

    if (status->nrDocumento != -1)
    {
    	tNrDocumento = dados->nrDocumento;
    	tNrDocumento.UpperCase().Trim();
    	strcpy(nrDocumentoFiltro, tNrDocumento.c_str());
    	i_nrDocumentoFiltro = 1;
    }
    else
    	strcpy(nrDocumentoFiltro, "");
	
    if (status->idDocumentoTecnicoTipo != -1)
    {
    	idDocumentoTecnicoTipoFiltro =  dados->idDocumentoTecnicoTipo;
    	i_idDocumentoTecnicoTipoFiltro = 1;
    }
    else
    	idDocumentoTecnicoTipoFiltro = -1;
	
    if (status->ComentarioAbertura != -1)
    {
    	tComentarioAbertura = dados->ComentarioAbertura;
    	tComentarioAbertura.UpperCase().Trim();
    	sprintf(ComentarioAberturaFiltro, "%%%s%%", tComentarioAbertura.c_str());
    	i_ComentarioAberturaFiltro = 1;
    }
    else
    	strcpy(ComentarioAberturaFiltro, "");

    if (status->inEstadoTecnico != -1)
    {
    	inEstadoTecnicoFiltro =  dados->inEstadoTecnico;
    	i_inEstadoTecnicoFiltro = 1;
    }
    else
    	inEstadoTecnicoFiltro = -1;

    if (status->dtInicio != -1)
    {
    	strcpy(dtInicioFiltro, dados->dtInicio);
    	i_dtInicioFiltro = 1;
    }
    else
    	strcpy(dtInicioFiltro, "");

    if (status->dtFinal != -1)
    {
    	strcpy(dtFinalFiltro, dados->dtFinal);
    	i_dtFinalFiltro = 1;
    }
    else
    	strcpy(dtFinalFiltro, "");

    ULOG("Nr. Documento: %s", nrDocumentoFiltro);
    ULOG("idDocumentoTecnicoTipoFiltro: %d", idDocumentoTecnicoTipoFiltro);
    ULOG("inEstadoTecnicoFiltro: %d", inEstadoTecnicoFiltro);
    ULOG("ComentarioAberturaFiltro: %s", ComentarioAberturaFiltro);
    ULOG("dtInicioFiltro: %s", dtInicioFiltro);
    ULOG("dtFinalFiltro: %s", dtFinalFiltro);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WF_LstDocAssoc(&sqlca);

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE selecao CURSOR FOR 
    SELECT 
	    a.idDocumentoTecnico, 
	    a.nrDocumento,
	    TO_CHAR(a.dtAbertura,'dd/mm/yyyy hh24:mi'),
	    TO_CHAR(a.dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'),
	    TO_CHAR(a.dtFechamento,'dd/mm/yyyy hh24:mi'),
	    a.dsDocumento,
	    a.comentarioFechamento,
	    a.idDocumentoTecnicoTipo, 
	    a.inEstadoTecnico,
	    a.numAtendimentos,
	    a.dsDocumentoTecnicoTipo
    FROM 
	    Atendimento.DocumentoTecnicoV01 a
    WHERE
	    (UPPER(a.nrDocumento) = :nrDocumentoFiltro OR -1= :i_nrDocumentoFiltro)
	    AND (TRUNC(a.dtAbertura) >= TO_DATE(:dtInicioFiltro,'DD/MM/YYYY') OR -1= :i_dtInicioFiltro)
	    AND (TRUNC(a.dtAbertura) <= TO_DATE(:dtFinalFiltro,'DD/MM/YYYY') OR -1= :i_dtFinalFiltro)
	    AND (a.idDocumentoTecnicoTipo = :idDocumentoTecnicoTipoFiltro OR -1= :i_idDocumentoTecnicoTipoFiltro)
	    AND (UPPER(a.dsDocumento) LIKE :ComentarioAberturaFiltro OR -1= :i_ComentarioAberturaFiltro)
	    AND (a.inEstadoTecnico = :inEstadoTecnicoFiltro OR -1= :i_inEstadoTecnicoFiltro)
    ORDER BY
	    a.dtAbertura desc;

    EXEC SQL OPEN selecao;

    for ( ;; )
    {
        EXEC SQL FETCH selecao INTO :idDocumentoTecnico, 
                                    :nrDocumento:i_nrDocumento, 
                                    :dtAbertura:i_dtAbertura, 
                                    :dtEstimadaFechamento:i_dtEstimadaFechamento, 
                                    :dtFechamento:i_dtFechamento, 
                                    :dsDocumento:i_dsDocumento, 
                                    :dsResposta:i_dsResposta, 
                                    :idDocumentoTecnicoTipo, 
                                    :inEstadoTecnico,
				    :qtdProcessosVinculados,
				    :dsDocumentoTecnicoTipo:i_dsDocumentoTecnicoTipo;


        CONVIND(nrDocumento,i_nrDocumento);
        CONVIND(dtAbertura,i_dtAbertura);
        CONVIND(dtFechamento,i_dtFechamento);
        CONVIND(dtEstimadaFechamento,i_dtEstimadaFechamento);
        CONVIND(dsDocumento,i_dsDocumento);
        CONVIND(dsResposta,i_dsResposta);
        CONVIND(dsDocumentoTecnicoTipo,i_dsDocumentoTecnicoTipo);

        pLstDoc = new st_VariaveisLstDocAssoc;
        if ( pLstDoc )
        {
            sprintf( pLstDoc->idDocumentoTecnico    ,"%i",idDocumentoTecnico );
            strcpy ( pLstDoc->nrDocumento           ,(char *)nrDocumento.arr );
            strcpy ( pLstDoc->dtAbertura            ,(char *)dtAbertura.arr );
            strcpy ( pLstDoc->dtFechamento          ,(char *)dtFechamento.arr );
            strcpy ( pLstDoc->dtEstimadaFechamento  ,(char *)dtEstimadaFechamento.arr );
            strcpy ( pLstDoc->dsDocumento           ,(char *)dsDocumento.arr );
            strcpy ( pLstDoc->dsResposta            ,(char*)dsResposta.arr );
            sprintf( pLstDoc->idDocumentoTecnicoTipo,"%i",idDocumentoTecnicoTipo );
            sprintf( pLstDoc->inEstadoTecnico       ,"%i",inEstadoTecnico );
            strcpy ( pLstDoc->dsDocumentoTecnicoTipo,(char*)dsDocumentoTecnicoTipo.arr );
            sprintf( pLstDoc->qtdProcessosVinculados,"%i",qtdProcessosVinculados );

            _ResultadoPC->AddItem( (void*) pLstDoc );
        }
        else
        {
            ULOG(erroFalhaAlocacaoMemoria());
        }
	numRegistros++;
	if (numRegistros == 0)
		break;
    }

    EXEC SQL CLOSE selecao;

    ULOG_END("cWF_LstDocAssoc::selecaoDocumentosTecnicos()");

    return true;

}

bool cWF_LstDocAssoc::selecaoDocumentosTecnicosAtendimento( st_DocumentoTecnico * dados,st_vlDocumentoTecnico * status,Collection *_ResultadoPC )
{
    ULOG_START("cWF_LstDocAssoc::selecaoDocumentosTecnicosAtendimento()");

    struct sqlca sqlca;

    st_VariaveisLstDocAssoc *pLstDoc;

    int numRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idDocumentoTecnico;
        VARCHAR nrDocumento[256];
        VARCHAR dtAbertura[256];
        VARCHAR dtEstimadaFechamento[256];
        VARCHAR dtFechamento[256];
        VARCHAR dsDocumento[256];
        VARCHAR dsDocumentoTecnicoTipo[256];
        VARCHAR dsResposta[501];
        int idDocumentoTecnicoTipo;
        int inEstadoTecnico;
        int qtdProcessosVinculados = 0;

        long idAtdAssoc = dados->idAssociados;

        short i_nrDocumento;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_dtEstimadaFechamento;
        short i_dsDocumento;
        short i_dsResposta;
        short i_dsDocumentoTecnicoTipo;

    EXEC SQL END DECLARE SECTION;

   EXEC SQL WHENEVER SQLERROR DO sql_error_WF_LstDocAssoc(&sqlca);

   EXEC SQL WHENEVER NOT FOUND DO BREAK;

   EXEC SQL DECLARE selecaoAtd CURSOR FOR 
    SELECT 
	a.idDocumentoTecnico, 
	a.nrDocumento,
	TO_CHAR(a.dtAbertura,'dd/mm/yyyy hh24:mi'),
	TO_CHAR(a.dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'),
	TO_CHAR(a.dtFechamento,'dd/mm/yyyy hh24:mi'),
	a.dsDocumento,
	a.comentarioFechamento,
	a.idDocumentoTecnicoTipo, 
	a.inEstadoTecnico,
	a.numAtendimentos,
	a.dsDocumentoTecnicoTipo
    FROM 
	Atendimento.atendimentoDocumentoV01 a
    WHERE
	a.idAtendimento = :idAtdAssoc
    ORDER BY
	a.dtAbertura desc;

   EXEC SQL OPEN selecaoAtd;

    for ( ;; )
    {
        EXEC SQL FETCH selecaoAtd INTO :idDocumentoTecnico, 
                                    :nrDocumento:i_nrDocumento, 
                                    :dtAbertura:i_dtAbertura, 
                                    :dtEstimadaFechamento:i_dtEstimadaFechamento, 
                                    :dtFechamento:i_dtFechamento, 
                                    :dsDocumento:i_dsDocumento, 
                                    :dsResposta:i_dsResposta, 
                                    :idDocumentoTecnicoTipo, 
                                    :inEstadoTecnico,
				    :qtdProcessosVinculados,
				    :dsDocumentoTecnicoTipo:i_dsDocumentoTecnicoTipo;


        CONVIND(nrDocumento,i_nrDocumento);
        CONVIND(dtAbertura,i_dtAbertura);
        CONVIND(dtFechamento,i_dtFechamento);
        CONVIND(dtEstimadaFechamento,i_dtEstimadaFechamento);
        CONVIND(dsDocumento,i_dsDocumento);
        CONVIND(dsResposta,i_dsResposta);
        CONVIND(dsDocumentoTecnicoTipo,i_dsDocumentoTecnicoTipo);

        pLstDoc = new st_VariaveisLstDocAssoc;
        if ( pLstDoc )
        {
            sprintf( pLstDoc->idDocumentoTecnico    ,"%i",idDocumentoTecnico );
            strcpy ( pLstDoc->nrDocumento           ,(char *)nrDocumento.arr );
            strcpy ( pLstDoc->dtAbertura            ,(char *)dtAbertura.arr );
            strcpy ( pLstDoc->dtFechamento          ,(char *)dtFechamento.arr );
            strcpy ( pLstDoc->dtEstimadaFechamento  ,(char *)dtEstimadaFechamento.arr );
            strcpy ( pLstDoc->dsDocumento           ,(char *)dsDocumento.arr );
            strcpy ( pLstDoc->dsResposta            ,(char*)dsResposta.arr );
            sprintf( pLstDoc->idDocumentoTecnicoTipo,"%i",idDocumentoTecnicoTipo );
            sprintf( pLstDoc->inEstadoTecnico       ,"%i",inEstadoTecnico );
            strcpy ( pLstDoc->dsDocumentoTecnicoTipo,(char*)dsDocumentoTecnicoTipo.arr );
            sprintf( pLstDoc->qtdProcessosVinculados,"%i",qtdProcessosVinculados );

            _ResultadoPC->AddItem( (void*) pLstDoc );
        }
        else
        {
            ULOG(erroFalhaAlocacaoMemoria());
        }
	numRegistros++;
	if (numRegistros == 0)
		break;
    }

    EXEC SQL CLOSE selecaoAtd;

    ULOG_END("cWF_LstDocAssoc::selecaoDocumentosTecnicosAtendimento()");

    return true;

}

void cWF_LstDocAssoc::carregaDados( DOMNode * entrada,st_DocumentoTecnico * m_stDados,st_vlDocumentoTecnico * m_vlDados )
{
    ULOG_START("cWF_LstDocAssoc::carregaDados()");

    char *p;

    if (p=tx.walkTree( entrada, "idDocTecTipo", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            m_stDados->idDocumentoTecnicoTipo = atoi(p);
            m_vlDados->idDocumentoTecnicoTipo = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "nrDocumentoTecnico", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->nrDocumento, p);
            m_vlDados->nrDocumento = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dtAbertura", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dtAbertura, p);
            m_vlDados->dtAbertura = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dtEstimadaFechamento", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dtEstimadaFechamento, p);
            m_vlDados->dtEstimadaFechamento = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dtFechamento", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dtFechamento, p);
            m_vlDados->dtFechamento = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dsDocumento", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dsDocumento, p);
            m_vlDados->dsDocumento = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dsResposta", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dsResposta, p);
            m_vlDados->dsResposta = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "idUsuarioAlteracao", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            m_stDados->idUsuarioAlteracao = atoi(p);
            m_vlDados->idUsuarioAlteracao = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "dtUltimaAlteracao", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->dtUltimaAlteracao, p);
            m_vlDados->dtUltimaAlteracao = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "comentario", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->ComentarioAbertura, p);
            m_vlDados->ComentarioAbertura = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "ComentarioFechamento", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            strcpy(m_stDados->ComentarioFechamento, p);
            m_vlDados->ComentarioFechamento = 1;
        }
        XMLString::release(&p);
    }

    if (p=tx.walkTree( entrada, "idDocTecEstado", 0 ),p) 
    {
        if ( strlen(p) > 0 )
        {
            m_stDados->inEstadoTecnico = atoi(p);
            m_vlDados->inEstadoTecnico = 1;
        }
        XMLString::release(&p);
    }

   if ( p=tx.walkTree( entrada, "dtPeriodo1", 0 ),p )
   {
        if ( strlen(p) > 0 )
        {
            strcpy( m_stDados->dtInicio,p );
            m_vlDados->dtInicio = 1;
        }
        XMLString::release(&p);
   }

   if ( p=tx.walkTree( entrada, "dtPeriodo2", 0 ),p )
   {
        if ( strlen(p) > 0 )
        {
            strcpy( m_stDados->dtFinal,p );
            m_vlDados->dtFinal = 1;
        }
        XMLString::release(&p);
   }

   if ( p=tx.walkTree( entrada, "associados", 0 ),p )
   {
        if ( strlen(p) > 0 )
        {
            m_stDados->idAssociados = atoi(p);
            m_vlDados->idAssociados = 1;
        }
        XMLString::release(&p);
   }

    ULOG_END("cWF_LstDocAssoc::carregaDados()");
}


bool cWF_LstDocAssoc::proCPegaDocumentoTecnico( char * dsDocumentoTecnico, int idDocumentoTecnico )
{
    
    ULOG_START("cWF_LstDocAssoc::proCPegaDocumentoTecnico()");
    
    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;
      
        VARCHAR dsDocumentoTecnicoTipo[256];
        int idDocumentoTecnicoTipo;

        short i_dsDocumentoTecnicoTipo=-1;

    EXEC SQL END DECLARE SECTION;
   
    idDocumentoTecnicoTipo = idDocumentoTecnico;
   
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL SELECT dsDocumentoTecnicoTipo 
               INTO :dsDocumentoTecnicoTipo:i_dsDocumentoTecnicoTipo 
               FROM Atendimento.DocumentoTecnicoTipo
              WHERE idDocumentoTecnicoTipo = :idDocumentoTecnicoTipo;

    ULOG("sqlca.sqlcode = '%i'",sqlca.sqlcode);

    if ( sqlca.sqlcode == 1403 )
    {
        ULOG_END("cWF_LstDocAssoc::proCPegaDocumentoTecnico()");
        return true;
    }

    CONVIND( dsDocumentoTecnicoTipo,i_dsDocumentoTecnicoTipo );

    ULOG("dsDocumentoTecnicoTipo = '%s'",(char*)dsDocumentoTecnicoTipo.arr);

    if ( i_dsDocumentoTecnicoTipo >= 0 )
    {
      strcpy(dsDocumentoTecnico,(char *)dsDocumentoTecnicoTipo.arr);
    }
    ULOG_END("cWF_LstDocAssoc::proCPegaDocumentoTecnico()");
    return true;
}


void cWF_LstDocAssoc::sql_error_WF_LstDocAssoc( sqlca * sqlca )
{
    ULOGE(mensagemSimples("Ocorreu um erro na Consulta de Documentos Associados"));
    ULOGE("cWF_LstDocTecAss::sql_error_WF_LstDocTecAss -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
