#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"


#include "../include/cWFAtendimentoBaixaAtual.h"
#include "../include/stWFAtendimentoBaixaAtual.h"

void sql_error_WFAtendimentoBaixaAtual(sqlca*sqlca);
bool proCObtemWFAtendimentoTipoComunicacao(long sIdAtendimento, XMLGen* saida);

    // Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stWFAtendimentoBaixaAtual.h"
    EXEC SQL END DECLARE SECTION;

long proCIncluirWFAtendimentoBaixaAtual(st_AtendimentoBaixaAtual* dados, st_vlAtendimentoBaixaAtual* status)
{
    ULOG_START( "proCIncluirWFAtendimentoBaixaAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoBaixaAtual   oDados;
        struct st_vlAtendimentoBaixaAtual oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);


    EXEC SQL 
        INSERT INTO
            atendimento.AtendimentoBaixaAtual
            (
                idAtendimento,
                idAtendimentoBaixaHistorico,
                idUsuarioAlteracao,
                dtUltimaAlteracao
            )
            VALUES
            (
                :oDados.idAtendimento,              
                :oDados.idAtendimentoBaixaHistorico,
                DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
            );

    ULOG_END( "proCIncluirWFAtendimentoBaixaAtual()" );

    return oDados.idAtendimento;
}

bool proCAlterarWFAtendimentoBaixaAtual(st_AtendimentoBaixaAtual* dados, st_vlAtendimentoBaixaAtual* status, XMLGen* saida)
{
    ULOG_START( "proCAlterarWFAtendimentoBaixaAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoBaixaAtual   oDados;
        struct st_vlAtendimentoBaixaAtual oStatus;

        char query[800] = "UPDATE atendimento.AtendimentoBaixaAtual SET ";

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    bool separa = false;

    if (status->idAtendimentoBaixaHistorico != -1) 
        montaUpdate("idAtendimentoBaixaHistorico", oDados.idAtendimentoBaixaHistorico, 1);

    if (status->idUsuarioAlteracao != -1) 
        montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

    if (status->dtUltimaAlteracao != -1) 
        montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

    sprintf(query, "%s WHERE idAtendimento = %ld", query, dados->idAtendimento);

    ULOG( "QUERY [%s]",query );

    EXEC SQL EXECUTE IMMEDIATE :query;

    ULOG_END( "proCAlterarWFAtendimentoBaixaAtual()" );

    return true;
}

bool proCExcluirWFAtendimentoBaixaAtual(st_AtendimentoBaixaAtual* dados, st_vlAtendimentoBaixaAtual* status, XMLGen* saida)
{

    ULOG_START( "proCExcluirWFAtendimentoBaixaAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = dados->idAtendimento;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);

    EXEC SQL 
        DELETE
            atendimento.AtendimentoBaixaAtual
        WHERE
            idAtendimento = :idAtendimento;

    ULOG_END( "proCExcluirWFAtendimentoBaixaAtual()" );

    return true;
}

bool proCObtemWFAtendimentoTipoComunicacao(long sIdAtendimento, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoContatoComunic;
        long idAtendimento = sIdAtendimento;
        VARCHAR dsComunicacao[256];

        short i_idAtendimentoContatoComunic = -1;
        short i_dsComunicacao;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);

    EXEC SQL SELECT 
        idAtendimentoContatoComunic, 
        dsTipoComunicacao
    INTO
        :idAtendimentoContatoComunic:i_idAtendimentoContatoComunic, 
        :dsComunicacao:i_dsComunicacao
    FROM 
        (SELECT 
            AC.idAtendimentoContatoComunic, 
            TC.dsTipoComunicacao
        FROM
            atendimento.AtendimentoContatoComunic AC,
            apoio.TipoComunicacao TC
        WHERE 
            AC.IDTIPOCOMUNICACAO = TC.IDTIPOCOMUNICACAO
            AND AC.IDATENDIMENTO = :idAtendimento
        ORDER BY 
            AC.NRORDEMUTILIZACAO)
    WHERE ROWNUM <= 1;

    if (i_idAtendimentoContatoComunic != -1)
    {
        CONVIND(dsComunicacao, i_dsComunicacao);

        saida->addItem("idAtendimentoContatoComunic", idAtendimentoContatoComunic);
        saida->addItem("dsFormaRetorno", (char *)dsComunicacao.arr);
    }
    else
    {
        saida->addItem("idAtendimentoContatoComunic", 0);
        saida->addItem("dsFormaRetorno", "Sem Retorno");
    }

    return true;

}

bool proCConsultaWFAtendimentoBaixaAtual(st_AtendimentoBaixaAtual* dados, st_vlAtendimentoBaixaAtual* status, char* order, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoBaixaAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        long idAtendimentoBaixaHistorico;
        int idUsuarioAlteracao;
        VARCHAR dtUltimaAlteracao[256];

        short i_idUsuarioAlteracao;
        short i_dtUltimaAlteracao;

        char query[800] = "SELECT idAtendimento,idAtendimentoBaixaHistorico,"
                                 "idUsuarioAlteracao,"
                                 "TO_CHAR(dtUltimaAlteracao,'DD/MM/YYYY HH24:MI') "
                            "FROM atendimento.AtendimentoBaixaAtual ";

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    bool separa = false;

    if (status->idAtendimento != -1) 
        montaWhere("idAtendimento", dados->idAtendimento, 1);

    if (status->idAtendimentoBaixaHistorico != -1)
        montaWhere("idAtendimentoBaixaHistorico", dados->idAtendimentoBaixaHistorico, 1);

    if (status->idUsuarioAlteracao != -1) 
        montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

    if (status->dtUltimaAlteracao != -1) 
        montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

    if (strlen(order) > 0) 
        sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);

    EXEC SQL PREPARE consultaAtendimentoBaixaAtual FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoBaixaAtual;


    ULOG( "Vai executar [%s]",query );

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO 
                                    :idAtendimento, 
                                    :idAtendimentoBaixaHistorico,
                                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                                    :dtUltimaAlteracao:i_dtUltimaAlteracao;

        CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

        saida->createTag("WFAtendimentoBaixaAtualVO");
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
            saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
            saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
        saida->closeTag();
    }

    EXEC SQL CLOSE consulta;

    ULOG_END( "proCConsultaWFAtendimentoBaixaAtual()" );

    return true;
}

bool proCObterWFIdAtdBxaHistorico(long _idAtendimento,long *_idAtendimentoBaixaHistorico)
{
    ULOG_START("proCObterWFIdAtdBxaHistorico()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = _idAtendimento;
        long idAtendimentoBaixaHistorico;
        short i_idAtendimentoBaixaHistorico;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoBaixaAtual(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT 
            IDATENDIMENTOBAIXAHISTORICO
        INTO
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico
        FROM
            ATENDIMENTO.ATENDIMENTOBAIXAATUAL
        WHERE
            IDATENDIMENTO = :idAtendimento;

    *_idAtendimentoBaixaHistorico = sqlca.sqlcode ? 0 : idAtendimentoBaixaHistorico;

    ULOG("sqlca.sqlcode=%d",sqlca.sqlcode);

    ULOG_END("proCObterWFIdAtdBxaHistorico()");

    return sqlca.sqlcode == 0 ? true : false;
}

bool proCObtemWFBaixaAtualAtendimento(long sIdAtendimento, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long      idAtendimento = sIdAtendimento;
        int      idBaixa;
        int      idBaixaMensagem;
        VARCHAR  dsMensagem[256];
        int      idFormaRetorno;
        VARCHAR  dsFormaRetorno[256];
        VARCHAR  dsComentario[256];

        short    i_idBaixa;
        short    i_idBaixaMensagem;
        short    i_dsMensagem;
        short    i_idFormaRetorno;
        short    i_dsFormaRetorno;
        short    i_dsComentario;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixaAtual(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaBaixaAtendimento CURSOR FOR

    SELECT 
        IDBAIXA,
        IDBAIXAMENSAGEM,
        DSMENSAGEM,
        IDFORMARETORNO,
        DSFORMARETORNO,
        DSCOMENTARIO
    FROM 
        ATENDIMENTO.ATENDIMENTOBAIXAV01 
    WHERE 
        IDATENDIMENTO = :idAtendimento;
                    
    EXEC SQL OPEN consultaBaixaAtendimento;

    while (true)
    {
        EXEC SQL FETCH consultaBaixaAtendimento INTO 
                                    :idBaixa:i_idBaixa,
                                    :idBaixaMensagem:i_idBaixaMensagem,
                                    :dsMensagem:i_dsMensagem,
                                    :idFormaRetorno:i_idFormaRetorno, 
                                    :dsFormaRetorno:i_dsFormaRetorno,
                                    :dsComentario:i_dsComentario;

        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(dsFormaRetorno, i_dsFormaRetorno);
        CONVIND(dsComentario, i_dsComentario);

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idBaixa",idBaixa );
            saida->addItem( "idBaixaMensagem",idBaixaMensagem );
            saida->addItem( "dsMensagem",(char*)dsMensagem.arr );
            saida->addItem( "idFormaRetorno",idFormaRetorno );
            saida->addItem( "dsComentario",(char*)dsComentario.arr );
            proCObtemWFAtendimentoTipoComunicacao(sIdAtendimento, saida);
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaBaixaAtendimento;

    return true;

}

void sql_error_WFAtendimentoBaixaAtual(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
