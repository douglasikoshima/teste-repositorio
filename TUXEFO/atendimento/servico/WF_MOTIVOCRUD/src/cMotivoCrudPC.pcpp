
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/cMotivoCrud.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/msgPadrao.h"

// Prototipos
void SqlErrorMotivoCrud( sqlca * sqlca );
int proCRemoveMotivo( const unsigned long idMotivoPrm );
int proCAlteraMotivo( const unsigned long idMotivoPrm,const char * sMotivoPrm );


/*---------------------------------------------------------*/
int proCInsereMotivo( const char * sMotivoPrm )
{
   ULOG_START("proCInsereMotivo()");

    struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idMotivo;
        int registros;
        const char *dsMotivo = sMotivoPrm ? sMotivoPrm : "";

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlErrorMotivoCrud( &sqlca );

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :registros
        FROM
	        ATENDIMENTO.MOTIVO
        WHERE
	        IDMOTIVO > 0
        AND
            INVISIVEL = 1
        AND
            UPPER(DSMOTIVO) = UPPER(:dsMotivo);

    if ( registros > 0 )
    {
        ULOG("return -1");
        ULOG_END("proCInsereMotivo()");
        return -1;
    }

	EXEC SQL 
        SELECT Atendimento.MotivoSQ.NEXTVAL 
    INTO 
       :idMotivo FROM DUAL;

    EXEC SQL
        INSERT INTO Atendimento.Motivo
            (
                idMotivo,
                dsMotivo,
                inVisivel,
                dtUltimaAlteracao,
                idUsuarioAlteracao
            )
            VALUES
            (
                :idMotivo,
                :dsMotivo,
                1,
                SYSDATE,
                NULL
            );


   ULOG("return 0");
   ULOG_END("proCInsereMotivo()");


    return 0;
}




int proCRemoveMotivo( const unsigned long idMotivoPrm )
{
       
   ULOG_START("proCRemoveMotivo()");

    struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idMotivo = idMotivoPrm;

		VARCHAR	dtExclusao[256];
        short i_dtExclusao=-1;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlErrorMotivoCrud( &sqlca );

    /*
    EXEC SQL
        DELETE FROM 
            Atendimento.Motivo
        WHERE
            idMotivo = :idMotivo;
    */

    EXEC SQL
        SELECT
            DTEXCLUSAO
        INTO
            :dtExclusao:i_dtExclusao
        FROM 
            ATENDIMENTO.MOTIVO
        WHERE
            IDMOTIVO = :idMotivo;

    if ( i_dtExclusao < 0 )
    {
        EXEC SQL
            UPDATE 
                Atendimento.Motivo
            SET 
                dtExclusao = SYSDATE
            WHERE
                idMotivo = :idMotivo;
    }
    else
    {
        EXEC SQL
            UPDATE 
                Atendimento.Motivo
            SET 
                dtExclusao = NULL
            WHERE
                idMotivo = :idMotivo;
    }


   ULOG_END("proCRemoveMotivo()");


    return 0;
}




int proCAlteraMotivo(const unsigned long idMotivoPrm,const char * sMotivoPrm)
{
 
   ULOG_START("proCAlteraMotivo()");


    struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        int registros;
        unsigned long idMotivo = idMotivoPrm;
        const char *dsMotivo = sMotivoPrm ? sMotivoPrm : "";

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlErrorMotivoCrud( &sqlca );

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :registros
        FROM
	        ATENDIMENTO.MOTIVO
        WHERE
	        IDMOTIVO != :idMotivo
        AND
            INVISIVEL = 1
        AND
            UPPER(DSMOTIVO) = UPPER(:dsMotivo);

    if ( registros > 0 )
    {
        ULOG(" return -1");
        ULOG_END("proCAlteraMotivo()");
        return -1;
    }

    EXEC SQL
        UPDATE 
            ATENDIMENTO.MOTIVO
        SET 
            DSMOTIVO = :dsMotivo
        WHERE
            IDMOTIVO = :idMotivo;


    
    
    if ( sqlca.sqlcode == 1403 )
    {
        ULOG(" ERRO return -2");
        ULOG_END("proCAlteraMotivo()");
        return -2;
    }
    else
    {
        ULOG(" OK return 0");
        ULOG_END("proCAlteraMotivo()");
        return 0;
    }

}




int proCConsultaMotivos( const char * sMotivoPrm, XMLGen * Saida )
{
    ULOG_START("proCConsultaMotivos()");
	//SmallString query;
    struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

		//char * queryChar;
        unsigned long idMotivo;
        VARCHAR dsMotivo[257];
        char dsMotivoParam[300];
		VARCHAR	dtExclusao[256];

        short i_dsMotivo;
        short i_dtExclusao;

	EXEC SQL END DECLARE SECTION;

 

    sprintf(dsMotivoParam,"%c%.255s%c",'%',sMotivoPrm,'%');

    //query =
    //    "SELECT "
    //        "IDMOTIVO, "
    //        "DSMOTIVO, "
    //        "TO_CHAR(DTEXCLUSAO,'DD/MM/YYYY HH24:MI') AS DTEXCLUSAO "
    //    "FROM "
    //        "ATENDIMENTO.MOTIVO "
    //    "WHERE "
    //        "IDMOTIVO > 0 "
    //    "AND "
    //        "INVISIVEL = 1 "
    //    "AND "
    //        "UPPER(DSMOTIVO) ";
	//	    
    //query += "LIKE UPPER ('%%";
    //query += sMotivoPrm;
    //query += "%%') ";
    //query += "ORDER BY UPPER(DSMOTIVO)";
        
	//queryChar = query;


    EXEC SQL WHENEVER SQLERROR DO SqlErrorMotivoCrud( &sqlca );

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

	//EXEC SQL PREPARE Consulta FROM :queryChar;
    EXEC SQL DECLARE ConsultaMotivos CURSOR FOR 
        SELECT
            IDMOTIVO,
            DSMOTIVO,
            //TO_CHAR(DTEXCLUSAO,'DD/MM/YYYY HH24:MI') AS DTEXCLUSAO
            DTEXCLUSAO
        FROM
            ATENDIMENTO.MOTIVO
        WHERE
            IDMOTIVO > 0
        AND
            INVISIVEL = 1
        AND
            UPPER(DSMOTIVO) LIKE UPPER(:dsMotivoParam);

    EXEC SQL OPEN ConsultaMotivos;

    for( ;; )
    {
        i_dtExclusao = -1;
        EXEC SQL FETCH ConsultaMotivos INTO :idMotivo,
                                            :dsMotivo:i_dsMotivo,
                                            :dtExclusao:i_dtExclusao;
		CONVIND( dsMotivo,i_dsMotivo );

        Saida->createTag( "WFMotivoVO" );
           Saida->addItem( "idMotivo",idMotivo );
           Saida->addItem( "dsMotivo",(char*)dsMotivo.arr );
           Saida->addItem( "ativo",i_dtExclusao < 0?1:0 );
        Saida->closeTag();
    }

    EXEC SQL CLOSE ConsultaMotivos;

    ULOG_END("proCConsultaMotivos()");

    return 0;
}




void SqlErrorMotivoCrud( sqlca * sqlca )
{
    ULOGE("SqlError -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
