///////////////////////////////////////////////////////////////////////////////
/**
 * @modulo  workflow
 * @usecase writeRegEnc
 * @author  Eder Jani Martins
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:33 $
 **/
///////////////////////////////////////////////////////////////////////////////
#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tuxfw.h>

class TuxHelperImpl:public TuxHelper
{
public:
	DOMNode * walkDOMImpl( DOMNode*a , char*b , int*c , int d )
	{
		return walkDOM( a , b , c , d );
	}
};

int InsereRegionalGrupo( const char * idParam, DOMNode *dnode )
{
   ULOG_START("InsereRegionalGrupo()");
	DOMNode *pNoCodigo;
	struct sqlca sqlca;
	TuxHelper tuxHelper;
	TuxHelperImpl tuxhelperIMPL;
	char* pzcUFOPeradora;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de writeRegEnc::InsereRegionalGrupo");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:33 $");
    ULOG( "==================================================================");

	EXEC SQL BEGIN DECLARE SECTION;
	struct
	{
		char  cidGrupo[21+1];
		char  cidUFOperadora[21+1];
	} stRegistro;
		VARCHAR stidUfoperadoraGrupo[21+1];
		char cPesquisa[3000];
	EXEC SQL END DECLARE SECTION;

	memset( &stRegistro, 0, sizeof( stRegistro ) );
	sqlca.sqlcode=0;
    
    strcpy( stRegistro.cidGrupo, idParam );
    EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
    
    /*
	 * Pega todos os codigos de Procedencia
	 */
	int SubnoAtual = 0;
	int Subno = 0;
	for ( ;; )  
	{
	    Subno = 0;
		memset( stRegistro.cidUFOperadora, 0, sizeof( stRegistro.cidUFOperadora ) );
		pNoCodigo = tuxhelperIMPL.walkDOMImpl( dnode,"RegionalVO",&Subno,SubnoAtual++ );
		if ( pNoCodigo == NULL )
		{
		   ULOG_END("InsereRegionalGrupo() ->  pNoCodigo == NULL return 1");
		   return 1;
		}

		pzcUFOPeradora = tuxHelper.walkTree( pNoCodigo,"idRegional",0 );
		if ( pzcUFOPeradora == NULL )
			break;

		strcpy( stRegistro.cidUFOperadora, pzcUFOPeradora );
		XMLString::release(&pzcUFOPeradora);

        
        memset( &stidUfoperadoraGrupo, 0, sizeof( stidUfoperadoraGrupo ) );
		EXEC SQL
		SELECT
			CONTATOADM.UFOPERADORAGRUPOSQ.NEXTVAL
		INTO
			:stidUfoperadoraGrupo
		FROM
			DUAL;

        strcpy( cPesquisa,
			"INSERT INTO CONTATOADM.UFOPERADORAGRUPO "
			"( "
				"IDUFOPERADORAGRUPO, "
				"IDGRUPO, "
				"IDUFOPERADORA "
			") "
			"VALUES "
			"( "
		);
		strcat( cPesquisa, (char*)stidUfoperadoraGrupo.arr );
		strcat( cPesquisa, "," );
		strcat( cPesquisa, stRegistro.cidGrupo );
		strcat( cPesquisa, "," );
		strcat( cPesquisa, stRegistro.cidUFOperadora );
		strcat( cPesquisa, ")" );

        ULOG("stidUfoperadoraGrupo[%s]", (char*)stidUfoperadoraGrupo.arr);
        ULOG("stRegistro.cidGrupo[%s]", stRegistro.cidGrupo);
        ULOG("stRegistro.cidUFOperadora[%s]", stRegistro.cidUFOperadora);
        ULOG("INSERT[%s]", cPesquisa );

        EXEC SQL EXECUTE IMMEDIATE :cPesquisa;

		if( sqlca.sqlcode )
		{
		   ULOG_END("InsereRegionalGrupo() ->  sqlca.sqlcode > 0 return 0");
			return 0;
		}
    }
    ULOG_END("InsereRegionalGrupo() -> return 1");
    return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
			
}
