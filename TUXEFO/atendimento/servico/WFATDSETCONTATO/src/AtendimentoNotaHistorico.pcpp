// AtendimentoNotaHistorico.cpp: implementation of the AtendimentoNotaHistorico class.
//
//////////////////////////////////////////////////////////////////////
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include "../include/AtendimentoNotaHistorico.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

AtendimentoNotaHistorico::AtendimentoNotaHistorico()
{

}

AtendimentoNotaHistorico::~AtendimentoNotaHistorico()
{

}
int AtendimentoNotaHistorico::inserir(struct stNotaHistorico *buf,char*user)
{
	ULOG_START("AtendimentoNotaHistorico::inserir()");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*idAtendimentoNota = buf->idAtendimentoNota;
		char*idOperacaoNotaAtendimento = buf->idOperacaoNotaAtendimento;
		char*idPessoaUsuario = buf->idPessoaUsuario;		
		char*dsObservacao = buf->dsObservacao;
		char*idMotivo = buf->idMotivo;
		char*idUsuarioAlteracao = user;
		VARCHAR idAtendimentoNotaHistorico[21+1];
		int countHistorico = 0;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	memset(&idAtendimentoNotaHistorico,0,22);
	sqlca.sqlcode = 0;
	EXEC SQL
		SELECT
		ATENDIMENTO.ATENDIMENTONOTAHISTORICOSQ.NEXTVAL
		INTO
		:idAtendimentoNotaHistorico FROM DUAL;
	if(sqlca.sqlcode == 1403)
	{
		ULOG_END ("AtendimentoNotaHistorico::inserir() -> return -1");
		return -1;
	}

	EXEC SQL
		SELECT COUNT(1)
		INTO :countHistorico
		FROM ATENDIMENTO.ATENDIMENTONOTAHISTORICO ANH
		WHERE
		ANH.IDATENDIMENTONOTA = :idAtendimentoNota;

	// Se já tiver 3 históricos 
	if(sqlca.sqlcode != 1403 && countHistorico == 3)
	{
	   ULOG_END ("AtendimentoNotaHistorico::inserir() -> return -2");
		return -2;
	}

	EXEC SQL
		INSERT INTO
		ATENDIMENTO.ATENDIMENTONOTAHISTORICO
		(
		IDATENDIMENTONOTAHISTORICO,
		IDATENDIMENTONOTA,
		IDOPERACAONOTAATENDIMENTO,
		IDPESSOAUSUARIO,
		DTOPERACAO,
		DSOBSERVACAO,
		IDUSUARIOALTERACAO,
		DTULTIMAALTERACAO
		)
		VALUES
		(
		:idAtendimentoNotaHistorico,
		:idAtendimentoNota,
		:idOperacaoNotaAtendimento,
		:idPessoaUsuario,
		 sysdate,
		:dsObservacao,
		:idUsuarioAlteracao,
		 sysdate
		);
	if(sqlca.sqlcode == 1403)
	{
		ULOG_END ("AtendimentoNotaHistorico::inserir() -> return -1");
		return -1;
	}

	EXEC SQL
		INSERT INTO
		ATENDIMENTO.ATENDIMENTONOTAMOTIVO
		(
		IDATENDIMENTONOTAMOTIVO,
		IDATENDIMENTONOTAHISTORICO,
		IDUSUARIOALTERACAO,
		DTULTIMAALTERACAO,
		IDMOTIVO
		)
		VALUES
		(
		ATENDIMENTO.ATENDIMENTONOTAMOTIVOSQ.NEXTVAL,
		:idAtendimentoNotaHistorico,
		:idUsuarioAlteracao,
		 sysdate,
		:idMotivo
		);

	// Se existir 3 históricos ou a operação for registro com sucesso, fechar a nota
	if(++countHistorico == 3 || !strcmp(idOperacaoNotaAtendimento,"2"))
	{
		EXEC SQL
			UPDATE ATENDIMENTO.ATENDIMENTONOTA
			SET DTFECHAMENTO = SYSDATE,
			INCONTATADO = 1
			WHERE IDATENDIMENTONOTA = :idAtendimentoNota;
		if(sqlca.sqlcode != 0)
		{
		   ULOG_END ("AtendimentoNotaHistorico::inserir() -> return -3") ;
			return -3;
		}	
	}
	else
	{
		EXEC SQL
			UPDATE ATENDIMENTO.ATENDIMENTONOTA
			SET INCONTATADO = 1
			WHERE IDATENDIMENTONOTA = :idAtendimentoNota;
		if(sqlca.sqlcode != 0)
		{
		   ULOG_END ("AtendimentoNotaHistorico::inserir() -> return -3");
			return -3;
		}
	}
   ULOG_END ("AtendimentoNotaHistorico::inserir() -> return 1");
	return 1;
	
Error:
	ULOGE("AtendimentoNotaHistorico::inserir sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);	
}
