/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.2.1.6.3 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:36:43 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../include/cWFAtdObterParam.h"

/*
 *  Prototypes
 */
void proCGetPessoaLinhaHistorico(const long idAtendimento,unsigned long  *idPessoaHistoricoCRI);
void proCGetLinhaAtendimento( const unsigned long *idPessoaHistoricoCRI,long *idLinhaAtendimento );
void sqlError_WFAtdObterParam(sqlca*sqlca);

void proCObterLinha( DadosLinha *dl,st_AtdObterParam *dados,st_vlAtdObterParam *status )
{
    ULOG_START( "proCObterLinha()" );

    if ( -1 == status->idPessoaLinhaHistorico || !dados->idPessoaLinhaHistorico )
    {
        ULOG_END( "proCObterLinha():saida anormal" );
        return;
    }

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idPessoaLinhaHistorico = dados->idPessoaLinhaHistorico;

        int idPessoaDePara;
        int idTipoLinha;
        int idLinhaTelefonica;
        int idAreaRegistro;
        int cdAreaRegistro;
        int idUfOperadora;

        short i_idPessoaDePara;
        short i_idTipoLinha;
        short i_idLinhaTelefonica;
        short i_idAreaRegistro;
        short i_cdAreaRegistro;
        short i_idUfOperadora;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sqlError_WFAtdObterParam(&sqlca);
    EXEC SQL WHENEVER NOT FOUND GO TO saidaProCObterLinha;

	EXEC SQL 
        SELECT
            PL.IDPESSOADEPARA,
			LT.IDTIPOLINHA,
			LT.IDLINHATELEFONICA,
			LB.IDAREAREGISTRO,
			AR.CDAREAREGISTRO,
			AR.IDUFOPERADORA
		INTO
			idPessoaDePara:i_idPessoaDePara,
			idTipoLinha:i_idTipoLinha,
			idLinhaTelefonica:i_idLinhaTelefonica,
			idAreaRegistro:i_idAreaRegistro,
			cdAreaRegistro:i_cdAreaRegistro,
			idUfOperadora:i_idUfOperadora
		FROM
			CUSTOMER.PESSOALINHAHISTORICO PL,
			LINHA.LINHATELEFONICA LT,
			LINHA.LINHABASE LB,
			APOIO.AREAREGISTRO AR
		WHERE
			PL.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
			AND LT.IDLINHABASE = LB.IDLINHABASE
			AND LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
			AND PL.IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico
			AND ROWNUM <= 1;

    if ( dl )
    {
        dl->idPessoaDePara = idPessoaDePara;
        dl->idTipoLinha = idTipoLinha;
        dl->idLinhaTelefonica = idLinhaTelefonica;
        dl->cdAreaRegistro = cdAreaRegistro;
        dl->idAreaRegistro = idAreaRegistro;
        dl->idUfOperadora = idUfOperadora;

        ULOG("idPessoaDePara=%d",idPessoaDePara);
        ULOG("idTipoLinha=%d",idTipoLinha);
        ULOG("idLinhaTelefonica=%d",idLinhaTelefonica);
        ULOG("cdAreaRegistro=%d",cdAreaRegistro);
        ULOG("idAreaRegistro=%d",idAreaRegistro);
        ULOG("idUfOperadora=%d",idUfOperadora);
    }

saidaProCObterLinha:
    ULOG( "code=%d",sqlca.sqlcode );
    ULOG_END( "proCObterLinha()" );
}

void proCObterUfOperadora( DadosLinha *dl,st_AtdObterParam *dados,st_vlAtdObterParam *status )
{
    ULOG_START( "proCObterUfOperadora()" );

    if ( -1 == status->idAtendimento || !dados->idAtendimento )
    {
        ULOG_START( "proCObterUfOperadora(), saida anormal" );
        return;
    }

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = dados->idAtendimento;

        int cdAreaRegistro;
        int idUfOperadora;

        short i_cdAreaRegistro;
        short i_idUfOperadora;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sqlError_WFAtdObterParam(&sqlca);
    EXEC SQL WHENEVER NOT FOUND GO TO saidaProCObterUfOperadora;

	EXEC SQL 
        SELECT 
            AC.CDAREAREGISTRO,
			AR.IDUFOPERADORA
		INTO
			cdAreaRegistro:i_cdAreaRegistro,
			idUfOperadora:i_idUfOperadora
		FROM
			ATENDIMENTO.ATENDIMENTOCONTATO AC,
			APOIO.AREAREGISTRO AR
		WHERE
			AC.CDAREAREGISTRO = AR.CDAREAREGISTRO
			AND AC.IDATENDIMENTO = :idAtendimento
			AND ROWNUM <= 1;

    if ( dl )
    {
        dl->cdAreaRegistro = cdAreaRegistro;
        dl->idUfOperadora = idUfOperadora;

        ULOG("cdAreaRegistro=%d",cdAreaRegistro);
        ULOG("idUfOperadora=%d",idUfOperadora);
    }

saidaProCObterUfOperadora:
    ULOG( "code=%d",sqlca.sqlcode );
    ULOG_END( "proCObterUfOperadora()" );
}

void proCObterIdConta( DadosLinha *dl,char *_cdConta,char *_cdDigitoConta )
{
    ULOG_START("proCObterIdConta()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char *cdDigitoConta = _cdDigitoConta;
        char *cdConta = _cdConta;
        int idConta;
        short i_idConta;

    EXEC SQL END DECLARE SECTION;

    ULOG("cdConta: %s", cdConta);
    ULOG("cdDigitoConta: %s", cdDigitoConta);

    if ( dl ) { dl->idConta = 0; }

    EXEC SQL WHENEVER SQLERROR DO sqlError_WFAtdObterParam(&sqlca);
    EXEC SQL WHENEVER NOT FOUND GO TO saidaProCObterIdConta;

	EXEC SQL 
        SELECT
            IDCONTA
		INTO
			idConta:i_idConta
		FROM
			CUSTOMER.CONTA
		WHERE
			CDCONTA = :cdConta
		AND 
            ROWNUM < 2;

    if ( !sqlca.sqlcode ) 
    {
        if ( dl ) { dl->idConta = idConta; }
        ULOG("idConta: [%d]", idConta);
    }

saidaProCObterIdConta:
    ULOG( "code=%d",sqlca.sqlcode );
    ULOG_END("proCObterIdConta()" );
}

void proCGetPessoaLinhaHistorico( long idAtendimentoPrm,unsigned long  *idPessoaHistoricoCRIPrm )
{
    ULOG_START("proCGetPessoaLinhaHistorico()");

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        long _idAtendimento = idAtendimentoPrm;
        unsigned long idPessoaLinhaHistorico = 0;
        short i_idPessoaLinhaHistorico;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sqlError_WFAtdObterParam( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT 
            IDPESSOALINHAHISTORICO
        INTO
            :idPessoaLinhaHistorico:i_idPessoaLinhaHistorico
        FROM 
            ATENDIMENTO.GRUPOCRI
        WHERE 
            IDATENDIMENTO = :_idAtendimento;

    if ( 0==sqlca.sqlcode)
    {
        *idPessoaHistoricoCRIPrm = idPessoaLinhaHistorico;
        ULOG("idPessoaLinhaHistorico [%lu]",*idPessoaHistoricoCRIPrm );
    }

    ULOG_END("proCGetPessoaLinhaHistorico()");
}

void proCGetLinhaAtendimento(const unsigned long *idPessoaHistoricoCRI,long *idLinhaAtendimento )
{
    ULOG_START("proCGetLinhaAtendimento()");
    
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        const unsigned long _idPessoaHistoricoCRI = *idPessoaHistoricoCRI;
        long _idLinhaAtendimento = 0;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sqlError_WFAtdObterParam( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

   	EXEC SQL 
        SELECT
			LT.IDLINHATELEFONICA
		INTO
			:_idLinhaAtendimento
		FROM
			CUSTOMER.PESSOALINHAHISTORICO PL,
			LINHA.LINHATELEFONICA LT,
			LINHA.LINHABASE LB,
			APOIO.AREAREGISTRO AR
		WHERE
			PL.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
			AND LT.IDLINHABASE = LB.IDLINHABASE
			AND LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
			AND PL.IDPESSOALINHAHISTORICO = :_idPessoaHistoricoCRI
			AND ROWNUM < 2;

    *idLinhaAtendimento = _idLinhaAtendimento;

    ULOG("idLinhaAtendimento=%lu",*idLinhaAtendimento);

    ULOG_END("proCGetLinhaAtendimento()");
}

void sqlError_WFAtdObterParam(sqlca*sqlca)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("sqlError_WFAtdObterParam:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
