/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:34:01 $
 **/

#include "../include/cObtCampoDinPC.h"

void cObtCampoDinPC::obtemCampoDinamicoPC( st_VariaveisObtCampoDin *_dadosEntradaPC, Collection *_ResultadoPC )
{
    ULOG_START("cObtCampoDinPC::obtemCampoDinamicoPC()");
    struct sqlca sqlca;
    st_VariaveisObtCampoDin * pResult;

    EXEC SQL BEGIN DECLARE SECTION;
        int idCampoParam = _dadosEntradaPC->idCampo ?
                                atoi( _dadosEntradaPC->idCampo ) : 0;
        //char query[ 501 ];
        char *query;
        char findText[ 256 ];

        VARCHAR QueryWrk[ 501 ];
        VARCHAR idDominio[ 256 ];
        VARCHAR nmDominio[ 256 ];

        short i_QueryWrk=-1;
        short i_idDominio=-1;
        short i_nmDominio=-1;
    EXEC SQL END DECLARE SECTION;

    ULOG("SELECT dsQuery FROM ContatoAdm.CampoDominio WHERE idCampo = %d",idCampoParam);

    QueryWrk.arr[0] = 0;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFpsqObtCampoDin( &sqlca );
    EXEC SQL
        SELECT
			dsQuery
        INTO
            :QueryWrk:i_QueryWrk
		FROM
			ContatoAdm.CampoDominio
		WHERE
			idCampo = :idCampoParam;

    if ( i_QueryWrk < 0 || QueryWrk.arr[0] == 0 )
    {
        ULOG_END("< obtemCampoDinamicoPC (1)");
        return;
    }

    CONVIND( QueryWrk,i_QueryWrk );
    
    query = (char *)QueryWrk.arr;

    ULOG("query = '%s'",query);

    sprintf( findText,"%.*s",sizeof(findText)-1
         , _dadosEntradaPC->textoPesquisa ? 
            (char *)_dadosEntradaPC->textoPesquisa : "(null)");

    ULOG("findText = '%s'",findText);

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

	EXEC SQL PREPARE dominioRsQuery FROM :query;
	EXEC SQL DECLARE consultaRsQuery CURSOR FOR dominioRsQuery;

	EXEC SQL OPEN consultaRsQuery USING :findText;

    for(;;)
    {
         EXEC SQL FETCH consultaRsQuery INTO 
							         :idDominio:i_idDominio, 
							         :nmDominio:i_nmDominio;

         CONVIND(idDominio, i_idDominio);
         CONVIND(nmDominio, i_nmDominio);

         pResult = new st_VariaveisObtCampoDin;
         if ( pResult )
         {
            strcpy( pResult->idDominio,(char*)idDominio.arr );
            strcpy( pResult->nmDominio,(char*)nmDominio.arr );
            _ResultadoPC->AddItem( (void*) pResult );
         }
         else
         {
            ULOGE(erroFalhaAlocacaoMemoria());
         }
    }

    EXEC SQL CLOSE consultaRsQuery;

    ULOG_END("cObtCampoDinPC::obtemCampoDinamicoPC()");
}

void cObtCampoDinPC::sql_error_WFpsqObtCampoDin( sqlca * sqlca )
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE(sqlca->sqlerrm.sqlerrmc);

	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
