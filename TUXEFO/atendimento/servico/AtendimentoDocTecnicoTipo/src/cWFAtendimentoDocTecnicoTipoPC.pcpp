#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"

#include <tuxfw.h>
#include "../include/cWFAtendimentoDocTecnicoTipo.h"
#include "../include/stWFAtendimentoDocTecnicoTipo.h"

void sql_error_WFAtendimentoDocTecnicoTipo(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoDocTecnicoTipo.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoDocTecnicoTipo(st_AtendimentoDocTecnicoTipo* dados, st_vlAtendimentoDocTecnicoTipo* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoDocTecnicoTipo   oDados;
		struct st_vlAtendimentoDocTecnicoTipo oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoTipo(&sqlca);

	EXEC SQL SELECT Atendimento.DocumentoTecnicoTipoSQ.NEXTVAL INTO :oDados.idDocumentoTecnicoTipo FROM DUAL;

	EXEC SQL 
		INSERT INTO
			ATENDIMENTO.DOCUMENTOTECNICOTIPO
			(
				IDDOCUMENTOTECNICOTIPO,
				DSDOCUMENTOTECNICOTIPO,
                DTULTIMAALTERACAO,
                IDUSUARIOALTERACAO
			)
			VALUES
			(
				:oDados.idDocumentoTecnicoTipo,
				:oDados.dsDocumentoTecnicoTipo,
                SYSDATE,
                NULL
			);

	saida->createTag("WFDocumentoTecnicoTipoVO");
		saida->addItem("idDocumentoTecnicoTipo", oDados.idDocumentoTecnicoTipo);
	saida->closeTag();

	return true;
}

bool proCAlterarWFAtendimentoDocTecnicoTipo(st_AtendimentoDocTecnicoTipo* dados, st_vlAtendimentoDocTecnicoTipo* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoDocTecnicoTipo   oDados;
		struct st_vlAtendimentoDocTecnicoTipo oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoTipo(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE Atendimento.DocumentoTecnicoTipo SET ");

	bool separa = false;

	if (status->idDocumentoTecnicoTipo != -1)
		montaUpdate("idDocumentoTecnicoTipo", oDados.idDocumentoTecnicoTipo, TIPO_INT);

	sprintf(query, "%s WHERE idDocumentoTecnicoTipo = %i", query, dados->idDocumentoTecnicoTipo);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoDocTecnicoTipo(st_AtendimentoDocTecnicoTipo* dados, st_vlAtendimentoDocTecnicoTipo* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnicoTipo = dados->idDocumentoTecnicoTipo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoTipo(&sqlca);

	EXEC SQL 
		DELETE
			Atendimento.DocumentoTecnicoTipo
		WHERE
			idDocumentoTecnicoTipo = :idDocumentoTecnicoTipo;

	return true;
}

bool proCConsultaWFAtendimentoDocTecnicoTipo(st_AtendimentoDocTecnicoTipo* dados, st_vlAtendimentoDocTecnicoTipo* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnicoTipo;
		VARCHAR dsDocumentoTecnicoTipo[256];

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf( query,"SELECT idDocumentoTecnicoTipo, dsDocumentoTecnicoTipo FROM Atendimento.DocumentoTecnicoTipo " );

	bool separa = false;

	if (status->idDocumentoTecnicoTipo != -1) 
		montaWhere("idDocumentoTecnicoTipo", dados->idDocumentoTecnicoTipo, TIPO_INT);

	if (status->dsDocumentoTecnicoTipo != -1) 
		montaWhere("dsDocumentoTecnicoTipo", dados->dsDocumentoTecnicoTipo, TIPO_CHAR);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoDocTecnicoTipo(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoDocTecnicoTipo FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoDocTecnicoTipo;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idDocumentoTecnicoTipo, :dsDocumentoTecnicoTipo;

      dsDocumentoTecnicoTipo.arr[dsDocumentoTecnicoTipo.len] = 0x0;
		saida->createTag("WFDocumentoTecnicoTipoVO");
			saida->addItem("idDocTecTipo", idDocumentoTecnicoTipo);
			saida->addItem("dsDocTecTipo", (char *)dsDocumentoTecnicoTipo.arr);
		saida->closeTag();
      dsDocumentoTecnicoTipo.arr[0] = 0x0;
	}

	EXEC SQL CLOSE consulta;

	return true;

}

void sql_error_WFAtendimentoDocTecnicoTipo(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
