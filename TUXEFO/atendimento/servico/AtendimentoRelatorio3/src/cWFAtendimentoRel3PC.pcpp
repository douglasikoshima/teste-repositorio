/**
 * 
 * @modulo  Workflow
 * @remark  Relatório de Produtividade por Representante BKO
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:29 $
 **/


#ifdef WIN32
#pragma warning(disable:4786)
#endif

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>
#include <time.h>
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRel3.h"

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#define MAXCOLUNAS  17
#define COL_FIXAS    4
EXEC SQL END DECLARE SECTION;

// Vetor contendo valores lógicos onde cada item representa uma coluna da clausula select
// sendo executada; Se o valor do vetor respectivo a coluna = true; é gerada uma tag no
// xml de saida respectiva ao dado da coluna, mesmo que o valor do dado seja = NULL.
// Caso contrário se o valor do vetor for diferente de true, a coluna não foi solicitada
// na clausula select e não é gerada uma saida xml para a coluna.
bool bColunas[MAXCOLUNAS];

void MontarQuebra(string &idColunas
                 ,string &group
                 ,string &order
                 ,string &nmColuna
                 ,DOMNode *entrada
                 ,char *dnode);

bool proCExecutarRelatorio3( st_AtendimentoRel *dados
                           , st_vlAtendimentoRel *status
                           , XMLGen *saida
                           , DOMNode *dnode )
{
    char valor[32];
    struct sqlca sqlca;
    string idColunasTmp;
    string where;
    string group;
    string order;
    string nmColuna;
    string queryDin ;
    int i;
    
    ULOG_START("proCExecutarRelatorio3()");
    
    

    if ( !dados )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    WFAtdRelCompletarWhere(where,dnode,"StatusUsuarioVO");
    WFAtdRelCompletarWhere(where,dnode,"WFFaseVO");
    WFAtdRelCompletarWhere(where,dnode,"FiltroDetalhe");

    MontarQuebra(idColunasTmp,group,order,nmColuna,dnode,"WFRelatoriosQuebraVO");

    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    EXEC SQL BEGIN DECLARE SECTION;
        char *query;
        short i_colunas[MAXCOLUNAS];
        VARCHAR colunas[MAXCOLUNAS][256];
    EXEC SQL END DECLARE SECTION;

    queryDin =  "SELECT ";
    queryDin += idColunasTmp;
    queryDin +=       "QTFECHADOS,QTRETORNO,QTTRATAMENTO,QTENCERRADOS "
               "FROM "
               "(      ";

    queryDin += "SELECT ROWNUM AS NLIN,";
    queryDin += idColunasTmp;
    queryDin +=       "QTFECHADOS,QTRETORNO,QTTRATAMENTO,QTENCERRADOS "
               "FROM "
               "(      "
                   "SELECT ";
    queryDin += idColunasTmp;
    queryDin +=            "SUM(QTFECHADOS) AS QTFECHADOS,SUM(QTRETORNO) AS QTRETORNO "
                         ",SUM(QTTRATAMENTO) AS QTTRATAMENTO "
                         ",SUM(QTENCERRADOS) AS QTENCERRADOS "
                   "FROM "
                   "( "
                       "SELECT ";
    queryDin += idColunasTmp;
    queryDin +=               "QTFECHADOS,QTRETORNO,QTTRATAMENTO,QTENCERRADOS "
                       "FROM "
                       "( "
                           "SELECT  "
                                "IDGRUPOOPERADORA "
                               ",NMGRUPOOPERADORA "
                               ",IDUFOPERADORA "
                               ",IDUF "
                               ",SGUF "
                               ",UF "
                               ",IDGRUPO "
                               ",NMGRUPO "
                               ",IDPESSOAUSUARIO "
                               ",NMLOGINUSUARIO "
                               ",NMNOME "
                               ",IDSTATUSUSUARIO "
                               ",SGSTATUSUSUARIO "
                               ",QTFECHADOS "
                               ",QTRETORNO "
                               ",QTTRATAMENTO "
                               ",QTENCERRADOS "
                           "FROM "
                           "( "
                               "SELECT  "
                                    "GRUPOOPERADORA.IDGRUPOOPERADORA "
                                   ",GRUPOOPERADORA.NMGRUPOOPERADORA "
                                   ",UFOPERADORA.IDUFOPERADORA "
                                   ",UFOPERADORA.IDUF "
                                   ",UF.SGUF "
                                   ",UF.NMUF AS UF "
                                   ",GRUPO.IDGRUPO "
                                   ",GRUPO.NMGRUPO "
                                   ",USUARIO.IDPESSOAUSUARIO "
                                   ",USUARIO.NMLOGINUSUARIO "
                                   ",PESSOA.NMNOME || ' ' || PESSOA.NMSOBRENOME AS NMNOME "
                                   ",STATUSUSUARIO.IDSTATUSUSUARIO "
                                   ",STATUSUSUARIO.SGSTATUSUSUARIO "
                                   ",QTFECHADOS "
                                   ",QTRETORNO "
                                   ",QTTRATAMENTO "
                                   ",QTENCERRADOS "
                               "FROM "
                                    "CUSTOMER.PESSOA PESSOA "
                                   ",ATENDIMENTO.AUXATDPRODREPR AUXATDPRODREPR "
                                   ",ACESSO.GRUPO GRUPO "
                                   ",CUSTOMER.GRUPOOPERADORA GRUPOOPERADORA "
                                   ",CUSTOMER.UFOPERADORA UFOPERADORA "
                                   ",APOIO.UF UF "
                                   ",ACESSO.USUARIO USUARIO "
                                   ",APOIO.STATUSUSUARIO STATUSUSUARIO "
                               "WHERE "
                                    "AUXATDPRODREPR.IDGRUPO = GRUPO.IDGRUPO "
                                "AND "
                                    "AUXATDPRODREPR.IDGRUPOOPERADORA = GRUPOOPERADORA.IDGRUPOOPERADORA "
                                "AND "
                                    "AUXATDPRODREPR.IDPESSOAUSUARIO = USUARIO.IDPESSOAUSUARIO "
                                "AND "
                                    "AUXATDPRODREPR.IDPESSOAUSUARIO = PESSOA.IDPESSOA "
                                "AND "
                                    "AUXATDPRODREPR.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
                                "AND "
                                    "UFOPERADORA.IDUF = UF.IDUF "
                                "AND "
                                    "AUXATDPRODREPR.IDPESSOAUSUARIO = USUARIO.IDPESSOAUSUARIO "
                                "AND "
                                    "USUARIO.IDSTATUSUSUARIO = STATUSUSUARIO.IDSTATUSUSUARIO "
                                "AND "
                                    "( AUXATDPRODREPR.QTENCERRADOS + AUXATDPRODREPR.QTFECHADOS  "
                                    "+ AUXATDPRODREPR.QTRETORNO + AUXATDPRODREPR.QTTRATAMENTO ) > 0 ";
   
    if( -1 != status->idOperadora )
    {
        sprintf(valor,"%d",dados->idOperadora);
        queryDin += " AND AUXATDPRODREPR.IDGRUPOOPERADORA=" + (string)valor;
    }

    if( (-1 != status->idRegional) || (-1 != status->idUF) )
    {
        sprintf(valor,"%d",dados->idRegional);
        queryDin += " AND AUXATDPRODREPR.IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->idGrupo )
    {
        sprintf(valor,"%d",dados->idGrupo);
        queryDin += " AND AUXATDPRODREPR.IDGRUPO=" + (string)valor;
    }

    if( -1 != status->dtInicio )
    {
        queryDin += " AND AUXATDPRODREPR.DTABERTURA >= (SELECT TO_DATE('"
                        + (string)dados->dtInicio + "','DD/MM/YYYY') FROM DUAL)";
    }

    if( -1 != status->dtFim )
    {
        queryDin += " AND AUXATDPRODREPR.DTABERTURA <= (SELECT TO_DATE('" + (string)dados->dtFim + "','DD/MM/YYYY') FROM DUAL)";
    }

    queryDin += ") ";

    if ( where.size() )
    {
        queryDin += " WHERE " + where;
    }

    queryDin += ") ) ";

    if ( group.size() )
    {
        queryDin += " GROUP BY " + group;
        queryDin += " ORDER BY " + order;
    }
	
    queryDin += ")) WHERE NLIN >= " + (string)linIni + " AND NLIN <= " + (string)linFin;

    query = (char*)queryDin.c_str();

    char szLog[1025];
    int x = 0,tam=strlen(query);
    while ( x < tam )
    {
        sprintf(szLog,"%.1024s",query+x);
        ULOG("%s",szLog);
        x += 1024;
    }

    saida->createTag("WFRelatorioDinamicoVO");
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");

    WFAtdRelGerarHeaderSaidaXML(nmColuna,saida,dnode);
    
    for ( i=0; i<MAXCOLUNAS;i++ )
    {
        colunas[i].arr[0] = 0;
        colunas[i].len = 0;
    }

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR recebeQuery;

    EXEC SQL OPEN consulta;

    int nRegs = 0;

    while ( true ) 
    {
        EXEC SQL FETCH consulta INTO :colunas[ 0]:i_colunas[ 0],
                                     :colunas[ 1]:i_colunas[ 1],
                                     :colunas[ 2]:i_colunas[ 2],
                                     :colunas[ 3]:i_colunas[ 3],
                                     :colunas[ 4]:i_colunas[ 4],
                                     :colunas[ 5]:i_colunas[ 5],
                                     :colunas[ 6]:i_colunas[ 6],
                                     :colunas[ 7]:i_colunas[ 7],
                                     :colunas[ 8]:i_colunas[ 8],
                                     :colunas[ 9]:i_colunas[ 9],
                                     :colunas[10]:i_colunas[10],
                                     :colunas[11]:i_colunas[11],
                                     :colunas[12]:i_colunas[12],
                                     :colunas[13]:i_colunas[13],
                                     :colunas[14]:i_colunas[14],
                                     :colunas[15]:i_colunas[15],
                                     :colunas[16]:i_colunas[16];

        nRegs ++ ;
        if ( dados->qtdLinhasBloco >= nRegs )
        {
            saida->createTag("ValoresRelatorio");

            for ( i=0;i<MAXCOLUNAS;i++ )
            {
                CONVIND(colunas[i],i_colunas[i]);

			    if ( bColunas[i] ) 
			    {
                    WFAtdRelGerarDadosSaidaXML((VARCHAR*)&colunas[i],saida);
			    }
		    }

		    saida->closeTag();
        }
	}

    if (dados->qtdLinhasBloco < nRegs )
        saida->addItem("inFin", 0 );
    else
        saida->addItem("inFin", sqlca.sqlcode == 1403 ? true:false);

    saida->closeTag();

    EXEC SQL CLOSE consulta;
    
    ULOG_END("proCExecutarRelatorio3()");

    return true;
}

void MontarQuebra(string &idColunas,string &group,string &order,string &nmColuna,DOMNode *entrada,char *dnode)
{
    char *p0;
    DOMNode *dn;
    int index = 0;
    int i;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index ) )
    {
        if ( p0 = tx.walkTree(dn,"idCampo",0),p0 )
        {
            if ( group.size() )
            {
                group += ",";
                order += ",";
                nmColuna += ",";
            }

            idColunas += (string)p0 + ",";
            group += (string)p0;

            if ( isCampoAlfanumerico(p0) )
            {
                order += "UPPER(" + (string)p0 + ")";
            }
            else
            {
                order += (string)p0;
            }

            nmColuna += (string)p0 + ",";
            XMLString::release(&p0);
        }

        bColunas[index] = true;

        index++;
    }

    for ( i=index; i<MAXCOLUNAS-COL_FIXAS; i++ )
    {
        bColunas[i] = false;
    }

    for ( i=MAXCOLUNAS-COL_FIXAS; i<MAXCOLUNAS; i++ )
    {
        bColunas[i] = true;
    }

    nmColuna += obterNomeColunaFixa(ID_QTDE_FECHADOS);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_NUM_TENT_RETORNO);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_NUM_TENT_TRATMTO);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_NUM_ENCERRADOS);

    index += COL_FIXAS;

    for ( i=index; i<MAXCOLUNAS; i++ )
    {
        idColunas += "NULL,";
    }

    ULOG( "group=%s",group.c_str() );
    ULOG( "Nomes de colunas=%s",nmColuna.c_str() );
}
