#include"../include/classdef.h"

EXEC SQL WHENEVER SQLERROR DO sql_error_PesquisaGrupos(&sqlca);

void GrupoRetornoWFCTI::Insert()
{
   ULOG_START("GrupoRetornoWFCTI::Insert()");
	INITIALIZE_SQL;
	EXEC SQL BEGIN DECLARE SECTION;
		int idgruporetornowfcti;
		int idretornowfcti;
		int idusuariogrupo;
		int idusuarioalteracao;
	EXEC SQL END DECLARE SECTION;

	if(grwfcti.idretornowfcti<0||grwfcti.idusuariogrupo<0)
		throw new TuxBasicSvcException("00E9999","Invalid field value");

	EXEC SQL SELECT workflow.GrupoRetornoWFCTISQ.nextval INTO :idgruporetornowfcti FROM DUAL;

	idretornowfcti=grwfcti.idretornowfcti;
	idusuariogrupo=grwfcti.idusuariogrupo;
	idusuarioalteracao=grwfcti.idusuarioalteracao;

	EXEC SQL INSERT INTO workflow.GrupoRetornoWFCTI
		(idgruporetornowfcti,idretornowfcti,idgrupo,idusuarioalteracao,dtultimaalteracao)
		VALUES
		(:idgruporetornowfcti,:idretornowfcti,:idusuariogrupo,:idusuarioalteracao,SYSDATE);

	pxml->createTag(GRUPORETORNOWFCTIVO);
	pxml->addItem(IDGRUPORETORNOWFCTI,idgruporetornowfcti);
	pxml->closeTag();
	
	ULOG_END("GrupoRetornoWFCTI::Insert()");
	
	return;

}
void GrupoRetornoWFCTI::Delete()
{
   ULOG_START("GrupoRetornoWFCTI::Delete()");
   
	INITIALIZE_SQL;
	EXEC SQL BEGIN DECLARE SECTION;
		int idgruporetornowfcti;
	EXEC SQL END DECLARE SECTION;
	if(grwfcti.idgruporetornowfcti<0)
		throw new TuxBasicSvcException("00E9999","Invalid idGrupoRetornoWFCTI value");

	idgruporetornowfcti=grwfcti.idgruporetornowfcti;

	EXEC SQL DELETE FROM workflow.GrupoRetornoWFCTI WHERE idgruporetornowfcti=:idgruporetornowfcti;

	pxml->createTag(GRUPORETORNOWFCTIVO);
	pxml->addItem(IDGRUPORETORNOWFCTI,idgruporetornowfcti);
	pxml->closeTag();
	
	ULOG_END("GrupoRetornoWFCTI::Delete()");
	
	return;

}
void GrupoRetornoWFCTI::DeleteByID()
{
   
   ULOG_START("GrupoRetornoWFCTI::DeleteByID()");
   
	INITIALIZE_SQL;
	EXEC SQL BEGIN DECLARE SECTION;
		int idretornowfcti;
	EXEC SQL END DECLARE SECTION;
	if(grwfcti.idretornowfcti<0)
		throw new TuxBasicSvcException("00E9999","Invalid idGrupoRetornoWFCTI value");

	idretornowfcti=grwfcti.idretornowfcti;

	EXEC SQL DELETE FROM workflow.GrupoRetornoWFCTI WHERE idretornowfcti=:idretornowfcti;

	pxml->createTag(GRUPORETORNOWFCTIVO);
	pxml->addItem(IDGRUPORETORNOWFCTI,idretornowfcti);
	pxml->closeTag();
	
	ULOG_END("GrupoRetornoWFCTI::DeleteByID()");
	
	return;

}
void GrupoRetornoWFCTI::Update()
{
   ULOG_START("GrupoRetornoWFCTI::Update()");
	INITIALIZE_SQL;
	EXEC SQL BEGIN DECLARE SECTION;
		int idgruporetornowfcti;
		int idretornowfcti;
		int idusuariogrupo;
		int idusuarioalteracao;
	EXEC SQL END DECLARE SECTION;
	if(grwfcti.idretornowfcti<0||grwfcti.idusuariogrupo<0||grwfcti.idgruporetornowfcti<0)
		throw new TuxBasicSvcException("00E9999","Invalid field value");

	idgruporetornowfcti=grwfcti.idgruporetornowfcti;
	idretornowfcti=grwfcti.idretornowfcti;
	idusuariogrupo=grwfcti.idusuariogrupo;
	idusuarioalteracao=grwfcti.idusuarioalteracao;

	EXEC SQL UPDATE workflow.GrupoRetornoWFCTI SET
		idretornowfcti=:idretornowfcti,
		idgrupo=:idusuariogrupo,
		idusuarioalteracao=:idusuarioalteracao,
		dtultimaalteracao=SYSDATE
	WHERE idgruporetornowfcti=:idgruporetornowfcti;

	pxml->createTag(GRUPORETORNOWFCTIVO);
	pxml->addItem(IDGRUPORETORNOWFCTI,idgruporetornowfcti);
	pxml->closeTag();
	
	ULOG_END("GrupoRetornoWFCTI::Update()");
	
	return;

}
void GrupoRetornoWFCTI::SelectGroupsByRetWFCTI()
{
   ULOG_START("GrupoRetornoWFCTI::SelectGroupsByRetWFCTI()");
   
	INITIALIZE_SQL;

	EXEC SQL BEGIN DECLARE SECTION;

		int idretornowfcti = grwfcti.idretornowfcti;

		struct
		{
			int idgrupo;
			VARCHAR nmgrupo[256];
		} sgrwc;

	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND DO break;

	if (grwfcti.idretornowfcti >= 0)
	{


		if (grwfcti.inpadrao == 1)
		{
			SelectGroupsPdrCam();
		}
		else
		{
			SelectGroupsNPdCam();
		}
		
		EXEC SQL DECLARE 
			crSelectRGrpU 
		CURSOR FOR
			SELECT 
				a.idgrupo,
				a.nmgrupo
			FROM 
				acesso.grupo a,
				workflow.gruporetornowfcti b
			WHERE 
				a.idgrupo = b.idgrupo AND 
				b.idretornowfcti = :idretornowfcti
			GROUP BY 
				a.idgrupo,
				nmgrupo;

		EXEC SQL OPEN crSelectRGrpU;
		
		for(;;)
		{
			EXEC SQL FETCH crSelectRGrpU INTO :sgrwc;
		
			CL_FETCH(sgrwc.nmgrupo);

			pxml->createTag("WFGrupoSelecionadoVO");
			pxml->addItem("idGrupo",sgrwc.idgrupo);
			pxml->addItem("dsGrupo",(char*)sgrwc.nmgrupo.arr);
			pxml->closeTag();
		}

		EXEC SQL CLOSE crSelectRGrpU;

	}
	else
	{
		if (grwfcti.inpadrao > 0)
		{
			SelectGroupsPdrTodos();
		}
		else
		{
			SelectGroupsNPdTodos();
		}
	}

   ULOG_END("GrupoRetornoWFCTI::SelectGroupsByRetWFCTI()");
   
	return;

}

/**
	Obtem os grupos disponiveis da para a campanha indicada.
	Esse processo não leva em conta a ligação do grupo em outras campanhas.
*/
void GrupoRetornoWFCTI::SelectGroupsPdrCam()
{
   ULOG_START("GrupoRetornoWFCTI::SelectGroupsPdrCam()");
   
	INITIALIZE_SQL;

	EXEC SQL BEGIN DECLARE SECTION;

		int idretornowfcti = grwfcti.idretornowfcti;

		struct
		{
			int idgrupo;
			VARCHAR nmgrupo[256];
		} sgrwc;

	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE 
		crSelectRGrp 
	CURSOR FOR
		SELECT 
			idgrupo,
			nmgrupo 
		FROM 
			acesso.grupo
		WHERE 
			idGrupo NOT IN (
						SELECT 
							a.idgrupo
						FROM 
							acesso.grupo a,
							workflow.gruporetornowfcti b
						WHERE 
							a.idgrupo=b.idgrupo AND 
							a.idgrupo=acesso.grupo.idgrupo AND 
							b.idretornowfcti = :idretornowfcti
					)
		GROUP BY 
			idgrupo,
			nmgrupo
		ORDER BY
			nmGrupo;

		EXEC SQL OPEN crSelectRGrp;

		for(;;)
		{
			EXEC SQL FETCH crSelectRGrp INTO :sgrwc;

			CL_FETCH(sgrwc.nmgrupo);

			pxml->createTag("WFGrupoDisponivelVO");
			pxml->addItem("idGrupo",sgrwc.idgrupo);
			pxml->addItem("dsGrupo",(char*)sgrwc.nmgrupo.arr);
			pxml->closeTag();
		}

		EXEC SQL CLOSE crSelectRGrp;
		
		ULOG_END("GrupoRetornoWFCTI::SelectGroupsPdrCam()");

}


/**
	Obtem os grupos disponiveis da para a campanha indicada.
	Esse processo leva em conta a ligação do grupo em outras campanhas.
*/
void GrupoRetornoWFCTI::SelectGroupsNPdCam()
{
   ULOG_START("GrupoRetornoWFCTI::SelectGroupsNPdCam()");
   
	INITIALIZE_SQL;

	EXEC SQL BEGIN DECLARE SECTION;

		int idretornowfcti = grwfcti.idretornowfcti;

		struct
		{
			int idgrupo;
			VARCHAR nmgrupo[256];
		} sgrwc;

	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE 
		crSelectRGrpNP
	CURSOR FOR
		SELECT 
			idgrupo,
			nmgrupo 
		FROM 
			acesso.grupo
		WHERE 
			idGrupo NOT IN
					(
						SELECT 
							a.idgrupo
						FROM 
							acesso.grupo a,
							workflow.gruporetornowfcti b,
							workflow.RetornoWFCTI c
						WHERE 
							a.idgrupo = b.idgrupo AND 
							a.idgrupo = a.idgrupo AND 
							c.idRetornoWFCTI = b.idRetornoWFCTI AND 
							c.inPadrao = 0
					)
		GROUP BY 
			idgrupo,
			nmgrupo;

		EXEC SQL OPEN crSelectRGrpNP;

		for(;;)
		{
			EXEC SQL FETCH crSelectRGrpNP INTO :sgrwc;

			CL_FETCH(sgrwc.nmgrupo);

			pxml->createTag("WFGrupoDisponivelVO");
			pxml->addItem("idGrupo",sgrwc.idgrupo);
			pxml->addItem("dsGrupo",(char*)sgrwc.nmgrupo.arr);
			pxml->closeTag();
		}

		EXEC SQL CLOSE crSelectRGrpNP;
		
		ULOG_END("GrupoRetornoWFCTI::SelectGroupsNPdCam()");
}

/**
	Seleciona todos os grupos do sistema.
*/
void GrupoRetornoWFCTI::SelectGroupsPdrTodos()
{
   ULOG_START("GrupoRetornoWFCTI::SelectGroupsPdrTodos()");
   
	INITIALIZE_SQL;

	EXEC SQL BEGIN DECLARE SECTION;

		struct
		{
			int idgrupo;
			VARCHAR nmgrupo[256];
		} sgrwc;

	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE 
		crTodosGrupos1
	CURSOR FOR
		SELECT 
			a.idgrupo,
			a.nmgrupo
		FROM 
			acesso.grupo a
		ORDER BY
			nmgrupo;


		for(;;)
		{
			EXEC SQL FETCH crTodosGrupos1 INTO :sgrwc;

			CL_FETCH(sgrwc.nmgrupo);

			pxml->createTag("WFGrupoDisponivelVO");
			pxml->addItem("idGrupo",sgrwc.idgrupo);
			pxml->addItem("dsGrupo",(char*)sgrwc.nmgrupo.arr);
			pxml->closeTag();
		}

		EXEC SQL CLOSE crTodosGrupos1;
		
		ULOG_END("GrupoRetornoWFCTI::SelectGroupsPdrTodos()");
}

/**
	Seleciona todos os grupos que não possuem nenhum tipo de ligação com campanhas não padrão.
*/
void GrupoRetornoWFCTI::SelectGroupsNPdTodos()
{
   
   ULOG_START("GrupoRetornoWFCTI::SelectGroupsNPdTodos()");

	INITIALIZE_SQL;

	EXEC SQL BEGIN DECLARE SECTION;

		struct
		{
			int idgrupo;
			VARCHAR nmgrupo[256];
		} sgrwc;

	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE 
		crTodosGrupos0
	CURSOR FOR
		SELECT 
			idGrupo, 
			nmGrupo 
		FROM  
			acesso.Grupo
		WHERE
			idGrupo NOT IN (
							SELECT 
					 			a.idgrupo
							FROM 
					 	  		acesso.grupo a,
								workflow.gruporetornowfcti b,
								workflow.RetornoWFCTI c
							WHERE 
					 			a.idgrupo = b.idgrupo AND 
								c.idRetornoWFCTI = b.idRetornoWFCTI AND 
								c.inPadrao = 0
							GROUP BY 
					  			a.idgrupo,
								nmgrupo
						   )
		ORDER BY
			nmGrupo;


	for(;;)
	{
		EXEC SQL FETCH crTodosGrupos0 INTO :sgrwc;

		CL_FETCH(sgrwc.nmgrupo);

		pxml->createTag("WFGrupoDisponivelVO");
		pxml->addItem("idGrupo",sgrwc.idgrupo);
		pxml->addItem("dsGrupo",(char*)sgrwc.nmgrupo.arr);
		pxml->closeTag();
	}

	EXEC SQL CLOSE crTodosGrupos0;
	
	ULOG_END("GrupoRetornoWFCTI::SelectGroupsNPdTodos()");

}

void GrupoRetornoWFCTI::sql_error_PesquisaGrupos(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
