#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tuxfw.h>

int ConsultaProcedenciaSel( const char *whereClause,XMLGen *xml )
{
   ULOG_START("ConsultaProcedenciaSel()");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_sgProcedencia[256];
		int     ORA_idProcedencia;
		int     ORA_where;
	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode=0;

    ORA_where = atoi( whereClause );
	memset( (char *)ORA_sgProcedencia.arr , 0x0 , sizeof(ORA_sgProcedencia.arr) );

    EXEC SQL DECLARE tbProcedencia CURSOR FOR 
      Select b.dsProcedencia , b.idProcedencia
      From contatoadm.ProcedenciaGrupo a,
           apoio.Procedencia           b
      Where a.IdProcedencia = b.IdProcedencia 
        AND a.IdGrupo = :ORA_where
        order by b.dsProcedencia;

	EXEC SQL OPEN tbProcedencia;
   EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
   EXEC SQL WHENEVER NOT FOUND DO break;
   
   int   ret = 1 ;
   
	if( sqlca.sqlcode )
		ret = 0;
	else
	{
		for( ;; )
		{
		   EXEC SQL FETCH tbProcedencia INTO :ORA_sgProcedencia , :ORA_idProcedencia;
           xml->createTag( "ProcedenciaVO" );
           xml->addItem( "codigo",ORA_idProcedencia );
           ORA_sgProcedencia.arr[ ORA_sgProcedencia.len ] = 0x0;
           xml->addItem( "descricao",(char*)ORA_sgProcedencia.arr );
		   xml->closeTag();
		   memset( (char *)ORA_sgProcedencia.arr , 0x0 , sizeof(ORA_sgProcedencia.arr) );
		}
		EXEC SQL CLOSE tbProcedencia;
	}
	
	ULOG_END("ConsultaProcedenciaSel()");
	
	return ret;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);

}

