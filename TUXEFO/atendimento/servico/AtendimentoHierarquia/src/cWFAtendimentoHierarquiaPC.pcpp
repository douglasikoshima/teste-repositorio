#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include"../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoHierarquia.h"
#include "../include/stWFAtendimentoHierarquia.h"

void sql_error_WFAtendimentoHierarquia(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoHierarquia.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoHierarquia(st_AtendimentoHierarquia* dados, st_vlAtendimentoHierarquia* status, XMLGen* saida, XMLDPR *xmlDpr)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoHierarquia   oDados;
		struct st_vlAtendimentoHierarquia oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoHierarquia(&sqlca);

	EXEC SQL 
		INSERT INTO
			ATENDIMENTO.ATENDIMENTOHIERARQUIA
			(
				IDATENDIMENTO,
				IDATENDIMENTOPAI,
                DTULTIMAALTERACAO,
                IDUSUARIOALTERACAO
			)
			VALUES
			(
				:oDados.idAtendimento,
				:oDados.idAtendimentoPai,
                SYSDATE,
                NULL
			);

	saida->createTag("Registro");
		saida->addItem("idAtendimento", oDados.idAtendimento);
	saida->closeTag();

    // ==> SM324--DPR--DEZ/2006--Cassio
    if ( xmlDpr )
    {
        AtendimentoHierarquiaDPR atendimentohierarquiadpr;

        atendimentohierarquiadpr.setIdAtendimento(oDados.idAtendimento);
        atendimentohierarquiadpr.setIdAtendimentoPai(oDados.idAtendimentoPai);
        atendimentohierarquiadpr.setOpCode(OPCODE_INSERT);

        xmlDpr->atendimentohierarquiavo.inserir(&atendimentohierarquiadpr);
    }
    // <== SM324--DPR--DEZ/2006--Cassio

	return true;
}

bool proCAlterarWFAtendimentoHierarquia(st_AtendimentoHierarquia* dados, st_vlAtendimentoHierarquia* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoHierarquia   oDados;
		struct st_vlAtendimentoHierarquia oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoHierarquia(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoHierarquia SET ");

	bool separa = false;

	if (status->idAtendimentoPai != -1) 
		montaUpdate("idAtendimentoPai", oDados.idAtendimentoPai, TIPO_ULONG);

	sprintf(query, "%s WHERE idAtendimento = %ld", query, dados->idAtendimento);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoHierarquia(st_AtendimentoHierarquia* dados, st_vlAtendimentoHierarquia* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = dados->idAtendimento;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoHierarquia(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoHierarquia
		WHERE
			idAtendimento = :idAtendimento;

	return true;
}

bool proCConsultaWFAtendimentoHierarquia(st_AtendimentoHierarquia* dados, st_vlAtendimentoHierarquia* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento;
		long idAtendimentoPai;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idAtendimento, idAtendimentoPai FROM atendimento.AtendimentoHierarquia ");

	bool separa = false;

	if (status->idAtendimento != -1) 
		montaWhere("idAtendimento", dados->idAtendimento, TIPO_ULONG);

	if (status->idAtendimentoPai != -1) 
		montaWhere("idAtendimentoPai", dados->idAtendimentoPai, TIPO_ULONG);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoHierarquia(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoHierarquia FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoHierarquia;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idAtendimento, :idAtendimentoPai;

		saida->createTag("WFAtendimentoHierarquiaVO");
			saida->addItem("idAtendimento", idAtendimento);
			saida->addItem("idAtendimentoPai", idAtendimentoPai);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;

	return true;

}

void sql_error_WFAtendimentoHierarquia(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
