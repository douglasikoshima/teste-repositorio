/**
 * @modulo  Atendimento
 * @usecase Atendimento
 * @author  Marcelo Nunes
 * @version $Revision: 1.1.2.28.6.1.8.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/09/09 15:18:17 $
 **/

#include <tuxfw.h> 

#include "../include/cRegPalitageFOPC.h"
#include "../../../commons/definesAtendimento.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../../../commons/cWfAtdProtocoloException.h"

#define STRCPY_TO_ORA(dest, source){ \
        dest.len = (unsigned short) strlen(source); \
        strcpy((char *) dest.arr, (const char *) source);}

void CRegPalitageFO::executar( DOMNode * dnode, char * idUsuario )
{
    char nrProtocolo[40];

    memset( nrProtocolo, 0x0, sizeof(nrProtocolo) );
    strcpy( dados.idUsuario,idUsuario ); 

    carregaDados(dnode);

    if ( cregcontato.existeNrOrdemVenda() == true )
    {
        if ( dados.cdStatusRejeicao != 1 && dados.cdStatusRejeicao != 2 )
        {
            throw new TuxException("04E9999","Código do status de rejeição inválido.");
        }

        if ( proCExisteOrdemVenda(cregcontato.getNrOrdemVenda()) == false )
        {
            throw new TuxException("04E9999","Ordem de venda informada não existe.");
        }
    }

    SelCfgPalitagem();

    if ( 0==dados.idContato[0] )
    {
        LePalitagemDefault();
    }

    SelAtdProtocolo();
    
    char nrTelefone[20];

    sprintf(nrTelefone,"%s%s",dados.cdAreaRegistro,dados.nrTelefone);

    cregcontato.setIdAtendimentoProtocolo(dados.nrProtocolo);
    cregcontato.setIdSistemaOrigemProtocolo(dados.idSistemaOrigem);
    cregcontato.setCdAreaRegistroSZ(dados.cdAreaRegistro);
    //cregcontato.setNrTelefoneSZ(dados.nrTelefone);
    cregcontato.setNrTelefone(nrTelefone);// tem de ser ddd+nrlinha
    cregcontato.setDddSMSProtocolo(dados.cdAreaRegistroSMS);
    cregcontato.setNrLinhaSMSProtocolo(dados.nrTelefoneSMS);
    cregcontato.setObservacao(dados.dsComentario);
    cregcontato.setIdTipoAberturaProtocolo(dados.idTipoAberturaProtocolo);
    cregcontato.setNmContato(dados.nmPessoa);
    cregcontato.setIdUsuarioBKOSZ(dados.idUsuario);
    cregcontato.setIdContatoFolhaCampo(dados.idContatoFolhaCampo);
    cregcontato.setCdAreaRegistro(atoi(dados.cdAreaRegistro));
    cregcontato.setIdTerminal(atoi(dados.idTerminal));
    cregcontato.setIdCanal(atoi(dados.idCanal));
    cregcontato.setIdContato(atoi(dados.idContato));
    cregcontato.setIdGrupoAbertura(atoi(dados.idGrupoAbertura));
    cregcontato.setIdProcedencia(atoi(dados.idProcedencia));
    cregcontato.setIdSegmentacao(atoi(dados.idSegmentacao));
    cregcontato.setIdTipoCarteira(atoi(dados.idTipoCarteira));
    cregcontato.setIdPessoaDeParaUsuario(atoi(dados.idPessoaDeParaUsuario));
    cregcontato.setIdPessoaDeParaCliente(atoi(dados.idPessoaDeParaCliente ));
    cregcontato.setIdTipoPessoa(atoi(dados.idTipoPessoa));
    cregcontato.setIdTipoRelacionamento(atoi(dados.idTipoRelacionamento));
    cregcontato.setIdLinhaTelefonica(atol(dados.idLinhaTelefonica));
    cregcontato.setIdPessoaLinhaHistorico(atol(dados.idPessoaLinhaHistorico));
    cregcontato.setIdTipoLinha(atoi(dados.idTipoLinha));
    cregcontato.setIdUsuarioBKO(atoi(dados.idUsuario));
    cregcontato.setIdUFOperadora(atoi(dados.idUFOperadora));
    /*  Chamada VOL-E  */
    ULOG( "Ajustando idTipoRetorno..." );
    cregcontato.setIdTipoRetorno(1);

    ULOG("  idAtendimentoProtocolo=[%s]",cregcontato.getIdAtendimentoProtocolo() );
    ULOG("idSistemaOrigemProtocolo=[%s]",cregcontato.getIdSistemaOrigemProtocolo() );
    ULOG("          cdAreaRegistro=[%d]",cregcontato.getCdAreaRegistro() );
    ULOG("              nrTelefone=[%s]",cregcontato.getNrTelefone() );
    ULOG("        cdAreaRegistroSZ=[%s]",cregcontato.getCdAreaRegistroSZ() );
    //ULOG("            nrTelefoneSZ=[%s]",cregcontato.getNrTelefoneSZ() );
    ULOG("         dddSMSProtocolo=[%s]",cregcontato.getDddSMSProtocolo() );
    ULOG("     nrLinhaSMSProtocolo=[%s]",cregcontato.getNrLinhaSMSProtocolo() );
    ULOG("              observacao=[%.50s]",cregcontato.getObservacao() );
    ULOG(" idTipoAberturaProtocolo=[%s]",cregcontato.getIdTipoAberturaProtocolo() );
    ULOG("               nmContato=[%s]",cregcontato.getNmContato() );
    ULOG("                 idCanal=[%d]",cregcontato.getIdCanal() );
    ULOG("               idContato=[%d]",cregcontato.getIdContato() );
    ULOG("         idGrupoAbertura=[%d]",cregcontato.getIdGrupoAbertura() );
    ULOG("           idProcedencia=[%d]",cregcontato.getIdProcedencia() );
    ULOG("           idSegmentacao=[%d]",cregcontato.getIdSegmentacao() );
    ULOG("          idTipoCarteira=[%d]",cregcontato.getIdTipoCarteira() );
    ULOG("   idPessoaDeParaUsuario=[%d]",cregcontato.getIdPessoaDeParaUsuario() );
    ULOG("   idPessoaDeParaCliente=[%d]",cregcontato.getIdPessoaDeParaCliente() );
    ULOG("            idTipoPessoa=[%d]",cregcontato.getIdTipoPessoa() );
    ULOG("    idTipoRelacionamento=[%d]",cregcontato.getIdTipoRelacionamento() );
    ULOG("       idLinhaTelefonica=[%d]",cregcontato.getIdLinhaTelefonica() );
    ULOG("  idPessoaLinhaHistorico=[%ld]",cregcontato.getIdPessoaLinhaHistorico() );
    ULOG("             idTipoLinha=[%d]",cregcontato.getIdTipoLinha() );
    ULOG("            idUsuarioBKO=[%d]",cregcontato.getIdUsuarioBKO() );
    ULOG("                  isVolE=[%d]",cregcontato.getIsVolE() );
    ULOG("              tpOperacao=[%d]",cregcontato.getTpOperacao() );
    ULOG("     idContatoFolhaCampo=[%d]",cregcontato.getIdContatoFolhaCampo() );
    ULOG("           idUFOperadora=[%d]",cregcontato.getIdUFOperadora() );
    ULOG("            nrOrdemVenda=[%d]",cregcontato.getNrOrdemVenda() );

    if ( cregcontato.getTpOperacao() != 2 )
    {
        long idAtendimento;
        cRegPalitagem rc(cregcontato.obterStRegContato());
        rc.registra( nrProtocolo,&idAtendimento );
        cregcontato.setIdAtendimentoProtocolo(nrProtocolo);
        cregcontato.setIdAtendimento(idAtendimento);
    }
    else
    {
        cregcontato.EntradaValidacao(cregcontato.obterStRegContato());
        cregcontato.registra();
        strcpy(nrProtocolo,cregcontato.getIdAtendimentoProtocolo());
    }

    ULOG("           idAtendimento=[%ld]",cregcontato.getIdAtendimento() );
    ULOG("    Protocolo registrado=[%s]",cregcontato.getIdAtendimentoProtocolo() );
}

bool CRegPalitageFO::proCExisteOrdemVenda(const char *nrOrdemVenda)
{
    ULOG_START( "CRegPalitageFO::proCExisteOrdemVenda()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
       const char * varOraNrOrdemVenda = nrOrdemVenda;
       int varOraCount;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFCRegPalitageFO(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("nrOrdemVenda='%s'",nrOrdemVenda);

    EXEC SQL 
        SELECT 
           COUNT(1)
        INTO
            :varOraCount
        FROM
            RETENCAO.STATUSSAP 
        WHERE 
            ORDEMVENDA = :varOraNrOrdemVenda
        AND ROWNUM < 2;

    ULOG("existe?=%d",varOraCount);

    return varOraCount>0?true:false;


    ULOG_END( "CRegPalitageFO::proCExisteOrdemVenda()" );
}

void CRegPalitageFO::SelCfgPalitagem()
{
    ULOG_START( "CRegPalitageFO::SelCfgPalitagem()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       char * idSistemaOrigem = dados.idSistemaOrigem;
       char * cdServico = dados.cdServico;

       VARCHAR idContato[39];
       VARCHAR idCanal[39];
       VARCHAR idProcedencia[39];
       //VARCHAR idGrupoAbertura[39];

       short i_idContato = -1;
       short i_idCanal = -1;
       short i_idProcedencia = -1;
       //short i_idGrupoAbertura = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFCRegPalitageFO(&sqlca);

    ULOG("Consultando idSistemaOrigem [%s], cdServico [%s]", idSistemaOrigem, cdServico );

    if ( strcmp(cdServico,"NFE_REGCONTATOREJPF")==0||strcmp(cdServico,"NFE_REGCONTATODENPF") == 0|| 
         strcmp(cdServico,"NFE_REGCONTATOREJPJ")==0||strcmp(cdServico,"NFE_REGCONTATODENPJ") == 0 )
    {
        ULOG( "local 1" );

        EXEC SQL 
            SELECT
                IDCANAL,
                IDPROCEDENCIA
                //IDGRUPOABERTURA
            INTO
                :idCanal:i_idCanal,
                :idProcedencia:i_idProcedencia
                //:idGrupoAbertura:i_idGrupoAbertura
            FROM
                CONTATOADM.CONTATOFUNCIONALIDADE
            WHERE
                CDFUNCIONALIDADE = :cdServico;
 
        CONVIND( idCanal, i_idCanal );
        CONVIND( idProcedencia, i_idProcedencia );
        //CONVIND( idGrupoAbertura, i_idGrupoAbertura );

        strcpy( dados.idCanal,(char*)idCanal.arr );
        strcpy( dados.idProcedencia,(char*)idProcedencia.arr );
        //strcpy( dados.idGrupoAbertura,(char*)idGrupoAbertura.arr );
    }
    else
    {
        ULOG( "local 2" );

        EXEC SQL 
            SELECT 
               IDCONTATO ,
               IDPROCEDENCIA
            INTO 
               :idContato:i_idContato ,
               :idProcedencia:i_idProcedencia
            FROM 
               CONTATOADM.CONFIGURAPALITAGEM
            WHERE 
               IDSISTEMAORIGEM = :idSistemaOrigem 
            AND 
               SGSERVICO = :cdServico;

        CONVIND( idContato, i_idContato );
        CONVIND( idProcedencia, i_idProcedencia );

        ULOG( "idContato       [%s]",(char*)idContato.arr );
        ULOG( "idProcedencia   [%s]",(char*)idProcedencia.arr );
        ULOG( "dados.idContato [%s]",(char*)dados.idContato );

        if ( 0==dados.idContato[0] || strcmp(dados.idContato,"0")==0 )  // Chamado 15395351
        { // Se dados.idContato está NULO, carrega com o valor da base. // Chamado 15626293
            strcpy( dados.idContato,(char*)idContato.arr );
        }

        ULOG( "2. dados.idContato ... [%s]",(char*)dados.idContato );

        strcpy( dados.idProcedencia,(char*)idProcedencia.arr );
    }

    ULOG_END( "CRegPalitageFO::SelCfgPalitagem()" );
}


void CRegPalitageFO::SelAtdProtocolo()
{
    ULOG_START( "CRegPalitageFO::SelAtdProtocolo()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        char * varOraNrProtocolo = dados.nrProtocolo;
        

        struct OraStrutDadosProtocolo
        {
            VARCHAR cdAreaRegistro[22];
            VARCHAR nrTelefone[22];
            VARCHAR cdAreaRegistroSMS[22];
            VARCHAR nrTelefoneSMS[22];
            VARCHAR idTipoAberturaProtocolo[4];
            VARCHAR idSistemaOrigem[39];
            VARCHAR cdConta[101];
        } oraStrutDadosProtocolo;

        struct OraStrutStatProtocolo
        {
            short cdAreaRegistro;
            short nrTelefone;
            short cdAreaRegistroSMS;
            short nrTelefoneSMS;
            short idTipoAberturaProtocolo;
            short idSistemaOrigem;
            short cdConta;
        } oraStrutStatProtocolo;

        struct OraStrutDadosPessoa
        {
            VARCHAR idTipoRelacionamento[39];
            VARCHAR idLinhaTelefonica[39];
            VARCHAR idTipoPessoa[39];
            VARCHAR nmPessoa[256];
            VARCHAR idTipoLinha[39];
            VARCHAR idSegmentacao[39];
            VARCHAR idTipoCarteira[39];
            VARCHAR idPessoaDePara[39];
        } oraStrutDadosPessoa;

        struct OraStrutStatPessoa
        {
            short idTipoRelacionamento;
            short idLinhaTelefonica;
            short idTipoPessoa;
            short nmPessoa;
            short idTipoLinha;
            short idSegmentacao;
            short idTipoCarteira;
            short idPessoaDePara;
        } oraStrutStatPessoa;

        VARCHAR varOraNmTipoRelacionamento[256];
        short statOraNmTipoRelacionamento;

        VARCHAR varOraIdPessoaLinhaHistorico[39];
        short statOraIdPessoaLinhaHistorico;

        VARCHAR varOraIdUFOperadora[39];
        short statOraIdUFOperadora = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFCRegPalitageFO(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&oraStrutDadosProtocolo,0,sizeof(oraStrutDadosProtocolo));
    memset(&oraStrutDadosPessoa,0,sizeof(oraStrutDadosPessoa));

    memset(&oraStrutStatProtocolo,-1,sizeof(oraStrutStatProtocolo));
    memset(&oraStrutStatPessoa,-1,sizeof(oraStrutStatPessoa));

    ULOG("nrProtocolo=[%s]", varOraNrProtocolo );

    EXEC SQL
        SELECT
            ATDPROTOC.CDAREAREGISTRO,
            ATDPROTOC.NRTELEFONE,
            SMSPROTOC.CDAREAREGISTRO CDAREAREGISTROSMS,
            SMSPROTOC.NRLINHA NRTELEFONESMS,
            ATDPROTOC.IDTIPOABERTURAPROTOCOLO,
            ATDPROTOC.IDSISTEMAORIGEM,
            ATDPROTOC.CDCONTA
        INTO
            :oraStrutDadosProtocolo:oraStrutStatProtocolo
        FROM
            ATENDIMENTO.ATENDIMENTOPROTOCOLO ATDPROTOC,
            ATENDIMENTO.SMSPROTOCOLO SMSPROTOC
        WHERE
            ATDPROTOC.IDATENDIMENTOPROTOCOLO = SMSPROTOC.IDATENDIMENTOPROTOCOLO(+)
        AND 
            ATDPROTOC.IDATENDIMENTOPROTOCOLO = :varOraNrProtocolo;

    if ( 0==sqlca.sqlcode )
    {
        CONVIND( oraStrutDadosProtocolo.nrTelefone, oraStrutStatProtocolo.nrTelefone);
        CONVIND( oraStrutDadosProtocolo.cdAreaRegistro, oraStrutStatProtocolo.cdAreaRegistro);
        CONVIND( oraStrutDadosProtocolo.nrTelefoneSMS, oraStrutStatProtocolo.nrTelefoneSMS);
        CONVIND( oraStrutDadosProtocolo.cdAreaRegistroSMS, oraStrutStatProtocolo.cdAreaRegistroSMS);
        CONVIND( oraStrutDadosProtocolo.idTipoAberturaProtocolo,oraStrutStatProtocolo.idTipoAberturaProtocolo);
        CONVIND( oraStrutDadosProtocolo.idSistemaOrigem,oraStrutStatProtocolo.idSistemaOrigem);
        CONVIND( oraStrutDadosProtocolo.cdConta,oraStrutStatProtocolo.cdConta);

        if ( oraStrutDadosProtocolo.cdAreaRegistro.arr[0] )
        {
            SAFE_STRNCPY( dados.cdAreaRegistro, (char*)oraStrutDadosProtocolo.cdAreaRegistro.arr );
        }

        if ( oraStrutDadosProtocolo.nrTelefone.arr[0] )
        {
            SAFE_STRNCPY( dados.nrTelefone, (char*)oraStrutDadosProtocolo.nrTelefone.arr );
        }

        if ( oraStrutDadosProtocolo.cdAreaRegistroSMS.arr[0] )
        {
            SAFE_STRNCPY( dados.cdAreaRegistroSMS, (char*)oraStrutDadosProtocolo.cdAreaRegistroSMS.arr );
        }

        if ( oraStrutDadosProtocolo.nrTelefoneSMS.arr[0] )
        {
            SAFE_STRNCPY( dados.nrTelefoneSMS, (char*)oraStrutDadosProtocolo.nrTelefoneSMS.arr );
        }

        SAFE_STRNCPY( dados.idTipoAberturaProtocolo, (char*)oraStrutDadosProtocolo.idTipoAberturaProtocolo.arr );
        SAFE_STRNCPY( dados.idSistemaOrigem, (char*)oraStrutDadosProtocolo.idSistemaOrigem.arr );

        ULOG( "Dados de protocolo encontrados:");
        ULOG( "         cdAreaRegistro=[%s],   nrTelefone=[%s]",dados.cdAreaRegistro,dados.nrTelefone );
        ULOG( "      cdAreaRegistroSMS=[%s],nrTelefoneSMS=[%s]",dados.cdAreaRegistroSMS,dados.nrTelefoneSMS );
        ULOG( "idTipoAberturaProtocolo=[%s]",dados.idTipoAberturaProtocolo );
        ULOG( "        idSistemaOrigem=[%s]",dados.idSistemaOrigem );
    }
    else
    {
        ULOGW( "protocolo %s <NOT FOUND>" );
        strcpy( (char *)dados.idTipoAberturaProtocolo,TIPO_ABER_PROT_LINHA_CLIENTE );

        strcpy( (char*)oraStrutDadosProtocolo.cdAreaRegistro.arr,dados.cdAreaRegistro );
        oraStrutDadosProtocolo.cdAreaRegistro.len = strlen(dados.cdAreaRegistro);

        strcpy( (char*)oraStrutDadosProtocolo.nrTelefone.arr,dados.nrTelefone );
        oraStrutDadosProtocolo.nrTelefone.len = strlen(dados.nrTelefone);
    }

    ULOG( "cdAreaRegistro=[%s],nrTelefone=[%s]",
            (char*)oraStrutDadosProtocolo.cdAreaRegistro.arr,
            (char*)oraStrutDadosProtocolo.nrTelefone.arr );

    if ( oraStrutDadosProtocolo.cdAreaRegistro.arr[0] && oraStrutDadosProtocolo.nrTelefone.arr[0] )
    {
        ULOG("Consultando dados da pessoa cliente ...");

        EXEC SQL
            SELECT
                TIPORELACIONAMENTO.IDTIPORELACIONAMENTO,
                LINHATELEFONICA.IDLINHATELEFONICA,
                NVL(PESSOA.IDTIPOPESSOA,0) AS IDTIPOPESSOA,
                PESSOA.NMPESSOA,
                NVL(LINHATELEFONICA.IDTIPOLINHA,3) AS IDTIPOLINHA,
                NVL(LINHASEGMENTACAO.IDSEGMENTACAO,11) AS IDSEGMENTACAO,
                PESSOA.IDTIPOCARTEIRA,
                PESSOADEPARA.IDPESSOADEPARA
            INTO
                :oraStrutDadosPessoa:oraStrutStatPessoa
            FROM
                CUSTOMER.PESSOA PESSOA,
                CUSTOMER.PESSOADEPARA PESSOADEPARA,
                CUSTOMER.PESSOALINHA PESSOALINHA,
                CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
                LINHA.LINHATELEFONICA LINHATELEFONICA,
                LINHA.LINHASEGMENTACAO LINHASEGMENTACAO,
                LINHA.LINHABASE LINHABASE,
                APOIO.AREAREGISTRO AREAREGISTRO,
                APOIO.ESTADOLINHA ESTADOLINHA
            WHERE
                PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
            AND PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
            AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
            AND PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
            AND LINHASEGMENTACAO.IDLINHATELEFONICA(+) = LINHATELEFONICA.IDLINHATELEFONICA
            AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
            AND NVL(LINHATELEFONICA.DTEXPIRACAO,SYSDATE+1) > SYSDATE
            AND LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA
            AND ESTADOLINHA.INLINHACANCELADA = 0
            AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
            AND LINHABASE.NRLINHA = :oraStrutDadosProtocolo.nrTelefone
            AND AREAREGISTRO.CDAREAREGISTRO = :oraStrutDadosProtocolo.cdAreaRegistro
            AND PESSOALINHA.IDTIPORELACIONAMENTO = 2;

        if ( sqlca.sqlcode )
        {
            ULOG("Consultando dados da pessoa outros tipos de relacionamento...");

            EXEC SQL
                SELECT
                    nvl(TIPORELACIONAMENTO.IDTIPORELACIONAMENTO,2) as IDTIPORELACIONAMENTO,
                    LINHATELEFONICA.IDLINHATELEFONICA,
                    NVL(PESSOA.IDTIPOPESSOA,0) AS IDTIPOPESSOA,
                    PESSOA.NMPESSOA,
                    NVL(LINHATELEFONICA.IDTIPOLINHA,3) AS IDTIPOLINHA,
                    NVL(LINHASEGMENTACAO.IDSEGMENTACAO,11) AS IDSEGMENTACAO,
                    PESSOA.IDTIPOCARTEIRA,
                    PESSOADEPARA.IDPESSOADEPARA
                INTO
                    :oraStrutDadosPessoa:oraStrutStatPessoa
                FROM
                    CUSTOMER.PESSOA PESSOA,
                    CUSTOMER.PESSOADEPARA PESSOADEPARA,
                    CUSTOMER.PESSOALINHA PESSOALINHA,
                    CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
                    LINHA.LINHATELEFONICA LINHATELEFONICA,
                    LINHA.LINHASEGMENTACAO LINHASEGMENTACAO,
                    LINHA.LINHABASE LINHABASE,
                    APOIO.AREAREGISTRO AREAREGISTRO,
                    APOIO.ESTADOLINHA ESTADOLINHA
                WHERE
                    PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
                AND PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
                AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
                AND PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
                AND LINHASEGMENTACAO.IDLINHATELEFONICA(+) = LINHATELEFONICA.IDLINHATELEFONICA
                AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
                /* AND NVL(LINHATELEFONICA.DTEXPIRACAO,SYSDATE+1) > SYSDATE  */
                AND LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA
                /* AND ESTADOLINHA.INLINHACANCELADA = 0  */
                AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
                AND LINHABASE.NRLINHA = :oraStrutDadosProtocolo.nrTelefone
                AND AREAREGISTRO.CDAREAREGISTRO = :oraStrutDadosProtocolo.cdAreaRegistro
                AND PESSOALINHA.IDTIPORELACIONAMENTO <> 2
                AND ROWNUM < 2;
           
           
        }
    }
    

    ULOG( "Passou..." );
    if ( oraStrutDadosPessoa.idTipoRelacionamento.arr[0] == 0x0 )
    {
       ULOG( "Tratando tipo de relacionamento, ajustando para 2..." );
       
       //STRCPY_TO_ORA((char*)oraStrutDadosPessoa.idTipoRelacionamento, "2" );
       strcpy((char*)oraStrutDadosPessoa.idTipoRelacionamento.arr, "2" );
       oraStrutDadosPessoa.idTipoRelacionamento.len = 1;
       oraStrutStatPessoa.idTipoRelacionamento = 1;
       
       ULOG( "Tipo de Relacionamento [%s]", (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
    }

    if ( sqlca.sqlcode ||
         (oraStrutDadosProtocolo.cdAreaRegistro.arr[0]==0 || oraStrutDadosProtocolo.nrTelefone.arr[0]==0) )
    {
        ULOG_END( "CRegPalitageFO::SelAtdProtocolo() --> NOTFOUND" );

        if ( atoi(dados.idSegmentacao) == 0 )
        {
            strcpy(dados.idSegmentacao,"11");
        }

        if ( oraStrutDadosProtocolo.cdConta.arr[0] )
        {
            oraStrutStatProtocolo.cdAreaRegistro = oraStrutStatProtocolo.nrTelefone = -1;

            //TIAGO MPOG
            //Alterada lógica de busca de contas
            //Existe a carecteristica de produção onde uma conta
            //NAO POSSUI linhas em baixo dela, apenas outras contas 
            //(conceito de conta MASTER) portanto a busca agora
            //considera as LINHAS DAQUELA PESSOADEPARA
            //REMOVIDO:CUSTOMER.LINHACONTA
            //INCLUIDO:CUSTOMER.PESSOALINHA

			EXEC SQL
                SELECT
                    LINHATELEFONICA.IDLINHATELEFONICA,
                    AREAREGISTRO.CDAREAREGISTRO,
                    LINHABASE.NRLINHA,
                    PESSOACONTA.IDPESSOADEPARA,
                    PESSOA.IDTIPOCARTEIRA,
                    PESSOACONTA.IDTIPORELACIONAMENTO
                INTO
                    :oraStrutDadosPessoa.idLinhaTelefonica:oraStrutStatPessoa.idLinhaTelefonica,
                    :oraStrutDadosProtocolo.cdAreaRegistro:oraStrutStatProtocolo.cdAreaRegistro,
                    :oraStrutDadosProtocolo.nrTelefone:oraStrutStatProtocolo.nrTelefone,
                    :oraStrutDadosPessoa.idPessoaDePara:oraStrutStatPessoa.idPessoaDePara,
                    :oraStrutDadosPessoa.idTipoCarteira:oraStrutStatPessoa.idTipoCarteira,
                    :oraStrutDadosPessoa.idTipoRelacionamento:oraStrutStatPessoa.idTipoRelacionamento
                FROM
                    LINHA.LINHATELEFONICA LINHATELEFONICA,
                    CUSTOMER.PESSOACONTA PESSOACONTA,
                    CUSTOMER.PESSOADEPARA PESSOADEPARA,
                    CUSTOMER.PESSOA PESSOA,
                    LINHA.LINHABASE LINHABASE,
                    CUSTOMER.PESSOALINHA PESSOALINHA,
                    CUSTOMER.CONTA CONTA,
                    APOIO.AREAREGISTRO AREAREGISTRO
                WHERE
                    LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
                AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
                AND LINHATELEFONICA.IDLINHATELEFONICA = PESSOALINHA.IDLINHATELEFONICA
                AND PESSOACONTA.IDPESSOADEPARA=PESSOALINHA.IDPESSOADEPARA
                AND CONTA.CDCONTA = :oraStrutDadosProtocolo.cdConta
                AND PESSOACONTA.IDCONTA = CONTA.IDCONTA
                AND PESSOACONTA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA
                AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
                AND PESSOACONTA.IDTIPORELACIONAMENTO = 2
                AND ROWNUM < 2;

            CONVIND(oraStrutDadosPessoa.idLinhaTelefonica,oraStrutStatPessoa.idLinhaTelefonica);
            CONVIND(oraStrutDadosProtocolo.cdAreaRegistro,oraStrutStatProtocolo.cdAreaRegistro);
            CONVIND(oraStrutDadosProtocolo.nrTelefone,oraStrutStatProtocolo.nrTelefone);
            CONVIND(oraStrutDadosPessoa.idPessoaDePara,oraStrutStatPessoa.idPessoaDePara);
            CONVIND(oraStrutDadosPessoa.idTipoCarteira,oraStrutStatPessoa.idTipoCarteira);
            CONVIND(oraStrutDadosPessoa.idTipoRelacionamento,oraStrutStatPessoa.idTipoRelacionamento);

            if ( oraStrutDadosPessoa.idTipoRelacionamento.arr[0] == 0x0 )
            {
               ULOG( "2. Tratando tipo de relacionamento, ajustando para 2..." );
               
               //STRCPY_TO_ORA((char*)oraStrutDadosPessoa.idTipoRelacionamento, "2" );
               strcpy((char*)oraStrutDadosPessoa.idTipoRelacionamento.arr, "2" );
               oraStrutDadosPessoa.idTipoRelacionamento.len = 1;
               oraStrutStatPessoa.idTipoRelacionamento = 1;
               
               ULOG( "Tipo de Relacionamento [%s]", (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
            }
            
            SAFE_STRNCPY( dados.idLinhaTelefonica, (char*)oraStrutDadosPessoa.idLinhaTelefonica.arr );
            SAFE_STRNCPY( dados.cdAreaRegistro, (char*)oraStrutDadosProtocolo.cdAreaRegistro.arr );
            SAFE_STRNCPY( dados.nrTelefone, (char*)oraStrutDadosProtocolo.nrTelefone.arr );
            SAFE_STRNCPY( dados.cdAreaRegistroSMS, (char*)oraStrutDadosProtocolo.cdAreaRegistro.arr );
            SAFE_STRNCPY( dados.nrTelefoneSMS, (char*)oraStrutDadosProtocolo.nrTelefone.arr );
            SAFE_STRNCPY( dados.idPessoaDeParaCliente, (char*)oraStrutDadosPessoa.idPessoaDePara.arr );
            SAFE_STRNCPY( dados.idTipoCarteira, (char*)oraStrutDadosPessoa.idTipoCarteira.arr );
            SAFE_STRNCPY( dados.idTipoRelacionamento, (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
        }
    }
    else
    {
        CONVIND( oraStrutDadosPessoa.idTipoRelacionamento, oraStrutStatPessoa.idTipoRelacionamento );
        CONVIND( oraStrutDadosPessoa.idLinhaTelefonica, oraStrutStatPessoa.idLinhaTelefonica );
        CONVIND( oraStrutDadosPessoa.idTipoPessoa, oraStrutStatPessoa.idTipoPessoa );
        CONVIND( oraStrutDadosPessoa.idTipoLinha, oraStrutStatPessoa.idTipoLinha );
        CONVIND( oraStrutDadosPessoa.idSegmentacao, oraStrutStatPessoa.idSegmentacao );
        CONVIND( oraStrutDadosPessoa.idTipoCarteira, oraStrutStatPessoa.idTipoCarteira );
        CONVIND( oraStrutDadosPessoa.idPessoaDePara, oraStrutStatPessoa.idPessoaDePara );
        CONVIND( oraStrutDadosPessoa.nmPessoa, oraStrutStatPessoa.nmPessoa );

        if ( oraStrutDadosPessoa.idTipoRelacionamento.arr[0] == 0x0 )
        {
                ULOG( "3. Tratando tipo de relacionamento, ajustando para 2..." );
                
                //STRCPY_TO_ORA((char*)oraStrutDadosPessoa.idTipoRelacionamento, "2" );
                strcpy((char*)oraStrutDadosPessoa.idTipoRelacionamento.arr, "2" );
                oraStrutDadosPessoa.idTipoRelacionamento.len = 1;
                oraStrutStatPessoa.idTipoRelacionamento = 1;
                
                ULOG( "Tipo de Relacionamento [%s]", (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
        }
        
        SAFE_STRNCPY( dados.idTipoRelacionamento, (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
        SAFE_STRNCPY( dados.idLinhaTelefonica, (char*)oraStrutDadosPessoa.idLinhaTelefonica.arr );
        SAFE_STRNCPY( dados.idTipoPessoa, (char*)oraStrutDadosPessoa.idTipoPessoa.arr );
        SAFE_STRNCPY( dados.idTipoLinha, (char*)oraStrutDadosPessoa.idTipoLinha.arr );
        SAFE_STRNCPY( dados.idSegmentacao, (char*)oraStrutDadosPessoa.idSegmentacao.arr );
        SAFE_STRNCPY( dados.idTipoCarteira, (char*)oraStrutDadosPessoa.idTipoCarteira.arr );
        SAFE_STRNCPY( dados.idPessoaDeParaCliente, (char*)oraStrutDadosPessoa.idPessoaDePara.arr );
        SAFE_STRNCPY( dados.nmPessoa, (char*)oraStrutDadosPessoa.nmPessoa.arr );
    }

    statOraIdPessoaLinhaHistorico = -1;
    varOraIdPessoaLinhaHistorico.arr[0] = 0;

    ULOG("Consultando pessoaLinhaHistorico...");

    EXEC SQL
        SELECT
            IDPESSOALINHAHISTORICO
        INTO
            :varOraIdPessoaLinhaHistorico:statOraIdPessoaLinhaHistorico
        FROM
        (
            SELECT
                IDPESSOALINHAHISTORICO,DTULTIMAALTERACAO,IDTIPORELACIONAMENTO
            FROM
            (
                SELECT
                    IDPESSOALINHAHISTORICO,DTULTIMAALTERACAO,IDTIPORELACIONAMENTO
                FROM
                    CUSTOMER.PESSOALINHAHISTORICO
                WHERE
                    IDLINHATELEFONICA = :oraStrutDadosPessoa.idLinhaTelefonica
            )
            ORDER BY IDTIPORELACIONAMENTO DESC,DTULTIMAALTERACAO,IDPESSOALINHAHISTORICO
        )
        WHERE ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        ULOG("idPessoaLinhaHistorico <NOT FOUND>");
    }
    else
    {
        CONVIND( varOraIdPessoaLinhaHistorico,statOraIdPessoaLinhaHistorico );
        SAFE_STRNCPY( dados.idPessoaLinhaHistorico, (char*)varOraIdPessoaLinhaHistorico.arr );
        ULOG("idPessoaLinhaHistorico=%s",varOraIdPessoaLinhaHistorico.arr);
    }

    ULOG( "@marcelo" );
    if ( oraStrutDadosPessoa.idTipoRelacionamento.arr[0] == 0x0 )
    {
       ULOG( "4. Tratando tipo de relacionamento, ajustando para 2..." );
       
       //STRCPY_TO_ORA((char*)oraStrutDadosPessoa.idTipoRelacionamento, "2" );
       strcpy((char*)oraStrutDadosPessoa.idTipoRelacionamento.arr, "2" );
       oraStrutDadosPessoa.idTipoRelacionamento.len = 1;
       oraStrutStatPessoa.idTipoRelacionamento = 1;
       
       ULOG( "Tipo de Relacionamento [%s]", (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
       SAFE_STRNCPY( dados.idTipoRelacionamento, (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
    }

    SAFE_STRNCPY( dados.idTipoRelacionamento, (char*)oraStrutDadosPessoa.idTipoRelacionamento.arr );
    ULOG("Consultando tipo de relacionamento...");
    varOraNmTipoRelacionamento.arr[0]=0;
    varOraNmTipoRelacionamento.len=0;
    statOraNmTipoRelacionamento = -1;

    EXEC SQL
        SELECT
            NMTIPORELACIONAMENTO
        INTO
            :varOraNmTipoRelacionamento:statOraNmTipoRelacionamento
        FROM
            CUSTOMER.TIPORELACIONAMENTO
        WHERE
            IDTIPORELACIONAMENTO = :oraStrutDadosPessoa.idTipoRelacionamento;

    if ( 0==sqlca.sqlcode )
    {
        CONVIND( varOraNmTipoRelacionamento, statOraNmTipoRelacionamento );
    }

    if ( strcmp((char*)varOraNmTipoRelacionamento.arr,"PROSPECT") == 0 )
    {
        strcpy( dados.idTipoAberturaProtocolo, TIPO_ABER_PROT_PESSOA );
    }
    else if ( strcmp((char*)varOraNmTipoRelacionamento.arr,"CLIENTE") == 0 )
    {
        strcpy( dados.idTipoAberturaProtocolo, TIPO_ABER_PROT_LINHA_CLIENTE );
    }
    else
    {
        strcpy( dados.idTipoAberturaProtocolo, TIPO_ABER_PROT_LINHA );
    }

    if ( oraStrutDadosProtocolo.cdAreaRegistro.arr[0] )
    {
        ULOG("Consultando idUFOperadora...");

        EXEC SQL
            SELECT 
                AR.IDUFOPERADORA
            INTO
                :varOraIdUFOperadora:statOraIdUFOperadora
            FROM 
                APOIO.AREAREGISTRO AR
               ,CUSTOMER.UFOPERADORA UFO
               ,CUSTOMER.PESSOADEPARA PDP
               ,CUSTOMER.PESSOA P
            WHERE 
                AR.IDUFOPERADORA = UFO.IDUFOPERADORA
            AND UFO.IDPESSOADEPARAOPERADORA = PDP.IDPESSOADEPARA
            AND PDP.IDPESSOA = P.IDPESSOA
            AND AR.CDAREAREGISTRO = :oraStrutDadosProtocolo.cdAreaRegistro
            AND ROWNUM < 2;

        if ( sqlca.sqlcode==0 )
        {
            CONVIND(varOraIdUFOperadora,statOraIdUFOperadora);
            SAFE_STRNCPY( dados.idUFOperadora, (char*)varOraIdUFOperadora.arr );
            ULOG("        idUFOperadora=%s",dados.idUFOperadora);
        }
        else
        {
            ULOG("        idUFOperadora=<NOT FOUND>");
        }
    }
    else
    {
        SAFE_STRNCPY( dados.idUFOperadora, "1" );
        ULOG("        idUFOperadora=1 <ASSUMIDO>");
    }

    // PessoaDePara
    if ( atoi((char*)oraStrutDadosPessoa.idPessoaDePara.arr) == 0 )
    {
        strcpy((char*)oraStrutDadosPessoa.idPessoaDePara.arr,"26");
    }

    if ( strcmp((char*)varOraNmTipoRelacionamento.arr,"USUARIO") == 0 )
    {
        strcpy( dados.idPessoaDeParaCliente, (char*)oraStrutDadosPessoa.idPessoaDePara.arr );
        strcpy( dados.idPessoaDeParaUsuario, (char*)oraStrutDadosPessoa.idPessoaDePara.arr );
    }
    else
    {
        strcpy( dados.idPessoaDeParaCliente, (char*)oraStrutDadosPessoa.idPessoaDePara.arr );
    }

    if ( atoi(dados.idTipoCarteira) == 0 )
    { // NC
        strcpy(dados.idTipoCarteira,"13");
    }

    ULOG(" idTipoRelacionamento=%s",dados.idTipoRelacionamento);
    ULOG("    idLinhaTelefonica=%s",dados.idLinhaTelefonica);
    ULOG("         idTipoPessoa=%s",dados.idTipoPessoa);
    ULOG("          idTipoLinha=%s",dados.idTipoLinha);
    ULOG("        idSegmentacao=%s",dados.idSegmentacao);
    ULOG("       idTipoCarteira=%s",dados.idTipoCarteira);
    ULOG("idPessoaDeParaCliente=%s",dados.idPessoaDeParaCliente);
    ULOG("idPessoaDeParaUsuario=%s",dados.idPessoaDeParaUsuario);
    ULOG("             nmPessoa=%s",dados.nmPessoa);

    ULOG_END( "CRegPalitageFO::SelAtdProtocolo()" );
}


void CRegPalitageFO::carregaDados( DOMNode * dnode )
{
    ULOG_START( "CRegPalitageFO::carregaDados()" );
    
    char * p;
    char buffer[12];
    DOMNode * subnode = 0x0;

    cregcontato.setIsVolE(false);

    if (p=walkTree( dnode, "idContato", 0 ),p)
    {
        strcpy(dados.idContato,p);
        XMLString::release(&p);
        cregcontato.setIsVolE(true);
    }

    if (p=walkTree( dnode, "tpOperacao", 0 ),p)
    {
        cregcontato.setTpOperacao(atoi(p));
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "inConsultor", 0 ),p)
    {
        cregcontato.setInConsultor(p);
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "nrDocumento", 0 ),p)
    {
        cregcontato.setNrDocumento(p);
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "nrOrdemVenda", 0 ),p)
    {
        cregcontato.setNrOrdemVenda(p);
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "cdStatusRejeicao", 0 ),p)
    {
        dados.cdStatusRejeicao = atoi(p);
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "nrTelefone", 0 ),p)
    {
        strcpy( buffer, p );
        XMLString::release(&p);
        sprintf( (char *)dados.cdAreaRegistro,"%.2s", buffer );
        strcpy( (char *)dados.nrTelefone, (char*)&buffer[2] );
    }
    
    subnode=walkDOM(dnode,"DadosProtocoloVO");
    if(subnode)
    {
        if (p=walkTree( subnode, "dddSMSProtocolo", 0 ),p)
        {
            strcpy( (char *)dados.cdAreaRegistroSMS, p );
            XMLString::release(&p);
        }
        if (p=walkTree( subnode, "nrLinhaSMSProtocolo", 0 ),p)
        {
            strcpy( (char *)dados.nrTelefoneSMS, p );
            XMLString::release(&p);
        }
    }

    if (p=walkTree( dnode, "idTerminal", 0 ),p)
    {
        strcpy( (char *)dados.idTerminal, p );
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "nrProtocolo", 0 ),p)
    {
        strcpy( (char *)dados.nrProtocolo, p );
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "cdServico", 0 ),p)
    {
        strcpy( (char *)dados.cdServico , p );
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "idSistema", 0 ),p)
    {
        strcpy( (char *)dados.idSistemaOrigem , p );
        XMLString::release(&p);
    }


    if (p=walkTree( dnode, "dsComentario", 0 ),p)
    {
        strcpy( (char *)dados.dsComentario,p);  
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "idGrupoAbertura", 0 ),p)
    {
        strcpy( (char *)dados.idGrupoAbertura,p );
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "idCanal", 0 ),p)
    {
        strcpy( (char *)dados.idCanal,p );
        XMLString::release(&p);
    }

    if (p=walkTree( dnode, "idUsuario", 0 ),p)
    {
        strcpy( (char *)dados.idUsuario,p );
        XMLString::release(&p);
    }
    
    subnode=walkDOM(dnode,"DadosProtocoloVO");
    if(subnode)
    {
        if (p=walkTree( subnode, "idSistemaOrigemProtocolo", 0 ),p)
        {
            strcpy( (char *)dados.idSistemaOrigem , p );
            XMLString::release(&p);
        }
    }


    // =========================================================================
    // Coloca todos registros de resposta do formulário dinamico em uma collection.

    DOMNode* subregistro;
    //int idContatoFolhaCampo;
    int contador2 = 0;

    /* 
       IMPORTANTE:
       Os ponteiros af e fr precisam ser criados com 'new', para que o destrutor da classe
       não seja chamado a cada iteração do while() abaixo e com isso a Collection armazenada
       na classe ser desalocada antes de ser usada.
    */
    AtendimentoFormulario* af;

    FormularioResposta* fr;

    ULOG("Registra PalitageFO - Carrega Dados - Entrando na pesquisa dos campos enviados...");

    int contador = 0;
    DOMNode *registro;
    while (registro = walkDOM( dnode, "FormularioCampoVO", contador++))
    {
        // ********************************************************************************************************
        // **************************************** INFORMAÇÂO IMPORTANTE *****************************************
        // ********************************************************************************************************
        // Houve atrazo na entrega da OS 1264 (Banco do Brasil) e devido a falta de tempo relacionada a isto
        // este campo esta sendo usado pelo webService do VOL-E para trafegar o id do formulário para este serviço.
        // O valor deste campo é subsequentemente enviado para o ENCCONTATO para atender às regras de encaminhamento
        // de formulário associado a uma folha. -- Jan/2010 -- Cassio
        //
        if ( p=walkTree(registro, "idContatoFolhaCampo", 0),p )
        {
            dados.idContatoFolhaCampo = atoi( p );
            XMLString::release(&p);
        }
        else
        {
            dados.idContatoFolhaCampo = 0;
        }

        ULOG("Registra PalitageFO - Carrega Dados - Carregando idContatoFolhaCampo [%d]...", dados.idContatoFolhaCampo);

        if (dados.idContatoFolhaCampo > 0)
        {
            af = new AtendimentoFormulario();
            af->respostas = new Collection();

            if ( p=walkTree(registro, "idCampo", 0),p)
            {
                af->idCampo = atoi( p );
                XMLString::release(&p);
            }

            ULOG("Registra PalitageFO - Carrega Dados - Carregando af->idCampo [%d]...", af->idCampo);

            while (subregistro = walkDOM( registro, "FormularioCampoValorVO", contador2++))
            {
                fr = new FormularioResposta();

                fr->idDominio  = 0;
                fr->dsResposta = 0;

                if (p=walkTree(subregistro, "idFormularioCampoValor", 0),p)
                {
                    fr->idDominio  = atoi( p );
                    XMLString::release(&p);
                    ULOG("Registra PalitageFO - Carrega Dados - Campo possui dominio [%d]...", fr->idDominio);
                }

                if ((p=walkTree(subregistro, "valor", 0),p) && fr->idDominio == 0)
                {
                    fr->dsResposta = p;
                    ULOG("Registra PalitageFO - Carrega Dados - Campo possui resposta [%s]...", fr->dsResposta);
                }

                af->respostas->AddItem( (void*) fr);
            }

            contador2 = 0;

            cregcontato.getFormularioDinamico()->AddItem( (void*) af );
        }
    }

    ULOG_END( "CRegPalitageFO::carregaDados()" );
}

void CRegPalitageFO::LePalitagemDefault()
{
    ULOG_START( "CRegPalitageFO::LePalitagemDefault()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

       VARCHAR idContato[39];
       VARCHAR idCanal[39];
       VARCHAR idProcedencia[39];
       VARCHAR idGrupoAbertura[39];
       short i_idContato = -1;
       short i_idCanal = -1;
       short i_idProcedencia = -1;
       short i_idGrupoAbertura = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFCRegPalitageFO(&sqlca);
    
    EXEC SQL 
        SELECT
            IDCONTATO,
            IDCANAL,
            IDPROCEDENCIA,
            IDGRUPOABERTURA
        INTO
            :idContato:i_idContato,
            :idCanal:i_idCanal,
            :idProcedencia:i_idProcedencia,
            :idGrupoAbertura:i_idGrupoAbertura
        FROM
            CONTATOADM.CONTATOFUNCIONALIDADE
        WHERE
            CDFUNCIONALIDADE = 'PalitagemDefault';
 
    CONVIND( idContato, i_idContato );
    CONVIND( idCanal, i_idCanal );
    CONVIND( idProcedencia, i_idProcedencia );
    CONVIND( idGrupoAbertura, i_idGrupoAbertura );

    strcpy( dados.idContato,(char*)idContato.arr );
    strcpy( dados.idCanal,(char*)idCanal.arr );
    strcpy( dados.idProcedencia,(char*)idProcedencia.arr );
    strcpy( dados.idGrupoAbertura,(char*)idGrupoAbertura.arr );
    
    ULOG( "dados.idContato [%s]",dados.idContato );
    ULOG( "dados.idCanal [%s]",dados.idCanal );
    ULOG( "dados.idProcedencia [%s]",dados.idProcedencia );
    ULOG( "dados.idGrupoAbertura [%s]",dados.idGrupoAbertura );

   ULOG_END( "CRegPalitageFO::LePalitagemDefault()" );
}



void CRegPalitageFO::sql_error_WFCRegPalitageFO( sqlca * sqlca )
{
    ULOGE("sql_error_WFCRegPalitageFO:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
 