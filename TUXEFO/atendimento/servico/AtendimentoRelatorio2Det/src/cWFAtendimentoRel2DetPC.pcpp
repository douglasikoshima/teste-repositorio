/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @remark  Relatório TOTAL POR REPRESENTANTE BKO - DETALHE
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:34:06 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRel2Det.h"

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#define MAXCOLUNAS 19
EXEC SQL END DECLARE SECTION;

#define TIPOPRAZO ('V' == toupper(dados->prazo[0]) ? (string)"INTERNO" : (string)"ANATEL")

void WFAtdRelCompletarWhereRel2(string &where,DOMNode *entrada,char *dnode);
void WFAtdRelCompletarWhereRel2Fase(string &where,DOMNode *entrada,char *dnode);
void MontarQuebra(string &nmColuna,st_AtendimentoRel *dados);
void WFAtdRelObterDominiosAlfanumericos(string &nmGrupo,string &nmLoginUsuarioAtual,DOMNode *entrada,char *dnode);

bool proCExecutarRelatorio2Det( st_AtendimentoRel *dados
                              , st_vlAtendimentoRel *status
                              , XMLGen *saida
                              , DOMNode *dnode )
{
    ULOG_START( "proCExecutarRelatorio2Det()" );

    struct sqlca sqlca;
    string idColunas;
    string queryDin;
    string where;
    string whereFase;
    string nmColuna;
    string saidaDet;
    int i;

    bool fim = false;

    if ( !dados )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    EXEC SQL BEGIN DECLARE SECTION;
        char *query;
        short i_colunas[MAXCOLUNAS];
        VARCHAR colunas[MAXCOLUNAS][256];
        const char *pNomeGrupo;
        const char *pNomeLoginUsuarioAtual;
        int idGrupo=-1;
        int idPessoaUsuario = -1;
    EXEC SQL END DECLARE SECTION;

    string nmGrupo;
    string nmLoginUsuarioAtual;
    WFAtdRelObterDominiosAlfanumericos(nmGrupo,nmLoginUsuarioAtual,dnode,"FiltroDetalhe");
    WFAtdRelCompletarWhereRel2(where,dnode,"WFFaseVO");
    WFAtdRelCompletarWhereRel2(where,dnode,"FiltroDetalhe");

    WFAtdRelCompletarWhereRel2Fase(whereFase,dnode,"WFEstadoVO");
    WFAtdRelCompletarWhereRel2Fase(whereFase,dnode,"WFGrupoVO");
    WFAtdRelCompletarWhereRel2Fase(whereFase,dnode,"WFRFRVO");
    WFAtdRelCompletarWhereRel2Fase(whereFase,dnode,"WFRelatoriosFiltroRegionalVO");
    WFAtdRelCompletarWhereRel2Fase(whereFase,dnode,"WFRelatoriosFiltroOperadoraVO");

    MontarQuebra(nmColuna,dados);

    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    pNomeGrupo = nmGrupo.c_str();
    pNomeLoginUsuarioAtual = nmLoginUsuarioAtual.c_str();

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    if ( *pNomeGrupo )
    {
        EXEC SQL
            SELECT IDGRUPO 
              INTO :idGrupo
              FROM ACESSO.GRUPO
            WHERE NMGRUPO = :pNomeGrupo;
    }

    if ( *pNomeLoginUsuarioAtual )
    {
        EXEC SQL
            SELECT IDPESSOAUSUARIO 
              INTO :idPessoaUsuario
              FROM ACESSO.USUARIO
             WHERE NMLOGINUSUARIO = :pNomeLoginUsuarioAtual;
    }

    queryDin =
       "SELECT "
            "OPERADORA "
           ",UF "
           ",IDATENDIMENTOPROTOCOLO "
           ",DTABERTURA"
           ",TO_CHAR(DTENTRADAFILA,'MM/DD/YYYY') AS DTENTRADAFILA"
           ",NMGRUPO "
           ",NMGRUPOABERTURA "
           ",NMUSUARIOABERTURA "
           ",DSTIPOCARTEIRA "
           ",DSSEGMENTACAO "
           ",NRTELEFONECONTATO "
           ",DSTIPOPESSOA "
           ",DSESTADO "
           ",DSSUBESTADO "
           ",NMPATH "
           ",HORASDECORRIDAS "
           ",DTPRAZOFINAL"+TIPOPRAZO+
           ",NMUSUARIOATUAL "
           ",RESPONSAVEL "
       "\nFROM "
       "\n( "
           "SELECT "
                "ROWNUM AS NLIN "
               ",OPERADORA "
               ",UF "
               ",IDATENDIMENTOPROTOCOLO "
               ",DTABERTURA "
               ",DTENTRADAFILA "
               ",NMGRUPO "
               ",NMGRUPOABERTURA "
               ",NMUSUARIOABERTURA "
               ",DSTIPOCARTEIRA "
               ",DSSEGMENTACAO "
               ",NRTELEFONECONTATO "
               ",DSTIPOPESSOA "
               ",DSESTADO "
               ",DSSUBESTADO "
               ",NMPATH "
               ",HORASDECORRIDAS "
               ",DTPRAZOFINAL"+TIPOPRAZO+
               ",NMLOGINUSUARIOATUAL "
               ",NMUSUARIOATUAL "
               ",RESPONSAVEL "
               ",DSFASE "
           "\nFROM "
           "\n( "
           "SELECT "
                "OPERADORA "
               ",UF "
               ",IDATENDIMENTOPROTOCOLO "
               ",DTABERTURA "
               ",DTENTRADAFILA "
               ",NMGRUPO "
               ",NMGRUPOABERTURA "
               ",NMUSUARIOABERTURA "
               ",DSTIPOCARTEIRA "
               ",DSSEGMENTACAO "
               ",NRTELEFONECONTATO "
               ",DSTIPOPESSOA "
               ",DSESTADO "
               ",DSSUBESTADO "
               ",NMPATH "
               ",HORASDECORRIDAS "
               ",DTPRAZOFINAL"+TIPOPRAZO+
               ",NMLOGINUSUARIOATUAL "
               ",NMUSUARIOATUAL "
               ",RESPONSAVEL "
               ",DSFASE "
           "\nFROM "
           "\n( "
               "SELECT "
                    "\n(SELECT PESSOPER.NMPESSOA FROM CUSTOMER.OPERADORA OPERADORA,CUSTOMER.PESSOADEPARA PESSOADEPARA,CUSTOMER.PESSOA PESSOPER WHERE OPERADORA.IDPESSOADEPARAOPERADORA = UFOPERADORA.IDPESSOADEPARAOPERADORA AND OPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA AND PESSOADEPARA.IDPESSOA = PESSOPER.IDPESSOA ) AS OPERADORA "
                   "\n,(SELECT UF.NMUF FROM APOIO.UF WHERE UFOPERADORA.IDUF = UF.IDUF) AS UF "
                   "\n,ATENDIMENTOPRIORIZACAO.IDATENDIMENTOPROTOCOLO "
                   "\n,TO_CHAR(ATENDIMENTOPRIORIZACAO.DTABERTURA,'MM/DD/YYYY HH24:MI') AS DTABERTURA"
                   "\n,(SELECT ATENDIMENTOGRUPOBKO.DTENTRADAFILA FROM ATENDIMENTO.ATENDIMENTOGRUPOBKO WHERE ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOGRUPOBKO.IDATENDIMENTO) AS DTENTRADAFILA"
                   "\n,(SELECT GRUPO.NMGRUPO FROM ACESSO.GRUPO GRUPO WHERE ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = GRUPO.IDGRUPO) AS NMGRUPO "
                   "\n,(SELECT GRUPOABER.NMGRUPO FROM ACESSO.GRUPO GRUPOABER WHERE GRUPOABER.IDGRUPO = ATENDIMENTOPRIORIZACAO.IDGRUPOABERTURA) AS NMGRUPOABERTURA "
                   "\n,(SELECT PESSABER.NMNOME||' '||PESSABER.NMSOBRENOME||' ('||USUABER.NMLOGINUSUARIO||')' FROM CUSTOMER.PESSOA PESSABER,ACESSO.USUARIO USUABER WHERE PESSABER.IDPESSOA = ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOABERTURA AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOABERTURA = USUABER.IDPESSOAUSUARIO) AS NMUSUARIOABERTURA "
                   "\n,(SELECT TIPOCARTEIRA.DSTIPOCARTEIRA FROM APOIO.TIPOCARTEIRA TIPOCARTEIRA WHERE ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA) AS DSTIPOCARTEIRA  "
                   "\n,(SELECT SEGMENTACAO.DSSEGMENTACAO FROM APOIO.SEGMENTACAO SEGMENTACAO WHERE ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO ) AS DSSEGMENTACAO  "
                   "\n,(SELECT ATENDIMENTOCONTATO.NRTELEFONECONTATO FROM ATENDIMENTO.ATENDIMENTOCONTATO ATENDIMENTOCONTATO WHERE ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOCONTATO.IDATENDIMENTO) AS NRTELEFONECONTATO"
                   "\n,(SELECT TIPOPESSOA.DSTIPOPESSOA FROM APOIO.TIPOPESSOA TIPOPESSOA WHERE ATENDIMENTOPRIORIZACAO.IDTIPOPESSOA=TIPOPESSOA.IDTIPOPESSOA) AS DSTIPOPESSOA "
                   "\n,(SELECT ESTADO.DSESTADO FROM WORKFLOW.ESTADO ESTADO WHERE AGRUPAMENTOESTADO.IDESTADO=ESTADO.IDESTADO) AS DSESTADO "
                   "\n,(SELECT SUBESTADO.DSSUBESTADO FROM WORKFLOW.SUBESTADO SUBESTADO WHERE AGRUPAMENTOESTADO.IDSUBESTADO=SUBESTADO.IDSUBESTADO) AS DSSUBESTADO "
                   "\n,(SELECT CONTATO.NMPATH FROM CONTATOADM.CONTATO CONTATO WHERE ATENDIMENTOPRIORIZACAO.IDCONTATO = CONTATO.IDCONTATO) AS NMPATH "
                   "\n,RTRIM(LTRIM(TO_CHAR(TRUNC(DECODE(SIGN(((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24)),-1,0,((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24))),'9999909')))||':'||RTRIM(LTRIM(TO_CHAR(ROUND(((DECODE(SIGN(((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24)),-1,0,((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24)) - TRUNC(DECODE(SIGN(((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24)),-1,0,((SYSDATE - (ATENDIMENTOPRIORIZACAO.DTABERTURA))*24))))*100)*.6,0),'09'))) AS HORASDECORRIDAS "
                   "\n,TO_CHAR(ATENDIMENTOPRIORIZACAO.DTPRAZOFINAL"+TIPOPRAZO+",'MM/DD/YYYY') AS DTPRAZOFINAL"+TIPOPRAZO+
                   "\n,(SELECT USUARIO.NMLOGINUSUARIO FROM ACESSO.USUARIO USUARIO WHERE ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUARIO.IDPESSOAUSUARIO) AS NMLOGINUSUARIOATUAL "
                   "\n,(SELECT PESSGST.NMNOME||' '||PESSGST.NMSOBRENOME||' ('||USUGST.NMLOGINUSUARIO||')' FROM CUSTOMER.PESSOA PESSGST,ACESSO.USUARIO USUGST WHERE PESSGST.IDPESSOA = ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUGST.IDPESSOAUSUARIO) AS NMUSUARIOATUAL "
                   //"\n,(SELECT (SELECT DECODE(PESSUPER.NMNOME,NULL,NULL,PESSUPER.NMNOME||' '||PESSUPER.NMSOBRENOME||' ('||USUSUPER.NMLOGINUSUARIO||')') FROM CUSTOMER.PESSOA PESSUPER,ACESSO.USUARIO USUSUPER WHERE PESSUPER.IDPESSOA = UH.IDPESSOAUSUARIOCHEFE AND UH.IDPESSOAUSUARIOCHEFE = USUSUPER.IDPESSOAUSUARIO) FROM ACESSO.USUARIOHIERARQUIA UH,ACESSO.USUARIOROLE UR,ACESSO.ROLE ROLE WHERE UH.IDPESSOAUSUARIO = ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL AND UH.IDPESSOAUSUARIOCHEFE = UR.IDPESSOAUSUARIO (+) AND UR.IDROLE = ROLE.IDROLE (+) AND (UR.IDROLE IS NULL OR ROLE.NMROLE LIKE '%%SUPERVISOR%%') AND ROWNUM < 2) AS RESPONSAVEL "
                   "\n,NULL AS RESPONSAVEL "
                   "\n,(SELECT FASE.DSFASE FROM WORKFLOW.FASE WHERE ATENDIMENTOPRIORIZACAO.IDFASE = FASE.IDFASE) AS DSFASE  "
               "\nFROM "
                   // "\nATENDIMENTO.ATENDIMENTOCONTATO ATENDIMENTOCONTATO "
                    "\nATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO "
                   //"\n,ATENDIMENTO.ATENDIMENTOGRUPOATUAL ATENDIMENTOGRUPOATUAL "
                   //"\n,ATENDIMENTO.ATENDIMENTOUSUARIOATUAL ATENDIMENTOUSUARIOATUAL "
                   //"\n,ATENDIMENTO.ATENDIMENTOANDAMENTOATUAL ATENDIMENTOANDAMENTOATUAL  "
                   //"\n,ANDAMENTO.ANDAMENTOTRANS ANDAMENTOTRANS "
                   "\n,WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRUPAMENTOESTADOTPPROC "
                   "\n,WORKFLOW.AGRUPAMENTOESTADO AGRUPAMENTOESTADO "
                   "\n,CUSTOMER.UFOPERADORA UFOPERADORA "
               "\nWHERE "
               //     "\nATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOGRUPOATUAL.IDATENDIMENTO "
               //"\nAND  ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOUSUARIOATUAL.IDATENDIMENTO (+) "
               //"\nAND  ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOANDAMENTOATUAL.IDATENDIMENTO "
               //"\nAND  ATENDIMENTOANDAMENTOATUAL.IDANDAMENTO = ANDAMENTOTRANS.IDANDAMENTO "
               //"\nAND  ANDAMENTOTRANS.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC "
                    "\nATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC "
               "\nAND  ATENDIMENTOPRIORIZACAO.IDANDAMENTOATUAL IS NOT NULL "
               "\nAND  AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADO = AGRUPAMENTOESTADO.IDAGRUPAMENTOESTADO "
               //"\nAND  ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOCONTATO.IDATENDIMENTO "
               "\nAND  ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA ";

    if ( idGrupo > 0 )
    {
        char valor[64];
        sprintf(valor,"%d",idGrupo);
        queryDin += "\nAND  ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = " + (string)valor;
    }

    if ( idPessoaUsuario > 0 )
    {
        char valor[64];
        sprintf(valor,"%d",idPessoaUsuario);
        queryDin += "\nAND  ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = " + (string)valor;
    }
    else
    {
        queryDin += "\nAND  ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL IS NULL ";
    }

    if ( whereFase.size() )
    {
        queryDin += "\nAND  " + whereFase;
    }

    queryDin +=
           "\n) NIVEL1 ";

    if ( where.size() )
    {
        queryDin += "\nWHERE " + where;
    }

    // O order by esta inviabilizando a execução da query em produção
    //queryDin += "\nORDER BY NIVEL1.IDATENDIMENTO ";

    queryDin +=
       "\n) NIVEL2\n) NIVEL3 ";

    queryDin += "\nWHERE NLIN >= " + (string)linIni + " AND NLIN <= " + (string)linFin;

    query = (char*)queryDin.c_str();

    ULOG(query);

    saida->createTag("WFRelatorioDinamicoVO");
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");

    if ( dados->bloco == 0 )
    {
        saidaDet = nmColuna;
    }

    for ( i=0; i<MAXCOLUNAS;i++ )
    {
        colunas[i].arr[0] = 0;
        colunas[i].len = 0;
    }

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR recebeQuery;

    EXEC SQL OPEN consulta;

    // char *p;

    int nRegs = 0;

    while ( true )
    {
        nRegs++;

        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

        EXEC SQL FETCH consulta INTO :colunas[ 0]:i_colunas[ 0],
                                     :colunas[ 1]:i_colunas[ 1],
                                     :colunas[ 2]:i_colunas[ 2],
                                     :colunas[ 3]:i_colunas[ 3],
                                     :colunas[ 4]:i_colunas[ 4],
                                     :colunas[ 5]:i_colunas[ 5],
                                     :colunas[ 6]:i_colunas[ 6],
                                     :colunas[ 7]:i_colunas[ 7],
                                     :colunas[ 8]:i_colunas[ 8],
                                     :colunas[ 9]:i_colunas[ 9],
                                     :colunas[10]:i_colunas[10],
                                     :colunas[11]:i_colunas[11],
                                     :colunas[12]:i_colunas[12],
                                     :colunas[13]:i_colunas[13],
                                     :colunas[14]:i_colunas[14],
                                     :colunas[15]:i_colunas[15],
                                     :colunas[16]:i_colunas[16],
                                     :colunas[17]:i_colunas[17],
                                     :colunas[18]:i_colunas[18];

            // if ( saidaDet.length() ) saidaDet += "\n";

            // for ( i=0;i<MAXCOLUNAS;i++ )
            // {
            //     CONVIND(colunas[i],i_colunas[i]);
            // 
            //     //===============================================================
            //     // Desabilitei devido ao custo deste processamento poder
            //     // impactar no tempo máximo de resposta permitido ao serviço.
            //     // Fev/2006 - Cassio
            //     //===============================================================
            //     //
            //     // Verifica se existe caractere conflitante com CSV_SEPARADOR
            //     // e se existir, substitui por 0x20
            //     //
            //     //while ( p=strstr((char*)colunas[i].arr,CSV_SEPARADOR),p )
            //     //{
            //     //    *p = ' ';
            //     //}
            // 
            //     saidaDet += (char*)(colunas[i].arr);
            // 
            //     if ( i < MAXCOLUNAS ) saidaDet += CSV_SEPARADOR;
            // }

        for ( i=0;i<MAXCOLUNAS;i++ )
        {
            CONVIND(colunas[i],i_colunas[i]);
        }

        if ( saidaDet.length() ) saidaDet += "\n";

        saidaDet +=(string)(char*)(colunas[0].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[1].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[2].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[3].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[4].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[5].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[6].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[7].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[8].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[9].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[10].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[11].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[12].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[13].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[14].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[15].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[16].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[17].arr)
                 + CSV_SEPARADOR 
                 + (string)(char*)(colunas[18].arr);

        if ( saidaDet.length() >= 22000L )
        {
            saida->addItem("csv",(char*)saidaDet.c_str());
            saidaDet.erase();
        }

    } // while ( true )

    if ( saidaDet.length() )
    {
        //if ( nRegs == 0 && dados->bloco == 0 ) // se não contém dados, somente os nomes das colunas foi gerado
        //{
        //    saidaDet += "\n";
        //}

        saida->addItem("csv",(char*)saidaDet.c_str());
    }

    saida->addItem("inFin", 1403 == sqlca.sqlcode ? true:false);

    saida->closeTag();

    EXEC SQL CLOSE consulta;

    ULOG_END( "proCExecutarRelatorio2Det()" );

    return true;
}

void MontarQuebra(string &nmColuna,st_AtendimentoRel *dados)
{
    nmColuna += obterNomeColunaFixa(ID_OPERADORA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_UF);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_NUM_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_DATA_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_DATA_ENTR_GRUPO);
    nmColuna += CSV_SEPARADOR;
    // não tem isso na especificacao
    //nmColuna += obterNomeColunaFixa(ID_DATA_DEVOLUCAO);
    //nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_GRUPO_ATUAL);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_GRUPO_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_USUARIO_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_CARTEIRA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_SEGMENTO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_FONE_CONTATO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_TIPO_CLIENTE);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_ESTADO_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_SUBEST_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_ARVORE_CONTATO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_HORAS_DECORRIDAS);
    nmColuna += CSV_SEPARADOR;

    if ( 'A' == toupper(dados->prazo[0]) )
    {
        nmColuna += obterNomeColunaFixa(ID_PRAZO_ANATEL);
    }
    else
    {
        nmColuna += obterNomeColunaFixa(ID_PRAZO_INTERNO);
    }
    nmColuna += CSV_SEPARADOR;

    nmColuna += obterNomeColunaFixa(ID_NOME_USUARIO_ATUAL);
    nmColuna += CSV_SEPARADOR;

    // O nome login do usuário atual esta sendo concatenado ao nome do 
    // usuário atual
    //nmColuna += obterNomeColunaFixa(ID_LOGIN_USU_ATUAL);
    //nmColuna += CSV_SEPARADOR;

    nmColuna += obterNomeColunaFixa(ID_NOME_GESTOR);

    ULOG( "Nomes de colunas=%s",nmColuna.c_str() );
}

void WFAtdRelObterDominiosAlfanumericos(string &nmGrupo,string &nmLoginUsuarioAtual,DOMNode *entrada,char *dnode)
{
    char *p0;
    char *p1;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( p0 = tx.walkTree(dn,"idColuna",0),p0 )
        {
            p1 = tx.walkTree(dn,"valor",0);

            if ( stricmp(p0,"nmGrupo") == 0 )
            {
                nmGrupo = p1;
            }
            else if ( stricmp(p0,"nmLoginUsuarioAtual") == 0 )
            {
                nmLoginUsuarioAtual = p1;
            }

            XMLString::release(&p1);
            XMLString::release(&p0);
        }
    }
}

void WFAtdRelCompletarWhereRel2(string &where,DOMNode *entrada,char *dnode)
{
    bool firstTime = true;
    char *p0;
    char *p1;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( !strcmp(dnode,"WFRelatoriosFiltroRegionalVO") )
        {
            if ( p0 = tx.walkTree(dn,"idRegional",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idUFOperadora=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        if ( !strcmp(dnode,"WFFaseVO") )
        {
            if ( p0 = tx.walkTree(dn,"idFase",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idFase=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"StatusUsuarioVO") )
        {
            if ( p0 = tx.walkTree(dn,"idStatus",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idStatusUsuario=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( p0 = tx.walkTree(dn,"idGrupo",0),p0 )
        {
            if ( firstTime )
            {
                if ( where.size() ) where += " AND ";
                where += "(";
                firstTime = false;
            }
            else
            {
                where += " OR ";
            }
            where += " idGrupo=" + (string) p0;
            XMLString::release(&p0);
        }
        else if ( p0 = tx.walkTree(dn,"idEstado",0),p0 )
        {
            if ( firstTime )
            {
                if ( where.size() ) where += " AND ";
                where += "(";
                firstTime = false;
            }
            else
            {
                where += " OR ";
            }
            where += " idEstado=" + (string) p0;
            XMLString::release(&p0);
        }
        else if ( p0 = tx.walkTree(dn,"idColuna",0),p0 )
        {
            p1 = tx.walkTree(dn,"valor",0);

            if ( stricmp(p0,"nmGrupoOperadora") == 0 )
            {
                continue; // Esta coluna não existe na query - Incidência 2331 - Fev/2006
            }

            if ( stricmp(p0,"nmGrupo") == 0 || stricmp(p0,"nmLoginUsuarioAtual") == 0 )
            {
                continue; // valor já tratado
            }

            if ( p1 )
            {
                if ( *p1 )
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + " = '" + (string)p1 + "'";
                }
                else
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + (string)" IS NULL";
                }

                XMLString::release(&p1);
            }
            else
            {
                Mensagem me = Endereco(__LINE__,__FILE__).mensagem("campo 'valor' para '%s' "
                                                                   "do %do donNode '%s' nao definido"
                                                                  ,p0,index,dnode);
                ULOGE("%s",me.MsgPadrao());
                throw new TuxBasicSvcException("04E9999",me.MsgPadrao());
            }
            XMLString::release(&p0);
        }
    }

    if ( !firstTime )
    {
        where += ")";
    }
}

void WFAtdRelCompletarWhereRel2Fase(string &where,DOMNode *entrada,char *dnode)
{
    bool firstTime = true;
    char *p0;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        // WFEstadoVO esta trocado. Deve-se entendê-lo como
        // um solicitante de campo de idFase.
        if ( !strcmp(dnode,"WFEstadoVO") )
        {
            if ( p0 = tx.walkTree(dn,"idEstado",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " ATENDIMENTOPRIORIZACAO.IDFASE=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFGrupoVO") )
        {
            if ( p0 = tx.walkTree(dn,"idGrupo",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRFRVO") )
        {
            if ( p0 = tx.walkTree(dn,"id",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroRegionalVO") )
        {
            if ( p0 = tx.walkTree(dn,"idRegional",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " UFOPERADORA.IDUFOPERADORA=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroOperadoraVO") )
        {
            if ( p0 = tx.walkTree(dn,"idOperadora",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " UFOPERADORA.IDPESSOADEPARAOPERADORA=" + (string) p0;
                XMLString::release(&p0);
            }
        }

    }

    if ( !firstTime )
    {
        where += ")";
    }
}
