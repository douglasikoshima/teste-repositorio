/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:47 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../include/cWFAtdAssocDocTe.h"

void WFAtdAssocDocTe(sqlca*sqlca);

bool proCBuscarDataHora( st_AtdAssocDocTe *dados )
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR dataAtual[256];
        short i_dataAtual;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND DO WFAtdAssocDocTe(&sqlca);
    EXEC SQL WHENEVER SQLERROR DO WFAtdAssocDocTe(&sqlca);
    EXEC SQL SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI') 
               INTO :dataAtual:i_dataAtual
               FROM DUAL;

    CONVIND(dataAtual,i_dataAtual);

    sprintf(dados->dataAtual,"%.*s",sizeof(dados->dataAtual)-1,dataAtual.arr);

    ULOG("dataAtual='%s'",dados->dataAtual);

    return true;
}

bool proCDocTecObterComentario(DadosDocTecnico *dadosDocTecnico)
{
    ULOG_START("proCDocTecObterComentario()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int idDocumentoTecnico = dadosDocTecnico->idDocumentoTecnico;
        VARCHAR szNRDOCUMENTO[256];
        VARCHAR szDSDOCUMENTO[256];
        VARCHAR szCOMENTARIOFECHAMENTO[256];
        VARCHAR szDSDOCUMENTOTECNICOTIPO[256];

        short iNRDOCUMENTO = -1;
        short iDSDOCUMENTO = -1;
        short iCOMENTARIOFECHAMENTO = -1;
        short iDSDOCUMENTOTECNICOTIPO = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdAssocDocTe(&sqlca);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idDocumentoTecnico=%d",idDocumentoTecnico);

    EXEC SQL
        SELECT
            DOCUMENTOTECNICO.NRDOCUMENTO,
            DOCUMENTOTECNICO.DSDOCUMENTO,
            DOCUMENTOTECNICO.COMENTARIOFECHAMENTO,
            DOCUMENTOTECNICOTIPO.DSDOCUMENTOTECNICOTIPO
        INTO
            :szNRDOCUMENTO:iNRDOCUMENTO,
            :szDSDOCUMENTO:iDSDOCUMENTO,
            :szCOMENTARIOFECHAMENTO:iCOMENTARIOFECHAMENTO,
            :szDSDOCUMENTOTECNICOTIPO:iDSDOCUMENTOTECNICOTIPO
        FROM
            ATENDIMENTO.DOCUMENTOTECNICO DOCUMENTOTECNICO,
            ATENDIMENTO.DOCUMENTOTECNICOTIPO DOCUMENTOTECNICOTIPO
        WHERE
            DOCUMENTOTECNICO.IDDOCUMENTOTECNICO = :idDocumentoTecnico
        AND DOCUMENTOTECNICOTIPO.IDDOCUMENTOTECNICOTIPO
                                    = DOCUMENTOTECNICO.IDDOCUMENTOTECNICOTIPO;
    bool retorno = false;
    if ( 0 == sqlca.sqlcode )
    {
        CONVIND(szNRDOCUMENTO,iNRDOCUMENTO);
        CONVIND(szDSDOCUMENTO,iDSDOCUMENTO);
        CONVIND(szCOMENTARIOFECHAMENTO,iCOMENTARIOFECHAMENTO);
        CONVIND(szDSDOCUMENTOTECNICOTIPO,iDSDOCUMENTOTECNICOTIPO);

        dadosDocTecnico->nrDocumento = (char*)szNRDOCUMENTO.arr;
        dadosDocTecnico->dsDocumento = (char*)szDSDOCUMENTO.arr;
        dadosDocTecnico->ComentarioFechamento = (char*)szCOMENTARIOFECHAMENTO.arr;
        dadosDocTecnico->dsDocumentotecnicoTipo = (char*)szDSDOCUMENTOTECNICOTIPO.arr;

        retorno = true;
    }

    ULOG("retorno=%d",retorno);

    ULOG_END("proCDocTecObterComentario()");

    return retorno;
}

void WFAtdAssocDocTe(sqlca*sqlca)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("WFAtdAssocDocTe:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
