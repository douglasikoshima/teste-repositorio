
#include "../include/cPsqPessoTpComPC.h"

void cPsqPessoTpComPC::pesquisaPessoaTpComunicPC( st_VariaveisTpComunic *_dadosEntradaPC, Collection *_ResultadoPC )
{
	ULOG_START("icPsqPessoTpComPC::pesquisaPessoaTpComunicPC()");

	struct sqlca sqlca;
	st_VariaveisTpComunic * pResult;

   EXEC SQL BEGIN DECLARE SECTION;
      int idTipoComunic = _dadosEntradaPC->idTipoComunic ? atoi(_dadosEntradaPC->idTipoComunic) : 0;
      unsigned long idPessoa = _dadosEntradaPC->idPessoa ? atol(_dadosEntradaPC->idPessoa) : 0;

      VARCHAR dsTpComunicacao[ 256 ];
      VARCHAR idPessoaComunic[ 256 ];
      VARCHAR dsContato[ 256 ];

      short i_dsTpComunicacao=-1;
      short i_idPessoaComunic=-1;
      short i_dsContato=-1;
   EXEC SQL END DECLARE SECTION;

   dsTpComunicacao.arr[0] = 0;

   ULOG("SELECT dsTipoComunicacao "
          "FROM apoio.TipoComunicacao "
          "WHERE idTipoComunicacao = %d",idTipoComunic);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFpsqPessoaTpComunic( &sqlca );

    EXEC SQL 
        SELECT 
            DSTIPOCOMUNICACAO
        INTO
            :dsTpComunicacao:i_dsTpComunicacao
        FROM 
            APOIO.TIPOCOMUNICACAO
        WHERE 
            IDTIPOCOMUNICACAO = :idTipoComunic;

   if ( i_dsTpComunicacao >= 0 )
   {
       CONVIND( dsTpComunicacao,i_dsTpComunicacao );

       ULOG("dsTipoComunicacao = '%s'",(char *)dsTpComunicacao.arr);
   }
   else
   {
       ULOG("dsTipoComunicacao nao encontrado!");
   }
   
   ULOG("SELECT idPessoaComunicacao,dsContato "
                        "FROM customer.PessoaComunicacao "
                       "WHERE idPessoa = %lu "
                         "AND idTipoComunicacao = %d"
                         ,idPessoa,idTipoComunic);

   EXEC SQL WHENEVER NOT FOUND DO BREAK;
   EXEC SQL DECLARE crSelectTpComunic CURSOR FOR
      SELECT 
         IDPESSOACOMUNICACAO,
         DSCONTATO 
      FROM 
         CUSTOMER.PESSOACOMUNICACAO
      WHERE 
         IDPESSOA = :idPessoa 
      AND
         IDTIPOCOMUNICACAO = :idTipoComunic;      

   EXEC SQL OPEN crSelectTpComunic;

    for(;;)
    {
         EXEC SQL FETCH crSelectTpComunic INTO 
                           :idPessoaComunic:i_idPessoaComunic,
                           :dsContato:i_dsContato;

         CONVIND( idPessoaComunic,i_idPessoaComunic );
         CONVIND( dsContato,i_dsContato );

         pResult = new st_VariaveisTpComunic;
         if ( pResult )
         {
            strcpy( pResult->idPessoa,(char*)_dadosEntradaPC->idPessoa );
            strcpy( pResult->idTipoComunic,(char*)_dadosEntradaPC->idTipoComunic );
            strcpy( pResult->dsTpComunicacao,(char*)dsTpComunicacao.arr );
            strcpy( pResult->idPessoaComunic,(char*)idPessoaComunic.arr );
            strcpy( pResult->dsContato,(char*)dsContato.arr );
            _ResultadoPC->AddItem( (void*) pResult );
         }
         else
         {
         	ULOG("ERRO: Nao Consegue Alocar Memoria para os Dados.");
         }
    }

    EXEC SQL CLOSE crSelectTpComunic;

	ULOG_END("icPsqPessoTpComPC::pesquisaPessoaTpComunicPC()");
}

void cPsqPessoTpComPC::pesquisaPessoaComunicacaoPC( unsigned long sIdPessoa, XMLGen *saida )
{
    ULOG_START("icPsqPessoTpComPC::pesquisaPessoaComunicacaoPC()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoa = sIdPessoa ;

        VARCHAR idPessoaComunicacao[21];
        int idTipoComunicacao;
        VARCHAR sgTipoComunicacao[256];
        VARCHAR dsTipoComunicacao[256];
        VARCHAR dsContato[256];
        VARCHAR nrSequencia[21];
        VARCHAR dtCadastro[11];
        int inSincronismo;
        int idFormaRetorno;

        short i_idPessoaComunicacao;
        short i_idTipoComunicacao;
        short i_sgTipoComunicacao;
        short i_dsTipoComunicacao;
        short i_dsContato;
        short i_nrSequencia;
        short i_dtCadastro;
        short i_inSincronismo;
        short i_idFormaRetorno;

    EXEC SQL END DECLARE SECTION;

    ULOG("idPessoa = %lu ",idPessoa);

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL DECLARE crSelectPessoaComunicacao CURSOR FOR
        SELECT 
            PC.IDPESSOACOMUNICACAO, 
            PC.IDTIPOCOMUNICACAO,
            TC.SGTIPOCOMUNICACAO,
            TC.DSTIPOCOMUNICACAO,
            PC.DSCONTATO,
            PC.NRSEQUENCIA,
            TO_CHAR(PC.DTCADASTRO, 'DD/MM/YYYY'),
            0,
            TC.IDFORMARETORNO
        FROM 
            CUSTOMER.PESSOACOMUNICACAO PC,
            APOIO.TIPOCOMUNICACAO TC
        WHERE 
            PC.IDTIPOCOMUNICACAO = TC.IDTIPOCOMUNICACAO
        AND PC.IDPESSOA = :idPessoa 
        AND TC.IDFORMARETORNO > 0
        ORDER BY
            PC.NRSEQUENCIA;      

    EXEC SQL OPEN crSelectPessoaComunicacao;

    for(;;)
    {
        i_idPessoaComunicacao = i_sgTipoComunicacao = i_dsTipoComunicacao 
            = i_nrSequencia = i_dtCadastro = i_dsContato = -1;

        EXEC SQL 
            FETCH 
                crSelectPessoaComunicacao 
            INTO
                :idPessoaComunicacao:i_idPessoaComunicacao,
                :idTipoComunicacao:i_idTipoComunicacao,
                :sgTipoComunicacao:i_sgTipoComunicacao,
                :dsTipoComunicacao:i_dsTipoComunicacao,
                :dsContato:i_dsContato,
                :nrSequencia:i_nrSequencia,
                :dtCadastro:i_dtCadastro,
                :inSincronismo:i_inSincronismo,
                :idFormaRetorno:i_idFormaRetorno;

        CONVIND(idPessoaComunicacao,i_idPessoaComunicacao);
        CONVIND(sgTipoComunicacao,i_sgTipoComunicacao);
        CONVIND(dsTipoComunicacao,i_dsTipoComunicacao);
        CONVIND(nrSequencia,i_nrSequencia);
        CONVIND(dtCadastro,i_dtCadastro);
        CONVIND(dsContato,i_dsContato);

        saida->createTag("ComunicacaoVO");
            saida->addItem("idComunicacao", (char *) idPessoaComunicacao.arr );
            saida->addItem("dsContato", (char *) dsContato.arr );
            saida->addItem("nrSequencia", (char *) nrSequencia.arr );
            saida->addItem("dtCadastro", (char *) dtCadastro.arr );
            saida->addItem("inSincronismo", inSincronismo );
            saida->createTag("TipoComunicacaoVO");
                saida->addItem("idTipoComunicacao", idTipoComunicacao );
                saida->addItem("sgTipoComunicacao", (char *) sgTipoComunicacao.arr );
                saida->addItem("dsTipoComunicacao", (char *) dsTipoComunicacao.arr );
                saida->addItem("idFormaRetorno", idFormaRetorno );
            saida->closeTag();
        saida->closeTag();
    }

    EXEC SQL CLOSE crSelectPessoaComunicacao;

	ULOG_END("icPsqPessoTpComPC::pesquisaPessoaComunicacaoPC()");
}

void cPsqPessoTpComPC::pesquisaTipoComunicacaoPC( XMLGen *saida )
{
    ULOG_START("icPsqPessoTpComPC::pesquisaTipoComunicacaoPC()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idTipoComunicacao;
        int idFormaRetorno;
        VARCHAR sgTipoComunicacao[256];
        VARCHAR dsTipoComunicacao[256];

        short i_idTipoComunicacao;
        short i_sgTipoComunicacao;
        short i_dsTipoComunicacao;
        short i_idFormaRetorno;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL DECLARE crSelectTipoComunicacao CURSOR FOR
        SELECT 
            TC.IDTIPOCOMUNICACAO,
            TC.SGTIPOCOMUNICACAO,
            TC.DSTIPOCOMUNICACAO,
            TC.IDFORMARETORNO
        FROM 
            APOIO.TIPOCOMUNICACAO TC
        WHERE 
            TC.IDFORMARETORNO > 0
        ORDER BY
            TC.DSTIPOCOMUNICACAO;      

    EXEC SQL OPEN crSelectTipoComunicacao;

    for(;;)
    {
        i_sgTipoComunicacao = i_dsTipoComunicacao = -1;

        EXEC SQL 
            FETCH 
                crSelectTipoComunicacao 
            INTO 
                :idTipoComunicacao:i_idTipoComunicacao,
                :sgTipoComunicacao:i_sgTipoComunicacao,
                :dsTipoComunicacao:i_dsTipoComunicacao,
                :idFormaRetorno:i_idFormaRetorno;

        CONVIND( sgTipoComunicacao,i_sgTipoComunicacao );
        CONVIND( dsTipoComunicacao,i_dsTipoComunicacao );

        saida->createTag("TipoComunicacaoVO");
            saida->addItem("idTipoComunicacao", idTipoComunicacao );
            saida->addItem("sgTipoComunicacao", (char *) sgTipoComunicacao.arr );
            saida->addItem("dsTipoComunicacao", (char *) dsTipoComunicacao.arr );
            saida->addItem("idFormaRetorno", idFormaRetorno );
        saida->closeTag();
    }

    EXEC SQL CLOSE crSelectTipoComunicacao;

	ULOG_END("icPsqPessoTpComPC::pesquisaTipoComunicacaoPC()");
}

void cPsqPessoTpComPC::sql_error_WFpsqPessoaTpComunic( sqlca * sqlca )
{
	ULOGE("Ocorreu um erro na pesquisa de pessoa tipo comunicacao.");
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
