/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:37 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#ifdef WIN32
#pragma warning(disable:4786)
#endif
#include <string>
using namespace std;

#include"../include/classdef.h"

//EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
void sql_error_RetornoWFCTI(sqlca*sqlca);

EXEC SQL WHENEVER SQLERROR DO sql_error_RetornoWFCTI(&sqlca);

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

void RetornoWFCTI::Insert()
{
    ULOG_START("RetornoWFCTI::Insert()");  
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        int idretornowfcti;
        VARCHAR sgretornowfcti[255];
        VARCHAR sgretornowfctiComp[255];
        VARCHAR dsretornowfcti[255];
        VARCHAR sgstatus[1];
        int inpadrao;
        int idusuarioalteracao;
        short i_sgretornowfctiComp;
    EXEC SQL END DECLARE SECTION;

    if(!rwfcti.sgretornowfcti.len||!rwfcti.dsretornowfcti.len||!rwfcti.sgstatus.len||
        rwfcti.inpadrao<0)
        throw new TuxBasicSvcException("00E9999","Invalid field value");

    EXEC SQL SELECT workflow.RetornoWFCTISQ.nextval INTO :idretornowfcti FROM DUAL;

    FROM_STR_TO_VARCHAR(sgretornowfcti,rwfcti.sgretornowfcti);
    FROM_STR_TO_VARCHAR(sgretornowfcti,rwfcti.sgretornowfcti);
    FROM_STR_TO_VARCHAR(dsretornowfcti,rwfcti.dsretornowfcti);
    FROM_STR_TO_VARCHAR(sgstatus,rwfcti.sgstatus);
    inpadrao=rwfcti.inpadrao;
    idusuarioalteracao=rwfcti.idusuarioalteracao;

    EXEC SQL SELECT UPPER(:sgretornowfcti) INTO :sgretornowfcti FROM DUAL;

    EXEC SQL SELECT UPPER(sgretornowfcti) INTO :sgretornowfctiComp:i_sgretornowfctiComp 
               FROM workflow.RetornoWFCTI 
              WHERE sgretornowfcti = :sgretornowfcti;

    CONVIND(sgretornowfctiComp,i_sgretornowfctiComp);

    if ( *(char*)sgretornowfctiComp.arr )
    {
        string mensagem = "Sigla '" + (string)(char*)sgretornowfctiComp.arr + "' ja existe na tabela RetornoWFCTI";
        throw new TuxBasicSvcException("00E9999",(char*)mensagem.c_str());
    }

    EXEC SQL INSERT INTO workflow.RetornoWFCTI
        (idretornowfcti,sgretornowfcti,dsretornowfcti,sgstatus,inpadrao,
        idusuarioalteracao,dtultimaalteracao)
        VALUES
        (:idretornowfcti,:sgretornowfcti,:dsretornowfcti,
        :sgstatus,:inpadrao,:idusuarioalteracao,SYSDATE);

    pxml->createTag(RETORNOWFCTIVO);
    pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    pxml->addItem(IDRETORNOWFCTI,idretornowfcti);
    pxml->closeTag();
    
    ULOG_END("RetornoWFCTI::Insert()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}
void RetornoWFCTI::Delete()
{
    ULOG_START("RetornoWFCTI::Delete()");  
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        int idretornowfcti;
    EXEC SQL END DECLARE SECTION;
    if(rwfcti.idretornowfcti<0)
        throw new TuxBasicSvcException("00E9999","Invalid idRetornoWFCTI value");
    idretornowfcti=rwfcti.idretornowfcti;

    EXEC SQL DELETE FROM workflow.RetornoWFCTI WHERE idretornowfcti=:idretornowfcti;

    pxml->createTag(RETORNOWFCTIVO);
    pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    pxml->addItem(IDRETORNOWFCTI,idretornowfcti);
    pxml->closeTag();
    
    ULOG_START("RetornoWFCTI::Delete()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}
void RetornoWFCTI::Update()
{
    ULOG_START("RetornoWFCTI::Update()");  
    
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        int idretornowfcti;
        VARCHAR sgretornowfcti[255];
        VARCHAR dsretornowfcti[255];
        VARCHAR sgstatus[1];
        int inpadrao;
        int idusuarioalteracao;
    EXEC SQL END DECLARE SECTION;
    if(!rwfcti.sgretornowfcti.len||!rwfcti.dsretornowfcti.len||!rwfcti.sgstatus.len||
        rwfcti.inpadrao<0||rwfcti.idretornowfcti<0)
        throw new TuxBasicSvcException("00E9999","Invalid field value");

    FROM_STR_TO_VARCHAR(sgretornowfcti,rwfcti.sgretornowfcti);
    FROM_STR_TO_VARCHAR(dsretornowfcti,rwfcti.dsretornowfcti);
    FROM_STR_TO_VARCHAR(sgstatus,rwfcti.sgstatus);
    inpadrao=rwfcti.inpadrao;
    idusuarioalteracao=rwfcti.idusuarioalteracao;
    idretornowfcti=rwfcti.idretornowfcti;

    EXEC SQL UPDATE workflow.RetornoWFCTI SET
        sgretornowfcti=:sgretornowfcti,dsretornowfcti=:dsretornowfcti,
        sgstatus=:sgstatus,inpadrao=:inpadrao,idusuarioalteracao=:idusuarioalteracao,
        dtultimaalteracao=SYSDATE
    WHERE idretornowfcti=:idretornowfcti;

    pxml->createTag(RETORNOWFCTIVO);
    pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    pxml->addItem(IDRETORNOWFCTI,idretornowfcti);
    pxml->closeTag();
    
    ULOG_END("RetornoWFCTI::Update()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}

void RetornoWFCTI::SelectByUser()
{
    ULOG_START("RetornoWFCTI::SelectByUser()");  
    
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            int idretornowfcti;
            VARCHAR sgretornowfcti[255];
            VARCHAR dsretornowfcti[255];
            VARCHAR sgstatus[2];
            VARCHAR inpadrao[2];
        }srgbu;
        int idusr;
    EXEC SQL END DECLARE SECTION;
    idusr=rwfcti.idusuarioalteracao;

    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE crSelectRGrpByUsr CURSOR FOR
    SELECT idretornowfcti,sgretornowfcti,
            dsretornowfcti,sgstatus,'N' inpadrao
            FROM workflow.retornowfcti
            WHERE inpadrao=0 AND EXISTS
            (SELECT idretornowfcti FROM workflow.gruporetornowfcti
            WHERE idretornowfcti=workflow.retornowfcti.idretornowfcti AND EXISTS
            (SELECT a.idpessoausuario FROM acesso.usuariogrupo a,acesso.usuario b
            WHERE idgrupo=workflow.gruporetornowfcti.idgrupo
            AND a.idpessoausuario=b.idpessoausuario
            AND a.idpessoausuario=:idusr))
            UNION ALL
            SELECT idretornowfcti,sgretornowfcti,
            dsretornowfcti,sgstatus,'S' inpadrao
            FROM workflow.retornowfcti
            WHERE inpadrao=1 AND NOT EXISTS
            (SELECT idretornowfcti FROM workflow.gruporetornowfcti
            WHERE EXISTS
            (SELECT a.idpessoausuario FROM acesso.usuariogrupo a,acesso.usuario b
            WHERE idgrupo=workflow.gruporetornowfcti.idgrupo
            AND a.idpessoausuario=b.idpessoausuario
            AND a.idpessoausuario=:idusr))
            ORDER BY idretornowfcti;

    EXEC SQL OPEN crSelectRGrpByUsr;

    pxml->createTag("RetornoWFCTIResultadoVO");
    pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    for(;;)
    {
        EXEC SQL FETCH crSelectRGrpByUsr INTO :srgbu;
        CL_FETCH(srgbu.sgretornowfcti);
        CL_FETCH(srgbu.dsretornowfcti);
        CL_FETCH(srgbu.sgstatus);
        CL_FETCH(srgbu.inpadrao);
        pxml->createTag("RetornoWFCTIVO");
        pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
        pxml->addItem("idRetornoWFCTI",srgbu.idretornowfcti);
        pxml->addItem("sgRetornoWFCTI",(char*)srgbu.sgretornowfcti.arr);
        pxml->addItem("dsRetornoWFCTI",(char*)srgbu.dsretornowfcti.arr);
        pxml->addItem("sgStatus",(char*)srgbu.sgstatus.arr);
        pxml->addItem("inPadrao",(char*)srgbu.inpadrao.arr);
        pxml->closeTag();
    }

    EXEC SQL CLOSE crSelectRGrpByUsr;

    pxml->closeTag();
    
    ULOG_END("RetornoWFCTI::SelectByUser()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}

void RetornoWFCTI::SelectByUserCTI( XMLGen * pxml )
{
    ULOG_START("RetornoWFCTI::SelectByUserCTI()");  
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            int idretornowfcti;
            VARCHAR sgretornowfcti[255];
            VARCHAR dsretornowfcti[255];
            VARCHAR sgstatus[2];
            VARCHAR inpadrao[2];
        }srgbu;
        int idusr;
    EXEC SQL END DECLARE SECTION;
    idusr=rwfcti.idusuarioalteracao;

    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE crSelectRGrpByUsrCTI CURSOR FOR
        SELECT idretornowfcti,sgretornowfcti,
               dsretornowfcti,sgstatus,'N' inpadrao
          FROM workflow.retornowfcti
         WHERE inpadrao = 0
           AND EXISTS (SELECT idretornowfcti 
                         FROM workflow.gruporetornowfcti
                        WHERE idretornowfcti=workflow.retornowfcti.idretornowfcti 
                          AND EXISTS (SELECT a.idpessoausuario 
                                        FROM acesso.usuariogrupo a,acesso.usuario b
                                       WHERE idgrupo=workflow.gruporetornowfcti.idgrupo
                                         AND a.idpessoausuario=b.idpessoausuario
                                         AND a.idpessoausuario=:idusr
                                     )
                      )
    UNION ALL
        SELECT idretornowfcti,sgretornowfcti,
               dsretornowfcti,sgstatus,'S' inpadrao
          FROM workflow.retornowfcti
         WHERE inpadrao = 1 
           AND NOT EXISTS (SELECT idretornowfcti 
                             FROM workflow.gruporetornowfcti
                            WHERE EXISTS (SELECT a.idpessoausuario 
                                            FROM acesso.usuariogrupo a
                                                ,acesso.usuario b
                                           WHERE idgrupo=workflow.gruporetornowfcti.idgrupo
                                             AND a.idpessoausuario=b.idpessoausuario
                                             AND a.idpessoausuario=:idusr
                                         )
                          )
    ORDER BY idretornowfcti;

    EXEC SQL OPEN crSelectRGrpByUsrCTI;

    for(;;)
    {
        EXEC SQL FETCH crSelectRGrpByUsrCTI INTO :srgbu;
        CL_FETCH(srgbu.sgretornowfcti);
        CL_FETCH(srgbu.dsretornowfcti);
        CL_FETCH(srgbu.sgstatus);
        CL_FETCH(srgbu.inpadrao);
        pxml->createTag("RetornoWFCTIVO");
        pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
        pxml->addItem("idRetornoWFCTI",srgbu.idretornowfcti);
        pxml->addItem("sgRetornoWFCTI",(char*)srgbu.sgretornowfcti.arr);
        pxml->addItem("dsRetornoWFCTI",(char*)srgbu.dsretornowfcti.arr);
        pxml->addItem("sgStatus",(char*)srgbu.sgstatus.arr);
        pxml->addItem("inPadrao",(char*)srgbu.inpadrao.arr);
        pxml->closeTag();
    }

    EXEC SQL CLOSE crSelectRGrpByUsrCTI;

    pxml->closeTag();
    
    ULOG_END("RetornoWFCTI::SelectByUserCTI()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}

void RetornoWFCTI::SelectByGroup()
{
    ULOG_START("RetornoWFCTI::SelectByGroup()");  
    
    INITIALIZE_SQL;
    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            int idretornowfcti;
            VARCHAR sgretornowfcti[255];
            VARCHAR dsretornowfcti[255];
            VARCHAR sgstatus[2];
            VARCHAR inpadrao[2];
        }srgbu;
        int idgrp;
    EXEC SQL END DECLARE SECTION;
    idgrp=rwfcti.idgrupo;

    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE crSelectRGrp CURSOR FOR
    SELECT idretornowfcti,sgretornowfcti,
            dsretornowfcti,sgstatus,'N' inpadrao
            FROM workflow.retornowfcti
            WHERE inpadrao=0 AND EXISTS
            (SELECT idretornowfcti FROM workflow.gruporetornowfcti
            WHERE idgrupo=:idgrp)
            UNION ALL
            SELECT idretornowfcti,sgretornowfcti,
            dsretornowfcti,sgstatus,'S' inpadrao
            FROM workflow.retornowfcti
            WHERE inpadrao=1 AND NOT EXISTS
            (SELECT idretornowfcti FROM workflow.gruporetornowfcti
            WHERE idgrupo=:idgrp)
            ORDER BY idretornowfcti;

    EXEC SQL OPEN crSelectRGrp;

    pxml->createTag("RetornoWFCTIResultadoVO");
    pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    for(;;)
    {
        EXEC SQL FETCH crSelectRGrp INTO :srgbu;
        CL_FETCH(srgbu.sgretornowfcti);
        CL_FETCH(srgbu.dsretornowfcti);
        CL_FETCH(srgbu.sgstatus);
        CL_FETCH(srgbu.inpadrao);
        pxml->createTag("RetornoWFCTIVO");
        pxml->addProp("xmlns","workflow.fo.vivo.com.br/vo");
        pxml->addItem("idRetornoWFCTI",srgbu.idretornowfcti);
        pxml->addItem("sgRetornoWFCTI",(char*)srgbu.sgretornowfcti.arr);
        pxml->addItem("dsRetornoWFCTI",(char*)srgbu.dsretornowfcti.arr);
        pxml->addItem("sgStatus",(char*)srgbu.sgstatus.arr);
        pxml->addItem("inPadrao",(char*)srgbu.inpadrao.arr);
        pxml->closeTag();
    }

    EXEC SQL CLOSE crSelectRGrp;

    pxml->closeTag();
    
    ULOG_START("RetornoWFCTI::SelectByGroup()");  
    
    return;

//UndefinedError:
//    throw TuxBasicOraException(sqlca.sqlcode);
}


void sql_error_RetornoWFCTI(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
