#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoCampoDominio.h"
#include "../include/stWFAtendimentoCampoDominio.h"

void sql_error_WFAtendimentoCampoDominio(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoCampoDominio.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoCampoDominio(st_AtendimentoCampoDominio* dados, st_vlAtendimentoCampoDominio* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoCampoDominio   oDados;
		struct st_vlAtendimentoCampoDominio oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoCampoDominio(&sqlca);

	EXEC SQL 
		INSERT INTO
			atendimento.AtendimentoCampoDominio
			(
				idAtendimentoCampo,
				idDominio
			)
			VALUES
			(
				:oDados.idAtendimentoCampo,				
				:oDados.idDominio
			);

	saida->createTag("Registro");
		saida->addItem("idAtendimentoCampo", oDados.idAtendimentoCampo);
	saida->closeTag();

	return true;
}

bool proCAlterarWFAtendimentoCampoDominio(st_AtendimentoCampoDominio* dados, st_vlAtendimentoCampoDominio* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoCampoDominio   oDados;
		struct st_vlAtendimentoCampoDominio oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoCampoDominio(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoCampoDominio SET ");

	bool separa = false;

	if (status->idDominio != -1) 
		montaUpdate("idDominio", oDados.idDominio, 1);

	sprintf(query, "%s WHERE idAtendimentoCampo = %ld", query, dados->idAtendimentoCampo);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoCampoDominio(st_AtendimentoCampoDominio* dados, st_vlAtendimentoCampoDominio* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoCampo = dados->idAtendimentoCampo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoCampoDominio(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoCampoDominio
		WHERE
			idAtendimentoCampo = :idAtendimentoCampo;

	return true;
}

bool proCConsultaWFAtendimentoCampoDominio(st_AtendimentoCampoDominio* dados, st_vlAtendimentoCampoDominio* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoCampo;
		int idDominio;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idAtendimentoCampo, idDominio FROM atendimento.AtendimentoCampoDominio ");

	bool separa = false;

	if (status->idAtendimentoCampo != -1) 
		montaWhere("idAtendimentoCampo", dados->idAtendimentoCampo, 1);

	if (status->idDominio != -1)
		montaWhere("idDominio", dados->idDominio, 1);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoCampoDominio(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoCampoDominio FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoCampoDominio;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idAtendimentoCampo, :idDominio;

		saida->createTag("WFAtendimentoCampoDominioVO");
			saida->addItem("idAtendimentoCampo", idAtendimentoCampo);
			saida->addItem("idDominio", idDominio);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;

	return true;

}

void sql_error_WFAtendimentoCampoDominio(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
