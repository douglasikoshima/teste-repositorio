
#include "../include/cDomCampoDinPC.h"

void cDomCampoDinPC::pesquisaDominioCampoDinamicoPC( st_VariaveisDomCampoDin *_dadosEntradaPC, Collection *_ResultadoPC )
{
    ULOG_START( "cDomCampoDinPC::pesquisaDominioCampoDinamicoPC()" );

    struct sqlca sqlca;
    st_VariaveisDomCampoDin * pResult;

   EXEC SQL BEGIN DECLARE SECTION;
      int idCampoParam = _dadosEntradaPC->idCampo ? atoi( _dadosEntradaPC->idCampo ) : 0;
      int idUFOperadoraParam = _dadosEntradaPC->idUFOperadora ? atoi( _dadosEntradaPC->idUFOperadora ) : 0;
      int idTipoLinhaParam = _dadosEntradaPC->idTipoLinha ? atoi( _dadosEntradaPC->idTipoLinha ) : 0;

      VARCHAR idCampo[ 256 ];
      VARCHAR nmCampo[ 256 ];
      VARCHAR idTabelaDominio[ 256 ];
      VARCHAR idDominio[ 256 ];
      VARCHAR nmDominio[ 256 ];

      short i_idCampo=-1;
      short i_nmCampo=-1;
      short i_idTabelaDominio=-1;
      short i_idDominio=-1;
      short i_nmDominio=-1;
   EXEC SQL END DECLARE SECTION;

    ULOG( "SELECT idCampo,nmCampo,idTabelaDominio "
          "FROM Atendimento.CampoDominioV01 "
          "WHERE idCampo = %d", idCampoParam );

   EXEC SQL WHENEVER SQLERROR DO sql_error_WFpsqDomCampoDin( &sqlca );
   EXEC SQL SELECT 
      idCampo, 
      nmCampo, 
      idTabelaDominio
   INTO
      :idCampo:i_idCampo,
      :nmCampo:i_nmCampo,
      :idTabelaDominio:i_idTabelaDominio
   FROM 
      Atendimento.CampoDominioV01 
   WHERE 
      idCampo = :idCampoParam;

   if ( i_idCampo >= 0 )
   {
       CONVIND( idCampo,i_idCampo );
       CONVIND( nmCampo,i_nmCampo );
       CONVIND( idTabelaDominio,i_idTabelaDominio );
   }
   else
   {
       idCampo.arr[0] = 0;
       nmCampo.arr[0] = 0;
       idTabelaDominio.arr[0] = 0;
   }

    ULOG( "SELECT idDominio,nmDominio "
          "FROM Atendimento.CampoTabelaDominioV01 "
          "WHERE idCampo = %d "
          "AND idUFOperadora = %d "
          "AND idTipoLinha = %d",idCampoParam,idUFOperadoraParam,idTipoLinhaParam );

   EXEC SQL WHENEVER NOT FOUND DO BREAK;
   EXEC SQL DECLARE crDominCampoDinamico CURSOR FOR
      SELECT 
         idDominio, nmDominio 
      FROM 
         Atendimento.CampoTabelaDominioV01 
      WHERE 
         idCampo = :idCampoParam 
      AND 
         idUFOperadora = :idUFOperadoraParam 
      AND 
         idTipoLinha = :idTipoLinhaParam;

   EXEC SQL OPEN crDominCampoDinamico;

    for(;;)
    {
         EXEC SQL FETCH crDominCampoDinamico INTO 
                           :idDominio:i_idDominio,
                           :nmDominio:i_nmDominio;

         CONVIND( idDominio,i_idDominio );
         CONVIND( nmDominio,i_nmDominio );

         pResult = new st_VariaveisDomCampoDin;
         if ( pResult )
         {
            strcpy( pResult->idCampo,(char*)idCampo.arr );
            strcpy( pResult->nmCampo,(char*)nmCampo.arr );
            strcpy( pResult->idTabelaDominio,(char*)idTabelaDominio.arr );
            strcpy( pResult->idDominio,(char*)idDominio.arr );
            strcpy( pResult->nmDominio,(char*)nmDominio.arr );
            _ResultadoPC->AddItem( (void*) pResult );
         }
         else
         {
            ULOGE( erroFalhaAlocacaoMemoria() );
         }
    }

    EXEC SQL CLOSE crDominCampoDinamico;

    ULOG_END( "cDomCampoDinPC::pesquisaDominioCampoDinamicoPC()" );

}


void cDomCampoDinPC::sql_error_WFpsqDomCampoDin( sqlca * sqlca )
{
    ULOGE( "Ocorreu um erro na pesquisa de Dominio Campo Dinamico." );

    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
