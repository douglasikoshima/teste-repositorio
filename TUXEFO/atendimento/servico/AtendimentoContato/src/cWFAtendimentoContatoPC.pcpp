#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoContato.h"
#include "../include/stWFAtendimentoContato.h"

void sql_error_WFAtendimentoContato(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoContato.h"
    EXEC SQL END DECLARE SECTION;

int proCIncluirWFAtendimentoContato(st_AtendimentoContato* dados, st_vlAtendimentoContato* status, XMLDPR *xmlDpr)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoContato   oDados;
		struct st_vlAtendimentoContato oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContato(&sqlca);

    if ( (char*)oDados.nrTelefoneContato[0] != 0x0 )
    {
        EXEC SQL 
        INSERT INTO
            atendimento.AtendimentoContato
            (
                idAtendimento,
                nmContato,
                nmFalandoCom,
                nrTelefoneContato,
                cdAreaRegistro,
                idUsuarioAlteracao,
                dtUltimaAlteracao
            )
            VALUES
            (
                :oDados.idAtendimento,
                :oDados.nmContato,
                :oDados.nmFalandoCom,
                :oDados.nrTelefoneContato,
                :oDados.cdAreaRegistro,
                DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
            );
    }

    // ==> SM324--DPR--DEZ/2006--Cassio
    if ( xmlDpr )
    {
        AtendimentoContatoDPR atendimentocontatodpr;

        atendimentocontatodpr.setIdAtendimento(oDados.idAtendimento);
        atendimentocontatodpr.setNmContato(oDados.nmContato);
        atendimentocontatodpr.setOpCode(OPCODE_INSERT);

        xmlDpr->atendimentocontatovo.inserir(&atendimentocontatodpr);
    }
    // <== SM324--DPR--DEZ/2006--Cassio

	return true;
}

bool proCAlterarWFAtendimentoContato(st_AtendimentoContato* dados, st_vlAtendimentoContato* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoContato   oDados;
		struct st_vlAtendimentoContato oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContato(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoContato SET ");

	bool separa = false;

	if (status->idAtendimento != -1) 
		montaUpdate("idAtendimento", oDados.idAtendimento, 1);

	if (status->nmContato != -1)
		montaUpdate("nmContato", oDados.nmContato, 2);

	if (status->nmFalandoCom != -1)
		montaUpdate("nmFalandoCom", oDados.nmFalandoCom, 2);

	if (status->nrTelefoneContato != -1)
		montaUpdate("nrTelefoneContato", oDados.nrTelefoneContato, 2);

	if (status->idUsuarioAlteracao != -1) 
		montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

	sprintf(query, "%s WHERE idAtendimento = %ld", query, dados->idAtendimento);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoContato(st_AtendimentoContato* dados, st_vlAtendimentoContato* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = dados->idAtendimento;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoContato(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoContato
		WHERE
			idAtendimento = :idAtendimento;

	return true;
}

bool proCConsultaWFAtendimentoContato(long idAtendimento,XMLGen* saida,AtendimentoContato *ac)
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoConsulta = idAtendimento;
        VARCHAR nmContato[256];
        VARCHAR nmFalandoCom[256];
        VARCHAR nrTelefoneContato[256];

        short i_nmContato=-1;
        short i_nmFalandoCom=-1;
        short i_nrTelefoneContato=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoContato(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            NMCONTATO,
            NMFALANDOCOM,
            NRTELEFONECONTATO
        INTO
            :nmContato:i_nmContato,
            :nmFalandoCom:i_nmFalandoCom,
            :nrTelefoneContato:i_nrTelefoneContato
        FROM
            ATENDIMENTO.ATENDIMENTOCONTATO
        WHERE
            IDATENDIMENTO = :idAtendimentoConsulta;

    if ( ac )
    {
        memset(ac,0,sizeof(AtendimentoContato));
    }

    if ( !sqlca.sqlcode )
    {
        CONVIND(nmContato, i_nmContato);
        CONVIND(nmFalandoCom, i_nmFalandoCom);
        CONVIND(nrTelefoneContato, i_nrTelefoneContato);

        if ( saida )
        {
            saida->createTag("WFAtendimentoContatoVO");
                saida->addItem("idAtendimento", idAtendimento);
                saida->addItem("nmContato", (char *)nmContato.arr);
                saida->addItem("nmFalandoCom", (char *)nmFalandoCom.arr);
                saida->addItem("nrTelefoneContato", (char *)nrTelefoneContato.arr);
            saida->closeTag();
        }

        if ( ac )
        {
            ac->idAtendimento = idAtendimento;
            strncpy(ac->nmContato,(char *)nmContato.arr,sizeof(ac->nmContato));
            strncpy(ac->nmFalandoCom,(char *)nmFalandoCom.arr,sizeof(ac->nmFalandoCom));
            strncpy(ac->nrTelefoneContato,(char *)nrTelefoneContato.arr,sizeof(ac->nrTelefoneContato));
        }
    }
    else
    {
            /*saida->createTag("WFAtendimentoContatoVO");
                saida->addItem("idAtendimento", idAtendimento);
                saida->addItem("nmContato", "" );
                saida->addItem("nmFalandoCom", "" );
                saida->addItem("nrTelefoneContato", "" );
            saida->closeTag();
            */
            return false;
    }

    return true;
}



/*
 *
 * OS 1013 - Expurgo
 *
 */
bool proCConsultaWFAtendimentoContatoEx(long idAtendimento,XMLGen* saida,AtendimentoContato *ac)
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoConsulta = idAtendimento;
        VARCHAR nmContato[256];
        VARCHAR nmFalandoCom[256];
        VARCHAR nrTelefoneContato[256];

        short i_nmContato=-1;
        short i_nmFalandoCom=-1;
        short i_nrTelefoneContato=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoContato(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            NMCONTATO,
            NMFALANDOCOMEXTERNO,
            NRTELEFONECONTATOEXTERNO
        INTO
            :nmContato:i_nmContato,
            :nmFalandoCom:i_nmFalandoCom,
            :nrTelefoneContato:i_nrTelefoneContato
        FROM
            FOHIST_OW.ATENDIMENTO
            /* FOHIST_OW.ATENDIMENTOCONTATO */
        WHERE
            IDATENDIMENTO = :idAtendimentoConsulta;

    if ( ac )
    {
        memset(ac,0,sizeof(AtendimentoContato));
    }

    if ( !sqlca.sqlcode )
    {
        CONVIND(nmContato, i_nmContato);
        CONVIND(nmFalandoCom, i_nmFalandoCom);
        CONVIND(nrTelefoneContato, i_nrTelefoneContato);

        if ( saida )
        {
            saida->createTag("WFAtendimentoContatoVO");
                saida->addItem("idAtendimento", idAtendimento);
                saida->addItem("nmContato", (char *)nmContato.arr);
                saida->addItem("nmFalandoCom", (char *)nmFalandoCom.arr);
                saida->addItem("nrTelefoneContato", (char *)nrTelefoneContato.arr);
            saida->closeTag();
        }

        if ( ac )
        {
            ac->idAtendimento = idAtendimento;
            strncpy(ac->nmContato,(char *)nmContato.arr,sizeof(ac->nmContato));
            strncpy(ac->nmFalandoCom,(char *)nmFalandoCom.arr,sizeof(ac->nmFalandoCom));
            strncpy(ac->nrTelefoneContato,(char *)nrTelefoneContato.arr,sizeof(ac->nrTelefoneContato));
        }
    }
    else
    {
            return false;
    }

    return true;
}



bool proCConsultaWFAtendimentoContatoEx_Migracao(long idAtendimento,XMLGen* saida,AtendimentoContato *ac)
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoConsulta = idAtendimento;
        VARCHAR nmContato[256];
        VARCHAR nmFalandoCom[256];
        VARCHAR nrTelefoneContato[256];

        short i_nmContato=-1;
        short i_nmFalandoCom=-1;
        short i_nrTelefoneContato=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoContato(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            NMCONTATO,
            NMCLIENTEUSUARIO,
            NRLINHA
        INTO
            :nmContato:i_nmContato,
            :nmFalandoCom:i_nmFalandoCom,
            :nrTelefoneContato:i_nrTelefoneContato
        FROM
            FOHIST_OW.ATENDIMENTOMIGRACAO
        WHERE
            IDATENDIMENTO = :idAtendimentoConsulta;

    if ( ac )
    {
        memset( ac, 0, sizeof(AtendimentoContato) );
    }

    if ( !sqlca.sqlcode )
    {
        CONVIND(nmContato, i_nmContato);
        CONVIND(nmFalandoCom, i_nmFalandoCom);
        CONVIND(nrTelefoneContato, i_nrTelefoneContato);

        if ( saida )
        {
            saida->createTag("WFAtendimentoContatoVO");
                saida->addItem("idAtendimento", idAtendimento);
                saida->addItem("nmContato", (char *)nmContato.arr);
                saida->addItem("nmFalandoCom", (char *)nmFalandoCom.arr);
                saida->addItem("nrTelefoneContato", (char *)nrTelefoneContato.arr);
            saida->closeTag();
        }

        if ( ac )
        {
            ac->idAtendimento = idAtendimento;
            strncpy(ac->nmContato,(char *)nmContato.arr,sizeof(ac->nmContato));
            strncpy(ac->nmFalandoCom,(char *)nmFalandoCom.arr,sizeof(ac->nmFalandoCom));
            strncpy(ac->nrTelefoneContato,(char *)nrTelefoneContato.arr,sizeof(ac->nrTelefoneContato));
        }
    }
    else
    {
        return false;
    }

    return true;
}



void sql_error_WFAtendimentoContato(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
