/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Eder Jani Martins
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5116174 $ - $Date: 2011/08/12 17:11:29 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;

/*
 *  As funcoes proCUsuarioTemSkill e proCUsuarioTemAcesso foram criadas neste
 *  arquivo para minimizar o impacto em Workflow, ja que a classe atendimento 
 *  eh utilizada em muitos ponto, e no caso de Skill em todos os pontos
 *
 *  Seria um pouco melhor coloca-las na classe de USUARIO
 *
 */
int proCUsuarioTemSkill( long idPessoaUsuario )
{
    ULOG_START( "proCUsuarioTemSkill()" );
    
    ULOG( "idPessoaUsuario = [%d]" ,idPessoaUsuario );

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        int  iCont = 0;
        long idPessoaUsuarioAux = idPessoaUsuario;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
        COUNT(1)
    INTO
        :iCont
    FROM
        ACESSO.USUARIOGRUPOSKILL
    WHERE
        IDPESSOAUSUARIO = :idPessoaUsuarioAux
    AND
        ROWNUM < 2;

    ULOG("proCUsuarioTemSkill() ->[%d]", iCont );
    
    ULOG_END( "proCUsuarioTemSkill()" );

    return iCont;
}

int proCUsuarioTemSkill( int idPessoaUsuario, int idGrupo )
{
    ULOG_START( "proCUsuarioTemSkill()" );
    
    ULOG( "idPessoaUsuario = [%d]",idPessoaUsuario );
    ULOG( "idGrupo = [%d]",idGrupo );
    
    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        int iCont = 0;
        int idPessoaUsuarioAux = idPessoaUsuario;
        int idGrupoAux = idGrupo;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
        COUNT(1)
    INTO
        :iCont
    FROM
        ACESSO.USUARIOGRUPOSKILL
    WHERE
        IDPESSOAUSUARIO = :idPessoaUsuarioAux
    AND
        IDGRUPOSKILL IN ( SELECT IDGRUPOSKILL FROM ACESSO.GRUPOSKILL WHERE IDGRUPO = :idGrupoAux )
    AND
        ROWNUM < 2;
        
    ULOG("proCUsuarioTemSkill() ->[%d]", iCont );
        
    ULOG_END( "proCUsuarioTemSkill()" );

    return iCont;
}

//Verifica se o usuario tem o Skill que permita procesar aquele contato
//No entanto,antes, tem que usar a funcao proCUsuarioTemSkill para verificar
//se o usuario tem skill ou nao
//Caso a funcao proCUsuarioTemSkill retorne true, entao entrar na funcao abaixo para 
//verificar se o skill permite ou nao aquele processo, no caso atraves do contato
int proCUsuarioTemAcesso( int idPessoaUsuario, int idGrupo, long idAtendimento )
{
    ULOG_START( "proCUsuarioTemAcesso()" );
    ULOG( "idPessoaUsuario = [%d]",idPessoaUsuario );
    ULOG( "idGrupo = [%d]",idGrupo );
    ULOG( "idAtendimento = [%d]",idAtendimento );

    struct sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
        int   iCont = 0;
        int   idGrupoAux = idGrupo;
        long   idAtendimentoAux = idAtendimento;
        int   idPessoaUsuarioAux = idPessoaUsuario;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    // Se o grupo de destino for CRI não precisa verificar se o usuário tem skill
    // para atender. - Março, 2006 - Cassio
    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iCont
        FROM 
            ACESSO.GRUPO GRUPO,
            APOIO.TIPOGRUPO TIPOGRUPO
        WHERE
            GRUPO.IDGRUPO = :idGrupoAux
        AND
            GRUPO.IDTIPOGRUPO = TIPOGRUPO.IDTIPOGRUPO
        AND 
            CDTIPOGRUPO = 'CRI';

    if( iCont )
    { // Grupo destino é CRI
        ULOG("Grupo destino é CRI, skill será desconsiderado");
        ULOG_END("proCUsuarioTemAcesso()" );
        return 1;
    }

    // Verifica se o usuário tem skill
    EXEC SQL
    SELECT 
        COUNT(1) 
    INTO
        :iCont
    FROM 
        ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO
    WHERE 
        ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = :idAtendimentoAux
    AND
    -- // GRUPO
  /* Esta linha foi removida para que esta funco seja usada com qualquer
     grupo que tenha skill e nao so para os grupos de abertura 
        ATENDIMENTOPRIORIZACAO.IDGRUPOABERTURA = :idGrupoAux
    AND  */
        ATENDIMENTOPRIORIZACAO.IDCONTATO = 
        (
            SELECT IDCONTATO 
            FROM ACESSO.GRUPOSKILL GS, 
                 ACESSO.USUARIOGRUPOSKILL UGS, 
                 ACESSO.CONTATOGRUPOSKILL CGS 
            WHERE GS.IDGRUPOSKILL = UGS.IDGRUPOSKILL
            AND   GS.IDGRUPOSKILL = CGS.IDGRUPOSKILL
            AND   GS.IDGRUPO = :idGrupoAux
            AND   UGS.IDPESSOAUSUARIO = :idPessoaUsuarioAux  
            AND   ATENDIMENTOPRIORIZACAO.IDCONTATO = CGS.IDCONTATO 
            AND   ROWNUM < 2
        )
    AND
        -- // 1 CANAL
        ATENDIMENTOPRIORIZACAO.IDCANAL = 
        ( 
            SELECT IDCANAL 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.CANALGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = CANALGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux 
            AND   ATENDIMENTOPRIORIZACAO.IDCANAL = CANALGRUPOSKILL.IDCANAL
            AND   ROWNUM < 2
        )
    AND
        -- // 2 PROCEDENCIA
        ATENDIMENTOPRIORIZACAO.IDPROCEDENCIA = 
        (
            SELECT IDPROCEDENCIA 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.PROCEDENCIAGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = PROCEDENCIAGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   ATENDIMENTOPRIORIZACAO.IDPROCEDENCIA = PROCEDENCIAGRUPOSKILL.IDPROCEDENCIA
            AND   ROWNUM < 2
        )
    AND
        -- // 3 TIPOCARTEIRA
        ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA = 
        (
            SELECT IDTIPOCARTEIRA 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.TIPOCARTEIRAGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = TIPOCARTEIRAGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   TIPOCARTEIRAGRUPOSKILL.IDTIPOCARTEIRA = ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA
            AND   ROWNUM < 2
        )
    AND
        -- // 4 SEGMENTACAO
        ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = 
        (
            SELECT IDSEGMENTACAO 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.SEGMENTACAOGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = SEGMENTACAOGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = SEGMENTACAOGRUPOSKILL.IDSEGMENTACAO
            AND   ROWNUM < 2
        )
    AND
        -- // 5 GRUPOABERTURA
        ATENDIMENTOPRIORIZACAO.IDGRUPOABERTURA = 
        (
            SELECT GRUPOABERTURAGRUPOSKILL.IDGRUPO 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.GRUPOABERTURAGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = GRUPOABERTURAGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   ATENDIMENTOPRIORIZACAO.IDGRUPOABERTURA = GRUPOABERTURAGRUPOSKILL.IDGRUPO
            AND   ROWNUM < 2
        )
    AND
        -- // 6 TIPORELACIONAMENTO
        ATENDIMENTOPRIORIZACAO.IDTIPORELACIONAMENTO = 
        (
            SELECT IDTIPORELACIONAMENTO 
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.TPRELACIONAMENTOGRUPOSKILL
            WHERE GRUPOSKILL.IDGRUPOSKILL = TPRELACIONAMENTOGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   ATENDIMENTOPRIORIZACAO.IDTIPORELACIONAMENTO =  TPRELACIONAMENTOGRUPOSKILL.IDTIPORELACIONAMENTO
            AND ROWNUM < 2
       )
        AND 
        -- // 7 UFOPERADORA
        ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = 
        (
            SELECT IDUFOPERADORA
            FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.UFOPERADORAGRUPOSKILL 
            WHERE GRUPOSKILL.IDGRUPOSKILL = UFOPERADORAGRUPOSKILL.IDGRUPOSKILL 
            AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
            AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
            AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
            AND   ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = UFOPERADORAGRUPOSKILL.IDUFOPERADORA 
            AND   ROWNUM < 2
                )
        AND
        -- // Estas duas variaveis ficam aqui porque quando se abre um processo por conta nao 
        -- // existe tipo linha nem tipo pessoa
        (
            (
                -- // 8 TIPOLINHA
                ATENDIMENTOPRIORIZACAO.IDTIPOLINHA = 
                (
                    SELECT IDTIPOLINHA
                    FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.TIPOLINHAGRUPOSKILL 
                    WHERE GRUPOSKILL.IDGRUPOSKILL = TIPOLINHAGRUPOSKILL.IDGRUPOSKILL 
                    AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
                    AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
                    AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
                    AND   ATENDIMENTOPRIORIZACAO.IDTIPOLINHA =  TIPOLINHAGRUPOSKILL.IDTIPOLINHA
                    AND   ROWNUM < 2
                )
                AND 
                -- // 9 TIPOPESSOA
                ATENDIMENTOPRIORIZACAO.IDTIPOPESSOA =
                (
                    SELECT IDTIPOPESSOA
                    FROM ACESSO.GRUPOSKILL, ACESSO.USUARIOGRUPOSKILL, ACESSO.TIPOPESSOAGRUPOSKILL 
                    WHERE GRUPOSKILL.IDGRUPOSKILL = TIPOPESSOAGRUPOSKILL.IDGRUPOSKILL 
                    AND   GRUPOSKILL.IDGRUPOSKILL = USUARIOGRUPOSKILL.IDGRUPOSKILL
                    AND   GRUPOSKILL.IDGRUPO = :idGrupoAux
                    AND   USUARIOGRUPOSKILL.IDPESSOAUSUARIO = :idPessoaUsuarioAux
                    AND   ATENDIMENTOPRIORIZACAO.IDTIPOPESSOA = TIPOPESSOAGRUPOSKILL.IDTIPOPESSOA 
                    AND   ROWNUM < 2
                )
            )
       //    Esta parte do codigo foi retirada para corrigir a incidencia 2939.
       //    Com esta parte do codigo, quando  um atendimento e aberto por conto,
       //    O atendimento nao considera o skill existente para este grupo ou processo. 
       //    Esta parte so verifica se este atendiemento e aberto por conta nao considerando as variaveis comfiguradas
       //    para o Skill .
       //    -- // Verifica se o processo foi aberto por conta
       //    
       //     OR ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = 
       //     (
       //        SELECT IDATENDIMENTO FROM ATENDIMENTO.ATENDIMENTOCONTA WHERE IDATENDIMENTO = :idAtendimentoAux
       //     ) 
        );
        
    ULOG("usuario tem skill para o processo=[%d] (1=sim,0=nao)", iCont );

    ULOG_END( "proCUsuarioTemAcesso()" );

    return iCont;
}
