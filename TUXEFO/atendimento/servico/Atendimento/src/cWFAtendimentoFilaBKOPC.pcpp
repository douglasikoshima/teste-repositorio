/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Eder Jani Martins
 * @version $Revision: 1.1.2.3.6.4 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:35:29 $
 **/

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <string>

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

using namespace std;

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;


bool proCConsultaWFAtendimentoFila(int tipo, st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFila()" );

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;
    int numeroRegistros = 0;
    int totalRegistros = 0;

    char* p;
    SmallString query;
	char sTemp[256]; memset(sTemp,0,sizeof(sTemp));

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        int  idContato;
        int  idEstado;
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        int tabPausa;
        VARCHAR dtSolicitacaoCancelamento[32];
        int idTipoRelacionamento;
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_tabPausa;
        short i_dtSolicitacaoCancelamento;
        short i_idTipoRelacionamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

        char *queryChar;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    query += "SELECT ";

    if (status->dtFechamentoInicio == 1 && status->dtFechamentoFim == 1)
        query += "UNIQUE ";

    query +=    "idAtendimento, "
                "idAtendimentoProtocolo, "
                "idContato, "
                "idEstado, "
                "dsEstado, "
                "sgEstado, "
                "idSubEstado, "
                "dsSubEstado, "
                "sgSubEstado, "
                "idPessoaUsuario, "
                "nmPessoa, "
                "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, "
                "TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoAlerta, "
                "dsMensagem, "
                "idAlerta, "
                "sgAlerta, "
                "dsAlerta, "
                "nmIcone, "
                "nmCor, "
                "nrCriticidade, "
                "path, "
                "nrTelefone, "
                "inDocumento, "
                "inACS, "
                "inPausaAtendimento, "
                "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), "
                "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoBaixaHistorico, "
                "nmURLDados, "
                "DECODE(nvl(inPausaAtendimento,0), 1, decode(sign(nvl(dtFimPausaAtendimento, (sysdate-10)) - sysdate), -1, 0, 1 ), 0) tabPausa, "
                "dtSolicitacaoCancelamento, "
                "idTipoRelacionamento, "
                "dtPrazoFinalInterno, "
                "idAtendimentoSuspeito, "
                "idAtendimentoOrigem "
             "FROM ";

    TuxHelper tx;
    int registros = 0 ;

    if ( status->pesquisaDinamica == 1 )
    {
        p = tx.walkTree(dados->pesquisaDinamica, "nrCampos", 0);
        if ( p )
        {
            registros = atoi( p );
            XMLString::release(&p);
        }
    }

    char *colGrupo[]   = { "idGrupo","idGrupoAndamento" };
    char *colUsuario[] = { "idPessoaUsuario","idPessoaUsuarioAndamento" };
    int idxColGrupo    = 0; // idGrupo de AtendimentoGrupoAtual é o default
    int idxColUsuario  = 0; // idPessoaUsuario de AtendimentoGrupoAtual é o default

    /**
    * Tipo 1 - Pesquisa Fila.
    *          -- Se a pesquisa contiver campos dinamicos usa uma view preparada para tal.
    *          -- Não tendo campos dinamicos associados usa a view simples.
    * Tipo 2 - Pesquisa InBox
    *          -- Pesquisa padrão pela view básica.
    * Tipo 3 - Pesquisa Relacionamento.
    *          -- A view AtendimentoRelacionamento é usada quando a chave de filtro é a pessoadepara.
    *          -- Quando a pesquisa é de tipo 2 (linha) é usada a view padrão que atende ao requisito.
    * Tipo 4 - Pesquisa de massa.
    **/

    if ( (tipo == 1 && registros == 0) || tipo == 2 || tipo == 4 )
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaV01 ";
        }
        else
        {
            ULOG("proCConsultaWFAtendimentoFila > Pesquisando por parametros de fechamento...");
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaV03 ";
        }

    }
    else if (tipo == 1 && registros > 0)
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaV02 ";
        }
        else
        {
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaV04 ";
        }
    }
    else if (tipo == 3) // Psq. Relacionamento se nao for pesquisa de linha.
    {
        query += " atendimento.AtendimentoRelacionamentoV01 ";
    }       

    bool separa = false;

    // Só filtra pelo grupo quando não tiver indicado fechamento no filtro.
    if (tipo != 3 && (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1))
    {
        montaWhereFila("idGrupo", "", WHERE_IS_NOT_NULL);
    }

    if (tipo != 3)
    {
        montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila(colUsuario[idxColUsuario], dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila(colGrupo[idxColGrupo], dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    //if (status->idContato == 1 && dados->idContato > 0) 
    //  montaWhereFila("idContato", dados->idContato, WHERE_INT);

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->textoContato == 1 && strlen(dados->textoContato) > 0)
    {
        montaWhereFila("path", dados->textoContato, WHERE_CHAR_LIKE);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {
        montaWhereFila("nrLinha", dados->nrLinha, WHERE_CHAR);
    }
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    if (tipo != 3)
    {
        if(status->idUfOperadora == 1 && dados->idUfOperadora > 0)
        {
            montaWhereFila("idUfOperadora", dados->idUfOperadora, WHERE_INT);
        }
    }

    /**
        O FILTRO FOI DESABILITADO, para que seja possível contar o total de registros
        do FETCH.

        Esse filtro foi implementado especialmente para a pesquisa de relacionamento onde
        a primeira chamada apenas retorna os primeiros 10 registros encontrados.
    if (status->inPrimeiraChamada == 1 && dados->inPrimeiraChamada > 0)
    {
        montaWhereFila("rownum", 10, WHERE_INT_MENOR);
    }
    else
    {
        montaWhereFila("rownum", 20, WHERE_INT_MENOR);
    }
    */

    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                idCampo = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                tpComparacao = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                idDominio = atoi( p );
                XMLString::release(&p);
            }
            else
            {
                idDominio = 0;
            }

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            if (idDominio <= 0)
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND UPPER(valor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) ";
            }
            else
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND idDominio = ";
                query += idDominio;
                query += " ) ";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
     }

    /**
        Filtro desenvolvido restringir os registros de acordo com os grupos passados, o método de concatenação
        foi tratado de maneira que a query não tenha a clausula IN.
    
        O XML:
        <GruposDoUsuario>
            <Grupo>1</Grupo>
            <Grupo>4</Grupo>
        </GruposDoUsuario>
    
        É transformado para a cláusula:
        (idGrupo = 1 OR idGrupo = 4)
    */
    if (status->gruposUsuario == 1)
    {
        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        for (int i = 0; i < dados->gruposUsuario->GetCount() && i < 11; i++)
        {
            if (i > 0)
            {
                query += " OR ";
            }

            query += colGrupo[idxColGrupo];
            query += " = ";

            query += (char*)dados->gruposUsuario->GetItem(i);
            query += " ";

        }

        query += " ) ";
    }

    if (tipo == 3)
    {
        // Pesquisa pelo Cliente.
        if (dados->tpPesquisa == FILA_TPPESQ_CLIENTE)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            /**
                Registros de abertura, onde o responsabel pela abertura foi o usuário da
                linha, registra também uma linha de dado apontando para o cliente da linha,
                onde o atributo tem valor 0, quando o próprio cliente abre o atendimento
                seu valor é 2.

                M0007 (Melhoria) - Invalida o comentário acima! - Set, 2006 - Cassio
                Quando um processo é aberto por usário, o registro gerado em 
                atendimentoPessoa aponta para tipo relacionamento 2 ao invés de 0 a partir desta
                versão.
            **/
            // query += " AND (idTipoRelacionamento = 0 OR idTipoRelacionamento = 2) ";
            query += " AND idTipoRelacionamento = 2 ";
        }
        // Pesquisa pela linha.
        if (dados->tpPesquisa == FILA_TPPESQ_LINHA)
        {
            if (status->idPessoaLinhaHistorico == 1 && dados->idPessoaLinhaHistorico> 0)
            {
                //montaWhereFila("idPessoaLinhaHistorico	", dados->idPessoaLinhaHistorico, WHERE_INT);
				query += "idPessoaLinhaHistorico = ";
				sprintf(sTemp,"%lu",dados->idPessoaLinhaHistorico);
				query += sTemp;
				//query += dados->idPessoaLinhaHistorico;
				query += " ";
            }
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 

        }
        // Pesquisa pela pessoa.
        if (dados->tpPesquisa == FILA_TPPESQ_PESSOA)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR);
        }

    }


    if (status->pesquisa == 1 && strlen(dados->pesquisa) > 0 && tipo != 3)
    {
        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        if (atoi(dados->pesquisa) > 0)
        {
            query += " idAtendimento = ";
            query += dados->pesquisa;
            query += " OR ";
        }

        query += " nmPessoa LIKE '%";
        query += dados->pesquisa;
        query += "%' "; 
        query += " OR path LIKE '%";
        query += dados->pesquisa;
        query += "%') "; 
    }

    if (tipo == 4) 
    {
        montaWhereFila("idAtendimentoSuspeito", 0, WHERE_INT_MAIOR);

        if (status->dtSuspeitoInicio == 1 && strlen(dados->dtSuspeitoInicio) > 0) 
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoInicio, WHERE_DATA_MAIORIGUAL);
        }

        if (status->dtSuspeitoFim == 1 && strlen(dados->dtSuspeitoFim) > 0)
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoFim, WHERE_DATA_MENORIGUAL);
        }
    }

    if (status->dtFechamentoInicio == 1 && status->dtFechamentoFim == 1)
    {
        query += " ORDER BY dtAbertura ";
    }

    queryChar = query;

    ULOG("QUERY = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFila FROM :queryChar;
    EXEC SQL DECLARE consultaFila CURSOR FOR consultaAtendimentoFila;

    EXEC SQL OPEN consultaFila;

    while (true)
    {
        i_idAtendimento = 
        i_idAtendimentoProtocolo = 
        i_idContato = 
        i_idEstado = 
        i_dsEstado = 
        i_sgEstado = 
        i_idSubEstado = 
        i_dsSubEstado = 
        i_sgSubEstado = 
        i_idPessoa = 
        i_nmPessoa = 
        i_dtAbertura = 
        i_dtFechamento = 
        i_idAtendimentoAlerta = 
        i_dsMensagem = 
        i_idAlerta = 
        i_sgAlerta = 
        i_dsAlerta = 
        i_nmIcone = 
        i_nmCor = 
        i_nrCriticidade = 
        i_arvore = 
        i_nrTelefone = 
        i_inDocumento = 
        i_inACS = 
        i_inPausaAtendimento = 
        i_dtSuspeito = 
        i_dtFimPausa = 
        i_idAtendimentoBaixaHistorico = 
        i_nmURLDados = 
        i_tabPausa = 
        i_dtSolicitacaoCancelamento = 
        i_idTipoRelacionamento = 
        i_dtPrazoFinalInterno = 
        i_idAtendimentoSuspeito = 
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaFila INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :tabPausa:i_tabPausa,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :idTipoRelacionamento:i_idTipoRelacionamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        // Solução encontrada para resolver o problema na view que retornava mais
        // de um registro quando indicado o idContato.
        if (status->idContato != -1 && dados->idContato > 0 && dados->idContato != idContato)
        {
            continue;
        }

        if ((status->inPrimeiraChamada == 1 && dados->inPrimeiraChamada > 0 && numeroRegistros < 10) || ((status->inPrimeiraChamada != 1 || dados->inPrimeiraChamada == 0) && numeroRegistros < 100))
        {
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            // Implementação feita para atender as solicitacoes de refactoring.
            if (tipo != 2)
            {
                if (tipo == 1)
                    saida->createTag("AtendimentoFilaVO");
                else if (tipo == 2)
                    saida->createTag("AtendimentoInBoxVO");
                else if (tipo == 3)
                    saida->createTag("AtendimentoRelacionamentoVO");
                else 
                    saida->createTag("AtendimentoFechamentoMassaVO");
                
                    saida->addItem("operacaoWorkflow","");
                
                    saida->createTag("AtendimentoVO");
                
                        saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                        saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                        saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                        saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                        saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                        saida->addItem("inDocumento", (char*)inDocumento.arr);
                        saida->addItem("inACS", (char*)inACS.arr);
                        saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                        saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                        saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                        saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                        saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                        saida->addItem("tabPausa", CONVINT(tabPausa,i_tabPausa));
                        saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);

                        saida->createTag("WFEstadoVO");

                            saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                            saida->addItem("dsEstado", (char*)dsEstado.arr);
                            saida->addItem("sgEstado", (char*)sgEstado.arr);

                        saida->closeTag();

                        saida->createTag("WFSubEstadoVO");

                            saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                            saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                            saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                        saida->closeTag();

                        if (tipo != 3)
                        {
                            if (i_idAlerta != -1)
                            {

                                saida->createTag("AlertaVO");

                                    saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                                    saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                                    saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                                    saida->addItem("nmIcone", (char*)nmIcone.arr);
                                    saida->addItem("nmCor", (char*)nmCor.arr);
                                    saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);

                                saida->closeTag();
                            }
                        }

                        saida->createTag("ns2:ArvoreAtendimentoVO");

                            saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                            saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);

                        saida->closeTag();

                        if (tipo == 1 || tipo == 3)
                        {
                            saida->createTag("ns3:UsuarioVIVO");

                                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                                saida->addItem("ns3:nmLoginUsuario", "");
                                saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                                saida->addItem("ns3:sgSenhaUsuario", "");

                            saida->closeTag();
                        }

                    saida->closeTag();

                saida->closeTag();
            }
            else
            {
                saida->createTag("RWFAtendimentoVO");

                    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("inResponsavelAbertura", CONVINT(idTipoRelacionamento,i_idTipoRelacionamento));
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                    saida->addItem("tabPausa", CONVINT(tabPausa,i_tabPausa));
                    saida->addItem("tpOperacao", (char*)inDocumento.arr);
                    saida->addItem("nmCor", (char*)nmCor.arr);
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                    saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("descricaoCompleta", (char*)arvore.arr);
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);

                    saida->createTag("ns3:UsuarioVIVO");

                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");

                    saida->closeTag();

                saida->closeTag();
            }

            numeroRegistros++;

        }

        totalRegistros++;

    }

    saida->addItem("nrRegistros", numeroRegistros);
    saida->addItem("totalRegistros", totalRegistros);

    EXEC SQL CLOSE consultaFila;

    ULOG_END( "proCConsultaWFAtendimentoFila()" );

    return true;
}

bool proCConsultaWFAtendimentoFilaQtd(int tipo, st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaQtd()" );

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;

    char* p;
    SmallString query;
	char sTemp[256]; memset(sTemp,0,sizeof(sTemp));

    EXEC SQL BEGIN DECLARE SECTION;
        char *queryChar;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    query += "SELECT ";
                "COUNT(1) "
             "FROM ";

    TuxHelper tx;
    int registros = 0;

    if ( status->pesquisaDinamica == 1 )
    {
        p = tx.walkTree(dados->pesquisaDinamica, "nrCampos", 0);
        if ( p )
        {
            registros = atoi( p );
            XMLString::release(&p);
        }
    }

    char *colGrupo[]   = { "idGrupo","idGrupoAndamento" };
    char *colUsuario[] = { "idPessoaUsuario","idPessoaUsuarioAndamento" };
    int idxColGrupo    = 0; // idGrupo de AtendimentoGrupoAtual é o default
    int idxColUsuario  = 0; // idPessoaUsuario de AtendimentoGrupoAtual é o default

    if ( (tipo == 1 && registros == 0) || tipo == 2 || tipo == 4 )
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaV01 ";
        }
        else
        {
            ULOG("proCConsultaWFAtendimentoFilaQtd > Pesquisando por parametros de fechamento...");
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaV03 ";
        }

    }
    else if (tipo == 1 && registros > 0)
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaV02 ";
        }
        else
        {
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaV04 ";
        }
    }
    else if (tipo == 3) // Psq. Relacionamento se nao for pesquisa de linha.
    {
        query += " atendimento.AtendimentoRelacionamentoV01 ";
    }       

    bool separa = false;

    // Só filtra pelo grupo quando não tiver indicado fechamento no filtro.
    if (tipo != 3 && (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1))
    {
        montaWhereFila("idGrupo", "", WHERE_IS_NOT_NULL);
    }

    if (tipo != 3)
    {
        montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila(colUsuario[idxColUsuario], dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila(colGrupo[idxColGrupo], dados->idGrupo, WHERE_INT);
    }
    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->textoContato == 1 && strlen(dados->textoContato) > 0)
    {
        montaWhereFila("path", dados->textoContato, WHERE_CHAR_LIKE);
    }       
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {
        montaWhereFila("nrLinha", dados->nrLinha, WHERE_CHAR);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    if (tipo != 3)
    {
        if(status->idUfOperadora == 1 && dados->idUfOperadora > 0)
        {
            montaWhereFila("idUfOperadora", dados->idUfOperadora, WHERE_INT);
        }
    }

    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                idCampo = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                tpComparacao = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                idDominio = atoi( p );
                XMLString::release(&p);
            }
        else
        idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            if (idDominio <= 0)
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND UPPER(valor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) ";
            
            }
            else 
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND idDominio = ";
                query += idDominio;
                query += " ) ";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
    }

    if (status->gruposUsuario == 1)
    {

        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        for (int i = 0; i < dados->gruposUsuario->GetCount() && i < 11; i++)
        {
            if (i > 0)
            {
                query += " OR ";
            }

            query += colGrupo[idxColGrupo];
            query += " = ";

            query += (char*)dados->gruposUsuario->GetItem(i);
            query += " ";

        }

        query += " ) ";
    }

    if (tipo == 3)
    {
        // Pesquisa pelo Cliente.
        if (dados->tpPesquisa == FILA_TPPESQ_CLIENTE)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            /**
                Registros de abertura, onde o responsabel pela abertura foi o usuário da
                linha, registra também uma linha de dado apontando para o cliente da linha,
                onde o atributo tem valor 0, quando o próprio cliente abre o atendimento
                seu valor é 2.

                M0007 (Melhoria) - Invalida o comentário acima! - Set, 2006 - Cassio
                Quando um processo é aberto por usário, o registro gerado em 
                atendimentoPessoa aponta para tipo relacionamento 2 ao invés de 0 a partir desta
                versão.
            **/
            // query += " AND (idTipoRelacionamento = 0 OR idTipoRelacionamento = 2) ";
            query += " AND idTipoRelacionamento = 2 ";
        }
        // Pesquisa pela linha.
        if (dados->tpPesquisa == FILA_TPPESQ_LINHA)
        {
            if (status->idPessoaLinhaHistorico == 1 && dados->idPessoaLinhaHistorico> 0)
            {
                //montaWhereFila("idPessoaLinhaHistorico	", dados->idPessoaLinhaHistorico, WHERE_INT);
				query += "idPessoaLinhaHistorico = ";
				sprintf(sTemp,"%lu",dados->idPessoaLinhaHistorico);
				query += sTemp;
				//query += dados->idPessoaLinhaHistorico;
				query += " ";
            }
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 

        }
        // Pesquisa pela pessoa.
        if (dados->tpPesquisa == FILA_TPPESQ_PESSOA)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR);
        }

    }


    if (status->pesquisa == 1 && strlen(dados->pesquisa) > 0 && tipo != 3)
    {
        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        if (atoi(dados->pesquisa) > 0)
        {
            query += " idAtendimento = ";
            query += dados->pesquisa;
            query += " OR ";
        }

        query += " nmPessoa LIKE '%";
        query += dados->pesquisa;
        query += "%' "; 
        query += " OR path LIKE '%";
        query += dados->pesquisa;
        query += "%') "; 
    }

    if (tipo == 4) 
    {
        montaWhereFila("idAtendimentoSuspeito", 0, WHERE_INT_MAIOR);

        if (status->dtSuspeitoInicio == 1 && strlen(dados->dtSuspeitoInicio) > 0) 
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoInicio, WHERE_DATA_MAIORIGUAL);
        }

        if (status->dtSuspeitoFim == 1 && strlen(dados->dtSuspeitoFim) > 0)
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoFim, WHERE_DATA_MENORIGUAL);
        }
    }

    queryChar = query;

    ULOG("QUERY = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaQtd FROM :queryChar;
    EXEC SQL DECLARE consultaFilaQtd CURSOR FOR consultaAtendimentoFilaQtd;

    EXEC SQL OPEN consultaFilaQtd;
    EXEC SQL FETCH consultaFilaQtd INTO :iContador:sContador;
    EXEC SQL CLOSE consultaFilaQtd;

    saida->addItem("nrRegistros"   , 0 );
    saida->addItem("totalRegistros", iContador );

    ULOG_END( "proCConsultaWFAtendimentoFilaQtd()" );

    return true;
}

bool proCConsultaWFFilaPorAtendimento(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaPorAtendimento()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo;
        long idAtendimentoFiltro = dados->idAtendimento;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int idContato;
        int idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento = -1;
        short i_idAtendimentoProtocolo = -1;
        short i_idContato = -1;
        short i_idEstado = -1;
        short i_dsEstado = -1;
        short i_sgEstado = -1;
        short i_idSubEstado = -1;
        short i_dsSubEstado = -1;
        short i_sgSubEstado = -1;
        short i_idPessoa = -1;
        short i_nmPessoa = -1;
        short i_dtAbertura = -1;
        short i_dtFechamento = -1;
        short i_idAtendimentoAlerta = -1;
        short i_dsMensagem = -1;
        short i_idAlerta = -1;
        short i_sgAlerta = -1;
        short i_dsAlerta = -1;
        short i_nmIcone = -1;
        short i_nmCor = -1;
        short i_nrCriticidade = -1;
        short i_arvore = -1;
        short i_nrTelefone = -1;
        short i_inDocumento = -1;
        short i_inACS = -1;
        short i_inPausaAtendimento = -1;
        short i_dtSuspeito = -1;
        short i_dtFimPausa = -1;
        short i_idAtendimentoBaixaHistorico = -1;
        short i_nmURLDados = -1;
        short i_dtSolicitacaoCancelamento = -1;
        short i_dtPrazoFinalInterno = -1;
        short i_idAtendimentoSuspeito = -1;
        short i_idAtendimentoOrigem = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
             IDATENDIMENTO,
             IDATENDIMENTOPROTOCOLO,
             IDCONTATO,
             IDESTADO,
             DSESTADO,
             SGESTADO,
             IDSUBESTADO,
             DSSUBESTADO,
             SGSUBESTADO,
             IDPESSOAUSUARIO,
             NMPESSOA,
             TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
             TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
             IDATENDIMENTOALERTA,
             DSMENSAGEM,
             IDALERTA,
             SGALERTA,
             DSALERTA,
             NMICONE,
             NMCOR,
             NRCRITICIDADE,
             PATH,
             NRTELEFONE,
             INDOCUMENTO,
             0 AS INACS,
             INPAUSAATENDIMENTO,
             TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
             TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
             IDATENDIMENTOBAIXAHISTORICO,
             NMURLDADOS,
             DTSOLICITACAOCANCELAMENTO,
             DTPRAZOFINALINTERNO,
             IDATENDIMENTOSUSPEITO,
             IDATENDIMENTOORIGEM
         INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem
         FROM
             ATENDIMENTO.ATENDIMENTOFILATODOSWFV01
         WHERE
             IDPESSOAUSUARIO = :idUsuarioGrupoFiltro
         AND IDATENDIMENTO = :idAtendimentoFiltro;

    if ( !sqlca.sqlcode )
    {
        totalRegistros++;

        numeroRegistros++;

        CONVIND(dsEstado, i_dsEstado);
        CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
        CONVIND(sgEstado, i_sgEstado);
        CONVIND(dsSubEstado, i_dsSubEstado);
        CONVIND(sgSubEstado, i_sgSubEstado);
        CONVIND(nmPessoa, i_nmPessoa);
        CONVIND(dtAbertura, i_dtAbertura);
        CONVIND(dtFechamento, i_dtFechamento);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(arvore, i_arvore);
        CONVIND(nrTelefone, i_nrTelefone);
        CONVIND(inDocumento, i_inDocumento);
        CONVIND(inACS, i_inACS);
        CONVIND(dtSuspeito, i_dtSuspeito);
        CONVIND(dtFimPausa, i_dtFimPausa);
        CONVIND(nmURLDados, i_nmURLDados);
        CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
        CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
        CONVIND(nrCriticidade, i_nrCriticidade);

        if (i_idAtendimentoBaixaHistorico == -1)
        {
            idAtendimentoBaixaHistorico = 0;
        }

        saida->createTag("AtendimentoFilaVO");
            saida->addItem("operacaoWorkflow","");
            saida->createTag("AtendimentoVO");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("inDocumento", (char*)inDocumento.arr);
                saida->addItem("inACS", (char*)inACS.arr);
                saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->createTag("WFEstadoVO");
                    saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("sgEstado", (char*)sgEstado.arr);
                saida->closeTag();
                saida->createTag("WFSubEstadoVO");
                    saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                    saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                saida->closeTag();
                if (i_idAlerta != -1)
                {
                    saida->createTag("AlertaVO");
                        saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                        saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                        saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                        saida->addItem("nmIcone", (char*)nmIcone.arr);
                        saida->addItem("nmCor", (char*)nmCor.arr);
                        saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                    saida->closeTag();
                }
                saida->createTag("ns2:ArvoreAtendimentoVO");
                    saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                    saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                saida->closeTag();
                saida->createTag("ns3:UsuarioVIVO");
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
                saida->closeTag();
            saida->closeTag();
        saida->closeTag();
    } // if ( !sqlca.sqlcode )

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaPorAtendimento()" );

    return true;
}

bool proCConsultaWFFilaPorAtendimentoQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaPorAtendimentoQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idUsuarioGrupo = dados->idUsuarioGrupo;
        long idAtendimentoFiltro = dados->idAtendimento;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    // ==> Remodelagem Atendimento--Fev/2007--Cassio 
    // Com a remodelagem não é mais necessário pesquisar processos fechados/cancelados
    // em view separada.
    // EXEC SQL
    //     SELECT
    //         COUNT(1)
    //     INTO
    //         :iContador:sContador
    //     FROM
    //     (
    //             SELECT
    //                 IDATENDIMENTO
    //             FROM 
    //                 ATENDIMENTO.ATENDIMENTOFILAWFV01
    //             WHERE IDPESSOAUSUARIO = :idUsuarioGrupo
    //             AND IDATENDIMENTO = :idAtendimentoFiltro
    //         UNION
    //             SELECT 
    //                 IDATENDIMENTO
    //             FROM 
    //                 ATENDIMENTO.ATDFILAFECHADOSUSUARIOWFV01
    //             WHERE 
    //                 IDGRUPO IN (SELECT IDGRUPO FROM ACESSO.USUARIOGRUPO UG WHERE UG.IDPESSOAUSUARIO = :idUsuarioGrupo AND UG.IDGRUPO=IDGRUPO)
    //             AND IDATENDIMENTO = :idAtendimentoFiltro
    //     );
    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOFILATODOSWFV01
        WHERE
            IDPESSOAUSUARIO = :idUsuarioGrupo
        AND IDATENDIMENTO = :idAtendimentoFiltro;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , iContador );

    ULOG_END( "proCConsultaWFFilaPorAtendimentoQtd()" );

    return true;
}

bool proCConsultaWFFilaPorProtocolo(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaPorProtocolo()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo;
        char *idProtocoloFiltro = dados->idAtendimentoProtocolo;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int idContato;
        int idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    ULOG("       IDPESSOAUSUARIO=%d",idUsuarioGrupoFiltro);
    ULOG("IDATENDIMENTOPROTOCOLO=%s",idProtocoloFiltro);

    EXEC SQL DECLARE curConsultaWFPorProtocolo CURSOR FOR
        SELECT
             IDATENDIMENTO,
             IDATENDIMENTOPROTOCOLO,
             IDCONTATO,
             IDESTADO,
             DSESTADO,
             SGESTADO,
             IDSUBESTADO,
             DSSUBESTADO,
             SGSUBESTADO,
             IDPESSOAUSUARIO,
             NMPESSOA,
             TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
             TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
             IDATENDIMENTOALERTA,
             DSMENSAGEM,
             IDALERTA,
             SGALERTA,
             DSALERTA,
             NMICONE,
             NMCOR,
             NRCRITICIDADE,
             PATH,
             NRTELEFONE,
             INDOCUMENTO,
             0 AS INACS,
             INPAUSAATENDIMENTO,
             TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
             TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
             IDATENDIMENTOBAIXAHISTORICO,
             NMURLDADOS,
             DTSOLICITACAOCANCELAMENTO,
             DTPRAZOFINALINTERNO,
             IDATENDIMENTOSUSPEITO,
             IDATENDIMENTOORIGEM
         FROM
             ATENDIMENTO.ATENDIMENTOFILATODOSWFV01
         WHERE
             IDPESSOAUSUARIO = :idUsuarioGrupoFiltro
         AND IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro;

    EXEC SQL OPEN curConsultaWFPorProtocolo;

    while (true)
    {
        i_dsEstado =
        i_idAtendimentoProtocolo =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL FETCH curConsultaWFPorProtocolo INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(dsEstado, i_dsEstado);
            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");
                saida->addItem("operacaoWorkflow","");
                saida->createTag("AtendimentoVO");
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->createTag("WFEstadoVO");
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
                    saida->closeTag();
                    saida->createTag("WFSubEstadoVO");
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                    saida->closeTag();
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        saida->closeTag();
                    }
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                    saida->closeTag();
                    saida->createTag("ns3:UsuarioVIVO");
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                    saida->closeTag();
                saida->closeTag();
            saida->closeTag();
        }
    }

    EXEC SQL CLOSE curConsultaWFPorProtocolo;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaPorProtocolo()" );

    return true;
}

bool proCConsultaWFFilaPorProtocoloQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaPorProtocoloQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idUsuarioGrupo = dados->idUsuarioGrupo;
        char *idProtocoloFiltro = dados->idAtendimentoProtocolo;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOFILATODOSWFV01
        WHERE
            IDPESSOAUSUARIO = :idUsuarioGrupo
        AND IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , iContador );

    ULOG_END( "proCConsultaWFFilaPorProtocoloQtd()" );

    return true;
}

bool proCConsultaWFFilaAbertosPorLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaAbertosPorLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFPorLinha CURSOR FOR
        SELECT 
            idAtendimento,
            idAtendimentoProtocolo,
            idContato, 
            idEstado, 
            dsEstado, 
            sgEstado, 
            idSubEstado, 
            dsSubEstado, 
            sgSubEstado, 
            idPessoaUsuario, 
            nmPessoa, 
            TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
            TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), 
            idAtendimentoAlerta, 
            dsMensagem, 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            path, 
            nrTelefone, 
            inDocumento, 
            0 as inACS, 
            inPausaAtendimento, 
            TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
            idAtendimentoBaixaHistorico, 
            nmURLDados, 
            dtSolicitacaoCancelamento, 
            dtPrazoFinalInterno, 
            idAtendimentoSuspeito, 
            idAtendimentoOrigem 
        FROM 
            Atendimento.AtendimentoFilaLinhaWFV01
        WHERE 
            idPessoaUsuario = :idUsuarioGrupo
        AND cdAreaRegistro = :oprefixo
        AND nrLinha = :otelefone
        ORDER BY
            nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN curConsultaWFPorLinha;

    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH curConsultaWFPorLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFPorLinha;

    ULOG_END( "proCConsultaWFFilaAbertosPorLinha()" );

    return true;
}

bool proCConsultaWFFilaAbertosPorLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaAbertosPorLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
	FROM 
		Atendimento.AtendimentoFilaLinhaWFV01
	WHERE idPessoaUsuario = :idUsuarioGrupo
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaAbertosPorLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaFechadosPorLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosPorLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFFilaLinha CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM
                Atendimento.ATDFILAFECHADOSLINHAWFV01
             WHERE 
                idUsuarioGrupo = :idUsuarioGrupo
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
            ORDER BY dtAbertura, idAtendimento;

    EXEC SQL OPEN curConsultaWFFilaLinha;

    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH curConsultaWFFilaLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFFilaLinha;

    ULOG_END( "proCConsultaWFFilaFechadosPorLinha()" );

    return true;
}

bool proCConsultaWFFilaFechadosPorLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosPorLinhaQtd()" );

    struct sqlca sqlca;
    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContador
	FROM
		Atendimento.ATDFILAFECHADOSLINHAWFV01
	WHERE idUsuarioGrupo = :idUsuarioGrupo
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaFechadosPorLinhaQtd()" );

    return true;
}

bool proCConsultaWFAvanzadaFila(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAvanzadaFila()" );

    TuxHelper tx;
    int registros = 0 ;
    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;
    int numeroRegistros = 0;
    int totalRegistros = 0;

    bool inFechamento = false;
    bool inLinha = false;
    bool inUsuario = false;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    char* p;
    SmallString query;

    bool separa = false;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

        char *queryChar;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    query += "SELECT "
                "idAtendimento, "
                "idAtendimentoProtocolo, "
                "idContato, "
                "idEstado, "
                "dsEstado, "
                "sgEstado, "
                "idSubEstado, "
                "dsSubEstado, "
                "sgSubEstado, "
                "idPessoaUsuario, "
                "nmPessoa, "
                "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAberturaCh, "
                "TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoAlerta, "
                "dsMensagem, "
                "idAlerta, "
                "sgAlerta, "
                "dsAlerta, "
                "nmIcone, "
                "nmCor, "
                "nrCriticidade, "
                "path, "
                "nrTelefone, "
                "inDocumento, "
                "inPausaAtendimento, "
                "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), "
                "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoBaixaHistorico, "
                "nmURLDados, "
                "dtSolicitacaoCancelamento, "
                "dtPrazoFinalInterno, "
                "idAtendimentoSuspeito, "
                "idAtendimentoOrigem "
             "FROM ";

    registros = dados->nrCampos;

    if (status->dtFechamentoInicio != -1)
    {
        inFechamento = true;            
    }
    if (status->nrLinha != -1)
    {
        inLinha = true;         
    }
    if (status->idPessoaUsuario != -1)
    {
        inUsuario = true;           
    }
    
    if ( inFechamento )
    {
        if ( inLinha )
        {
            query += " atendimento.AtdFilaFechadosLinhaWFV01 a ";
            if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
            {
                montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
            }
        }
        else
        {
            query += " atendimento.AtdFilaFechadosWFV01 a ";
            if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
            {
                montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
            }
        }
    }
    else if ((inLinha) && !(inUsuario))
    {
        query += " atendimento.AtendimentoFilaLinhaWFV01 a ";
    }
    else if ((inLinha) && (inUsuario))
    {
        query += " atendimento.AtdFilaUsuarioLinhaWFV01 a ";
    }
    else if (!(inLinha) && (inUsuario))
    {
        query += " atendimento.AtendimentoFilaUsuarioWFV01 a ";
    }
    else 
    {
        query += " atendimento.AtendimentoFilaWFV01 a ";
    }

    if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idUsuarioGrupo, WHERE_INT);
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila("idGrupo", dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    if (status->idContato == 1 && dados->idContato > 0) 
    {
        montaWhereFila("idContato", dados->idContato, WHERE_INT);
    }

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {

        if ( dados->nrLinha[0]=='0' ) 
        {
            strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+3);
        }
        else
        {
            strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+2);
        }
        montaWhereFila("cdAreaRegistro", prefixo, WHERE_INT);
        montaWhereFila("nrLinha", numero, WHERE_INT);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                    idCampo = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                    tpComparacao = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                    idDominio = atoi( p );
                    XMLString::release(&p);
            }
            else
                idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            query += "1 = (select count(1) from atendimento.atendimentofrm af, atendimento.atendimentofrmcampo afc "
                           "where af.idatendimento = a.idatendimento "
                                 "and af.idatendimentofrm = afc.idatendimentofrm "
                                 "and ";
            if (idDominio <= 0)
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND UPPER(afc.dsvalor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) )";
                
            }
            else 
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND afc.idDominio = ";
                query += idDominio;
                query += " ) )";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
    }

    query += " ORDER BY dtAbertura ";

    queryChar = query;

    ULOG("proCConsultaWFAvanzadaFila > Query = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaAvanzada FROM :queryChar;
    EXEC SQL DECLARE consultaFilaAvanzada CURSOR FOR consultaAtendimentoFilaAvanzada;

    EXEC SQL OPEN consultaFilaAvanzada;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaFilaAvanzada INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        if (numeroRegistros < 100)
        {
            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            // Implementação feita para atender as solicitacoes de refactoring.
            saida->createTag("AtendimentoFilaVO");
                
                    saida->addItem("operacaoWorkflow","");
                
                    saida->createTag("AtendimentoVO");
                
                        saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                        saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                        saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                        saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                        saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                        saida->addItem("inDocumento", (char*)inDocumento.arr);
                        saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                        saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                        saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                        saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                        saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                        saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                        saida->createTag("WFEstadoVO");
                
                            saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                            saida->addItem("dsEstado", (char*)dsEstado.arr);
                            saida->addItem("sgEstado", (char*)sgEstado.arr);
                
                        saida->closeTag();
                
                        saida->createTag("WFSubEstadoVO");
                
                            saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                            saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                            saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                        saida->closeTag();
                
                        if (i_idAlerta != -1)
                        {
                                saida->createTag("AlertaVO");
                        
                                    saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                                    saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                                    saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                                    saida->addItem("nmIcone", (char*)nmIcone.arr);
                                    saida->addItem("nmCor", (char*)nmCor.arr);
                                    saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                                saida->closeTag();
                        }
                
                        saida->createTag("ns2:ArvoreAtendimentoVO");
                
                            saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                            saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                        saida->closeTag();
                
                        saida->createTag("ns3:UsuarioVIVO");
                    
                                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                                saida->addItem("ns3:nmLoginUsuario", "");
                                saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                                saida->addItem("ns3:sgSenhaUsuario", "");
                    
                            saida->closeTag();
                            
                    saida->closeTag();
                
                saida->closeTag();

            numeroRegistros++;

        }

        totalRegistros++;

    }

    saida->addItem("nrRegistros", numeroRegistros);
    saida->addItem("totalRegistros", totalRegistros);

    EXEC SQL CLOSE consultaFilaAvanzada;

    ULOG_END( "proCConsultaWFAvanzadaFila()" );

    return true;
}

bool proCConsultaWFAvanzadaFilaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAvanzadaFilaQtd()" );

    TuxHelper tx;
    int registros = 0 ;
    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;

    bool inFechamento = false;
    bool inLinha = false;
    bool inUsuario = false;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    char* p;
    SmallString query;

    bool separa = false;

    EXEC SQL BEGIN DECLARE SECTION;
        char *queryChar;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    query += "SELECT "
                "COUNT(1) "
             "FROM ";

    registros = dados->nrCampos;

    if (status->dtFechamentoInicio != -1)
    {
        inFechamento = true;            
    }
    if (status->nrLinha != -1)
    {
        inLinha = true;         
    }
    if (status->idPessoaUsuario != -1)
    {
        inUsuario = true;           
    }
    
    if ( inFechamento )
    {
        if ( inLinha )
    {
        query += " atendimento.AtdFilaFechadosLinhaWFV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
        else
    {
        query += " atendimento.AtdFilaFechadosWFV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
    }
    else if ((inLinha) && !(inUsuario))
    {
        query += " atendimento.AtendimentoFilaLinhaWFV01 a ";
    }
    else if ((inLinha) && (inUsuario))
    {
        query += " atendimento.AtdFilaUsuarioLinhaWFV01 a ";
    }
    else if (!(inLinha) && (inUsuario))
    {
        query += " atendimento.AtendimentoFilaUsuarioWFV01 a ";
    }
    else 
    {
        query += " atendimento.AtendimentoFilaWFV01 a ";
    }

    if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idUsuarioGrupo, WHERE_INT);
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila("idGrupo", dados->idGrupo, WHERE_INT);
    }
    if (status->idContato == 1 && dados->idContato > 0) 
    {
        montaWhereFila("idContato", dados->idContato, WHERE_INT);
    }

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {

        if ( dados->nrLinha[0]=='0' ) 
        {
            strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+3);
        }
        else
        {
            strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+2);
        }
        montaWhereFila("cdAreaRegistro", prefixo, WHERE_INT);
        montaWhereFila("nrLinha", numero, WHERE_INT);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                    idCampo = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                    tpComparacao = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                    idDominio = atoi( p );
                    XMLString::release(&p);
            }
            else
                idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            query += "1 = (select count(1) from atendimento.atendimentofrm af, atendimento.atendimentofrmcampo afc "
                           "where af.idatendimento = a.idatendimento "
                                 "and af.idatendimentofrm = afc.idatendimentofrm "
                                 "and ";
            if (idDominio <= 0)
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND UPPER(afc.dsvalor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) )";
                
            }
            else 
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND afc.idDominio = ";
                query += idDominio;
                query += " ) )";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
    }

    queryChar = query;

    ULOG("proCConsultaWFAvanzadaFilaQtd > Query = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaAvanzadaQtd FROM :queryChar;
    EXEC SQL DECLARE consultaFilaAvanzadaQtd CURSOR FOR consultaAtendimentoFilaAvanzadaQtd;

    EXEC SQL OPEN consultaFilaAvanzadaQtd;
    EXEC SQL FETCH consultaFilaAvanzadaQtd INTO :iContador:sContador;
    EXEC SQL CLOSE consultaFilaAvanzadaQtd;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFAvanzadaFilaQtd()" );

    return true;
}

bool proCConsultaWFFilaFechadosLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[65];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaFechadosLinha CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM 
                Atendimento.ATDFILAFECHADOSLINHAWFV01
             WHERE 
                idUsuarioGrupo = :idUsuarioGrupo
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idPessoaUsuario = :idUsuarioFiltro OR -1=:indIdUsuario)
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            ORDER BY dtAbertura;

    EXEC SQL OPEN consultaWFFilaFechadosLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaFechadosLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosLinha;

    ULOG_END( "proCConsultaWFFilaFechadosLinha()" );

    return true;
}

bool proCConsultaWFFilaFechadosLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

		int iContador;
		short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContador
	FROM 
		Atendimento.ATDFILAFECHADOSLINHAWFV01
	WHERE idUsuarioGrupo = :idUsuarioGrupo
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone
	AND (idPessoaUsuario = :idUsuarioFiltro OR -1=:indIdUsuario)
	AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (idContato = :idContatoFiltro OR -1=:indIdContato)
	AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
	AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
	AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
	AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
	AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim);

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaFechadosLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaFechadosUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    string queryStr;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *query;
        char filtro[256];

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char *dtAberturaInicioFiltro;
        char *dtAberturaFimFiltro;
        char *dtFechamentoInicioFiltro;
        char *dtFechamentoFimFiltro;
        int  idUfOperadora;

        //short indIdUsuario;
        //short indIdGrupo;
        //short indIdAtendimento;
        //short indIdContato;
        //short indIdEstado;
        //short indIdSubEstado;
        //short indDtAberturaInicio;
        //short indDtAberturaFim;
        //short indDtFechamentoInicio;
        //short indDtFechamentoFim;
        //short indIdUfOperadora;

        long idAtendimento[505];
        VARCHAR idAtendimentoProtocolo[505][64];
        int  idContato[505];
        int  idEstado[505];
        VARCHAR dsEstado[505][256];
        VARCHAR sgEstado[505][256];
        int  idSubEstado[505];
        VARCHAR dsSubEstado[505][256];
        VARCHAR sgSubEstado[505][256];
        long  idPessoa[505];
        VARCHAR nmPessoa[505][256];
        VARCHAR dtAbertura[505][22];
        VARCHAR dtFechamento[505][22];
        long idAtendimentoAlerta[505];
        VARCHAR dsMensagem[505][256];
        int  idAlerta[505];
        VARCHAR sgAlerta[505][256];
        VARCHAR dsAlerta[505][256];
        VARCHAR nmIcone[505][256];
        VARCHAR nmCor[505][256];
        VARCHAR nrCriticidade[505][15];
        VARCHAR arvore[505][800];
        VARCHAR nrTelefone[505][256];
        VARCHAR inDocumento[505][256];
        VARCHAR inACS[505][256];
        int inPausaAtendimento[505];
        VARCHAR dtSuspeito[505][32];
        VARCHAR dtFimPausa[505][32];
        long idAtendimentoBaixaHistorico[505];
        VARCHAR nmURLDados[505][256];
        VARCHAR dtSolicitacaoCancelamento[505][32];
        VARCHAR dtPrazoFinalInterno[505][32];
        long idAtendimentoSuspeito[505];
        long idAtendimentoOrigem[505];

        short i_idAtendimento[505];
        short i_idAtendimentoProtocolo[505];
        short i_idContato[505];
        short i_idEstado[505];
        short i_dsEstado[505];
        short i_sgEstado[505];
        short i_idSubEstado[505];
        short i_dsSubEstado[505];
        short i_sgSubEstado[505];
        short i_idPessoa[505];
        short i_nmPessoa[505];
        short i_dtAbertura[505];
        short i_dtFechamento[505];
        short i_idAtendimentoAlerta[505];
        short i_dsMensagem[505];
        short i_idAlerta[505];
        short i_sgAlerta[505];
        short i_dsAlerta[505];
        short i_nmIcone[505];
        short i_nmCor[505];
        short i_nrCriticidade[505];
        short i_arvore[505];
        short i_nrTelefone[505];
        short i_inDocumento[505];
        short i_inACS[505];
        short i_inPausaAtendimento[505];
        short i_dtSuspeito[505];
        short i_dtFimPausa[505];
        short i_idAtendimentoBaixaHistorico[505];
        short i_nmURLDados[505];
        short i_dtSolicitacaoCancelamento[505];
        short i_dtPrazoFinalInterno[505];
        short i_idAtendimentoSuspeito[505];
        short i_idAtendimentoOrigem[505];

        int rows_to_fetch = 505; // numero de linhas para cada fetch
        int rows_before = 0; // numero de linhas carregadas ate o ultimo fetch 
        int rows_this_time = 505; // numero de linhas carregadas no fetch

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    idUfOperadora = dados->idUfOperadora;
    dtAberturaInicioFiltro = dados->dtAberturaInicio;
    dtAberturaFimFiltro = dados->dtAberturaFim;
    dtFechamentoInicioFiltro = dados->dtFechamentoInicio;
    dtFechamentoFimFiltro = dados->dtFechamentoFim;

    //indIdUsuario = status->idPessoaUsuario;
    //indIdGrupo = status->idGrupo;
    //indIdAtendimento = status->idAtendimento;
    //indIdContato = status->idContato;
    //indIdEstado = status->idEstado;
    //indIdSubEstado = status->idSubEstado;
    //indDtAberturaInicio = status->dtAberturaInicio;
    //indDtAberturaFim = status->dtAberturaFim;
    //indDtFechamentoInicio = status->dtFechamentoInicio;
    //indDtFechamentoFim = status->dtFechamentoFim;
    //indIdUfOperadora = status->idUfOperadora;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    // ==> Remodelagem Atendimento--Fev/2007--Cassio 
    // queryStr =
    //          "SELECT "
    //            "IDATENDIMENTO,"
    //            "IDCONTATO,"
    //            "IDESTADO,"
    //            "DSESTADO,"
    //            "SGESTADO,"
    //            "IDSUBESTADO,"
    //            "DSSUBESTADO,"
    //            "SGSUBESTADO,"
    //            "IDPESSOAUSUARIO,"
    //            "NMPESSOA,"
    //            "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA,"
    //            "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,"
    //            "IDATENDIMENTOALERTA,"
    //            "DSMENSAGEM,"
    //            "IDALERTA,"
    //            "SGALERTA,"
    //            "DSALERTA,"
    //            "NMICONE,"
    //            "NMCOR,"
    //            "NRCRITICIDADE,"
    //            "PATH,"
    //            "NRTELEFONE,"
    //            "INDOCUMENTO,"
    //            "0 AS INACS,"
    //            "INPAUSAATENDIMENTO,"
    //            "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
    //            "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
    //            "IDATENDIMENTOBAIXAHISTORICO,"
    //            "NMURLDADOS,"
    //            "DTSOLICITACAOCANCELAMENTO,"
    //            "DTPRAZOFINALINTERNO,"
    //            "IDATENDIMENTOSUSPEITO,"
    //            "IDATENDIMENTOORIGEM "
    //          "FROM ( "
    //            "SELECT /*+ NO_CPU_COSTING */ "
    //                "ATENDIMENTO.IDATENDIMENTO,"
    //                "ATENDIMENTO.IDCONTATO,"
    //                "'' AS NMCOR,"
    //                "0 AS NRCRITICIDADE,"
    //                "AGREST.IDESTADO AS IDESTADO,"
    //                "EST.DSESTADO AS DSESTADO,"
    //                "'' AS SGESTADO,"
    //                "AGREST.IDSUBESTADO,"
    //                "SEST.DSSUBESTADO,"
    //                "'' AS SGSUBESTADO,"
    //                "ANDAMENTO.IDPESSOAUSUARIO,"
    //                "UG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO,"
    //                "ATENDIMENTO.DTABERTURA,"
    //                "(SELECT HC.NMPATH PATH FROM CONTATOADM.CONTATO HC WHERE ATENDIMENTO.IDCONTATO = HC.IDCONTATO) AS PATH,"
    //                "DECODE(ATENDIMENTO.IDTIPOABERTURA,1,NULL, -- ABERTURA POR CONTA NAO DEVE EXIBIR N.LINHA INCD.#3288 NOV/2005"
    //                       "DECODE(ATENDIMENTO.IDPESSOALINHAHISTORICO,NULL,'SEM ID LINHA',"
    //                       "(SELECT DECODE (PLH.NRLINHA, NULL,'N.TEL.NULO', '(' ||"
    //                              "TRIM (TO_CHAR (PLH.CDAREAREGISTRO, '000')) || ')' ||"
    //                                  "SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 1, 5 ) ||"
    //                                      "'-' || SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 6, 8))"
    //                          "FROM CUSTOMER.PESSOALINHAHISTORICO PLH"
    //                         "WHERE PLH.IDPESSOALINHAHISTORICO = ATENDIMENTO.IDPESSOALINHAHISTORICO))) AS NRTELEFONE,"
    //                "0 AS INPAUSAATENDIMENTO,"
    //                "(SELECT ASU.IDATENDIMENTOSUSPEITO IDATENDIMENTOSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO) IDATENDIMENTOSUSPEITO,"
    //                "(SELECT ASU.DTSUSPEITO DTSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO) DTSUSPEITO,"
    //                "'' AS NMURLDADOS,"
    //                "'' AS DTFIMPAUSAATENDIMENTO,"
    //                "ANDAMENTO.IDGRUPO AS IDGRUPO,"
    //                "(SELECT PES.NMPESSOA FROM CUSTOMER.PESSOA PES WHERE ANDAMENTO.IDPESSOAUSUARIO = PES.IDPESSOA) AS NMPESSOA,"
    //                "(SELECT DECODE(SIGN(COUNT(1)),1,'S','N') FROM ATENDIMENTO.ATENDIMENTODOCUMENTO ATDD WHERE ATENDIMENTO.IDATENDIMENTO = ATDD.IDATENDIMENTO) AS INDOCUMENTO,"
    //                "ATENDIMENTO.DTFECHAMENTO,"
    //                "(SELECT OBS.DSANDAMENTOOBSERVACAO FROM ATENDIMENTO.ANDAMENTOOBSERVACAO OBS WHERE ANDAMENTO.IDANDAMENTO = OBS.IDANDAMENTO) AS DSANDAMENTOOBSERVACAO,"
    //                "(SELECT ABA.IDATENDIMENTOBAIXAHISTORICO FROM ATENDIMENTO.ATENDIMENTOBAIXAATUAL ABA WHERE ATENDIMENTO.IDATENDIMENTO = ABA.IDATENDIMENTO) AS IDATENDIMENTOBAIXAHISTORICO,"
    //                "(SELECT ACS.DTSOLICITACAOCANCELAMENTO FROM ATENDIMENTO.CANCELAMENTOSOLICITADO ACS WHERE ATENDIMENTO.IDATENDIMENTO = ACS.IDATENDIMENTO) AS DTSOLICITACAOCANCELAMENTO,"
    //                "(SELECT AO.IDATENDIMENTOORIGEM FROM ATENDIMENTO.ATENDIMENTOORIGEM AO WHERE ATENDIMENTO.IDATENDIMENTO = AO.IDATENDIMENTO) AS IDATENDIMENTOORIGEM,"
    //                "ATENDIMENTO.DTPRAZOFINALINTERNO,"
    //                "0 AS IDATENDIMENTOALERTA,"
    //                "'' AS DSMENSAGEM,"
    //                "0 AS IDALERTA,"
    //                "'' AS SGALERTA,"
    //                "'' AS DSALERTA,"
    //                "'' AS NMICONE,"
    //                "ATENDIMENTO.IDUFOPERADORA"
    //            "FROM "
    //                 "ATENDIMENTO.ATENDIMENTO ATENDIMENTO"
    //                ",ATENDIMENTO.GRUPOCRI GCRI"
    //                ",ANDAMENTO.ANDAMENTO ANDAMENTO"
    //                ",ACESSO.USUARIOGRUPO UG"
    //                ",WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR"
    //                ",WORKFLOW.AGRUPAMENTOESTADO AGREST"
    //                ",WORKFLOW.ESTADO EST"
    //                ",WORKFLOW.SUBESTADO SEST "
    //            "WHERE "
    //                "UG.IDPESSOAUSUARIO = ";
    // 
    // sprintf( filtro, "%d ", idUsuarioGrupo );
    // 
    // queryStr += filtro;
    // queryStr +=
    //            "AND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC "
    //            "AND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
    //            "AND EST.IDESTADO = AGREST.IDESTADO "
    //            "AND SEST.IDSUBESTADO = AGREST.IDSUBESTADO "
    //            "AND ATENDIMENTO.IDATENDIMENTO = GCRI.IDATENDIMENTO (+) "
    //            "AND GCRI.IDATENDIMENTO IS NULL "
    //            "AND ATENDIMENTO.DTFECHAMENTO IS NOT NULL"
    //            "AND ANDAMENTO.IDANDAMENTO = ATENDIMENTO.IDANDAMENTOATUAL"
    //            "AND ANDAMENTO.IDGRUPO = UG.IDGRUPO "
    //            "AND ANDAMENTO.DTANDAMENTO BETWEEN (SELECT TO_DATE('";
    // queryStr += dtFechamentoInicioFiltro;
    // queryStr +=
    //            " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
    //            "AND (SELECT TO_DATE('";
    // queryStr += dtFechamentoFimFiltro;
    // queryStr +=
    //            " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
    //            "AND ATENDIMENTOFECHAMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('";
    // queryStr += dtFechamentoInicioFiltro;
    // queryStr +=
    //            " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
    //            "AND (SELECT TO_DATE('";
    // queryStr += dtFechamentoFimFiltro;
    // queryStr +=
    //            " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
    //          ") "
    //          "WHERE 1=1 ";

    queryStr =
             "\nSELECT "
               "\nIDATENDIMENTO,"
               "\nIDATENDIMENTOPROTOCOLO,"
               "\nIDCONTATO,"
               "\nIDESTADO,"
               "\nDSESTADO,"
               "\nSGESTADO,"
               "\nIDSUBESTADO,"
               "\nDSSUBESTADO,"
               "\nSGSUBESTADO,"
               "\nIDPESSOAUSUARIO,"
               "\nNMPESSOA,"
               "\nDTABERTURA,"
               "\nDTFECHAMENTO,"
               "\nIDATENDIMENTOALERTA,"
               "\nDSMENSAGEM,"
               "\nIDALERTA,"
               "\nSGALERTA,"
               "\nDSALERTA,"
               "\nNMICONE,"
               "\nNMCOR,"
               "\nNRCRITICIDADE,"
               "\nPATH,"
               "\nNRTELEFONE,"
               "\nINDOCUMENTO,"
               "\n0 AS INACS,"
               "\nINPAUSAATENDIMENTO,"
               "\nDTSUSPEITO,"
               "\nDTFIMPAUSAATENDIMENTO,"
               "\nIDATENDIMENTOBAIXAHISTORICO,"
               "\nNMURLDADOS,"
               "\nDTSOLICITACAOCANCELAMENTO,"
               "\nDTPRAZOFINALINTERNO,"
               "\nIDATENDIMENTOSUSPEITO,"
               "\nIDATENDIMENTOORIGEM "
             "\nFROM ( "
               "\n\tSELECT "
                   "\n\tATENDIMENTO.IDATENDIMENTO,"
                   "\n\tATENDIMENTO.IDATENDIMENTOPROTOCOLO,"
                   "\n\tATENDIMENTO.IDCONTATO,"
                   "\n\t'' AS NMCOR,"
                   "\n\t0 AS NRCRITICIDADE,"
                   "\n\tAGREST.IDESTADO AS IDESTADO,"
                   "\n\tEST.DSESTADO AS DSESTADO,"
                   "\n\t'' AS SGESTADO,"
                   "\n\tAGREST.IDSUBESTADO,"
                   "\n\tSEST.DSSUBESTADO,"
                   "\n\t'' AS SGSUBESTADO,"
                   //"\n\tANDAMENTO.IDPESSOAUSUARIO,"
                   //@CASSIO "\n\t(SELECT IDPESSOAUSUARIO FROM ANDAMENTO.ANDAMENTO ANDA WHERE ANDA.IDATENDIMENTO=ATENDIMENTO.IDATENDIMENTO AND ANDA.IDATIVIDADE IN (2,8,10,11,13,14,17,23) AND ROWNUM<2) AS IDPESSOAUSUARIO,"
                   "\n\tATENDIMENTO.IDPESSOAUSUARIOATUAL AS IDPESSOAUSUARIO,"
                   "\n\tUG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO,"
                   "\n\tTO_CHAR(ATENDIMENTO.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,"
                   "\n\t(SELECT HC.NMPATH PATH FROM CONTATOADM.CONTATO HC WHERE ATENDIMENTO.IDCONTATO = HC.IDCONTATO) AS PATH,"
                   "\n\tDECODE(ATENDIMENTO.IDTIPOABERTURA,1,NULL, -- ABERTURA POR CONTA NAO DEVE EXIBIR N.LINHA INCD.#3288 NOV/2005"
                          "\n\t\t\tDECODE(ATENDIMENTO.IDPESSOALINHAHISTORICO,NULL,'SEM ID LINHA',"
                          // "\n\t\t\t(SELECT DECODE (PLH.NRLINHA, NULL,'N.TEL.NULO', '(' ||"
                                 // "TRIM (TO_CHAR (PLH.CDAREAREGISTRO, '00')) || ')' ||"
                                     // "SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 1, 5 ) ||"
                                         // "'-' || SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 6, 8))"
                          "\n\t\t\t(SELECT DECODE (PLH.NRLINHA, NULL,'N.TEL.NULO', soa_ow.formata_nrlinha (TO_CHAR(PLH.CDAREAREGISTRO||PLH.NRLINHA)))"
                             "\n\t\t\tFROM CUSTOMER.PESSOALINHAHISTORICO PLH"
                            "\n\t\t\tWHERE PLH.IDPESSOALINHAHISTORICO = ATENDIMENTO.IDPESSOALINHAHISTORICO))) AS NRTELEFONE,"
                   "\n\t0 AS INPAUSAATENDIMENTO,"
                   "\n\t(SELECT ASU.IDATENDIMENTOSUSPEITO IDATENDIMENTOSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO) IDATENDIMENTOSUSPEITO,"
                   "\n\tTO_CHAR((SELECT ASU.DTSUSPEITO DTSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO),'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO,"
                   "\n\t'' AS NMURLDADOS,"
                   "\n\t'' AS DTFIMPAUSAATENDIMENTO,"
                   //"\n\tANDAMENTO.IDGRUPO AS IDGRUPO,"
                   "\n\tATENDIMENTO.IDGRUPOATUAL AS IDGRUPO,"
                   //"\n\t(SELECT PES.NMPESSOA FROM CUSTOMER.PESSOA PES WHERE ANDAMENTO.IDPESSOAUSUARIO = PES.IDPESSOA) AS NMPESSOA,"
                   //@CASSIO "\n\t(SELECT PES.NMPESSOA FROM CUSTOMER.PESSOA PES,ANDAMENTO.ANDAMENTO ANDA2 WHERE ANDA2.IDATENDIMENTO=ATENDIMENTO.IDATENDIMENTO AND ANDA2.IDATIVIDADE IN (2,8,10,11,13,14,17,23) AND ROWNUM <2 AND ANDA2.IDPESSOAUSUARIO =PES.IDPESSOA) AS NMPESSOA,"
                   "\n\t(SELECT PES.NMPESSOA FROM CUSTOMER.PESSOA PES WHERE PES.IDPESSOA=ATENDIMENTO.IDPESSOAUSUARIOATUAL) AS NMPESSOA,"
                   "\n\t(SELECT DECODE(SIGN(COUNT(1)),1,'S','N') FROM ATENDIMENTO.ATENDIMENTODOCUMENTO ATDD WHERE ATENDIMENTO.IDATENDIMENTO = ATDD.IDATENDIMENTO) AS INDOCUMENTO,"
                   "\n\tTO_CHAR(ATENDIMENTO.DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') AS DTFECHAMENTO,"
                   //"\n\t(SELECT OBS.DSANDAMENTOOBSERVACAO FROM ATENDIMENTO.ANDAMENTOOBSERVACAO OBS WHERE ANDAMENTO.IDANDAMENTO = OBS.IDANDAMENTO) AS DSANDAMENTOOBSERVACAO,"
                   "\n\t(SELECT OBS.DSANDAMENTOOBSERVACAO FROM ATENDIMENTO.ANDAMENTOOBSERVACAO OBS WHERE ATENDIMENTO.IDANDAMENTOATUAL = OBS.IDANDAMENTO) AS DSANDAMENTOOBSERVACAO,"
                   "\n\t(SELECT ABA.IDATENDIMENTOBAIXAHISTORICO FROM ATENDIMENTO.ATENDIMENTOBAIXAATUAL ABA WHERE ATENDIMENTO.IDATENDIMENTO = ABA.IDATENDIMENTO) AS IDATENDIMENTOBAIXAHISTORICO,"
                   "\n\t(SELECT ACS.DTSOLICITACAOCANCELAMENTO FROM ATENDIMENTO.CANCELAMENTOSOLICITADO ACS WHERE ATENDIMENTO.IDATENDIMENTO = ACS.IDATENDIMENTO) AS DTSOLICITACAOCANCELAMENTO,"
                   "\n\t(SELECT AO.IDATENDIMENTOORIGEM FROM ATENDIMENTO.ATENDIMENTOORIGEM AO WHERE ATENDIMENTO.IDATENDIMENTO = AO.IDATENDIMENTO) AS IDATENDIMENTOORIGEM,"
                   "\n\tATENDIMENTO.DTPRAZOFINALINTERNO,"
                   "\n\t0 AS IDATENDIMENTOALERTA,"
                   "\n\t'' AS DSMENSAGEM,"
                   "\n\t0 AS IDALERTA,"
                   "\n\t'' AS SGALERTA,"
                   "\n\t'' AS DSALERTA,"
                   "\n\t'' AS NMICONE,"
                   "\n\tATENDIMENTO.IDUFOPERADORA"
               "\n\tFROM "
                    "\n\tATENDIMENTO.ATENDIMENTO ATENDIMENTO"
                   /* "\n\t,ATENDIMENTO.GRUPOCRI GCRI" */
                   //"\n\t,ANDAMENTO.ANDAMENTO ANDAMENTO"
                   "\n\t,ACESSO.USUARIOGRUPO UG"
                   "\n\t,WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR"
                   "\n\t,WORKFLOW.AGRUPAMENTOESTADO AGREST"
                   "\n\t,WORKFLOW.ESTADO EST"
                   "\n\t,WORKFLOW.SUBESTADO SEST "
               "\n\tWHERE "
                   "\n\tUG.IDPESSOAUSUARIO = ";

    sprintf( filtro, "%d ", idUsuarioGrupo );

    queryStr += filtro;
    queryStr +=
               //"\n\tAND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC "
               "\n\tAND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ATENDIMENTO.IDAGRUPAMENTOESTADOTPPROC "
               "\n\tAND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
               "\n\tAND EST.IDESTADO = AGREST.IDESTADO "
               "\n\tAND SEST.IDSUBESTADO = AGREST.IDSUBESTADO "
               /*
			   "\n\tAND ATENDIMENTO.IDATENDIMENTO = GCRI.IDATENDIMENTO (+) "
               "\n\tAND GCRI.IDATENDIMENTO IS NULL "
			   */
               "\n\tAND ATENDIMENTO.DTFECHAMENTO IS NOT NULL"
               "\n\tAND NVL(ATENDIMENTO.SGTIPOPORTABILIDADE,'NORMAL') <> 'PORTOUT' "
               "\n\tAND (ATENDIMENTO.SGREGRAENCAMINHAMENTO IS NULL OR ATENDIMENTO.SGFLUXOATENDIMENTO <> 'MC1') "
               //"\n\tAND ANDAMENTO.IDANDAMENTO = ATENDIMENTO.IDANDAMENTOATUAL"
               //"\n\tAND ANDAMENTO.IDGRUPO = UG.IDGRUPO "
               "\n\tAND ATENDIMENTO.IDGRUPOATUAL = UG.IDGRUPO ";

    if(status->dtAberturaInicio != -1)
    {
        sprintf( filtro, "\n AND TRUNC(ATENDIMENTO.DTABERTURA) >= "
                            "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
                        , dtAberturaInicioFiltro );
        queryStr += filtro;
    }

    if(status->dtAberturaFim != -1)
    {
        sprintf( filtro, "\n AND TRUNC(ATENDIMENTO.DTABERTURA) <= "
                            "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
                        , dtAberturaFimFiltro );
        queryStr += filtro;
    }
               //"\n\tAND ANDAMENTO.DTANDAMENTO BETWEEN (SELECT TO_DATE('";
    //queryStr += dtFechamentoInicioFiltro;
    //queryStr +=
    //           " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
    //           "\n\tAND (SELECT TO_DATE('";
    //queryStr += dtFechamentoFimFiltro;
    //queryStr +=
    //           " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) ";
    queryStr +=
               "\n\tAND ATENDIMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('";
    queryStr += dtFechamentoInicioFiltro;
    queryStr +=
               " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
               "\n\tAND (SELECT TO_DATE('";
    queryStr += dtFechamentoFimFiltro;
    queryStr +=
               " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
             ") "
             "\nWHERE 1=1 ";

    if(status->idPessoaUsuario != -1)
    {
        sprintf( filtro, "\n AND IDPESSOAUSUARIO = %d ", idUsuarioFiltro ); 
        queryStr += filtro;
    }

    if(status->idGrupo != -1)
    {
        sprintf( filtro, "\n AND IDGRUPO = %d ", idGrupoFiltro );
        queryStr += filtro;
    }

    if(status->idAtendimento != -1)
    {
        sprintf( filtro, "\n AND IDATENDIMENTO = %ld ", idAtendimentoFiltro );
        queryStr += filtro;
    }

    if(status->idContato != -1)
    {
        sprintf( filtro, "\n AND IDCONTATO = %d ", idContatoFiltro );
        queryStr += filtro;
    }

    if(status->idEstado != -1)
    {
        sprintf( filtro, "\n AND IDESTADO = %d ", idEstadoFiltro );
        queryStr += filtro;
    }

    if(status->idSubEstado != -1)
    {
        sprintf( filtro, "\n AND IDSUBESTADO = %d ", idSubEstadoFiltro );
        queryStr += filtro;
    }

    // if(status->dtAberturaInicio != -1)
    // {
    //     sprintf( filtro, "\n AND TRUNC(DTABERTURA) >= "
    //                         "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
    //                     , dtAberturaInicioFiltro );
    //     queryStr += filtro;
    // }

    // if(status->dtAberturaFim != -1)
    // {
    //     sprintf( filtro, "\n AND TRUNC(DTABERTURA) <= "
    //                         "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
    //                     , dtAberturaFimFiltro );
    //     queryStr += filtro;
    // }

    if(status->idUfOperadora != -1)
    {
        sprintf( filtro, "\n AND IDUFOPERADORA = %d ", idUfOperadora );
        queryStr += filtro;
    }

    queryStr += "\n AND ROWNUM < 101 ";

    query = queryStr.c_str();

    ULOG( "QUERY=%s",query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE QueryFechados2 STATEMENT;
    EXEC SQL PREPARE QueryFechados2 FROM :query;
    EXEC SQL DECLARE consultaWFFilaFechadosUsuario CURSOR FOR QueryFechados2;

    EXEC SQL OPEN consultaWFFilaFechadosUsuario;
    // Troca a diretiva de tratamento de erro para o fetch com host array
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    while (rows_this_time == rows_to_fetch)
    {
        EXEC SQL FOR :rows_to_fetch FETCH consultaWFFilaFechadosUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        rows_this_time = sqlca.sqlerrd[2] - rows_before; 
        rows_before = sqlca.sqlerrd[2]; 

        //ULOG("FETCH: %d linhas carregadas.", rows_before);

        for(int icount=0; icount < rows_this_time; icount++)
        {
            totalRegistros++;

            if (numeroRegistros < 100 && rows_this_time > 0)
            {
                numeroRegistros++;

                CONVIND(idAtendimentoProtocolo[icount], i_idAtendimentoProtocolo[icount]);
                CONVIND(dsEstado[icount], i_dsEstado[icount]);
                CONVIND(sgEstado[icount], i_sgEstado[icount]);
                CONVIND(dsSubEstado[icount], i_dsSubEstado[icount]);
                CONVIND(sgSubEstado[icount], i_sgSubEstado[icount]);
                CONVIND(nmPessoa[icount], i_nmPessoa[icount]);
                CONVIND(dtAbertura[icount], i_dtAbertura[icount]);
                CONVIND(dtFechamento[icount], i_dtFechamento[icount]);
                CONVIND(dsMensagem[icount], i_dsMensagem[icount]);
                CONVIND(sgAlerta[icount], i_sgAlerta[icount]);
                CONVIND(dsAlerta[icount], i_dsAlerta[icount]);
                CONVIND(nmIcone[icount], i_nmIcone[icount]);
                CONVIND(nmCor[icount], i_nmCor[icount]);
                CONVIND(arvore[icount], i_arvore[icount]);
                CONVIND(nrTelefone[icount], i_nrTelefone[icount]);
                CONVIND(inDocumento[icount], i_inDocumento[icount]);
                CONVIND(inACS[icount], i_inACS[icount]);
                CONVIND(dtSuspeito[icount], i_dtSuspeito[icount]);
                CONVIND(dtFimPausa[icount], i_dtFimPausa[icount]);
                CONVIND(nmURLDados[icount], i_nmURLDados[icount]);
                CONVIND(dtSolicitacaoCancelamento[icount], i_dtSolicitacaoCancelamento[icount]);
                CONVIND(dtPrazoFinalInterno[icount], i_dtPrazoFinalInterno[icount]);
                CONVIND(nrCriticidade[icount], i_nrCriticidade[icount]);

                saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");

                saida->addItem("idAtendimento", CONVLONG(idAtendimento[icount],i_idAtendimento[icount]));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo[icount].arr);
                saida->addItem("dtAbertura", (char*)dtAbertura[icount].arr);
                saida->addItem("dtFechamento", (char*)dtFechamento[icount].arr);
                saida->addItem("nrTelefone", (char*)nrTelefone[icount].arr);
                saida->addItem("inDocumento", (char*)inDocumento[icount].arr);
                saida->addItem("inACS", (char*)inACS[icount].arr);
                saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento[icount],i_inPausaAtendimento[icount]));
                saida->addItem("dtSuspeito", (char*)dtSuspeito[icount].arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa[icount].arr);
                saida->addItem("idAtendimentoBaixaHistorico", i_idAtendimentoBaixaHistorico[icount] == -1 ? 0 : idAtendimentoBaixaHistorico[icount]);
                saida->addItem("nmURLDados", (char*)nmURLDados[icount].arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento[icount].arr);

                saida->createTag("WFEstadoVO");

                saida->addItem("idEstado", CONVINT(idEstado[icount],i_idEstado[icount]));
                saida->addItem("dsEstado", (char*)dsEstado[icount].arr);
                saida->addItem("sgEstado", (char*)sgEstado[icount].arr);

                saida->closeTag();

                saida->createTag("WFSubEstadoVO");

                saida->addItem("idSubEstado", CONVINT(idSubEstado[icount],i_idSubEstado[icount]));
                saida->addItem("dsSubEstado", (char*)dsSubEstado[icount].arr);
                saida->addItem("sgSubEstado", (char*)sgSubEstado[icount].arr);

                saida->closeTag();

                if (i_idAlerta[icount] != -1)
                {
                    saida->createTag("AlertaVO");

                    saida->addItem("idAlerta", CONVINT(idAlerta[icount],i_idAlerta[icount]));
                    saida->addItem("dsAlerta", (char*)dsAlerta[icount].arr);
                    saida->addItem("sgAlerta", (char*)sgAlerta[icount].arr);
                    saida->addItem("nmIcone", (char*)nmIcone[icount].arr);
                    saida->addItem("nmCor", (char*)nmCor[icount].arr);
                    saida->addItem("nrCriticidade", (char*)nrCriticidade[icount].arr);

                    saida->closeTag();
                }

                saida->createTag("ns2:ArvoreAtendimentoVO");

                saida->addItem("ns2:idContato", CONVINT(idContato[icount],i_idContato[icount]));
                saida->addItem("ns2:descricaoCompleta", (char*)arvore[icount].arr);

                saida->closeTag();

                saida->createTag("ns3:UsuarioVIVO");

                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa[icount],i_idPessoa[icount]));
                saida->addItem("ns3:nmLoginUsuario", "");
                saida->addItem("ns3:nmNome", (char*)nmPessoa[icount].arr);
                saida->addItem("ns3:sgSenhaUsuario", "");

                saida->closeTag();

                saida->closeTag();

                saida->closeTag();

            } // if (numeroRegistros < 100)

        } // for(int icount=0; icount < rows_this_time; icount++) 

    } // while (rows_this_time == rows_to_fetch)

    if( totalRegistros < 100 )
    {
        saida->addItem("totalRegistros", totalRegistros);
    }
    else
    {
        saida->addItem("totalRegistros", "100+");
    }

    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosUsuario;

    ULOG_END( "proCConsultaWFFilaFechadosUsuario()" );

    return true;
}

bool proCConsultaWFFilaFechadosUsuarioQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosUsuarioQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        char query[16384];
        char filtro[1024];

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int  idUfOperadora;

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        short indIdUfOperadora;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdUfOperadora = status->idUfOperadora;

    // ==> Remodelagem Atendimento--Fev/2007--Cassio 
    // sprintf(query,
    //         " SELECT "
    //          " COUNT(1) "
    //         " FROM ( "
    //         "    SELECT "
    //              "ATENDIMENTOFECHAMENTO.IDATENDIMENTO AS IDATENDIMENTO,  "
    //              "ATENDIMENTO.IDCONTATO AS IDCONTATO,  "
    //              "AGREST.IDESTADO AS IDESTADO,  "
    //              "AGREST.IDSUBESTADO  AS IDSUBESTADO,  "
    //              "ANDAMENTO.IDPESSOAUSUARIO AS IDPESSOAUSUARIO,  "
    //              "UG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO,  "
    //              "ATENDIMENTO.DTABERTURA AS DTABERTURA,  "
    //              "ANDAMENTO.IDGRUPO AS IDGRUPO,  "
    //                 "( "
    //                     "SELECT "
    //                         "AR.IDUFOPERADORA "
    //                     "FROM "
    //                         "ATENDIMENTO.ATENDIMENTOLINHA AL, "
    //                         "CUSTOMER.PESSOALINHAHISTORICO PLH, "
    //                         "LINHA.LINHATELEFONICA LT, "
    //                         "LINHA.LINHABASE LB, "
    //                         "APOIO.AREAREGISTRO AR "
    //                     "WHERE "
    //                         "AL.IDPESSOALINHAHISTORICO = PLH.IDPESSOALINHAHISTORICO "
    //                     "AND "
    //                         "PLH.IDLINHATELEFONICA = LT.IDLINHATELEFONICA "
    //                     "AND "
    //                         "LT.IDLINHABASE = LB.IDLINHABASE "
    //                     "AND "
    //                         "LB.IDAREAREGISTRO = AR.IDAREAREGISTRO "
    //                     "AND "
    //                        "AL.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO "
    //                 ") AS IDUFOPERADORA "
    //         "	FROM  "
    //         "		 ATENDIMENTO.ATENDIMENTO ATENDIMENTO  "
    //         "		,ATENDIMENTO.ATENDIMENTOFECHAMENTO ATENDIMENTOFECHAMENTO  "
    //         "		,ATENDIMENTO.GRUPOCRI GCRI  "
    //         "		,ANDAMENTO.ANDAMENTO ANDAMENTO  "
    //         "		,ACESSO.USUARIOGRUPO UG "
    //         "		,WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR "
    //         "		,WORKFLOW.AGRUPAMENTOESTADO AGREST "
    //         "		,WORKFLOW.ESTADO EST "
    //         "		,WORKFLOW.SUBESTADO SEST "
    //         "	WHERE  "
    //         "		UG.IDPESSOAUSUARIO = %d "
    //         "	AND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC  "
    //         "	AND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
    //         "	AND EST.IDESTADO = AGREST.IDESTADO "
    //         "	AND SEST.IDSUBESTADO = AGREST.IDSUBESTADO	 "
    //         "	AND ATENDIMENTOFECHAMENTO.IDATENDIMENTO = GCRI.IDATENDIMENTO (+)  "
    //         "	AND GCRI.IDATENDIMENTO IS NULL  "
    //         "	AND ATENDIMENTOFECHAMENTO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO				  "
    //         "	AND ANDAMENTO.IDANDAMENTO = ATENDIMENTOFECHAMENTO.IDANDAMENTO   "
    //         "	AND ANDAMENTO.IDGRUPO = UG.IDGRUPO  "
    //         "	AND ANDAMENTO.DTANDAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL)   "
    //         "		 AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL)   "
    //         "	AND ATENDIMENTOFECHAMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL)   "
    //         "		 AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL)   "
    //         " )  "
    //         " WHERE 1=1 ", idUsuarioGrupo, dtFechamentoInicioFiltro, dtFechamentoFimFiltro, dtFechamentoInicioFiltro, dtFechamentoFimFiltro);

    sprintf(query,
             "SELECT "
                 "COUNT(1) "
             "FROM ( "
               "SELECT "
                    "ATENDIMENTO.IDATENDIMENTO, "
                    "ATENDIMENTO.IDCONTATO, "
                    "AGREST.IDESTADO, "
                    "AGREST.IDSUBESTADO, "
                    "ANDAMENTO.IDPESSOAUSUARIO, "
                    "UG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO, "
                    "ATENDIMENTO.DTABERTURA, "
                    "ANDAMENTO.IDGRUPO, "
                    "ATENDIMENTO.IDUFOPERADORA "
               "FROM  "
                    "ATENDIMENTO.ATENDIMENTO ATENDIMENTO "
                   ",ATENDIMENTO.GRUPOCRI GCRI "
                   ",ANDAMENTO.ANDAMENTO ANDAMENTO "
                   ",ACESSO.USUARIOGRUPO UG "
                   ",WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR "
                   ",WORKFLOW.AGRUPAMENTOESTADO AGREST "
                   ",WORKFLOW.ESTADO EST "
                   ",WORKFLOW.SUBESTADO SEST "
               "WHERE "
                   "UG.IDPESSOAUSUARIO = %d "
               "AND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC "
               "AND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
               "AND EST.IDESTADO = AGREST.IDESTADO "
               "AND SEST.IDSUBESTADO = AGREST.IDSUBESTADO "
               "AND ATENDIMENTO.IDATENDIMENTO = GCRI.IDATENDIMENTO (+) "
               "AND GCRI.IDATENDIMENTO IS NULL "
               "AND ATENDIMENTO.DTFECHAMENTO IS NOT NULL "
               "AND ANDAMENTO.IDANDAMENTO = ATENDIMENTO.IDANDAMENTOATUAL "
               "AND NVL(ATENDIMENTO.SGTIPOPORTABILIDADE,'NORMAL') <> 'PORTOUT' "
               "AND (ATENDIMENTO.SGREGRAENCAMINHAMENTO IS NULL OR ATENDIMENTO.SGFLUXOATENDIMENTO <> 'MC1') "
               "AND ANDAMENTO.IDGRUPO = UG.IDGRUPO "
               "AND ANDAMENTO.DTANDAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
                    "AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
               "AND ATENDIMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
                    "AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
             ") "
             "WHERE 1=1 ", idUsuarioGrupo, dtFechamentoInicioFiltro, dtFechamentoFimFiltro, dtFechamentoInicioFiltro, dtFechamentoFimFiltro);

    if(indIdUsuario != -1)
    {
        sprintf( filtro, " AND idPessoaUsuario = %d ", idUsuarioFiltro ); 
        strcat( query, filtro );
    }

    if(indIdGrupo != -1)
    {
        sprintf( filtro, " AND idGrupo = %d ", idGrupoFiltro );
        strcat( query, filtro );
    }

    if(indIdAtendimento != -1)
    {
        sprintf( filtro, " AND idAtendimento = %ld ", idAtendimentoFiltro );
        strcat( query, filtro );
    }

    if(indIdContato != -1)
    {
        sprintf( filtro, " AND idContato = %d ", idContatoFiltro );
        strcat( query, filtro );
    }

    if(indIdEstado != -1)
    {
        sprintf( filtro, " AND idEstado = %d ", idEstadoFiltro );
        strcat( query, filtro );
    }

    if(indIdSubEstado != -1)
    {
        sprintf( filtro, " AND idSubEstado = %d ", idSubEstadoFiltro );
        strcat( query, filtro );
    }

    if(indDtAberturaInicio != -1)
    {
        sprintf( filtro, " AND TRUNC(ATENDIMENTO.dtAbertura) >= ( SELECT TO_DATE('%s', 'DD/MM/YYYY') FROM DUAL ) ", dtAberturaInicioFiltro );
        strcat( query, filtro );
    }

    if(indDtAberturaFim != -1)
    {
        sprintf( filtro, " AND TRUNC(ATENDIMENTO.dtAbertura) <= ( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) ", dtAberturaFimFiltro );
        strcat( query, filtro );
    }

    if(indIdUfOperadora != -1)
    {
        sprintf( filtro, " AND idUfOperadora = %d ", idUfOperadora );
        strcat( query, filtro );
    }

    ULOG( "QUERY [%s]",query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL DECLARE QueryFechados2Qtd STATEMENT;
    EXEC SQL PREPARE QueryFechados2Qtd FROM :query;
    EXEC SQL DECLARE consultaWFFilaFechadosUsuarioQtd CURSOR FOR QueryFechados2Qtd;

    EXEC SQL OPEN consultaWFFilaFechadosUsuarioQtd;
    EXEC SQL FETCH consultaWFFilaFechadosUsuarioQtd INTO :iContador:sContador;
    EXEC SQL CLOSE consultaWFFilaFechadosUsuarioQtd;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaFechadosUsuarioQtd()" );

    return true;
}

bool proCConsultaWFFilaUsuarioLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFFilaUsuarioLinha CURSOR FOR
            SELECT 
                idAtendimento,
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM 
                Atendimento.AtdFilaUsuarioLinhaWFV01
             WHERE 
                idPessoaUsuario = :idPessoaUsuarioFiltro
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFFilaUsuarioLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaUsuarioLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuarioLinha;

    ULOG_END( "proCConsultaWFFilaUsuarioLinha()" );

    return true;
}

bool proCConsultaWFFilaUsuarioLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContador
	FROM 
		Atendimento.AtdFilaUsuarioLinhaWFV01
	WHERE idPessoaUsuario = :idPessoaUsuarioFiltro
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone
	AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
	AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (idContato = :idContatoFiltro OR -1=:indIdContato)
	AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
	AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
	AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaUsuarioLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaLinha CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM 
                Atendimento.AtendimentoFilaLinhaWFV01
             WHERE 
                idPessoaUsuario = :idUsuarioGrupo
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFFilaLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaLinha;

    ULOG_END( "proCConsultaWFFilaLinha()" );

    return true;
}

bool proCConsultaWFFilaLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContador
	FROM 
		Atendimento.AtendimentoFilaLinhaWFV01
	WHERE idPessoaUsuario = :idUsuarioGrupo
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone
	AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (idContato = :idContatoFiltro OR -1=:indIdContato)
	AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
	AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
	AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaUsuario CURSOR FOR
    SELECT 
        idAtendimento,
        idAtendimentoProtocolo,
        idContato, 
        idEstado, 
        dsEstado, 
        sgEstado, 
        idSubEstado, 
        dsSubEstado, 
        sgSubEstado, 
        idPessoaUsuario, 
        nmPessoa, 
        dtAbertura, 
        dtFechamento,
        idAtendimentoAlerta, 
        dsMensagem, 
        idAlerta, 
        sgAlerta, 
        dsAlerta, 
        nmIcone, 
        nmCor, 
        nrCriticidade, 
        path, 
        nrTelefone, 
        inDocumento, 
        inACS, 
        inPausaAtendimento, 
        dtSuspeito, 
        dtFimPausaAtendimento,
        idAtendimentoBaixaHistorico, 
        nmURLDados, 
        dtSolicitacaoCancelamento, 
        dtPrazoFinalInterno, 
        idAtendimentoSuspeito, 
        idAtendimentoOrigem 
    FROM
    (
        SELECT 
            idAtendimento,
            idAtendimentoProtocolo,
            idContato, 
            idEstado, 
            dsEstado, 
            sgEstado, 
            idSubEstado, 
            dsSubEstado, 
            sgSubEstado, 
            idPessoaUsuario, 
            nmPessoa, 
            TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura,
            TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS') dtFechamento,
            idAtendimentoAlerta, 
            dsMensagem, 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            path, 
            nrTelefone, 
            inDocumento, 
            0 as inACS, 
            inPausaAtendimento, 
            TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS') dtSuspeito, 
            TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS') dtFimPausaAtendimento, 
            idAtendimentoBaixaHistorico, 
            nmURLDados, 
            dtSolicitacaoCancelamento, 
            dtPrazoFinalInterno, 
            idAtendimentoSuspeito, 
            idAtendimentoOrigem,
            idAtendimentoPr
         FROM 
            Atendimento.AtendimentoFilaUsuarioWFV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM <= 100
    )
    ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFFilaUsuario;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;
        
        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuario;

    ULOG_END( "proCConsultaWFFilaUsuario()" );

    return true;
}

bool proCConsultaWFFilaUsuarioQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;

		int iContador;
		short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
	FROM 
		Atendimento.AtendimentoFilaUsuarioWFV01
	WHERE 
		 idPessoaUsuario = :idPessoaUsuarioFiltro
	AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
	AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (idContato = :idContatoFiltro OR -1=:indIdContato)
	AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
	AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
	AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);


    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaUsuarioQtd()" );

    return true;
}

bool proCConsultaWFFila(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFila()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE consultaWFFila CURSOR FOR
    SELECT
        idAtendimento,
        idAtendimentoProtocolo,
        idContato, 
        idEstado, 
        dsEstado, 
        sgEstado, 
        idSubEstado, 
        dsSubEstado, 
        sgSubEstado, 
        idPessoaUsuario, 
        nmPessoa, 
        dtAbertura, 
        dtFechamento, 
        idAtendimentoAlerta, 
        dsMensagem, 
        idAlerta, 
        sgAlerta, 
        dsAlerta, 
        nmIcone, 
        nmCor, 
        nrCriticidade, 
        path, 
        nrTelefone, 
        inDocumento, 
        inACS, 
        inPausaAtendimento, 
        dtSuspeito, 
        dtFimPausaAtendimento, 
        idAtendimentoBaixaHistorico, 
        nmURLDados, 
        dtSolicitacaoCancelamento, 
        dtPrazoFinalInterno, 
        idAtendimentoSuspeito, 
        idAtendimentoOrigem 
    FROM
    (
        SELECT 
            idAtendimento, 
            idAtendimentoProtocolo,
            idContato, 
            idEstado, 
            dsEstado, 
            sgEstado, 
            idSubEstado, 
            dsSubEstado, 
            sgSubEstado, 
            idPessoaUsuario, 
            nmPessoa, 
            TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
            TO_CHAR(dtFechamento,'DD/MM/YYYY HH24:MI:SS') dtFechamento, 
            idAtendimentoAlerta, 
            dsMensagem, 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            path, 
            nrTelefone, 
            inDocumento, 
            0 as inACS, 
            inPausaAtendimento, 
            TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS') dtSuspeito, 
            TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS') dtFimPausaAtendimento, 
            idAtendimentoBaixaHistorico, 
            nmURLDados, 
            dtSolicitacaoCancelamento, 
            dtPrazoFinalInterno, 
            idAtendimentoSuspeito, 
            idAtendimentoOrigem,
            idAtendimentoPr
         FROM 
            Atendimento.AtendimentoFilaWFV01
         WHERE 
            idPessoaUsuario = :idUsuarioGrupo
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM <= 100
    )
    ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFFila;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFila INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFila;

    ULOG_END( "proCConsultaWFFila()" );

    return true;
}

bool proCConsultaWFFilaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        int iContador;
        short sContador;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    if( indIdEstado != -1 || indIdSubEstado != -1 )
    {
    	//Se existir indIdEstado ou indIdSubEstado então realiza a pesquisa pesada com mais parametros
	    EXEC SQL 
		SELECT 
			COUNT(1)
		INTO
			:iContador:sContador
		FROM 
			Atendimento.AtendimentoFilaWFV01
		WHERE 
			idPessoaUsuario = :idUsuarioGrupo
		AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
		AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		AND (idContato = :idContatoFiltro OR -1=:indIdContato)
		AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
		AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
		AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
		AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);
	}
	else
	{
    	//Se não existir indIdEstado ou indIdSubEstado então realiza a pesquisa menos pesada com menos parametros
        // ==> Remodelagem Atendimento--Fev/2007--Cassio 
        // Esta rotina absorveu a antiga view ATENDIMENTO.ATENDIMENTOFILAWFV02. Esta view só era usada neste ponto do
        // sistema e por este motivo foi absorvida aqui e deletada do banco de dados. - Fev/2007 - Cassio.
	    EXEC SQL 
		SELECT 
			COUNT(1)
		INTO
			:iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
            ACESSO.USUARIOGRUPO USUARIOGRUPO,
            ACESSO.GRUPO GRUPO,
			APOIO.TIPOGRUPO TIPOGRUPO 
        WHERE
            ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL IS NOT NULL
        AND ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = USUARIOGRUPO.IDGRUPO
        AND ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = GRUPO.IDGRUPO
        AND GRUPO.IDTIPOGRUPO = TIPOGRUPO.IDTIPOGRUPO 
		AND TIPOGRUPO.CDTIPOGRUPO = 'NORMAL'
		AND USUARIOGRUPO.IDPESSOAUSUARIO = :idUsuarioGrupo
		AND (ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		AND (ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = :idGrupoFiltro OR -1=:indIdGrupo)
		AND (ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		AND (ATENDIMENTOPRIORIZACAO.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
        AND NVL(ATENDIMENTOPRIORIZACAO.SGTIPOPORTABILIDADE,'NORMAL') <> 'PORTOUT'
        AND (ATENDIMENTOPRIORIZACAO.SGREGRAENCAMINHAMENTO IS NULL OR ATENDIMENTOPRIORIZACAO.SGFLUXOATENDIMENTO <> 'MC1')
		AND (TRUNC(ATENDIMENTOPRIORIZACAO.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
		AND (TRUNC(ATENDIMENTOPRIORIZACAO.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);
	}

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaQtd()" );

    return true;
}
