/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author
 * @version $Revision: 1.1.2.10.6.23.14.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2015/05/20 20:02:19 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include <string>
using namespace std;

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

extern void sql_error_WFAtendimento(sqlca*sqlca);

bool ExisteAtendimento(char * nrProtoColo);
bool proCConsultaWFAtendimentoFilaLinha_Migracao(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida);
bool proCGetDadosConta( int idConta,int idPessoaDePara,XMLGen *saida );
bool proCObtemWFDetalheAtendimento(long _idAtendimento, DetalheAtendimento *pDadosSaida, StatusDetalheAtendimento *pStatusSaida );
bool proCObtemWFDetalheAtendimentoEx( long _idAtendimento, DetalheAtendimento *_pDadosSaida, StatusDetalheAtendimento *_pStatusSaida );
int proCObtemWFComunicacaoDefault(long idPessoa);
int proCConsultarProtocolos(st_AtendimentoFila *dados,st_vlAtendimentoFila *status,int rowsToFetch);
bool proCObterTipoRetornoContato(long _idAtendimento,int *idTipoRetornoContato);
bool proCObterTipoRetornoContatoEx(long _idAtendimento,int *_idTipoRetornoContato);
int proCBlocarExecutarQueryDinamica(string &query,int rowsToFetch,int pag);
void processarSaidaProtocoloAtendimentoVO(string &query,int rowsToFetch,int &totalProcolos,XMLGen* saida);
bool proCConsultaWFAtendimentoFilaLinha_Protocolo(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida);
bool proCConsultaWFAtendimentoFilaLinhaTI_Protocolos(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida);
void processarSaidaProtocolo( int rowsToFetch,int &totalProcolos,XMLGen* saida );
bool proCConsultaWFAtendimentoFilaLinhaTI_Migracao( st_AtendimentoFila * dados, st_vlAtendimentoFila * status, XMLGen * saida );
bool proCConsultaWFAtendimentoFilaPessoaMig(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida);


// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"

    #define MAX_ROWS_TO_FETCH_PROTOCOLO 100
    #define MAX_ROWS_TO_FETCH_PROCESSO  100

    const char *pOraQuery;

    struct VARORAPROTOCOLO
    {
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR nrTelefoneProtocolo[20];
        VARCHAR dsStatusProtocolo[256];
        VARCHAR nmSistemaOrigemProtocolo[256];
        VARCHAR dtAberturaProtocolo[22];
        VARCHAR dtFechamentoProtocolo[22];
    } varLstOraIdAtdProtocolo[MAX_ROWS_TO_FETCH_PROTOCOLO];

    struct STATORAPROTOCOLO
    {
        short idAtendimentoProtocolo;
        short nrTelefoneProtocolo;
        short dsStatusProtocolo;
        short nmSistemaOrigemProtocolo;
        short dtAberturaProtocolo;
        short dtFechamentoProtocolo;
    } statLstOraIdAtdProtocolo[MAX_ROWS_TO_FETCH_PROTOCOLO];

    struct VARORADADOSPRO
    {
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR idAtendimento[39];
        VARCHAR idContato[39];
        VARCHAR idEstado[8];
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        VARCHAR idSubEstado[8];
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        VARCHAR idPessoa[39];
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        VARCHAR idAlerta[8];
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[12];
        VARCHAR inDocumento[2];
        VARCHAR inACS[2];
        VARCHAR inPausaAtendimento[2];
        VARCHAR dtSuspeito[22];
        VARCHAR dtFimPausa[22];
        VARCHAR idAtendimentoBaixaHistorico[39];
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[22];
        VARCHAR dtPrazoFinalInterno[22];
        VARCHAR nmLoginUsuarioAbertura[256];
    } varOraDadosPro[MAX_ROWS_TO_FETCH_PROCESSO];

    struct STATORADADOSPRO
    {
        short idAtendimentoProtocolo;
        short idAtendimento;
        short idContato;
        short idEstado;
        short dsEstado;
        short sgEstado;
        short idSubEstado;
        short dsSubEstado;
        short sgSubEstado;
        short idPessoa;
        short nmPessoa;
        short dtAbertura;
        short dtFechamento;
        short idAlerta;
        short sgAlerta;
        short dsAlerta;
        short nmIcone;
        short nmCor;
        short nrCriticidade;
        short arvore;
        short nrTelefone;
        short inDocumento;
        short inACS;
        short inPausaAtendimento;
        short dtSuspeito;
        short dtFimPausa;
        short idAtendimentoBaixaHistorico;
        short nmURLDados;
        short dtSolicitacaoCancelamento;
        short dtPrazoFinalInterno;
        short nmLoginUsuarioAbertura;
    } statOraDadosPro[MAX_ROWS_TO_FETCH_PROCESSO];

EXEC SQL END DECLARE SECTION;

/******************************************************************************************
*
* INICIO DOS METODOS ObtemXXXX que retornam dados especificos de atendimento
*
********************************************************************/
int proCObtemWFComunicacaoDefault(long idPessoa)
{
    ULOG_START( "proCObtemWFComunicacaoDefault()" );
    
    ULOG("idPessoa (%ld)", idPessoa);

    struct sqlca sqlca;
    int     idTpComunicacao = 0;

    EXEC SQL BEGIN DECLARE SECTION;
        long     idpessoa = idPessoa;
        
        int     idTipoComunicacao;
        short   i_idTipoComunicacao=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );

    ULOG( "idPessoa=%ld",idPessoa );

    EXEC SQL 
        SELECT 
            idTipoComunicacao
        INTO
            :idTipoComunicacao:i_idTipoComunicacao
        FROM   
        ( SELECT
            idTipoComunicacao
        FROM
            customer.PessoaComunicacao 
        WHERE 
            idPessoa = :idpessoa
        ORDER BY
            nrSequencia
        )
        WHERE rownum < 2;
   
    if (sqlca.sqlcode == 0 && i_idTipoComunicacao >= 0)
    {
        idTpComunicacao = idTipoComunicacao;
    }
    
    ULOG_END( "proCObtemWFComunicacaoDefault()" );

    return idTpComunicacao;
}

bool proCObtemWFAtendimento(int idContato,int idPessoaDePara,int idLinha,XMLGen *saida,long *_idAtendimento )
{
    ULOG_START( "proCObtemWFAtendimento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int     idcontato = idContato;
        int     idpessoadepara = idPessoaDePara;
        int     idlinha = idLinha;
        int     qtDiasMax;

        long     idAtendimento;
		
		VARCHAR idAtendimento_str[40];
		short   i_idAtendimento_str = -1;
		
        int     idTipoReaberturaProcesso;
        VARCHAR nmTipoReaberturaProcesso[256];
        int     qtDias;
        VARCHAR idAtendimentoProtocolo[39];

        short i_idAtendimentoProtocolo = -1;
        short   i_nmTipoReaberturaProcesso = -1;
    EXEC SQL END DECLARE SECTION;

    ULOG("idcontato=%d",idcontato);
    ULOG("idlinha=%d",idlinha);
    ULOG("idpessoadepara=%d",idpessoadepara);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    // ========================================================================
    // Remodelagem de ATENDIMENTO.ATENDIMENTO - Fev/2007 - Cassio
    // Este código desativou o uso da view ATENDIMENTO.ATENDIMENTOREABERTURAV02
    // pois a mesma era usada somente neste ponto no sistema.
    //
    // Modificando a ATENDIMENTO.ATENDIMENTOREABERTURAV01 para ATENDIMENTO.ATENDIMENTOREABERTURAV02
    // A segundo VIEW nao tem ALTER JOIN porque os tres parametros abaixo sao obrigatorios
    // Nao dava para alterar a primeira view porque ela eh utilizada em outro momento.
    //
    // SELECT
    //     IDATENDIMENTO,
    //     IDTIPOREABERTURAPROCESSO, 
    //     NMTIPOREABERTURAPROCESSO,
    //     QTDIAS
    // INTO
    //     :idAtendimento,
    //     :idTipoReaberturaProcesso,
    //     :nmTipoReaberturaProcesso:i_nmTipoReaberturaProcesso,
    //     :qtDias
    // FROM   
    // (
    //     SELECT 
    //         IDATENDIMENTO,
    //         IDTIPOREABERTURAPROCESSO, 
    //         NMTIPOREABERTURAPROCESSO,
    //         QTDIAS
    //     FROM
    //         ATENDIMENTO.ATENDIMENTOREABERTURAV02
    //     WHERE  
    //         IDCONTATO = :idcontato
    //     AND 
    //         IDLINHATELEFONICA = :idlinha
    //     AND 
    //         IDPESSOADEPARA = :idpessoadepara
    //     AND
    //         QTDIAS >= DECODE(DTFECHAMENTO,NULL,-1,TRUNC(SYSDATE - DTFECHAMENTO))
    //     ORDER BY 
    //         QTDIAS, IDATENDIMENTO DESC
    // )
    // WHERE ROWNUM < 2;
    // ========================================================================

    EXEC SQL
        SELECT 
            MAX(QTDIAS)
        INTO
            :qtDiasMax
        FROM 
            APOIO.TIPOREABERTURAPROCESSO;

    if ( 0 == sqlca.sqlcode )
    {
        EXEC SQL
            SELECT
                IDATENDIMENTO,
                IDATENDIMENTO_2 AS IDATENDIMENTO_STR,
                IDTIPOREABERTURAPROCESSO,
                NMTIPOREABERTURAPROCESSO,
                QTDIAS,
                IDATENDIMENTOPROTOCOLO
            INTO
                :idAtendimento,
				:idAtendimento_str:i_idAtendimento_str,
                :idTipoReaberturaProcesso,
                :nmTipoReaberturaProcesso:i_nmTipoReaberturaProcesso,
                :qtDias,
                :idAtendimentoProtocolo:i_idAtendimentoProtocolo
            FROM
            (
                SELECT
                    ATENDIMENTO.IDATENDIMENTO,
                    ATENDIMENTO.IDATENDIMENTO AS IDATENDIMENTO_2,
                    TIPOREABERTURAPROCESSO.IDTIPOREABERTURAPROCESSO,
                    TIPOREABERTURAPROCESSO.NMTIPOREABERTURAPROCESSO,
                    TIPOREABERTURAPROCESSO.QTDIAS,
                    ATENDIMENTO.IDATENDIMENTOPROTOCOLO
                FROM
                    ATENDIMENTO.ATENDIMENTO ATENDIMENTO,
                    APOIO.TIPOREABERTURAPROCESSO TIPOREABERTURAPROCESSO,
                    CUSTOMER.PESSOALINHAHISTORICO PESSOALINHAHISTORICO
                WHERE
                    ATENDIMENTO.IDPESSOALINHAHISTORICO = PESSOALINHAHISTORICO.IDPESSOALINHAHISTORICO
                AND ATENDIMENTO.IDCONTATO = :idcontato
                AND ATENDIMENTO.IDLINHATELEFONICA = :idlinha
                AND PESSOALINHAHISTORICO.IDPESSOADEPARA = :idpessoadepara
                -- //AND TIPOREABERTURAPROCESSO.QTDIAS >= DECODE(ATENDIMENTO.DTFECHAMENTO,NULL,-1,TRUNC(SYSDATE - ATENDIMENTO.DTFECHAMENTO))
                AND TIPOREABERTURAPROCESSO.QTDIAS >= (SELECT (CASE WHEN TRUNC(SYSDATE - NVL(ATENDIMENTO.DTFECHAMENTO,SYSDATE+1)) 
                                                        >= :qtDiasMax THEN :qtDiasMax ELSE 
                                                            TRUNC(SYSDATE - NVL(ATENDIMENTO.DTFECHAMENTO,SYSDATE+1)) END) FROM DUAL) 
                ORDER BY
                    TIPOREABERTURAPROCESSO.QTDIAS,
                    ATENDIMENTO.DTABERTURA,
                    ATENDIMENTO.IDATENDIMENTO DESC
            )
            WHERE ROWNUM < 2;

        if (sqlca.sqlcode == 0 && i_nmTipoReaberturaProcesso >= 0)
        {
            CONVIND(nmTipoReaberturaProcesso, i_nmTipoReaberturaProcesso);
            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
			CONVIND(idAtendimento_str, i_idAtendimento_str);

            saida->createTag( "AtendimentoSituacaoVO" );
                saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
                saida->addItem( "idAtendimento", (char*)idAtendimento_str.arr );
                saida->addItem( "nrProtocolo", (char*)idAtendimentoProtocolo.arr );
                saida->addItem( "idTipoReaberturaProcesso", idTipoReaberturaProcesso );
                saida->addItem( "nmTipo", (char*)nmTipoReaberturaProcesso.arr );
                saida->addItem( "qtDias", qtDias );
            saida->closeTag();

            if ( _idAtendimento )
            {
                *_idAtendimento = idAtendimento;
            }
        }
    
        ULOG("idAtendimento = [%ld]",idAtendimento);
        ULOG("nrProtocolo = [%s]",(char*)idAtendimentoProtocolo.arr);
        ULOG("idTipoReaberturaProcesso = [%d]",idTipoReaberturaProcesso);
        ULOG("nmTipo= [%s]",(char *)nmTipoReaberturaProcesso.arr);
        ULOG("qtDias= [%d]",qtDias);
    } //if ( 0 == sqlca.sqlcode )
    else
    {
        ULOGW("Erro de parametrização.");
        throw new TuxException("04E9999","Falta parametro de dias máximos para reabertura");
    }

    ULOG_END( "proCObtemWFAtendimento()" );

    return true;
}

bool proCObterTipoRetornoContato(long _idAtendimento,int *_idTipoRetornoContato)
{
    ULOG_START("proCObterTipoRetornoContato()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct VariaveisRetorno variaveisretorno;
        int *idTipoRetornoContato = _idTipoRetornoContato;
        long idAtendimento = _idAtendimento;

        short i_idContato;
        short i_idCanal;
        short i_idProcedencia;
        short i_idTipoCarteira;
        short i_idSegmentacao;
        short i_idGrupo;
        short i_idTipoRelacionamento;
        short i_idTipoPessoa;
        short i_idUFOperadora;
        short i_idTipoLinha;
        short i_idTipoRetornoContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
            NVL(IDCONTATO,-1) AS IDCONTATO,
            NVL(IDCANAL,-1) AS IDCANAL,
            NVL(IDPROCEDENCIA,-1) AS IDPROCEDENCIA,
            NVL(IDTIPOCARTEIRA,-1) AS IDTIPOCARTEIRA,
            NVL(IDSEGMENTACAO,-1) AS IDSEGMENTACAO,
            NVL(IDGRUPOABERTURA,-1) AS IDGRUPOABERTURA,
            NVL(IDTIPORELACIONAMENTO,-1) AS IDTIPORELACIONAMENTO,
            NVL(IDTIPOPESSOA,-1) AS IDTIPOPESSOA,
            NVL(IDUFOPERADORA,-1) AS IDUFOPERADORA,
            NVL(IDTIPOLINHA,-1) AS IDTIPOLINHA
        INTO
            :variaveisretorno.idContato:i_idContato,
            :variaveisretorno.idCanal:i_idCanal,
            :variaveisretorno.idProcedencia:i_idProcedencia,
            :variaveisretorno.idTipoCarteira:i_idTipoCarteira,
            :variaveisretorno.idSegmentacao:i_idSegmentacao,
            :variaveisretorno.idGrupo:i_idGrupo,
            :variaveisretorno.idTipoRelacionamento:i_idTipoRelacionamento,
            :variaveisretorno.idTipoPessoa:i_idTipoPessoa,
            :variaveisretorno.idUFOperadora:i_idUFOperadora,
            :variaveisretorno.idTipoLinha:i_idTipoLinha
        FROM
            ATENDIMENTO.ATENDIMENTOPRIORIZACAO
        WHERE
            IDATENDIMENTO = :idAtendimento;

    if ( sqlca.sqlcode == 0 )
    {
        // Se ocorrer erro Oracle de mais de uma linha resultante da query abaixo (too many rows)
        // o erro não é da query e sim da configuração de administração que esta permitindo que 
        // um mesmo grupo de variáveis seja parametrizado para mais de um tipo de retorno de contato
        // para um mesmo contato. Veja se o serviço que faz esta parametrização não esta com falha
        // na consistência deste tipo de configuração repetida.
        //
        // Julho,2006 - Cassio.
        //
        EXEC SQL
            SELECT /*+ NO_CPU_COSTING */
                IDTIPORETORNOCONTATO
            INTO
                :*idTipoRetornoContato:i_idTipoRetornoContato
            FROM 
                ATENDIMENTO.ATDVARIAVEISRETORNOV01
            WHERE
                IDCONTATO = :variaveisretorno.idContato
            AND IDGRUPO = :variaveisretorno.idGrupo
            AND IDPROCEDENCIA = :variaveisretorno.idProcedencia
            AND IDSEGMENTACAO = :variaveisretorno.idSegmentacao
            AND IDCANAL = :variaveisretorno.idCanal
            AND IDTIPOCARTEIRA = :variaveisretorno.idTipoCarteira
            AND IDTIPOLINHA = :variaveisretorno.idTipoLinha
            AND IDTIPOPESSOA = :variaveisretorno.idTipoPessoa
            AND IDTIPORELACIONAMENTO = :variaveisretorno.idTipoRelacionamento
            AND IDUFOPERADORA = :variaveisretorno.idUFOperadora;

        // Esta operação é chamada somente para aqueles processos em que o cliente/usuário/prospect
        // solicitou retorno, assim se o contato estiver configurado para SEM RETORNO é assumido
        // por default RETORNO POR GRUPO BKO.
        // Se o tipo de retorno do contato não for encontrado, o valor default fica
        // RETORNO POR GRUPO BKO.
        // Estas definições se encontram no DES V2.3 para a incidência 3273 de homologação VIVO
        // Julho de 2006, Cassio.
        if ( sqlca.sqlcode == 1403 || *idTipoRetornoContato == TP_RET_SEM_RET_ONLINE )
        {
            *idTipoRetornoContato = TP_RET_COM_RET_GRP_BKO;
        }
    }
    else
    {
        ULOGW(resultadoNaoEncontradoSql());
        *idTipoRetornoContato = -1;
    }

    ULOG_END("proCObterTipoRetornoContato()");

    return true;
}



/*
 *
 * OS 1013 - Expurgo
 *
 */
bool proCObterTipoRetornoContatoEx(long _idAtendimento,int *_idTipoRetornoContato)
{
    ULOG_START("proCObterTipoRetornoContato()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct VariaveisRetorno variaveisretorno;
        int *idTipoRetornoContato = _idTipoRetornoContato;
        long idAtendimento = _idAtendimento;

        short i_idContato;
        short i_idCanal;
        short i_idProcedencia;
        short i_idTipoCarteira;
        short i_idSegmentacao;
        short i_idGrupo;
        short i_idTipoRelacionamento;
        short i_idTipoPessoa;
        short i_idUFOperadora;
        short i_idTipoLinha;
        short i_idTipoRetornoContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
            NVL(IDCONTATO,-1) AS IDCONTATO,
            NVL(IDCANAL,-1) AS IDCANAL,
            NVL(IDPROCEDENCIA,-1) AS IDPROCEDENCIA,
            NVL(IDTIPOCARTEIRA,-1) AS IDTIPOCARTEIRA,
            NVL(IDSEGMENTACAO,-1) AS IDSEGMENTACAO,
            NVL(IDGRUPOABERTURA,-1) AS IDGRUPOABERTURA,
            NVL(IDTIPORELACIONAMENTO,-1) AS IDTIPORELACIONAMENTO,
            NVL(IDTIPOPESSOA,-1) AS IDTIPOPESSOA,
            NVL(IDUFOPERADORA,-1) AS IDUFOPERADORA,
            NVL(IDTIPOLINHA,-1) AS IDTIPOLINHA
        INTO
            :variaveisretorno.idContato:i_idContato,
            :variaveisretorno.idCanal:i_idCanal,
            :variaveisretorno.idProcedencia:i_idProcedencia,
            :variaveisretorno.idTipoCarteira:i_idTipoCarteira,
            :variaveisretorno.idSegmentacao:i_idSegmentacao,
            :variaveisretorno.idGrupo:i_idGrupo,
            :variaveisretorno.idTipoRelacionamento:i_idTipoRelacionamento,
            :variaveisretorno.idTipoPessoa:i_idTipoPessoa,
            :variaveisretorno.idUFOperadora:i_idUFOperadora,
            :variaveisretorno.idTipoLinha:i_idTipoLinha
        FROM
            FOHIST_OW.ATENDIMENTOPRIORIZACAO
        WHERE
            IDATENDIMENTO = :idAtendimento;

    if ( sqlca.sqlcode == 0 )
    {
        // Se ocorrer erro Oracle de mais de uma linha resultante da query abaixo (too many rows)
        // o erro não é da query e sim da configuração de administração que esta permitindo que 
        // um mesmo grupo de variáveis seja parametrizado para mais de um tipo de retorno de contato
        // para um mesmo contato. Veja se o serviço que faz esta parametrização não esta com falha
        // na consistência deste tipo de configuração repetida.
        //
        // Julho,2006 - Cassio.
        //
        EXEC SQL
            SELECT /*+ NO_CPU_COSTING */
                IDTIPORETORNOCONTATO
            INTO
                :*idTipoRetornoContato:i_idTipoRetornoContato
            FROM 
                ATENDIMENTO.ATDVARIAVEISRETORNOV01
            WHERE
                IDCONTATO = :variaveisretorno.idContato
            AND IDGRUPO = :variaveisretorno.idGrupo
            AND IDPROCEDENCIA = :variaveisretorno.idProcedencia
            AND IDSEGMENTACAO = :variaveisretorno.idSegmentacao
            AND IDCANAL = :variaveisretorno.idCanal
            AND IDTIPOCARTEIRA = :variaveisretorno.idTipoCarteira
            AND IDTIPOLINHA = :variaveisretorno.idTipoLinha
            AND IDTIPOPESSOA = :variaveisretorno.idTipoPessoa
            AND IDTIPORELACIONAMENTO = :variaveisretorno.idTipoRelacionamento
            AND IDUFOPERADORA = :variaveisretorno.idUFOperadora;

        // Esta operação é chamada somente para aqueles processos em que o cliente/usuário/prospect
        // solicitou retorno, assim se o contato estiver configurado para SEM RETORNO é assumido
        // por default RETORNO POR GRUPO BKO.
        // Se o tipo de retorno do contato não for encontrado, o valor default fica
        // RETORNO POR GRUPO BKO.
        // Estas definições se encontram no DES V2.3 para a incidência 3273 de homologação VIVO
        // Julho de 2006, Cassio.
        if ( sqlca.sqlcode == 1403 || *idTipoRetornoContato == TP_RET_SEM_RET_ONLINE )
        {
            *idTipoRetornoContato = TP_RET_COM_RET_GRP_BKO;
        }
    }
    else
    {
        ULOGW(resultadoNaoEncontradoSql());
        *idTipoRetornoContato = -1;
    }

    ULOG_END("proCObterTipoRetornoContato()");

    return true;
}



int proCObtemWFTipoRetornoContatoAtual(long _idAtendimento)
{
    ULOG_START( "proCObtemWFTipoRetornoContatoAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = _idAtendimento;
        int idTipoRetornoContato;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );

    EXEC SQL
        SELECT
            IDTIPORETORNOCONTATO
        INTO
            :idTipoRetornoContato
        FROM
            ATENDIMENTO.ATENDIMENTO
        WHERE
            IDATENDIMENTO = :idAtendimento;

    if ( 0 == sqlca.sqlcode )
    {
        ULOG( "Processo %ld nao encontrado",idAtendimento );
    }

    ULOG_END( "proCObtemWFTipoRetornoContatoAtual()" );

    return 0 == sqlca.sqlcode ? idTipoRetornoContato : -1;
}

bool proCObtemWFReaberturaAtendimento( long idAtendimento,XMLGen *saida,DetReabertura *detReabertura )
{
    ULOG_START( "proCObtemWFReaberturaAtendimento()" );
  
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  qtDiasMax;
        long idatendimento = idAtendimento;
        VARCHAR idTipoReaberturaProcesso[21];
        VARCHAR nmTipoReaberturaProcesso[256];
        VARCHAR idAtendimentoProtocolo[39];

        short i_idTipoReaberturaProcesso = -1;
        short i_idAtendimentoProtocolo = -1;
        short i_nmTipoReaberturaProcesso=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );

    // ========================================================================
    // Remodelagem de ATENDIMENTO.ATENDIMENTO - Fev/2007 - Cassio
    // Este código desativou o uso da view ATENDIMENTO.ATENDIMENTOREABERTURAV01
    // pois a mesma era usada somente neste ponto no sistema.
    //
    //SELECT 
    //    idTipoReaberturaProcesso, 
    //    nmTipoReaberturaProcesso
    //INTO
    //    :idTipoReaberturaProcesso,
    //    :nmTipoReaberturaProcesso:i_nmTipoReaberturaProcesso
    //FROM   
    //    Atendimento.AtendimentoReaberturaV01
    //WHERE  
    //    idAtendimento = :idatendimento
    //AND ROWNUM < 2;
    //
    // ========================================================================
    EXEC SQL
        SELECT 
            MAX(QTDIAS)
        INTO
            :qtDiasMax
        FROM 
            APOIO.TIPOREABERTURAPROCESSO;

    ULOG("idAtendimento=%d",idatendimento);

    if ( 0 == sqlca.sqlcode )
    {
        ULOG("qtDiasMax=%d",qtDiasMax);

        EXEC SQL
            SELECT
                 TEMP.IDTIPOREABERTURAPROCESSO
                ,TEMP.NMTIPOREABERTURAPROCESSO
			    ,TEMP.IDATENDIMENTOPROTOCOLO
            INTO
                :idTipoReaberturaProcesso:i_idTipoReaberturaProcesso,
                :nmTipoReaberturaProcesso:i_nmTipoReaberturaProcesso,
                :idAtendimentoProtocolo:i_idAtendimentoProtocolo
            FROM
                (
                SELECT
                     TIPOREABERTURAPROCESSO.IDTIPOREABERTURAPROCESSO
                    ,TIPOREABERTURAPROCESSO.NMTIPOREABERTURAPROCESSO
                    ,TIPOREABERTURAPROCESSO.QTDIAS
                    ,ATENDIMENTO.DTFECHAMENTO
                    ,ATENDIMENTO.IDATENDIMENTOPROTOCOLO
                    ,TRUNC(SYSDATE - NVL(ATENDIMENTO.DTFECHAMENTO,SYSDATE+1)) AS TPFECHADO
                FROM
                     ATENDIMENTO.ATENDIMENTO ATENDIMENTO
                    ,APOIO.TIPOREABERTURAPROCESSO TIPOREABERTURAPROCESSO
                WHERE
                    ATENDIMENTO.IDATENDIMENTO = :idatendimento 
                ) TEMP
            WHERE
                TEMP.QTDIAS >= (SELECT (CASE WHEN TEMP.TPFECHADO >= :qtDiasMax THEN :qtDiasMax ELSE TEMP.TPFECHADO END) FROM DUAL)
            AND ROWNUM < 2;

        if (sqlca.sqlcode == 0 && i_nmTipoReaberturaProcesso >= 0)
        {
            CONVIND(idTipoReaberturaProcesso, i_idTipoReaberturaProcesso);
            CONVIND(nmTipoReaberturaProcesso, i_nmTipoReaberturaProcesso);
            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);

            if ( saida )
            {
                saida->createTag( "AtendimentoSituacaoVO" );
                    saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
                    saida->addItem("idAtendimento" , idatendimento);
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("idTipoReaberturaProcesso" , (char*)idTipoReaberturaProcesso.arr);
                    saida->addItem("nmTipo",(char *)nmTipoReaberturaProcesso.arr);
                saida->closeTag();
            }

            if ( detReabertura )
            {
                strncpy(detReabertura->idTipoReaberturaProcesso,(char*)idTipoReaberturaProcesso.arr,sizeof(detReabertura->idTipoReaberturaProcesso)-1);
                strncpy(detReabertura->nmTipo,(char*)nmTipoReaberturaProcesso.arr,sizeof(detReabertura->nmTipo)-1);
            }

            ULOG("idAtendimentoProtocolo='%s'",(char*)idAtendimentoProtocolo.arr);
            ULOG("idTipoReaberturaProcesso='%s'",(char*)idTipoReaberturaProcesso.arr);
            ULOG("nmTipo='%s'",(char*)nmTipoReaberturaProcesso.arr);
        }
    } // if ( 0 == sqlca.sqlcode )
    else
    {
        ULOGW("Quantidade de dias máximo não encontrado");

        if ( saida )
        {
            saida->createTag( "AtendimentoSituacaoVO" );
                saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento" , idatendimento);
                saida->addItem("nrProtocolo","");
                saida->addItem("idTipoReaberturaProcesso" ,"");
                saida->addItem("nmTipo","");
            saida->closeTag();
        }

        if ( detReabertura )
        {
            strcpy(detReabertura->idTipoReaberturaProcesso,"");
            strcpy(detReabertura->nmTipo,"");
        }
    }

    ULOG_END( "proCObtemWFReaberturaAtendimento()" );

    return true;
}

bool proCObtemWFContasCliente( int idPessoaDePara , int sIdConta, int sIdTipoLinha, int sIdUfOperadora, XMLGen *saida )
{
    ULOG_START( "proCObtemWFContasCliente()" );

    ULOG("proCObtemWFContasCliente(%d,%d,%d,%d)",idPessoaDePara, sIdConta, sIdTipoLinha, sIdUfOperadora );

    struct sqlca sqlca;

    int numMaxRegistros = 0;
    bool contaEncontrada = false;

    EXEC SQL BEGIN DECLARE SECTION;
        int     idpessoadepara = idPessoaDePara;
        int     idTipoLinha = sIdTipoLinha;
        int     idUfOperadora = sIdUfOperadora;
        int     idConta;
        VARCHAR cdConta[256];
        VARCHAR cdDigitoConta[256];

        short   i_cdConta;
        short   i_cdDigitoConta;
    EXEC SQL END DECLARE SECTION;
   
    /*
    EXEC SQL DECLARE crsConsultaAtd CURSOR FOR 
        SELECT DISTINCT
            c.idConta,
            c.cdConta,
            c.cdDigitoConta
        FROM
            customer.PessoaConta pc,
            customer.conta c,
            customer.LinhaConta lc,
            linha.LinhaTelefonica lt,
            linha.linhabase lb,
            apoio.arearegistro ar
        WHERE
            pc.idconta = c.idconta
            and lc.idconta = c.idConta
            and lc.idLinhaTelefonica = lt.idLinhaTelefonica
            and pc.idPessoaDePara = :idpessoadepara
            and pc.idtiporelacionamento = 2
            and lt.idtipolinha = :idTipoLinha
            and lb.idlinhabase = lt.idlinhabase
            and lb.idarearegistro = ar.idarearegistro
            and ar.idufoperadora = :idUfOperadora
            AND rownum < 11;
    */

    EXEC SQL DECLARE crsConsultaAtd CURSOR FOR 
        SELECT 
            c.idConta,
            c.cdConta,
            c.cdDigitoConta
        FROM
            customer.PessoaConta pc,
            customer.conta c
        WHERE
            pc.idconta = c.idconta
            and pc.idPessoaDePara = :idpessoadepara
            and pc.idtiporelacionamento = 2
            AND rownum < 11;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO break;
    EXEC SQL OPEN crsConsultaAtd;
 
    saida->createTag("Contas" );

    while (true)
    {
        EXEC SQL FETCH crsConsultaAtd INTO  
                                        :idConta, 
                                        :cdConta:i_cdConta, 
                                        :cdDigitoConta:i_cdDigitoConta;

        CONVIND(cdConta, i_cdConta)
        CONVIND(cdDigitoConta, i_cdDigitoConta)

        if(idConta == sIdConta)
            contaEncontrada = true;

        numMaxRegistros++;

        if( numMaxRegistros >= 10 )
        {
            if( !contaEncontrada )
            {
                if( !proCGetDadosConta( sIdConta, idPessoaDePara, saida ) )
                {
                    saida->createTag( "ContaVO" );
                        saida->addItem( "idConta" , idConta );
                        saida->addItem( "nrConta",(char*)cdConta.arr );
                        saida->addItem( "nrDigitoConta",(char*)cdDigitoConta.arr );
                    saida->closeTag();
                }
            }
            else
            {
                saida->createTag( "ContaVO" );
                    saida->addItem( "idConta" , idConta );
                    saida->addItem( "nrConta",(char*)cdConta.arr );
                    saida->addItem( "nrDigitoConta",(char*)cdDigitoConta.arr );
                saida->closeTag();
            }
        }
        else
        {
            saida->createTag( "ContaVO" );
                saida->addItem( "idConta" , idConta );
                saida->addItem( "nrConta",(char*)cdConta.arr );
                saida->addItem( "nrDigitoConta",(char*)cdDigitoConta.arr );
            saida->closeTag();
        }
    }
    saida->closeTag();

    EXEC SQL CLOSE crsConsultaAtd;

    ULOG_END( "proCObtemWFContasCliente()" );

    return true;
}

bool proCObtemWFContasCliente( int idPessoaDePara , XMLGen *saida )
{
    ULOG_START( "proCObtemWFContasCliente()" );

    ULOG("idPessoaDePara (%d)", idPessoaDePara);

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int     idpessoadepara = idPessoaDePara;
        int     idConta;
        VARCHAR cdConta[256];
        VARCHAR cdDigitoConta[256];

        short   i_cdConta;
        short   i_cdDigitoConta;
    EXEC SQL END DECLARE SECTION;
   
    EXEC SQL DECLARE crsConsulta CURSOR FOR 
        SELECT
            idConta,
            cdConta,
            cdDigitoConta
        FROM
            customer.PessoaContaLinhaV01
        WHERE
            idPessoaDePara = :idpessoadepara
            AND rownum < 11;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO break;
    EXEC SQL OPEN crsConsulta;
 
    saida->createTag("Contas" );

    while (true)
    {
        EXEC SQL FETCH crsConsulta INTO  
                                        :idConta, 
                                        :cdConta:i_cdConta, 
                                        :cdDigitoConta:i_cdDigitoConta;

        CONVIND(cdConta, i_cdConta)
        CONVIND(cdDigitoConta, i_cdDigitoConta)

        saida->createTag( "ContaVO" );
            saida->addItem( "idConta" , idConta );
            saida->addItem( "nrConta",(char*)cdConta.arr );
            saida->addItem( "nrDigitoConta",(char*)cdDigitoConta.arr );
        saida->closeTag();

    }
    saida->closeTag();

    EXEC SQL CLOSE crsConsulta;

    ULOG_END( "proCObtemWFContasCliente()" );
    return true;

}

bool proCObtemWFDetalheAtendimento( long _idAtendimento
                                  , DetalheAtendimento *_pDadosSaida
                                  , StatusDetalheAtendimento *_pStatusSaida )
{
    ULOG_START( "proCObtemWFDetalheAtendimento() (2)" );

    ULOG("idAtendimento (%ld)",_idAtendimento);

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;

        struct
        {
            VARCHAR dataAbertura[256];
            int idContato;
            VARCHAR dataPrazoFinalInterno[256];
            int idTipoRetornoContato;
            int idCanal;
            VARCHAR nmCanal[256];
            int idProcedencia;
            VARCHAR dsProcedencia[256];
            int idSegmentacao;
            VARCHAR dsSegmentacao[256];
            //int idDiscador; // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
            int idFase;
            long idPessoaUsuarioAbertura;
            VARCHAR nmLoginUsuario[255];
            int idGrupoAbertura;
            VARCHAR nmGrupoAbertura[255];
            int idGrupoAtual;
            long idPessoaUsuarioAtual;
            int idTipoCarteira;
            VARCHAR dsTipoCarteira[256];
            int nrNivel;
            int qtInsistencia;
            int idAgrEstadoTProc;
            int idEstado;
            VARCHAR dsEstado[256];
            int idSubEstado;
            VARCHAR dsSubEstado[256];
            VARCHAR cdConta[256];
            VARCHAR nrLinha[256];
            long idAtendimentoBaixaHistorico;
            VARCHAR idAtendimentoOrigem[65];
            VARCHAR dataFechamento[256];
            int idGrupoAndamento;
            int inCri;
            VARCHAR dtPrazoFinalCPrevio[256];
            int idTipoAbertura;
            long idPessoa;
            int idTipoRelacionamento;
            int idUFOperadora;
            int idUsuarioAlteracao;
            VARCHAR idAtendimentoProtocolo[39];
            long idPessoaLinhaHistorico;
            int idLinhaTelefonica;
            VARCHAR sgOperadoraSolicitante[31];
            VARCHAR nrProtocoloPortabilidade[64];
            VARCHAR dtJanelaPortout[32];
            VARCHAR sgTipoPortabilidade[16];
            VARCHAR idTipoLinha[5];
            VARCHAR sgRegraEncaminhamento[4];
            VARCHAR sgFluxoAtendimento[4];
            VARCHAR idPerfilConsultorAtd[11];
            VARCHAR idFornecedorConsultorAtd[11];
            VARCHAR idSiteConsultorAtd[11];
            int idPessoaUsuarioMC;
            int idGrupoMC;
        } oDadosSaida;

        struct
        {
            short i_dataAbertura;
            short i_idContato;
            short i_dataPrazoFinalInterno;
            short i_idTipoRetornoContato;
            short i_idCanal;
            short i_nmCanal;
            short i_idProcedencia;
            short i_dsProcedencia;
            short i_idSegmentacao;
            short i_dsSegmentacao;
            //short i_idDiscador;
            short i_idFase;
            short i_idPessoaUsuarioAbertura;
            short i_nmLoginUsuario;
            short i_idGrupoAbertura;
            short i_nmGrupoAbertura;
            short i_idGrupoAtual;
            short i_idPessoaUsuarioAtual;
            short i_idTipoCarteira;
            short i_dsTipoCarteira;
            short i_nrNivel;
            short i_qtInsistencia;
            short i_idAgrEstadoTProc;
            short i_idEstado;
            short i_dsEstado;
            short i_idSubEstado;
            short i_dsSubEstado;
            short i_cdConta;
            short i_nrLinha;
            short i_idAtendimentoBaixaHistorico;
            short i_idAtendimentoOrigem;
            short i_dataFechamento;
            short i_idGrupoAndamento;
            short i_inCri;
            short i_dtPrazoFinalCPrevio;
            short i_idTipoAbertura;
            short i_idPessoa;
            short i_idTipoRelacionamento;
            short i_idUFOperadora;
            short i_idUsuarioAlteracao;
            short i_idAtendimentoProtocolo;
            short i_idPessoaLinhaHistorico;
            short i_idLinhaTelefonica;
            short i_sgOperadoraSolicitante;
            short i_nrProtocoloPortabilidade;
            short i_dtJanelaPortout;
            short i_sgTipoPortabilidade;
            short i_idTipoLinha;
            short i_sgRegraEncaminhamento;
            short i_sgFluxoAtendimento;
            short i_idPerfilConsultorAtd;
            short i_idFornecedorConsultorAtd;
            short i_idSiteConsultorAtd;
            short i_idPessoaUsuarioMC;
            short i_idGrupoMC;
        } oStatusSaida;

        DetalheAtendimento *pDadosSaida = _pDadosSaida;
        StatusDetalheAtendimento *pStatusSaida = _pStatusSaida;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&oDadosSaida,0,sizeof(DetalheAtendimento));
    memset(&oStatusSaida,-1,sizeof(StatusDetalheAtendimento));

    // A sub query abaixo foi necessária pois com a entrada da OS de protocolos anatel
    // existe o risco de numeros de protocolos conflitarem com numeros de atendimento
    // e neste caso será dada preferência ao retorno do processo do SMP.
    EXEC SQL
        SELECT
            DATAABERTURA,
            IDCONTATO,
            DATAPRAZOFINALINTERNO,
            IDTIPORETORNOCONTATO,
            IDCANAL,
            NMCANAL,
            IDPROCEDENCIA,
            DSPROCEDENCIA,
            IDSEGMENTACAO,
            DSSEGMENTACAO,
            -- //IDDISCADOR,
            IDFASE,
            IDPESSOAUSUARIOABERTURA,
            NMLOGINUSUARIO,
            IDGRUPOABERTURA,
            NMGRUPO,
            IDGRUPOATUAL,
            IDPESSOAUSUARIOATUAL,
            IDTIPOCARTEIRA, 
            DSTIPOCARTEIRA,
            NRNIVEL,
            QTINSISTENCIA,
            IDAGRUPAMENTOESTADOTPPROC,
            IDESTADO,
            DSESTADO,
            IDSUBESTADO,
            DSSUBESTADO,
            CDCONTA,
            NRLINHA,
            IDATENDIMENTOBAIXAHISTORICO,
            trim(to_char(IDATENDIMENTOORIGEM,'999999999999999999999999999999')),
            DATAFECHAMENTO,
            IDGRUPOANDAMENTO,
            INCRI,
            DTPRAZOFINALCPREVIO,
            IDTIPOABERTURA,
            IDPESSOA,
            IDTIPORELACIONAMENTO,
            IDUFOPERADORA,
            IDUSUARIOALTERACAO,
            IDATENDIMENTOPROTOCOLO,
            IDPESSOALINHAHISTORICO,
            IDLINHATELEFONICA,
            SGOPERADORASOLICITANTE,
            NRPROTOCOLOPORTABILIDADE,
            DTJANELAPORTOUT,
            SGTIPOPORTABILIDADE,
            IDTIPOLINHA,
            SGREGRAENCAMINHAMENTO,
            SGFLUXOATENDIMENTO,
            IDPERFILCONSULTORATD,
            IDFORNECEDORCONSULTORATD,
            IDSITECONSULTORATD,
            IDPESSOAUSUARIOMC,
            IDGRUPOMC
        INTO
            :oDadosSaida:oStatusSaida
        FROM
        (
            SELECT 
                ATD.DATAABERTURA,
                ATD.IDCONTATO,
                ATD.DATAPRAZOFINALINTERNO,
                ATD.IDTIPORETORNOCONTATO,
                ATD.IDCANAL,
                ATD.NMCANAL,
                ATD.IDPROCEDENCIA,
                ATD.DSPROCEDENCIA,
                ATD.IDSEGMENTACAO,
                ATD.DSSEGMENTACAO,
                -- //ATD.IDDISCADOR,
                ATD.IDFASE,
                ATD.IDPESSOAUSUARIOABERTURA,
                ATD.NMLOGINUSUARIO,
                ATD.IDGRUPOABERTURA,
                ATD.NMGRUPO,
                ATD.IDGRUPOATUAL,
                ATD.IDPESSOAUSUARIOATUAL,
                ATD.IDTIPOCARTEIRA, 
                ATD.DSTIPOCARTEIRA,
                ATD.NRNIVEL,
                ATD.QTINSISTENCIA,
                ATD.IDAGRUPAMENTOESTADOTPPROC,
                ATD.IDESTADO,
                ATD.DSESTADO,
                ATD.IDSUBESTADO,
                ATD.DSSUBESTADO,
                ATD.CDCONTA,
                ATD.NRLINHA,
                ATD.IDATENDIMENTOBAIXAHISTORICO,
                ATD.IDATENDIMENTOORIGEM,
                ATD.DATAFECHAMENTO,
                ATD.IDGRUPOANDAMENTO,
                ATD.INCRI,
                ATD.DTPRAZOFINALCPREVIO,
                ATD.IDTIPOABERTURA,
                PDP.IDPESSOA,
                AP.IDTIPORELACIONAMENTO,
                ATD.IDUFOPERADORA,
                ATD.IDUSUARIOALTERACAO,
                ATD.IDATENDIMENTOPROTOCOLO,
                ATD.INSMP,
                ATD.IDPESSOALINHAHISTORICO,
                ATD.IDLINHATELEFONICA,
                ATD.SGOPERADORASOLICITANTE,
                ATD.NRPROTOCOLOPORTABILIDADE,
                ATD.DTJANELAPORTOUT,
                ATD.SGTIPOPORTABILIDADE,
                ATD.IDTIPOLINHA,
                ATD.SGREGRAENCAMINHAMENTO,
                ATD.SGFLUXOATENDIMENTO,
                ATD.IDPERFILCONSULTORATD,
                ATD.IDFORNECEDORCONSULTORATD,
                ATD.IDSITECONSULTORATD,
                ATD.IDPESSOAUSUARIOMC,
                ATD.IDGRUPOMC
            FROM
                ATENDIMENTO.ATENDIMENTODETALHEV01 ATD,
                ATENDIMENTO.ATENDIMENTOPESSOA AP,
                CUSTOMER.PESSOADEPARA PDP
            WHERE
                ATD.IDATENDIMENTO = :idAtendimento
            AND AP.IDATENDIMENTO = ATD.IDATENDIMENTO
            AND AP.IDPESSOADEPARA = PDP.IDPESSOADEPARA
            AND AP.IDTIPORELACIONAMENTO IN (2,3,6,7)
            ORDER BY
                ATD.INSMP DESC
        )
        WHERE ROWNUM < 2;

    if ( sqlca.sqlcode == 0 )
    {
        ULOG("idTipoRetornoContato=%d",oDadosSaida.idTipoRetornoContato);

        if ( oDadosSaida.idTipoRetornoContato > TP_RET_SEM_RETORNO && 
             oDadosSaida.idTipoRetornoContato < TP_RET_COM_RET_GRP_CRI )
        { // se o processo foi criado para ir para grupo de retorno, então determina em
          // tempo real o tipo de retorno (vide DES BUG_3271_DES - Atualizada Gestão de Processos - Fase Retorno v.2.3.doc)
            //int idUFOperadora;
            int idTipoRetornoContato;
            proCObterTipoRetornoContato(idAtendimento,&idTipoRetornoContato);

            if ( -1 != idTipoRetornoContato )
            { // se processo em tratamento, assume o tipo do retorno do contato definido em tempo real
                //oDadosSaida.idUFOperadora = idUFOperadora;
                oDadosSaida.idTipoRetornoContato = idTipoRetornoContato;
            }
        }

        CONVIND(oDadosSaida.dataAbertura, oStatusSaida.i_dataAbertura);
        CONVIND(oDadosSaida.dataPrazoFinalInterno, oStatusSaida.i_dataPrazoFinalInterno);
        CONVIND(oDadosSaida.nmCanal, oStatusSaida.i_nmCanal);
        CONVIND(oDadosSaida.dsProcedencia, oStatusSaida.i_dsProcedencia);
        CONVIND(oDadosSaida.dsSegmentacao, oStatusSaida.i_dsSegmentacao);
        CONVIND(oDadosSaida.nmLoginUsuario, oStatusSaida.i_nmLoginUsuario);
        CONVIND(oDadosSaida.nmGrupoAbertura, oStatusSaida.i_nmGrupoAbertura);
        CONVIND(oDadosSaida.dsTipoCarteira, oStatusSaida.i_dsTipoCarteira);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.i_dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.i_dsSubEstado);
        CONVIND(oDadosSaida.cdConta, oStatusSaida.i_cdConta);
        CONVIND(oDadosSaida.nrLinha, oStatusSaida.i_nrLinha);
        CONVIND(oDadosSaida.dataFechamento, oStatusSaida.i_dataFechamento);
        CONVIND(oDadosSaida.dtPrazoFinalCPrevio, oStatusSaida.i_dtPrazoFinalCPrevio);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.i_idAtendimentoProtocolo);
        
        CONVIND(oDadosSaida.idAtendimentoOrigem, oStatusSaida.i_idAtendimentoOrigem );
        
        CONVIND(oDadosSaida.nrProtocoloPortabilidade, oStatusSaida.i_nrProtocoloPortabilidade);
        CONVIND(oDadosSaida.dtJanelaPortout, oStatusSaida.i_dtJanelaPortout);
        CONVIND(oDadosSaida.sgOperadoraSolicitante, oStatusSaida.i_sgOperadoraSolicitante);
        CONVIND(oDadosSaida.sgTipoPortabilidade, oStatusSaida.i_sgTipoPortabilidade);
        CONVIND(oDadosSaida.idTipoLinha, oStatusSaida.i_idTipoLinha);
        CONVIND(oDadosSaida.sgRegraEncaminhamento, oStatusSaida.i_sgRegraEncaminhamento);
        CONVIND(oDadosSaida.sgFluxoAtendimento, oStatusSaida.i_sgFluxoAtendimento);
        CONVIND(oDadosSaida.idPerfilConsultorAtd, oStatusSaida.i_idPerfilConsultorAtd);
        CONVIND(oDadosSaida.idFornecedorConsultorAtd, oStatusSaida.i_idFornecedorConsultorAtd);
        CONVIND(oDadosSaida.idSiteConsultorAtd, oStatusSaida.i_idSiteConsultorAtd);

        strcpy(pDadosSaida->dataAbertura,(char*)oDadosSaida.dataAbertura.arr);
        strcpy(pDadosSaida->dataPrazoFinalInterno,(char*)oDadosSaida.dataPrazoFinalInterno.arr);
        strcpy(pDadosSaida->nmCanal,(char*)oDadosSaida.nmCanal.arr);
        strcpy(pDadosSaida->dsProcedencia,(char*)oDadosSaida.dsProcedencia.arr);
        strcpy(pDadosSaida->dsSegmentacao,(char*)oDadosSaida.dsSegmentacao.arr);
        strcpy(pDadosSaida->nmLoginUsuario,(char*)oDadosSaida.nmLoginUsuario.arr);
        strcpy(pDadosSaida->nmGrupoAbertura,(char*)oDadosSaida.nmGrupoAbertura.arr);
        strcpy(pDadosSaida->dsTipoCarteira,(char*)oDadosSaida.dsTipoCarteira.arr);
        strcpy(pDadosSaida->dsEstado,(char*)oDadosSaida.dsEstado.arr);
        strcpy(pDadosSaida->dsSubEstado,(char*)oDadosSaida.dsSubEstado.arr);
        strcpy(pDadosSaida->cdConta,(char*)oDadosSaida.cdConta.arr);
        strcpy(pDadosSaida->nrLinha,(char*)oDadosSaida.nrLinha.arr);
        strcpy(pDadosSaida->dataFechamento,(char*)oDadosSaida.dataFechamento.arr);
        strcpy(pDadosSaida->dtPrazoFinalCPrevio,(char*)oDadosSaida.dtPrazoFinalCPrevio.arr);
        strcpy(pDadosSaida->idAtendimentoProtocolo,(char*)oDadosSaida.idAtendimentoProtocolo.arr);
        strcpy(pDadosSaida->nrProtocoloPortabilidade,(char*)oDadosSaida.nrProtocoloPortabilidade.arr);
        strcpy(pDadosSaida->dtJanelaPortout,(char*)oDadosSaida.dtJanelaPortout.arr);
        strcpy(pDadosSaida->sgTipoPortabilidade,(char*)oDadosSaida.sgTipoPortabilidade.arr);
        strcpy(pDadosSaida->sgOperadoraSolicitante,(char*)oDadosSaida.sgOperadoraSolicitante.arr);
        strcpy(pDadosSaida->idTipoLinha,(char*)oDadosSaida.idTipoLinha.arr);
        strcpy(pDadosSaida->sgRegraEncaminhamento,(char*)oDadosSaida.sgRegraEncaminhamento.arr);
        strcpy(pDadosSaida->sgFluxoAtendimento,(char*)oDadosSaida.sgFluxoAtendimento.arr);
        strcpy(pDadosSaida->idPerfilConsultorAtd,(char*)oDadosSaida.idPerfilConsultorAtd.arr);
        strcpy(pDadosSaida->idFornecedorConsultorAtd,(char*)oDadosSaida.idFornecedorConsultorAtd.arr);
        strcpy(pDadosSaida->idSiteConsultorAtd,(char*)oDadosSaida.idSiteConsultorAtd.arr);

        pDadosSaida->idContato = oDadosSaida.idContato;
        pDadosSaida->idTipoRetornoContato = oDadosSaida.idTipoRetornoContato;
        pDadosSaida->idCanal = oDadosSaida.idCanal;
        pDadosSaida->idProcedencia = oDadosSaida.idProcedencia;
        pDadosSaida->idSegmentacao = oDadosSaida.idSegmentacao;
        //pDadosSaida->idDiscador = oDadosSaida.idDiscador; // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
        pDadosSaida->idFase = oDadosSaida.idFase;
        pDadosSaida->idPessoaUsuarioAbertura = oDadosSaida.idPessoaUsuarioAbertura;
        pDadosSaida->idPessoaUsuarioMC = oDadosSaida.idPessoaUsuarioMC;
        pDadosSaida->idGrupoMC = oDadosSaida.idGrupoMC;
        pDadosSaida->idGrupoAbertura = oDadosSaida.idGrupoAbertura;
        pDadosSaida->idGrupoAtual= oDadosSaida.idGrupoAtual;
        pDadosSaida->idPessoaUsuarioAtual= oDadosSaida.idPessoaUsuarioAtual;
        pDadosSaida->idTipoCarteira = oDadosSaida.idTipoCarteira;
        pDadosSaida->nrNivel = oDadosSaida.nrNivel;
        pDadosSaida->qtInsistencia = oDadosSaida.qtInsistencia;
        pDadosSaida->idAgrEstadoTProc = oDadosSaida.idAgrEstadoTProc;
        pDadosSaida->idEstado = oDadosSaida.idEstado;
        pDadosSaida->idSubEstado = oDadosSaida.idSubEstado;
        pDadosSaida->idAtendimentoBaixaHistorico = oDadosSaida.idAtendimentoBaixaHistorico;
        pDadosSaida->idAtendimentoOrigem = atol((char*)oDadosSaida.idAtendimentoOrigem.arr);
        
        _pDadosSaida->idAtendimentoOrigem = atol((char*)oDadosSaida.idAtendimentoOrigem.arr);
        
        pDadosSaida->idGrupoAndamento = oDadosSaida.idGrupoAndamento;
        pDadosSaida->inCri = oDadosSaida.inCri;
        pDadosSaida->idTipoAbertura = oDadosSaida.idTipoAbertura;
        pDadosSaida->idPessoa = oDadosSaida.idPessoa;
        pDadosSaida->idTipoRelacionamento = oDadosSaida.idTipoRelacionamento;
        pDadosSaida->idUFOperadora = oDadosSaida.idUFOperadora;
        pDadosSaida->idPessoaLinhaHistorico = oDadosSaida.idPessoaLinhaHistorico;
        pDadosSaida->idLinhaTelefonica = oDadosSaida.idLinhaTelefonica;

        ULOG("idContato=%d",pDadosSaida->idContato);
        ULOG("idTipoRetornoContato=%d",pDadosSaida->idTipoRetornoContato);
        ULOG("idCanal=%d",pDadosSaida->idCanal);
        ULOG("idProcedencia=%d",pDadosSaida->idProcedencia);
        ULOG("idSegmentacao=%d",pDadosSaida->idSegmentacao);
        ULOG("idFase=%d",pDadosSaida->idFase);
        ULOG("idPessoaUsuarioAbertura=%ld",pDadosSaida->idPessoaUsuarioAbertura);
        ULOG("idGrupoAbertura=%d",pDadosSaida->idGrupoAbertura);
        ULOG("idTipoCarteira=%d",pDadosSaida->idTipoCarteira);
        ULOG("nrNivel=%d",pDadosSaida->nrNivel);
        ULOG("qtInsistencia=%d",pDadosSaida->qtInsistencia);
        ULOG("idAgrEstadoTProc=%d",pDadosSaida->idAgrEstadoTProc);
        ULOG("idEstado=%d",pDadosSaida->idEstado);
        ULOG("idSubEstado=%d",pDadosSaida->idSubEstado);
        ULOG("idAtendimentoBaixaHistorico=%ld",pDadosSaida->idAtendimentoBaixaHistorico);
        //ULOG("idAtendimentoOrigem=%ld",pDadosSaida->idAtendimentoOrigem);
        
        ULOG("idAtendimentoOrigem=%ld",_pDadosSaida->idAtendimentoOrigem);
        
        ULOG("idGrupoAndamento=%d",pDadosSaida->idGrupoAndamento);
        ULOG("inCri=%d",pDadosSaida->inCri);
        ULOG("idTipoAbertura=%d",pDadosSaida->idTipoAbertura);
        ULOG("idPessoa=%ld",pDadosSaida->idPessoa);
        ULOG("idTipoRelacionamento=%d",pDadosSaida->idTipoRelacionamento);
        ULOG("idUFOperadora=%d",pDadosSaida->idUFOperadora);
        ULOG("idAtendimentoProtocolo=%s",pDadosSaida->idAtendimentoProtocolo);
        ULOG("idPessoaLinhaHistorico=%ld",pDadosSaida->idPessoaLinhaHistorico);
        ULOG("idLinhaTelefonica=%d",pDadosSaida->idLinhaTelefonica);
        ULOG("sgOperadoraSolicitante=%s",pDadosSaida->sgOperadoraSolicitante);
        ULOG("nrProtocoloPortabilidade=%s",pDadosSaida->nrProtocoloPortabilidade);
        ULOG("dtJanelaPortout=%s",pDadosSaida->dtJanelaPortout);
        ULOG("sgTipoPortabilidade=%s",pDadosSaida->sgTipoPortabilidade);
        ULOG("idTipoLinha=%s",pDadosSaida->idTipoLinha);
        ULOG("sgRegraEncaminhamento=%s",pDadosSaida->sgRegraEncaminhamento);
        ULOG("sgFluxoAtendimento=%s",pDadosSaida->sgFluxoAtendimento);
        ULOG("idPerfilConsultorAtd=%s",pDadosSaida->idPerfilConsultorAtd);
        ULOG("idFornecedorConsultorAtd=%s",pDadosSaida->idFornecedorConsultorAtd);
        ULOG("idSiteConsultorAtd=%s",pDadosSaida->idSiteConsultorAtd);
        ULOG("idPessoaUsuarioMC=%d",pDadosSaida->idPessoaUsuarioMC);
        ULOG("idGrupoMC=%d",pDadosSaida->idGrupoMC);
    }
    else
    {
        ULOG("proCObtemWFDetalheAtendimento()::Processo não encontrado.");
    }

    ULOG_END( "proCObtemWFDetalheAtendimento() (2)" );

    return sqlca.sqlcode == 0 ? true : false;
}



bool proCObtemWFDetalheAtendimento( long _idAtendimento
                                  , DetalheAtendimento *_pDadosSaida
                                  , StatusDetalheAtendimento *_pStatusSaida
                                  , char * c_idAtendimentoOrigem )
{
    ULOG_START( "proCObtemWFDetalheAtendimento() (3)" );

    ULOG("idAtendimento (%ld)",_idAtendimento);

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;

        struct
        {
            VARCHAR dataAbertura[256];
            int idContato;
            VARCHAR dataPrazoFinalInterno[256];
            int idTipoRetornoContato;
            int idCanal;
            VARCHAR nmCanal[256];
            int idProcedencia;
            VARCHAR dsProcedencia[256];
            int idSegmentacao;
            VARCHAR dsSegmentacao[256];
            //int idDiscador; // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
            int idFase;
            long idPessoaUsuarioAbertura;
            VARCHAR nmLoginUsuario[255];
            int idGrupoAbertura;
            VARCHAR nmGrupoAbertura[255];
            int idGrupoAtual;
            long idPessoaUsuarioAtual;
            int idTipoCarteira;
            VARCHAR dsTipoCarteira[256];
            int nrNivel;
            int qtInsistencia;
            int idAgrEstadoTProc;
            int idEstado;
            VARCHAR dsEstado[256];
            int idSubEstado;
            VARCHAR dsSubEstado[256];
            VARCHAR cdConta[256];
            VARCHAR nrLinha[256];
            long idAtendimentoBaixaHistorico;
            VARCHAR idAtendimentoOrigem[65];
            VARCHAR dataFechamento[256];
            int idGrupoAndamento;
            int inCri;
            VARCHAR dtPrazoFinalCPrevio[256];
            int idTipoAbertura;
            long idPessoa;
            int idTipoRelacionamento;
            int idUFOperadora;
            int idUsuarioAlteracao;
            VARCHAR idAtendimentoProtocolo[39];
            long idPessoaLinhaHistorico;
            int idLinhaTelefonica;
            VARCHAR sgOperadoraSolicitante[31];
            VARCHAR nrProtocoloPortabilidade[64];
            VARCHAR dtJanelaPortout[32];
            VARCHAR sgTipoPortabilidade[16];
            VARCHAR idTipoLinha[5];
            VARCHAR sgRegraEncaminhamento[4];
            VARCHAR sgFluxoAtendimento[4];
            VARCHAR idPerfilConsultorAtd[11];
            VARCHAR idFornecedorConsultorAtd[11];
            VARCHAR idSiteConsultorAtd[11];
            int idPessoaUsuarioMC;
            int idGrupoMC;
        } oDadosSaida;


        struct
        {
            short i_dataAbertura;
            short i_idContato;
            short i_dataPrazoFinalInterno;
            short i_idTipoRetornoContato;
            short i_idCanal;
            short i_nmCanal;
            short i_idProcedencia;
            short i_dsProcedencia;
            short i_idSegmentacao;
            short i_dsSegmentacao;
            //short i_idDiscador;
            short i_idFase;
            short i_idPessoaUsuarioAbertura;
            short i_nmLoginUsuario;
            short i_idGrupoAbertura;
            short i_nmGrupoAbertura;
            short i_idGrupoAtual;
            short i_idPessoaUsuarioAtual;
            short i_idTipoCarteira;
            short i_dsTipoCarteira;
            short i_nrNivel;
            short i_qtInsistencia;
            short i_idAgrEstadoTProc;
            short i_idEstado;
            short i_dsEstado;
            short i_idSubEstado;
            short i_dsSubEstado;
            short i_cdConta;
            short i_nrLinha;
            short i_idAtendimentoBaixaHistorico;
            short i_idAtendimentoOrigem;
            short i_dataFechamento;
            short i_idGrupoAndamento;
            short i_inCri;
            short i_dtPrazoFinalCPrevio;
            short i_idTipoAbertura;
            short i_idPessoa;
            short i_idTipoRelacionamento;
            short i_idUFOperadora;
            short i_idUsuarioAlteracao;
            short i_idAtendimentoProtocolo;
            short i_idPessoaLinhaHistorico;
            short i_idLinhaTelefonica;
            short i_sgOperadoraSolicitante;
            short i_nrProtocoloPortabilidade;
            short i_dtJanelaPortout;
            short i_sgTipoPortabilidade;
            short i_idTipoLinha;
            short i_sgRegraEncaminhamento;
            short i_sgFluxoAtendimento;
            short i_idPerfilConsultorAtd;
            short i_idFornecedorConsultorAtd;
            short i_idSiteConsultorAtd;
            short i_idPessoaUsuarioMC;
            short i_idGrupoMC;
        } oStatusSaida;

        DetalheAtendimento *pDadosSaida = _pDadosSaida;
        StatusDetalheAtendimento *pStatusSaida = _pStatusSaida;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&oDadosSaida,0,sizeof(DetalheAtendimento));
    memset(&oStatusSaida,-1,sizeof(StatusDetalheAtendimento));

    // A sub query abaixo foi necessária pois com a entrada da OS de protocolos anatel
    // existe o risco de numeros de protocolos conflitarem com numeros de atendimento
    // e neste caso será dada preferência ao retorno do processo do SMP.
    EXEC SQL
        SELECT
            DATAABERTURA,
            IDCONTATO,
            DATAPRAZOFINALINTERNO,
            IDTIPORETORNOCONTATO,
            IDCANAL,
            NMCANAL,
            IDPROCEDENCIA,
            DSPROCEDENCIA,
            IDSEGMENTACAO,
            DSSEGMENTACAO,
            -- //IDDISCADOR,
            IDFASE,
            IDPESSOAUSUARIOABERTURA,
            NMLOGINUSUARIO,
            IDGRUPOABERTURA,
            NMGRUPO,
            IDGRUPOATUAL,
            IDPESSOAUSUARIOATUAL,
            IDTIPOCARTEIRA, 
            DSTIPOCARTEIRA,
            NRNIVEL,
            QTINSISTENCIA,
            IDAGRUPAMENTOESTADOTPPROC,
            IDESTADO,
            DSESTADO,
            IDSUBESTADO,
            DSSUBESTADO,
            CDCONTA,
            NRLINHA,
            IDATENDIMENTOBAIXAHISTORICO,
            trim(to_char(IDATENDIMENTOORIGEM,'999999999999999999999999999999')),
            DATAFECHAMENTO,
            IDGRUPOANDAMENTO,
            INCRI,
            DTPRAZOFINALCPREVIO,
            IDTIPOABERTURA,
            IDPESSOA,
            IDTIPORELACIONAMENTO,
            IDUFOPERADORA,
            IDUSUARIOALTERACAO,
            IDATENDIMENTOPROTOCOLO,
            IDPESSOALINHAHISTORICO,
            IDLINHATELEFONICA,
            SGOPERADORASOLICITANTE,
            NRPROTOCOLOPORTABILIDADE,
            DTJANELAPORTOUT,
            SGTIPOPORTABILIDADE,
            IDTIPOLINHA,
            SGREGRAENCAMINHAMENTO,
            SGFLUXOATENDIMENTO,
            IDPERFILCONSULTORATD,
            IDFORNECEDORCONSULTORATD,
            IDSITECONSULTORATD,
            IDPESSOAUSUARIOMC,
            IDGRUPOMC
        INTO
            :oDadosSaida:oStatusSaida
        FROM
        (
            SELECT 
                ATD.DATAABERTURA,
                ATD.IDCONTATO,
                ATD.DATAPRAZOFINALINTERNO,
                ATD.IDTIPORETORNOCONTATO,
                ATD.IDCANAL,
                ATD.NMCANAL,
                ATD.IDPROCEDENCIA,
                ATD.DSPROCEDENCIA,
                ATD.IDSEGMENTACAO,
                ATD.DSSEGMENTACAO,
                -- //ATD.IDDISCADOR,
                ATD.IDFASE,
                ATD.IDPESSOAUSUARIOABERTURA,
                ATD.NMLOGINUSUARIO,
                ATD.IDGRUPOABERTURA,
                ATD.NMGRUPO,
                ATD.IDGRUPOATUAL,
                ATD.IDPESSOAUSUARIOATUAL,
                ATD.IDTIPOCARTEIRA, 
                ATD.DSTIPOCARTEIRA,
                ATD.NRNIVEL,
                ATD.QTINSISTENCIA,
                ATD.IDAGRUPAMENTOESTADOTPPROC,
                ATD.IDESTADO,
                ATD.DSESTADO,
                ATD.IDSUBESTADO,
                ATD.DSSUBESTADO,
                ATD.CDCONTA,
                ATD.NRLINHA,
                ATD.IDATENDIMENTOBAIXAHISTORICO,
                ATD.IDATENDIMENTOORIGEM,
                ATD.DATAFECHAMENTO,
                ATD.IDGRUPOANDAMENTO,
                ATD.INCRI,
                ATD.DTPRAZOFINALCPREVIO,
                ATD.IDTIPOABERTURA,
                PDP.IDPESSOA,
                AP.IDTIPORELACIONAMENTO,
                ATD.IDUFOPERADORA,
                ATD.IDUSUARIOALTERACAO,
                ATD.IDATENDIMENTOPROTOCOLO,
                ATD.INSMP,
                ATD.IDPESSOALINHAHISTORICO,
                ATD.IDLINHATELEFONICA,
                ATD.SGOPERADORASOLICITANTE,
                ATD.NRPROTOCOLOPORTABILIDADE,
                ATD.DTJANELAPORTOUT,
                ATD.SGTIPOPORTABILIDADE,
                ATD.IDTIPOLINHA,
                ATD.SGREGRAENCAMINHAMENTO,
                ATD.SGFLUXOATENDIMENTO,
                ATD.IDPERFILCONSULTORATD,
                ATD.IDFORNECEDORCONSULTORATD,
                ATD.IDSITECONSULTORATD,
                ATD.IDPESSOAUSUARIOMC,
                ATD.IDGRUPOMC
            FROM
                ATENDIMENTO.ATENDIMENTODETALHEV01 ATD,
                ATENDIMENTO.ATENDIMENTOPESSOA AP,
                CUSTOMER.PESSOADEPARA PDP
            WHERE
                ATD.IDATENDIMENTO = :idAtendimento
            AND AP.IDATENDIMENTO = ATD.IDATENDIMENTO
            AND AP.IDPESSOADEPARA = PDP.IDPESSOADEPARA
            AND AP.IDTIPORELACIONAMENTO IN (2,3,6,7)
            ORDER BY
                ATD.INSMP DESC
        )
        WHERE ROWNUM < 2;

    if ( sqlca.sqlcode == 0 )
    {
        ULOG("idTipoRetornoContato=%d",oDadosSaida.idTipoRetornoContato);

        if ( oDadosSaida.idTipoRetornoContato > TP_RET_SEM_RETORNO && 
             oDadosSaida.idTipoRetornoContato < TP_RET_COM_RET_GRP_CRI )
        { // se o processo foi criado para ir para grupo de retorno, então determina em
          // tempo real o tipo de retorno (vide DES BUG_3271_DES - Atualizada Gestão de Processos - Fase Retorno v.2.3.doc)
            //int idUFOperadora;
            int idTipoRetornoContato;
            proCObterTipoRetornoContato(idAtendimento,&idTipoRetornoContato);

            if ( -1 != idTipoRetornoContato )
            { // se processo em tratamento, assume o tipo do retorno do contato definido em tempo real
                //oDadosSaida.idUFOperadora = idUFOperadora;
                oDadosSaida.idTipoRetornoContato = idTipoRetornoContato;
            }
        }

        CONVIND(oDadosSaida.dataAbertura, oStatusSaida.i_dataAbertura);
        CONVIND(oDadosSaida.dataPrazoFinalInterno, oStatusSaida.i_dataPrazoFinalInterno);
        CONVIND(oDadosSaida.nmCanal, oStatusSaida.i_nmCanal);
        CONVIND(oDadosSaida.dsProcedencia, oStatusSaida.i_dsProcedencia);
        CONVIND(oDadosSaida.dsSegmentacao, oStatusSaida.i_dsSegmentacao);
        CONVIND(oDadosSaida.nmLoginUsuario, oStatusSaida.i_nmLoginUsuario);
        CONVIND(oDadosSaida.nmGrupoAbertura, oStatusSaida.i_nmGrupoAbertura);
        CONVIND(oDadosSaida.dsTipoCarteira, oStatusSaida.i_dsTipoCarteira);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.i_dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.i_dsSubEstado);
        CONVIND(oDadosSaida.cdConta, oStatusSaida.i_cdConta);
        CONVIND(oDadosSaida.nrLinha, oStatusSaida.i_nrLinha);
        CONVIND(oDadosSaida.dataFechamento, oStatusSaida.i_dataFechamento);
        CONVIND(oDadosSaida.dtPrazoFinalCPrevio, oStatusSaida.i_dtPrazoFinalCPrevio);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.i_idAtendimentoProtocolo);
        
        CONVIND(oDadosSaida.idAtendimentoOrigem, oStatusSaida.i_idAtendimentoOrigem );
        
        CONVIND(oDadosSaida.nrProtocoloPortabilidade, oStatusSaida.i_nrProtocoloPortabilidade);
        CONVIND(oDadosSaida.dtJanelaPortout, oStatusSaida.i_dtJanelaPortout);
        CONVIND(oDadosSaida.sgOperadoraSolicitante, oStatusSaida.i_sgOperadoraSolicitante);
        CONVIND(oDadosSaida.sgTipoPortabilidade, oStatusSaida.i_sgTipoPortabilidade);
        CONVIND(oDadosSaida.idTipoLinha, oStatusSaida.i_idTipoLinha);
        CONVIND(oDadosSaida.sgRegraEncaminhamento, oStatusSaida.i_sgRegraEncaminhamento);
        CONVIND(oDadosSaida.sgFluxoAtendimento, oStatusSaida.i_sgFluxoAtendimento);
        CONVIND(oDadosSaida.idPerfilConsultorAtd, oStatusSaida.i_idPerfilConsultorAtd);
        CONVIND(oDadosSaida.idFornecedorConsultorAtd, oStatusSaida.i_idFornecedorConsultorAtd);
        CONVIND(oDadosSaida.idSiteConsultorAtd, oStatusSaida.i_idSiteConsultorAtd);

        strcpy(pDadosSaida->dataAbertura,(char*)oDadosSaida.dataAbertura.arr);
        strcpy(pDadosSaida->dataPrazoFinalInterno,(char*)oDadosSaida.dataPrazoFinalInterno.arr);
        strcpy(pDadosSaida->nmCanal,(char*)oDadosSaida.nmCanal.arr);
        strcpy(pDadosSaida->dsProcedencia,(char*)oDadosSaida.dsProcedencia.arr);
        strcpy(pDadosSaida->dsSegmentacao,(char*)oDadosSaida.dsSegmentacao.arr);
        strcpy(pDadosSaida->nmLoginUsuario,(char*)oDadosSaida.nmLoginUsuario.arr);
        strcpy(pDadosSaida->nmGrupoAbertura,(char*)oDadosSaida.nmGrupoAbertura.arr);
        strcpy(pDadosSaida->dsTipoCarteira,(char*)oDadosSaida.dsTipoCarteira.arr);
        strcpy(pDadosSaida->dsEstado,(char*)oDadosSaida.dsEstado.arr);
        strcpy(pDadosSaida->dsSubEstado,(char*)oDadosSaida.dsSubEstado.arr);
        strcpy(pDadosSaida->cdConta,(char*)oDadosSaida.cdConta.arr);
        strcpy(pDadosSaida->nrLinha,(char*)oDadosSaida.nrLinha.arr);
        strcpy(pDadosSaida->dataFechamento,(char*)oDadosSaida.dataFechamento.arr);
        strcpy(pDadosSaida->dtPrazoFinalCPrevio,(char*)oDadosSaida.dtPrazoFinalCPrevio.arr);
        strcpy(pDadosSaida->idAtendimentoProtocolo,(char*)oDadosSaida.idAtendimentoProtocolo.arr);
        strcpy(pDadosSaida->nrProtocoloPortabilidade,(char*)oDadosSaida.nrProtocoloPortabilidade.arr);
        strcpy(pDadosSaida->dtJanelaPortout,(char*)oDadosSaida.dtJanelaPortout.arr);
        strcpy(pDadosSaida->sgTipoPortabilidade,(char*)oDadosSaida.sgTipoPortabilidade.arr);
        strcpy(pDadosSaida->sgOperadoraSolicitante,(char*)oDadosSaida.sgOperadoraSolicitante.arr);
        strcpy(pDadosSaida->idTipoLinha,(char*)oDadosSaida.idTipoLinha.arr);
        strcpy(pDadosSaida->sgRegraEncaminhamento,(char*)oDadosSaida.sgRegraEncaminhamento.arr);
        strcpy(pDadosSaida->sgFluxoAtendimento,(char*)oDadosSaida.sgFluxoAtendimento.arr);
        strcpy(pDadosSaida->idPerfilConsultorAtd,(char*)oDadosSaida.idPerfilConsultorAtd.arr);
        strcpy(pDadosSaida->idFornecedorConsultorAtd,(char*)oDadosSaida.idFornecedorConsultorAtd.arr);
        strcpy(pDadosSaida->idSiteConsultorAtd,(char*)oDadosSaida.idSiteConsultorAtd.arr);

        pDadosSaida->idContato = oDadosSaida.idContato;
        pDadosSaida->idTipoRetornoContato = oDadosSaida.idTipoRetornoContato;
        pDadosSaida->idCanal = oDadosSaida.idCanal;
        pDadosSaida->idProcedencia = oDadosSaida.idProcedencia;
        pDadosSaida->idSegmentacao = oDadosSaida.idSegmentacao;
        //pDadosSaida->idDiscador = oDadosSaida.idDiscador; // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
        pDadosSaida->idFase = oDadosSaida.idFase;
        pDadosSaida->idPessoaUsuarioAbertura = oDadosSaida.idPessoaUsuarioAbertura;
        pDadosSaida->idPessoaUsuarioMC = oDadosSaida.idPessoaUsuarioMC;
        pDadosSaida->idGrupoMC = oDadosSaida.idGrupoMC;
        pDadosSaida->idGrupoAbertura = oDadosSaida.idGrupoAbertura;
        pDadosSaida->idGrupoAtual= oDadosSaida.idGrupoAtual;
        pDadosSaida->idPessoaUsuarioAtual= oDadosSaida.idPessoaUsuarioAtual;
        pDadosSaida->idTipoCarteira = oDadosSaida.idTipoCarteira;
        pDadosSaida->nrNivel = oDadosSaida.nrNivel;
        pDadosSaida->qtInsistencia = oDadosSaida.qtInsistencia;
        pDadosSaida->idAgrEstadoTProc = oDadosSaida.idAgrEstadoTProc;
        pDadosSaida->idEstado = oDadosSaida.idEstado;
        pDadosSaida->idSubEstado = oDadosSaida.idSubEstado;
        pDadosSaida->idAtendimentoBaixaHistorico = oDadosSaida.idAtendimentoBaixaHistorico;
        pDadosSaida->idAtendimentoOrigem = atol((char*)oDadosSaida.idAtendimentoOrigem.arr);
        
        sprintf( c_idAtendimentoOrigem, "%ld", pDadosSaida->idAtendimentoOrigem );
        
        _pDadosSaida->idAtendimentoOrigem = atol((char*)oDadosSaida.idAtendimentoOrigem.arr);
        
        pDadosSaida->idGrupoAndamento = oDadosSaida.idGrupoAndamento;
        pDadosSaida->inCri = oDadosSaida.inCri;
        pDadosSaida->idTipoAbertura = oDadosSaida.idTipoAbertura;
        pDadosSaida->idPessoa = oDadosSaida.idPessoa;
        pDadosSaida->idTipoRelacionamento = oDadosSaida.idTipoRelacionamento;
        pDadosSaida->idUFOperadora = oDadosSaida.idUFOperadora;
        pDadosSaida->idPessoaLinhaHistorico = oDadosSaida.idPessoaLinhaHistorico;
        pDadosSaida->idLinhaTelefonica = oDadosSaida.idLinhaTelefonica;

        ULOG("idContato=%d",pDadosSaida->idContato);
        ULOG("idTipoRetornoContato=%d",pDadosSaida->idTipoRetornoContato);
        ULOG("idCanal=%d",pDadosSaida->idCanal);
        ULOG("idProcedencia=%d",pDadosSaida->idProcedencia);
        ULOG("idSegmentacao=%d",pDadosSaida->idSegmentacao);
        ULOG("idFase=%d",pDadosSaida->idFase);
        ULOG("idPessoaUsuarioAbertura=%ld",pDadosSaida->idPessoaUsuarioAbertura);
        ULOG("idGrupoAbertura=%d",pDadosSaida->idGrupoAbertura);
        ULOG("idTipoCarteira=%d",pDadosSaida->idTipoCarteira);
        ULOG("nrNivel=%d",pDadosSaida->nrNivel);
        ULOG("qtInsistencia=%d",pDadosSaida->qtInsistencia);
        ULOG("idAgrEstadoTProc=%d",pDadosSaida->idAgrEstadoTProc);
        ULOG("idEstado=%d",pDadosSaida->idEstado);
        ULOG("idSubEstado=%d",pDadosSaida->idSubEstado);
        ULOG("idAtendimentoBaixaHistorico=%ld",pDadosSaida->idAtendimentoBaixaHistorico);
        //ULOG("idAtendimentoOrigem=%ld",pDadosSaida->idAtendimentoOrigem);
        
        ULOG("idAtendimentoOrigem=%ld",_pDadosSaida->idAtendimentoOrigem);
        
        ULOG("idGrupoAndamento=%d",pDadosSaida->idGrupoAndamento);
        ULOG("inCri=%d",pDadosSaida->inCri);
        ULOG("idTipoAbertura=%d",pDadosSaida->idTipoAbertura);
        ULOG("idPessoa=%ld",pDadosSaida->idPessoa);
        ULOG("idTipoRelacionamento=%d",pDadosSaida->idTipoRelacionamento);
        ULOG("idUFOperadora=%d",pDadosSaida->idUFOperadora);
        ULOG("idAtendimentoProtocolo=%s",pDadosSaida->idAtendimentoProtocolo);
        ULOG("idPessoaLinhaHistorico=%ld",pDadosSaida->idPessoaLinhaHistorico);
        ULOG("idLinhaTelefonica=%d",pDadosSaida->idLinhaTelefonica);
        ULOG("sgOperadoraSolicitante=%s",pDadosSaida->sgOperadoraSolicitante);
        ULOG("nrProtocoloPortabilidade=%s",pDadosSaida->nrProtocoloPortabilidade);
        ULOG("dtJanelaPortout=%s",pDadosSaida->dtJanelaPortout);
        ULOG("sgTipoPortabilidade=%s",pDadosSaida->sgTipoPortabilidade);
        ULOG("idTipoLinha=%s",pDadosSaida->idTipoLinha);
        ULOG("sgRegraEncaminhamento=%s",pDadosSaida->sgRegraEncaminhamento);
        ULOG("sgFluxoAtendimento=%s",pDadosSaida->sgFluxoAtendimento);
        ULOG("idPerfilConsultorAtd=%s",pDadosSaida->idPerfilConsultorAtd);
        ULOG("idFornecedorConsultorAtd=%s",pDadosSaida->idFornecedorConsultorAtd);
        ULOG("idSiteConsultorAtd=%s",pDadosSaida->idSiteConsultorAtd);
        ULOG("idPessoaUsuarioMC=%d",pDadosSaida->idPessoaUsuarioMC);
        ULOG("idGrupoMC=%d",pDadosSaida->idGrupoMC);
    }
    else
    {
        ULOG("proCObtemWFDetalheAtendimento()::Processo não encontrado.");
    }

    ULOG_END( "proCObtemWFDetalheAtendimento() (3)" );

    return sqlca.sqlcode == 0 ? true : false;
}


/*
 *
 * OS 1013 - Expurgo
 *
 */
bool proCObtemWFDetalheAtendimentoEx( long _idAtendimento, DetalheAtendimento *_pDadosSaida, StatusDetalheAtendimento *_pStatusSaida )
{
    ULOG_START( "proCObtemWFDetalheAtendimentoEx()" );

    ULOG("idAtendimento (%d)",_idAtendimento);

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;

        struct
        {
            VARCHAR dataAbertura[256];
            int idContato;
            VARCHAR dataPrazoFinalInterno[256];
            int idTipoRetornoContato;
            int idCanal;
            VARCHAR nmCanal[256];
            int idProcedencia;
            VARCHAR dsProcedencia[256];
            int idSegmentacao;
            VARCHAR dsSegmentacao[256];
            int idFase;
            long idPessoaUsuarioAbertura;
            VARCHAR nmLoginUsuario[255];
            int idGrupoAbertura;
            VARCHAR nmGrupoAbertura[255];
            int idGrupoAtual;
            long idPessoaUsuarioAtual;
            int idTipoCarteira;
            VARCHAR dsTipoCarteira[256];
            int nrNivel;
            int qtInsistencia;
            int idAgrEstadoTProc;
            int idEstado;
            VARCHAR dsEstado[256];
            int idSubEstado;
            VARCHAR dsSubEstado[256];
            VARCHAR cdConta[256];
            VARCHAR nrLinha[256];
            long idAtendimentoBaixaHistorico;
            long idAtendimentoOrigem;
            VARCHAR dataFechamento[256];
            int idGrupoAndamento;
            int inCri;
            VARCHAR dtPrazoFinalCPrevio[256];
            int idTipoAbertura;
            long idPessoa;
            int idTipoRelacionamento;
            int idUFOperadora;
            int idUsuarioAlteracao;
            VARCHAR idAtendimentoProtocolo[39];
            long idPessoaLinhaHistorico;
            int idLinhaTelefonica;
            VARCHAR sgOperadoraSolicitante[31];
            VARCHAR nrProtocoloPortabilidade[64];
            VARCHAR dtJanelaPortout[32];
            VARCHAR sgTipoPortabilidade[16];
            VARCHAR idTipoLinha[5];
            VARCHAR idPerfilConsultorAtd[11];
            VARCHAR idFornecedorConsultorAtd[11];
            VARCHAR idSiteConsultorAtd[11];
        } oDadosSaida;

        struct
        {
            short i_dataAbertura;
            short i_idContato;
            short i_dataPrazoFinalInterno;
            short i_idTipoRetornoContato;
            short i_idCanal;
            short i_nmCanal;
            short i_idProcedencia;
            short i_dsProcedencia;
            short i_idSegmentacao;
            short i_dsSegmentacao;
            short i_idFase;
            short i_idPessoaUsuarioAbertura;
            short i_nmLoginUsuario;
            short i_idGrupoAbertura;
            short i_nmGrupoAbertura;
            short i_idGrupoAtual;
            short i_idPessoaUsuarioAtual;
            short i_idTipoCarteira;
            short i_dsTipoCarteira;
            short i_nrNivel;
            short i_qtInsistencia;
            short i_idAgrEstadoTProc;
            short i_idEstado;
            short i_dsEstado;
            short i_idSubEstado;
            short i_dsSubEstado;
            short i_cdConta;
            short i_nrLinha;
            short i_idAtendimentoBaixaHistorico;
            short i_idAtendimentoOrigem;
            short i_dataFechamento;
            short i_idGrupoAndamento;
            short i_inCri;
            short i_dtPrazoFinalCPrevio;
            short i_idTipoAbertura;
            short i_idPessoa;
            short i_idTipoRelacionamento;
            short i_idUFOperadora;
            short i_idUsuarioAlteracao;
            short i_idAtendimentoProtocolo;
            short i_idPessoaLinhaHistorico;
            short i_idLinhaTelefonica;
            short i_sgOperadoraSolicitante;
            short i_nrProtocoloPortabilidade;
            short i_dtJanelaPortout;
            short i_sgTipoPortabilidade;
            short i_idTipoLinha;
            short i_idPerfilConsultorAtd;
            short i_idFornecedorConsultorAtd;
            short i_idSiteConsultorAtd;
        } oStatusSaida;

        DetalheAtendimento *pDadosSaida = _pDadosSaida;
        StatusDetalheAtendimento *pStatusSaida = _pStatusSaida;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&oDadosSaida,0,sizeof(DetalheAtendimento));
    memset(&oStatusSaida,-1,sizeof(StatusDetalheAtendimento));

    // A sub query abaixo foi necessária pois com a entrada da OS de protocolos anatel
    // existe o risco de numeros de protocolos conflitarem com numeros de atendimento
    // e neste caso será dada preferência ao retorno do processo do SMP.
    EXEC SQL
        SELECT
            DATAABERTURA,
            IDCONTATO,
            DATAPRAZOFINALINTERNO,
            IDTIPORETORNOCONTATO,
            IDCANAL,
            NMCANAL,
            IDPROCEDENCIA,
            DSPROCEDENCIA,
            IDSEGMENTACAO,
            DSSEGMENTACAO,
            IDFASE,
            IDPESSOAUSUARIOABERTURA,
            NMLOGINUSUARIO,
            IDGRUPOABERTURA,
            NMGRUPO,
            IDGRUPOATUAL,
            IDPESSOAUSUARIOATUAL,
            IDTIPOCARTEIRA, 
            DSTIPOCARTEIRA,
            NRNIVEL,
            QTINSISTENCIA,
            IDAGRUPAMENTOESTADOTPPROC,
            IDESTADO,
            DSESTADO,
            IDSUBESTADO,
            DSSUBESTADO,
            CDCONTA,
            NRLINHA,
            IDATENDIMENTOBAIXAHISTORICO,
            IDATENDIMENTOORIGEM,
            DATAFECHAMENTO,
            IDGRUPOANDAMENTO,
            INCRI,
            DTPRAZOFINALCPREVIO,
            IDTIPOABERTURA,
            IDPESSOA,
            IDTIPORELACIONAMENTO,
            IDUFOPERADORA,
            IDUSUARIOALTERACAO,
            IDATENDIMENTOPROTOCOLO,
            IDPESSOALINHAHISTORICO,
            IDLINHATELEFONICA,
            SGOPERADORASOLICITANTE,
            NRPROTOCOLOPORTABILIDADE,
            DTJANELAPORTOUT,
            SGTIPOPORTABILIDADE,
            IDTIPOLINHA,
            IDPERFILCONSULTORATD,
            IDFORNECEDORCONSULTORATD,
            IDSITECONSULTORATD
        INTO
            :oDadosSaida:oStatusSaida
        FROM
        (
            SELECT 
                ATD.DATAABERTURA,
                ATD.IDCONTATO,
                ATD.DATAPRAZOFINALINTERNO,
                ATD.IDTIPORETORNOCONTATO,
                ATD.IDCANAL,
                ATD.NMCANAL,
                ATD.IDPROCEDENCIA,
                ATD.DSPROCEDENCIA,
                ATD.IDSEGMENTACAO,
                ATD.DSSEGMENTACAO,
                ATD.IDFASE,
                ATD.IDPESSOAUSUARIOABERTURA,
                ATD.NMLOGINUSUARIO,
                ATD.IDGRUPOABERTURA,
                ATD.NMGRUPO,
                ATD.IDGRUPOATUAL,
                ATD.IDPESSOAUSUARIOATUAL,
                ATD.IDTIPOCARTEIRA, 
                ATD.DSTIPOCARTEIRA,
                ATD.NRNIVEL,
                ATD.QTINSISTENCIA,
                ATD.IDAGRUPAMENTOESTADOTPPROC,
                ATD.IDESTADO,
                ATD.DSESTADO,
                ATD.IDSUBESTADO,
                ATD.DSSUBESTADO,
                ATD.CDCONTA,
                ATD.NRLINHA,
                ATD.IDATENDIMENTOBAIXAHISTORICO,
                ATD.IDATENDIMENTOORIGEM,
                ATD.DATAFECHAMENTO,
                ATD.IDGRUPOANDAMENTO,
                ATD.INCRI,
                ATD.DTPRAZOFINALCPREVIO,
                ATD.IDTIPOABERTURA,
                PDP.IDPESSOA,
                AP.IDTIPORELACIONAMENTO,
                ATD.IDUFOPERADORA,
                ATD.IDUSUARIOALTERACAO,
                ATD.IDATENDIMENTOPROTOCOLO,
                ATD.INSMP,
                ATD.IDPESSOALINHAHISTORICO,
                ATD.IDLINHATELEFONICA,
                ATD.SGOPERADORASOLICITANTE,
                ATD.NRPROTOCOLOPORTABILIDADE,
                ATD.DTJANELAPORTOUT,
                ATD.SGTIPOPORTABILIDADE,
                ATD.IDTIPOLINHA,
                NULL AS IDPERFILCONSULTORATD,
                NULL AS IDFORNECEDORCONSULTORATD,
                NULL AS IDSITECONSULTORATD
            FROM
                FOHIST_OW.ATENDIMENTODETALHEV01 ATD,
                FOHIST_OW.ATENDIMENTOPESSOA AP,
                CUSTOMER.PESSOADEPARA PDP
            WHERE
                ATD.IDATENDIMENTO = :idAtendimento
            AND AP.IDATENDIMENTO = ATD.IDATENDIMENTO
            AND AP.IDPESSOADEPARA = PDP.IDPESSOADEPARA
            AND AP.IDTIPORELACIONAMENTO IN (2,3,6,7)
            ORDER BY ATD.INSMP DESC
        )
        WHERE ROWNUM < 2;

    if ( sqlca.sqlcode == 0 )
    {
        ULOG("idTipoRetornoContato=%d",oDadosSaida.idTipoRetornoContato);

        if ( oDadosSaida.idTipoRetornoContato > TP_RET_SEM_RETORNO && 
             oDadosSaida.idTipoRetornoContato < TP_RET_COM_RET_GRP_CRI )
        { // se o processo foi criado para ir para grupo de retorno, então determina em
          // tempo real o tipo de retorno (vide DES BUG_3271_DES - Atualizada Gestão de Processos - Fase Retorno v.2.3.doc)
            //int idUFOperadora;
            int idTipoRetornoContato;
            proCObterTipoRetornoContatoEx(idAtendimento,&idTipoRetornoContato);

            if ( -1 != idTipoRetornoContato )
            { // se processo em tratamento, assume o tipo do retorno do contato definido em tempo real
                //oDadosSaida.idUFOperadora = idUFOperadora;
                oDadosSaida.idTipoRetornoContato = idTipoRetornoContato;
            }
        }

        CONVIND(oDadosSaida.dataAbertura, oStatusSaida.i_dataAbertura);
        CONVIND(oDadosSaida.dataPrazoFinalInterno, oStatusSaida.i_dataPrazoFinalInterno);
        CONVIND(oDadosSaida.nmCanal, oStatusSaida.i_nmCanal);
        CONVIND(oDadosSaida.dsProcedencia, oStatusSaida.i_dsProcedencia);
        CONVIND(oDadosSaida.dsSegmentacao, oStatusSaida.i_dsSegmentacao);
        CONVIND(oDadosSaida.nmLoginUsuario, oStatusSaida.i_nmLoginUsuario);
        CONVIND(oDadosSaida.nmGrupoAbertura, oStatusSaida.i_nmGrupoAbertura);
        CONVIND(oDadosSaida.dsTipoCarteira, oStatusSaida.i_dsTipoCarteira);
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.i_dsEstado);
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.i_dsSubEstado);
        CONVIND(oDadosSaida.cdConta, oStatusSaida.i_cdConta);
        CONVIND(oDadosSaida.nrLinha, oStatusSaida.i_nrLinha);
        CONVIND(oDadosSaida.dataFechamento, oStatusSaida.i_dataFechamento);
        CONVIND(oDadosSaida.dtPrazoFinalCPrevio, oStatusSaida.i_dtPrazoFinalCPrevio);
        CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.i_idAtendimentoProtocolo);
        CONVIND(oDadosSaida.nrProtocoloPortabilidade, oStatusSaida.i_nrProtocoloPortabilidade);
        CONVIND(oDadosSaida.dtJanelaPortout, oStatusSaida.i_dtJanelaPortout);
        CONVIND(oDadosSaida.sgOperadoraSolicitante, oStatusSaida.i_sgOperadoraSolicitante);
        CONVIND(oDadosSaida.sgTipoPortabilidade, oStatusSaida.i_sgTipoPortabilidade);
        CONVIND(oDadosSaida.idTipoLinha, oStatusSaida.i_idTipoLinha);
        CONVIND(oDadosSaida.idPerfilConsultorAtd, oStatusSaida.i_idPerfilConsultorAtd);
        CONVIND(oDadosSaida.idFornecedorConsultorAtd, oStatusSaida.i_idFornecedorConsultorAtd);
        CONVIND(oDadosSaida.idSiteConsultorAtd, oStatusSaida.i_idSiteConsultorAtd);

        strcpy(pDadosSaida->dataAbertura,(char*)oDadosSaida.dataAbertura.arr);
        strcpy(pDadosSaida->dataPrazoFinalInterno,(char*)oDadosSaida.dataPrazoFinalInterno.arr);
        strcpy(pDadosSaida->nmCanal,(char*)oDadosSaida.nmCanal.arr);
        strcpy(pDadosSaida->dsProcedencia,(char*)oDadosSaida.dsProcedencia.arr);
        strcpy(pDadosSaida->dsSegmentacao,(char*)oDadosSaida.dsSegmentacao.arr);
        strcpy(pDadosSaida->nmLoginUsuario,(char*)oDadosSaida.nmLoginUsuario.arr);
        strcpy(pDadosSaida->nmGrupoAbertura,(char*)oDadosSaida.nmGrupoAbertura.arr);
        strcpy(pDadosSaida->dsTipoCarteira,(char*)oDadosSaida.dsTipoCarteira.arr);
        strcpy(pDadosSaida->dsEstado,(char*)oDadosSaida.dsEstado.arr);
        strcpy(pDadosSaida->dsSubEstado,(char*)oDadosSaida.dsSubEstado.arr);
        strcpy(pDadosSaida->cdConta,(char*)oDadosSaida.cdConta.arr);
        strcpy(pDadosSaida->nrLinha,(char*)oDadosSaida.nrLinha.arr);
        strcpy(pDadosSaida->dataFechamento,(char*)oDadosSaida.dataFechamento.arr);
        strcpy(pDadosSaida->dtPrazoFinalCPrevio,(char*)oDadosSaida.dtPrazoFinalCPrevio.arr);
        strcpy(pDadosSaida->idAtendimentoProtocolo,(char*)oDadosSaida.idAtendimentoProtocolo.arr);
        strcpy(pDadosSaida->nrProtocoloPortabilidade,(char*)oDadosSaida.nrProtocoloPortabilidade.arr);
        strcpy(pDadosSaida->dtJanelaPortout,(char*)oDadosSaida.dtJanelaPortout.arr);
        strcpy(pDadosSaida->sgTipoPortabilidade,(char*)oDadosSaida.sgTipoPortabilidade.arr);
        strcpy(pDadosSaida->sgOperadoraSolicitante,(char*)oDadosSaida.sgOperadoraSolicitante.arr);
        strcpy(pDadosSaida->idTipoLinha,(char*)oDadosSaida.idTipoLinha.arr);
        strcpy(pDadosSaida->idPerfilConsultorAtd,(char*)oDadosSaida.idPerfilConsultorAtd.arr);
        strcpy(pDadosSaida->idFornecedorConsultorAtd,(char*)oDadosSaida.idFornecedorConsultorAtd.arr);
        strcpy(pDadosSaida->idSiteConsultorAtd,(char*)oDadosSaida.idSiteConsultorAtd.arr);

        pDadosSaida->idContato = oDadosSaida.idContato;
        pDadosSaida->idTipoRetornoContato = oDadosSaida.idTipoRetornoContato;
        pDadosSaida->idCanal = oDadosSaida.idCanal;
        pDadosSaida->idProcedencia = oDadosSaida.idProcedencia;
        pDadosSaida->idSegmentacao = oDadosSaida.idSegmentacao;
        pDadosSaida->idFase = oDadosSaida.idFase;
        pDadosSaida->idPessoaUsuarioAbertura = oDadosSaida.idPessoaUsuarioAbertura;
        pDadosSaida->idGrupoAbertura = oDadosSaida.idGrupoAbertura;
        pDadosSaida->idGrupoAtual= oDadosSaida.idGrupoAtual;
        pDadosSaida->idPessoaUsuarioAtual= oDadosSaida.idPessoaUsuarioAtual;
        pDadosSaida->idTipoCarteira = oDadosSaida.idTipoCarteira;
        pDadosSaida->nrNivel = oDadosSaida.nrNivel;
        pDadosSaida->qtInsistencia = oDadosSaida.qtInsistencia;
        pDadosSaida->idAgrEstadoTProc = oDadosSaida.idAgrEstadoTProc;
        pDadosSaida->idEstado = oDadosSaida.idEstado;
        pDadosSaida->idSubEstado = oDadosSaida.idSubEstado;
        pDadosSaida->idAtendimentoBaixaHistorico = oDadosSaida.idAtendimentoBaixaHistorico;
        pDadosSaida->idAtendimentoOrigem = oDadosSaida.idAtendimentoOrigem;
        pDadosSaida->idGrupoAndamento = oDadosSaida.idGrupoAndamento;
        pDadosSaida->inCri = oDadosSaida.inCri;
        pDadosSaida->idTipoAbertura = oDadosSaida.idTipoAbertura;
        pDadosSaida->idPessoa = oDadosSaida.idPessoa;
        pDadosSaida->idTipoRelacionamento = oDadosSaida.idTipoRelacionamento;
        pDadosSaida->idUFOperadora = oDadosSaida.idUFOperadora;
        pDadosSaida->idPessoaLinhaHistorico = oDadosSaida.idPessoaLinhaHistorico;
        pDadosSaida->idLinhaTelefonica = oDadosSaida.idLinhaTelefonica;

        ULOG("idContato=%d",pDadosSaida->idContato);
        ULOG("idTipoRetornoContato=%d",pDadosSaida->idTipoRetornoContato);
        ULOG("idCanal=%d",pDadosSaida->idCanal);
        ULOG("idProcedencia=%d",pDadosSaida->idProcedencia);
        ULOG("idSegmentacao=%d",pDadosSaida->idSegmentacao);
        ULOG("idFase=%d",pDadosSaida->idFase);
        ULOG("idPessoaUsuarioAbertura=%ld",pDadosSaida->idPessoaUsuarioAbertura);
        ULOG("idGrupoAbertura=%d",pDadosSaida->idGrupoAbertura);
        ULOG("idTipoCarteira=%d",pDadosSaida->idTipoCarteira);
        ULOG("nrNivel=%d",pDadosSaida->nrNivel);
        ULOG("qtInsistencia=%d",pDadosSaida->qtInsistencia);
        ULOG("idAgrEstadoTProc=%d",pDadosSaida->idAgrEstadoTProc);
        ULOG("idEstado=%d",pDadosSaida->idEstado);
        ULOG("idSubEstado=%d",pDadosSaida->idSubEstado);
        ULOG("idAtendimentoBaixaHistorico=%d",pDadosSaida->idAtendimentoBaixaHistorico);
        ULOG("idAtendimentoOrigem=%d",pDadosSaida->idAtendimentoOrigem);
        ULOG("idGrupoAndamento=%d",pDadosSaida->idGrupoAndamento);
        ULOG("inCri=%d",pDadosSaida->inCri);
        ULOG("idTipoAbertura=%d",pDadosSaida->idTipoAbertura);
        ULOG("idPessoa=%ld",pDadosSaida->idPessoa);
        ULOG("idTipoRelacionamento=%d",pDadosSaida->idTipoRelacionamento);
        ULOG("idUFOperadora=%d",pDadosSaida->idUFOperadora);
        ULOG("idAtendimentoProtocolo=%s",pDadosSaida->idAtendimentoProtocolo);
        ULOG("idPessoaLinhaHistorico=%ld",pDadosSaida->idPessoaLinhaHistorico);
        ULOG("idLinhaTelefonica=%d",pDadosSaida->idLinhaTelefonica);
        ULOG("sgOperadoraSolicitante=%s",pDadosSaida->sgOperadoraSolicitante);
        ULOG("nrProtocoloPortabilidade=%s",pDadosSaida->nrProtocoloPortabilidade);
        ULOG("dtJanelaPortout=%s",pDadosSaida->dtJanelaPortout);
        ULOG("sgTipoPortabilidade=%s",pDadosSaida->sgTipoPortabilidade);
        ULOG("idTipoLinha=%s",pDadosSaida->idTipoLinha);
        ULOG("idPerfilConsultorAtd=%s",pDadosSaida->idPerfilConsultorAtd);
        ULOG("idFornecedorConsultorAtd=%s",pDadosSaida->idFornecedorConsultorAtd);
        ULOG("idSiteConsultorAtd=%s",pDadosSaida->idSiteConsultorAtd);
    }
    else
    {
        ULOG("proCObtemWFDetalheAtendimentoEx()::Processo não encontrado.");
    }

    ULOG_END( "proCObtemWFDetalheAtendimentoEx()" );

    return sqlca.sqlcode == 0 ? true : false;
}



bool proCObtemWFDetalheAtendimentoEx_Migracao( long _idAtendimento, DetalheAtendimento *_pDadosSaida, StatusDetalheAtendimento *_pStatusSaida )
{
    ULOG_START( "proCObtemWFDetalheAtendimentoEx_Migracao()" );

    ULOG("idAtendimento (%d)",_idAtendimento);

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;

        struct
        {
            VARCHAR dtAbertura[22];
            VARCHAR dtPrazoFinal[22];
            VARCHAR nmCanal[256];
            VARCHAR nmProcedencia[256];
            VARCHAR nmSegmentacao[256];
            VARCHAR nmUsuarioBKO[256];
            VARCHAR nmUsuarioGrupoBKO[256];
            VARCHAR nmTipoCarteira[256];
            VARCHAR dsEstado[256];
            VARCHAR dsSubEstado[256];
            VARCHAR cdConta[32];
            VARCHAR nrLinha[16];
            VARCHAR dtFechamento[22];
            VARCHAR dtPrazoFinalPrevio[22];
            long     idAtendimento;
            VARCHAR nrProtocoloPortabilidade[64];
            VARCHAR dtJanelaPortOut[22];
            VARCHAR sgOperadoraSolicitante[32];
            VARCHAR sgTipoPortabilidade[32];
            VARCHAR idTipoLinha[41];
            VARCHAR idPerfilConsultor[41];
            VARCHAR idFornecedorConsultorAtd[41];
            VARCHAR idSiteConsultorAtd[41];
            int     idLinhaTelefonica;
        } oDadosSaida;
      

        struct
        {
            short i_dtAbertura;
            short i_dtPrazoFinal;
            short i_nmCanal;
            short i_nmProcedencia;
            short i_nmSegmentacao;
            short i_nmUsuarioBKO;
            short i_nmUsuarioGrupoBKO;
            short i_nmTipoCarteira;
            short i_dsEstado;
            short i_dsSubEstado;
            short i_cdConta;
            short i_nrLinha;
            short i_dtFechamento;
            short i_dtPrazoFinalPrevio;
            short i_idAtendimento;
            short i_nrProtocoloPortabilidade;
            short i_dtJanelaPortOut;
            short i_sgOperadoraSolicitante;
            short i_sgTipoPortabilidade;
            short i_idTipoLinha;
            short i_idPerfilConsultor;
            short i_idFornecedorConsultorAtd;
            short i_idSiteConsultorAtd;
            short i_idLinhaTelefonica;
        } oStatusSaida;

        DetalheAtendimento *pDadosSaida = _pDadosSaida;
        StatusDetalheAtendimento *pStatusSaida = _pStatusSaida;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&oDadosSaida,0,sizeof(DetalheAtendimento));
    memset(&oStatusSaida,-1,sizeof(StatusDetalheAtendimento));

    // A sub query abaixo foi necessária pois com a entrada da OS de protocolos anatel
    // existe o risco de numeros de protocolos conflitarem com numeros de atendimento
    // e neste caso será dada preferência ao retorno do processo do SMP.
    /*
    EXEC SQL
        select
           ( select DTANDAMENTO from atendimento.andamentomigracao where idatendimento = atendimentomigracao.IDATENDIMENTO and idatividade = 1 ) as dtAbertura ,
           NULL as dtPrazoFinal ,
           NULL as nmCanal ,
           NULL as nmProcedencia ,
           atendimentomigracao.nmSegmentacao ,
           atendimentomigracao.NMUSUARIOBKO ,
           atendimentomigracao.NMUSUARIOGRUPOBKO ,
           atendimentomigracao.NMTIPOCARTEIRA ,
           decode( andamentomigracao.idatividade,1,'Aberto','Fechado' ) as estado ,
           NULL as SubEstado ,
           atendimentolinhamigracao.CDCONTA ,
           atendimentomigracao.NRLINHA ,
           ( select DTANDAMENTO from atendimento.andamentomigracao where idatendimento = atendimentomigracao.IDATENDIMENTO and idatividade = 2 ) as dtFechamento ,
           NULL as dtPrazoFinalPrevio ,
           atendimentomigracao.IDATENDIMENTO ,
           NULL as nrProtocoloPortabilidade ,
           NULL as dtJanelaPortOut ,
           NULL as sgOperadoraSolicitante ,
           NULL as sgTipoPortabilidade ,
           linhatelefonica.IDTIPOLINHA ,
           NULL as idPerfilConsultor ,
           NULL as idFornecedorConsultorAtd ,
           NULL as idSiteConsultorAtd ,
           linhatelefonica.IDLINHATELEFONICA 
        from
           fohist_ow.atendimentomigracao          atendimentomigracao ,
           atendimento.andamentomigracao          andamentomigracao ,
           atendimento.atendimentolinhamigracao   atendimentolinhamigracao ,
           linha.linhatelefonica                  linhatelefonica 
        where
           atendimentomigracao.idatendimento = andamentomigracao.idatendimento
        and atendimentolinhamigracao.IDATENDIMENTO = atendimentomigracao.IDATENDIMENTO
        and linhatelefonica.IDLINHATELEFONICA = atendimentomigracao.IDLINHATELEFONICA
        and atendimentomigracao.IDATENDIMENTO = :idAtendimento
        and rownum < 2;
    */

    EXEC SQL
    select
       atdAbert.DTANDAMENTO as dtAbertura ,
       NULL as dtPrazoFinal ,
       NULL as nmCanal ,
       NULL as nmProcedencia ,
       atendimentomigracao.nmSegmentacao ,
       atendimentomigracao.NMUSUARIOBKO ,
       atendimentomigracao.NMUSUARIOGRUPOBKO ,
       atendimentomigracao.NMTIPOCARTEIRA ,
       decode( andamentomigracao.idatividade,1,'Aberto','Fechado' ) as estado ,
       NULL as SubEstado ,
       atendimentolinhamigracao.CDCONTA ,
       atendimentomigracao.NRLINHA ,
       atdFech.DTANDAMENTO as dtFechamento ,
       NULL as dtPrazoFinalPrevio ,
       atendimentomigracao.IDATENDIMENTO ,
       NULL as nrProtocoloPortabilidade ,
       NULL as dtJanelaPortOut ,
       NULL as sgOperadoraSolicitante ,
       NULL as sgTipoPortabilidade ,
       linhatelefonica.IDTIPOLINHA ,
       NULL as idPerfilConsultor ,
       NULL as idFornecedorConsultorAtd ,
       NULL as idSiteConsultorAtd ,
       linhatelefonica.IDLINHATELEFONICA 
    INTO
        :oDadosSaida:oStatusSaida
    from
       (
          select 
             a.DTANDAMENTO 
          from 
             atendimento.andamentomigracao a 
          where 
             a.idatendimento = :idAtendimento
          and a.idatividade = 1
       ) atdAbert ,
       (
          select 
             b.DTANDAMENTO 
          from 
             atendimento.andamentomigracao b 
          where 
             b.idatendimento = :idAtendimento
          and b.idatividade = 2
       ) atdFech ,
       fohist_ow.atendimentomigracao          atendimentomigracao ,
       atendimento.andamentomigracao          andamentomigracao ,
       atendimento.atendimentolinhamigracao   atendimentolinhamigracao ,
       linha.linhatelefonica                  linhatelefonica 
    where
       atendimentomigracao.idatendimento = andamentomigracao.idatendimento
    and atendimentolinhamigracao.IDATENDIMENTO = atendimentomigracao.IDATENDIMENTO
    and atendimentomigracao.IDATENDIMENTO = :idAtendimento
    and linhatelefonica.IDLINHATELEFONICA = atendimentomigracao.IDLINHATELEFONICA;

    if ( sqlca.sqlcode == 0 )
    {

        CONVIND(oDadosSaida.dtAbertura, oStatusSaida.i_dtAbertura );
        CONVIND(oDadosSaida.dtPrazoFinal, oStatusSaida.i_dtPrazoFinal );
        CONVIND(oDadosSaida.nmCanal, oStatusSaida.i_nmCanal );
        CONVIND(oDadosSaida.nmProcedencia, oStatusSaida.i_nmProcedencia );
        CONVIND(oDadosSaida.nmSegmentacao, oStatusSaida.i_nmSegmentacao );
        CONVIND(oDadosSaida.nmUsuarioBKO, oStatusSaida.i_nmUsuarioBKO );
        CONVIND(oDadosSaida.nmUsuarioGrupoBKO, oStatusSaida.i_nmUsuarioGrupoBKO );
        CONVIND(oDadosSaida.nmTipoCarteira, oStatusSaida.i_nmTipoCarteira );
        CONVIND(oDadosSaida.dsEstado, oStatusSaida.i_dsEstado );
        CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.i_dsSubEstado );
        CONVIND(oDadosSaida.cdConta, oStatusSaida.i_cdConta );
        CONVIND(oDadosSaida.nrLinha, oStatusSaida.i_nrLinha );
        CONVIND(oDadosSaida.dtFechamento, oStatusSaida.i_dtFechamento );
        CONVIND(oDadosSaida.dtPrazoFinalPrevio, oStatusSaida.i_dtPrazoFinalPrevio );
        
        //CONVIND(oDadosSaida.idAtendimento, oStatusSaida.i_idAtendimento );
        
        CONVIND(oDadosSaida.nrProtocoloPortabilidade, oStatusSaida.i_nrProtocoloPortabilidade );
        CONVIND(oDadosSaida.dtJanelaPortOut, oStatusSaida.i_dtJanelaPortOut );
        CONVIND(oDadosSaida.sgOperadoraSolicitante, oStatusSaida.i_sgOperadoraSolicitante );
        CONVIND(oDadosSaida.sgTipoPortabilidade, oStatusSaida.i_sgTipoPortabilidade );
        CONVIND(oDadosSaida.idTipoLinha, oStatusSaida.i_idTipoLinha );
        CONVIND(oDadosSaida.idPerfilConsultor, oStatusSaida.i_idPerfilConsultor );
        CONVIND(oDadosSaida.idFornecedorConsultorAtd, oStatusSaida.i_idFornecedorConsultorAtd );
        CONVIND(oDadosSaida.idSiteConsultorAtd, oStatusSaida.i_idSiteConsultorAtd );
        
        strcpy(pDadosSaida->dataAbertura,(char*)oDadosSaida.dtAbertura.arr);
        strcpy(pDadosSaida->dataPrazoFinalInterno,"");
        strcpy(pDadosSaida->nmCanal,(char*)oDadosSaida.nmCanal.arr);
        strcpy(pDadosSaida->dsProcedencia,(char*)oDadosSaida.nmProcedencia.arr);
        strcpy(pDadosSaida->dsSegmentacao,(char*)oDadosSaida.nmSegmentacao.arr);
        strcpy(pDadosSaida->nmLoginUsuario,(char*)oDadosSaida.nmUsuarioBKO.arr);
        strcpy(pDadosSaida->nmGrupoAbertura,(char*)oDadosSaida.nmUsuarioGrupoBKO.arr);
        strcpy(pDadosSaida->dsTipoCarteira,(char*)oDadosSaida.nmTipoCarteira.arr);
        strcpy(pDadosSaida->dsEstado,(char*)oDadosSaida.dsEstado.arr);
        strcpy(pDadosSaida->dsSubEstado,(char*)oDadosSaida.dsSubEstado.arr);
        strcpy(pDadosSaida->cdConta,(char*)oDadosSaida.cdConta.arr);
        strcpy(pDadosSaida->nrLinha,(char*)oDadosSaida.nrLinha.arr);
        strcpy(pDadosSaida->dataFechamento,(char*)oDadosSaida.dtFechamento.arr);
        strcpy(pDadosSaida->dtPrazoFinalCPrevio,(char*)oDadosSaida.dtPrazoFinalPrevio.arr);
        sprintf(pDadosSaida->idAtendimentoProtocolo,"%d",oDadosSaida.idAtendimento);
        strcpy(pDadosSaida->nrProtocoloPortabilidade,(char*)oDadosSaida.nrProtocoloPortabilidade.arr);
        strcpy(pDadosSaida->dtJanelaPortout,(char*)oDadosSaida.dtJanelaPortOut.arr);
        strcpy(pDadosSaida->sgTipoPortabilidade,(char*)oDadosSaida.sgTipoPortabilidade.arr);
        strcpy(pDadosSaida->sgOperadoraSolicitante,(char*)oDadosSaida.sgOperadoraSolicitante.arr);
        strcpy(pDadosSaida->idTipoLinha,(char*)oDadosSaida.idTipoLinha.arr);
        strcpy(pDadosSaida->idPerfilConsultorAtd,(char*)oDadosSaida.idPerfilConsultor.arr);
        strcpy(pDadosSaida->idFornecedorConsultorAtd,(char*)oDadosSaida.idFornecedorConsultorAtd.arr);
        strcpy(pDadosSaida->idSiteConsultorAtd,(char*)oDadosSaida.idSiteConsultorAtd.arr);

        pDadosSaida->idContato = 0;
        pDadosSaida->idTipoRetornoContato = 0;
        pDadosSaida->idCanal = 0;
        pDadosSaida->idProcedencia = 0;
        pDadosSaida->idSegmentacao = 0;
        pDadosSaida->idFase = 0;
        pDadosSaida->idPessoaUsuarioAbertura = 0;
        pDadosSaida->idGrupoAbertura = 0;
        pDadosSaida->idGrupoAtual= 0;
        pDadosSaida->idPessoaUsuarioAtual= 0;
        pDadosSaida->idTipoCarteira = 0;
        pDadosSaida->nrNivel = 0;
        pDadosSaida->qtInsistencia = 0;
        pDadosSaida->idAgrEstadoTProc = 0;
        pDadosSaida->idEstado = 0;
        pDadosSaida->idSubEstado = 0;
        pDadosSaida->idAtendimentoBaixaHistorico = 0;
        pDadosSaida->idAtendimentoOrigem = oDadosSaida.idAtendimento;
        pDadosSaida->idGrupoAndamento = 0;
        pDadosSaida->inCri = 0;
        pDadosSaida->idTipoAbertura = 0;
        pDadosSaida->idPessoa = 0;
        pDadosSaida->idTipoRelacionamento = 0;
        pDadosSaida->idUFOperadora = 0;
        pDadosSaida->idPessoaLinhaHistorico = 0;
        pDadosSaida->idLinhaTelefonica = oDadosSaida.idLinhaTelefonica;

        ULOG("idContato=%d",pDadosSaida->idContato);
        ULOG("idTipoRetornoContato=%d",pDadosSaida->idTipoRetornoContato);
        ULOG("idCanal=%d",pDadosSaida->idCanal);
        ULOG("idProcedencia=%d",pDadosSaida->idProcedencia);
        ULOG("idSegmentacao=%d",pDadosSaida->idSegmentacao);
        ULOG("idFase=%d",pDadosSaida->idFase);
        ULOG("idPessoaUsuarioAbertura=%d",pDadosSaida->idPessoaUsuarioAbertura);
        ULOG("idGrupoAbertura=%d",pDadosSaida->idGrupoAbertura);
        ULOG("idTipoCarteira=%d",pDadosSaida->idTipoCarteira);
        ULOG("nrNivel=%d",pDadosSaida->nrNivel);
        ULOG("qtInsistencia=%d",pDadosSaida->qtInsistencia);
        ULOG("idAgrEstadoTProc=%d",pDadosSaida->idAgrEstadoTProc);
        ULOG("idEstado=%d",pDadosSaida->idEstado);
        ULOG("idSubEstado=%d",pDadosSaida->idSubEstado);
        ULOG("idAtendimentoBaixaHistorico=%d",pDadosSaida->idAtendimentoBaixaHistorico);
        ULOG("idAtendimentoOrigem=%d",pDadosSaida->idAtendimentoOrigem);
        ULOG("idGrupoAndamento=%d",pDadosSaida->idGrupoAndamento);
        ULOG("inCri=%d",pDadosSaida->inCri);
        ULOG("idTipoAbertura=%d",pDadosSaida->idTipoAbertura);
        ULOG("idPessoa=%ld",pDadosSaida->idPessoa);
        ULOG("idTipoRelacionamento=%d",pDadosSaida->idTipoRelacionamento);
        ULOG("idUFOperadora=%d",pDadosSaida->idUFOperadora);
        ULOG("idAtendimentoProtocolo=%s",pDadosSaida->idAtendimentoProtocolo);
        ULOG("idPessoaLinhaHistorico=%ld",pDadosSaida->idPessoaLinhaHistorico);
        ULOG("idLinhaTelefonica=%d",pDadosSaida->idLinhaTelefonica);
        ULOG("sgOperadoraSolicitante=%s",pDadosSaida->sgOperadoraSolicitante);
        ULOG("nrProtocoloPortabilidade=%s",pDadosSaida->nrProtocoloPortabilidade);
        ULOG("dtJanelaPortout=%s",pDadosSaida->dtJanelaPortout);
        ULOG("sgTipoPortabilidade=%s",pDadosSaida->sgTipoPortabilidade);
        ULOG("idTipoLinha=%s",pDadosSaida->idTipoLinha);
        ULOG("idPerfilConsultorAtd=%s",pDadosSaida->idPerfilConsultorAtd);
        ULOG("idFornecedorConsultorAtd=%s",pDadosSaida->idFornecedorConsultorAtd);
        ULOG("idSiteConsultorAtd=%s",pDadosSaida->idSiteConsultorAtd);
    }
    else
    {
        ULOG("proCObtemWFDetalheAtendimentoEx()::Processo não encontrado.");
    }

    ULOG_END( "proCObtemWFDetalheAtendimentoEx_Migracao()" );

    return sqlca.sqlcode == 0 ? true : false;
}



bool proCObtemWFDetalheAtendimento(long _idAtendimento,XMLGen *saida,int *_idAgrEstadoTProc)
{
    ULOG_START( "proCObtemWFDetalheAtendimento(int _idAtendimento,XMLGen *saida,int *_idAgrEstadoTProc)" );

    DetalheAtendimento oDadosSaida;
    StatusDetalheAtendimento oStatusSaida;

    bool retorno = proCObtemWFDetalheAtendimento(_idAtendimento,&oDadosSaida,&oStatusSaida);

    if ( retorno )
    {
        if ( saida )
        {
            saida->createTag("AtdDetalheVO");
                saida->addItem("dtAbertura", oDadosSaida.dataAbertura);
                saida->addItem("idContato", oDadosSaida.idContato);
                saida->addItem("dtParaFechamento", oDadosSaida.dataPrazoFinalInterno);
                saida->addItem("idTipoRetorno", oDadosSaida.idTipoRetornoContato);
                saida->addItem("idCanal", oDadosSaida.idCanal);
                saida->addItem("nmCanal", oDadosSaida.nmCanal);
                saida->addItem("idProcedencia", oDadosSaida.idProcedencia);
                saida->addItem("dsProcedencia", oDadosSaida.dsProcedencia);
                saida->addItem("idSegmentacao", oDadosSaida.idSegmentacao);
                saida->addItem("dsSegmentacao", oDadosSaida.dsSegmentacao);
                //saida->addItem("idDiscador", oDadosSaida.idDiscador);
                saida->addItem("idDiscador", 0); // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
                saida->addItem("idAgrEstadoTProc", oDadosSaida.idAgrEstadoTProc);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("nrNivel", oDadosSaida.nrNivel);
                saida->addItem("idFase", oDadosSaida.idFase);
                saida->addItem("idPessoaUsuarioAbertura", oDadosSaida.idPessoaUsuarioAbertura);
                saida->addItem("nmLoginUsuario", oDadosSaida.nmLoginUsuario);
                saida->addItem("idGrupoAbertura", oDadosSaida.idGrupoAbertura);
                saida->addItem("nmGrupoAbertura", oDadosSaida.nmGrupoAbertura);
                saida->addItem("idTipoCarteira", oDadosSaida.idTipoCarteira);
                saida->addItem("dsTipoCarteira", oDadosSaida.dsTipoCarteira);
                saida->addItem("idEstado", oDadosSaida.idEstado);
                saida->addItem("dsEstado", oDadosSaida.dsEstado);
                saida->addItem("idSubEstado", oDadosSaida.idSubEstado);
                saida->addItem("dsSubEstado", oDadosSaida.dsSubEstado);
                saida->addItem("cdConta", oDadosSaida.cdConta);
                saida->addItem("nrLinha", oDadosSaida.nrLinha);
                saida->addItem("idAtendimentoBaixaHistorico", oDadosSaida.idAtendimentoBaixaHistorico);
                saida->addItem("idAtendimentoOrigem", oDadosSaida.idAtendimentoOrigem);
                saida->addItem("dtFechamento", oDadosSaida.dataFechamento);
                saida->addItem("idGrupoAndamento", oDadosSaida.idGrupoAndamento);
                saida->addItem("inCRI", oDadosSaida.inCri);
                saida->addItem("dtPrazoFinalCPrevio", oDadosSaida.dtPrazoFinalCPrevio);
                saida->addItem("idTipoAbertura", oDadosSaida.idTipoAbertura);
                saida->addItem("idPessoa", oDadosSaida.idPessoa);
                saida->addItem("nrProtocolo", oDadosSaida.idAtendimentoProtocolo);
                saida->addItem("idPerfilConsultorAtd", oDadosSaida.idPerfilConsultorAtd);
                saida->addItem("idFornecedorConsultorAtd", oDadosSaida.idFornecedorConsultorAtd);
                saida->addItem("idSiteConsultorAtd", oDadosSaida.idSiteConsultorAtd);

            saida->closeTag();
        }

        if ( _idAgrEstadoTProc )
        {
            *_idAgrEstadoTProc = oDadosSaida.idAgrEstadoTProc;
        }
    }

    ULOG_END( "proCObtemWFDetalheAtendimento(int _idAtendimento,XMLGen *saida,int *_idAgrEstadoTProc)" );

    return retorno;
}

bool proCObtemWFDetalheAtendimento(long _idAtendimento,DetalheAtendimento *pDetalheAtendimento, char * c_idAtendimentoOrigem )
{
    ULOG_START( "proCObtemWFDetalheAtendimento(int _idAtendimento,DetalheAtendimento *pDetalheAtendimento, char * c_idAtendimentoOrigem)" );

    StatusDetalheAtendimento oStatusSaida; /* não exporta estes resultados */

    bool retorno = proCObtemWFDetalheAtendimento( _idAtendimento, pDetalheAtendimento, &oStatusSaida, c_idAtendimentoOrigem );
    
    ULOG( "$$$ proCObtemWFDetalheAtendimento() retornou idAtendimentoOrigem [%ld]", pDetalheAtendimento->idAtendimentoOrigem );
    
    ULOG( "$$$ proCObtemWFDetalheAtendimento() retornou c_idAtendimentoOrigem [%s]", c_idAtendimentoOrigem );

    ULOG_END( "proCObtemWFDetalheAtendimento(int _idAtendimento,DetalheAtendimento *pDetalheAtendimento)" );

    return retorno;
}




bool proCObtemWFDetalheAtendimento(long _idAtendimento,DetalheAtendimento *pDetalheAtendimento)
{
    ULOG_START( "proCObtemWFDetalheAtendimento(int _idAtendimento,DetalheAtendimento *pDetalheAtendimento)" );

    StatusDetalheAtendimento oStatusSaida; /* não exporta estes resultados */

    bool retorno = proCObtemWFDetalheAtendimento(_idAtendimento,pDetalheAtendimento,&oStatusSaida );
    
    ULOG( "$$$ proCObtemWFDetalheAtendimento() retornou idAtendimentoOrigem [%ld]", pDetalheAtendimento->idAtendimentoOrigem );

    ULOG_END( "proCObtemWFDetalheAtendimento(int _idAtendimento,DetalheAtendimento *pDetalheAtendimento)" );

    return retorno;
}


/*
 *
 * OS 1013 - Expurgo
 *
 */
bool proCObtemWFDetalheAtendimentoEx( long _idAtendimento,DetalheAtendimento *pDetalheAtendimento )
{
    ULOG_START( "proCObtemWFDetalheAtendimentoEx()" );

    StatusDetalheAtendimento oStatusSaida; /* não exporta estes resultados */

    bool retorno = proCObtemWFDetalheAtendimentoEx(_idAtendimento,pDetalheAtendimento,&oStatusSaida);

    ULOG_END( "proCObtemWFDetalheAtendimentoEx()" );

    return retorno;
}



bool proCObtemWFDetalheAtendimentoEx_Migracao( long _idAtendimento,DetalheAtendimento *pDetalheAtendimento )
{
    ULOG_START( "proCObtemWFDetalheAtendimentoEx()" );

    StatusDetalheAtendimento oStatusSaida; /* não exporta estes resultados */

    bool retorno = proCObtemWFDetalheAtendimentoEx_Migracao(_idAtendimento,pDetalheAtendimento,&oStatusSaida);

    ULOG_END( "proCObtemWFDetalheAtendimentoEx()" );

    return retorno;
}



bool proCObtemWFidContatoAtendimento( long _idAtendimento , int *_idContato )
{
    ULOG_START( "proCObtemWFidContatoAtendimento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;
        int  idContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            ATENDIMENTO.IDCONTATO
        INTO
            :idContato
        FROM
            ATENDIMENTO.ATENDIMENTO ATENDIMENTO 
        WHERE
            ATENDIMENTO.IDATENDIMENTO = :idAtendimento;

    if ( sqlca.sqlcode == 0 )
    {
        if ( _idContato )
        {
            *_idContato = idContato;
        }
        else
        {
            ULOGW("idAtendimento=%d",idAtendimento);
            ULOGW(erroPonteiroInvalido());
        }
    }
    else
    {
        ULOGW("idAtendimento=%d",idAtendimento);
        ULOGW(resultadoNaoEncontradoSql());
    }

    // EXEC SQL WHENEVER NOT FOUND DO BREAK;
    //
    // ==> Remodelagem Atendimento--Fev/2007--Cassio 
    // EXEC SQL DECLARE ReadContato CURSOR FOR
    //     SELECT 
    //         ATENDIMENTO.IDCONTATO
    //     FROM 
    //         ATENDIMENTO.ATENDIMENTO ATENDIMENTO, 
    //         APOIO.TIPOCARTEIRA TIPOCARTEIRA, 
    //         APOIO.SEGMENTACAO SEGMENTACAO, 
    //         APOIO.PROCEDENCIA PROCEDENCIA,
    //         APOIO.CANAL CANAL,
    //         ACESSO.GRUPO GRUPO, 
    //         ACESSO.USUARIO USUARIO, 
    //         ATENDIMENTO.ATENDIMENTOANDAMENTOATUAL ATENDIMENTOANDAMENTOATUAL, 
    //         ANDAMENTO.ANDAMENTO ANDAMENTO, 
    //         WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRUPAMENTOESTADOTPPROC, 
    //         WORKFLOW.AGRUPAMENTOESTADO AGRUPAMENTOESTADO, 
    //         WORKFLOW.ESTADO ESTADO, 
    //         WORKFLOW.SUBESTADO SUBESTADO,
    //         ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA, 
    //         ATENDIMENTO.ATENDIMENTOLINHA ATENDIMENTOLINHA, 
    //         CUSTOMER.PESSOALINHAHISTORICO PESSOALINHAHISTORICO,
    //         ATENDIMENTO.ATENDIMENTOBAIXAATUAL ATENDIMENTOBAIXAATUAL 
    //     WHERE 
    //         ATENDIMENTO.IDPESSOAUSUARIOABERTURA = USUARIO.IDPESSOAUSUARIO
    //         AND ATENDIMENTO.IDGRUPOABERTURA = GRUPO.IDGRUPO
    //         AND ATENDIMENTO.IDCANAL = CANAL.IDCANAL
    //         AND ATENDIMENTO.IDPROCEDENCIA = PROCEDENCIA.IDPROCEDENCIA
    //         AND ATENDIMENTO.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
    //         AND ATENDIMENTO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOANDAMENTOATUAL.IDATENDIMENTO
    //         AND ATENDIMENTOANDAMENTOATUAL.IDANDAMENTO = ANDAMENTO.IDANDAMENTO
    //         AND ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC
    //         AND AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADO = AGRUPAMENTOESTADO.IDAGRUPAMENTOESTADO
    //         AND AGRUPAMENTOESTADO.IDESTADO = ESTADO.IDESTADO
    //         AND AGRUPAMENTOESTADO.IDSUBESTADO = SUBESTADO.IDSUBESTADO
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO (+)
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOLINHA.IDATENDIMENTO (+)
    //         AND ATENDIMENTOLINHA.IDPESSOALINHAHISTORICO = PESSOALINHAHISTORICO.IDPESSOALINHAHISTORICO (+)
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOBAIXAATUAL.IDATENDIMENTO (+)
    //         AND ATENDIMENTO.IDATENDIMENTO = :idAtendimento;

    // EXEC SQL DECLARE ReadContato CURSOR FOR
    //     SELECT 
    //         ATENDIMENTO.IDCONTATO
    //     FROM 
    //         ATENDIMENTO.ATENDIMENTO ATENDIMENTO, 
    //         APOIO.TIPOCARTEIRA TIPOCARTEIRA, 
    //         APOIO.SEGMENTACAO SEGMENTACAO, 
    //         APOIO.PROCEDENCIA PROCEDENCIA,
    //         APOIO.CANAL CANAL,
    //         ACESSO.GRUPO GRUPO, 
    //         ACESSO.USUARIO USUARIO, 
    //         WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRUPAMENTOESTADOTPPROC, 
    //         WORKFLOW.AGRUPAMENTOESTADO AGRUPAMENTOESTADO, 
    //         WORKFLOW.ESTADO ESTADO, 
    //         WORKFLOW.SUBESTADO SUBESTADO,
    //         ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA, 
    //         CUSTOMER.PESSOALINHAHISTORICO PESSOALINHAHISTORICO,
    //         ATENDIMENTO.ATENDIMENTOBAIXAATUAL ATENDIMENTOBAIXAATUAL 
    //     WHERE 
    //         ATENDIMENTO.IDPESSOAUSUARIOABERTURA = USUARIO.IDPESSOAUSUARIO
    //         AND ATENDIMENTO.IDGRUPOABERTURA = GRUPO.IDGRUPO
    //         AND ATENDIMENTO.IDCANAL = CANAL.IDCANAL
    //         AND ATENDIMENTO.IDPROCEDENCIA = PROCEDENCIA.IDPROCEDENCIA
    //         AND ATENDIMENTO.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
    //         AND ATENDIMENTO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
    //         AND ATENDIMENTO.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC
    //         AND AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADO = AGRUPAMENTOESTADO.IDAGRUPAMENTOESTADO
    //         AND AGRUPAMENTOESTADO.IDESTADO = ESTADO.IDESTADO
    //         AND AGRUPAMENTOESTADO.IDSUBESTADO = SUBESTADO.IDSUBESTADO
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO (+)
    //         AND ATENDIMENTO.IDPESSOALINHAHISTORICO = PESSOALINHAHISTORICO.IDPESSOALINHAHISTORICO (+)
    //         AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOBAIXAATUAL.IDATENDIMENTO (+)
    //         AND ATENDIMENTO.IDATENDIMENTO = :idAtendimento;

    // EXEC SQL OPEN ReadContato;

    // for ( ;; )
    // {
    //     EXEC SQL FETCH ReadContato INTO:idContato;
    // }

    // EXEC SQL CLOSE ReadContato;
   
    // *_idContato = idContato;

    ULOG_END( "proCObtemWFidContatoAtendimento()" );

    return true;
}

bool proCWFObterTipoRetornoAtendimento(long _idAtendimento, int *_idTipoRetornoContato)
{
    ULOG_START( "proCWFObterTipoRetornoAtendimento()" );

    bool retorno = true;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = _idAtendimento;
        int idTipoRetornoContato;

        short i_idTipoRetornoContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            IDTIPORETORNOCONTATO
        INTO
            :idTipoRetornoContato:i_idTipoRetornoContato
        FROM
            ATENDIMENTO.ATENDIMENTO
        WHERE
            IDATENDIMENTO = :idAtendimento;

    if ( sqlca.sqlcode == 0 )
    {
        ULOG("idTipoRetornoContato=%d",idTipoRetornoContato);

        if ( idTipoRetornoContato > TP_RET_SEM_RETORNO && 
             idTipoRetornoContato < TP_RET_COM_RET_GRP_CRI )
        { // se o processo foi criado para ir para grupo de retorno, então determina em
          // tempo real o tipo de retorno (vide DES BUG_3271_DES - Atualizada Gestão de Processos - Fase Retorno v.2.3.doc)
            proCObterTipoRetornoContato(idAtendimento,_idTipoRetornoContato);
        }
    }
    else
    {
        ULOGW(resultadoNaoEncontradoSql());

        retorno = false;
    }

    ULOG_END( "proCWFObterTipoRetornoAtendimento()" );

    return retorno;
}

int proCObterTipoGrupo(long _idAtendimento)
{
    ULOG_START("proCObterTipoGrupo()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = _idAtendimento;
        int count;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :count
        FROM
            ATENDIMENTO.GRUPOCRI
        WHERE
            IDATENDIMENTO = :idAtendimento;

    ULOG_END("proCObterTipoGrupo()");

    return count == 0 ? TIPO_GRUPO_BKO : TIPO_GRUPO_CRI;
}

bool proCObterNrProtocolo(long _idAtendimento,char *_idAtendimentoProtocolo)
{
    ULOG_START("proCObterNrProtocolo()");

    struct sqlca sqlca;
    bool retorno = false;

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimento = _idAtendimento;
        VARCHAR idAtendimentoProtocolo[32];
        short i_idAtendimentoProtocolo = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL
	    SELECT
		    idAtendimentoProtocolo
        INTO
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo
	    FROM
		    (
	            SELECT
	                IDATENDIMENTOPROTOCOLO,INSMP
	            FROM
	                ATENDIMENTO.ATENDIMENTO
	            WHERE
	                IDATENDIMENTO = :idAtendimento
			    ORDER BY
			        INSMP DESC
		    )
	    WHERE
            ROWNUM < 2;

    if ( 0 == sqlca.sqlcode )
    {
        CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
        strcpy(_idAtendimentoProtocolo,(char*)idAtendimentoProtocolo.arr);
        retorno = true;
    }

    ULOG_END("proCObterNrProtocolo()");

    return retorno;
}

bool proCObtemWFAtdLinhas(int idConta , XMLGen *saida )
{
    ULOG_START( "proCObtemWFAtdLinhas()" );

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idconta = idConta;
        int     idPessoaLinha;
        int     cdAreaRegistro;
        int     nrLinha;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL DECLARE SQLObtemLinhas CURSOR FOR 
        SELECT 
              LT.IDLINHATELEFONICA,
              AR.CDAREAREGISTRO,
              LB.NRLINHA
        FROM  CUSTOMER.CONTA C,
              APOIO.AREAREGISTRO AR,
              LINHA.LINHABASE LB,
              LINHA.LINHATELEFONICA LT,
              CUSTOMER.TIPORELACIONAMENTO TR,
              CUSTOMER.LINHACONTA LC
        WHERE LC.IDCONTA = :idconta
          AND LC.IDCONTA = C.IDCONTA
          AND LC.IDTIPORELACIONAMENTO = TR.IDTIPORELACIONAMENTO
          AND LC.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
          AND LT.IDLINHABASE = LB.IDLINHABASE
          AND LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
          AND ROWNUM < 11;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL OPEN SQLObtemLinhas;

    saida->createTag("ContaVO");
        saida->addProp( "xmlns","workflow.fo.vivo.com.br/vo" );

    while (true)
    {
        EXEC SQL FETCH SQLObtemLinhas INTO 
                                            :idPessoaLinha, 
                                            :cdAreaRegistro, 
                                            :nrLinha ;
         
        saida->createTag( "LinhaVO" );
            saida->addItem( "idPessoaLinhaHistorico" , idPessoaLinha );
            saida->addItem( "cdAreaRegistro", cdAreaRegistro );
            saida->addItem( "nrLinha", nrLinha );
        saida->closeTag();

    }
    saida->closeTag();

    EXEC SQL CLOSE SQLObtemLinhas;

    ULOG_END( "proCObtemWFAtdLinhas()" );

    return true;
}

bool proCObtemWFAtdPessoa( int idPessoaDePara , XMLGen *saida )
{
    ULOG_START( "proCObtemWFAtdPessoa()" );

    ULOG("idPessoaDePara (%d)", idPessoaDePara);

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idpessoadepara = idPessoaDePara;
        VARCHAR nmPessoa[256];
        short   i_nmPessoa=-1;
    EXEC SQL END DECLARE SECTION;
   
    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idpessoadepara=%d",idpessoadepara);

    EXEC SQL 
    SELECT 
        P.NMPESSOA
    INTO
        :nmPessoa:i_nmPessoa
    FROM 
        CUSTOMER.PESSOA P,
        CUSTOMER.PESSOADEPARA PDP
    WHERE 
        PDP.IDPESSOADEPARA = :idpessoadepara
      AND 
        PDP.IDPESSOA = P.IDPESSOA;

    CONVIND(nmPessoa,i_nmPessoa)

    if (i_nmPessoa != -1)
    {
        saida->createTag( "PessoaVO" );
            saida->addItem( "id" , idPessoaDePara );
            saida->addItem( "nome",(char *)nmPessoa.arr );
         saida->closeTag();
    }

    ULOG_END( "proCObtemWFAtdPessoa()" );

    return true;
}

bool proCObtemWFAtdCanal( int idCanal , XMLGen *saida )
{
    ULOG_START( "proCObtemWFAtdCanal()" );

    ULOG("idCanal (%d)", idCanal);

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idcanal = idCanal;
        VARCHAR nmCanal[ 256 ];
        short   i_nmCanal=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idcanal=%d",idcanal);

    EXEC SQL 
    SELECT 
        nmCanal
    INTO
        :nmCanal:i_nmCanal
    FROM   
        apoio.Canal
    WHERE  
        idCanal = :idcanal;
   
    CONVIND(nmCanal, i_nmCanal)

    if (i_nmCanal != -1)
    {
        saida->createTag( "CanalVO" );
           saida->addItem( "id" , idcanal );
           saida->addItem( "descricao",(char *)nmCanal.arr );
        saida->closeTag();
    }

    ULOG_END( "proCObtemWFAtdCanal()" );

    return true;
}

bool proCObtemWFTipoComunic( int idPessoaDePara , XMLGen *saida )
{
    ULOG_START( "proCObtemWFTipoComunic()" );

    ULOG("idPessoaDePara (%d)", idPessoaDePara);

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idpessoadepara = idPessoaDePara;
        int     idTipoComunicacao;
        VARCHAR dsTpComunicacao[256];

        short   i_dsTpComunicacao;
    EXEC SQL END DECLARE SECTION;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL DECLARE SQLObtemTpComunic CURSOR FOR 
    SELECT
            idTipoComunicacao,
            dsTipoComunicacao                                                                                                                                                                                                                                               
    FROM  
            customer.PessoaDeParaComunicacaoV01
    WHERE
            idPessoaDePara = :idpessoadepara;
  
    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;
    
    EXEC SQL OPEN SQLObtemTpComunic;

    saida->createTag( "TipoComunicacaoVO" );
    while (true)
    {
        EXEC SQL FETCH SQLObtemTpComunic INTO 
                                                :idTipoComunicacao, 
                                                :dsTpComunicacao:i_dsTpComunicacao;
         
        CONVIND(dsTpComunicacao,i_dsTpComunicacao)

        saida->createTag( "TipoContatoVO" );
            saida->addItem( "idTipoComunicacao", idTipoComunicacao );
            saida->addItem( "descricao", (char *)dsTpComunicacao.arr );
        saida->closeTag();
    }
    saida->closeTag();

    EXEC SQL CLOSE SQLObtemTpComunic;

    ULOG_END( "proCObtemWFTipoComunic()" );

    return true;
}

bool proCObtemWFComunicacao( int idPessoaComunic , XMLGen *saida )
{
    ULOG_START( "proCObtemWFComunicacao()" );

    ULOG("idPessoaComunic (%d)",idPessoaComunic);

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idpessocacomunic = idPessoaComunic;
        int     idComunicacao;
        VARCHAR dsContato[ 256 ];

        short   i_dsContato;
    EXEC SQL END DECLARE SECTION;
   
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    sqlca.sqlcode =  0;
   
    EXEC SQL DECLARE SQLObtemComunic CURSOR FOR 
    SELECT 
        idTipoComunicacao,
        dsContato
    FROM 
        customer.PessoaComunicacao
    WHERE 
        idPessoaComunicacao = :idpessocacomunic;
  
    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN SQLObtemComunic;

    while (true)
    {
        EXEC SQL FETCH SQLObtemComunic INTO :idComunicacao, :dsContato:i_dsContato;

        CONVIND(dsContato,i_dsContato)
                 
        saida->createTag( "ComunicacaoVO" );
            saida->addItem( "idComunicacao" , idComunicacao );
            saida->addItem( "descricao",(char *)dsContato.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE SQLObtemComunic;

    ULOG_END( "proCObtemWFComunicacao()" );

    return true;    
}

bool proCObtemWFPessoaComunic( int idPessoaDePara , XMLGen *saida )
{
    ULOG_START( "proCObtemWFPessoaComunic()" );

    ULOG("idPessoaDePara (%d)",idPessoaDePara);

    struct sqlca sqlca;
    int  iTipoComunicPrinc = -9;
    bool NovoTipoComunic = false;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int      idpessoadepara = idPessoaDePara;
        int      idTipoComunicacao;
        int      idPessoaComunicacao;
        VARCHAR  dsTipoComunicacao[256];
        VARCHAR  dsContato[256];

        short    i_dsTipoComunicacao;
        short    i_dsContato;

        int      idSegmentacao;
        int      idTipoCarteira;

        short    i_idSegmentacao = -1;
        short    i_idTipoCarteira = -1;
        short    i_idTipoComunicacao = -1;
        short    i_idPessoaComunicacao = -1;
    EXEC SQL END DECLARE SECTION;
   
    sqlca.sqlcode =  0;

    ULOG("idpessoadepara=%d",idpessoadepara);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    SELECT 
        idSegmentacao,
        idTipoCarteira
    INTO 
        :idSegmentacao:i_idSegmentacao,
        :idTipoCarteira:i_idTipoCarteira
    FROM 
        customer.PessoaCarteiraSegmentacaoV01
    WHERE
        idPessoaDePara = :idpessoadepara
    AND ROWNUM < 2;

    if (i_idSegmentacao == -1)
        idSegmentacao = 0;

    if (i_idTipoCarteira == -1)
        idTipoCarteira = 0;

    int idTpComunicacao = proCObtemWFComunicacaoDefault(idPessoaDePara);

    EXEC SQL DECLARE SQLObtemPessoaComunic CURSOR FOR 
    SELECT
        pc.idPessoaComunicacao,
        pc.idTipoComunicacao,
        tc.dsTipoComunicacao,
        pc.dsContato
    FROM 
        customer.PessoaComunicacao pc,
        apoio.tipoComunicacao tc
    WHERE 
        pc.idtipocomunicacao = tc.idtipocomunicacao
    AND idPessoa = :idpessoadepara
    AND tc.idformaretorno > 0
    ORDER BY
        idTipoComunicacao, nrSequencia;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN SQLObtemPessoaComunic;

    if( sqlca.sqlcode )
    {
        sql_error_WFAtendimento( &sqlca );
    }
    else
    {
         saida->createTag( "PessoaVO" );
         saida->addItem( "idPessoa" , idPessoaDePara );
         saida->addItem( "idTipoComunicacao" , idTpComunicacao );
            saida->createTag( "CarterizacaoVO" );
               saida->addItem( "idTipoCarteira" , CONVINT(idTipoCarteira,i_idTipoCarteira) );
            saida->closeTag();
            saida->createTag( "SegmentacaoVO" );
               saida->addItem( "idSegmentacao" , CONVINT(idSegmentacao,i_idSegmentacao) );
            saida->closeTag();
         for( ;; )
         {
          EXEC SQL FETCH SQLObtemPessoaComunic INTO 
                                                    :idPessoaComunicacao:i_idPessoaComunicacao,
                                                    :idTipoComunicacao:i_idTipoComunicacao,
                                                    :dsTipoComunicacao:i_dsTipoComunicacao,
                                                    :dsContato:i_dsContato;

            CONVIND(dsTipoComunicacao, i_dsTipoComunicacao)
            CONVIND(dsContato, i_dsContato)

            if ( iTipoComunicPrinc != idTipoComunicacao )
            {
                if ( NovoTipoComunic == true )
                {
                    NovoTipoComunic = false;
                    saida->closeTag();
                }
                iTipoComunicPrinc = idTipoComunicacao;
                saida->createTag( "AtendimentoTipoComunicacaoVO" );
            saida->addItem( "idTipoComunicacao" , CONVINT(idTipoComunicacao,i_idTipoComunicacao) );
                    saida->addItem( "descricao", (char *) dsTipoComunicacao.arr );

            }

            saida->createTag( "AtendimentoComunicacaoVO" );
                saida->addItem( "idComunicacao" , CONVINT(idPessoaComunicacao,i_idPessoaComunicacao) );
                saida->addItem( "descricao",(char *)dsContato.arr );
                NovoTipoComunic = true;
            saida->closeTag();
         
         }

         if ( NovoTipoComunic == true )
            saida->closeTag();

         saida->closeTag();
         EXEC SQL CLOSE SQLObtemPessoaComunic;
    }
   
    ULOG_END( "proCObtemWFPessoaComunic()" );

    return true;
}

bool proCObtemWFPessoaComunic2( int idPessoaDePara , long idPessoa, XMLGen *saida )
{
    ULOG_START( "proCObtemWFPessoaComunic2()" );

    ULOG("idPessoaDePara (%d) idPessoa (%ld) )",idPessoaDePara,idPessoa);

    struct sqlca sqlca;
    int  iTipoComunicPrinc = -9;
    bool NovoTipoComunic = false;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int      idpessoadepara = idPessoaDePara;
        long      idpessoa = idPessoa;
        int      idTipoComunicacao;
        int      idPessoaComunicacao;
        VARCHAR  dsTipoComunicacao[256];
        VARCHAR  dsContato[256];

        short    i_dsTipoComunicacao;
        short    i_dsContato;

        int      idSegmentacao;
        int      idTipoCarteira;

        short    i_idSegmentacao = -1;
        short    i_idTipoCarteira = -1;
        short    i_idTipoComunicacao = -1;
        short    i_idPessoaComunicacao = -1;
    EXEC SQL END DECLARE SECTION;
   
    sqlca.sqlcode =  0;

    ULOG("idpessoadepara=%d",idpessoadepara);
    ULOG("idpessoa=%ld",idpessoa);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
    SELECT 
        idSegmentacao,
        idTipoCarteira
    INTO 
        :idSegmentacao:i_idSegmentacao,
        :idTipoCarteira:i_idTipoCarteira
    FROM 
        customer.PessoaCarteiraSegmentacaoV01
    WHERE
        idPessoaDePara = :idpessoadepara
        AND rownum < 2;

    if (i_idSegmentacao == -1)
        idSegmentacao = 0;

    if (i_idTipoCarteira == -1)
        idTipoCarteira = 0;

    int idTpComunicacao = proCObtemWFComunicacaoDefault(idPessoaDePara);

    EXEC SQL DECLARE SQLObtemPessoaComunic2 CURSOR FOR 
        SELECT
            pc.idPessoaComunicacao,
            pc.idTipoComunicacao,
            tc.dsTipoComunicacao,
            pc.dsContato
        FROM 
            customer.PessoaComunicacao pc,
            apoio.tipoComunicacao tc
        WHERE 
            pc.idtipocomunicacao = tc.idtipocomunicacao
            and idPessoa = :idpessoa
            and tc.idformaretorno > 0
        ORDER BY
            idTipoComunicacao, nrSequencia;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN SQLObtemPessoaComunic2;

    if( sqlca.sqlcode )
    {
        sql_error_WFAtendimento( &sqlca );
    }
    else
    {
         saida->createTag( "PessoaVO" );
         saida->addItem( "idPessoa" , idPessoaDePara );
         saida->addItem( "idTipoComunicacao" , idTpComunicacao );
            saida->createTag( "CarterizacaoVO" );
               saida->addItem( "idTipoCarteira" , CONVINT(idTipoCarteira,i_idTipoCarteira) );
            saida->closeTag();
            saida->createTag( "SegmentacaoVO" );
               saida->addItem( "idSegmentacao" , CONVINT(idSegmentacao,i_idSegmentacao) );
            saida->closeTag();
         for( ;; )
         {
          EXEC SQL FETCH SQLObtemPessoaComunic2 INTO 
                                                    :idPessoaComunicacao:i_idPessoaComunicacao,
                                                    :idTipoComunicacao:i_idTipoComunicacao,
                                                    :dsTipoComunicacao:i_dsTipoComunicacao,
                                                    :dsContato:i_dsContato;

            CONVIND(dsTipoComunicacao, i_dsTipoComunicacao)
            CONVIND(dsContato, i_dsContato)

            if ( iTipoComunicPrinc != idTipoComunicacao )
            {
                if ( NovoTipoComunic == true )
                {
                    NovoTipoComunic = false;
                    saida->closeTag();
                }
                iTipoComunicPrinc = idTipoComunicacao;
                saida->createTag( "AtendimentoTipoComunicacaoVO" );
            saida->addItem( "idTipoComunicacao" , CONVINT(idTipoComunicacao,i_idTipoComunicacao) );
                    saida->addItem( "descricao", (char *) dsTipoComunicacao.arr );

            }

            saida->createTag( "AtendimentoComunicacaoVO" );
                saida->addItem( "idComunicacao" , CONVINT(idPessoaComunicacao,i_idPessoaComunicacao) );
                saida->addItem( "descricao",(char *)dsContato.arr );
                NovoTipoComunic = true;
            saida->closeTag();
         
         }

         if ( NovoTipoComunic == true )
            saida->closeTag();

         saida->closeTag();
         EXEC SQL CLOSE SQLObtemPessoaComunic2;
    }
   
    ULOG_END( "proCObtemWFPessoaComunic2()" );

    return true;
}
/******************************************************************************************
*
* FIM DOS METODOS ObtemXXXX que retornam dados especificos de atendimento
*
********************************************************************/

/******************************************************************************************
*
* INICIO de pesquisas em geral de atendimento
*
********************************************************************/
bool proCConsultaWFAtendimento(st_Atendimento* dados, st_vlAtendimento* status, char* order, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR dtAbertura[256];
        int idContato;
        VARCHAR dtPrazoFinalInterno[256];
        int qtInsistencia;
        int inAlarme;
        int idCanal;
        int idProcedencia;
        int idTipoCarteira;
        int idSegmentacao;
        //int idDiscador; // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
        long idPessoaUsuarioAbertura;
        int idGrupoAbertura;
        VARCHAR dtPrazoFinalAnatel[256];
        int  idUsuarioAlteracao;
        VARCHAR dtUltimaAlteracao[256];
        int  nrNivel;
        int  idFase;
        int  qtHorasPrazoAtendimento;
        VARCHAR vlPesoAtendimento[256];
        int  idTipoRetornoContato;

		VARCHAR strIdAtendimento[256];

        char query[2000] = "SELECT "
                                "idAtendimento,"
                                "TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'),"
                                "idContato,"
                                "TO_CHAR(dtPrazoFinalInterno,'dd/mm/yyyy hh24:mi'),"
                                "qtInsistencia,"
                                "inAlarme,"
                                "idCanal,"
                                "idProcedencia,"
                                "idTipoCarteira,"
                                "idSegmentacao,"
                                //"idDiscador,"
                                "idPessoaUsuarioAbertura,"
                                "idGrupoAbertura,"
                                "TO_CHAR(dtPrazoFinalAnatel,'dd/mm/yyyy hh24:mi'),"
                                "nrNivel,"
                                "idFase,"
                                "qtHorasPrazoAtendimento,"
                                "vlPesoAtendimento,"
                                "idTipoRetornoContato,"
                                "idUsuarioAlteracao,"
                                "TO_CHAR(dtUltimaAlteracao, 'DD/MM/YYYY') as dtUltimaAlteracao "
                        "FROM atendimento.Atendimento ";

        short i_idAtendimento;
        short i_dtAbertura;
        short i_idContato;
        short i_dtPrazoFinalInterno;
        short i_qtInsistencia;
        short i_inAlarme;
        short i_idCanal;
        short i_idProcedencia;
        short i_idTipoCarteira;
        short i_idSegmentacao;
        //short i_idDiscador;
        short i_idPessoaUsuarioAbertura;
        short i_idGrupoAbertura;
        short i_dtPrazoFinalAnatel;
        short i_idUsuarioAlteracao;
        short i_dtUltimaAlteracao;
        short i_nrNivel;
        short i_idFase;
        short i_qtHorasPrazoAtendimento;
        short i_vlPesoAtendimento;
        short i_idTipoRetornoContato;

    EXEC SQL END DECLARE SECTION;

	ULOG("conteudo do idAtendimento");
	ULOG("dados->idAtendimento=[%ld]",dados->idAtendimento);
	sprintf((char *)strIdAtendimento.arr,"%ld", dados->idAtendimento);
	ULOG("(char *)strIdAtendimento.arr=[%s]",(char *)strIdAtendimento.arr);
	

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    bool separa = false;

    if (status->idAtendimento != -1) 
	{
        //montaWhere("idAtendimento", dados->idAtendimento, 1);
		//montaWhere("idAtendimento", (char *)strIdAtendimento.arr, 1);
		
		char sTemp[256]; memset(sTemp,0,sizeof(sTemp));
		sprintf(sTemp, " where idAtendimento = %s ", (char *)strIdAtendimento.arr);
		ULOG("sTemp=[%s]",sTemp);
		strcat (query,sTemp);
		ULOG("query=[%s]",query);
	}

    if (status->dtAbertura != -1)
        montaWhere("dtAbertura", dados->dtAbertura, 4);

    if (status->idContato != -1) 
        montaWhere("idContato", dados->idContato, 1);

    if (status->dtPrazoFinalInterno != -1)
        montaWhere("dtPrazoFinalInterno", dados->dtPrazoFinalInterno, 4);

    if (status->qtInsistencia != -1) 
        montaWhere("qtInsistencia", dados->qtInsistencia, 1);

    if (status->inAlarme != -1) 
        montaWhere("inAlarme", dados->inAlarme, 1);

    if (status->idCanal != -1) 
        montaWhere("idCanal", dados->idCanal, 1);

    if (status->idProcedencia != -1) 
        montaWhere("idProcedencia", dados->idProcedencia, 1);

    if (status->idTipoCarteira != -1) 
        montaWhere("idTipoCarteira", dados->idTipoCarteira, 1);

    if (status->idSegmentacao != -1) 
        montaWhere("idSegmentacao", dados->idSegmentacao, 1);

    //if (status->idDiscador != -1) // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
    //    montaWhere("idDiscador", dados->idDiscador, 1);

    if (status->idPessoaUsuarioAbertura != -1) 
        montaWhere("idPessoaUsuarioAbertura", dados->idPessoaUsuarioAbertura, 1);

    if (status->idGrupoAbertura != -1) 
        montaWhere("idGrupoAbertura", dados->idGrupoAbertura, 1);

    if (status->dtPrazoFinalAnatel != -1) 
        montaWhere("dtPrazoFinalAnatel", dados->dtPrazoFinalAnatel, 4);

    if (status->idUsuarioAlteracao != -1) 
        montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, 1);

    if (status->dtUltimaAlteracao != -1) 
        montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, 4);

    if (status->nrNivel != -1) 
        montaWhere("nrNivel", dados->nrNivel, 1);

    if (status->idFase != -1) 
        montaWhere("idFase", dados->idFase, 1);

    if (status->qtHorasPrazoAtendimento != -1) 
        montaWhere("qtHorasPrazoAtendimento", dados->qtHorasPrazoAtendimento, 1);

    if (status->vlPesoAtendimento != -1) 
        montaWhere("vlPesoAtendimento", dados->vlPesoAtendimento, WHERE_CHAR);

    if (status->idTipoRetornoContato != -1) 
        montaWhere("idTipoRetornoContato", dados->idTipoRetornoContato, 1);

    if (strlen(order) > 0) 
    {
        sprintf( query, "%s ORDER BY %s ", query, order);
    }

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);

	ULOG("query=[%s]",query);
	
    EXEC SQL PREPARE consultaAtendimento FROM :query;
	
	ULOG("query=[%s]",query);
	
    EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimento;

    EXEC SQL OPEN consulta;

    while (true)
    {
        i_idAtendimento = -1;
        i_dtAbertura = -1;
        i_idContato = -1;
        i_dtPrazoFinalInterno = -1;
        i_qtInsistencia = -1;
        i_inAlarme = -1;
        i_idCanal = -1;
        i_idProcedencia = -1;
        i_idTipoCarteira = -1;
        i_idSegmentacao = -1;
        //i_idDiscador = -1;
        i_idPessoaUsuarioAbertura = -1;
        i_idGrupoAbertura = -1;
        i_dtPrazoFinalAnatel = -1;
        i_idUsuarioAlteracao = -1;
        i_dtUltimaAlteracao = -1;
        i_nrNivel = -1;
        i_idFase = -1;
        i_qtHorasPrazoAtendimento = -1;
        i_vlPesoAtendimento = -1;
        i_idTipoRetornoContato = -1;

        EXEC SQL FETCH consulta INTO 
                                    :idAtendimento:i_idAtendimento, 
                                    :dtAbertura:i_dtAbertura, 
                                    :idContato:i_idContato, 
                                    :dtPrazoFinalInterno:i_dtPrazoFinalInterno, 
                                    :qtInsistencia:i_qtInsistencia, 
                                    :inAlarme:i_inAlarme, 
                                    :idCanal:i_idCanal, 
                                    :idProcedencia:i_idProcedencia, 
                                    :idTipoCarteira:i_idTipoCarteira, 
                                    :idSegmentacao:i_idSegmentacao, 
                                    //:idDiscador:i_idDiscador, // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
                                    :idPessoaUsuarioAbertura:i_idPessoaUsuarioAbertura,
                                    :idGrupoAbertura:i_idGrupoAbertura,
                                    :dtPrazoFinalAnatel:i_dtPrazoFinalAnatel,
                                    :nrNivel:i_nrNivel,
                                    :idFase:i_idFase,
                                    :qtHorasPrazoAtendimento:i_qtHorasPrazoAtendimento,
                                    :vlPesoAtendimento:i_vlPesoAtendimento,
                                    :idTipoRetornoContato:i_idTipoRetornoContato,
                                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                                    :dtUltimaAlteracao:i_dtUltimaAlteracao;

        CONV(dtAbertura);
        CONV(dtPrazoFinalInterno);
        CONVIND(dtPrazoFinalAnatel,i_dtPrazoFinalAnatel);
        CONVIND(dtUltimaAlteracao,i_dtUltimaAlteracao);
        CONVIND(vlPesoAtendimento,i_vlPesoAtendimento);

        saida->createTag("WFAtendimentoVO");
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("dtAbertura", (char *)dtAbertura.arr);
            saida->addItem("idContato", idContato);
            saida->addItem("dtPrazoFinalInterno", (char *)dtPrazoFinalInterno.arr);
            saida->addItem("qtInsistencia", qtInsistencia);
            saida->addItem("inAlarme", inAlarme);
            saida->addItem("idCanal", idCanal);
            saida->addItem("idProcedencia", idProcedencia);
            saida->addItem("idTipoCarteira", idTipoCarteira);
            saida->addItem("idSegmentacao", idSegmentacao);
            //saida->addItem("idDiscador", idDiscador);
            saida->addItem("idDiscador", 0); // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
            saida->addItem("idPessoaUsuarioAbertura", idPessoaUsuarioAbertura);
            saida->addItem("idGrupoAbertura", idGrupoAbertura);
            saida->addItem("dtPrazoFinalAnatel", (char*)dtPrazoFinalAnatel.arr);
            saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
            saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
            saida->addItem("nrNivel", nrNivel);
            saida->addItem("idFase", idFase);
            saida->addItem("qtHorasPrazoAtendimento", qtHorasPrazoAtendimento);
            saida->addItem("vlPesoAtendimento", (char*)vlPesoAtendimento.arr);
            saida->addItem("idTipoRetornoContato", idTipoRetornoContato);
        saida->closeTag();
    }

    EXEC SQL CLOSE consulta;

    ULOG_END( "proCConsultaWFAtendimento()" );

    return true;
}



bool proCConsultaWFAtendimentoEx( st_Atendimento * dados, st_vlAtendimento * status, char * order, XMLGen * saida )
{
    ULOG_START( "proCConsultaWFAtendimentoEx()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR dtAbertura[256];
        int idContato;
        VARCHAR dtPrazoFinalInterno[256];
        int qtInsistencia;
        int inAlarme;
        int idCanal;
        int idProcedencia;
        int idTipoCarteira;
        int idSegmentacao;
        long idPessoaUsuarioAbertura;
        int idGrupoAbertura;
        VARCHAR dtPrazoFinalAnatel[256];
        int  idUsuarioAlteracao;
        VARCHAR dtUltimaAlteracao[256];
        int  nrNivel;
        int  idFase;
        int  qtHorasPrazoAtendimento;
        VARCHAR vlPesoAtendimento[256];
        int  idTipoRetornoContato;

        char query[800] = "SELECT "
                                "idAtendimento,"
                                "TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'),"
                                "idContato,"
                                "TO_CHAR(dtPrazoFinalInterno,'dd/mm/yyyy hh24:mi'),"
                                "qtInsistencia,"
                                "inAlarme,"
                                "idCanal,"
                                "idProcedencia,"
                                "idTipoCarteira,"
                                "idSegmentacao,"
                                "idPessoaUsuarioAbertura,"
                                "idGrupoAbertura,"
                                "TO_CHAR(dtPrazoFinalAnatel,'dd/mm/yyyy hh24:mi'),"
                                "nrNivel,"
                                "idFase,"
                                "qtHorasPrazoAtendimento,"
                                "vlPesoAtendimento,"
                                "idTipoRetornoContato,"
                                "null as idUsuarioAlteracao,"
                                "null as dtUltimaAlteracao "
                        "FROM FOHIST_OW.Atendimento ";

        short i_idAtendimento;
        short i_dtAbertura;
        short i_idContato;
        short i_dtPrazoFinalInterno;
        short i_qtInsistencia;
        short i_inAlarme;
        short i_idCanal;
        short i_idProcedencia;
        short i_idTipoCarteira;
        short i_idSegmentacao;
        short i_idPessoaUsuarioAbertura;
        short i_idGrupoAbertura;
        short i_dtPrazoFinalAnatel;
        short i_idUsuarioAlteracao;
        short i_dtUltimaAlteracao;
        short i_nrNivel;
        short i_idFase;
        short i_qtHorasPrazoAtendimento;
        short i_vlPesoAtendimento;
        short i_idTipoRetornoContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    bool separa = false;

    if (status->idAtendimento != -1) 
        montaWhere("idAtendimento", dados->idAtendimento, 1);

    if (status->dtAbertura != -1)
        montaWhere("dtAbertura", dados->dtAbertura, 4);

    if (status->idContato != -1) 
        montaWhere("idContato", dados->idContato, 1);

    if (status->dtPrazoFinalInterno != -1)
        montaWhere("dtPrazoFinalInterno", dados->dtPrazoFinalInterno, 4);

    if (status->qtInsistencia != -1) 
        montaWhere("qtInsistencia", dados->qtInsistencia, 1);

    if (status->inAlarme != -1) 
        montaWhere("inAlarme", dados->inAlarme, 1);

    if (status->idCanal != -1) 
        montaWhere("idCanal", dados->idCanal, 1);

    if (status->idProcedencia != -1) 
        montaWhere("idProcedencia", dados->idProcedencia, 1);

    if (status->idTipoCarteira != -1) 
        montaWhere("idTipoCarteira", dados->idTipoCarteira, 1);

    if (status->idSegmentacao != -1) 
        montaWhere("idSegmentacao", dados->idSegmentacao, 1);

    if (status->idPessoaUsuarioAbertura != -1) 
        montaWhere("idPessoaUsuarioAbertura", dados->idPessoaUsuarioAbertura, 1);

    if (status->idGrupoAbertura != -1) 
        montaWhere("idGrupoAbertura", dados->idGrupoAbertura, 1);

    if (status->dtPrazoFinalAnatel != -1) 
        montaWhere("dtPrazoFinalAnatel", dados->dtPrazoFinalAnatel, 4);

    if (status->idUsuarioAlteracao != -1) 
        montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, 1);

    if (status->dtUltimaAlteracao != -1) 
        montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, 4);

    if (status->nrNivel != -1) 
        montaWhere("nrNivel", dados->nrNivel, 1);

    if (status->idFase != -1) 
        montaWhere("idFase", dados->idFase, 1);

    if (status->qtHorasPrazoAtendimento != -1) 
        montaWhere("qtHorasPrazoAtendimento", dados->qtHorasPrazoAtendimento, 1);

    if (status->vlPesoAtendimento != -1) 
        montaWhere("vlPesoAtendimento", dados->vlPesoAtendimento, WHERE_CHAR);

    if (status->idTipoRetornoContato != -1) 
        montaWhere("idTipoRetornoContato", dados->idTipoRetornoContato, 1);

    if (strlen(order) > 0) 
    {
        sprintf( query, "%s ORDER BY %s ", query, order);
    }

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);

    EXEC SQL PREPARE consultaAtendimentoEx FROM :query;
    EXEC SQL DECLARE consultaEx CURSOR FOR consultaAtendimentoEx;

    EXEC SQL OPEN consultaEx;

    while (true)
    {
        i_idAtendimento = -1;
        i_dtAbertura = -1;
        i_idContato = -1;
        i_dtPrazoFinalInterno = -1;
        i_qtInsistencia = -1;
        i_inAlarme = -1;
        i_idCanal = -1;
        i_idProcedencia = -1;
        i_idTipoCarteira = -1;
        i_idSegmentacao = -1;
        i_idPessoaUsuarioAbertura = -1;
        i_idGrupoAbertura = -1;
        i_dtPrazoFinalAnatel = -1;
        i_idUsuarioAlteracao = -1;
        i_dtUltimaAlteracao = -1;
        i_nrNivel = -1;
        i_idFase = -1;
        i_qtHorasPrazoAtendimento = -1;
        i_vlPesoAtendimento = -1;
        i_idTipoRetornoContato = -1;

        EXEC SQL FETCH consultaEx INTO 
                                    :idAtendimento:i_idAtendimento, 
                                    :dtAbertura:i_dtAbertura, 
                                    :idContato:i_idContato, 
                                    :dtPrazoFinalInterno:i_dtPrazoFinalInterno, 
                                    :qtInsistencia:i_qtInsistencia, 
                                    :inAlarme:i_inAlarme, 
                                    :idCanal:i_idCanal, 
                                    :idProcedencia:i_idProcedencia, 
                                    :idTipoCarteira:i_idTipoCarteira, 
                                    :idSegmentacao:i_idSegmentacao, 
                                    :idPessoaUsuarioAbertura:i_idPessoaUsuarioAbertura,
                                    :idGrupoAbertura:i_idGrupoAbertura,
                                    :dtPrazoFinalAnatel:i_dtPrazoFinalAnatel,
                                    :nrNivel:i_nrNivel,
                                    :idFase:i_idFase,
                                    :qtHorasPrazoAtendimento:i_qtHorasPrazoAtendimento,
                                    :vlPesoAtendimento:i_vlPesoAtendimento,
                                    :idTipoRetornoContato:i_idTipoRetornoContato,
                                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                                    :dtUltimaAlteracao:i_dtUltimaAlteracao;

        CONV(dtAbertura);
        CONV(dtPrazoFinalInterno);
        CONVIND(dtPrazoFinalAnatel,i_dtPrazoFinalAnatel);
        CONVIND(dtUltimaAlteracao,i_dtUltimaAlteracao);
        CONVIND(vlPesoAtendimento,i_vlPesoAtendimento);

        saida->createTag("WFAtendimentoVO");
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("dtAbertura", (char *)dtAbertura.arr);
            saida->addItem("idContato", idContato);
            saida->addItem("dtPrazoFinalInterno", (char *)dtPrazoFinalInterno.arr);
            saida->addItem("qtInsistencia", qtInsistencia);
            saida->addItem("inAlarme", inAlarme);
            saida->addItem("idCanal", idCanal);
            saida->addItem("idProcedencia", idProcedencia);
            saida->addItem("idTipoCarteira", idTipoCarteira);
            saida->addItem("idSegmentacao", idSegmentacao);
            saida->addItem("idDiscador", 0); // Remodelagem de ATENDIMENTO.ATENDIMENTO - idDiscador não existe mais
            saida->addItem("idPessoaUsuarioAbertura", idPessoaUsuarioAbertura);
            saida->addItem("idGrupoAbertura", idGrupoAbertura);
            saida->addItem("dtPrazoFinalAnatel", (char*)dtPrazoFinalAnatel.arr);
            saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
            saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
            saida->addItem("nrNivel", nrNivel);
            saida->addItem("idFase", idFase);
            saida->addItem("qtHorasPrazoAtendimento", qtHorasPrazoAtendimento);
            saida->addItem("vlPesoAtendimento", (char*)vlPesoAtendimento.arr);
            saida->addItem("idTipoRetornoContato", idTipoRetornoContato);
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaEx;

    ULOG_END( "proCConsultaWFAtendimentoEx()" );

    return true;
}



bool proCConsultaWFAtendimentoAlertaFila(long* _idAtendimento, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoAlertaFila()" );

    struct sqlca sqlca;
    int numeroRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        long  idatendimento = *_idAtendimento;
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];

        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaAlerta CURSOR FOR 
        SELECT 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            idAtendimentoAlerta, 
            dsMensagem 
        FROM 
            atendimento.AtendimentoListaAlertasV01 
        WHERE 
            idAtendimento = :idatendimento 
            AND inVisualizacao =1
        ORDER BY nrCriticidade DESC, idAtendimento;

    EXEC SQL OPEN consultaAlerta;

    while (true)
    {
        EXEC SQL FETCH consultaAlerta INTO
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem;

        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(nrCriticidade, i_nrCriticidade);


        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", idAlerta);
            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
            saida->addItem("nmIcone", (char*)nmIcone.arr);
            saida->addItem("nmCor", (char*)nmCor.arr);
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", CONVLONG(idAtendimentoAlerta,i_idAtendimentoAlerta));
            saida->addItem("dsMensagem", (char*)dsMensagem.arr);
            
        saida->closeTag();
        
    }

    EXEC SQL CLOSE consultaAlerta;

    ULOG_END( "proCConsultaWFAtendimentoAlertaFila()" );

    return true;
}



bool proCConsultaWFAtendimentoAlertaFilaEx(long* _idAtendimento, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoAlertaFilaEx()" );

    struct sqlca sqlca;
    int numeroRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        long  idatendimento = *_idAtendimento;
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];

        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaAlertaEx CURSOR FOR 
        SELECT 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            idAtendimentoAlerta, 
            dsMensagem 
        FROM 
            FOHIST_OW.AtendimentoListaAlertasV01 
        WHERE 
            idAtendimento = :idatendimento 
            AND inVisualizacao =1
        ORDER BY nrCriticidade DESC, idAtendimento;

    EXEC SQL OPEN consultaAlertaEx;

    while (true)
    {
        EXEC SQL FETCH consultaAlertaEx INTO
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem;

        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(nrCriticidade, i_nrCriticidade);


        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", idAlerta);
            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
            saida->addItem("nmIcone", (char*)nmIcone.arr);
            saida->addItem("nmCor", (char*)nmCor.arr);
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", CONVLONG(idAtendimentoAlerta,i_idAtendimentoAlerta));
            saida->addItem("dsMensagem", (char*)dsMensagem.arr);
            
        saida->closeTag();
        
    }

    EXEC SQL CLOSE consultaAlertaEx;

    ULOG_END( "proCConsultaWFAtendimentoAlertaFilaEx()" );

    return true;
}



bool proCConsultaWFAtendimentoAlertaDetalhe(long* _idAtendimento, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoAlertaDetalhe()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        long idatendimento = *_idAtendimento;
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];

        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaAlertaDetalhe CURSOR FOR 
        SELECT DISTINCT
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            0, 
            '' 
        FROM 
            atendimento.AtendimentoListaAlertasV01 
        WHERE 
            idAtendimento = :idatendimento 
            AND inVisualizacao =1
        ORDER BY nrCriticidade DESC;

    EXEC SQL OPEN consultaAlertaDetalhe;


    while (true)
    {
        EXEC SQL FETCH consultaAlertaDetalhe INTO
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem;

        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(nrCriticidade, i_nrCriticidade);


        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", idAlerta);
            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
            saida->addItem("nmIcone", (char*)nmIcone.arr);
            saida->addItem("nmCor", (char*)nmCor.arr);
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", CONVLONG(idAtendimentoAlerta,i_idAtendimentoAlerta));
            saida->addItem("dsMensagem", (char*)dsMensagem.arr);
            
        saida->closeTag();
        numeroRegistros++;
    }
    if (numeroRegistros == 0)
    {
        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", 0);
            saida->addItem("dsAlerta", "No Prazo");
            saida->addItem("sgAlerta", "");
            saida->addItem("nmIcone", "");
            saida->addItem("nmCor", "");
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", 0);
            saida->addItem("dsMensagem", "No Prazo");
            
        saida->closeTag();

    }

    EXEC SQL CLOSE consultaAlertaDetalhe;

    ULOG_END( "proCConsultaWFAtendimentoAlertaDetalhe()" );

    return true;
}

bool proCConsultaWFAtendimentoAlertaDetalheEx(long* _idAtendimento, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoAlertaDetalheEx()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        long idatendimento = *_idAtendimento;
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];

        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaAlertaDetalheEx CURSOR FOR 
        SELECT DISTINCT
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            0, 
            '' 
        FROM 
            FOHIST_OW.AtendimentoListaAlertasV01 
        WHERE 
            idAtendimento = :idatendimento 
            AND inVisualizacao =1
        ORDER BY nrCriticidade DESC;

    EXEC SQL OPEN consultaAlertaDetalheEx;


    while (true)
    {
        EXEC SQL FETCH consultaAlertaDetalheEx INTO
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem;

        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(nrCriticidade, i_nrCriticidade);


        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", idAlerta);
            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
            saida->addItem("nmIcone", (char*)nmIcone.arr);
            saida->addItem("nmCor", (char*)nmCor.arr);
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", CONVLONG(idAtendimentoAlerta,i_idAtendimentoAlerta));
            saida->addItem("dsMensagem", (char*)dsMensagem.arr);
            
        saida->closeTag();
        numeroRegistros++;
    }
    if (numeroRegistros == 0)
    {
        saida->createTag("AlertaVO");
    
            saida->addItem("idAlerta", 0);
            saida->addItem("dsAlerta", "No Prazo");
            saida->addItem("sgAlerta", "");
            saida->addItem("nmIcone", "");
            saida->addItem("nmCor", "");
            saida->addItem("nrCriticidade", "");
            saida->addItem("idAtendimentoAlerta", 0);
            saida->addItem("dsMensagem", "No Prazo");
            
        saida->closeTag();

    }

    EXEC SQL CLOSE consultaAlertaDetalheEx;

    ULOG_END( "proCConsultaWFAtendimentoAlertaDetalheEx()" );

    return true;
}

int proCConsultarProtocolos(st_AtendimentoFila *dados,st_vlAtendimentoFila *status,int rowsToFetch)
{
    ULOG_START( "proCConsultarProtocolos()" );

    struct sqlca sqlca;
    char rowsToFetchSZ[10];
	/* iSemWhere: Controle para evitar que a query fique sem where */
	int iSemWhere = 0;

    if ( rowsToFetch > MAX_ROWS_TO_FETCH_PROTOCOLO ) rowsToFetch = MAX_ROWS_TO_FETCH_PROTOCOLO;

    EXEC SQL BEGIN DECLARE SECTION;
        int rows_to_fetch = rowsToFetch; // numero de linhas para cada fetch
        int rows_this_time; // numero de linhas carregadas no fetch
    EXEC SQL END DECLARE SECTION;

    string query =
        "SELECT "
            "IDATENDIMENTOPROTOCOLO,"
            "NRTELEFONEPROTOCOLO,"
            "DSSTATUSPROTOCOLO,"
            "NMSISTEMAORIGEM,"
            "TO_CHAR (DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,"
            "TO_CHAR (DTENCERRAMENTO, 'DD/MM/YYYY HH24:MI:SS') AS DTENCERRAMENTO"
    " FROM ("
        "SELECT "
            "IDATENDIMENTOPROTOCOLO,"
            "NRTELEFONEPROTOCOLO,"
            "DSSTATUSPROTOCOLO,"
            "NMSISTEMAORIGEM,"
            "DTABERTURA,"
            "DTENCERRAMENTO"
        " FROM ("
        "SELECT "
           "A.IDATENDIMENTOPROTOCOLO,"
           "DECODE (A.NRTELEFONE, NULL, 'NÃO INFORMADO',"
              "soa_ow.formata_nrlinha(TO_CHAR(A.CDAREAREGISTRO||A.NRTELEFONE))) AS NRTELEFONEPROTOCOLO, "
           "DECODE( "
                   "(CASE WHEN SYSTIMESTAMP >= TO_TIMESTAMP(A.DTENCERRAMENTO) THEN 1 ELSE 0 END),0,'Em Atendimento',"
                       "DECODE(A.QTPROCESSOABERTO,0,'Encerrado',"
                               "DECODE((CASE WHEN A.QTPROCESSOABERTO = A.QTPROCESSOPENDENTE THEN 1 ELSE 0 END),1,'Pendente',"
                                       "DECODE(A.QTPROCESSOPENDENTE,0,'Concluído','Parcialmente Concluído')"
                                     ") "
                             ") "
                 ") AS DSSTATUSPROTOCOLO,"
           "A.NMSISTEMAORIGEM,"
           "A.DTABERTURA,"
           "A.DTENCERRAMENTO "
         "FROM "
           "( "
               "SELECT ";

    if ( (dados->tpPesquisa == FILA_TPPESQ_CLIENTE 
       || dados->tpPesquisa == FILA_TPPESQ_LINHACLIENTE)
       && status->idAtendimentoProtocolo <= 0 )
    {
        query += 
         " /*+ ordered index(atendimentoprotocolo atendimentoprotocoloie4) use_nl(sistemaorigem) */ ";
    }

    query +=        "ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLO, "
                    "ATENDIMENTOPROTOCOLO.CDAREAREGISTRO, "
                    "ATENDIMENTOPROTOCOLO.NRTELEFONE, "
                    "ATENDIMENTOPROTOCOLO.QTPROCESSOABERTO, "
                    "ATENDIMENTOPROTOCOLO.QTPROCESSOPENDENTE, "
                    "SISTEMAORIGEM.NMSISTEMAORIGEM, "
                    "ATENDIMENTOPROTOCOLO.DTABERTURA, "
                    "ATENDIMENTOPROTOCOLO.DTENCERRAMENTO "
                "FROM "
                   "ATENDIMENTO.ATENDIMENTOPROTOCOLO ATENDIMENTOPROTOCOLO,"
                   "APOIO.SISTEMAORIGEM SISTEMAORIGEM ";

    // Se estiver solicitando qq filtro de processo aqueles protocolos sem processos
    // não devem ser apresentados.
    if ( status->idContato > 0 )
    {
        query +=",ATENDIMENTO.ATENDIMENTO ATENDIMENTO";
		iSemWhere++;
    }

    query +=" WHERE ATENDIMENTOPROTOCOLO.IDSISTEMAORIGEM=SISTEMAORIGEM.IDSISTEMAORIGEM ";

    if ( dados->tpPesquisa == FILA_TPPESQ_CLIENTE 
       || dados->tpPesquisa == FILA_TPPESQ_LINHACLIENTE )
    {
        char idLinhaTelefonica[39];
		iSemWhere++;
        sprintf(idLinhaTelefonica,"%ld",dados->idPessoaLinhaHistorico);

        query +=" AND ATENDIMENTOPROTOCOLO.IDLINHATELEFONICA = " + (string)idLinhaTelefonica;

        if ( dados->idPessoaDePara > 0 )
        {
            char idPessoaDePara[39];
            sprintf(idPessoaDePara,"%d",dados->idPessoaDePara);

            query +=" AND ATENDIMENTOPROTOCOLO.IDPESSOADEPARA = " + (string)idPessoaDePara;
        }
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_LINHA )
    {
        char cdAreaRegistro[3];
		iSemWhere++;
        memcpy(cdAreaRegistro,dados->nrLinha,2);
        cdAreaRegistro[2] = 0;

        query +=" AND ATENDIMENTOPROTOCOLO.CDAREAREGISTRO = " + (string)cdAreaRegistro +
                " AND ATENDIMENTOPROTOCOLO.NRTELEFONE = " + (string)(dados->nrLinha+2);
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_PESSOA )
    {
        char idPessoaDePara[39];
		iSemWhere++;
        sprintf(idPessoaDePara,"%d",dados->idPessoaDePara);

        query +=" AND ATENDIMENTOPROTOCOLO.IDPESSOADEPARA = " + (string)idPessoaDePara;
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_CONTA )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.CDCONTA = '" + (string)dados->nrConta+"'";
		iSemWhere++;
    }

    if ( status->idAtendimentoProtocolo > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLO="+(string)dados->idAtendimentoProtocolo;
		iSemWhere++;
    }

    if ( status->dtAberturaInicio > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTABERTURA>=TO_DATE('"+(string)dados->dtAberturaInicio+" 00:00:00','DD/MM/YYYY HH24:MI:SS')";
		iSemWhere++;
    }

    if ( status->dtAberturaFim > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTABERTURA<=TO_DATE('"+(string)dados->dtAberturaFim+" 23:59:59','DD/MM/YYYY HH24:MI:SS')";
		iSemWhere++;
    }

    if ( status->dtFechamentoInicio > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTENCERRAMENTO>=TO_DATE('"+(string)dados->dtFechamentoInicio+" 00:00:00','DD/MM/YYYY HH24:MI:SS')";
		iSemWhere++;
    }

    if ( status->dtFechamentoFim > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTENCERRAMENTO<=TO_DATE('"+(string)dados->dtFechamentoFim+" 23:59:59','DD/MM/YYYY HH24:MI:SS')";
		iSemWhere++;
    }

    // Se estiver solicitando qq filtro de processo aqueles protocolos sem processos
    // não devem ser apresentados.
    if ( status->idContato > 0 )
    {
        char idContato[39];
		iSemWhere++;
        sprintf(idContato,"%d",dados->idContato);

        query +=" AND ATENDIMENTO.IDATENDIMENTOPROTOCOLO=ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLO "
                " AND ATENDIMENTO.IDCONTATO="+(string)idContato +
                " AND TRUNC(ATENDIMENTO.DTABERTURA) >= TRUNC(SYSDATE-180)";
    }

	if ( iSemWhere == 0 )
	{
		/* Se entrou aque é porque não houve clausula WHERE, então coloca um limitador 
		   que tras atendimentos dos ultimos 2 minutos. Em testes, o menor volume de atendimentoprotocolo
		   aberto ocorrem as 4 AM do domingo para segunda, que são aproximadamente 100 por minutos.
		   Num dia de semana são, aproximadamente, 1.000 por minuto.
		*/
		query += " AND ATENDIMENTOPROTOCOLO.DTABERTURA > SYSDATE-(1/720) ";
	}

    query += " ) A )";

    if ( status->dsStatusProtocolo > 0 )
    {
       query +=" WHERE DSSTATUSPROTOCOLO = '"+(string)dados->dsStatusProtocolo+"'";
    }

    if ( status->idAtendimentoProtocolo <= 0 )
    { // se pediu apenas um protocolo não precisa ordenar
        query += " ORDER BY DTABERTURA DESC ";
    }

    query += " ) ";

    if ( status->idAtendimentoProtocolo == -1 )
    { // se pediu apenas um protocolo não precisa limitar qtde de protocolos...
        sprintf(rowsToFetchSZ,"%d",rowsToFetch);
        query += " WHERE ROWNUM <= " +(string)rowsToFetchSZ;
    }

    pOraQuery = query.c_str();

    memset(&varLstOraIdAtdProtocolo,0,sizeof(varLstOraIdAtdProtocolo));
    memset(&statLstOraIdAtdProtocolo,-1,sizeof(statLstOraIdAtdProtocolo));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE Protocolo FROM :pOraQuery;
    EXEC SQL DECLARE curProtocolo CURSOR FOR Protocolo;

    ULOG("query=%s",pOraQuery);

    EXEC SQL OPEN curProtocolo;

        EXEC SQL FOR :rows_to_fetch
            FETCH curProtocolo INTO :varLstOraIdAtdProtocolo:statLstOraIdAtdProtocolo;

        rows_this_time = sqlca.sqlerrd[2];

    EXEC SQL CLOSE curProtocolo;

    ULOG("rows_this_time=%d",rows_this_time);

    for ( int it=0;it<rows_this_time; )
    {
    	ULOG( "*** Iterator [%d]\n", it );
        CONVIND(varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo,statLstOraIdAtdProtocolo[it].idAtendimentoProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].nrTelefoneProtocolo,statLstOraIdAtdProtocolo[it].nrTelefoneProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dsStatusProtocolo,statLstOraIdAtdProtocolo[it].dsStatusProtocolo);
        ULOG( "Estado Protocolo [%s]\n",(char*)varLstOraIdAtdProtocolo[it].dsStatusProtocolo.arr );
        CONVIND(varLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo,statLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dtAberturaProtocolo,statLstOraIdAtdProtocolo[it].dtAberturaProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dtFechamentoProtocolo,statLstOraIdAtdProtocolo[it].dtFechamentoProtocolo);
        it++;
    }

    ULOG_END( "proCConsultarProtocolos()" );

    return rows_this_time;
}


int proCConsultarProtocolosMigracao(st_AtendimentoFila *dados,st_vlAtendimentoFila *status,int rowsToFetch)
{
    ULOG_START( "proCConsultarProtocolosMigracao()" );

    struct sqlca sqlca;
    char rowsToFetchSZ[10];

    if ( rowsToFetch > MAX_ROWS_TO_FETCH_PROTOCOLO ) rowsToFetch = MAX_ROWS_TO_FETCH_PROTOCOLO;

    EXEC SQL BEGIN DECLARE SECTION;
        int rows_to_fetch = rowsToFetch; // numero de linhas para cada fetch
        int rows_this_time; // numero de linhas carregadas no fetch
    EXEC SQL END DECLARE SECTION;

    string query =
        "SELECT "
            "IDATENDIMENTOPROTOCOLOMIGRACAO,"
            "NRTELEFONEPROTOCOLO,"
            "DSSTATUSPROTOCOLO,"
            "NMSISTEMAORIGEM,"
            "TO_CHAR (DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,"
            "TO_CHAR (DTENCERRAMENTO, 'DD/MM/YYYY HH24:MI:SS') AS DTENCERRAMENTO"
    " FROM ("
        "SELECT "
            "IDATENDIMENTOPROTOCOLOMIGRACAO,"
            "NRTELEFONEPROTOCOLO,"
            "DSSTATUSPROTOCOLO,"
            "NMSISTEMAORIGEM,"
            "DTABERTURA,"
            "DTENCERRAMENTO"
        " FROM ("
        "SELECT "
           "A.IDATENDIMENTOPROTOCOLOMIGRACAO,"
           "DECODE (A.NRTELEFONE, NULL, 'NÃO INFORMADO',"
              /*
              "'('||TRIM (TO_CHAR (A.CDAREAREGISTRO, '000'))||')'||SUBSTR(TO_CHAR (LPAD (A.NRTELEFONE,9), '999999999'), 1, 6 ) || "
                                "'-' || SUBSTR (TO_CHAR (LPAD (A.NRTELEFONE, 9), '999999999'), 7, 9)) AS NRTELEFONEPROTOCOLO, "
              */
           "soa_ow.formata_nrlinha(TO_CHAR(A.CDAREAREGISTRO||A.NRTELEFONE))) AS NRTELEFONEPROTOCOLO, "
           "DECODE( "
                   "(CASE WHEN SYSTIMESTAMP >= A.DTENCERRAMENTO THEN 1 ELSE 0 END),0,'Em Atendimento',"
                       "DECODE(A.QTPROCESSOABERTO,0,'Encerrado',"
                               "DECODE((CASE WHEN A.QTPROCESSOABERTO = A.QTPROCESSOPENDENTE THEN 1 ELSE 0 END),1,'Pendente',"
                                       "DECODE(A.QTPROCESSOPENDENTE,0,'Concluído','Parcialmente Concluído')"
                                     ") "
                             ") "
                 ") AS DSSTATUSPROTOCOLO,"
           "A.NMSISTEMAORIGEM,"
           "A.DTABERTURA,"
           "A.DTENCERRAMENTO "
         "FROM "
           "( "
               "SELECT ";

    if ( (dados->tpPesquisa == FILA_TPPESQ_CLIENTE 
       || dados->tpPesquisa == FILA_TPPESQ_LINHACLIENTE)
       && status->idAtendimentoProtocolo <= 0 )
    {
        query += 
         " /*+ ordered index(atendimentoprotocolo atendimentoprotocoloie4) use_nl(sistemaorigem) */ ";
    }

    query +=        "ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLOMIGRACAO, "
                    "ATENDIMENTOPROTOCOLO.CDAREAREGISTRO, "
                    "ATENDIMENTOPROTOCOLO.NRTELEFONE, "
                    "ATENDIMENTOPROTOCOLO.QTPROCESSOABERTO, "
                    "ATENDIMENTOPROTOCOLO.QTPROCESSOPENDENTE, "
                    "SISTEMAORIGEM.NMSISTEMAORIGEM, "
                    "ATENDIMENTOPROTOCOLO.DTABERTURA, "
                    "ATENDIMENTOPROTOCOLO.DTENCERRAMENTO "
                "FROM "
                   "ATENDIMENTO.ATENDIMENTOPROTOCOLOMIGRACAO ATENDIMENTOPROTOCOLO,"
                   "APOIO.SISTEMAORIGEM SISTEMAORIGEM ";

    // Se estiver solicitando qq filtro de processo aqueles protocolos sem processos
    // não devem ser apresentados.
    if ( status->idContato > 0 )
    {
        query +=",ATENDIMENTO.ATENDIMENTOMIGRACAO ATENDIMENTO";
    }

    query +=" WHERE ATENDIMENTOPROTOCOLO.IDSISTEMAORIGEM=SISTEMAORIGEM.IDSISTEMAORIGEM ";

    if ( dados->tpPesquisa == FILA_TPPESQ_CLIENTE 
       || dados->tpPesquisa == FILA_TPPESQ_LINHACLIENTE )
    {
        char idLinhaTelefonica[39];
        sprintf(idLinhaTelefonica,"%ld",dados->idPessoaLinhaHistorico);

        query +=" AND ATENDIMENTOPROTOCOLO.IDLINHATELEFONICA = " + (string)idLinhaTelefonica;

        if ( dados->idPessoaDePara > 0 )
        {
            char idPessoaDePara[39];
            sprintf(idPessoaDePara,"%d",dados->idPessoaDePara);

            query +=" AND ATENDIMENTOPROTOCOLO.IDPESSOADEPARA = " + (string)idPessoaDePara;
        }
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_LINHA )
    {
        char cdAreaRegistro[3];
        memcpy(cdAreaRegistro,dados->nrLinha,2);
        cdAreaRegistro[2] = 0;

        query +=" AND ATENDIMENTOPROTOCOLO.CDAREAREGISTRO = " + (string)cdAreaRegistro +
                " AND ATENDIMENTOPROTOCOLO.NRTELEFONE = " + (string)(dados->nrLinha+2);
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_PESSOA )
    {
        char idPessoaDePara[39];
        sprintf(idPessoaDePara,"%d",dados->idPessoaDePara);

        query +=" AND ATENDIMENTOPROTOCOLO.IDPESSOADEPARA = " + (string)idPessoaDePara;
    }
    else if ( dados->tpPesquisa == FILA_TPPESQ_CONTA )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.CDCONTA = '" + (string)dados->nrConta+"'";
    }

    if ( status->idAtendimentoProtocolo > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLOMIGRACAO="+(string)dados->idAtendimentoProtocolo;
    }

    if ( status->dtAberturaInicio > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTABERTURA>=TO_DATE('"+(string)dados->dtAberturaInicio+" 00:00:00','DD/MM/YYYY HH24:MI:SS')";
    }

    if ( status->dtAberturaFim > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTABERTURA<=TO_DATE('"+(string)dados->dtAberturaFim+" 23:59:59','DD/MM/YYYY HH24:MI:SS')";
    }

    if ( status->dtFechamentoInicio > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTENCERRAMENTO>=TO_DATE('"+(string)dados->dtFechamentoInicio+" 00:00:00','DD/MM/YYYY HH24:MI:SS')";
    }

    if ( status->dtFechamentoFim > 0 )
    {
        query +=" AND ATENDIMENTOPROTOCOLO.DTENCERRAMENTO<=TO_DATE('"+(string)dados->dtFechamentoFim+" 23:59:59','DD/MM/YYYY HH24:MI:SS')";
    }

    // Se estiver solicitando qq filtro de processo aqueles protocolos sem processos
    // não devem ser apresentados.
    if ( status->idContato > 0 )
    {
        char idContato[39];
        sprintf(idContato,"%d",dados->idContato);

        query +=" AND ATENDIMENTO.IDATENDIMENTOPROTOCOLOMIGRACAO = ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLOMIGRACAO "
                " AND ATENDIMENTO.IDCONTATO="+(string)idContato +
                " AND TRUNC(ATENDIMENTO.DTABERTURA) >= TRUNC(SYSDATE-180)";
    }

    query += " ) A )";

    if ( status->dsStatusProtocolo > 0 )
    {
       query +=" WHERE DSSTATUSPROTOCOLO = '"+(string)dados->dsStatusProtocolo+"'";
    }

    if ( status->idAtendimentoProtocolo <= 0 )
    { // se pediu apenas um protocolo não precisa ordenar
        query += " ORDER BY DTABERTURA DESC ";
    }

    query += " ) ";

    if ( status->idAtendimentoProtocolo == -1 )
    { // se pediu apenas um protocolo não precisa limitar qtde de protocolos...
        sprintf(rowsToFetchSZ,"%d",rowsToFetch);
        query += " WHERE ROWNUM <= " +(string)rowsToFetchSZ;
    }

    pOraQuery = query.c_str();

    memset(&varLstOraIdAtdProtocolo,0,sizeof(varLstOraIdAtdProtocolo));
    memset(&statLstOraIdAtdProtocolo,-1,sizeof(statLstOraIdAtdProtocolo));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE Protocolo FROM :pOraQuery;
    EXEC SQL DECLARE curProtocoloMig CURSOR FOR Protocolo;

    ULOG( "Solicitando query:" );
    ULOG( "query = =[%s]",pOraQuery );

    ULOG( "Abrindo cursor..." );
    EXEC SQL OPEN curProtocoloMig;

        EXEC SQL FOR :rows_to_fetch
            FETCH curProtocoloMig INTO :varLstOraIdAtdProtocolo:statLstOraIdAtdProtocolo;

        rows_this_time = sqlca.sqlerrd[2];

    EXEC SQL CLOSE curProtocoloMig;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo,statLstOraIdAtdProtocolo[it].idAtendimentoProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].nrTelefoneProtocolo,statLstOraIdAtdProtocolo[it].nrTelefoneProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dsStatusProtocolo,statLstOraIdAtdProtocolo[it].dsStatusProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo,statLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dtAberturaProtocolo,statLstOraIdAtdProtocolo[it].dtAberturaProtocolo);
        CONVIND(varLstOraIdAtdProtocolo[it].dtFechamentoProtocolo,statLstOraIdAtdProtocolo[it].dtFechamentoProtocolo);
    }

    ULOG_END( "proCConsultarProtocolosMigracao()" );

    return rows_this_time;
}


bool proCConsultaWFAtendimentoFilaLinha_Protocolo(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinha_Protocolo()" );

    char listaOraIdAtdProtocolo[40*100+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,100);

    if ( totalProcolos > 0 )
    {

        /*  processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);  */
        
        processarSaidaProtocolo( rows_to_fetch,totalProcolos,saida );

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinha_Protocolo()" );

    return true;
}


bool proCConsultaWFAtendimentoFilaLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinha()" );

    char listaOraIdAtdProtocolo[40*100+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,100);

    if ( totalProcolos > 0 )
    {
        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "0 AS INACS,"
               "0 AS INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.ATENDIMENTORELACIONAMENTOV01"
            " WHERE "
               "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") ";

            if ( status->idContato > 0 )
            {
                char buffer[39];
                sprintf(buffer,"%d",dados->idContato);
                query +=" AND IDCONTATO = "+(string)buffer +
                        " AND TRUNC(DTABERTURA) >= TRUNC(SYSDATE-180)";
            }

            query +=" ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinha()" );

    return true;
}


bool proCConsultaWFAtendimentoFilaLinha_Migracao(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinhaMigracao()" );

    char listaOraIdAtdProtocolo[40*100+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolosMigracao(dados,status,100);

    if ( totalProcolos > 0 )
    {
        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "0 AS INACS,"
               "0 AS INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.RELACIONAMENTOMIGV01"
            " WHERE "
               "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") ";
               
        /*
        string query = 
        "SELECT "
           "idatendimentoprotocolo, "
           "idatendimento, "
           "idcontato, "
           "idestado, "
           "dsestado, "
           "sgestado, "
           "idsubestado, "
           "dssubestado, "
           "sgsubestado, "
           "idpessoausuario, "
           "nmpessoa, "
           "TO_CHAR (dtabertura, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtfechamento, 'DD/MM/YYYY HH24:MI:SS'), "
           "idalerta, "
           "sgalerta, "
           "dsalerta, "
           "nmicone, "
           "nmcor, "
           "nrcriticidade, "
           "PATH, "
           "nrtelefone, "
           "indocumento, "
           "0 AS inacs, "
           "0 AS inpausaatendimento, "
           "TO_CHAR (dtsuspeito, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtfimpausaatendimento, 'DD/MM/YYYY HH24:MI:SS'), "
           "NVL (idatendimentobaixahistorico, 0), nmurldados, "
           "TO_CHAR (dtsolicitacaocancelamento, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtprazofinalinterno, 'DD/MM/YYYY HH24:MI:SS'), "
           "nmloginusuario "
        "FROM "
           "( "
             "SELECT "
                 "PESSOADEPARA.IDPESSOAORIGEM, "
                 "PESSOADEPARA.IDPESSOADEPARA, "
                 "'' AS IDPESSOALINHAHISTORICO, "
                 "ATENDIMENTO.IDLINHATELEFONICA, "
                 "ATENDIMENTO.IDATENDIMENTO, "
                 "'' AS IDCONTATO, "
                 "ANDAMENTOMIGRACAO.IDATIVIDADE AS IDESTADO, "
                 "DECODE(ANDAMENTOMIGRACAO.IDATIVIDADE,1,'ABERTO',2,'FECHADO') AS DSESTADO, "
                 "'' AS SGESTADO, "
                 "'' AS IDSUBESTADO, "
                 "'' AS DSSUBESTADO, "
                 "'' AS SGSUBESTADO, "
                 "0 AS IDPESSOAUSUARIO, "
                 "'' AS NMPESSOA, "
                 "ATENDIMENTOPROTOCOLO.DTABERTURA AS DTABERTURA, "
                 "ATENDIMENTOPROTOCOLO.DTENCERRAMENTO AS DTFECHAMENTO, "
                 "0 AS IDATENDIMENTOALERTA, "
                 "'' AS DSMENSAGEM, "
                 "0 AS IDALERTA, "
                 "'' AS SGALERTA, "
                 "'' AS DSALERTA, "
                 "'' AS NMICONE, "
                 "'' AS NMCOR, "
                 "0 AS NRCRITICIDADE, "
                 "0 AS IDGRUPO, "
                 "'' AS PATH, "
                 "PESSOADEPARA.IDPESSOA, "
                 "0 AS INDOCUMENTO, "
                 "('('||ATENDIMENTOPROTOCOLO.CDAREAREGISTRO||')'||substr(ATENDIMENTOPROTOCOLO.NRTELEFONE,1,4)||'-'||substr(ATENDIMENTOPROTOCOLO.NRTELEFONE,4,4)) AS NRTELEFONE, "
                 "'' AS NRLINHA, "
                 "0 AS IDATIVIDADE, "
                 "'' AS DTANDAMENTO, "
                 "'' AS NMLOGINUSUARIO, "
                 "'' AS DSANDAMENTOOBSERVACAO, "
                 "'N' AS INACS, "
                 "0 AS INPAUSAATENDIMENTO, "
                 "0 AS IDATENDIMENTOSUSPEITO, "
                 "NULL AS DTSUSPEITO, "
                 "NULL AS DTFIMPAUSAATENDIMENTO, "
                 "0 AS IDATENDIMENTOBAIXAHISTORICO, "
                 "'' AS NMURLDADOS, "
                 "'' AS DTSOLICITACAOCANCELAMENTO, "
                 "0 AS IDATENDIMENTOORIGEM, "
                 "'' AS DTPRAZOFINALINTERNO, "
                 "ATENDIMENTO.IDATENDIMENTOPROTOCOLOMIGRACAO AS IDATENDIMENTOPROTOCOLO, "
                 "ATENDIMENTOPROTOCOLO.DTABERTURA AS DTABERTURAPROTOCOLO, "
                 "'' AS INSMP "
             "FROM "
                "( "
                   "SELECT "
                      "IDLINHATELEFONICA, "
                      "IDATENDIMENTO, "
                      "IDATENDIMENTOPROTOCOLOMIGRACAO "
                   "FROM "
                      "ATENDIMENTO.ATENDIMENTOMIGRACAO "
                   "WHERE "
                      "IDATENDIMENTOPROTOCOLOMIGRACAO IN ("+(string)listaOraIdAtdProtocolo+") "
                ") ATENDIMENTO, "
                "ATENDIMENTO.ATENDIMENTOPROTOCOLOMIGRACAO ATENDIMENTOPROTOCOLO, "
                "ATENDIMENTO.ATENDIMENTOPESSOA ATENDIMENTOPESSOA, "
                "ATENDIMENTO.ANDAMENTOMIGRACAO ANDAMENTOMIGRACAO, "
                "CUSTOMER.PESSOADEPARA PESSOADEPARA "
             "WHERE "
                "ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOPESSOA.IDATENDIMENTO "
             "AND ATENDIMENTO.IDATENDIMENTOPROTOCOLOMIGRACAO = ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLOMIGRACAO "
             "AND ATENDIMENTOPESSOA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA "
             "AND ATENDIMENTOPESSOA.IDTIPORELACIONAMENTO > 1 "
             "AND ANDAMENTOMIGRACAO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO "
             "AND TRUNC(ATENDIMENTOPROTOCOLO.DTABERTURA) >= TRUNC(SYSDATE-180)";
        ") ";
        */     


            /*
            if ( status->idContato > 0 )
            {
                char buffer[39];
                sprintf(buffer,"%d",dados->idContato);
                query +=" AND IDCONTATO = "+(string)buffer +
                        " AND TRUNC(DTABERTURA) >= TRUNC(SYSDATE-180)";
            }
            */
            

            query +=" ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinhaMigracao()" );

    return true;
}


bool proCConsultaWFAtendimentoFilaLinhaTI_Protocolos(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinhaTI_Protocolos()" );

    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,10);

    if ( totalProcolos > 0 )   // Vai carregar todos os AtendimentoVO
    {

        processarSaidaProtocolo( rows_to_fetch,totalProcolos,saida );

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinhaTI_Protocolos()" );

    return true;
}


bool proCConsultaWFAtendimentoFilaLinhaTI_Migracao(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinhaTI_Migracao()" );

    char listaOraIdAtdProtocolo[40*10+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolosMigracao(dados,status,10);

    if ( totalProcolos > 0 )   // Vai carregar todos os AtendimentoVO
    {
        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "0 AS INACS,"
               "0 AS INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.RELACIONAMENTOMIGV01"
            " WHERE "
               "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") "
           "ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        /*string query = 
        "SELECT "
           "idatendimentoprotocolo, "
           "idatendimento, "
           "idcontato, "
           "idestado, "
           "dsestado, "
           "sgestado, "
           "idsubestado, "
           "dssubestado, "
           "sgsubestado, "
           "idpessoausuario, "
           "nmpessoa, "
           "TO_CHAR (dtabertura, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtfechamento, 'DD/MM/YYYY HH24:MI:SS'), "
           "idalerta, "
           "sgalerta, "
           "dsalerta, "
           "nmicone, "
           "nmcor, "
           "nrcriticidade, "
           "PATH, "
           "nrtelefone, "
           "indocumento, "
           "0 AS inacs, "
           "0 AS inpausaatendimento, "
           "TO_CHAR (dtsuspeito, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtfimpausaatendimento, 'DD/MM/YYYY HH24:MI:SS'), "
           "NVL (idatendimentobaixahistorico, 0), nmurldados, "
           "TO_CHAR (dtsolicitacaocancelamento, 'DD/MM/YYYY HH24:MI:SS'), "
           "TO_CHAR (dtprazofinalinterno, 'DD/MM/YYYY HH24:MI:SS'), "
           "nmloginusuario "
        "FROM "
           "( "
             "SELECT "
                 "PESSOADEPARA.IDPESSOAORIGEM, "
                 "PESSOADEPARA.IDPESSOADEPARA, "
                 "'' AS IDPESSOALINHAHISTORICO, "
                 "ATENDIMENTO.IDLINHATELEFONICA, "
                 "ATENDIMENTO.IDATENDIMENTO, "
                 "'' AS IDCONTATO, "
                 "ANDAMENTOMIGRACAO.IDATIVIDADE AS IDESTADO, "
                 "DECODE(ANDAMENTOMIGRACAO.IDATIVIDADE,1,'ABERTO',2,'FECHADO') AS DSESTADO, "
                 "'' AS SGESTADO, "
                 "'' AS IDSUBESTADO, "
                 "'' AS DSSUBESTADO, "
                 "'' AS SGSUBESTADO, "
                 "0 AS IDPESSOAUSUARIO, "
                 "'' AS NMPESSOA, "
                 "ATENDIMENTOPROTOCOLO.DTABERTURA AS DTABERTURA, "
                 "ATENDIMENTOPROTOCOLO.DTENCERRAMENTO AS DTFECHAMENTO, "
                 "0 AS IDATENDIMENTOALERTA, "
                 "'' AS DSMENSAGEM, "
                 "0 AS IDALERTA, "
                 "'' AS SGALERTA, "
                 "'' AS DSALERTA, "
                 "'' AS NMICONE, "
                 "'' AS NMCOR, "
                 "0 AS NRCRITICIDADE, "
                 "0 AS IDGRUPO, "
                 "'' AS PATH, "
                 "PESSOADEPARA.IDPESSOA, "
                 "0 AS INDOCUMENTO, "
                 "('('||ATENDIMENTOPROTOCOLO.CDAREAREGISTRO||')'||substr(ATENDIMENTOPROTOCOLO.NRTELEFONE,1,4)||'-'||substr(ATENDIMENTOPROTOCOLO.NRTELEFONE,4,4)) AS NRTELEFONE, "
                 "'' AS NRLINHA, "
                 "0 AS IDATIVIDADE, "
                 "'' AS DTANDAMENTO, "
                 "'' AS NMLOGINUSUARIO, "
                 "'' AS DSANDAMENTOOBSERVACAO, "
                 "'N' AS INACS, "
                 "0 AS INPAUSAATENDIMENTO, "
                 "0 AS IDATENDIMENTOSUSPEITO, "
                 "NULL AS DTSUSPEITO, "
                 "NULL AS DTFIMPAUSAATENDIMENTO, "
                 "0 AS IDATENDIMENTOBAIXAHISTORICO, "
                 "'' AS NMURLDADOS, "
                 "'' AS DTSOLICITACAOCANCELAMENTO, "
                 "0 AS IDATENDIMENTOORIGEM, "
                 "'' AS DTPRAZOFINALINTERNO, "
                 "ATENDIMENTO.IDATENDIMENTOPROTOCOLOMIGRACAO AS IDATENDIMENTOPROTOCOLO, "
                 "ATENDIMENTOPROTOCOLO.DTABERTURA AS DTABERTURAPROTOCOLO, "
                 "'' AS INSMP "
             "FROM "
                "( "
                   "SELECT "
                      "IDLINHATELEFONICA, "
                      "IDATENDIMENTO, "
                      "IDATENDIMENTOPROTOCOLOMIGRACAO "
                   "FROM "
                      "ATENDIMENTO.ATENDIMENTOMIGRACAO "
                   "WHERE "
                      "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") "
                ") ATENDIMENTO, "
                "ATENDIMENTO.ATENDIMENTOPROTOCOLOMIGRACAO ATENDIMENTOPROTOCOLO, "
                "ATENDIMENTO.ATENDIMENTOPESSOA ATENDIMENTOPESSOA, "
                "ATENDIMENTO.ANDAMENTOMIGRACAO ANDAMENTOMIGRACAO, "
                "CUSTOMER.PESSOADEPARA PESSOADEPARA "
             "WHERE "
                "ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOPESSOA.IDATENDIMENTO "
             "AND ATENDIMENTO.IDATENDIMENTOPROTOCOLOMIGRACAO = ATENDIMENTOPROTOCOLO.IDATENDIMENTOPROTOCOLOMIGRACAO "
             "AND ATENDIMENTOPESSOA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA "
             "AND ATENDIMENTOPESSOA.IDTIPORELACIONAMENTO > 1 "
             "AND ANDAMENTOMIGRACAO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO "
        ") "
        "ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC ";
        */
        
        // Carrega AtendimentoVO
        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinhaTI_Migracao()" );

    return true;
}

bool proCConsultaWFAtendimentoFilaLinhaTI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaLinhaTI()" );

    char listaOraIdAtdProtocolo[40*10+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,10);

    if ( totalProcolos > 0 )   // Vai carregar todos os AtendimentoVO
    {
        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "0 AS INACS,"
               "0 AS INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.ATENDIMENTORELACIONAMENTOV01"
            " WHERE "
               "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") "
           "ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        // Carrega AtendimentoVO
        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);

    } // if ( totalProcolos > 0 )

    ULOG_END( "proCConsultaWFAtendimentoFilaLinhaTI()" );

    return true;
}


bool proCConsultaWFAtdFilaPessoa_Migracao(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtdFilaPessoa_Migracao()" );

    char listaOraIdAtdProtocolo[40*MAX_ROWS_TO_FETCH_PROTOCOLO+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,MAX_ROWS_TO_FETCH_PROTOCOLO);

    if ( totalProcolos > 0 )
    {
        memset(&varOraDadosPro,0,sizeof(varOraDadosPro));

        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        char buffer[256];
        sprintf(buffer,"%d",dados->idPessoaDePara);

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "INACS,"
               "INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.ATENDIMENTORELPESSOAV01"
            " WHERE "
                "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") ";
            "AND IDPESSOA = " + (string)buffer;

        if ( status->inPessoa == 1 )
        {
            query += " AND IDTIPORELACIONAMENTO > 0";
        }
        else if ( status->inPessoa == -1 )
        {
            query += " AND IDTIPORELACIONAMENTO = 2";
        }
        if ( status->idAtendimento > 0 )
        {
            sprintf(buffer,"%ld",dados->idAtendimento);
            query +=" AND IDATENDIMENTO = "+(string)buffer;
        }
        if ( status->idContato > 0 )
        {
            sprintf(buffer,"%d",dados->idContato);
            query +=" AND IDCONTATO = "+(string)buffer;
        }
        if ( status->idEstado > 0 )
        {
            sprintf(buffer,"%d",dados->idEstado);
            query +=" AND IDESTADO = "+(string)buffer;
        }
        if ( status->idSubEstado > 0 )
        {
            sprintf(buffer,"%d",dados->idSubEstado);
            query +=" AND IDSUBESTADO = "+(string)buffer;
        }
        if ( status->dtAberturaInicio > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)>=TO_DATE('"+(string)dados->dtAberturaInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtAberturaFim > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)<=TO_DATE('"+(string)dados->dtAberturaFim+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoInicio > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)>=TO_DATE('"+(string)dados->dtFechamentoInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoFim > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)<=TO_DATE('"+(string)dados->dtFechamentoFim+"','DD/MM/YYYY')";
        }

        query +=" ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);
    }

    ULOG_END( "proCConsultaWFAtdFilaPessoa_Migracao()" );

    return true;
}


bool proCConsultaWFAtendimentoFilaPessoa(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaPessoa(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)" );

    char listaOraIdAtdProtocolo[40*MAX_ROWS_TO_FETCH_PROTOCOLO+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,MAX_ROWS_TO_FETCH_PROTOCOLO);

    if ( totalProcolos > 0 )
    {
        memset(&varOraDadosPro,0,sizeof(varOraDadosPro));

        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        char buffer[256];
        sprintf(buffer,"%d",dados->idPessoaDePara);

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "INACS,"
               "INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.ATENDIMENTORELPESSOAV01"
            " WHERE "
                "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") ";
            "AND IDPESSOA = " + (string)buffer;

        if ( status->inPessoa == 1 )
        {
            query += " AND IDTIPORELACIONAMENTO > 0";
        }
        else if ( status->inPessoa == -1 )
        {
            query += " AND IDTIPORELACIONAMENTO = 2";
        }
        if ( status->idAtendimento > 0 )
        {
            sprintf(buffer,"%ld",dados->idAtendimento);
            query +=" AND IDATENDIMENTO = "+(string)buffer;
        }
        if ( status->idContato > 0 )
        {
            sprintf(buffer,"%d",dados->idContato);
            query +=" AND IDCONTATO = "+(string)buffer;
        }
        if ( status->idEstado > 0 )
        {
            sprintf(buffer,"%d",dados->idEstado);
            query +=" AND IDESTADO = "+(string)buffer;
        }
        if ( status->idSubEstado > 0 )
        {
            sprintf(buffer,"%d",dados->idSubEstado);
            query +=" AND IDSUBESTADO = "+(string)buffer;
        }
        if ( status->dtAberturaInicio > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)>=TO_DATE('"+(string)dados->dtAberturaInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtAberturaFim > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)<=TO_DATE('"+(string)dados->dtAberturaFim+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoInicio > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)>=TO_DATE('"+(string)dados->dtFechamentoInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoFim > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)<=TO_DATE('"+(string)dados->dtFechamentoFim+"','DD/MM/YYYY')";
        }

        query +=" ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);
    }

    ULOG_END( "proCConsultaWFAtendimentoFilaPessoa(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)" );

    return true;
}



bool proCConsultaWFAtendimentoFilaPessoaMig(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaPessoaMig()" );

    char listaOraIdAtdProtocolo[40*MAX_ROWS_TO_FETCH_PROTOCOLO+1];
    int rows_to_fetch = MAX_ROWS_TO_FETCH_PROCESSO; // numero de linhas para cada fetch

    // carrega dados de protocolos respectivos ao tipo de pesquisa
    int totalProcolos =
        proCConsultarProtocolos(dados,status,MAX_ROWS_TO_FETCH_PROTOCOLO);

    if ( totalProcolos > 0 )
    {
        memset(&varOraDadosPro,0,sizeof(varOraDadosPro));

        listaOraIdAtdProtocolo[0] = 0;
        for (int idx=0;idx<totalProcolos;idx++)
        {
            //if (listaOraIdAtdProtocolo[0]) { strcat(listaOraIdAtdProtocolo,","); }
            strcat(listaOraIdAtdProtocolo,(char*)varLstOraIdAtdProtocolo[idx].idAtendimentoProtocolo.arr);
            strcat(listaOraIdAtdProtocolo,",");
        }

        // remove a ultima virgula caso exista
        int idx=strlen(listaOraIdAtdProtocolo)-1;
        if ( idx>0 ) { listaOraIdAtdProtocolo[idx] = 0; }

        char buffer[256];
        sprintf(buffer,"%d",dados->idPessoaDePara);

        string query = 
           "SELECT "
               "IDATENDIMENTOPROTOCOLO,"
               "IDATENDIMENTO,"
               "IDCONTATO,"
               "IDESTADO,"
               "DSESTADO,"
               "SGESTADO,"
               "IDSUBESTADO,"
               "DSSUBESTADO,"
               "SGSUBESTADO,"
               "IDPESSOAUSUARIO,"
               "NMPESSOA,"
               "TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "IDALERTA,"
               "SGALERTA,"
               "DSALERTA,"
               "NMICONE,"
               "NMCOR,"
               "NRCRITICIDADE,"
               "PATH,"
               "NRTELEFONE,"
               "INDOCUMENTO,"
               "INACS,"
               "INPAUSAATENDIMENTO,"
               "TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "NVL(IDATENDIMENTOBAIXAHISTORICO,0),"
               "NMURLDADOS,"
               "TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS'),"
               "TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS'),"
               "NMLOGINUSUARIO"
            " FROM "
               "ATENDIMENTO.ATDRELPESSOAMIGV01"
            " WHERE "
                "IDATENDIMENTOPROTOCOLO IN ("+(string)listaOraIdAtdProtocolo+") ";
            "AND IDPESSOA = " + (string)buffer;

        if ( status->inPessoa == 1 )
        {
            query += " AND IDTIPORELACIONAMENTO > 0";
        }
        else if ( status->inPessoa == -1 )
        {
            query += " AND IDTIPORELACIONAMENTO = 2";
        }
        if ( status->idAtendimento > 0 )
        {
            sprintf(buffer,"%ld",dados->idAtendimento);
            query +=" AND IDATENDIMENTO = "+(string)buffer;
        }
        if ( status->idEstado > 0 )
        {
            sprintf(buffer,"%d",dados->idEstado);
            query +=" AND IDESTADO = "+(string)buffer;
        }
        if ( status->dtAberturaInicio > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)>=TO_DATE('"+(string)dados->dtAberturaInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtAberturaFim > 0 )
        {
            query +=" AND TRUNC(DTABERTURA)<=TO_DATE('"+(string)dados->dtAberturaFim+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoInicio > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)>=TO_DATE('"+(string)dados->dtFechamentoInicio+"','DD/MM/YYYY')";
        }

        if ( status->dtFechamentoFim > 0 )
        {
            query +=" AND TRUNC(DTFECHAMENTO)<=TO_DATE('"+(string)dados->dtFechamentoFim+"','DD/MM/YYYY')";
        }

        query +=" ORDER BY DTABERTURAPROTOCOLO DESC,DTABERTURA DESC";

        processarSaidaProtocoloAtendimentoVO(query,rows_to_fetch,totalProcolos,saida);
    }

    ULOG_END( "proCConsultaWFAtendimentoFilaPessoaMig()" );

    return true;
}



bool proCConsultaWFFilaMassa(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMassa()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        char nmLoginUsuarioFiltro[256];
        int  idContatoFiltro;
        char dtSuspeitoInicioFiltro[11];
        char dtSuspeitoFimFiltro[11];

        short indNmLoginUsuario;
        short indIdContato;
        short indDtSuspeitoInicio;
        short indDtSuspeitoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[12];
        VARCHAR inDocumento[2];
        VARCHAR inACS[2];
        VARCHAR dtSuspeito[22];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[22];
        VARCHAR dtPrazoFinalInterno[22];
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_dtSuspeito;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idContatoFiltro = dados->idContato;
    strcpy(dtSuspeitoInicioFiltro, dados->dtSuspeitoInicio);
    strcpy(dtSuspeitoFimFiltro, dados->dtSuspeitoFim);
    strcpy(nmLoginUsuarioFiltro, dados->nmLoginUsuario);

    indIdContato = status->idContato;
    indDtSuspeitoInicio = status->dtSuspeitoInicio;
    indDtSuspeitoFim = status->dtSuspeitoFim;
    indNmLoginUsuario = status->nmLoginUsuario;

    ULOG( "idContatoFiltro[%d]", idContatoFiltro );
    ULOG( "dtSuspeitoInicioFiltro[%s]", dtSuspeitoInicioFiltro );
    ULOG( "dtSuspeitoFimFiltro[%s]", dtSuspeitoFimFiltro );
    ULOG( "nmLoginUsuarioFiltro[%s]", nmLoginUsuarioFiltro );

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE CONSULTAWFFILAMASSA CURSOR FOR
        SELECT 
            IDATENDIMENTO,
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO,
            IDESTADO,
            DSESTADO,
            SGESTADO,
            IDSUBESTADO,
            DSSUBESTADO,
            SGSUBESTADO,
            IDPESSOAUSUARIO,
            NMPESSOA,
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA,
            IDATENDIMENTOALERTA,
            DSMENSAGEM,
            IDALERTA,
            SGALERTA,
            DSALERTA,
            NMICONE,
            NMCOR,
            NRCRITICIDADE,
            PATH,
            NRTELEFONE,
            INDOCUMENTO,
            0 AS INACS,
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
            IDATENDIMENTOBAIXAHISTORICO,
            NMURLDADOS,
            DTSOLICITACAOCANCELAMENTO,
            DTPRAZOFINALINTERNO,
            IDATENDIMENTOORIGEM
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMASSAWFV01
        WHERE
            UPPER(NMLOGINUSUARIO) = DECODE(:indNmLoginUsuario,-1,UPPER(NMLOGINUSUARIO),UPPER(:nmLoginUsuarioFiltro))
        AND IDCONTATO = DECODE(:indIdContato,-1,IDCONTATO,:idContatoFiltro)
        AND TRUNC(DTSUSPEITO) >= DECODE(:indDtSuspeitoInicio,-1,TRUNC(DTSUSPEITO),TO_DATE(:dtSuspeitoInicioFiltro, 'DD/MM/YYYY'))
        AND TRUNC(DTSUSPEITO) <= DECODE(:indDtSuspeitoFim,-1,TRUNC(DTSUSPEITO),TO_DATE(:dtSuspeitoFimFiltro, 'DD/MM/YYYY'))
        AND ROWNUM < 101;

    EXEC SQL OPEN consultaWFFilaMassa;

    while (true)
    {
        i_dsEstado = i_sgEstado = i_dsSubEstado = i_sgSubEstado = i_nmPessoa = i_dtAbertura 
            = i_dsMensagem = i_sgAlerta = i_dsAlerta = i_nmIcone = i_nmCor = i_arvore = i_nrTelefone 
                = i_inDocumento = i_inACS = i_dtSuspeito = i_nmURLDados = i_dtSolicitacaoCancelamento 
                    = i_dtPrazoFinalInterno = i_nrCriticidade = -1;

        EXEC SQL 
        FETCH consultaWFFilaMassa 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :dtSuspeito:i_dtSuspeito,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        numeroRegistros++;

        CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
        CONVIND(dsEstado, i_dsEstado);
        CONVIND(sgEstado, i_sgEstado);
        CONVIND(dsSubEstado, i_dsSubEstado);
        CONVIND(sgSubEstado, i_sgSubEstado);
        CONVIND(nmPessoa, i_nmPessoa);
        CONVIND(dtAbertura, i_dtAbertura);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(arvore, i_arvore);
        CONVIND(nrTelefone, i_nrTelefone);
        CONVIND(inDocumento, i_inDocumento);
        CONVIND(inACS, i_inACS);
        CONVIND(dtSuspeito, i_dtSuspeito);
        CONVIND(nmURLDados, i_nmURLDados);
        CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
        CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
        CONVIND(nrCriticidade, i_nrCriticidade);

        if (i_idAtendimentoBaixaHistorico == -1)
        {
            idAtendimentoBaixaHistorico = 0;
        }

            saida->createTag("AtendimentoFechamentoMassaVO");

            saida->addItem("operacaoWorkflow","");

            saida->createTag("AtendimentoVO");

                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", "");
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("inDocumento", (char*)inDocumento.arr);
                saida->addItem("inACS", (char*)inACS.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);

                saida->createTag("WFEstadoVO");

                    saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("sgEstado", (char*)sgEstado.arr);

                saida->closeTag();

                saida->createTag("WFSubEstadoVO");

                    saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                    saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                saida->closeTag();

                if (i_idAlerta != -1)
                {
                    saida->createTag("AlertaVO");

                        saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                        saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                        saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                        saida->addItem("nmIcone", (char*)nmIcone.arr);
                        saida->addItem("nmCor", (char*)nmCor.arr);
                        saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);

                    saida->closeTag();
                }

                saida->createTag("ns2:ArvoreAtendimentoVO");

                    saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                    saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);

                saida->closeTag();

            saida->closeTag();

        saida->closeTag();

    }//while (true)

    saida->addItem("totalRegistros", numeroRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaMassa;

    ULOG_END( "proCConsultaWFFilaMassa()" );

    return true;
}

int proCBlocarExecutarQueryDinamica(string &query,int rowsToFetch,int pag)
{
    ULOG_START( "proCBlocarExecutarQueryDinamica()" );

    int ctPag = 0;

    char szLinIni[32];
    char szLinFin[32];

    sprintf(szLinIni,"%d",ctPag * rowsToFetch + 1);
    sprintf(szLinFin,"%d",ctPag * rowsToFetch + rowsToFetch);

    ctPag++;

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int rows_to_fetch = rowsToFetch; // numero de linhas para cada fetch
        int rows_this_time; // numero de linhas carregadas no fetch
    EXEC SQL END DECLARE SECTION;

    string queryPag = "SELECT TEMP2.* FROM (SELECT TEMP.*,ROWNUM AS NLIN FROM ("+query+") TEMP) TEMP2 "
                    "WHERE NLIN >= "+(string)szLinIni+" AND NLIN <= "+(string)szLinFin;

    pOraQuery = queryPag.c_str();

    ULOG("query=%s",pOraQuery);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;   

    EXEC SQL PREPARE statQueryDin FROM :pOraQuery;
    EXEC SQL DECLARE curQueryDin CURSOR FOR statQueryDin;

    EXEC SQL OPEN curQueryDin;

    memset(&varOraDadosPro,0,sizeof(varOraDadosPro));
    memset(&statOraDadosPro,-1,sizeof(statOraDadosPro));

    EXEC SQL FOR :rows_to_fetch 
        FETCH curQueryDin INTO :varOraDadosPro:statOraDadosPro;

    rows_this_time = sqlca.sqlerrd[2];

    EXEC SQL CLOSE curQueryDin;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int idx=0;idx<rows_this_time;idx++)
    {
        CONVIND(varOraDadosPro[idx].idAtendimentoProtocolo,statOraDadosPro[idx].idAtendimentoProtocolo);
        CONVIND(varOraDadosPro[idx].idAtendimento,statOraDadosPro[idx].idAtendimento);
        CONVIND(varOraDadosPro[idx].idContato,statOraDadosPro[idx].idContato);
        CONVIND(varOraDadosPro[idx].idEstado,statOraDadosPro[idx].idEstado);
        CONVIND(varOraDadosPro[idx].dsEstado,statOraDadosPro[idx].dsEstado);
        CONVIND(varOraDadosPro[idx].sgEstado,statOraDadosPro[idx].sgEstado);
        CONVIND(varOraDadosPro[idx].idSubEstado,statOraDadosPro[idx].idSubEstado);
        CONVIND(varOraDadosPro[idx].dsSubEstado,statOraDadosPro[idx].dsSubEstado);
        CONVIND(varOraDadosPro[idx].sgSubEstado,statOraDadosPro[idx].sgSubEstado);
        CONVIND(varOraDadosPro[idx].idPessoa,statOraDadosPro[idx].idPessoa);
        CONVIND(varOraDadosPro[idx].nmPessoa,statOraDadosPro[idx].nmPessoa);
        CONVIND(varOraDadosPro[idx].dtAbertura,statOraDadosPro[idx].dtAbertura);
        CONVIND(varOraDadosPro[idx].dtFechamento,statOraDadosPro[idx].dtFechamento);
        CONVIND(varOraDadosPro[idx].idAlerta,statOraDadosPro[idx].idAlerta);
        CONVIND(varOraDadosPro[idx].sgAlerta,statOraDadosPro[idx].sgAlerta);
        CONVIND(varOraDadosPro[idx].dsAlerta,statOraDadosPro[idx].dsAlerta);
        CONVIND(varOraDadosPro[idx].nmIcone,statOraDadosPro[idx].nmIcone);
        CONVIND(varOraDadosPro[idx].nmCor,statOraDadosPro[idx].nmCor);
        CONVIND(varOraDadosPro[idx].nrCriticidade,statOraDadosPro[idx].nrCriticidade);
        CONVIND(varOraDadosPro[idx].arvore,statOraDadosPro[idx].arvore);
        CONVIND(varOraDadosPro[idx].inDocumento,statOraDadosPro[idx].inDocumento);
        CONVIND(varOraDadosPro[idx].inACS,statOraDadosPro[idx].inACS);
        CONVIND(varOraDadosPro[idx].inPausaAtendimento,statOraDadosPro[idx].inPausaAtendimento);
        CONVIND(varOraDadosPro[idx].dtSuspeito,statOraDadosPro[idx].dtSuspeito);
        CONVIND(varOraDadosPro[idx].dtFimPausa,statOraDadosPro[idx].dtFimPausa);
        CONVIND(varOraDadosPro[idx].idAtendimentoBaixaHistorico,statOraDadosPro[idx].idAtendimentoBaixaHistorico);
        CONVIND(varOraDadosPro[idx].nmURLDados,statOraDadosPro[idx].nmURLDados);
        CONVIND(varOraDadosPro[idx].dtSolicitacaoCancelamento,statOraDadosPro[idx].dtSolicitacaoCancelamento);
        CONVIND(varOraDadosPro[idx].nmLoginUsuarioAbertura,statOraDadosPro[idx].nmLoginUsuarioAbertura);

        if (statOraDadosPro[idx].idAtendimentoBaixaHistorico == -1)
        {
            strcpy((char*)varOraDadosPro[idx].idAtendimentoBaixaHistorico.arr,"0");
            varOraDadosPro[idx].idAtendimentoBaixaHistorico.len = 1;
            statOraDadosPro[idx].idAtendimentoBaixaHistorico = 1;
        }
    }

    ULOG_END( "proCBlocarExecutarQueryDinamica()" );

    return rows_this_time;
}


void processarSaidaProtocolo( int rowsToFetch,int &totalProcolos,XMLGen* saida )
{
    ULOG_START( "processarSaidaProtocolo()" );

    char idAtdProtocoloAnt[64] = {0};
    int idxAnt = 0;
    int rows_this_time = 0;
    int pag=0;
    bool temMaisProcessos = true;
    char nrProtocolo[64];

    for ( int it=0;it<totalProcolos;it++ )
    {
        memset( nrProtocolo, 0x0, sizeof(nrProtocolo) );
        
        //ULOG("idAtendimentoProtocolo=%s",varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr); //@cassio debug
        //ULOG("idAtdProtocoloAnt=%s",idAtdProtocoloAnt); //@cassio debug

        saida->createTag("ProtocoloVO");
            saida->addItem("nrProtocolo",(char*)varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr);
            sprintf( nrProtocolo, "%.*s", varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.len, (char*)varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr);
            
            saida->addItem("nrLinha",(char*)varLstOraIdAtdProtocolo[it].nrTelefoneProtocolo.arr);
            saida->addItem("dsEstado",(char*)varLstOraIdAtdProtocolo[it].dsStatusProtocolo.arr);
            saida->addItem("nmSistema",(char*)varLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo.arr);
            saida->addItem("dtAbertura",(char*)varLstOraIdAtdProtocolo[it].dtAberturaProtocolo.arr);
            saida->addItem("dtFechamento",(char*)varLstOraIdAtdProtocolo[it].dtFechamentoProtocolo.arr);
            
            if ( ExisteAtendimento(nrProtocolo) == true )
            {
                saida->addItem("AtendimentoVO","");
            }

        //ULOG("idxAnt=%d",idxAnt);

        saida->closeTag(); //</ProtocoloVO>

    } // for (it=0;it<totalProcolos;it++)

    saida->addItem("nrRegistros", totalProcolos);
    saida->addItem("totalRegistros", totalProcolos);

    ULOG_END( "processarSaidaProtocolo()" );
}


void processarSaidaProtocoloAtendimentoVO(string &query,int rowsToFetch,int &totalProcolos,XMLGen* saida)
{
    ULOG_START( "processarSaidaProtocoloAtendimentoVO()" );

    char idAtdProtocoloAnt[64] = {0};
    int idxAnt = 0;
    int rows_this_time = 0;
    int pag=0;
    bool temMaisProcessos = true;

    for (int it=0;it<totalProcolos;it++)
    {
        //ULOG("idAtendimentoProtocolo=%s",varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr); //@cassio debug
        //ULOG("idAtdProtocoloAnt=%s",idAtdProtocoloAnt); //@cassio debug

        saida->createTag("ProtocoloVO");
            saida->addItem("nrProtocolo",(char*)varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr);
            saida->addItem("nrLinha",(char*)varLstOraIdAtdProtocolo[it].nrTelefoneProtocolo.arr);
            saida->addItem("dsEstado",(char*)varLstOraIdAtdProtocolo[it].dsStatusProtocolo.arr);
            saida->addItem("nmSistema",(char*)varLstOraIdAtdProtocolo[it].nmSistemaOrigemProtocolo.arr);
            saida->addItem("dtAbertura",(char*)varLstOraIdAtdProtocolo[it].dtAberturaProtocolo.arr);
            saida->addItem("dtFechamento",(char*)varLstOraIdAtdProtocolo[it].dtFechamentoProtocolo.arr);

        //ULOG("idxAnt=%d",idxAnt);

        if ( temMaisProcessos && idxAnt >= rows_this_time )
        {
            rows_this_time = proCBlocarExecutarQueryDinamica(query,rowsToFetch,pag++);
            idxAnt = 0;
            temMaisProcessos = rows_this_time ? true:false;
        }

        for (int idx=idxAnt;idx<rows_this_time;idx++)
        {
            //ULOG("idAtendimentoProtocolo(2)=%s",varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr); //@cassio debug

            if ( strcmp((char*)varOraDadosPro[idx].idAtendimentoProtocolo.arr
                       ,(char*)varLstOraIdAtdProtocolo[it].idAtendimentoProtocolo.arr) == 0 )
            {
                idxAnt = idx;

                saida->createTag("AtendimentoVO");
                    saida->addItem("idAtendimento", (char*)varOraDadosPro[idx].idAtendimento.arr);
                    //saida->addItem("nrProtocolo", (char*)varOraDadosPro[idx].idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)varOraDadosPro[idx].dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)varOraDadosPro[idx].dtFechamento.arr);
                    saida->addItem("nrTelefone", "");
                    saida->addItem("inDocumento", (char*)varOraDadosPro[idx].inDocumento.arr);
                    saida->addItem("inACS", (char*)varOraDadosPro[idx].inACS.arr);
                    saida->addItem("inPausaAtendimento", (char*)varOraDadosPro[idx].inPausaAtendimento.arr);
                    saida->addItem("dtSuspeito", (char*)varOraDadosPro[idx].dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)varOraDadosPro[idx].dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", (char*)varOraDadosPro[idx].idAtendimentoBaixaHistorico.arr);
                    saida->addItem("nmURLDados", (char*)varOraDadosPro[idx].nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)varOraDadosPro[idx].dtSolicitacaoCancelamento.arr);

                    saida->createTag("WFEstadoVO");
                        saida->addItem("idEstado", (char*)varOraDadosPro[idx].idEstado.arr);
                        saida->addItem("dsEstado", (char*)varOraDadosPro[idx].dsEstado.arr);
                        saida->addItem("sgEstado", (char*)varOraDadosPro[idx].sgEstado.arr);
                    saida->closeTag();

                    saida->createTag("WFSubEstadoVO");
                        saida->addItem("idSubEstado", (char*)varOraDadosPro[idx].idSubEstado.arr);
                        saida->addItem("dsSubEstado", (char*)varOraDadosPro[idx].dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)varOraDadosPro[idx].sgSubEstado.arr);
                    saida->closeTag();

                    if (statOraDadosPro[idx].idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                            saida->addItem("idAlerta", (char*)varOraDadosPro[idx].idAlerta.arr);
                            saida->addItem("dsAlerta", (char*)varOraDadosPro[idx].dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)varOraDadosPro[idx].sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)varOraDadosPro[idx].nmIcone.arr);
                            saida->addItem("nmCor", (char*)varOraDadosPro[idx].nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)varOraDadosPro[idx].nrCriticidade.arr);
                        saida->closeTag();
                    }

                    saida->createTag("ns2:ArvoreAtendimentoVO");
                        saida->addItem("ns2:idContato", (char*)varOraDadosPro[idx].idContato.arr);
                        saida->addItem("ns2:descricaoCompleta", (char*)varOraDadosPro[idx].arvore.arr);
                    saida->closeTag();

                    saida->createTag("ns3:UsuarioVIVO");
                        saida->addItem("ns3:idPessoaUsuario", (char*)varOraDadosPro[idx].idPessoa.arr);
                        saida->addItem("ns3:nmLoginUsuario", (char*)varOraDadosPro[idx].nmLoginUsuarioAbertura.arr);
                        saida->addItem("ns3:nmNome", (char*)varOraDadosPro[idx].nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                    saida->closeTag();

                saida->closeTag();
            } // if ( strcmp((char*)varOraDadosPro[idx].idAtendimentoProtocolo.arr ...

        } // for (idx=idxAnt;idx<rows_this_time;idx++)

        saida->closeTag(); //</ProtocoloVO>

    } // for (it=0;it<totalProcolos;it++)

    saida->addItem("nrRegistros", totalProcolos);
    saida->addItem("totalRegistros", totalProcolos);

    ULOG_END( "processarSaidaProtocoloAtendimentoVO()" );
}

bool proCGetDadosConta(int idConta , int idPessoaDePara, XMLGen *saida )
{
    ULOG_START( "proCGetDadosConta()");

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
        int     idconta = idConta;
        int     idpessoadepara = idPessoaDePara;
    
        int idContaUnica;
        VARCHAR cdConta[256];
        VARCHAR cdDigitoConta[256];

        short   i_idContaUnica = -1;
        short   i_cdConta = -1;
        short   i_cdDigitoConta = -1;
    EXEC SQL END DECLARE SECTION;

    ULOG("idpessoadepara=%d",idpessoadepara);
    ULOG("idconta=%d",idconta);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;   

    EXEC SQL SELECT 
            idConta,
            cdConta,
            cdDigitoConta
        INTO 
            :idContaUnica:i_idContaUnica, 
            :cdConta:i_cdConta, 
            :cdDigitoConta:i_cdDigitoConta
        FROM
            customer.PessoaContaLinhaV01
        WHERE
            idPessoaDePara = :idpessoadepara
            AND idConta = :idconta
            AND rownum <= 1;

    if (i_cdConta != -1)
    {
        CONVIND(cdConta, i_cdConta)
        CONVIND(cdDigitoConta, i_cdDigitoConta)
            
        saida->createTag( "ContaVO" );
            saida->addItem( "idConta" , idContaUnica );
            saida->addItem( "nrConta",(char*)cdConta.arr );
            saida->addItem( "nrDigitoConta",(char*)cdDigitoConta.arr );
        saida->closeTag();
    }

    ULOG_END( "proCGetDadosConta()");

    return true;
}


bool ExisteAtendimento(char * nrProtoColo)
{
    ULOG_START( "ExisteAtendimento()");

    struct sqlca sqlca;
   
    EXEC SQL BEGIN DECLARE SECTION;
       char * nrProtocolo_Ora;
       int ctReg;
    EXEC SQL END DECLARE SECTION;
    
    nrProtocolo_Ora = nrProtoColo;

    ULOG("nrProtoColo [%s]",nrProtocolo_Ora );

    EXEC SQL WHENEVER NOT FOUND CONTINUE;   

    EXEC SQL
    SELECT
       COUNT(1)
    INTO
       :ctReg
    FROM 
       ATENDIMENTO.ATENDIMENTORELACIONAMENTOV01
    WHERE 
       IDATENDIMENTOPROTOCOLO = :nrProtocolo_Ora;
    
    ULOG_END( "ExisteAtendimento()");

    if ( ctReg > 0 )
       return true;
    else
       return false;
}


/******************************************************************************************
*
* FIM de pesquisas em geral de atendimento
*
********************************************************************/

/******************************************************************************************
*
* INICIO de pesquisas de DATA
*
********************************************************************/
void proCCalculaData( int cdAreaRegistro, double nrHoras, int incremento, char* saida )
{
    ULOG_START( "proCCalculaData()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int cdarearegistro = cdAreaRegistro;
        int dia;
        double hora;
        VARCHAR data[256];
        short idata=-1;
    EXEC SQL END DECLARE SECTION;

    dia = (int)(nrHoras+incremento)/24;
    hora = ((nrHoras+incremento)/24) - dia;
    if (dia < 1) { dia = 1; }

    ULOG("cdAreaRegistro=%d,nrHoras="MASCFLOAT",incremento=%d"
                                    ,cdAreaRegistro,nrHoras,incremento);
    ULOG("dia=%d,hora="MASCFLOAT,dia,hora);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento( &sqlca );

    EXEC SQL 
        SELECT 
            TO_CHAR((MAX(DATA)+ :hora ), 'dd/mm/yyyy hh24:mi:ss')
        INTO
            :data:idata
        FROM 
            ATENDIMENTO.DIASUTEISV01
        WHERE 
            CDAREAREGISTRO = :cdarearegistro
        AND 
            ROWNUM <= :dia;

    if ( saida )
    {
        if ( -1 == idata )
        {
            *saida = 0;
        }
        else
        {
            CONVIND(data,idata);
            strcpy(saida, (const char*)data.arr);
        }

        ULOG("data calulada=%s",saida==0?"(null)":*saida==0?"nao calculou":saida);
    }
    else
    {
        ULOGW("Buffer de saida não fornecido.");
    }

    ULOG_END( "proCCalculaData()" );

}
/******************************************************************************************
*
* FIM de pesquisas de DATA
*
********************************************************************/
