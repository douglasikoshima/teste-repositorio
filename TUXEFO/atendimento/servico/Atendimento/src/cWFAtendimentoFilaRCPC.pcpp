/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Eder Jani Martins
 * @version $Revision: 1.1.2.1.6.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:21:06 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;

bool proCConsultaWFAvanzadaFilaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAvanzadaFilaRC()" );

    TuxHelper tx;
    int registros = 0 ;

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;
    int numeroRegistros = 0;
    int totalRegistros = 0;

    bool inFechamento = false;
    bool inLinha = false;
    bool inUsuario = false;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    char* p;
    SmallString query;

    bool separa = false;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

        char *queryChar;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    query += "SELECT DISTINCT "
                "idAtendimento, "
                "idAtendimentoProtocolo,"
                "idContato, "
                "idEstado, "
                "dsEstado, "
                "sgEstado, "
                "idSubEstado, "
                "dsSubEstado, "
                "sgSubEstado, "
                "idPessoaUsuario, "
                "nmPessoa, "
                "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAberturaCh, "
                "TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), "
                "idAtendimentoAlerta, "
                "dsMensagem, "
                "idAlerta, "
                "sgAlerta, "
                "dsAlerta, "
                "nmIcone, "
                "nmCor, "
                "nrCriticidade, "
                "path, "
                "nrTelefone, "
                "inDocumento, "
                "inPausaAtendimento, "
                "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), "
                "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoBaixaHistorico, "
                "nmURLDados, "
                "dtSolicitacaoCancelamento, "
                "dtPrazoFinalInterno, "
                "idAtendimentoSuspeito, "
                "idAtendimentoOrigem "
             "FROM ";

    registros = dados->nrCampos;

    if (status->dtFechamentoInicio != -1)
    {
        inFechamento = true;            
    }
    if (status->nrLinha != -1)
    {
        inLinha = true;         
    }
    if (status->idPessoaUsuario != -1)
    {
        inUsuario = true;           
    }

    // filas do sistema
    if ( inFechamento )
    {
        if ( inLinha )
    {
        query += " atendimento.AtdFilaFechadosLinhaWFRCV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
        else
    {
        query += " atendimento.AtdFilaFechadosWFRCV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
    }
    else if ((inLinha) && !(inUsuario))
    {
        query += " atendimento.AtendimentoFilaLinhaWFRCV01 a ";
    }
    else if ((inLinha) && (inUsuario))
    {
        query += " atendimento.AtdFilaUsuarioLinhaWFRCV01 a ";
    }
    else if (!(inLinha) && (inUsuario))
    {
        query += " atendimento.AtendimentoFilaUsuarioWFRCV01 a ";
    }
    else 
    {
        query += " atendimento.AtendimentoFilaWFRCV01 a ";
    }

    if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idUsuarioGrupo, WHERE_INT);
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila("idGrupo", dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    if (status->idContato == 1 && dados->idContato > 0) 
    {
        montaWhereFila("idContato", dados->idContato, WHERE_INT);
    }

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {
        if ( dados->nrLinha[0]=='0' ) 
        {
            strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+3);
        }
        else
        {
            strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+2);
        }
        montaWhereFila("cdAreaRegistro", prefixo, WHERE_INT);
        montaWhereFila("nrLinha", numero, WHERE_INT);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                    idCampo = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                    tpComparacao = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                    idDominio = atoi( p );
                    XMLString::release(&p);
            }
            else
                idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            query += "1 = (select count(1) from atendimento.atendimentofrm af, atendimento.atendimentofrmcampo afc "
                           "where af.idatendimento = a.idatendimento "
                                 "and af.idatendimentofrm = afc.idatendimentofrm "
                                 "and ";
            if (idDominio <= 0)
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND UPPER(afc.dsvalor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) )";
                
            }//if (idDominio <= 0)
            else 
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND afc.idDominio = ";
                query += idDominio;
                query += " ) )";
            }//else if (idDominio <= 0)

            if (valor)
            {
                XMLString::release(&valor);
            }
        }//while (registro =...)
    }//if (status->pesquisaDinamica == 1 && registros > 0)

    query += " ORDER BY dtAbertura ";

    queryChar = query;

    ULOG("WFAtendimento - Pesquisa Avanzada - Query = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaAvanzadaRC FROM :queryChar;
    EXEC SQL DECLARE consultaFilaAvanzadaRC CURSOR FOR consultaAtendimentoFilaAvanzadaRC;

    EXEC SQL OPEN consultaFilaAvanzadaRC;
    while (true)
    {
        EXEC SQL FETCH consultaFilaAvanzadaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        if (numeroRegistros < 100)
        {
            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            // Implementação feita para atender as solicitacoes de refactoring.
            saida->createTag("AtendimentoFilaVO");
                
                    saida->addItem("operacaoWorkflow","");
                
                    saida->createTag("AtendimentoVO");
                
                        saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                        saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                        saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                        saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                        saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                        saida->addItem("inDocumento", (char*)inDocumento.arr);
                        saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                        saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                        saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                        saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                        saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                        saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                        saida->createTag("WFEstadoVO");
                
                            saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                            saida->addItem("dsEstado", (char*)dsEstado.arr);
                            saida->addItem("sgEstado", (char*)sgEstado.arr);
                
                        saida->closeTag();
                
                        saida->createTag("WFSubEstadoVO");
                
                            saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                            saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                            saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                        saida->closeTag();
                
                        if (i_idAlerta != -1)
                        {
                                saida->createTag("AlertaVO");
                        
                                    saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                                    saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                                    saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                                    saida->addItem("nmIcone", (char*)nmIcone.arr);
                                    saida->addItem("nmCor", (char*)nmCor.arr);
                                    saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                                saida->closeTag();
                        }
                
                        saida->createTag("ns2:ArvoreAtendimentoVO");
                
                            saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                            saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                        saida->closeTag();
                
                        saida->createTag("ns3:UsuarioVIVO");
                    
                                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                                saida->addItem("ns3:nmLoginUsuario", "");
                                saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                                saida->addItem("ns3:sgSenhaUsuario", "");
                    
                            saida->closeTag();
                            
                    saida->closeTag();
                
                saida->closeTag();

            numeroRegistros++;

        }
        totalRegistros++;
    }

    saida->addItem("nrRegistros", numeroRegistros);
    saida->addItem("totalRegistros", totalRegistros);

    EXEC SQL CLOSE consultaFilaAvanzadaRC;

    ULOG_END( "proCConsultaWFAvanzadaFilaRC()" );

    return true;
}

bool proCConsultaWFFilaFechadosLinhaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFFilaFechadosLinhaRC CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM 
                Atendimento.ATDFILAFECHADOSLINHAWFRCV01
             WHERE 
                idUsuarioGrupo = :idUsuarioGrupo
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (idPessoaUsuario = :idUsuarioFiltro OR -1=:indIdUsuario)
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
                AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            ORDER BY dtAbertura;

        EXEC SQL OPEN consultaWFFilaFechadosLinhaRC;

    while (true)
    {
        EXEC SQL FETCH consultaWFFilaFechadosLinhaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosLinhaRC;

    ULOG_END( "proCConsultaWFFilaFechadosLinhaRC()" );

    return true;
}

bool proCConsultaWFFilaFechadosUsuarioRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosUsuarioRC()" );

    struct sqlca sqlca;

    char query[2048];

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;

        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    sprintf(query,
               "SELECT * FROM ("
               "SELECT "
                   "idAtendimento,idAtendimentoProtocolo,idContato,idEstado,dsEstado,sgEstado,idSubEstado,dsSubEstado,"
                   "sgSubEstado,idPessoaUsuario,nmPessoa,"
                   "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura,"
                   "TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'),"
                   "idAtendimentoAlerta,dsMensagem,idAlerta,sgAlerta,dsAlerta,nmIcone,"
                   "nmCor,nrCriticidade,path,nrTelefone,inDocumento,0 as inACS,"
                   "inPausaAtendimento,"
                   "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'),"
                   "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'),"
                   "idAtendimentoBaixaHistorico,nmURLDados,dtSolicitacaoCancelamento,"
                   "dtPrazoFinalInterno,idAtendimentoSuspeito,idAtendimentoOrigem "
                "FROM "
                   "ATENDIMENTO.ATDFILAFECHADOSWFRCV01 "
                "WHERE "
                   "idUsuarioGrupo = %d "
                   "AND ROWNUM < 101 "
                   "AND (IDUFOPERADORA = %d OR -1 = %d)"
                   "AND (idPessoaUsuario = %d OR -1 = %d) "
                   "AND (idGrupo = %d OR -1 = %d) "
                   "AND (idAtendimento = %d OR -1 = %d) "
                   "AND (idContato = %d OR -1 = %d) "
                   "AND (idEstado = %d OR -1 = %d) "
                   "AND (idSubEstado = %d OR -1 = %d) "
                   "AND (TRUNC(dtAbertura)>=TO_DATE('%s', 'DD/MM/YYYY' ) OR -1 = %d) "
                   "AND (TRUNC(dtAbertura)<=TO_DATE('%s','DD/MM/YYYY') OR -1 = %d) "
                   "AND (TRUNC(dtFechamento)>=TO_DATE('%s', 'DD/MM/YYYY' ) OR -1 = %d) "
                   "AND (TRUNC(dtFechamento)<=TO_DATE('%s','DD/MM/YYYY') OR -1 = %d) "
               ") ORDER BY dtAbertura"
               ,idUsuarioGrupo,idUfOperadora, indIdUfOperadora
               ,idUsuarioFiltro,indIdUsuario,idGrupoFiltro,indIdGrupo,idAtendimentoFiltro
               ,indIdAtendimento,idContatoFiltro,indIdContato,idEstadoFiltro,indIdEstado
               ,idSubEstadoFiltro,indIdSubEstado,dtAberturaInicioFiltro,indDtAberturaInicio
               ,dtAberturaFimFiltro,indDtAberturaFim,dtFechamentoInicioFiltro,indDtFechamentoInicio
               ,dtFechamentoFimFiltro,indDtFechamentoFim);

    ULOG( "QUERY [%s]",query);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaFechadosUsuarioRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
     FROM 
     (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
         FROM 
            ATENDIMENTO.ATDFILAFECHADOSWFRCV01
         WHERE 
            idUsuarioGrupo = :idUsuarioGrupo
            AND (idPessoaUsuario = :idUsuarioFiltro OR -1=:indIdUsuario)
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            AND ROWNUM < 101
    )
    ORDER BY DTABERTURA;

    EXEC SQL OPEN consultaWFFilaFechadosUsuarioRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaFechadosUsuarioRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", i_idAtendimentoBaixaHistorico == -1
                                                                ? 0
                                                                : idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosUsuarioRC;

    ULOG_END( "proCConsultaWFFilaFechadosUsuarioRC()" );

    return true;
}

bool proCConsultaWFFilaUsuarioLinhaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaUsuarioLinhaRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
        TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        0 AS INACS, 
        INPAUSAATENDIMENTO, 
        TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
        TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
         FROM 
            ATENDIMENTO.ATDFILAUSUARIOLINHAWFRCV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND cdAreaRegistro = :oprefixo
            AND nrLinha = :otelefone
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaUsuarioLinhaRC;

    ULOG("WFAtendimento - Pesquisa Fila Usuario Linha - Lendo o fetch...");
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaUsuarioLinhaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuarioLinhaRC;

    ULOG_END( "proCConsultaWFFilaUsuarioLinhaRC()" );

    return true;
}

bool proCConsultaWFFilaLinhaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaLinhaRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        0 AS INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
         FROM 
            ATENDIMENTO.ATENDIMENTOFILALINHAWFRCV01
         WHERE 
            idPessoaUsuario = :idUsuarioGrupo
            AND cdAreaRegistro = :oprefixo
            AND nrLinha = :otelefone
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaLinhaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaLinhaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaLinhaRC;

    ULOG_END( "proCConsultaWFFilaLinhaRC()" );

    return true;
}

bool proCConsultaWFFilaUsuarioRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        //VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaUsuarioRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
         FROM 
            ATENDIMENTO.ATENDIMENTOFILAUSUARIOWFRCV01
         WHERE
                IDPESSOAUSUARIO = :idPessoaUsuarioFiltro
            AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTO;

    EXEC SQL OPEN consultaWFFilaUsuarioRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaUsuarioRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;
        
        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", 0);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuarioRC;

    ULOG_END( "proCConsultaWFFilaUsuarioRC()" );

    return true;
}

bool proCConsultaWFFilaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaRC CURSOR FOR
        SELECT DISTINCT
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            NMPESSOA, 
            DTABERTURA, 
            DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            DTSUSPEITO, 
            DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
        FROM
        (
            SELECT
                IDATENDIMENTO, 
                IDATENDIMENTOPROTOCOLO,
                IDCONTATO, 
                IDESTADO, 
                DSESTADO, 
                SGESTADO, 
                IDSUBESTADO, 
                DSSUBESTADO, 
                SGSUBESTADO, 
                NMPESSOA, 
                TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
                TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO, 
                IDATENDIMENTOALERTA, 
                DSMENSAGEM, 
                IDALERTA, 
                SGALERTA, 
                DSALERTA, 
                NMICONE, 
                NMCOR, 
                NRCRITICIDADE, 
                PATH, 
                NRTELEFONE, 
                INDOCUMENTO, 
                0 AS INACS, 
                INPAUSAATENDIMENTO, 
                TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO, 
                TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO, 
                IDATENDIMENTOBAIXAHISTORICO, 
                NMURLDADOS, 
                DTSOLICITACAOCANCELAMENTO, 
                DTPRAZOFINALINTERNO, 
                IDATENDIMENTOSUSPEITO, 
                IDATENDIMENTOORIGEM 
            FROM          
                ATENDIMENTO.ATENDIMENTOFILAWFRCV01 VWAFRC
            WHERE 
                VWAFRC.IDGRUPO = DECODE(:indIdGrupo,-1,VWAFRC.IDGRUPO, :idGrupoFiltro)
            AND VWAFRC.IDUFOPERADORA = DECODE(:indIdUfOperadora,-1,VWAFRC.IDUFOPERADORA,:idUfOperadora)
            AND VWAFRC.IDGRUPOCPREVIO IN (SELECT AUG.IDGRUPO 
                                          FROM ACESSO.USUARIOGRUPO AUG 
                                          WHERE AUG.IDPESSOAUSUARIO = :idUsuarioGrupo)
            AND VWAFRC.IDATENDIMENTO = DECODE(:indIdAtendimento,-1,VWAFRC.IDATENDIMENTO,:idAtendimentoFiltro)
            AND VWAFRC.IDCONTATO = DECODE(:indIdContato,-1,VWAFRC.IDCONTATO,:idContatoFiltro)
            AND VWAFRC.IDESTADO = DECODE(:indIdEstado,-1,VWAFRC.IDESTADO,:idEstadoFiltro)
            AND VWAFRC.IDSUBESTADO = DECODE(:indIdSubEstado,-1,VWAFRC.IDSUBESTADO,:idSubEstadoFiltro)
            AND TRUNC(VWAFRC.DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(VWAFRC.DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'DD/MM/YYYY'))
            AND TRUNC(VWAFRC.DTABERTURA) <= DECODE(:indDtAberturaFim,-1,TRUNC(VWAFRC.DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY'))
            AND ROWNUM < 101
        )
        ORDER BY NRCRITICIDADE DESC, IDATENDIMENTO;

    EXEC SQL OPEN consultaWFFilaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaRC;

    ULOG_END( "proCConsultaWFFilaRC()" );

    return true;
}


bool proCConsultaWFFilaMassaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMassaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        char nmLoginUsuarioFiltro[256];
        int  idContatoFiltro;
        char dtSuspeitoInicioFiltro[11];
        char dtSuspeitoFimFiltro[11];

        short indNmLoginUsuario;
        short indIdContato;
        short indDtSuspeitoInicio;
        short indDtSuspeitoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        VARCHAR dtSuspeito[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_dtSuspeito;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idContatoFiltro = dados->idContato;
    strcpy(dtSuspeitoInicioFiltro, dados->dtSuspeitoInicio);
    strcpy(dtSuspeitoFimFiltro, dados->dtSuspeitoFim);
    strcpy(nmLoginUsuarioFiltro, dados->nmLoginUsuario);

    indIdContato = status->idContato;
    indDtSuspeitoInicio = status->dtSuspeitoInicio;
    indDtSuspeitoFim = status->dtSuspeitoFim;
    indNmLoginUsuario = status->nmLoginUsuario;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFFilaMassaRC CURSOR FOR
            SELECT 
                IDATENDIMENTO, 
                IDATENDIMENTOPROTOCOLO,
                IDCONTATO, 
                IDESTADO, 
                DSESTADO, 
                SGESTADO, 
                IDSUBESTADO, 
                DSSUBESTADO, 
                SGSUBESTADO, 
                IDPESSOAUSUARIO, 
                NMPESSOA, 
                TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
                TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS'), 
                IDATENDIMENTOALERTA, 
                DSMENSAGEM, 
                IDALERTA, 
                SGALERTA, 
                DSALERTA, 
                NMICONE, 
                NMCOR, 
                NRCRITICIDADE, 
                PATH, 
                NRTELEFONE, 
                INDOCUMENTO, 
                0 AS INACS, 
                TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
                IDATENDIMENTOBAIXAHISTORICO, 
                NMURLDADOS, 
                DTSOLICITACAOCANCELAMENTO, 
                DTPRAZOFINALINTERNO, 
                IDATENDIMENTOORIGEM 
             FROM          
                ATENDIMENTO.ATENDIMENTOFILAMASSAWFRCV01
             WHERE 
                (UPPER(NMLOGINUSUARIO) = UPPER(:nmLoginUsuarioFiltro) OR -1=:indNmLoginUsuario)
                AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (TRUNC(DTSUSPEITO)>=TO_DATE(:dtSuspeitoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtSuspeitoInicio)
                AND (TRUNC(DTSUSPEITO)<=TO_DATE(:dtSuspeitoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtSuspeitoFim)
            ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaMassaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFFilaMassaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :dtSuspeito:i_dtSuspeito,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

                saida->createTag("AtendimentoFechamentoMassaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);

                    saida->createTag("WFEstadoVO");

                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);

                    saida->closeTag();

                    saida->createTag("WFSubEstadoVO");

                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                    saida->closeTag();

                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        saida->closeTag();
                    }

                    saida->createTag("ns2:ArvoreAtendimentoVO");

                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);

                    saida->closeTag();

                saida->closeTag();

            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaMassaRC;

    ULOG_END( "proCConsultaWFFilaMassaRC()" );

    return true;
}

bool proCConsultaWFAtendimentoFilaRC(int tipo, st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoFilaRC()" );

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;
    int numeroRegistros = 0;
    int totalRegistros = 0;

    char* p;
    SmallString query;
	char sTemp[256]; memset(sTemp,0,sizeof(sTemp));

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        int tabPausa;
        VARCHAR dtSolicitacaoCancelamento[256];
        int idTipoRelacionamento;
        VARCHAR dtPrazoFinalInterno[256];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_tabPausa;
        short i_dtSolicitacaoCancelamento;
        short i_idTipoRelacionamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

        char *queryChar;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    query += "SELECT ";

    if (status->dtFechamentoInicio == 1 && status->dtFechamentoFim == 1)
        query += "UNIQUE ";

    query +=    "idAtendimento, "
                "idAtendimentoProtocolo,"
                "idContato, "
                "idEstado, "
                "dsEstado, "
                "sgEstado, "
                "idSubEstado, "
                "dsSubEstado, "
                "sgSubEstado, "
                "idPessoaUsuario, "
                "nmPessoa, "
                "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, "
                "TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), "
                "idAtendimentoAlerta, "
                "dsMensagem, "
                "idAlerta, "
                "sgAlerta, "
                "dsAlerta, "
                "nmIcone, "
                "nmCor, "
                "nrCriticidade, "
                "path, "
                "nrTelefone, "
                "inDocumento, "
                "inACS, "
                "inPausaAtendimento, "
                "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), "
                "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoBaixaHistorico, "
                "nmURLDados, "
                "DECODE(nvl(inPausaAtendimento,0), 1, decode(sign(nvl(dtFimPausaAtendimento, (sysdate-10)) - sysdate), -1, 0, 1 ), 0) tabPausa, "
                "dtSolicitacaoCancelamento, "
                "idTipoRelacionamento, "
                "dtPrazoFinalInterno, "
                "idAtendimentoSuspeito, "
                "idAtendimentoOrigem "
             "FROM ";

    TuxHelper tx;
    int registros = 0 ;
    if ( status->pesquisaDinamica == 1 )
    {
        p = tx.walkTree(dados->pesquisaDinamica, "nrCampos", 0);
        if ( p )
        {
            registros = atoi( p );
            XMLString::release(&p);
        }
    }

    char *colGrupo[]   = { "idGrupo","idGrupoAndamento" };
    char *colUsuario[] = { "idPessoaUsuario","idPessoaUsuarioAndamento" };
    int idxColGrupo    = 0; // idGrupo de AtendimentoGrupoAtual é o default
    int idxColUsuario  = 0; // idPessoaUsuario de AtendimentoGrupoAtual é o default

    /**
    * Tipo 1 - Pesquisa Fila.
    *          -- Se a pesquisa contiver campos dinamicos usa uma view preparada para tal.
    *          -- Não tendo campos dinamicos associados usa a view simples.
    * Tipo 2 - Pesquisa InBox
    *          -- Pesquisa padrão pela view básica.
    * Tipo 3 - Pesquisa Relacionamento.
    *          -- A view AtendimentoRelacionamento é usada quando a chave de filtro é a pessoadepara.
    *          -- Quando a pesquisa é de tipo 2 (linha) é usada a view padrão que atende ao requisito.
    * Tipo 4 - Pesquisa de massa.
    **/

    if ( (tipo == 1 && registros == 0) || tipo == 2 || tipo == 4 )
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaRCV01 ";
        }
        else
        {
            ULOG("WFAtendimento - Pesquisa Fila Alerta - Pesquisando por parametros de fechamento...");
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaRCV03 ";
        }

    }
    else if (tipo == 1 && registros > 0)
    {
        if (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1)
        {
            query += " atendimento.AtendimentoFilaAlertaRCV02 ";
        }
        else
        {
            idxColUsuario = 1;
            idxColGrupo = 1;
            query += " atendimento.AtendimentoFilaAlertaRCV04 ";
        }
    }
    else if(tipo == 3) // Psq. Relacionamento se nao for pesquisa de linha.
    {
        query += " atendimento.AtendimentoRelacionamentoRCV01 ";
    }       

    bool separa = false;

    // Só filtra pelo grupo quando não tiver indicado fechamento no filtro.
    if (tipo != 3 && (status->dtFechamentoInicio != 1 && status->dtFechamentoFim != 1))
    {
        montaWhereFila("idGrupo", "", WHERE_IS_NOT_NULL);
    }

    if (tipo != 3)
    {
        montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila(colUsuario[idxColUsuario], dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila(colGrupo[idxColGrupo], dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    //if (status->idContato == 1 && dados->idContato > 0) 
    //  montaWhereFila("idContato", dados->idContato, WHERE_INT);

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->textoContato == 1 && strlen(dados->textoContato) > 0)
    {
        montaWhereFila("path", dados->textoContato, WHERE_CHAR_LIKE);
    }       
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {
        montaWhereFila("nrLinha", dados->nrLinha, WHERE_CHAR);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    if( tipo == 3 )
    {
        if (status->idUfOperadora == 1 && dados->idUfOperadora > 0)
        {
            montaWhereFila("idUfOperadora", dados->idUfOperadora, WHERE_INT);
        }
    }
    /**
        O FILTRO FOI DESABILITADO, para que seja possível contar o total de registros
        do FETCH.

        Esse filtro foi implementado especialmente para a pesquisa de relacionamento onde
        a primeira chamada apenas retorna os primeiros 10 registros encontrados.
    if (status->inPrimeiraChamada == 1 && dados->inPrimeiraChamada > 0)
    {
        montaWhereFila("rownum", 10, WHERE_INT_MENOR);
    }
    else
    {
        montaWhereFila("rownum", 20, WHERE_INT_MENOR);
    }
    */

    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                idCampo = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                tpComparacao = atoi( p );
                XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                idDominio = atoi( p );
                XMLString::release(&p);
            }
        else
            idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            if (idDominio <= 0)
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND UPPER(valor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) ";
            
            }
            else 
            {
                query += " ( idCampo = ";
                query += idCampo;
                query += " AND idDominio = ";
                query += idDominio;
                query += " ) ";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
     }

    /**
        Filtro desenvolvido restringir os registros de acordo com os grupos passados, o método de concatenação
        foi tratado de maneira que a query não tenha a clausula IN.
    
        O XML:
        <GruposDoUsuario>
            <Grupo>1</Grupo>
            <Grupo>4</Grupo>
        </GruposDoUsuario>
    
        É transformado para a cláusula:
        (idGrupo = 1 OR idGrupo = 4)
    */
    if (status->gruposUsuario == 1)
    {

        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        for (int i = 0; i < dados->gruposUsuario->GetCount() && i < 11; i++)
        {
            if (i > 0)
            {
                query += " OR ";
            }

            query += colGrupo[idxColGrupo];
            query += " = ";

            query += (char*)dados->gruposUsuario->GetItem(i);
            query += " ";

        }

        query += " ) ";
    }

    if (tipo == 3)
    {
        // Pesquisa pelo Cliente.
        if (dados->tpPesquisa == FILA_TPPESQ_CLIENTE)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            /**
                Registros de abertura, onde o responsabel pela abertura foi o usuário da
                linha, registra também uma linha de dado apontando para o cliente da linha,
                onde o atributo tem valor 0, quando o próprio cliente abre o atendimento
                seu valor é 2.

                M0007 (Melhoria) - Invalida o comentário acima! - Set, 2006 - Cassio
                Quando um processo é aberto por usário, o registro gerado em 
                atendimentoPessoa aponta para tipo relacionamento 2 ao invés de 0 a partir desta
                versão.
            **/
            // query += " AND (idTipoRelacionamento = 0 OR idTipoRelacionamento = 2) ";
            query += " AND idTipoRelacionamento = 2 ";
        }
        // Pesquisa pela linha.
        if (dados->tpPesquisa == FILA_TPPESQ_LINHA)
        {
            if (status->idPessoaLinhaHistorico == 1 && dados->idPessoaLinhaHistorico> 0)
            {
                //montaWhereFila("idPessoaLinhaHistorico	", dados->idPessoaLinhaHistorico, WHERE_INT);
				query += "idPessoaLinhaHistorico = ";
				sprintf(sTemp,"%lu",dados->idPessoaLinhaHistorico);
				query += sTemp;
            }
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR); 

        }
        // Pesquisa pela pessoa.
        if (dados->tpPesquisa == FILA_TPPESQ_PESSOA)
        {
            montaWhereFila("idPessoaDePara", dados->idPessoaDePara, WHERE_INT);
            montaWhereFila("idTipoRelacionamento", 0, WHERE_INT_MAIOR);
        }

    }

    if (status->pesquisa == 1 && strlen(dados->pesquisa) > 0 && tipo != 3)
    {
        // Chamada apenas para gerar WHERE ou AND na concatenacao.
        montaWhereFila("","", 999);

        query += " ( ";

        if (atoi(dados->pesquisa) > 0)
        {
            query += " idAtendimento = ";
            query += dados->pesquisa;
            query += " OR ";
        }

        query += " nmPessoa LIKE '%";
        query += dados->pesquisa;
        query += "%' "; 
        query += " OR path LIKE '%";
        query += dados->pesquisa;
        query += "%') "; 
    }

    if (tipo == 4) 
    {
        montaWhereFila("idAtendimentoSuspeito", 0, WHERE_INT_MAIOR);

        if (status->dtSuspeitoInicio == 1 && strlen(dados->dtSuspeitoInicio) > 0) 
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoInicio, WHERE_DATA_MAIORIGUAL);
        }

        if (status->dtSuspeitoFim == 1 && strlen(dados->dtSuspeitoFim) > 0)
        {
            montaWhereFila("TRUNC(dtSuspeito)", dados->dtSuspeitoFim, WHERE_DATA_MENORIGUAL);
        }
    }

    if (status->dtFechamentoInicio == 1 && status->dtFechamentoFim == 1)
    {
        query += " ORDER BY dtAbertura ";
    }

    queryChar = query;

    ULOG("WFAtendimento - Pesquisa Relacionamento - Query = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaRC FROM :queryChar;
    EXEC SQL DECLARE consultaFilaRC CURSOR FOR consultaAtendimentoFilaRC;

    EXEC SQL OPEN consultaFilaRC;
    while (true)
    {
        EXEC SQL FETCH consultaFilaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :tabPausa:i_tabPausa,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :idTipoRelacionamento:i_idTipoRelacionamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        // Solução encontrada para resolver o problema na view que retornava mais
        // de um registro quando indicado o idContato.
        if (status->idContato != -1 && dados->idContato > 0 && dados->idContato != idContato)
            continue;

        if ((status->inPrimeiraChamada == 1 && dados->inPrimeiraChamada > 0 && numeroRegistros < 10) || ((status->inPrimeiraChamada != 1 || dados->inPrimeiraChamada == 0) && numeroRegistros < 100))
        {

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            // Implementação feita para atender as solicitacoes de refactoring.
            if (tipo != 2)
            {
                if (tipo == 1)
                    saida->createTag("AtendimentoFilaVO");
                else if (tipo == 2)
                    saida->createTag("AtendimentoInBoxVO");
                else if (tipo == 3)
                    saida->createTag("AtendimentoRelacionamentoVO");
                else 
                    saida->createTag("AtendimentoFechamentoMassaVO");
                
                    saida->addItem("operacaoWorkflow","");
                
                    saida->createTag("AtendimentoVO");
                
                        saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                        saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                        saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                        saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                        saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                        saida->addItem("inDocumento", (char*)inDocumento.arr);
                        saida->addItem("inACS", (char*)inACS.arr);
                        saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                        saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                        saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                        saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                        saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                        saida->addItem("tabPausa", CONVINT(tabPausa,i_tabPausa));
                        saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                        saida->createTag("WFEstadoVO");
                
                            saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                            saida->addItem("dsEstado", (char*)dsEstado.arr);
                            saida->addItem("sgEstado", (char*)sgEstado.arr);
                
                        saida->closeTag();
                
                        saida->createTag("WFSubEstadoVO");
                
                            saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                            saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                            saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                        saida->closeTag();
                
                        if (tipo != 3)
                        {
                            if (i_idAlerta != -1)
                            {

                                saida->createTag("AlertaVO");
                        
                                    saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                                    saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                                    saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                                    saida->addItem("nmIcone", (char*)nmIcone.arr);
                                    saida->addItem("nmCor", (char*)nmCor.arr);
                                    saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                                saida->closeTag();
                            }
                        }
                
                        saida->createTag("ns2:ArvoreAtendimentoVO");
                
                            saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                            saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                        saida->closeTag();
                
                        if (tipo == 1 || tipo == 3)
                        {
                            saida->createTag("ns3:UsuarioVIVO");
                    
                                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                                saida->addItem("ns3:nmLoginUsuario", "");
                                saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                                saida->addItem("ns3:sgSenhaUsuario", "");
                    
                            saida->closeTag();
                        }
                            
                    saida->closeTag();
                
                saida->closeTag();
            }
            else
            {
                saida->createTag("RWFAtendimentoVO");

                    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("inResponsavelAbertura", CONVINT(idTipoRelacionamento,i_idTipoRelacionamento));
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                    saida->addItem("tabPausa", CONVINT(tabPausa,i_tabPausa));
                    saida->addItem("tpOperacao", (char*)inDocumento.arr);
                    saida->addItem("nmCor", (char*)nmCor.arr);
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                    saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("descricaoCompleta", (char*)arvore.arr);
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);

                    saida->createTag("ns3:UsuarioVIVO");
            
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
            
                    saida->closeTag();

                saida->closeTag();
            }

            numeroRegistros++;

        }

        totalRegistros++;

    }

    saida->addItem("nrRegistros", numeroRegistros);
    saida->addItem("totalRegistros", totalRegistros);

    EXEC SQL CLOSE consultaFilaRC;

    ULOG_END( "proCConsultaWFAtendimentoFilaRC()" );

    return true;
}




bool proCConsultaWFInboxFechadosUsuarioLinhaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxFechadosUsuarioLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    ULOG("Filtro por data de Fechamento =  [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado =  [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdUfOperadora = status->idUfOperadora;

    ULOG("Filtro por data de Fechamento =  [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", indIdEstado);
    ULOG("Filtro por SubEstado =  [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFInBoxFechadosUsuarioLinhaRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
         FROM 
            ATENDIMENTO.ATDFILAFECHADOSUSRLINHAWFRCV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND cdAreaRegistro = :oprefixo
            AND nrLinha = :otelefone
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            AND (2=:tbPausa)
            AND ROWNUM < 101
    )
    ORDER BY DTABERTURA;

    EXEC SQL OPEN consultaWFInBoxFechadosUsuarioLinhaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxFechadosUsuarioLinhaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);

                saida->createTag("ns3:UsuarioVIVO");
            
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
        
                saida->closeTag();

            saida->closeTag();
            

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxFechadosUsuarioLinhaRC;

    ULOG_END( "proCConsultaWFInboxFechadosUsuarioLinhaRC()" );

    return true;
}

bool proCConsultaWFInboxFechadosUsuarioRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxFechadosUsuarioRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;

        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    ULOG("Filtro por data de Fechamento Inicio =  [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por data de Fechamento Fim =  [%s]", dados->dtFechamentoFim);
    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado =  [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdUfOperadora = status->idUfOperadora;

    ULOG("Filtro por data de Fechamento =  [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", indIdEstado);
    ULOG("Filtro por SubEstado =  [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFInBoxFechadosUsuarioRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
         FROM 
            ATENDIMENTO.ATDFILAFECHADOSUSUARIOWFRCV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            AND (2=:tbPausa)
            AND ROWNUM < 101
    )
    ORDER BY DTABERTURA;

    EXEC SQL OPEN consultaWFInBoxFechadosUsuarioRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxFechadosUsuarioRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                saida->addItem("nmNome", (char*)nmPessoa.arr);
            saida->closeTag();

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);


    EXEC SQL CLOSE consultaWFInBoxFechadosUsuarioRC;

    ULOG_END( "proCConsultaWFInboxFechadosUsuarioRC()" );

    return true;
}

bool proCConsultaWFInboxUsuarioLinhaRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxUsuarioLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    ULOG("Filtro por data de Fechamento =  [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado =  [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    ULOG("Filtro por data de Fechamento =  [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", indIdEstado);
    ULOG("Filtro por SubEstado =  [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFInBoxUsuarioLinhaRC CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
         FROM 
            ATENDIMENTO.ATDFILAUSUARIOLINHAWFRCV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND cdAreaRegistro = :oprefixo
            AND nrLinha = :otelefone
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (
            (0=:tbPausa AND ((inPausaAtendimento = 0) OR (dtFimPausaAtendimento < SYSDATE)))
            OR (1=:tbPausa AND dtFimPausaAtendimento >= SYSDATE)
            OR (2=:tbPausa)
            )
            AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFInBoxUsuarioLinhaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxUsuarioLinhaRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);

                saida->createTag("ns3:UsuarioVIVO");
            
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
        
                saida->closeTag();

            saida->closeTag();
            
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxUsuarioLinhaRC;

    ULOG_END( "proCConsultaWFInboxUsuarioLinhaRC()" );

    return true;
}

bool proCConsultaWFInboxUsuarioRC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxUsuarioRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (status->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (status->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (status->idGrupo != -1)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    ULOG("Filtro por data de Fechamento =  [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%s]", dados->nrLinha);
    ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio =  [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", dados->idContato);
    ULOG("Filtro por Estado =  [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado =  [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa =  [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    ULOG("Filtro por data de Fechamento =  [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha =  [%d]", status->nrLinha);
    ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo =  [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio =  [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim =  [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
    ULOG("Filtro por Contato =  [%d]", status->idContato);
    ULOG("Filtro por Estado =  [%d]", indIdEstado);
    ULOG("Filtro por SubEstado =  [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa =  [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL DECLARE consultaWFInBoxUsuarioRC CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem 
             FROM 
                Atendimento.AtendimentoFilaUsuarioWFRCV01
             WHERE 
                idPessoaUsuario = :idPessoaUsuarioFiltro
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ((0=:tbPausa AND ((inPausaAtendimento = 0) OR (dtFimPausaAtendimento < SYSDATE)))
                OR (1=:tbPausa AND dtFimPausaAtendimento >= SYSDATE)
                OR (2=:tbPausa)
                )
            ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFInBoxUsuarioRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxUsuarioRC INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                saida->addItem("nmNome", (char*)nmPessoa.arr);
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxUsuarioRC;

    ULOG_END( "proCConsultaWFInboxUsuarioRC()" );

    return true;
}

