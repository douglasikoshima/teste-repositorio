/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Eder Jani Martins
 * @version $Revision: 1.1.2.1.6.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:15:37 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;

bool proCConsultaWFFilaCRIPorAtendimento(long _idAtendimento,int _idPessoaUsuario,XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaCRIPorAtendimento()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        struct
        {
            long idAtendimento;
            char idAtendimentoProtocolo[39];
            char nmCor[256];
            char nrCriticidade[256];
            char dsEstado[256];
            char dsSubEstado[256];
            char nmPessoa[256];
            char dtAbertura[64];
            char dtFechamento[64];
            char path[2001];
            char nrTelefone[256];
        } DadosAtendimento;

        struct
        {
            short idAtendimento;
            short idAtendimentoProtocolo;
            short nmCor;
            short nrCriticidade;
            short dsEstado;
            short dsSubEstado;
            short nmPessoa;
            short dtAbertura;
            short dtFechamento;
            short path;
            short nrTelefone;
        } iDadosAtendimento;

        long idAtendimento = _idAtendimento;
        int idPessoaUsuario = _idPessoaUsuario;

    EXEC SQL END DECLARE SECTION;

    memset(&DadosAtendimento,0,sizeof(DadosAtendimento));
    memset(&iDadosAtendimento,-1,sizeof(iDadosAtendimento));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL 
        SELECT 
            IDATENDIMENTO,
            IDATENDIMENTOPROTOCOLO,
            NMCOR,
            NRCRITICIDADE,
            DSESTADO, 
            DSSUBESTADO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO,
            PATH, 
            NRTELEFONE
        INTO
            :DadosAtendimento:iDadosAtendimento
        FROM
            ATENDIMENTO.ATENDIMENTOFILAPROCWFCRIV01 AFCRI
        WHERE 
            IDATENDIMENTO = :idAtendimento
            AND AFCRI.IDGRUPO = (SELECT IDGRUPO 
                             FROM ACESSO.USUARIOGRUPO USUARIOGRUPO 
                            WHERE USUARIOGRUPO.IDGRUPO = AFCRI.IDGRUPO 
                              AND USUARIOGRUPO.IDPESSOAUSUARIO=:idPessoaUsuario );

    if ( sqlca.sqlcode == 0 )
    {
        numeroRegistros = 1;
        totalRegistros = 1;

        saida->createTag("AtendimentoFilaVO");

            saida->addItem("operacaoWorkflow","");

            saida->createTag("AtendimentoVO");

                saida->addItem("inCRI", 1 );

                saida->addItem("idAtendimento", CONVINT(DadosAtendimento.idAtendimento,iDadosAtendimento.idAtendimento));
                saida->addItem("dtAbertura", DadosAtendimento.dtAbertura);
                saida->addItem("nrProtocolo", DadosAtendimento.idAtendimentoProtocolo);
                saida->addItem("dtFechamento", DadosAtendimento.dtFechamento);
                saida->addItem("nrTelefone", DadosAtendimento.nrTelefone);
                saida->addItem("inDocumento", 0);
                saida->addItem("inACS", 0);
                saida->addItem("inPausaAtendimento", 0);
                saida->addItem("dtSuspeito", 0);
                saida->addItem("dtFimPausaAtendimento", 0);
                saida->addItem("idAtendimentoBaixaHistorico", 0);
                saida->addItem("nmURLDados", 0);
                saida->addItem("dtSolicitacaoCancelamento", 0);

                saida->createTag("WFEstadoVO");

                    saida->addItem("idEstado", 0);
                    saida->addItem("dsEstado",DadosAtendimento.dsEstado);
                    saida->addItem("sgEstado", 0);

                saida->closeTag();

                saida->createTag("WFSubEstadoVO");

                    saida->addItem("idSubEstado", 0);
                    saida->addItem("dsSubEstado", DadosAtendimento.dsSubEstado);
                    saida->addItem("sgSubEstado", 0);

                saida->closeTag();

                    saida->createTag("AlertaVO");
                    
                        saida->addItem("idAlerta", 0);
                        saida->addItem("dsAlerta", 0);
                        saida->addItem("sgAlerta", 0);
                        saida->addItem("nmIcone", 0);
                        saida->addItem("nmCor", DadosAtendimento.nmCor);
                        saida->addItem("nrCriticidade", DadosAtendimento.nrCriticidade);
                    
                    saida->closeTag();

                saida->createTag("ns2:ArvoreAtendimentoVO");

                    saida->addItem("ns2:idContato", 0);
                    saida->addItem("ns2:descricaoCompleta", DadosAtendimento.path);

                saida->closeTag();

                saida->createTag("ns3:UsuarioVIVO");

                    saida->addItem("ns3:idPessoaUsuario", 0);
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", DadosAtendimento.nmPessoa);
                    saida->addItem("ns3:sgSenhaUsuario", "");

                saida->closeTag();
                        
            saida->closeTag();

        saida->closeTag();
    }
    else
    {
        numeroRegistros = 0;
        totalRegistros = 0;
    }


    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaCRIPorAtendimento()" );

    return true;
}

bool proCConsultaWFFilaCRIPorAtendimentoQtd(long _idAtendimento,int _idPessoaUsuario,XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaCRIPorAtendimentoQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int iContador;
        short sContator;

        long idAtendimento = _idAtendimento;
        int idPessoaUsuario = _idPessoaUsuario;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL 
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContator
	FROM
		ATENDIMENTO.ATENDIMENTOFILAPROCWFCRIV01 AFCRI
	WHERE 
		IDATENDIMENTO = :idAtendimento
	AND 
		AFCRI.IDGRUPO = 
		(
			SELECT 
				IDGRUPO 
			FROM
				ACESSO.USUARIOGRUPO USUARIOGRUPO 
			WHERE
				USUARIOGRUPO.IDGRUPO = AFCRI.IDGRUPO 
			AND 
				USUARIOGRUPO.IDPESSOAUSUARIO=:idPessoaUsuario 
		);

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaCRIPorAtendimentoQtd()" );

    return true;
}

bool proCConsultaWFFilaAbertosPorLinhaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaAbertosPorLinhaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE curWFFilaAbertosLinhaCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        ASSOCIADO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
        TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO,
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        0 AS INACS, 
        INPAUSAATENDIMENTO, 
        TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
        TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
        ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
    WHERE 
        idPessoaUsuario = :idUsuarioGrupo
        AND INCRI = 1
        AND cdAreaRegistro = :oprefixo
        AND nrLinha = :otelefone
    ORDER BY dtAbertura, idAtendimento;

    EXEC SQL OPEN curWFFilaAbertosLinhaCRI;

    while (true)
    {
        i_idAtendimentoProtocolo = 
        i_dsEstado = 
        i_sgEstado = 
        i_dsSubEstado = 
        i_sgSubEstado = 
        i_nmPessoa = 
        i_dtAbertura = 
        i_dtFechamento = 
        i_dsMensagem = 
        i_sgAlerta = 
        i_dsAlerta = 
        i_nmIcone = 
        i_nmCor = 
        i_arvore = 
        i_nrTelefone = 
        i_inDocumento = 
        i_inACS = 
        i_dtSuspeito = 
        i_dtFimPausa = 
        i_nmURLDados = 
        i_dtSolicitacaoCancelamento = 
        i_dtPrazoFinalInterno = 
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            curWFFilaAbertosLinhaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                    saida->closeTag();

                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }

    EXEC SQL CLOSE curWFFilaAbertosLinhaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaAbertosPorLinhaCRI()" );

    return true;
}

bool proCConsultaWFFilaAbertosPorLinhaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaAbertosPorLinhaCRIQtd()" );

    struct sqlca sqlca;
    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
    FROM 
        ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
    WHERE 
        IDPESSOAUSUARIO = :idUsuarioGrupo
    AND 
    	INCRI = 1
    AND 
    	CDAREAREGISTRO = :oprefixo
    AND 
    	NRLINHA = :otelefone;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaAbertosPorLinhaCRIQtd()" );

    return true;
}

bool proCConsultaWFFilaFechadosPorLinhaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosPorLinhaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL 
    DECLARE 
        curWFFilaFechadosLinhaCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO,
        IDATENDIMENTOPROTOCOLO,
        DECODE( INCRI, 0, 0, 1 ) INCRI,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
        TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        0 AS INACS, 
        INPAUSAATENDIMENTO, 
        TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
        TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
        ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01
    WHERE 
        IDUSUARIOGRUPO = :idUsuarioGrupo
        AND INCRI = 1
        AND CDAREAREGISTRO = :oprefixo
        AND NRLINHA = :otelefone
    ORDER BY DTABERTURA, IDATENDIMENTO;

    EXEC SQL OPEN curWFFilaFechadosLinhaCRI;
    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            curWFFilaFechadosLinhaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }

    EXEC SQL CLOSE curWFFilaFechadosLinhaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaFechadosPorLinhaCRI()" );

    return true;
}

bool proCConsultaWFFilaFechadosPorLinhaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosPorLinhaCRIQtd()" );

    struct sqlca sqlca;
    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
    	int iContador;
    	short sContador;
        int  idUsuarioGrupo = dados->idUsuarioGrupo;
        int  oprefixo       = prefixo;
        int  otelefone      = numero;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL 
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
    FROM 
        ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01
    WHERE 
		IDUSUARIOGRUPO = :idUsuarioGrupo
	AND 
		INCRI = 1
	AND 
		CDAREAREGISTRO = :oprefixo
	AND 
		NRLINHA = :otelefone;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaFechadosPorLinhaCRIQtd()" );

    return true;
}

bool proCConsultaWFAvanzadaFilaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAvanzadaFilaCRI()" );

    TuxHelper tx;
    int registros = 0 ;

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;
    int numeroRegistros = 0;
    int totalRegistros = 0;

    bool inFechamento = false;
    bool inLinha = false;
    bool inUsuario = false;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    char* p;
    SmallString query;

    bool separa = false;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

        char *queryChar;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    query += "SELECT "
                "idAtendimento, "
                "idAtendimentoProtocolo,"
                "idContato, "
                "idEstado, "
                "dsEstado, "
                "sgEstado, "
                "idSubEstado, "
                "dsSubEstado, "
                "sgSubEstado, "
                "idPessoaUsuario, "
                "nmPessoa, "
                "TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAberturaCh, "
                "TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), "
                "idAtendimentoAlerta, "
                "dsMensagem, "
                "idAlerta, "
                "sgAlerta, "
                "dsAlerta, "
                "nmIcone, "
                "nmCor, "
                "nrCriticidade, "
                "path, "
                "nrTelefone, "
                "inDocumento, "
                "inPausaAtendimento, "
                "TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), "
                "TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), "
                "idAtendimentoBaixaHistorico, "
                "nmURLDados, "
                "dtSolicitacaoCancelamento, "
                "dtPrazoFinalInterno, "
                "idAtendimentoSuspeito, "
                "idAtendimentoOrigem "
             "FROM ";

    registros = dados->nrCampos;

    if (status->dtFechamentoInicio != -1)
    {
        inFechamento = true;            
    }
    if (status->nrLinha != -1)
    {
        inLinha = true;         
    }
    if (status->idPessoaUsuario != -1)
    {
        inUsuario = true;           
    }
    
    if ( inFechamento )
    {
        if ( inLinha )
    {
            // query += " atendimento.AtdFilaFechadosLinhaWFV01 a ";
        query += " ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
        else
    {
            // query += " atendimento.AtdFilaFechadosWFV01 a ";
        query += " ATENDIMENTO.ATDFILAFECHADOSWFCRIV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
    }
    else if ((inLinha) && !(inUsuario))
    {
        // query += " atendimento.AtendimentoFilaLinhaWFV01 a ";       
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a "; /* ATENDIMENTO.ATENDIMENTOFILALINHAWFCRIV01 */
    }
    else if ((inLinha) && (inUsuario))
    {
        // query += " atendimento.AtdFilaUsuarioLinhaWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a "; /* ATENDIMENTO.ATDFILAUSUARIOLINHAWFCRIV01 */   
    }
    else if (!(inLinha) && (inUsuario))
    {
        // query += " atendimento.AtendimentoFilaUsuarioWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAUSUARIOWFCRIV01 a ";
    }
    else 
    {
        // query += " atendimento.AtendimentoFilaWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a ";
    }

    if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idUsuarioGrupo, WHERE_INT);
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila("idGrupo", dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    if (status->idContato == 1 && dados->idContato > 0) 
    {
        montaWhereFila("idContato", dados->idContato, WHERE_INT);
    }

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {

        if ( dados->nrLinha[0]=='0' ) 
        {
            strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+3);
        }
        else
        {
            strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+2);
        }
        montaWhereFila("cdAreaRegistro", prefixo, WHERE_INT);
        montaWhereFila("nrLinha", numero, WHERE_INT);
    }
        
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
        
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
        
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }

    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                    idCampo = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                    tpComparacao = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                    idDominio = atoi( p );
                    XMLString::release(&p);
            }
            else
                idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            query += "1 = (select count(1) from atendimento.atendimentofrm af, atendimento.atendimentofrmcampo afc "
                           "where af.idatendimento = a.idatendimento "
                                 "and af.idatendimentofrm = afc.idatendimentofrm "
                                 "and ";
            if (idDominio <= 0)
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND UPPER(afc.dsvalor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) )";
                
            }
            else 
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND afc.idDominio = ";
                query += idDominio;
                query += " ) )";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
    }

    query += " ORDER BY dtAbertura ";

    queryChar = query;

    ULOG("WFAtendimento - Pesquisa Avanzada - Query = [%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaAvanzadaCRI FROM :queryChar;
    EXEC SQL DECLARE consultaFilaAvanzadaCRI CURSOR FOR consultaAtendimentoFilaAvanzadaCRI;

    EXEC SQL OPEN consultaFilaAvanzadaCRI;
    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL FETCH consultaFilaAvanzadaCRI INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        if (numeroRegistros < 100)
        {

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            // Implementação feita para atender as solicitacoes de refactoring.
            saida->createTag("AtendimentoFilaVO");
                
                    saida->addItem("operacaoWorkflow","");
                
                    saida->createTag("AtendimentoVO");
                
                        saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                        saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                        saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                        saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                        saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                        saida->addItem("inDocumento", (char*)inDocumento.arr);
                        saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                        saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                        saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                        saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                        saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                        saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                        saida->createTag("WFEstadoVO");
                
                            saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                            saida->addItem("dsEstado", (char*)dsEstado.arr);
                            saida->addItem("sgEstado", (char*)sgEstado.arr);
                
                        saida->closeTag();
                
                        saida->createTag("WFSubEstadoVO");
                
                            saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                            saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                            saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                        saida->closeTag();
                
                        if (i_idAlerta != -1)
                        {

                                saida->createTag("AlertaVO");
                        
                                    saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                                    saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                                    saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                                    saida->addItem("nmIcone", (char*)nmIcone.arr);
                                    saida->addItem("nmCor", (char*)nmCor.arr);
                                    saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                                saida->closeTag();
                        }

                        saida->createTag("ns2:ArvoreAtendimentoVO");

                            saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                            saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);

                        saida->closeTag();

                        saida->createTag("ns3:UsuarioVIVO");

                                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                                saida->addItem("ns3:nmLoginUsuario", "");
                                saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                                saida->addItem("ns3:sgSenhaUsuario", "");
                    
                            saida->closeTag();
                            
                    saida->closeTag();
                
                saida->closeTag();

            numeroRegistros++;

        }

        totalRegistros++;

    }

    saida->addItem("nrRegistros", numeroRegistros);
    saida->addItem("totalRegistros", totalRegistros);

    EXEC SQL CLOSE consultaFilaAvanzadaCRI;

    ULOG_END( "proCConsultaWFAvanzadaFilaCRI()" );

    return true;

}

bool proCConsultaWFAvanzadaFilaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAvanzadaFilaCRIQtd()" );

    TuxHelper tx;
    int registros = 0 ;

    struct sqlca sqlca;

    long idAtendimentoOriginal = 0;

    bool inFechamento = false;
    bool inLinha = false;
    bool inUsuario = false;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    char* p;
    SmallString query;

    bool separa = false;

    EXEC SQL BEGIN DECLARE SECTION;
        char *queryChar;

        int   iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    query += "SELECT "
             	"COUNT(1)"
             "FROM ";

    registros = dados->nrCampos;

    if (status->dtFechamentoInicio != -1)
    {
        inFechamento = true;            
    }
    if (status->nrLinha != -1)
    {
        inLinha = true;         
    }
    if (status->idPessoaUsuario != -1)
    {
        inUsuario = true;           
    }
    
    if ( inFechamento )
    {
        if ( inLinha )
    {
            // query += " atendimento.AtdFilaFechadosLinhaWFV01 a ";
        query += " ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
        else
    {
            // query += " atendimento.AtdFilaFechadosWFV01 a ";
        query += " ATENDIMENTO.ATDFILAFECHADOSWFCRIV01 a ";
        if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
        {
            montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
        }
    }
    }
    else if ((inLinha) && !(inUsuario))
    {
        // query += " atendimento.AtendimentoFilaLinhaWFV01 a ";       
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a "; /* ATENDIMENTO.ATENDIMENTOFILALINHAWFCRIV01 */
    }
    else if ((inLinha) && (inUsuario))
    {
        // query += " atendimento.AtdFilaUsuarioLinhaWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a "; /* ATENDIMENTO.ATDFILAUSUARIOLINHAWFCRIV01 */   
    }
    else if (!(inLinha) && (inUsuario))
    {
        // query += " atendimento.AtendimentoFilaUsuarioWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAUSUARIOWFCRIV01 a ";
    }
    else 
    {
        // query += " atendimento.AtendimentoFilaWFV01 a ";
        query += " ATENDIMENTO.ATENDIMENTOFILAWFCRIV01 a ";
    }

    if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idUsuarioGrupo, WHERE_INT);
    }

    if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
    {
        montaWhereFila("idPessoaUsuario", dados->idPessoaUsuario, WHERE_INT);
    }

    if (status->idGrupo == 1 && dados->idGrupo > 0) 
    {
        montaWhereFila("idGrupo", dados->idGrupo, WHERE_INT);
    }
    
    // TODO: Resolver problema na view quando indicado idContato.
    if (status->idContato == 1 && dados->idContato > 0) 
    {
        montaWhereFila("idContato", dados->idContato, WHERE_INT);
    }

    if (status->idEstado == 1 && dados->idEstado > 0) 
    {
        montaWhereFila("idEstado", dados->idEstado, WHERE_INT);
    }
    if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
    {
        montaWhereFila("idSubEstado", dados->idSubEstado, WHERE_INT);
    }
    if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
    {
        montaWhereFila("TRUNC(dtAbertura)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
    }
    if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
    {
        montaWhereFila("TRUNC(dtFechamento)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
    }
    if (status->idAtendimento == 1 && dados->idAtendimento > 0)
    {
        montaWhereFila("idAtendimento", dados->idAtendimento, WHERE_INT);
    }
    if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
    {
        if ( dados->nrLinha[0]=='0' ) 
        {
            strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+3);
        }
        else
        {
            strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
            prefixo = atoi(cConv);
            numero  = atoi(dados->nrLinha+2);
        }
        montaWhereFila("cdAreaRegistro", prefixo, WHERE_INT);
        montaWhereFila("nrLinha", numero, WHERE_INT);
    }
    if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
    {
        montaWhereFila("nmLoginUsuario", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
    }
    if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
    {
        montaWhereFila("dsAndamentoObservacao", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
    }
    if (status->tbPausa == 1)
    {
        montaWhereFila("inPausaAtendimento", dados->tbPausa, WHERE_INT);
    }
    /** 
        Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
    */
    if (status->pesquisaDinamica == 1 && registros > 0)
    {
        DOMNode* registro;
        int idCampo=0;
        int tpComparacao=0;
        int idDominio=0;
        char *valor = 0;
        int contador = 0;

        while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
        {
            if ( p = tx.walkTree(registro, "idCampo", 0),p )
            {
                    idCampo = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
            {
                    tpComparacao = atoi( p );
                    XMLString::release(&p);
            }

            if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
            {
                    idDominio = atoi( p );
                    XMLString::release(&p);
            }
            else
                idDominio = 0;

            valor = tx.walkTree(registro, "valor", 0);

            // Chamada apenas para gerar WHERE ou AND na concatenacao.
            montaWhereFila("","", 999);

            query += "1 = (select count(1) from atendimento.atendimentofrm af, atendimento.atendimentofrmcampo afc "
                           "where af.idatendimento = a.idatendimento "
                                 "and af.idatendimentofrm = afc.idatendimentofrm "
                                 "and ";
            if (idDominio <= 0)
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND UPPER(afc.dsvalor) ";

                if (tpComparacao == 0)
                {
                    query += " = UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 1)
                {
                    query += " !=  UPPER('";
                    query += valor;
                    query += "') ";
                }
                else if (tpComparacao == 2)
                {
                    query += " LIKE UPPER('%";
                    query += valor;
                    query += "%') ";
                }

                query += " ) )";
                
            }
            else 
            {
                query += " ( af.idCampo = ";
                query += idCampo;
                query += " AND afc.idDominio = ";
                query += idDominio;
                query += " ) )";
            }

            if (valor)
            {
                XMLString::release(&valor);
            }
        }
    }

    queryChar = query;

    ULOG("Query[%s]", queryChar);
    
    EXEC SQL PREPARE consultaAtendimentoFilaAvanzadaCRIQtd FROM :queryChar;
    EXEC SQL DECLARE consultaFilaAvanzadaCRIQtd CURSOR FOR consultaAtendimentoFilaAvanzadaCRIQtd;

    EXEC SQL OPEN  consultaFilaAvanzadaCRIQtd;
    EXEC SQL FETCH consultaFilaAvanzadaCRIQtd INTO :iContador:sContador;
    EXEC SQL CLOSE consultaFilaAvanzadaCRIQtd;

    saida->addItem("nrRegistros"   , 0 );
    saida->addItem("totalRegistros", iContador );

    ULOG_END( "proCConsultaWFAvanzadaFilaCRIQtd()" );

    return true;
}

bool proCConsultaWFFilaFechadosLinhaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosLinhaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;

        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE 
        consultaWFFilaFechadosLinhaCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO,
        IDATENDIMENTOPROTOCOLO,
        INCRI,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            DECODE( INCRI, 0, 0, 1 ) INCRI,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
        FROM 
            ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01
        WHERE 
            IDUSUARIOGRUPO = :idUsuarioGrupo
        AND INCRI = 1
        AND CDAREAREGISTRO = :oprefixo
        AND NRLINHA = :otelefone
        AND (IDPESSOAUSUARIO = :idUsuarioFiltro OR -1=:indIdUsuario)
        AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
        AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
        AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
        AND (IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
        AND (IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
        AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
        AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        AND (TRUNC(DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
        AND (TRUNC(DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        AND ROWNUM < 101
    )
    ORDER BY DTABERTURA;

    EXEC SQL OPEN consultaWFFilaFechadosLinhaCRI;

    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            consultaWFFilaFechadosLinhaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);

                    saida->closeTag();

                    saida->createTag("WFSubEstadoVO");

                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                    saida->closeTag();

                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }

    EXEC SQL CLOSE consultaWFFilaFechadosLinhaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaFechadosLinhaCRI()" );

    return true;
}

bool proCConsultaWFFilaFechadosLinhaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosLinhaCRIQtd()" );

    struct sqlca sqlca;
    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;
        int   iContador;

        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
    FROM 
        ATENDIMENTO.ATDFILAFECHADOSLINHAWFCRIV01
    WHERE 
        IDUSUARIOGRUPO = :idUsuarioGrupo
    AND INCRI = 1
    AND CDAREAREGISTRO = :oprefixo
    AND NRLINHA = :otelefone
    AND (IDPESSOAUSUARIO = :idUsuarioFiltro OR -1=:indIdUsuario)
    AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
    AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
    AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
    AND (IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
    AND (IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
    AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
    AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
    AND (TRUNC(DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
    AND (TRUNC(DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim);

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaFechadosLinhaCRIQtd()" );
    return true;
}

bool proCConsultaWFFilaFechadosUsuarioCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosUsuarioCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE 
        consultaWFFilaFechadosUsuarioCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        INCRI,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        0 AS INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            DECODE( INCRI, 0, 0, 1 ) INCRI,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
        FROM 
            ATENDIMENTO.ATDFILAFECHADOSWFCRIV01
        WHERE 
            IDUSUARIOGRUPO = :idUsuarioGrupo
        AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
        AND (IDPESSOAUSUARIO = :idUsuarioFiltro OR -1=:indIdUsuario)
        AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
        AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
        AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
        AND (IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
        AND (IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
        AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
        AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        AND (TRUNC(DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
        AND (TRUNC(DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        AND ROWNUM < 101
    )
    ORDER BY DTABERTURA;

    EXEC SQL OPEN consultaWFFilaFechadosUsuarioCRI;
    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            consultaWFFilaFechadosUsuarioCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();

        }
    }

    EXEC SQL CLOSE consultaWFFilaFechadosUsuarioCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaFechadosUsuarioCRI()" );

    return true;
}

bool proCConsultaWFFilaFechadosUsuarioCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaFechadosUsuarioCRIQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
    FROM 
        ATENDIMENTO.ATDFILAFECHADOSWFCRIV01
    WHERE 
        IDUSUARIOGRUPO = :idUsuarioGrupo
    AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
    AND (IDPESSOAUSUARIO = :idUsuarioFiltro OR -1=:indIdUsuario)
    AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
    AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
    AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
    AND (IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
    AND (IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
    AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
    AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
    AND (TRUNC(DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
    AND (TRUNC(DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim);

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaFechadosUsuarioCRIQtd()" );

    return true;
}

bool proCConsultarBoxAdq(int idPessoaUsuario,st_AtendimentoFila* m_stFila, st_vlAtendimentoFila* m_vlFila, XMLGen* saida)
{
    ULOG_START( "proCConsultarBoxAdq()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_SaidaAtdInBox
        {
            VARCHAR idAtendimento[31];
            VARCHAR idAtendimentoProtocolo[39];
            VARCHAR nmCor[256];
            int  idContato;
            VARCHAR dtAbertura[22];
            int qtInsistencia;
            VARCHAR dtPrazoFinalInterno[21];    
            VARCHAR dtPrazoFinalAnatel[21]; 
            VARCHAR  idPessoaDePara[21];
            int  idEstado;
            VARCHAR dsEstado[256];
            int  idSubEstado;
            VARCHAR dsSubEstado[256];
            VARCHAR dtFimPausa[256];
            int  inCri;
            VARCHAR arvore[800];
            VARCHAR nmRegional[256];
            VARCHAR nrTelefone[256];
            VARCHAR nmPessoaBko[256];
            VARCHAR nmGrupoBko[256];
            VARCHAR nmPessoaCri[256];
            VARCHAR nmGrupoCri[256];
            VARCHAR dtEntrada[22];
            VARCHAR dtSaida[22];
            VARCHAR nmPessoa[256];
            VARCHAR nrDocumento[256];
            VARCHAR dtFechamento[21];
            int tipoPessoa; 
        } oDadosSaida;
    
        struct st_vlSaidaAtdInBox
        {
            short idAtendimento;
            short idAtendimentoProtocolo;
            short nmCor;
            short idContato;
            short dtAbertura;
            short qtInsistencia;
            short dtPrazoFinalInterno;
            short dtPrazoFinalAnatel;
            short idPessoaDePara;
            short idEstado;
            short dsEstado;
            short idSubEstado;
            short dsSubEstado;
            short dtFimPausa;
            short inCri;
            short arvore;
            short nmRegional;
            short nrTelefone;
            short nmPessoaBko;
            short nmGrupoBko;
            short nmPessoaCri;
            short nmGrupoCri;
            short dtEntrada;
            short dtSaida;
            short nmPessoa;
            short nrDocumento;
            short dtFechamento;
            short tipoPessoa;
        } oStatusSaida;

        VARCHAR TipoDocumento[8];
        VARCHAR NrDocumento[32];
        int IdPessoaUsuario = idPessoaUsuario;

    EXEC SQL END DECLARE SECTION;

    memcpy(TipoDocumento.arr, m_stFila->sgTipoPesquisa, sizeof(m_stFila->sgTipoPesquisa));
    memcpy(NrDocumento.arr, m_stFila->nrDocumento, sizeof(m_stFila->nrDocumento));
    TipoDocumento.len = strlen(m_stFila->sgTipoPesquisa);
    NrDocumento.len = strlen(m_stFila->nrDocumento);

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL DECLARE proCConsultarBoxAdq CURSOR FOR
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            NMCOR, 
            IDCONTATO, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            QTINSISTENCIA, 
            TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS') DTPRAZOFINALINTERNO, 
            TO_CHAR(DTPRAZOFINALANATEL,'DD/MM/YYYY HH24:MI:SS') DTPRAZOFINALANATEL, 
            IDPESSOADEPARA, 
            IDESTADO, 
            DSESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            '', 
            0 AS INCRI, 
            PATH,
            NMREGIONAL,
            NRTELEFONE,
            NMPESSOABKO,
            NMGRUPOBKO,
            NMPESSOACRI,
            NMGRUPOCRI,
            TO_CHAR(DTENTRADA,'DD/MM/YYYY  HH24:MI:SS'), 
            TO_CHAR(DTSAIDA,'DD/MM/YYYY  HH24:MI:SS'), 
            NMPESSOA, 
            NRDOCUMENTO, 
            '' AS DTFECHAMENTO,
            IDTIPOPESSOA
         FROM 
            ATENDIMENTO.ATDADQCRIWFV01
         WHERE 
            IDPESSOAUSUARIOGRUPO = :IdPessoaUsuario
         AND IDPESSOAUSUARIOCRI IS NULL
         AND IDPESSOADEPARA IN
           (SELECT 
                PDP.IDPESSOADEPARA
            FROM
                CUSTOMER.PESSOADEPARA PDP,
                CUSTOMER.PESSOADOCUMENTO PD,
                CUSTOMER.DOCUMENTO D,
                APOIO.TIPODOCUMENTO TD
            WHERE
                PDP.IDPESSOA = PD.IDPESSOA
                AND D.IDDOCUMENTO = PD.IDDOCUMENTO
                AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
                AND TD.SGTIPODOCUMENTO = :TipoDocumento 
                AND D.NRDOCUMENTO = :NrDocumento 
            )
        ORDER BY NRCRITICIDADE DESC, IDATENDIMENTO;

    EXEC SQL OPEN proCConsultarBoxAdq;

    while (true)
    {
        memset(&oStatusSaida,-1,sizeof(oStatusSaida));

        EXEC SQL FETCH proCConsultarBoxAdq INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
            CONVIND(oDadosSaida.idAtendimentoProtocolo, oStatusSaida.idAtendimentoProtocolo);
            CONVIND(oDadosSaida.dsEstado, oStatusSaida.dsEstado);
            CONVIND(oDadosSaida.dsSubEstado, oStatusSaida.dsSubEstado);
            CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
            CONVIND(oDadosSaida.nmPessoaBko, oStatusSaida.nmPessoaBko);
            CONVIND(oDadosSaida.nmGrupoBko, oStatusSaida.nmGrupoBko);
            CONVIND(oDadosSaida.nmPessoaCri, oStatusSaida.nmPessoaCri);
            CONVIND(oDadosSaida.nmGrupoCri, oStatusSaida.nmGrupoCri);
            CONVIND(oDadosSaida.nmRegional, oStatusSaida.nmRegional);
            CONVIND(oDadosSaida.dtEntrada, oStatusSaida.dtEntrada);
            CONVIND(oDadosSaida.dtSaida, oStatusSaida.dtSaida);
            CONVIND(oDadosSaida.dtAbertura, oStatusSaida.dtAbertura);
            CONVIND(oDadosSaida.dtFechamento, oStatusSaida.dtFechamento);
            CONVIND(oDadosSaida.nmCor, oStatusSaida.nmCor);
            CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
            CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);
            CONVIND(oDadosSaida.nrDocumento, oStatusSaida.nrDocumento);
            CONVIND(oDadosSaida.dtFimPausa, oStatusSaida.dtFimPausa);
            CONVIND(oDadosSaida.dtPrazoFinalInterno, oStatusSaida.dtPrazoFinalInterno);
            CONVIND(oDadosSaida.dtPrazoFinalAnatel, oStatusSaida.dtPrazoFinalAnatel);

            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("nrProtocolo", (char*)oDadosSaida.idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)oDadosSaida.dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida.dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)oDadosSaida.dtPrazoFinalInterno.arr);
                saida->addItem("dtFechamentoAnatel", (char*)oDadosSaida.dtPrazoFinalAnatel.arr);
                saida->addItem("tpOperacao", "");
                saida->addItem("nmCor", (char*)oDadosSaida.nmCor.arr);
                saida->addItem("dtSuspeito", "");
                saida->addItem("idAtendimentoSuspeito", "");
                saida->addItem("idAtendimentoBaixaHistorico", "");
                saida->addItem("nmURLDados", "");
                saida->addItem("dtSolicitacaoCancelamento", "");
                saida->addItem("idAtendimentoOrigem", "");
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("dsEstado", (char*)oDadosSaida.dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)oDadosSaida.dsSubEstado.arr);
                saida->addItem("nmCliente", (char*)oDadosSaida.nmPessoa.arr);
                saida->addItem("qtInsistencia", oDadosSaida.qtInsistencia);
                saida->addItem("analistaBKO", (char*)oDadosSaida.nmPessoaBko.arr);
                saida->addItem("grupoBKO", (char*)oDadosSaida.nmGrupoBko.arr);
                saida->addItem("analistaCRI", (char*)oDadosSaida.nmPessoaCri.arr);
                saida->addItem("grupoCRI", (char*)oDadosSaida.nmGrupoCri.arr);
                saida->addItem("regional", (char*)oDadosSaida.nmRegional.arr);
                saida->addItem("dtEncaminhamento", (char*)oDadosSaida.dtEntrada.arr);
                saida->addItem("dtDevolucao", (char*)oDadosSaida.dtSaida.arr);
                saida->addItem("tipoDocumento", oDadosSaida.tipoPessoa);
                saida->addItem("documento", (char*)oDadosSaida.nrDocumento.arr);
            saida->closeTag();
        }
    }
    EXEC SQL CLOSE proCConsultarBoxAdq;

    ULOG_END( "proCConsultarBoxAdq()" );

    return true;
}

bool proCConsultaWFFilaUsuarioLinhaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioLinhaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaUsuarioLinhaCRI CURSOR FOR
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            ASSOCIADO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            DTABERTURA, 
            DTFECHAMENTO,
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            INACS, 
            INPAUSAATENDIMENTO, 
            DTSUSPEITO, 
            DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM 
        FROM
        (
            SELECT 
                IDATENDIMENTO,
                IDATENDIMENTOPROTOCOLO,
                ASSOCIADO,
                IDCONTATO, 
                IDESTADO, 
                DSESTADO, 
                SGESTADO, 
                IDSUBESTADO, 
                DSSUBESTADO, 
                SGSUBESTADO, 
                IDPESSOAUSUARIO, 
                NMPESSOA, 
                TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
                TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO,
                IDATENDIMENTOALERTA, 
                DSMENSAGEM, 
                IDALERTA, 
                SGALERTA, 
                DSALERTA, 
                NMICONE, 
                NMCOR, 
                NRCRITICIDADE, 
                PATH, 
                NRTELEFONE, 
                INDOCUMENTO, 
                0 AS INACS, 
                INPAUSAATENDIMENTO, 
                TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
                TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
                IDATENDIMENTOBAIXAHISTORICO, 
                NMURLDADOS, 
                DTSOLICITACAOCANCELAMENTO, 
                DTPRAZOFINALINTERNO, 
                IDATENDIMENTOSUSPEITO, 
                IDATENDIMENTOORIGEM,
                IDATENDIMENTOPR
            FROM 
                ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
            WHERE 
                IDPESSOAUSUARIO = :idPessoaUsuarioFiltro
            AND CDAREAREGISTRO = :oprefixo
            AND NRLINHA = :otelefone
            AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
            AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
            AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM < 101
        )
        ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaUsuarioLinhaCRI;
    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            consultaWFFilaUsuarioLinhaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }

    EXEC SQL CLOSE consultaWFFilaUsuarioLinhaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaUsuarioLinhaCRI()" );

    return true;
}

bool proCConsultaWFFilaUsuarioLinhaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioLinhaCRIQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT 
    	COUNT(1)
    INTO	
    	:iContador:sContador
    FROM 
        ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
    WHERE 
        IDPESSOAUSUARIO = :idPessoaUsuarioFiltro
    AND CDAREAREGISTRO = :oprefixo
    AND NRLINHA = :otelefone
    AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
    AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
    AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
    AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
    AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
    AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
    AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
    AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);

    saida->addItem("totalRegistros", iContador  );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaUsuarioLinhaCRIQtd()" );

    return true;
}

bool proCConsultaWFFilaLinhaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaLinhaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR nrProcotolo[64];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_nrProcotolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE 
        consultaWFFilaLinhaCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        ASSOCIADO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO,
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO,
        DTFIMPAUSAATENDIMENTO,
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM 
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            ASSOCIADO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO,
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO,
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO,
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
         FROM 
            ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
         WHERE 
            IDPESSOAUSUARIO = :idUsuarioGrupo
            AND cdAreaRegistro = :oprefixo
            AND nrLinha = :otelefone
            AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
            AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaLinhaCRI;
    while (true)
    {
        i_nrProcotolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            consultaWFFilaLinhaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :nrProcotolo:i_nrProcotolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(nrProcotolo, i_nrProcotolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProcotolo", (char*)nrProcotolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }
    EXEC SQL CLOSE consultaWFFilaLinhaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaLinhaCRI()" );

    return true;
}

bool proCConsultaWFFilaLinhaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaLinhaCRIQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
	SELECT 
		COUNT(1)
	INTO
		:iContador:sContador
	FROM 
		ATENDIMENTO.ATENDIMENTOFILAWFCRIV01
	WHERE IDPESSOAUSUARIO = :idUsuarioGrupo
	AND cdAreaRegistro = :oprefixo
	AND nrLinha = :otelefone
	AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
	AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (idContato = :idContatoFiltro OR -1=:indIdContato)
	AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
	AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
	AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaLinhaCRIQtd()" );

    return true;
}

bool proCConsultaWFFilaUsuarioCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE 
        consultaWFFilaUsuarioCRI CURSOR FOR
    SELECT 
        IDATENDIMENTO, 
        IDATENDIMENTOPROTOCOLO,
        ASSOCIADO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMPESSOA, 
        DTABERTURA, 
        DTFECHAMENTO, 
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO, 
        IDATENDIMENTOORIGEM
    FROM 
    (
        SELECT 
            IDATENDIMENTO, 
            IDATENDIMENTOPROTOCOLO,
            ASSOCIADO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
        FROM 
            ATENDIMENTO.ATENDIMENTOFILAUSUARIOWFCRIV01
        WHERE 
            IDPESSOAUSUARIO = :idPessoaUsuarioFiltro
        AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
        AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
        AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
        AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
        AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
        AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
        AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
        AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaUsuarioCRI;

    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            consultaWFFilaUsuarioCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;
        
        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("inCRI", inCri );

                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    EXEC SQL CLOSE consultaWFFilaUsuarioCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaUsuarioCRI()" );

    return true;
}

bool proCConsultaWFFilaUsuarioCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaUsuarioCRIQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
	SELECT
		COUNT(1)
	INTO
		:iContador:sContador 
	FROM 
		ATENDIMENTO.ATENDIMENTOFILAUSUARIOWFCRIV01
	WHERE IDPESSOAUSUARIO = :idPessoaUsuarioFiltro
	AND (IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
	AND (IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
	AND (IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
	AND (IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
	AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
	AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
	AND (TRUNC(DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
	AND (TRUNC(DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim);

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaUsuarioCRIQtd()" );

    return true;
}

bool proCConsultaWFFilaCRI(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaCRI()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupo;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  inCri;
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_inCri;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL 
    DECLARE 
        proCConsultaWFFilaCRI CURSOR FOR
    SELECT
        IDATENDIMENTO,
        IDATENDIMENTOPROTOCOLO,
        ASSOCIADO,
        IDCONTATO, 
        IDESTADO, 
        DSESTADO, 
        SGESTADO, 
        IDSUBESTADO, 
        DSSUBESTADO, 
        SGSUBESTADO, 
        IDPESSOAUSUARIO, 
        NMLOGINUSUARIO, 
        DTABERTURA, 
        DTFECHAMENTO,
        IDATENDIMENTOALERTA, 
        DSMENSAGEM, 
        IDALERTA, 
        SGALERTA, 
        DSALERTA, 
        NMICONE, 
        NMCOR, 
        NRCRITICIDADE, 
        PATH, 
        NRTELEFONE, 
        INDOCUMENTO, 
        INACS, 
        INPAUSAATENDIMENTO, 
        DTSUSPEITO, 
        DTFIMPAUSAATENDIMENTO, 
        IDATENDIMENTOBAIXAHISTORICO, 
        NMURLDADOS, 
        DTSOLICITACAOCANCELAMENTO, 
        DTPRAZOFINALINTERNO, 
        IDATENDIMENTOSUSPEITO,
        IDATENDIMENTOORIGEM 
    FROM
    (
        SELECT 
            IDATENDIMENTO,
            IDATENDIMENTOPROTOCOLO,
            ASSOCIADO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMLOGINUSUARIO, 
            TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY  HH24:MI:SS') DTFECHAMENTO,
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            0 AS INACS, 
            INPAUSAATENDIMENTO, 
            TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO, 
            TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO,
            IDATENDIMENTOORIGEM,
            IDATENDIMENTOPR
        FROM 
            ATENDIMENTO.ATENDIMENTOFILAWFCRIV02
        WHERE 
            IDPESSOAUSUARIO = :idUsuarioGrupo
        AND IDUFOPERADORA = DECODE(:indIdUfOperadora,-1,IDUFOPERADORA,:idUfOperadora)
        AND IDGRUPO = DECODE(:indIdGrupo,-1,IDGRUPO,:idGrupoFiltro)
        AND IDATENDIMENTO = DECODE(:indIdAtendimento,-1,IDATENDIMENTO,:idAtendimentoFiltro)
        AND IDCONTATO = DECODE(:indIdContato,-1,IDCONTATO,:idContatoFiltro)
        AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
        AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
        AND TRUNC(DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'DD/MM/YYYY'))
        AND TRUNC(DTABERTURA) <= DECODE(:indDtAberturaFim,-1,TRUNC(DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY'))
        AND ROWNUM < 101
    )
    ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR;

    EXEC SQL OPEN proCConsultaWFFilaCRI;
    while (true)
    {
        i_idAtendimentoProtocolo =
        i_dsEstado =
        i_sgEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_dsMensagem =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_dtSuspeito =
        i_dtFimPausa =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_nrCriticidade = -1;

        EXEC SQL 
        FETCH 
            proCConsultaWFFilaCRI 
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :inCri:i_inCri,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                    
                    saida->addItem("inCRI", inCri );
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);

                    saida->createTag("WFEstadoVO");

                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);

                    saida->closeTag();

                    saida->createTag("WFSubEstadoVO");

                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);

                    saida->closeTag();

                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");

                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);

                        saida->closeTag();
                    }//if (i_idAlerta != -1)

                    saida->createTag("ns2:ArvoreAtendimentoVO");

                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);

                    saida->closeTag();

                    saida->createTag("ns3:UsuarioVIVO");

                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");

                    saida->closeTag();

                saida->closeTag();

            saida->closeTag();

        }
    }

    EXEC SQL CLOSE proCConsultaWFFilaCRI;

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaCRI()" );

    return true;
}

bool proCConsultaWFFilaCRIQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaCRIQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupo;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int   idUfOperadora;
        
        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioGrupo = dados->idUsuarioGrupo;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    
    indIdUfOperadora = status->idUfOperadora;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
    SELECT 
    	COUNT(1)
    INTO
    	:iContador:sContador
	FROM 
		ATENDIMENTO.ATENDIMENTOFILAWFCRIV02
	WHERE 
        IDPESSOAUSUARIO = :idUsuarioGrupo
    AND IDUFOPERADORA = DECODE(:indIdUfOperadora,-1,IDUFOPERADORA,:idUfOperadora)
    AND IDGRUPO = DECODE(:indIdGrupo,-1,IDGRUPO,:idGrupoFiltro)
    AND IDATENDIMENTO = DECODE(:indIdAtendimento,-1,IDATENDIMENTO,:idAtendimentoFiltro)
    AND IDCONTATO = DECODE(:indIdContato,-1,IDCONTATO,:idContatoFiltro)
    AND ((IDESTADO IN (2, 3) AND -1=:indIdEstado) OR (IDESTADO = :idEstadoFiltro AND 1=:indIdEstado))
    AND ((IDSUBESTADO IN (2, 3, 5, 6, 7) AND -1=:indIdEstado) OR (IDSUBESTADO = :idSubEstadoFiltro AND 1=:indIdSubEstado))
    AND TRUNC(DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'DD/MM/YYYY'))
    AND TRUNC(DTABERTURA) <= DECODE(:indDtAberturaFim,-1,TRUNC(DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY'));

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , 0 );

    ULOG_END( "proCConsultaWFFilaCRIQtd()" );

    return true;
}
