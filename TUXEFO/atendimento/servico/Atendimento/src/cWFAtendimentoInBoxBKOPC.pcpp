/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author
 * @version $Revision: 1.1.2.3.6.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:21:51 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;

bool proCConsultaWFInboxUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
		char idAtendimentoProt[39];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
		short indAtendimentoProt;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        int isVOLE;
        
        int atdProc_CRI = 0;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_isVOLE;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

	if(  dados->idAtendimentoProtocolo != 0 )
	{
		strcpy(idAtendimentoProt, dados->idAtendimentoProtocolo);
		indAtendimentoProt = status->idAtendimentoProtocolo;
		ULOG("dados->idAtendimentoProtocolo utilizado na busca = [%s]", dados->idAtendimentoProtocolo);
	}
	else
	{
		strcpy(idAtendimentoProt, " ");
		indAtendimentoProt = -1;
		ULOG("dados->idAtendimentoProtocolo sem conteudo...");
	}
	
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    ULOG("Filtro por data de Fechamento = [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%s]", dados->nrLinha);
    ULOG("Filtro por usuario = [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio = [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato = [%d]", dados->idContato);
    ULOG("Filtro por Estado = [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado = [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa = [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    ULOG("Filtro por data de Fechamento = [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%d]", status->nrLinha);
    ULOG("Filtro por usuario = [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio = [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", status->idAtendimento);
    ULOG("Filtro por Contato = [%d]", status->idContato);
    ULOG("Filtro por Estado = [%d]", indIdEstado);
    ULOG("Filtro por SubEstado = [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa = [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFInBoxUsuario CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem,
                atdCRI,
                isVOLE
             FROM 
                Atendimento.AtendimentoFilaUsuarioWFV01
             WHERE 
                idPessoaUsuario = :idPessoaUsuarioFiltro
                AND (idAtendimentoProtocolo = :idAtendimentoProt OR -1 = :indAtendimentoProt)
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (
            (0=:tbPausa AND ((inPausaAtendimento = 0) OR (dtFimPausaAtendimento < SYSDATE)))
            OR (1=:tbPausa AND dtFimPausaAtendimento >= SYSDATE)
            OR (2=:tbPausa)
            )
            ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFInBoxUsuario;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :atdProc_CRI,
            :isVOLE:i_isVOLE;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
                
            if( atdProc_CRI > 0 )
            {
               strcpy( (char*)dtSuspeito.arr,"01/01/1900 12:00:00" );
            }
            
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                saida->addItem("nmNome", (char*)nmPessoa.arr);
                saida->addItem("isVOLE",isVOLE);
            saida->closeTag();
        }//if (numeroRegistros < 100)
    }//while (true)

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxUsuario;

    ULOG_END( "proCConsultaWFInboxUsuario()" );

    return true;
}

bool proCConsultaWFInboxUsuarioLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxUsuarioLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        int isVOLE;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_isVOLE;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    ULOG("Filtro por data de Fechamento = [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%s]", dados->nrLinha);
    ULOG("Filtro por usuario = [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio = [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato = [%d]", dados->idContato);
    ULOG("Filtro por Estado = [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado = [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa = [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    ULOG("Filtro por data de Fechamento = [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%d]", status->nrLinha);
    ULOG("Filtro por usuario = [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio = [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", status->idAtendimento);
    ULOG("Filtro por Contato = [%d]", status->idContato);
    ULOG("Filtro por Estado = [%d]", indIdEstado);
    ULOG("Filtro por SubEstado = [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa = [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFInBoxUsuarioLinha CURSOR FOR
            SELECT 
                idAtendimento, 
                idAtendimentoProtocolo,
                idContato, 
                idEstado, 
                dsEstado, 
                sgEstado, 
                idSubEstado, 
                dsSubEstado, 
                sgSubEstado, 
                idPessoaUsuario, 
                nmPessoa, 
                TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
                TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
                idAtendimentoAlerta, 
                dsMensagem, 
                idAlerta, 
                sgAlerta, 
                dsAlerta, 
                nmIcone, 
                nmCor, 
                nrCriticidade, 
                path, 
                nrTelefone, 
                inDocumento, 
                0 as inACS, 
                inPausaAtendimento, 
                TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
                TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
                idAtendimentoBaixaHistorico, 
                nmURLDados, 
                dtSolicitacaoCancelamento, 
                dtPrazoFinalInterno, 
                idAtendimentoSuspeito, 
                idAtendimentoOrigem,
                isVOLE
             FROM 
                Atendimento.AtdFilaUsuarioLinhaWFV01
             WHERE 
                idPessoaUsuario = :idPessoaUsuarioFiltro
                AND cdAreaRegistro = :oprefixo
                AND nrLinha = :otelefone
                AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (idContato = :idContatoFiltro OR -1=:indIdContato)
                AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
                AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (
            (0=:tbPausa AND ((inPausaAtendimento = 0) OR (dtFimPausaAtendimento < SYSDATE)))
            OR (1=:tbPausa AND dtFimPausaAtendimento >= SYSDATE)
            OR (2=:tbPausa)
            )
            ORDER BY nrCriticidade DESC, idAtendimentoPr;

    EXEC SQL OPEN consultaWFInBoxUsuarioLinha;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxUsuarioLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :isVOLE:i_isVOLE;

        totalRegistros++;

        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                saida->addItem("isVOLE",isVOLE);

                saida->createTag("ns3:UsuarioVIVO");
            
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
        
                saida->closeTag();

            saida->closeTag();
            
        }//if (numeroRegistros < 100)

    }//while (true)

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxUsuarioLinha;

    ULOG_END( "proCConsultaWFInboxUsuarioLinha()" );

    return true;
}

bool proCConsultaWFInboxFechadosUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxFechadosUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    ULOG("Filtro por data de Fechamento Inicio = [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por data de Fechamento Fim = [%s]", dados->dtFechamentoFim);
    ULOG("Filtro por numero de linha = [%s]", dados->nrLinha);
    ULOG("Filtro por usuario = [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio = [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato = [%d]", dados->idContato);
    ULOG("Filtro por Estado = [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado = [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa = [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    ULOG("Filtro por data de Fechamento = [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%d]", status->nrLinha);
    ULOG("Filtro por usuario = [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio = [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", status->idAtendimento);
    ULOG("Filtro por Contato = [%d]", status->idContato);
    ULOG("Filtro por Estado = [%d]", indIdEstado);
    ULOG("Filtro por SubEstado = [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa = [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFInBoxFechadosUsuario CURSOR FOR
        SELECT 
            idAtendimento, 
            idAtendimentoProtocolo,
            idContato, 
            idEstado, 
            dsEstado, 
            sgEstado, 
            idSubEstado, 
            dsSubEstado, 
            sgSubEstado, 
            idPessoaUsuario, 
            nmPessoa, 
            TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
            TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
            idAtendimentoAlerta, 
            dsMensagem, 
            idAlerta, 
            sgAlerta, 
            dsAlerta, 
            nmIcone, 
            nmCor, 
            nrCriticidade, 
            path, 
            nrTelefone, 
            inDocumento, 
            0 as inACS, 
            inPausaAtendimento, 
            TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
            idAtendimentoBaixaHistorico, 
            nmURLDados, 
            dtSolicitacaoCancelamento, 
            dtPrazoFinalInterno, 
            idAtendimentoSuspeito, 
            idAtendimentoOrigem 
         FROM 
            Atendimento.AtdFilaFechadosUsuarioWFV01
         WHERE 
            idPessoaUsuario = :idPessoaUsuarioFiltro
            AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (idContato = :idContatoFiltro OR -1=:indIdContato)
            AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
            AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
            AND (2=:tbPausa)
        ORDER BY dtAbertura;

    EXEC SQL OPEN consultaWFInBoxFechadosUsuario;

    while(true)
    {
        EXEC SQL FETCH consultaWFInBoxFechadosUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if(numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                saida->addItem("nmNome", (char*)nmPessoa.arr);
            saida->closeTag();
            
        }//if(numeroRegistros < 100)
    }//while(true)
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxFechadosUsuario;

    ULOG_END( "proCConsultaWFInboxFechadosUsuario()" );
    return true;
}

bool proCConsultaWFInboxFechadosUsuarioLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFInboxFechadosUsuarioLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  tbPausa;
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idPessoaUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[800];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[256];
        VARCHAR dtFimPausa[256];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[256];
        VARCHAR dtPrazoFinalInterno[256];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;

    EXEC SQL END DECLARE SECTION;

    tbPausa = dados->tbPausa;
    idPessoaUsuarioFiltro = dados->idPessoaUsuario;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    
    if (dados->idEstado != -1)
    {
        idEstadoFiltro = dados->idEstado;
        indIdEstado = status->idEstado;
    }
    else
    {
        idEstadoFiltro = 0;
        indIdEstado = -1;
    }
    
    if (dados->idSubEstado != -1)
    {
        idSubEstadoFiltro = dados->idSubEstado;
        indIdSubEstado = status->idSubEstado;
    }
    else
    {
        idSubEstadoFiltro = 0;
        indIdSubEstado = -1;
    }

    if (dados->idGrupo != 0)
    {
        idGrupoFiltro = dados->idGrupo;
        indIdGrupo = status->idGrupo;
    }
    else
    {
        idGrupoFiltro = 0;
        indIdGrupo = -1;
    }

    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    ULOG("Filtro por data de Fechamento = [%s]", dados->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%s]", dados->nrLinha);
    ULOG("Filtro por usuario = [%d]", dados->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", idGrupoFiltro);
    ULOG("Filtro por data de Abertura Inicio = [%s]", dados->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%s]", dados->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", dados->idAtendimento);
    ULOG("Filtro por Contato = [%d]", dados->idContato);
    ULOG("Filtro por Estado = [%d]", idEstadoFiltro);
    ULOG("Filtro por SubEstado = [%d]", idSubEstadoFiltro);
    ULOG("Filtro por Pausa = [%d]", dados->tbPausa);

    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;

    ULOG("Filtro por data de Fechamento = [%d]", status->dtFechamentoInicio);
    ULOG("Filtro por numero de linha = [%d]", status->nrLinha);
    ULOG("Filtro por usuario = [%d]", status->idPessoaUsuario);
    ULOG("Filtro por grupo = [%d]", indIdGrupo);
    ULOG("Filtro por data de Abertura Inicio = [%d]", status->dtAberturaInicio);
    ULOG("Filtro por data de Abertura Fim = [%d]", status->dtAberturaFim);
    ULOG("Filtro por Atendimento = [%d]", status->idAtendimento);
    ULOG("Filtro por Contato = [%d]", status->idContato);
    ULOG("Filtro por Estado = [%d]", indIdEstado);
    ULOG("Filtro por SubEstado = [%d]", indIdSubEstado);
    ULOG("Filtro por Pausa = [%d]", status->tbPausa);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    
    EXEC SQL DECLARE consultaWFInBoxFechadosUsuarioLinha CURSOR FOR
    SELECT 
        idAtendimento, 
        idAtendimentoProtocolo,
        idContato, 
        idEstado, 
        dsEstado, 
        sgEstado, 
        idSubEstado, 
        dsSubEstado, 
        sgSubEstado, 
        idPessoaUsuario, 
        nmPessoa, 
        TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
        TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
        idAtendimentoAlerta, 
        dsMensagem, 
        idAlerta, 
        sgAlerta, 
        dsAlerta, 
        nmIcone, 
        nmCor, 
        nrCriticidade, 
        path, 
        nrTelefone, 
        inDocumento, 
        0 as inACS, 
        inPausaAtendimento, 
        TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
        TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
        idAtendimentoBaixaHistorico, 
        nmURLDados, 
        dtSolicitacaoCancelamento, 
        dtPrazoFinalInterno, 
        idAtendimentoSuspeito, 
        idAtendimentoOrigem 
     FROM 
        Atendimento.ATDFILAFECHADOSUSRLINHAWFV01
     WHERE 
        idPessoaUsuario = :idPessoaUsuarioFiltro
        AND cdAreaRegistro = :oprefixo
        AND nrLinha = :otelefone
        AND (idGrupo = :idGrupoFiltro OR -1=:indIdGrupo)
        AND (idAtendimento = :idAtendimentoFiltro OR -1=:indIdAtendimento)
        AND (idContato = :idContatoFiltro OR -1=:indIdContato)
        AND (idEstado = :idEstadoFiltro OR -1=:indIdEstado)
        AND (idSubEstado = :idSubEstadoFiltro OR -1=:indIdSubEstado)
        AND (TRUNC(dtAbertura)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
        AND (TRUNC(dtAbertura)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        AND (TRUNC(dtFechamento)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
        AND (TRUNC(dtFechamento)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
    AND (2=:tbPausa)
    ORDER BY dtAbertura;

    EXEC SQL OPEN consultaWFInBoxFechadosUsuarioLinha;
    while (true)
    {
        EXEC SQL FETCH consultaWFInBoxFechadosUsuarioLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem;

        totalRegistros++;

        if(numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("RWFAtendimentoVO");

                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                    
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("dtParaFechamento", (char*)dtPrazoFinalInterno.arr);
                saida->addItem("tpOperacao", (char*)inDocumento.arr);
                saida->addItem("nmCor", (char*)nmCor.arr);
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("idAtendimentoSuspeito", CONVLONG(idAtendimentoSuspeito,i_idAtendimentoSuspeito));
                saida->addItem("idAtendimentoBaixaHistorico", CONVLONG(idAtendimentoBaixaHistorico,i_idAtendimentoBaixaHistorico));
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("idAtendimentoOrigem", CONVLONG(idAtendimentoOrigem,i_idAtendimentoOrigem));
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)arvore.arr);
                saida->addItem("dsEstado", (char*)dsEstado.arr);
                saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);

                saida->createTag("ns3:UsuarioVIVO");
            
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
        
                saida->closeTag();

            saida->closeTag();
            

        }//if(numeroRegistros < 100)
    }//while(true)
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFInBoxFechadosUsuarioLinha;

    ULOG_END( "proCConsultaWFInboxFechadosUsuarioLinha()" );

    return true;
}
