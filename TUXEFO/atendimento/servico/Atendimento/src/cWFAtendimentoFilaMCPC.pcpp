/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio Garcia
 * @version $Revision: 1.10.2.13.6.6 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/05 17:18:29 $
 **/

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <string>

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtendimento.h"
#include "../../../commons/SmallString.h"
#include "../include/queryMacroFila.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

using namespace std;

extern void sql_error_WFAtendimento(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtendimento.h"
EXEC SQL END DECLARE SECTION;

bool proCConsultaWFFilaMCPorAtendimento(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorAtendimento()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        long idAtendimentoFiltro = dados->idAtendimento;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int idContato;
        int idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento = -1;
        short i_idAtendimentoProtocolo = -1;
        short i_idContato = -1;
        short i_idEstado = -1;
        short i_dsEstado = -1;
        short i_sgEstado = -1;
        short i_idSubEstado = -1;
        short i_dsSubEstado = -1;
        short i_sgSubEstado = -1;
        short i_idPessoa = -1;
        short i_nmPessoa = -1;
        short i_dtAbertura = -1;
        short i_dtFechamento = -1;
        short i_idAtendimentoAlerta = -1;
        short i_dsMensagem = -1;
        short i_idAlerta = -1;
        short i_sgAlerta = -1;
        short i_dsAlerta = -1;
        short i_nmIcone = -1;
        short i_nmCor = -1;
        short i_nrCriticidade = -1;
        short i_arvore = -1;
        short i_nrTelefone = -1;
        short i_inDocumento = -1;
        short i_inACS = -1;
        short i_inPausaAtendimento = -1;
        short i_dtSuspeito = -1;
        short i_dtFimPausa = -1;
        short i_idAtendimentoBaixaHistorico = -1;
        short i_nmURLDados = -1;
        short i_dtSolicitacaoCancelamento = -1;
        short i_dtPrazoFinalInterno = -1;
        short i_idAtendimentoSuspeito = -1;
        short i_idAtendimentoOrigem = -1;
        short i_dtJanelaPortout = -1;
        short i_nrProtocoloPortabilidade = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            VW1.IDATENDIMENTO,
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO,
            VW1.IDESTADO,
            VW1.DSESTADO,
            VW1.SGESTADO,
            VW1.IDSUBESTADO,
            VW1.DSSUBESTADO,
            VW1.SGSUBESTADO,
            VW1.IDPESSOAUSUARIOGRUPO,
            VW1.NMPESSOA,
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
            VW1.IDATENDIMENTOALERTA,
            VW1.DSMENSAGEM,
            VW1.IDALERTA,
            VW1.SGALERTA,
            VW1.DSALERTA,
            VW1.NMICONE,
            VW1.NMCOR,
            VW1.NRCRITICIDADE,
            VW1.PATH,
            VW1.NRTELEFONE,
            VW1.INDOCUMENTO,
            0 AS INACS,
            VW1.INPAUSAATENDIMENTO,
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
            VW1.IDATENDIMENTOBAIXAHISTORICO,
            VW1.NMURLDADOS,
            VW1.DTSOLICITACAOCANCELAMENTO,
            VW1.DTPRAZOFINALINTERNO,
            VW1.IDATENDIMENTOSUSPEITO,
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
            VW1.NRPROTOCOLOPORTABILIDADE
        INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTO = :idAtendimentoFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTO = :idAtendimentoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));

    if ( !sqlca.sqlcode )
    {
        totalRegistros++;

        numeroRegistros++;

        CONVIND(dsEstado, i_dsEstado);
        CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
        CONVIND(sgEstado, i_sgEstado);
        CONVIND(dsSubEstado, i_dsSubEstado);
        CONVIND(sgSubEstado, i_sgSubEstado);
        CONVIND(nmPessoa, i_nmPessoa);
        CONVIND(dtAbertura, i_dtAbertura);
        CONVIND(dtFechamento, i_dtFechamento);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(arvore, i_arvore);
        CONVIND(nrTelefone, i_nrTelefone);
        CONVIND(inDocumento, i_inDocumento);
        CONVIND(inACS, i_inACS);
        CONVIND(dtSuspeito, i_dtSuspeito);
        CONVIND(dtFimPausa, i_dtFimPausa);
        CONVIND(nmURLDados, i_nmURLDados);
        CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
        CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
        CONVIND(nrCriticidade, i_nrCriticidade);
        CONVIND(dtJanelaPortout, i_dtJanelaPortout);
        CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

        if (i_idAtendimentoBaixaHistorico == -1)
        {
            idAtendimentoBaixaHistorico = 0;
        }

        saida->createTag("AtendimentoFilaVO");
            saida->addItem("operacaoWorkflow","");
            saida->createTag("AtendimentoVO");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("inDocumento", (char*)inDocumento.arr);
                saida->addItem("inACS", (char*)inACS.arr);
                saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("nrProtocoloPortabilidade",(char*)nrProtocoloPortabilidade.arr);
                saida->createTag("WFEstadoVO");
                    saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("sgEstado", (char*)sgEstado.arr);
                saida->closeTag();
                saida->createTag("WFSubEstadoVO");
                    saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                    saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                saida->closeTag();
                if (i_idAlerta != -1)
                {
                    saida->createTag("AlertaVO");
                        saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                        saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                        saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                        saida->addItem("nmIcone", (char*)nmIcone.arr);
                        saida->addItem("nmCor", (char*)nmCor.arr);
                        saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                    saida->closeTag();
                }
                saida->createTag("ns2:ArvoreAtendimentoVO");
                    saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                    saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                saida->closeTag();
                saida->createTag("ns3:UsuarioVIVO");
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
                saida->closeTag();
            saida->closeTag();
        saida->closeTag();
    } // if ( !sqlca.sqlcode )

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    ULOG_END( "proCConsultaWFFilaMCPorAtendimento()" );

    return true;
}

bool proCConsultaWFFilaMCPorAtendimentoQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorAtendimentoQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        long idAtendimentoFiltro = dados->idAtendimento;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTO = :idAtendimentoFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTO = :idAtendimentoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , iContador );

    ULOG_END( "proCConsultaWFFilaMCPorAtendimentoQtd()" );

    return true;
}

bool proCConsultaWFFilaMCPorProtocolo(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorProtocolo()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *idProtocoloFiltro = dados->idAtendimentoProtocolo;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int idContato;
        int idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento = -1;
        short i_idAtendimentoProtocolo = -1;
        short i_idContato = -1;
        short i_idEstado = -1;
        short i_dsEstado = -1;
        short i_sgEstado = -1;
        short i_idSubEstado = -1;
        short i_dsSubEstado = -1;
        short i_sgSubEstado = -1;
        short i_idPessoa = -1;
        short i_nmPessoa = -1;
        short i_dtAbertura = -1;
        short i_dtFechamento = -1;
        short i_idAtendimentoAlerta = -1;
        short i_dsMensagem = -1;
        short i_idAlerta = -1;
        short i_sgAlerta = -1;
        short i_dsAlerta = -1;
        short i_nmIcone = -1;
        short i_nmCor = -1;
        short i_nrCriticidade = -1;
        short i_arvore = -1;
        short i_nrTelefone = -1;
        short i_inDocumento = -1;
        short i_inACS = -1;
        short i_inPausaAtendimento = -1;
        short i_dtSuspeito = -1;
        short i_dtFimPausa = -1;
        short i_idAtendimentoBaixaHistorico = -1;
        short i_nmURLDados = -1;
        short i_dtSolicitacaoCancelamento = -1;
        short i_dtPrazoFinalInterno = -1;
        short i_idAtendimentoSuspeito = -1;
        short i_idAtendimentoOrigem = -1;
        short i_dtJanelaPortout = -1;
        short i_nrProtocoloPortabilidade = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFProtocolo CURSOR FOR
        SELECT
             VW1.IDATENDIMENTO,
             VW1.IDATENDIMENTOPROTOCOLO,
             VW1.IDCONTATO,
             VW1.IDESTADO,
             VW1.DSESTADO,
             VW1.SGESTADO,
             VW1.IDSUBESTADO,
             VW1.DSSUBESTADO,
             VW1.SGSUBESTADO,
             VW1.IDPESSOAUSUARIOGRUPO,
             VW1.NMPESSOA,
             TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
             TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
             VW1.IDATENDIMENTOALERTA,
             VW1.DSMENSAGEM,
             VW1.IDALERTA,
             VW1.SGALERTA,
             VW1.DSALERTA,
             VW1.NMICONE,
             VW1.NMCOR,
             VW1.NRCRITICIDADE,
             VW1.PATH,
             VW1.NRTELEFONE,
             VW1.INDOCUMENTO,
             0 AS INACS,
             VW1.INPAUSAATENDIMENTO,
             TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
             TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
             VW1.IDATENDIMENTOBAIXAHISTORICO,
             VW1.NMURLDADOS,
             VW1.DTSOLICITACAOCANCELAMENTO,
             VW1.DTPRAZOFINALINTERNO,
             VW1.IDATENDIMENTOSUSPEITO,
             VW1.IDATENDIMENTOORIGEM,
             TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
             VW1.NRPROTOCOLOPORTABILIDADE
        FROM
             ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ))
        //AND VW1.IDPESSOACONTA IS NULL
        ORDER BY
            VW1.DTABERTURA DESC;

    EXEC SQL OPEN curConsultaWFProtocolo;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_idAtendimentoOrigem =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade = -1;

        EXEC SQL FETCH curConsultaWFProtocolo INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(dsEstado, i_dsEstado);
            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");
                saida->addItem("operacaoWorkflow","");
                saida->createTag("AtendimentoVO");
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade",(char*)nrProtocoloPortabilidade.arr);
                    saida->createTag("WFEstadoVO");
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
                    saida->closeTag();
                    saida->createTag("WFSubEstadoVO");
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                    saida->closeTag();
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        saida->closeTag();
                    }
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                    saida->closeTag();
                    saida->createTag("ns3:UsuarioVIVO");
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                    saida->closeTag();
                saida->closeTag();
            saida->closeTag();
        }
    }

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFProtocolo;

    ULOG_END( "proCConsultaWFFilaMCPorProtocolo()" );

    return true;
}

bool proCConsultaWFFilaMCPorProtocoloQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorProtocoloQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *idProtocoloFiltro = dados->idAtendimentoProtocolo;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.IDATENDIMENTOPROTOCOLO = :idProtocoloFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , iContador );

    ULOG_END( "proCConsultaWFFilaMCPorProtocoloQtd()" );

    return true;
}

bool proCConsultaWFFilaMCAbertosPorLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCAbertosPorLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFPorLinha CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO,
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS'),
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM 
            ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ))
        ORDER BY
            VW1.NRCRITICIDADE DESC,VW1.IDATENDIMENTOPR;

    EXEC SQL OPEN curConsultaWFPorLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_idAtendimentoOrigem =
        i_nrProtocoloPortabilidade = -1;

        EXEC SQL FETCH curConsultaWFPorLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade",(char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFPorLinha;

    ULOG_END( "proCConsultaWFFilaMCAbertosPorLinha()" );

    return true;
}

bool proCConsultaWFFilaMCAbertosPorLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCAbertosPorLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT 
    	    COUNT(1)
        INTO
    	    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaMCAbertosPorLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosPorLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosPorLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFFilaLinha CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO, 
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM ,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS'),
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM
            ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ))
        //AND VW1.IDPESSOACONTA IS NULL
        ORDER BY
            VW1.DTABERTURA,VW1.IDATENDIMENTO;

    EXEC SQL OPEN curConsultaWFFilaLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH curConsultaWFFilaLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFFilaLinha;

    ULOG_END( "proCConsultaWFFilaMCFechadosPorLinha()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosPorLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosPorLinhaQtd()" );

    struct sqlca sqlca;
    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
		    COUNT(1)
	    INTO
		    :iContador:sContador
	    FROM
		    ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaMCFechadosPorLinhaQtd()" );

    return true;
}


bool proCConsultaWFFilaMCAbertosPorConta(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCAbertosPorConta()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *nrContaParam;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    nrContaParam = dados->nrConta;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFPorConta CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO,
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM 
            ATENDIMENTO.ATENDIMENTOFILAMCCONTAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ))
        //AND VW1.IDPESSOACONTA IS NULL
        ORDER BY
            VW1.NRCRITICIDADE DESC, VW1.IDATENDIMENTOPR;

    EXEC SQL OPEN curConsultaWFPorConta;

    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH curConsultaWFPorConta INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade",(char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFPorConta;

    ULOG_END( "proCConsultaWFFilaMCAbertosPorConta()" );

    return true;
}

bool proCConsultaWFFilaMCAbertosPorContaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCAbertosPorContaQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        char *nrContaParam;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    nrContaParam = dados->nrConta;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT 
    	    COUNT(1)
        INTO
    	    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATENDIMENTOFILAMCCONTAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaMCAbertosPorContaQtd()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosPorConta(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosPorConta()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *nrContaParam;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    nrContaParam = dados->nrConta;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE curConsultaWFFilaConta CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO, 
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM ,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
            VW1.NRPROTOCOLOPORTABILIDADE
         FROM
            ATENDIMENTO.ATDFILAMCFECHADOSCONTAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ))
        ORDER BY
            VW1.DTABERTURA,VW1.IDATENDIMENTO;

    EXEC SQL OPEN curConsultaWFFilaConta;

    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH curConsultaWFFilaConta INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }

            saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE curConsultaWFFilaConta;

    ULOG_END( "proCConsultaWFFilaMCFechadosPorConta()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosPorContaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosPorContaQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *nrContaParam;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    nrContaParam = dados->nrConta;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
		    COUNT(1)
	    INTO
		    :iContador:sContador
	    FROM
		    ATENDIMENTO.ATDFILAMCFECHADOSCONTAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDCONTA = :nrContaParam
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaMCFechadosPorContaQtd()" );

    return true;
}

// bool proCConsultaWFAvanzadaFilaMC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
// {
//     ULOG_START( "proCConsultaWFAvanzadaFilaMC()" );
// 
//     TuxHelper tx;
//     int registros = 0 ;
//     struct sqlca sqlca;
// 
//     plong idAtendimentoOriginal = 0;
//     int numeroRegistros = 0;
//     int totalRegistros = 0;
// 
//     bool inFechamento = false;
//     bool inLinha = false;
//     bool inUsuario = false;
// 
//     int prefixo = 0;
//     int numero  = 0;
//     char cConv[3];
// 
//     char* p;
//     SmallString query;
// 
//     bool separa = false;
// 
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         long idAtendimento;
//         VARCHAR idAtendimentoProtocolo[39];
//         int  idContato;
//         int  idEstado;
//         VARCHAR dsEstado[256];
//         VARCHAR sgEstado[256];
//         int  idSubEstado;
//         VARCHAR dsSubEstado[256];
//         VARCHAR sgSubEstado[256];
//         int  idPessoa;
//         VARCHAR nmPessoa[256];
//         VARCHAR dtAbertura[22];
//         VARCHAR dtFechamento[22];
//         long idAtendimentoAlerta;
//         VARCHAR dsMensagem[256];
//         int  idAlerta;
//         VARCHAR sgAlerta[256];
//         VARCHAR dsAlerta[256];
//         VARCHAR nmIcone[256];
//         VARCHAR nmCor[256];
//         VARCHAR nrCriticidade[15];
//         VARCHAR arvore[2001];
//         VARCHAR nrTelefone[256];
//         VARCHAR inDocumento[256];
//         int inPausaAtendimento;
//         VARCHAR dtSuspeito[32];
//         VARCHAR dtFimPausa[32];
//         long idAtendimentoBaixaHistorico;
//         VARCHAR nmURLDados[256];
//         VARCHAR dtSolicitacaoCancelamento[32];
//         VARCHAR dtPrazoFinalInterno[32];
//         long idAtendimentoSuspeito;
//         long idAtendimentoOrigem;
//         VARCHAR dtJanelaPortout[32];
//         VARCHAR nrProtocoloPortabilidade[39];
// 
//         short i_idAtendimento;
//         short i_idAtendimentoProtocolo;
//         short i_idContato;
//         short i_idEstado;
//         short i_dsEstado;
//         short i_sgEstado;
//         short i_idSubEstado;
//         short i_dsSubEstado;
//         short i_sgSubEstado;
//         short i_idPessoa;
//         short i_nmPessoa;
//         short i_dtAbertura;
//         short i_dtFechamento;
//         short i_idAtendimentoAlerta;
//         short i_dsMensagem;
//         short i_idAlerta;
//         short i_sgAlerta;
//         short i_dsAlerta;
//         short i_nmIcone;
//         short i_nmCor;
//         short i_nrCriticidade;
//         short i_arvore;
//         short i_nrTelefone;
//         short i_inDocumento;
//         short i_inPausaAtendimento;
//         short i_dtSuspeito;
//         short i_dtFimPausa;
//         short i_idAtendimentoBaixaHistorico;
//         short i_nmURLDados;
//         short i_dtSolicitacaoCancelamento;
//         short i_dtPrazoFinalInterno;
//         short i_idAtendimentoSuspeito;
//         short i_idAtendimentoOrigem;
//         short i_dtJanelaPortout;
//         short i_nrProtocoloPortabilidade;
// 
//         char *queryChar;
// 
//     EXEC SQL END DECLARE SECTION;
// 
//     EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
//     EXEC SQL WHENEVER NOT FOUND DO BREAK;
// 
//     query += "SELECT "
//                 "VW1.IDATENDIMENTO, "
//                 "VW1.IDATENDIMENTOPROTOCOLO, "
//                 "VW1.IDCONTATO, "
//                 "VW1.IDESTADO, "
//                 "VW1.DSESTADO, "
//                 "VW1.SGESTADO, "
//                 "VW1.IDSUBESTADO, "
//                 "VW1.DSSUBESTADO, "
//                 "VW1.SGSUBESTADO, "
//                 "VW1.IDPESSOAUSUARIOGRUPO, "
//                 "VW1.NMPESSOA, "
//                 "TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURACH, "
//                 "TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), "
//                 "VW1.IDATENDIMENTOALERTA, "
//                 "VW1.DSMENSAGEM, "
//                 "VW1.IDALERTA, "
//                 "VW1.SGALERTA, "
//                 "VW1.DSALERTA, "
//                 "VW1.NMICONE, "
//                 "VW1.NMCOR, "
//                 "VW1.NRCRITICIDADE, "
//                 "VW1.PATH, "
//                 "VW1.NRTELEFONE, "
//                 "VW1.INDOCUMENTO, "
//                 "VW1.INPAUSAATENDIMENTO, "
//                 "TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), "
//                 "TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), "
//                 "VW1.IDATENDIMENTOBAIXAHISTORICO, "
//                 "VW1.NMURLDADOS, "
//                 "VW1.DTSOLICITACAOCANCELAMENTO, "
//                 "VW1.DTPRAZOFINALINTERNO, "
//                 "VW1.IDATENDIMENTOSUSPEITO, "
//                 "VW1.IDATENDIMENTOORIGEM, "
//                 "VW1.DTJANELAPORTOUT, "
//                 "VW1.NRPROTOCOLOPORTABILIDADE "
//              "FROM ";
// 
//     registros = dados->nrCampos;
// 
//     if (status->dtFechamentoInicio != -1)
//     {
//         inFechamento = true;            
//     }
//     if (status->nrLinha != -1)
//     {
//         inLinha = true;         
//     }
//     if (status->idPessoaUsuario != -1)
//     {
//         inUsuario = true;           
//     }
//     
//     if ( inFechamento )
//     {
//         if ( inLinha )
//         {
//             query += " ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1 ";
//             if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//             {
//                 montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
//             }
//         }
//         else
//         {
//             query += " ATENDIMENTO.ATDFILAMCFECHADOSWFV01 VW1 ";
//             if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//             {
//                 montaWhereFila("IDUSUARIOGRUPO", dados->idUsuarioGrupo, WHERE_INT);
//             }
//         }
//     }
//     else if ((inLinha) && !(inUsuario))
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1 ";
//     }
//     else if ((inLinha) && (inUsuario))
//     {
//         query += " ATENDIMENTO.ATDFILAMCUSUARIOLINHAWFV01 VW1 ";
//     }
//     else if (!(inLinha) && (inUsuario))
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCUSUARIOWFV01 VW1 ";
//     }
//     else 
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1 ";
//     }
// 
//     if ( separa )
//     {
//         query += "AND ";
//     }
//     else
//     {
//         query += "WHERE ";
//     }
//     
//     query += "VW1.IDPESSOACONTA IS NULL ";
//     
//     separa = true;
// 
//     if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//     {
//         montaWhereFila("VW1.IDPESSOAUSUARIOGRUPO", dados->idUsuarioGrupo, WHERE_INT);
//     }
// 
//     if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
//     {
//         montaWhereFila("VW1.IDPESSOAUSUARIOGRUPO", dados->idPessoaUsuario, WHERE_INT);
//     }
// 
//     if (status->idClassificacaoTipoLinha == 1 && dados->idClassificacaoTipoLinha > 0) 
//     {
//         montaWhereFila("VW1.IDCLASSIFICACAOTIPOLINHA", dados->idClassificacaoTipoLinha, WHERE_CHAR);
//     }
// 
//     if (status->idGrupo == 1 && dados->idGrupo > 0) 
//     {
//         montaWhereFila("VW1.IDGRUPO", dados->idGrupo, WHERE_INT);
//     }
//     
//     // TODO: Resolver problema na view quando indicado idContato.
//     if (status->idContato == 1 && dados->idContato > 0) 
//     {
//         montaWhereFila("VW1.IDCONTATO", dados->idContato, WHERE_INT);
//     }
// 
//     if (status->idEstado == 1 && dados->idEstado > 0) 
//     {
//         montaWhereFila("VW1.IDESTADO", dados->idEstado, WHERE_INT);
//     }
//     if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
//     {
//         montaWhereFila("VW1.IDSUBESTADO", dados->idSubEstado, WHERE_INT);
//     }
//     if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
//     {
//         montaWhereFila("TRUNC(VW1.DTABERTURA)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
//     }
//     if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
//     {
//         montaWhereFila("TRUNC(VW1.DTABERTURA)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
//     }
//     if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
//     {
//         montaWhereFila("TRUNC(VW1.DTFECHAMENTO)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
//     }
//     if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
//     {
//         montaWhereFila("TRUNC(VW1.DTFECHAMENTO)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
//     }
//     if (status->idAtendimento == 1 && dados->idAtendimento > 0)
//     {
//         montaWhereFila("VW1.IDATENDIMENTO", dados->idAtendimento, WHERE_INT);
//     }
//     if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
//     {
// 
//         if ( dados->nrLinha[0]=='0' ) 
//         {
//             strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
//             prefixo = atoi(cConv);
//             numero  = atoi(dados->nrLinha+3);
//         }
//         else
//         {
//             strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
//             prefixo = atoi(cConv);
//             numero  = atoi(dados->nrLinha+2);
//         }
//         montaWhereFila("VW1.CDAREAREGISTRO", prefixo, WHERE_INT);
//         montaWhereFila("VW1.NRLINHA", numero, WHERE_INT);
//     }
//         
//     if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
//     {
//         montaWhereFila("VW1.NMLOGINUSUARIO", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
//     }
//         
//     if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
//     {
//         montaWhereFila("VW1.DSANDAMENTOOBSERVACAO", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
//     }
//         
//     if (status->tbPausa == 1)
//     {
//         montaWhereFila("VW1.INPAUSAATENDIMENTO", dados->tbPausa, WHERE_INT);
//     }
// 
//     /** 
//         Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
//     */
//     if (status->pesquisaDinamica == 1 && registros > 0)
//     {
//         DOMNode* registro;
//         int idCampo=0;
//         int tpComparacao=0;
//         int idDominio=0;
//         char *valor = 0;
//         int contador = 0;
// 
//         while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
//         {
//             if ( p = tx.walkTree(registro, "idCampo", 0),p )
//             {
//                     idCampo = atoi( p );
//                     XMLString::release(&p);
//             }
// 
//             if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
//             {
//                     tpComparacao = atoi( p );
//                     XMLString::release(&p);
//             }
// 
//             if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
//             {
//                     idDominio = atoi( p );
//                     XMLString::release(&p);
//             }
//             else
//                 idDominio = 0;
// 
//             valor = tx.walkTree(registro, "valor", 0);
// 
//             // Chamada apenas para gerar WHERE ou AND na concatenacao.
//             montaWhereFila("","", 999);
// 
//             query += "1 = (SELECT COUNT(1) FROM ATENDIMENTO.ATENDIMENTOFRM AF, ATENDIMENTO.ATENDIMENTOFRMCAMPO AFC "
//                            "WHERE AF.IDATENDIMENTO = VW1.IDATENDIMENTO "
//                                  "AND AF.IDATENDIMENTOFRM = AFC.IDATENDIMENTOFRM "
//                                  "AND ";
//             if (idDominio <= 0)
//             {
//                 query += " ( AF.IDCAMPO = ";
//                 query += idCampo;
//                 query += " AND UPPER(AFC.DSVALOR) ";
// 
//                 if (tpComparacao == 0)
//                 {
//                     query += " = UPPER('";
//                     query += valor;
//                     query += "') ";
//                 }
//                 else if (tpComparacao == 1)
//                 {
//                     query += " !=  UPPER('";
//                     query += valor;
//                     query += "') ";
//                 }
//                 else if (tpComparacao == 2)
//                 {
//                     query += " LIKE UPPER('%";
//                     query += valor;
//                     query += "%') ";
//                 }
// 
//                 query += " ) )";
//                 
//             }
//             else 
//             {
//                 query += " ( AF.IDCAMPO = ";
//                 query += idCampo;
//                 query += " AND AFC.IDDOMINIO = ";
//                 query += idDominio;
//                 query += " ) )";
//             }
// 
//             if (valor)
//             {
//                 XMLString::release(&valor);
//             }
//         }
//     }
// 
//     query += " ORDER BY DTABERTURA ";
// 
//     queryChar = query;
// 
//     ULOG("proCConsultaWFAvanzadaFilaMC > Query = [%s]", queryChar);
//     
//     EXEC SQL PREPARE consultaAtendimentoFilaAvanzada FROM :queryChar;
//     EXEC SQL DECLARE consultaFilaAvanzada CURSOR FOR consultaAtendimentoFilaAvanzada;
// 
//     EXEC SQL OPEN consultaFilaAvanzada;
//     while (true)
//     {
//         i_idAtendimento =
//         i_idAtendimentoProtocolo =
//         i_idContato =
//         i_idEstado =
//         i_dsEstado =
//         i_sgEstado =
//         i_idSubEstado =
//         i_dsSubEstado =
//         i_sgSubEstado =
//         i_idPessoa =
//         i_nmPessoa =
//         i_dtAbertura =
//         i_dtFechamento =
//         i_idAtendimentoAlerta =
//         i_dsMensagem =
//         i_idAlerta =
//         i_sgAlerta =
//         i_dsAlerta =
//         i_nmIcone =
//         i_nmCor =
//         i_nrCriticidade =
//         i_arvore =
//         i_nrTelefone =
//         i_inDocumento =
//         i_inPausaAtendimento =
//         i_dtSuspeito =
//         i_dtFimPausa =
//         i_idAtendimentoBaixaHistorico =
//         i_nmURLDados =
//         i_dtSolicitacaoCancelamento =
//         i_dtPrazoFinalInterno =
//         i_idAtendimentoSuspeito =
//         i_dtJanelaPortout =
//         i_nrProtocoloPortabilidade =
//         i_idAtendimentoOrigem = -1;
// 
//         EXEC SQL FETCH consultaFilaAvanzada INTO
//             :idAtendimento:i_idAtendimento,
//             :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
//             :idContato:i_idContato,
//             :idEstado:i_idEstado,
//             :dsEstado:i_dsEstado,
//             :sgEstado:i_sgEstado,
//             :idSubEstado:i_idSubEstado,
//             :dsSubEstado:i_dsSubEstado,
//             :sgSubEstado:i_sgSubEstado,
//             :idPessoa:i_idPessoa,
//             :nmPessoa:i_nmPessoa,
//             :dtAbertura:i_dtAbertura,
//             :dtFechamento:i_dtFechamento,
//             :idAtendimentoAlerta:i_idAtendimentoAlerta,
//             :dsMensagem:i_dsMensagem,
//             :idAlerta:i_idAlerta,
//             :sgAlerta:i_sgAlerta,
//             :dsAlerta:i_dsAlerta,
//             :nmIcone:i_nmIcone,
//             :nmCor:i_nmCor,
//             :nrCriticidade:i_nrCriticidade,
//             :arvore:i_arvore,
//             :nrTelefone:i_nrTelefone,
//             :inDocumento:i_inDocumento,
//             :inPausaAtendimento:i_inPausaAtendimento,
//             :dtSuspeito:i_dtSuspeito,
//             :dtFimPausa:i_dtFimPausa,
//             :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
//             :nmURLDados:i_nmURLDados,
//             :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
//             :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
//             :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
//             :idAtendimentoOrigem:i_idAtendimentoOrigem,
//             :dtJanelaPortout:i_dtJanelaPortout,
//             :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;
// 
//         if (numeroRegistros < 100)
//         {
//             CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
//             CONVIND(dsEstado, i_dsEstado);
//             CONVIND(sgEstado, i_sgEstado);
//             CONVIND(dsSubEstado, i_dsSubEstado);
//             CONVIND(sgSubEstado, i_sgSubEstado);
//             CONVIND(nmPessoa, i_nmPessoa);
//             CONVIND(dtAbertura, i_dtAbertura);
//             CONVIND(dtFechamento, i_dtFechamento);
//             CONVIND(dsMensagem, i_dsMensagem);
//             CONVIND(sgAlerta, i_sgAlerta);
//             CONVIND(dsAlerta, i_dsAlerta);
//             CONVIND(nmIcone, i_nmIcone);
//             CONVIND(nmCor, i_nmCor);
//             CONVIND(arvore, i_arvore);
//             CONVIND(nrTelefone, i_nrTelefone);
//             CONVIND(inDocumento, i_inDocumento);
//             CONVIND(dtSuspeito, i_dtSuspeito);
//             CONVIND(dtFimPausa, i_dtFimPausa);
//             CONVIND(nmURLDados, i_nmURLDados);
//             CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
//             CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
//             CONVIND(nrCriticidade, i_nrCriticidade);
//             CONVIND(dtJanelaPortout, i_dtJanelaPortout);
//             CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);
// 
//             if (i_idAtendimentoBaixaHistorico == -1)
//             {
//                 idAtendimentoBaixaHistorico = 0;
//             }
// 
//             // Implementação feita para atender as solicitacoes de refactoring.
//             saida->createTag("AtendimentoFilaVO");
//                 
//                     saida->addItem("operacaoWorkflow","");
//                 
//                     saida->createTag("AtendimentoVO");
//                 
//                         saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
//                         saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
//                         saida->addItem("dtAbertura", (char*)dtAbertura.arr);
//                         saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
//                         saida->addItem("dtFechamento", (char*)dtFechamento.arr);
//                         saida->addItem("nrTelefone", (char*)nrTelefone.arr);
//                         saida->addItem("inDocumento", (char*)inDocumento.arr);
//                         saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
//                         saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
//                         saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
//                         saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
//                         saida->addItem("nmURLDados", (char*)nmURLDados.arr);
//                         saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
//                         saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
//                         
//                         saida->createTag("WFEstadoVO");
//                 
//                             saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
//                             saida->addItem("dsEstado", (char*)dsEstado.arr);
//                             saida->addItem("sgEstado", (char*)sgEstado.arr);
//                 
//                         saida->closeTag();
//                 
//                         saida->createTag("WFSubEstadoVO");
//                 
//                             saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
//                             saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
//                             saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
//                 
//                         saida->closeTag();
//                 
//                         if (i_idAlerta != -1)
//                         {
//                                 saida->createTag("AlertaVO");
// 
//                                     saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
//                                     saida->addItem("dsAlerta", (char*)dsAlerta.arr);
//                                     saida->addItem("sgAlerta", (char*)sgAlerta.arr);
//                                     saida->addItem("nmIcone", (char*)nmIcone.arr);
//                                     saida->addItem("nmCor", (char*)nmCor.arr);
//                                     saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
// 
//                                 saida->closeTag();
//                         }
//                 
//                         saida->createTag("ns2:ArvoreAtendimentoVO");
//                 
//                             saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
//                             saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
//                 
//                         saida->closeTag();
//                 
//                         saida->createTag("ns3:UsuarioVIVO");
//                     
//                                 saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
//                                 saida->addItem("ns3:nmLoginUsuario", "");
//                                 saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
//                                 saida->addItem("ns3:sgSenhaUsuario", "");
//                     
//                             saida->closeTag();
//                             
//                     saida->closeTag();
//                 
//                 saida->closeTag();
// 
//             numeroRegistros++;
// 
//         }
// 
//         totalRegistros++;
// 
//     }
// 
//     saida->addItem("nrRegistros", numeroRegistros);
//     saida->addItem("totalRegistros", totalRegistros);
// 
//     EXEC SQL CLOSE consultaFilaAvanzada;
// 
//     ULOG_END( "proCConsultaWFAvanzadaFilaMC()" );
// 
//     return true;
// 
// }

// bool proCConsultaWFAvanzadaFilaMCQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
// {
//     ULOG_START( "proCConsultaWFAvanzadaFilaMCQtd()" );
// 
//     TuxHelper tx;
//     int registros = 0 ;
//     struct sqlca sqlca;
// 
//     long idAtendimentoOriginal = 0;
// 
//     bool inFechamento = false;
//     bool inLinha = false;
//     bool inUsuario = false;
// 
//     int prefixo = 0;
//     int numero  = 0;
//     char cConv[3];
// 
//     char* p;
//     SmallString query;
// 
//     bool separa = false;
// 
//     EXEC SQL BEGIN DECLARE SECTION;
//         char *queryChar;
//         
//         int iContador;
//         short sContador;
//     EXEC SQL END DECLARE SECTION;
// 
//     EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
//     EXEC SQL WHENEVER NOT FOUND CONTINUE;
// 
//     query += "SELECT "
//                 "COUNT(1) "
//              "FROM ";
// 
//     registros = dados->nrCampos;
// 
//     if (status->dtFechamentoInicio != -1)
//     {
//         inFechamento = true;            
//     }
//     if (status->nrLinha != -1)
//     {
//         inLinha = true;         
//     }
//     if (status->idPessoaUsuario != -1)
//     {
//         inUsuario = true;           
//     }
//     
//     if ( inFechamento )
//     {
//         if ( inLinha )
//         {
//             query += " ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1 ";
//             if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//             {
//                 montaWhereFila("idUsuarioGrupo", dados->idUsuarioGrupo, WHERE_INT);
//             }
//         }
//         else
//         {
//             query += " ATENDIMENTO.ATDFILAMCFECHADOSWFV01 VW1 ";
//             if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//             {
//                 montaWhereFila("IDUSUARIOGRUPO", dados->idUsuarioGrupo, WHERE_INT);
//             }
//         }
//     }
//     else if ((inLinha) && !(inUsuario))
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1 ";
//     }
//     else if ((inLinha) && (inUsuario))
//     {
//         query += " ATENDIMENTO.ATDFILAMCUSUARIOLINHAWFV01 VW1 ";
//     }
//     else if (!(inLinha) && (inUsuario))
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCUSUARIOWFV01 VW1 ";
//     }
//     else 
//     {
//         query += " ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1 ";
//     }
// 
//     if ( separa )
//     {
//         query += "AND ";
//     }
//     else
//     {
//         query += "WHERE ";
//     }
//     
//     query += "VW1.IDPESSOACONTA IS NULL ";
//     
//     separa = true;
// 
//     if (status->idUsuarioGrupo == 1 && dados->idUsuarioGrupo > 0) 
//     {
//         montaWhereFila("VW1.IDPESSOAUSUARIOGRUPO", dados->idUsuarioGrupo, WHERE_INT);
//     }
// 
//     if (status->idPessoaUsuario == 1 && dados->idPessoaUsuario > 0) 
//     {
//         montaWhereFila("VW1.IDPESSOAUSUARIOGRUPO", dados->idPessoaUsuario, WHERE_INT);
//     }
// 
//     if (status->idClassificacaoTipoLinha == 1 && dados->idClassificacaoTipoLinha > 0) 
//     {
//         montaWhereFila("VW1.IDCLASSIFICACAOTIPOLINHA", dados->idClassificacaoTipoLinha, WHERE_CHAR);
//     }
// 
//     if (status->idGrupo == 1 && dados->idGrupo > 0) 
//     {
//         montaWhereFila("VW1.IDGRUPO", dados->idGrupo, WHERE_INT);
//     }
//     
//     // TODO: Resolver problema na view quando indicado idContato.
//     if (status->idContato == 1 && dados->idContato > 0) 
//     {
//         montaWhereFila("VW1.IDCONTATO", dados->idContato, WHERE_INT);
//     }
// 
//     if (status->idEstado == 1 && dados->idEstado > 0) 
//     {
//         montaWhereFila("VW1.IDESTADO", dados->idEstado, WHERE_INT);
//     }
//     if (status->idSubEstado == 1 && dados->idSubEstado > 0) 
//     {
//         montaWhereFila("VW1.IDSUBESTADO", dados->idSubEstado, WHERE_INT);
//     }
//     if (status->dtAberturaInicio == 1 && strlen(dados->dtAberturaInicio) > 0) 
//     {
//         montaWhereFila("TRUNC(VW1.DTABERTURA)", dados->dtAberturaInicio, WHERE_DATA_MAIORIGUAL);
//     }
//     if (status->dtAberturaFim == 1 && strlen(dados->dtAberturaFim) > 0)
//     {
//         montaWhereFila("TRUNC(VW1.DTABERTURA)", dados->dtAberturaFim, WHERE_DATA_MENORIGUAL);
//     }
//     if (status->dtFechamentoInicio == 1 && strlen(dados->dtFechamentoInicio) > 0) 
//     {
//         montaWhereFila("TRUNC(VW1.DTFECHAMENTO)", dados->dtFechamentoInicio, WHERE_DATA_MAIORIGUAL);
//     }
//     if (status->dtFechamentoFim == 1 && strlen(dados->dtFechamentoFim) > 0)
//     {
//         montaWhereFila("TRUNC(VW1.DTFECHAMENTO)", dados->dtFechamentoFim, WHERE_DATA_MENORIGUAL);
//     }
//     if (status->idAtendimento == 1 && dados->idAtendimento > 0)
//     {
//         montaWhereFila("VW1.IDATENDIMENTO", dados->idAtendimento, WHERE_INT);
//     }
//     if (status->nrLinha == 1 && strlen(dados->nrLinha) > 0)
//     {
// 
//         if ( dados->nrLinha[0]=='0' ) 
//         {
//             strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
//             prefixo = atoi(cConv);
//             numero  = atoi(dados->nrLinha+3);
//         }
//         else
//         {
//             strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
//             prefixo = atoi(cConv);
//             numero  = atoi(dados->nrLinha+2);
//         }
//         montaWhereFila("VW1.CDAREAREGISTRO", prefixo, WHERE_INT);
//         montaWhereFila("VW1.NRLINHA", numero, WHERE_INT);
//     }
//         
//     if (status->nmLoginUsuario == 1 && strlen(dados->nmLoginUsuario) > 0)
//     {
//         montaWhereFila("VW1.NMLOGINUSUARIO", dados->nmLoginUsuario, WHERE_CHAR_LIKE_UPPER);
//     }
//         
//     if (status->dsAndamentoObservacao == 1 && strlen(dados->dsAndamentoObservacao) > 0)
//     {
//         montaWhereFila("VW1.DSANDAMENTOOBSERVACAO", dados->dsAndamentoObservacao, WHERE_CHAR_LIKE);
//     }
//         
//     if (status->tbPausa == 1)
//     {
//         montaWhereFila("VW1.INPAUSAATENDIMENTO", dados->tbPausa, WHERE_INT);
//     }
// 
//     /** 
//         Processo para montar a linha de filtro dos campos dinâmicos na fila de processos.
//     */
//     if (status->pesquisaDinamica == 1 && registros > 0)
//     {
//         DOMNode* registro;
//         int idCampo=0;
//         int tpComparacao=0;
//         int idDominio=0;
//         char *valor = 0;
//         int contador = 0;
// 
//         while (registro = tx.walkDOM(dados->pesquisaDinamica, "WFPesquisaAvancadaComparacaoVO", contador++))
//         {
//             if ( p = tx.walkTree(registro, "idCampo", 0),p )
//             {
//                     idCampo = atoi( p );
//                     XMLString::release(&p);
//             }
// 
//             if ( p = tx.walkTree(registro, "tpComparacao", 0),p )
//             {
//                     tpComparacao = atoi( p );
//                     XMLString::release(&p);
//             }
// 
//             if ( p = tx.walkTree(registro, "idFormularioCampoValor", 0),p )
//             {
//                     idDominio = atoi( p );
//                     XMLString::release(&p);
//             }
//             else
//                 idDominio = 0;
// 
//             valor = tx.walkTree(registro, "valor", 0);
// 
//             // Chamada apenas para gerar WHERE ou AND na concatenacao.
//             montaWhereFila("","", 999);
// 
//             query += "1 = (SELECT COUNT(1) FROM ATENDIMENTO.ATENDIMENTOFRM AF, ATENDIMENTO.ATENDIMENTOFRMCAMPO AFC "
//                            "WHERE AF.IDATENDIMENTO = VW1.IDATENDIMENTO "
//                                  "AND AF.IDATENDIMENTOFRM = AFC.IDATENDIMENTOFRM "
//                                  "AND ";
//             if (idDominio <= 0)
//             {
//                 query += " ( AF.IDCAMPO = ";
//                 query += idCampo;
//                 query += " AND UPPER(AFC.DSVALOR) ";
// 
//                 if (tpComparacao == 0)
//                 {
//                     query += " = UPPER('";
//                     query += valor;
//                     query += "') ";
//                 }
//                 else if (tpComparacao == 1)
//                 {
//                     query += " !=  UPPER('";
//                     query += valor;
//                     query += "') ";
//                 }
//                 else if (tpComparacao == 2)
//                 {
//                     query += " LIKE UPPER('%";
//                     query += valor;
//                     query += "%') ";
//                 }
// 
//                 query += " ) )";
//                 
//             }
//             else 
//             {
//                 query += " ( AF.IDCAMPO = ";
//                 query += idCampo;
//                 query += " AND AFC.IDDOMINIO = ";
//                 query += idDominio;
//                 query += " ) )";
//             }
// 
//             if (valor)
//             {
//                 XMLString::release(&valor);
//             }
//         }
//     }
// 
//     query += " ORDER BY DTABERTURA ";
// 
//     queryChar = query;
// 
//     ULOG("proCConsultaWFAvanzadaFilaMCQtd > Query = [%s]", queryChar);
//     
//     EXEC SQL PREPARE consultaAtendimentoFilaAvanzadaQtd FROM :queryChar;
//     EXEC SQL DECLARE consultaFilaAvanzadaQtd CURSOR FOR consultaAtendimentoFilaAvanzadaQtd;
// 
//     EXEC SQL OPEN consultaFilaAvanzadaQtd;
//     EXEC SQL FETCH consultaFilaAvanzadaQtd INTO :iContador:sContador;
//     EXEC SQL CLOSE consultaFilaAvanzadaQtd;
// 
//     saida->addItem("totalRegistros", iContador);
//     saida->addItem("nrRegistros", 0);
// 
//     ULOG_END( "proCConsultaWFAvanzadaFilaMCQtd()" );
// 
//     return true;
// }

bool proCConsultaWFFilaMCFechadosLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        short indIdClassificacaoTipoLinha;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[65];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaFechadosLinha CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO, 
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM,
            VW1.DTJANELAPORTOUT,
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM 
            ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioFiltro OR -1=:indIdUsuario)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(VW1.DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(VW1.DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND (VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioFiltro OR -1=:indIdUsuario)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(VW1.DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(VW1.DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        ))
        ORDER BY
            VW1.DTABERTURA;

    EXEC SQL OPEN consultaWFFilaFechadosLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaFechadosLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosLinha;

    ULOG_END( "proCConsultaWFFilaMCFechadosLinha()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idUsuarioFiltro;
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        short indIdClassificacaoTipoLinha;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
		    COUNT(1)
	    INTO
		    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATDFILAMCFECHADOSLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioFiltro OR -1=:indIdUsuario)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(VW1.DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(VW1.DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND (VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioFiltro OR -1=:indIdUsuario)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
            AND (TRUNC(VW1.DTFECHAMENTO)>=TO_DATE(:dtFechamentoInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtFechamentoInicio)
            AND (TRUNC(VW1.DTFECHAMENTO)<=TO_DATE(:dtFechamentoFimFiltro,'DD/MM/YYYY') OR -1 = :indDtFechamentoFim)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaMCFechadosLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    string queryStr;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *query;
        char filtro[256];

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        int  idUfOperadora;

        char *dtAberturaInicioFiltro;
        char *dtAberturaFimFiltro;
        char *dtFechamentoInicioFiltro;
        char *dtFechamentoFimFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        long idAtendimento[505];
        VARCHAR idAtendimentoProtocolo[505][64];
        int  idContato[505];
        int  idEstado[505];
        VARCHAR dsEstado[505][256];
        VARCHAR sgEstado[505][256];
        int  idSubEstado[505];
        VARCHAR dsSubEstado[505][256];
        VARCHAR sgSubEstado[505][256];
        long  idPessoa[505];
        VARCHAR nmPessoa[505][256];
        VARCHAR dtAbertura[505][22];
        VARCHAR dtFechamento[505][22];
        long idAtendimentoAlerta[505];
        VARCHAR dsMensagem[505][256];
        int  idAlerta[505];
        VARCHAR sgAlerta[505][256];
        VARCHAR dsAlerta[505][256];
        VARCHAR nmIcone[505][256];
        VARCHAR nmCor[505][256];
        VARCHAR nrCriticidade[505][15];
        VARCHAR arvore[505][800];
        VARCHAR nrTelefone[505][32];
        VARCHAR inDocumento[505][32];
        VARCHAR inACS[505][256];
        int inPausaAtendimento[505];
        VARCHAR dtSuspeito[505][32];
        VARCHAR dtFimPausa[505][32];
        long idAtendimentoBaixaHistorico[505];
        VARCHAR nmURLDados[505][256];
        VARCHAR dtSolicitacaoCancelamento[505][32];
        VARCHAR dtPrazoFinalInterno[505][32];
        long idAtendimentoSuspeito[505];
        long idAtendimentoOrigem[505];
        VARCHAR dtJanelaPortout[505][32];
        VARCHAR nrProtocoloPortabilidade[505][39];

        short i_idAtendimento[505];
        short i_idAtendimentoProtocolo[505];
        short i_idContato[505];
        short i_idEstado[505];
        short i_dsEstado[505];
        short i_sgEstado[505];
        short i_idSubEstado[505];
        short i_dsSubEstado[505];
        short i_sgSubEstado[505];
        short i_idPessoa[505];
        short i_nmPessoa[505];
        short i_dtAbertura[505];
        short i_dtFechamento[505];
        short i_idAtendimentoAlerta[505];
        short i_dsMensagem[505];
        short i_idAlerta[505];
        short i_sgAlerta[505];
        short i_dsAlerta[505];
        short i_nmIcone[505];
        short i_nmCor[505];
        short i_nrCriticidade[505];
        short i_arvore[505];
        short i_nrTelefone[505];
        short i_inDocumento[505];
        short i_inACS[505];
        short i_inPausaAtendimento[505];
        short i_dtSuspeito[505];
        short i_dtFimPausa[505];
        short i_idAtendimentoBaixaHistorico[505];
        short i_nmURLDados[505];
        short i_dtSolicitacaoCancelamento[505];
        short i_dtPrazoFinalInterno[505];
        short i_idAtendimentoSuspeito[505];
        short i_idAtendimentoOrigem[505];
        short i_dtJanelaPortout[505];
        short i_nrProtocoloPortabilidade[505];

        int rows_to_fetch = 505; // numero de linhas para cada fetch
        int rows_before = 0; // numero de linhas carregadas ate o ultimo fetch 
        int rows_this_time = 505; // numero de linhas carregadas no fetch

    EXEC SQL END DECLARE SECTION;

    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    idUfOperadora = dados->idUfOperadora;
    dtAberturaInicioFiltro = dados->dtAberturaInicio;
    dtAberturaFimFiltro = dados->dtAberturaFim;
    dtFechamentoInicioFiltro = dados->dtFechamentoInicio;
    dtFechamentoFimFiltro = dados->dtFechamentoFim;

    queryStr =
             "\nSELECT "
               "\nIDATENDIMENTO,"
               "\nIDATENDIMENTOPROTOCOLO,"
               "\nIDCONTATO,"
               "\nIDESTADO,"
               "\nDSESTADO,"
               "\nSGESTADO,"
               "\nIDSUBESTADO,"
               "\nDSSUBESTADO,"
               "\nSGSUBESTADO,"
               "\nIDPESSOAUSUARIO,"
               "\nNMPESSOA,"
               "\nDTABERTURA,"
               "\nDTFECHAMENTO,"
               "\nIDATENDIMENTOALERTA,"
               "\nDSMENSAGEM,"
               "\nIDALERTA,"
               "\nSGALERTA,"
               "\nDSALERTA,"
               "\nNMICONE,"
               "\nNMCOR,"
               "\nNRCRITICIDADE,"
               "\nPATH,"
               "\nNRTELEFONE,"
               "\nINDOCUMENTO,"
               "\n0 AS INACS,"
               "\nINPAUSAATENDIMENTO,"
               "\nDTSUSPEITO,"
               "\nDTFIMPAUSAATENDIMENTO,"
               "\nIDATENDIMENTOBAIXAHISTORICO,"
               "\nNMURLDADOS,"
               "\nDTSOLICITACAOCANCELAMENTO,"
               "\nDTPRAZOFINALINTERNO,"
               "\nIDATENDIMENTOSUSPEITO,"
               "\nIDATENDIMENTOORIGEM,"
               "\nDTJANELAPORTOUT, "
               "\nNRPROTOCOLOPORTABILIDADE "
             "\nFROM ( "
               "\n\tSELECT "
                   "\n\tATENDIMENTO.IDATENDIMENTO,"
                   "\n\tATENDIMENTO.IDATENDIMENTOPROTOCOLO,"
                   "\n\tATENDIMENTO.IDCONTATO,"
                   "\n\t'' AS NMCOR,"
                   "\n\t0 AS NRCRITICIDADE,"
                   "\n\tAGREST.IDESTADO AS IDESTADO,"
                   "\n\tEST.DSESTADO AS DSESTADO,"
                   "\n\t'' AS SGESTADO,"
                   "\n\tAGREST.IDSUBESTADO,"
                   "\n\tSEST.DSSUBESTADO,"
                   "\n\t'' AS SGSUBESTADO,"
                   "\n\t(SELECT IDPESSOAUSUARIO FROM ANDAMENTO.ANDAMENTO ANDA WHERE ANDA.IDATENDIMENTO=ATENDIMENTO.IDATENDIMENTO AND ANDA.IDATIVIDADE IN (2,8,10,11,13,14,17,23,56,57) AND ROWNUM<2) AS IDPESSOAUSUARIO,"
                   //"\n\tUG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO,"
                   "\n\tNULL AS IDUSUARIOGRUPO,"
                   "\n\tTO_CHAR(ATENDIMENTO.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,"
                   "\n\t(SELECT HC.NMPATH PATH FROM CONTATOADM.CONTATO HC WHERE ATENDIMENTO.IDCONTATO = HC.IDCONTATO) AS PATH,"
                   "\n\tDECODE(2,1,NULL, -- ABERTURA POR CONTA NAO DEVE EXIBIR N.LINHA INCD.#3288 NOV/2005"
                          "\n\t\t\tDECODE(ATENDIMENTO.IDPESSOALINHAHISTORICO,NULL,'SEM ID LINHA',"
                          // "\n\t\t\t(SELECT DECODE (PLH.NRLINHA, NULL,'N.TEL.NULO', '(' ||"
                                 // "TRIM (TO_CHAR (PLH.CDAREAREGISTRO, '00')) || ')' ||"
                                     // "SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 1, 5 ) ||"
                                         // "'-' || SUBSTR (TO_CHAR (LPAD (PLH.NRLINHA, 8), '99999999'), 6, 8))"
                          "\n\t\t\t(SELECT DECODE (PLH.NRLINHA, NULL,'N.TEL.NULO', soa_ow.formata_nrlinha (TO_CHAR(PLH.CDAREAREGISTRO||PLH.NRLINHA)) )"
                             "\n\t\t\tFROM CUSTOMER.PESSOALINHAHISTORICO PLH"
                            "\n\t\t\tWHERE PLH.IDPESSOALINHAHISTORICO = ATENDIMENTO.IDPESSOALINHAHISTORICO))) AS NRTELEFONE,"
                   "\n\t0 AS INPAUSAATENDIMENTO,"
                   "\n\t(SELECT ASU.IDATENDIMENTOSUSPEITO IDATENDIMENTOSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO) IDATENDIMENTOSUSPEITO,"
                   "\n\tTO_CHAR((SELECT ASU.DTSUSPEITO DTSUSPEITO FROM ATENDIMENTO.ATENDIMENTOSUSPEITO ASU WHERE ATENDIMENTO.IDATENDIMENTO = ASU.IDATENDIMENTO),'DD/MM/YYYY HH24:MI:SS') DTSUSPEITO,"
                   "\n\t'' AS NMURLDADOS,"
                   "\n\t'' AS DTFIMPAUSAATENDIMENTO,"
                   "\n\tATENDIMENTO.IDGRUPOATUAL AS IDGRUPO,"
                   "\n\t(SELECT PES.NMPESSOA FROM CUSTOMER.PESSOA PES,ANDAMENTO.ANDAMENTO ANDA2 WHERE ANDA2.IDATENDIMENTO=ATENDIMENTO.IDATENDIMENTO AND ANDA2.IDATIVIDADE IN (2,8,10,11,13,14,17,23,56,57) AND ROWNUM <2 AND ANDA2.IDPESSOAUSUARIO =PES.IDPESSOA) AS NMPESSOA,"
                   "\n\t(SELECT DECODE(SIGN(COUNT(1)),1,'S','N') FROM ATENDIMENTO.ATENDIMENTODOCUMENTO ATDD WHERE ATENDIMENTO.IDATENDIMENTO = ATDD.IDATENDIMENTO) AS INDOCUMENTO,"
                   "\n\tTO_CHAR(ATENDIMENTO.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,"
                   "\n\t(SELECT OBS.DSANDAMENTOOBSERVACAO FROM ATENDIMENTO.ANDAMENTOOBSERVACAO OBS WHERE ATENDIMENTO.IDANDAMENTOATUAL = OBS.IDANDAMENTO) AS DSANDAMENTOOBSERVACAO,"
                   "\n\t(SELECT ABA.IDATENDIMENTOBAIXAHISTORICO FROM ATENDIMENTO.ATENDIMENTOBAIXAATUAL ABA WHERE ATENDIMENTO.IDATENDIMENTO = ABA.IDATENDIMENTO) AS IDATENDIMENTOBAIXAHISTORICO,"
                   "\n\t(SELECT ACS.DTSOLICITACAOCANCELAMENTO FROM ATENDIMENTO.CANCELAMENTOSOLICITADO ACS WHERE ATENDIMENTO.IDATENDIMENTO = ACS.IDATENDIMENTO) AS DTSOLICITACAOCANCELAMENTO,"
                   "\n\t(SELECT AO.IDATENDIMENTOORIGEM FROM ATENDIMENTO.ATENDIMENTOORIGEM AO WHERE ATENDIMENTO.IDATENDIMENTO = AO.IDATENDIMENTO) AS IDATENDIMENTOORIGEM,"
                   "\n\tATENDIMENTO.DTPRAZOFINALINTERNO,"
                   "\n\t0 AS IDATENDIMENTOALERTA,"
                   "\n\t'' AS DSMENSAGEM,"
                   "\n\t0 AS IDALERTA,"
                   "\n\t'' AS SGALERTA,"
                   "\n\t'' AS DSALERTA,"
                   "\n\t'' AS NMICONE,"
                   "\n\tATENDIMENTO.IDUFOPERADORA,"
                   "\n\tTO_CHAR(ATENDIMENTO.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') DTJANELAPORTOUT,"
                   "\n\tATENDIMENTO.NRPROTOCOLOPORTABILIDADE"
               "\n\tFROM "
                   "\n\tATENDIMENTO.ATENDIMENTO ATENDIMENTO";

    if ( status->nrConta != -1 )
    {
        queryStr +=
                   "\n\t,ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA";
    }

    queryStr +=
                   "\n\t,ACESSO.USUARIOGRUPO UG"
                   "\n\t,WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR"
                   "\n\t,WORKFLOW.AGRUPAMENTOESTADO AGREST"
                   "\n\t,WORKFLOW.ESTADO EST"
                   "\n\t,WORKFLOW.SUBESTADO SEST "
                   "\n\t,APOIO.PERFILCONSULTORATD PERFILCONSULTORATD";
    if ( status->idClassificacaoTipoLinha != -1 )
    {
        queryStr +=
                   "\n\t,APOIO.CLASSIFICACAOTIPOLINHA CTL "
                   "\n\t,APOIO.TIPOLINHA TL ";
    }

    queryStr +=
             "\n\tWHERE "
               "\n\tAGRTPR.IDAGRUPAMENTOESTADOTPPROC = ATENDIMENTO.IDAGRUPAMENTOESTADOTPPROC "
               "\n\tAND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
               "\n\tAND EST.IDESTADO = AGREST.IDESTADO "
               "\n\tAND SEST.IDSUBESTADO = AGREST.IDSUBESTADO "
               "\n\tAND ATENDIMENTO.DTFECHAMENTO IS NOT NULL "
               //"\n\tAND ATENDIMENTO.IDPESSOACONTA IS NULL "
               "\n\tAND ATENDIMENTO.SGREGRAENCAMINHAMENTO = 'MC' "
               "\n\tAND ATENDIMENTO.IDGRUPOATUAL = UG.IDGRUPO "
               "\n\tAND NVL(ATENDIMENTO.IDPERFILCONSULTORATD,'VIVO') = PERFILCONSULTORATD.IDPERFILCONSULTORATD "
               "\n\tAND NVL(ATENDIMENTO.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE('"+ (string)dados->idFornecedorConsultorAtd + "','VIVO',NVL(ATENDIMENTO.IDFORNECEDORCONSULTORATD,'VIVO'),'"+ (string)dados->idFornecedorConsultorAtd + "') ";

    if ( idPessoaUsuarioFiltro )
    {
        sprintf( filtro, "%d ", idPessoaUsuarioFiltro );
        queryStr +=
               "\n\tAND ATENDIMENTO.IDPESSOAUSUARIOATUAL = " + (string) filtro;
    }

    sprintf( filtro, "%d ", idUsuarioGrupoFiltro );
    queryStr +=
           "\n\tAND UG.IDPESSOAUSUARIO = " + (string) filtro;

    if ( strcmp(idPerfilConsultorAtdFiltro,"ATD")==0 )
    {
        sprintf( filtro, "%d ", idUsuarioGrupoFiltro );
        queryStr +=
               "\n\tAND (ATENDIMENTO.IDPESSOAUSUARIOABERTURA = " + (string) filtro +
                    " OR ATENDIMENTO.IDPESSOAUSUARIOATUAL = " + (string) filtro + ")";

    }

    if ( status->nrConta != -1 )
    {
        queryStr +=
               "\n\tAND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO";
    }

    if ( status->idClassificacaoTipoLinha != -1 )
    {
        queryStr +=
               "\n\tAND NVL(ATENDIMENTO.IDTIPOLINHA,3) = TL.IDTIPOLINHA "
               "\n\tAND TL.IDCLASSIFICACAOTIPOLINHA = CTL.IDCLASSIFICACAOTIPOLINHA "
               "\n\tAND CTL.IDCLASSIFICACAOTIPOLINHA = " + (string)dados->idClassificacaoTipoLinha;
    }

    if ( status->idTipoCarteira != -1 )
    {
        sprintf(filtro, "\n\tAND ATENDIMENTO.IDTIPOCARTEIRA = %d",dados->idTipoCarteira);
        queryStr += filtro;
    }

    if ( status->idSegmentacao != -1 )
    {
        sprintf(filtro, "\n\tAND ATENDIMENTO.IDSEGMENTACAO = %d",dados->idSegmentacao);
        queryStr += filtro;
    }

    if ( status->nrConta != -1 )
    {
        sprintf(filtro, "\n\tAND ATENDIMENTOCONTA.CDCONTA = %s",dados->nrConta);
        queryStr += filtro;
    }

    if(status->dtAberturaInicio != -1)
    {
        sprintf( filtro, "\n AND TRUNC(ATENDIMENTO.DTABERTURA) >= "
                            "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
                        , dtAberturaInicioFiltro );
        queryStr += filtro;
    }

    if(status->dtAberturaFim != -1)
    {
        sprintf( filtro, "\n AND TRUNC(ATENDIMENTO.DTABERTURA) <= "
                            "( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) "
                        , dtAberturaFimFiltro );
        queryStr += filtro;
    }

    queryStr +=
               "\n\tAND ATENDIMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('";
    queryStr += dtFechamentoInicioFiltro;
    queryStr +=
               " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
               "\n\tAND (SELECT TO_DATE('";
    queryStr += dtFechamentoFimFiltro;
    queryStr +=
               " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
             ") "
             "\nWHERE 1=1 ";

    if(status->idPessoaUsuario != -1)
    {
        sprintf( filtro, "\n AND IDPESSOAUSUARIO = %d ", idUsuarioFiltro ); 
        queryStr += filtro;
    }

    if(status->idGrupo != -1)
    {
        sprintf( filtro, "\n AND IDGRUPO = %d ", idGrupoFiltro );
        queryStr += filtro;
    }

    if(status->idAtendimento != -1)
    {
        sprintf( filtro, "\n AND IDATENDIMENTO = %lu ", idAtendimentoFiltro );
        queryStr += filtro;
    }

    if(status->idContato != -1)
    {
        sprintf( filtro, "\n AND IDCONTATO = %d ", idContatoFiltro );
        queryStr += filtro;
    }

    if(status->idEstado != -1)
    {
        sprintf( filtro, "\n AND IDESTADO = %d ", idEstadoFiltro );
        queryStr += filtro;
    }

    if(status->idSubEstado != -1)
    {
        sprintf( filtro, "\n AND IDSUBESTADO = %d ", idSubEstadoFiltro );
        queryStr += filtro;
    }

    if(status->idUfOperadora != -1)
    {
        sprintf( filtro, "\n AND IDUFOPERADORA = %d ", idUfOperadora );
        queryStr += filtro;
    }

    queryStr += "\n AND ROWNUM < 101 ";

    query = queryStr.c_str();

    ULOG( "QUERY=%s",query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE QueryFechados2 STATEMENT;
    EXEC SQL PREPARE QueryFechados2 FROM :query;
    EXEC SQL DECLARE consultaWFFilaFechadosUsuario CURSOR FOR QueryFechados2;

    EXEC SQL OPEN consultaWFFilaFechadosUsuario;
    // Troca a diretiva de tratamento de erro para o fetch com host array
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    while (rows_this_time == rows_to_fetch)
    {
        EXEC SQL FOR :rows_to_fetch FETCH consultaWFFilaFechadosUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        rows_this_time = sqlca.sqlerrd[2] - rows_before; 
        rows_before = sqlca.sqlerrd[2]; 

        for(int icount=0; icount < rows_this_time; icount++)
        {
            totalRegistros++;

            if (numeroRegistros < 100 && rows_this_time > 0)
            {
                numeroRegistros++;

                CONVIND(idAtendimentoProtocolo[icount], i_idAtendimentoProtocolo[icount]);
                CONVIND(dsEstado[icount], i_dsEstado[icount]);
                CONVIND(sgEstado[icount], i_sgEstado[icount]);
                CONVIND(dsSubEstado[icount], i_dsSubEstado[icount]);
                CONVIND(sgSubEstado[icount], i_sgSubEstado[icount]);
                CONVIND(nmPessoa[icount], i_nmPessoa[icount]);
                CONVIND(dtAbertura[icount], i_dtAbertura[icount]);
                CONVIND(dtFechamento[icount], i_dtFechamento[icount]);
                CONVIND(dsMensagem[icount], i_dsMensagem[icount]);
                CONVIND(sgAlerta[icount], i_sgAlerta[icount]);
                CONVIND(dsAlerta[icount], i_dsAlerta[icount]);
                CONVIND(nmIcone[icount], i_nmIcone[icount]);
                CONVIND(nmCor[icount], i_nmCor[icount]);
                CONVIND(arvore[icount], i_arvore[icount]);
                CONVIND(nrTelefone[icount], i_nrTelefone[icount]);
                CONVIND(inDocumento[icount], i_inDocumento[icount]);
                CONVIND(inACS[icount], i_inACS[icount]);
                CONVIND(dtSuspeito[icount], i_dtSuspeito[icount]);
                CONVIND(dtFimPausa[icount], i_dtFimPausa[icount]);
                CONVIND(nmURLDados[icount], i_nmURLDados[icount]);
                CONVIND(dtSolicitacaoCancelamento[icount], i_dtSolicitacaoCancelamento[icount]);
                CONVIND(dtPrazoFinalInterno[icount], i_dtPrazoFinalInterno[icount]);
                CONVIND(nrCriticidade[icount], i_nrCriticidade[icount]);
                CONVIND(dtJanelaPortout[icount], i_dtJanelaPortout[icount]);
                CONVIND(nrProtocoloPortabilidade[icount],i_nrProtocoloPortabilidade[icount]);

                saida->createTag("AtendimentoFilaVO");

                saida->addItem("operacaoWorkflow","");

                saida->createTag("AtendimentoVO");

                saida->addItem("idAtendimento", CONVLONG(idAtendimento[icount],i_idAtendimento[icount]));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo[icount].arr);
                saida->addItem("dtAbertura", (char*)dtAbertura[icount].arr);
                saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout[icount].arr);
                saida->addItem("dtFechamento", (char*)dtFechamento[icount].arr);
                saida->addItem("nrTelefone", (char*)nrTelefone[icount].arr);
                saida->addItem("inDocumento", (char*)inDocumento[icount].arr);
                saida->addItem("inACS", (char*)inACS[icount].arr);
                saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento[icount],i_inPausaAtendimento[icount]));
                saida->addItem("dtSuspeito", (char*)dtSuspeito[icount].arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa[icount].arr);
                saida->addItem("idAtendimentoBaixaHistorico", i_idAtendimentoBaixaHistorico[icount] == -1 ? 0 : idAtendimentoBaixaHistorico[icount]);
                saida->addItem("nmURLDados", (char*)nmURLDados[icount].arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento[icount].arr);
                saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade[icount].arr);

                saida->createTag("WFEstadoVO");

                saida->addItem("idEstado", CONVINT(idEstado[icount],i_idEstado[icount]));
                saida->addItem("dsEstado", (char*)dsEstado[icount].arr);
                saida->addItem("sgEstado", (char*)sgEstado[icount].arr);

                saida->closeTag();

                saida->createTag("WFSubEstadoVO");

                saida->addItem("idSubEstado", CONVINT(idSubEstado[icount],i_idSubEstado[icount]));
                saida->addItem("dsSubEstado", (char*)dsSubEstado[icount].arr);
                saida->addItem("sgSubEstado", (char*)sgSubEstado[icount].arr);

                saida->closeTag();

                if (i_idAlerta[icount] != -1)
                {
                    saida->createTag("AlertaVO");

                    saida->addItem("idAlerta", CONVINT(idAlerta[icount],i_idAlerta[icount]));
                    saida->addItem("dsAlerta", (char*)dsAlerta[icount].arr);
                    saida->addItem("sgAlerta", (char*)sgAlerta[icount].arr);
                    saida->addItem("nmIcone", (char*)nmIcone[icount].arr);
                    saida->addItem("nmCor", (char*)nmCor[icount].arr);
                    saida->addItem("nrCriticidade", (char*)nrCriticidade[icount].arr);

                    saida->closeTag();
                }

                saida->createTag("ns2:ArvoreAtendimentoVO");

                saida->addItem("ns2:idContato", CONVINT(idContato[icount],i_idContato[icount]));
                saida->addItem("ns2:descricaoCompleta", (char*)arvore[icount].arr);

                saida->closeTag();

                saida->createTag("ns3:UsuarioVIVO");

                saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa[icount],i_idPessoa[icount]));
                saida->addItem("ns3:nmLoginUsuario", "");
                saida->addItem("ns3:nmNome", (char*)nmPessoa[icount].arr);
                saida->addItem("ns3:sgSenhaUsuario", "");

                saida->closeTag();

                saida->closeTag();

                saida->closeTag();

            } // if (numeroRegistros < 100)

        } // for(int icount=0; icount < rows_this_time; icount++) 

    } // while (rows_this_time == rows_to_fetch)

    if( totalRegistros < 100 )
    {
        saida->addItem("totalRegistros", totalRegistros);
    }
    else
    {
        saida->addItem("totalRegistros", "100+");
    }

    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaFechadosUsuario;

    ULOG_END( "proCConsultaWFFilaMCFechadosUsuario()" );

    return true;
}

bool proCConsultaWFFilaMCFechadosUsuarioQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCFechadosUsuarioQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        char query[16384];
        char filtro[1024];

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idUsuarioFiltro;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        int  idUfOperadora;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char dtFechamentoInicioFiltro[11];
        char dtFechamentoFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdUsuario;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indDtFechamentoInicio;
        short indDtFechamentoFim;
        short indIdUfOperadora;
        
        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idUsuarioFiltro = dados->idPessoaUsuario;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    strcpy(dtFechamentoInicioFiltro, dados->dtFechamentoInicio);
    strcpy(dtFechamentoFimFiltro, dados->dtFechamentoFim);
    idUfOperadora = dados->idUfOperadora;

    indIdUsuario = status->idPessoaUsuario;
    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indDtFechamentoInicio = status->dtFechamentoInicio;
    indDtFechamentoFim = status->dtFechamentoFim;
    indIdUfOperadora = status->idUfOperadora;

    sprintf(query,
             "SELECT "
                 "COUNT(1) "
             "FROM ( "
               "SELECT "
                    "ATENDIMENTO.IDATENDIMENTO, "
                    "ATENDIMENTO.IDCONTATO, "
                    "AGREST.IDESTADO, "
                    "AGREST.IDSUBESTADO, "
                    "ANDAMENTO.IDPESSOAUSUARIO, "
                    //"UG.IDPESSOAUSUARIO AS IDUSUARIOGRUPO, "
                    "ATENDIMENTO.DTABERTURA, "
                    //"ANDAMENTO.IDGRUPO, "
                    "ATENDIMENTO.IDUFOPERADORA, "
                    "ATENDIMENTOCONTA.CDCONTA "
               "FROM "
                    "ATENDIMENTO.ATENDIMENTO ATENDIMENTO "
                   ",ATENDIMENTO.ATENDIMENTOCONTA ATENDIMENTOCONTA "
                   //",ANDAMENTO.ANDAMENTO ANDAMENTO "
                   ",ACESSO.USUARIOGRUPO UG "
                   //",WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR "
                   //",WORKFLOW.AGRUPAMENTOESTADO AGREST "
                   //",WORKFLOW.ESTADO EST "
                   //",WORKFLOW.SUBESTADO SEST "
                   ",APOIO.CLASSIFICACAOTIPOLINHA CTL "
                   ",APOIO.TIPOLINHA TL "
                   ",APOIO.PERFILCONSULTORATD PERFILCONSULTORATD "
               "WHERE "
                   //"UG.IDPESSOAUSUARIO = %d "
               //"    PERFILCONSULTORATD.NRPESOHIERARQUIA <= %s "
               "AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(%s,'ATD',%d,VW1.IDPESSOAUSUARIOABERTURA) "
                 "OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(%s,'ATD',%d,NVL(VW1.IDPESSOAUSUARIOATUAL,0))) "
               //"AND AGRTPR.IDAGRUPAMENTOESTADOTPPROC = ANDAMENTO.IDAGRUPAMENTOESTADOTPPROC "
               //"AND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO "
               //"AND EST.IDESTADO = AGREST.IDESTADO "
               //"AND SEST.IDSUBESTADO = AGREST.IDSUBESTADO "
               "AND ATENDIMENTO.DTFECHAMENTO IS NOT NULL "
               "AND ATENDIMENTO.IDGRUPOATUAL = UG.IDGRUPO "
               //"AND ANDAMENTO.IDANDAMENTO = ATENDIMENTO.IDANDAMENTOATUAL "
               //"AND ANDAMENTO.IDGRUPO = UG.IDGRUPO "
               "AND ATENDIMENTO.IDATENDIMENTO = ATENDIMENTOCONTA.IDATENDIMENTO(+) "
               //"AND ATENDIMENTO.IDPESSOACONTA IS NULL "
               "AND ATENDIMENTO.SGREGRAENCAMINHAMENTO = 'MC' "
               "AND NVL(ATENDIMENTO.IDPERFILCONSULTORATD,'VIVO') = PERFILCONSULTORATD.IDPERFILCONSULTORATD "
               //"AND NVL(ATENDIMENTO.IDFORNECEDORCONSULTORATD,'VIVO') = '%s' "
               "AND NVL(ATENDIMENTO.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE('%s','VIVO',NVL(ATENDIMENTO.IDFORNECEDORCONSULTORATD,'VIVO'),'%s') "
               "AND NVL(ATENDIMENTO.IDTIPOLINHA,3) = TL.IDTIPOLINHA (+) "
               "AND TL.IDCLASSIFICACAOTIPOLINHA = CTL.IDCLASSIFICACAOTIPOLINHA (+) "
               //"AND ANDAMENTO.DTANDAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
               //     "AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
               "AND ATENDIMENTO.DTFECHAMENTO BETWEEN (SELECT TO_DATE('%s 00:00:00', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
                    "AND (SELECT TO_DATE('%s 23:59:59', 'DD/MM/YYYY HH24:MI:SS') FROM DUAL) "
             ") "
             "WHERE 1=1 ", dados->nrPesoHierarquia,dados->idPerfilConsultorAtd,dados->idUsuarioGrupo
                         , dados->idFornecedorConsultorAtd,dados->idFornecedorConsultorAtd
                         , dtFechamentoInicioFiltro,dtFechamentoFimFiltro);

    if ( idPessoaUsuarioFiltro )
    {
        sprintf( filtro, "\n\tAND ATENDIMENTO.IDPESSOAUSUARIOATUAL = %d ", idPessoaUsuarioFiltro );
        strcat( query, filtro );
    }

    sprintf( filtro, "\n\tAND UG.IDPESSOAUSUARIO = %d ", idUsuarioGrupoFiltro );
    strcat( query, filtro );

    if ( strcmp(idPerfilConsultorAtdFiltro,"ATD")==0 )
    {
        sprintf( filtro, "\n\tAND (ATENDIMENTO.IDPESSOAUSUARIOABERTURA = %d OR ATENDIMENTO.IDPESSOAUSUARIOATUAL=%d)", idUsuarioGrupoFiltro, idUsuarioGrupoFiltro );
        strcat( query, filtro );
    }

    if ( status->idClassificacaoTipoLinha != -1 )
    {
        sprintf( filtro, " AND CTL.IDCLASSIFICACAOTIPOLINHA = '%s'", dados->idClassificacaoTipoLinha); 
        strcat( query, filtro );
    }

    if(indIdUsuario != -1)
    {
        sprintf( filtro, " AND idPessoaUsuario = %d ", idUsuarioFiltro ); 
        strcat( query, filtro );
    }

    if(indIdGrupo != -1)
    {
        sprintf( filtro, " AND idGrupo = %d ", idGrupoFiltro );
        strcat( query, filtro );
    }

    if(indIdAtendimento != -1)
    {
        sprintf( filtro, " AND idAtendimento = %ld ", idAtendimentoFiltro );
        strcat( query, filtro );
    }

    if(indIdContato != -1)
    {
        sprintf( filtro, " AND idContato = %d ", idContatoFiltro );
        strcat( query, filtro );
    }

    if(indIdEstado != -1)
    {
        sprintf( filtro, " AND idEstado = %d ", idEstadoFiltro );
        strcat( query, filtro );
    }

    if(indIdSubEstado != -1)
    {
        sprintf( filtro, " AND idSubEstado = %d ", idSubEstadoFiltro );
        strcat( query, filtro );
    }

    if ( status->idTipoCarteira != -1 )
    {
        sprintf(filtro, "\n\tAND IDTIPOCARTEIRA = %d",dados->idTipoCarteira);
        strcat( query, filtro );
    }

    if ( status->idSegmentacao != -1 )
    {
        sprintf(filtro, "\n\tAND IDSEGMENTACAO = %d",dados->idSegmentacao);
        strcat( query, filtro );
    }

    if ( status->nrConta != -1 )
    {
        sprintf(filtro, "\n\tAND CDCONTA = %s",dados->nrConta);
        strcat( query, filtro );
    }

    if(indDtAberturaInicio != -1)
    {
        sprintf( filtro, " AND TRUNC(ATENDIMENTO.dtAbertura) >= ( SELECT TO_DATE('%s', 'DD/MM/YYYY') FROM DUAL ) ", dtAberturaInicioFiltro );
        strcat( query, filtro );
    }

    if(indDtAberturaFim != -1)
    {
        sprintf( filtro, " AND TRUNC(ATENDIMENTO.dtAbertura) <= ( SELECT TO_DATE('%s','DD/MM/YYYY') FROM DUAL ) ", dtAberturaFimFiltro );
        strcat( query, filtro );
    }

    if(indIdUfOperadora != -1)
    {
        sprintf( filtro, " AND idUfOperadora = %d ", idUfOperadora );
        strcat( query, filtro );
    }

    ULOG( "QUERY [%s]",query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL DECLARE QueryFechados2Qtd STATEMENT;
    EXEC SQL PREPARE QueryFechados2Qtd FROM :query;
    EXEC SQL DECLARE consultaWFFilaFechadosUsuarioQtd CURSOR FOR QueryFechados2Qtd;

    EXEC SQL OPEN consultaWFFilaFechadosUsuarioQtd;
    EXEC SQL FETCH consultaWFFilaFechadosUsuarioQtd INTO :iContador:sContador;
    EXEC SQL CLOSE consultaWFFilaFechadosUsuarioQtd;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaMCFechadosUsuarioQtd()" );

    return true;
}

bool proCConsultaWFFilaMCUsuarioLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCUsuarioLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        int  idUfOperadora;
        char *idClassificacaoTipoLinhaFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;
        short indIdClassificacaoTipoLinha;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaUsuarioLinha CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO,
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS'),
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM 
            ATENDIMENTO.ATDFILAMCUSUARIOLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        ORDER BY
            VW1.NRCRITICIDADE DESC,VW1.IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaUsuarioLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaUsuarioLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuarioLinha;

    ULOG_END( "proCConsultaWFFilaMCUsuarioLinha()" );

    return true;
}

bool proCConsultaWFFilaMCUsuarioLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCUsuarioLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int   oprefixo         = prefixo;
        int   otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;
        short indIdClassificacaoTipoLinha;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
		    COUNT(1)
	    INTO
		    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATDFILAMCUSUARIOLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaMCUsuarioLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaMCLinha(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCLinha()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdClassificacaoTipoLinha;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long  idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaLinha CURSOR FOR
        SELECT 
            VW1.IDATENDIMENTO, 
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO, 
            VW1.IDESTADO, 
            VW1.DSESTADO, 
            VW1.SGESTADO, 
            VW1.IDSUBESTADO, 
            VW1.DSSUBESTADO, 
            VW1.SGSUBESTADO, 
            VW1.IDPESSOAUSUARIOGRUPO, 
            VW1.NMPESSOA, 
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA, 
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOALERTA, 
            VW1.DSMENSAGEM, 
            VW1.IDALERTA, 
            VW1.SGALERTA, 
            VW1.DSALERTA, 
            VW1.NMICONE, 
            VW1.NMCOR, 
            VW1.NRCRITICIDADE, 
            VW1.PATH, 
            VW1.NRTELEFONE, 
            VW1.INDOCUMENTO, 
            0 AS INACS, 
            VW1.INPAUSAATENDIMENTO, 
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS'), 
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS'), 
            VW1.IDATENDIMENTOBAIXAHISTORICO, 
            VW1.NMURLDADOS, 
            VW1.DTSOLICITACAOCANCELAMENTO, 
            VW1.DTPRAZOFINALINTERNO, 
            VW1.IDATENDIMENTOSUSPEITO, 
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS'),
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM 
            ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        //AND VW1.IDPESSOACONTA IS NULL
        ORDER BY
            VW1.NRCRITICIDADE DESC,VW1.IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaLinha;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaLinha INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
            

        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaLinha;

    ULOG_END( "proCConsultaWFFilaMCLinha()" );

    return true;
}

bool proCConsultaWFFilaMCLinhaQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCLinhaQtd()" );

    struct sqlca sqlca;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  oprefixo         = prefixo;
        int  otelefone        = numero;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdClassificacaoTipoLinha;

        int iContador;
        short sContador;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
	    SELECT 
		    COUNT(1)
	    INTO
		    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATENDIMENTOFILAMCLINHAWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.CDAREAREGISTRO = :oprefixo
            AND VW1.NRLINHA = :otelefone
            AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
            AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
            AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
            AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
            AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
            AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
            AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
            AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        ));
        //AND VW1.IDPESSOACONTA IS NULL;

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros"   , 0);

    ULOG_END( "proCConsultaWFFilaMCLinhaQtd()" );

    return true;
}

bool proCConsultaWFFilaMCUsuario(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCUsuario()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;
        short indIdClassificacaoTipoLinha;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    EXEC SQL DECLARE consultaWFFilaUsuario CURSOR FOR
        SELECT 
            IDATENDIMENTO,
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIO, 
            NMPESSOA, 
            DTABERTURA, 
            DTFECHAMENTO,
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            INACS, 
            INPAUSAATENDIMENTO, 
            DTSUSPEITO, 
            DTFIMPAUSAATENDIMENTO,
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            DTJANELAPORTOUT,
            NRPROTOCOLOPORTABILIDADE
        FROM
        (
            SELECT 
                VW1.IDATENDIMENTO,
                VW1.IDATENDIMENTOPROTOCOLO,
                VW1.IDCONTATO, 
                VW1.IDESTADO, 
                VW1.DSESTADO, 
                VW1.SGESTADO, 
                VW1.IDSUBESTADO, 
                VW1.DSSUBESTADO, 
                VW1.SGSUBESTADO, 
                VW1.IDPESSOAUSUARIO, 
                VW1.NMPESSOA, 
                TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
                TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
                VW1.IDATENDIMENTOALERTA, 
                VW1.DSMENSAGEM, 
                VW1.IDALERTA, 
                VW1.SGALERTA, 
                VW1.DSALERTA, 
                VW1.NMICONE, 
                VW1.NMCOR, 
                VW1.NRCRITICIDADE, 
                VW1.PATH, 
                VW1.NRTELEFONE, 
                VW1.INDOCUMENTO, 
                0 AS INACS, 
                VW1.INPAUSAATENDIMENTO, 
                TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO, 
                TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO, 
                VW1.IDATENDIMENTOBAIXAHISTORICO, 
                VW1.NMURLDADOS, 
                VW1.DTSOLICITACAOCANCELAMENTO, 
                VW1.DTPRAZOFINALINTERNO, 
                VW1.IDATENDIMENTOSUSPEITO, 
                VW1.IDATENDIMENTOORIGEM,
                VW1.IDATENDIMENTOPR,
                TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
                VW1.NRPROTOCOLOPORTABILIDADE
            FROM 
                ATENDIMENTO.ATENDIMENTOFILAMCUSUARIOWFV01 VW1
            WHERE
                (VW1.SGFLUXOATENDIMENTO = 'MC1'
            AND 
            (
                   (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
                 OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                --//AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                --//AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ))
            OR
            (VW1.SGFLUXOATENDIMENTO <> 'MC1'
            AND 
            (
                    VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
                AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
                 OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
                AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
                --//AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                --//AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ))
        )
        ORDER BY 
            NRCRITICIDADE DESC,IDATENDIMENTOPR;

    EXEC SQL OPEN consultaWFFilaUsuario;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFilaUsuario INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;
        
        if (numeroRegistros < 100)
        {

            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {

                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaUsuario;

    ULOG_END( "proCConsultaWFFilaMCUsuario()" );

    return true;
}

bool proCConsultaWFFilaMCUsuarioQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCUsuarioQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdUfOperadora;
        short indIdClassificacaoTipoLinha;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT 
    	    COUNT(1)
        INTO
    	    :iContador:sContador
	    FROM 
		    ATENDIMENTO.ATENDIMENTOFILAMCUSUARIOWFV01 VW1
            WHERE
                (VW1.SGFLUXOATENDIMENTO = 'MC1'
            AND 
            (
                   (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
                 OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                --//AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                //AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ))
            OR
            (VW1.SGFLUXOATENDIMENTO <> 'MC1'
            AND 
            (
                    VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
                AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
                 OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
                AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
                --//AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                //AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ));

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaMCUsuarioQtd()" );

    return true;
}

bool proCConsultaWFFilaMC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    string stmt;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *nrContaParam;
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;
        int idAlertaFiltro;
        int idTipoCarteiraFiltro;
        int idSegmentacaoFiltro;
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdUfOperadora;
        short indNrContaParam;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdAlertaFiltro;
        short indIdTipoCarteiraFiltro;
        short indIdSegmentacaoFiltro;
        short indIdClassificacaoTipoLinha;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int  idContato;
        int  idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int  idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int  idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];   
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[39];

        short i_idAtendimento;
        short i_idAtendimentoProtocolo;
        short i_idContato;
        short i_idEstado;
        short i_dsEstado;
        short i_sgEstado;
        short i_idSubEstado;
        short i_dsSubEstado;
        short i_sgSubEstado;
        short i_idPessoa;
        short i_nmPessoa;
        short i_dtAbertura;
        short i_dtFechamento;
        short i_idAtendimentoAlerta;
        short i_dsMensagem;
        short i_idAlerta;
        short i_sgAlerta;
        short i_dsAlerta;
        short i_nmIcone;
        short i_nmCor;
        short i_nrCriticidade;
        short i_arvore;
        short i_nrTelefone;
        short i_inDocumento;
        short i_inACS;
        short i_inPausaAtendimento;
        short i_dtSuspeito;
        short i_dtFimPausa;
        short i_idAtendimentoBaixaHistorico;
        short i_nmURLDados;
        short i_dtSolicitacaoCancelamento;
        short i_dtPrazoFinalInterno;
        short i_idAtendimentoSuspeito;
        short i_idAtendimentoOrigem;
        short i_dtJanelaPortout;
        short i_nrProtocoloPortabilidade;

    EXEC SQL END DECLARE SECTION;

    nrContaParam = dados->nrConta;
    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idAlertaFiltro = dados->idAlerta;
    idTipoCarteiraFiltro = dados->idTipoCarteira;
    idSegmentacaoFiltro = dados->idSegmentacao;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indNrContaParam = status->nrConta;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdAlertaFiltro = status->idAlerta;
    indIdTipoCarteiraFiltro = status->idTipoCarteira;
    indIdSegmentacaoFiltro = status->idSegmentacao;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

     stmt =
        "SELECT "
        "    IDATENDIMENTO, "
        "    IDATENDIMENTOPROTOCOLO, "
        "    IDCONTATO, "
        "    IDESTADO, "
        "    DSESTADO, "
        "    SGESTADO, "
        "    IDSUBESTADO, "
        "    DSSUBESTADO, "
        "    SGSUBESTADO, "
        "    IDPESSOAUSUARIOGRUPO, "
        "    NMPESSOA, "
        "    DTABERTURA, "
        "    DTFECHAMENTO, "
        "    IDATENDIMENTOALERTA, "
        "    DSMENSAGEM, "
        "    IDALERTA, "
        "    SGALERTA, "
        "    DSALERTA, "
        "    NMICONE, "
        "    NMCOR, "
        "    NRCRITICIDADE, "
        "    PATH, "
        "    NRTELEFONE, "
        "    INDOCUMENTO, "
        "    INACS, "
        "    INPAUSAATENDIMENTO, "
        "    DTSUSPEITO, "
        "    DTFIMPAUSAATENDIMENTO, "
        "    IDATENDIMENTOBAIXAHISTORICO, "
        "    NMURLDADOS, "
        "    DTSOLICITACAOCANCELAMENTO, "
        "    DTPRAZOFINALINTERNO, "
        "    IDATENDIMENTOSUSPEITO, "
        "    IDATENDIMENTOORIGEM, "
        "    DTJANELAPORTOUT,"
        "    NRPROTOCOLOPORTABILIDADE "
        "FROM "
        "( "
        "    SELECT "
        "        VW1.IDATENDIMENTO, "
        "        VW1.IDATENDIMENTOPROTOCOLO, "
        "        VW1.IDCONTATO, "
        "        VW1.IDESTADO, "
        "        VW1.DSESTADO, "
        "        VW1.SGESTADO, "
        "        VW1.IDSUBESTADO, "
        "        VW1.DSSUBESTADO, "
        "        VW1.SGSUBESTADO, "
        "        VW1.IDPESSOAUSUARIOGRUPO, "
        "        VW1.NMPESSOA, "
        "        TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA, "
        "        TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO, "
        "        VW1.IDATENDIMENTOALERTA, "
        "        VW1.DSMENSAGEM, "
        "        VW1.IDALERTA, "
        "        VW1.SGALERTA, "
        "        VW1.DSALERTA, "
        "        VW1.NMICONE, "
        "        VW1.NMCOR, "
        "        VW1.NRCRITICIDADE, "
        "        VW1.PATH, "
        "        VW1.NRTELEFONE, "
        "        VW1.INDOCUMENTO, "
        "        0 AS INACS, "
        "        VW1.INPAUSAATENDIMENTO, "
        "        TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO, "
        "        TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO, "
        "        VW1.IDATENDIMENTOBAIXAHISTORICO, "
        "        VW1.NMURLDADOS, "
        "        VW1.DTSOLICITACAOCANCELAMENTO, "
        "        VW1.DTPRAZOFINALINTERNO, "
        "        VW1.IDATENDIMENTOSUSPEITO, "
        "        VW1.IDATENDIMENTOORIGEM, "
        "        VW1.IDATENDIMENTOPR, "
        "        TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,"
        "        VW1.NRPROTOCOLOPORTABILIDADE "
        "     FROM "
        "        ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1 "
        "    WHERE "
        "        (VW1.SGFLUXOATENDIMENTO = 'MC1' "
        "    AND "
        "    ( "
        "           (VW1.IDPESSOAUSUARIOATUAL = DECODE( ";
        
        // stmt += idPessoaUsuarioFiltro;
        // stmt += ",0,DECODE(";
        // stmt += idPerfilConsultorAtdFiltro;
        // stmt += ",'ATD',";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += ",VW1.IDPESSOAUSUARIOATUAL),";
        // stmt += idPessoaUsuarioFiltro;
        // stmt += ")";
        // stmt += " OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = ";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += ")";
        // stmt += " AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(";
        // stmt += idFornecedorConsultorAtdFiltro;
        // stmt += ",'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),";
        // stmt += idFornecedorConsultorAtdFiltro;
        // stmt += ")";
        // stmt += " AND VW1.IDPESSOAUSUARIOGRUPO = ";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += " AND (VW1.IDUFOPERADORA = ";
        // stmt += idUfOperadora;
        // stmt += " OR -1 = ";
        // stmt += indIdUfOperadora;
        // stmt += ")";
        // stmt += " AND ROWNUM < 101 ))";


        // stmt += " OR ";
        // stmt += " (VW1.SGFLUXOATENDIMENTO <> 'MC1' ";
        // stmt += " AND ";
        // stmt += " ( ";
        // stmt += " VW1.NRPESOHIERARQUIA <= DECODE( ";
        // stmt += idPerfilConsultorAtdFiltro;
        // stmt += " ,'ATD',VW1.NRPESOHIERARQUIA,";
        // stmt += nrPesoHierarquiaFiltro;
        // stmt += " ) ";
        // stmt += " AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE( ";
        // stmt += idPessoaUsuarioFiltro;
        // stmt += " ,0,DECODE( ";
        // stmt += idPerfilConsultorAtdFiltro;
        // stmt += " ,'ATD',";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += " ,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA) ";
        // stmt += " OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(";
        // stmt += idPessoaUsuarioFiltro;
        // stmt += " ,0,DECODE(";
        // stmt += idPerfilConsultorAtdFiltro;
        // stmt += " ,'ATD',";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += " ,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))";
        // stmt += " AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(";
        // stmt += idPessoaUsuarioFiltro;
        // stmt += " ,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),";
        // stmt += idPessoaUsuarioFiltro;
        // stmt += " ) ";
        // stmt += " AND VW1.IDPESSOAUSUARIOGRUPO = ";
        // stmt += idUsuarioGrupoFiltro;
        // stmt += " AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(";
        // stmt += idFornecedorConsultorAtdFiltro;
        // stmt += " ,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),";
        // stmt += idFornecedorConsultorAtdFiltro;
        // stmt += " ) ";
        // stmt += " AND (VW1.IDUFOPERADORA = ";
        // stmt += idUfOperadora;
        // stmt += " OR -1 = ";
        // stmt += indIdUfOperadora;
        // stmt += " ) ";
        
        /*
        stmt += " AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
        stmt += " AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
        stmt += " AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
        stmt += " AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
        stmt += " AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
        stmt += " AND VW1.IDALERTA = DECODE(:indIdAlertaFiltro,-1,VW1.IDALERTA,:idAlertaFiltro)
        stmt += " AND NVL(VW1.IDTIPOCARTEIRA,0) = DECODE(:indIdTipoCarteiraFiltro,-1,NVL(VW1.IDTIPOCARTEIRA,0),:idTipoCarteiraFiltro)
        stmt += " AND NVL(VW1.IDSEGMENTACAO,0) = DECODE(:indIdSegmentacaoFiltro,-1,NVL(VW1.IDSEGMENTACAO,0),:idSegmentacaoFiltro)
        stmt += " AND NVL(VW1.CDCONTA,0) = DECODE(:indNrContaParam,-1,NVL(VW1.CDCONTA,0),:nrContaParam)
        stmt += " AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
        stmt += " AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
        stmt += " AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
        */
        
        //stmt += " AND ROWNUM < 101 ";
        //stmt += " )) ";


        //stmt += " ) ORDER BY NRCRITICIDADE DESC, IDATENDIMENTOPR";

        //queryChar = stmt.c_str();
        //ULOG( "queryChar [%s]", queryChar );

        //EXEC SQL PREPARE comandoSql FROM :queryChar;
        //EXEC SQL DECLARE consultaWFFila CURSOR FOR comandoSql;
        
        
     /* MELHORIA 22/01/2013 */
    EXEC SQL 
    DECLARE consultaWFFila CURSOR FOR
      SELECT IDATENDIMENTO,
             IDATENDIMENTOPROTOCOLO,
             IDCONTATO,
             IDESTADO,
             DSESTADO,
             SGESTADO,
             IDSUBESTADO,
             DSSUBESTADO,
             SGSUBESTADO,
             IDPESSOAUSUARIOGRUPO,
             NMPESSOA,
             TO_CHAR(DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
             TO_CHAR(DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
             IDATENDIMENTOALERTA,
             DSMENSAGEM,
             IDALERTA,
             SGALERTA,
             DSALERTA,
             NMICONE,
             NMCOR,
             NRCRITICIDADE,
             PATH,
             NRTELEFONE,
             INDOCUMENTO,
             INACS,
             INPAUSAATENDIMENTO,
             TO_CHAR(DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
             TO_CHAR(DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
             IDATENDIMENTOBAIXAHISTORICO,
             NMURLDADOS,
             TO_CHAR(DTSOLICITACAOCANCELAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTSOLICITACAOCANCELAMENTO,
             TO_CHAR(DTPRAZOFINALINTERNO,'DD/MM/YYYY HH24:MI:SS') AS DTPRAZOFINALINTERNO,
             IDATENDIMENTOSUSPEITO,
             IDATENDIMENTOORIGEM,
             TO_CHAR(DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
             NRPROTOCOLOPORTABILIDADE
        FROM (SELECT /*+ FIRST_ROWS(1) NO_CPU_COSTING */
                    VW1.IDATENDIMENTO,
                     VW1.IDCONTATO,
                     VW1.IDATENDIMENTOPR,
                     VW1.NMCOR,
                     VW1.NRCRITICIDADE,
                     VW1.IDESTADO,
                     VW1.DSESTADO,
                     VW1.SGESTADO,
                     VW1.IDSUBESTADO,
                     VW1.DSSUBESTADO,
                     VW1.SGSUBESTADO,
                     VW1.IDPESSOAUSUARIOGRUPO,
                     VW1.DTABERTURA,
                     VW1.PATH,
                     VW1.NRTELEFONE,
                     VW1.INPAUSAATENDIMENTO,
                     VW1.IDATENDIMENTOSUSPEITO,
                     VW1.DTSUSPEITO,
                     VW1.NMURLDADOS,
                     VW1.DTFIMPAUSAATENDIMENTO,
                     VW1.IDGRUPO,
                     VW1.NMPESSOA,
                     VW1.NMLOGINUSUARIO,
                     VW1.INDOCUMENTO,
                     0 AS INACS,
                     VW1.DTFECHAMENTO,
                     VW1.DSANDAMENTOOBSERVACAO,
                     VW1.IDATENDIMENTOBAIXAHISTORICO,
                     VW1.DTSOLICITACAOCANCELAMENTO,
                     VW1.IDATENDIMENTOORIGEM,
                     VW1.DTPRAZOFINALINTERNO,
                     VW1.IDATENDIMENTOALERTA,
                     VW1.DSMENSAGEM,
                     VW1.IDALERTA,
                     VW1.SGALERTA,
                     VW1.DSALERTA,
                     VW1.NMICONE,
                     VW1.IDUFOPERADORA,
                     VW1.IDATENDIMENTOPROTOCOLO,
                     VW1.DTJANELAPORTOUT,
                     VW1.CDCONTA,
                     VW1.IDTIPOCARTEIRA,
                     VW1.IDSEGMENTACAO,
                     VW1.NRPROTOCOLOPORTABILIDADE,
                     VW1.IDCLASSIFICACAOTIPOLINHA,
                     VW1.IDPESSOACONTA,
                     VW1.IDPERFILCONSULTORATD,
                     VW1.IDFORNECEDORCONSULTORATD,
                     VW1.IDSITECONSULTORATD,
                     VW1.SGREGRAENCAMINHAMENTO,
                     VW1.SGFLUXOATENDIMENTO,
                     VW1.IDPESSOAUSUARIOABERTURA,
                     VW1.IDPESSOAUSUARIOATUAL,
                     VW1.NRPESOHIERARQUIA
                FROM ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1
               WHERE NVL(VW1.IDFORNECEDORCONSULTORATD, 'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro, 'VIVO', NVL(VW1.IDFORNECEDORCONSULTORATD, 'VIVO'), :idFornecedorConsultorAtdFiltro)
                 AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                 AND VW1.IDUFOPERADORA = DECODE(:indIdUfOperadora, -1, VW1.IDUFOPERADORA, :idUfOperadora)
                 AND VW1.IDGRUPO = DECODE(:indIdGrupo, -1, VW1.IDGRUPO, :idGrupoFiltro)
                 AND VW1.IDATENDIMENTO = DECODE(:indIdAtendimento, -1, VW1.IDATENDIMENTO, :idAtendimentoFiltro)
                 AND VW1.IDCONTATO = DECODE(:indIdContato, -1, VW1.IDCONTATO, :idContatoFiltro)
                 AND VW1.IDESTADO = DECODE(:indIdEstado, -1, VW1.IDESTADO, :idEstadoFiltro)
                 AND VW1.IDSUBESTADO = DECODE(:indIdSubEstado, -1, VW1.IDSUBESTADO, :idSubEstadoFiltro)
                 AND VW1.IDALERTA = DECODE(:indIdAlertaFiltro, -1, VW1.IDALERTA, :idAlertaFiltro)
                 AND NVL(VW1.IDTIPOCARTEIRA, 0) = DECODE(:indIdTipoCarteiraFiltro, -1, NVL(VW1.IDTIPOCARTEIRA, 0), :idTipoCarteiraFiltro)
                 AND NVL(VW1.IDSEGMENTACAO, 0) = DECODE(:indIdSegmentacaoFiltro, -1, NVL(VW1.IDSEGMENTACAO, 0), :idSegmentacaoFiltro)
                 AND NVL(VW1.CDCONTA, 0) = DECODE(:indNrContaParam, -1, NVL(VW1.CDCONTA, 0), :nrContaParam)
                 AND VW1.IDCLASSIFICACAOTIPOLINHA = DECODE(:indIdClassificacaoTipoLinha, -1, VW1.IDCLASSIFICACAOTIPOLINHA, :idClassificacaoTipoLinhaFiltro)
                 AND (TRUNC(VW1.DTABERTURA) >= TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY')
                   OR  -1 = :indDtAberturaInicio)
                 AND (TRUNC(VW1.DTABERTURA) <= TO_DATE(:dtAberturaFimFiltro, 'DD/MM/YYYY')
                   OR  -1 = :indDtAberturaFim)
                 AND ((VW1.SGFLUXOATENDIMENTO = 'MC1'
                   AND (VW1.IDPESSOAUSUARIOATUAL =
                            DECODE(:idPessoaUsuarioFiltro, 0, DECODE(:idPerfilConsultorAtdFiltro, 'ATD', :idUsuarioGrupoFiltro, VW1.IDPESSOAUSUARIOATUAL), :idPessoaUsuarioFiltro)
                     OR  VW1.IDPESSOAUSUARIOATUAL IS NULL))
                   OR  (VW1.SGFLUXOATENDIMENTO <> 'MC1'
                    AND VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro, 'ATD', VW1.NRPESOHIERARQUIA, :nrPesoHierarquiaFiltro)
                    AND (VW1.IDPESSOAUSUARIOABERTURA =
                             DECODE(:idPessoaUsuarioFiltro, 0, DECODE(:idPerfilConsultorAtdFiltro, 'ATD', :idUsuarioGrupoFiltro, VW1.IDPESSOAUSUARIOABERTURA), VW1.IDPESSOAUSUARIOABERTURA)
                      OR  NVL(VW1.IDPESSOAUSUARIOATUAL, 0) =
                              DECODE
                              (
                                  :idPessoaUsuarioFiltro,
                                  0, DECODE(:idPerfilConsultorAtdFiltro, 'ATD', :idUsuarioGrupoFiltro, NVL(VW1.IDPESSOAUSUARIOATUAL, 0)),
                                  NVL(VW1.IDPESSOAUSUARIOATUAL, 0)
                              ))
                    AND NVL(VW1.IDPESSOAUSUARIOATUAL, 0) = DECODE(:idPessoaUsuarioFiltro, 0, NVL(VW1.IDPESSOAUSUARIOATUAL, 0), :idPessoaUsuarioFiltro)))
                 AND ROWNUM < 101)
    ORDER BY NRCRITICIDADE DESC,
             IDATENDIMENTOPR;



    /*
        Incidência 2984/3038
        A pesquisa fica limitada em 100 registros sem nenhuma ordem
        Apenas os 100 que vão para a tela que são ordenados
    */
    /*
    EXEC SQL 
    DECLARE consultaWFFila CURSOR FOR
        SELECT
            IDATENDIMENTO,
            IDATENDIMENTOPROTOCOLO,
            IDCONTATO, 
            IDESTADO, 
            DSESTADO, 
            SGESTADO, 
            IDSUBESTADO, 
            DSSUBESTADO, 
            SGSUBESTADO, 
            IDPESSOAUSUARIOGRUPO, 
            NMPESSOA, 
            DTABERTURA, 
            DTFECHAMENTO, 
            IDATENDIMENTOALERTA, 
            DSMENSAGEM, 
            IDALERTA, 
            SGALERTA, 
            DSALERTA, 
            NMICONE, 
            NMCOR, 
            NRCRITICIDADE, 
            PATH, 
            NRTELEFONE, 
            INDOCUMENTO, 
            INACS, 
            INPAUSAATENDIMENTO, 
            DTSUSPEITO, 
            DTFIMPAUSAATENDIMENTO, 
            IDATENDIMENTOBAIXAHISTORICO, 
            NMURLDADOS, 
            DTSOLICITACAOCANCELAMENTO, 
            DTPRAZOFINALINTERNO, 
            IDATENDIMENTOSUSPEITO, 
            IDATENDIMENTOORIGEM,
            DTJANELAPORTOUT,
            NRPROTOCOLOPORTABILIDADE
        FROM
        (
            SELECT 
                VW1.IDATENDIMENTO, 
                VW1.IDATENDIMENTOPROTOCOLO,
                VW1.IDCONTATO, 
                VW1.IDESTADO, 
                VW1.DSESTADO, 
                VW1.SGESTADO, 
                VW1.IDSUBESTADO, 
                VW1.DSSUBESTADO, 
                VW1.SGSUBESTADO, 
                VW1.IDPESSOAUSUARIOGRUPO, 
                VW1.NMPESSOA, 
                TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA, 
                TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO, 
                VW1.IDATENDIMENTOALERTA, 
                VW1.DSMENSAGEM, 
                VW1.IDALERTA, 
                VW1.SGALERTA, 
                VW1.DSALERTA, 
                VW1.NMICONE, 
                VW1.NMCOR, 
                VW1.NRCRITICIDADE, 
                VW1.PATH, 
                VW1.NRTELEFONE, 
                VW1.INDOCUMENTO, 
                0 AS INACS, 
                VW1.INPAUSAATENDIMENTO, 
                TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO, 
                TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO, 
                VW1.IDATENDIMENTOBAIXAHISTORICO, 
                VW1.NMURLDADOS, 
                VW1.DTSOLICITACAOCANCELAMENTO, 
                VW1.DTPRAZOFINALINTERNO, 
                VW1.IDATENDIMENTOSUSPEITO, 
                VW1.IDATENDIMENTOORIGEM,
                VW1.IDATENDIMENTOPR,
                TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
                VW1.NRPROTOCOLOPORTABILIDADE
             FROM 
                ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1
            WHERE
                (VW1.SGFLUXOATENDIMENTO = 'MC1'
            AND 
            (
                   (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
                 OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
                AND VW1.IDALERTA = DECODE(:indIdAlertaFiltro,-1,VW1.IDALERTA,:idAlertaFiltro)
                AND NVL(VW1.IDTIPOCARTEIRA,0) = DECODE(:indIdTipoCarteiraFiltro,-1,NVL(VW1.IDTIPOCARTEIRA,0),:idTipoCarteiraFiltro)
                AND NVL(VW1.IDSEGMENTACAO,0) = DECODE(:indIdSegmentacaoFiltro,-1,NVL(VW1.IDSEGMENTACAO,0),:idSegmentacaoFiltro)
                AND NVL(VW1.CDCONTA,0) = DECODE(:indNrContaParam,-1,NVL(VW1.CDCONTA,0),:nrContaParam)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                //AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ))
            OR
            (VW1.SGFLUXOATENDIMENTO <> 'MC1'
            AND 
            (
                    VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
                AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
                 OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
                AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
                AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
                AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
                AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
                AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
                AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
                AND VW1.IDALERTA = DECODE(:indIdAlertaFiltro,-1,VW1.IDALERTA,:idAlertaFiltro)
                AND NVL(VW1.IDTIPOCARTEIRA,0) = DECODE(:indIdTipoCarteiraFiltro,-1,NVL(VW1.IDTIPOCARTEIRA,0),:idTipoCarteiraFiltro)
                AND NVL(VW1.IDSEGMENTACAO,0) = DECODE(:indIdSegmentacaoFiltro,-1,NVL(VW1.IDSEGMENTACAO,0),:idSegmentacaoFiltro)
                AND NVL(VW1.CDCONTA,0) = DECODE(:indNrContaParam,-1,NVL(VW1.CDCONTA,0),:nrContaParam)
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND (TRUNC(VW1.DTABERTURA)>=TO_DATE(:dtAberturaInicioFiltro, 'DD/MM/YYYY' ) OR -1 = :indDtAberturaInicio)
                AND (TRUNC(VW1.DTABERTURA)<=TO_DATE(:dtAberturaFimFiltro,'DD/MM/YYYY') OR -1 = :indDtAberturaFim)
                //AND VW1.IDPESSOACONTA IS NULL
                AND ROWNUM < 101
            ))
        )
        ORDER BY
            NRCRITICIDADE DESC, IDATENDIMENTOPR;
        
    */

    EXEC SQL OPEN consultaWFFila;
    while (true)
    {
        i_idAtendimento =
        i_idAtendimentoProtocolo =
        i_idContato =
        i_idEstado =
        i_dsEstado =
        i_sgEstado =
        i_idSubEstado =
        i_dsSubEstado =
        i_sgSubEstado =
        i_idPessoa =
        i_nmPessoa =
        i_dtAbertura =
        i_dtFechamento =
        i_idAtendimentoAlerta =
        i_dsMensagem =
        i_idAlerta =
        i_sgAlerta =
        i_dsAlerta =
        i_nmIcone =
        i_nmCor =
        i_nrCriticidade =
        i_arvore =
        i_nrTelefone =
        i_inDocumento =
        i_inACS =
        i_inPausaAtendimento =
        i_dtSuspeito =
        i_dtFimPausa =
        i_idAtendimentoBaixaHistorico =
        i_nmURLDados =
        i_dtSolicitacaoCancelamento =
        i_dtPrazoFinalInterno =
        i_idAtendimentoSuspeito =
        i_dtJanelaPortout =
        i_nrProtocoloPortabilidade =
        i_idAtendimentoOrigem = -1;

        EXEC SQL FETCH consultaWFFila INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(idAtendimentoProtocolo, i_idAtendimentoProtocolo);
            CONVIND(dsEstado, i_dsEstado);
            CONVIND(sgEstado, i_sgEstado);
            CONVIND(dsSubEstado, i_dsSubEstado);
            CONVIND(sgSubEstado, i_sgSubEstado);
            CONVIND(nmPessoa, i_nmPessoa);
            CONVIND(dtAbertura, i_dtAbertura);
            CONVIND(dtFechamento, i_dtFechamento);
            CONVIND(dsMensagem, i_dsMensagem);
            CONVIND(sgAlerta, i_sgAlerta);
            CONVIND(dsAlerta, i_dsAlerta);
            CONVIND(nmIcone, i_nmIcone);
            CONVIND(nmCor, i_nmCor);
            CONVIND(arvore, i_arvore);
            CONVIND(nrTelefone, i_nrTelefone);
            CONVIND(inDocumento, i_inDocumento);
            CONVIND(inACS, i_inACS);
            CONVIND(dtSuspeito, i_dtSuspeito);
            CONVIND(dtFimPausa, i_dtFimPausa);
            CONVIND(nmURLDados, i_nmURLDados);
            CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
            CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
            CONVIND(nrCriticidade, i_nrCriticidade);
            CONVIND(dtJanelaPortout, i_dtJanelaPortout);
            CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

            if (i_idAtendimentoBaixaHistorico == -1)
            {
                idAtendimentoBaixaHistorico = 0;
            }
            
            saida->createTag("AtendimentoFilaVO");
                
                saida->addItem("operacaoWorkflow","");
                
                saida->createTag("AtendimentoVO");
                
                    saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                    saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                    saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                    saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                    saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                    saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                    saida->addItem("inDocumento", (char*)inDocumento.arr);
                    saida->addItem("inACS", (char*)inACS.arr);
                    saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                    saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                    saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                    saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                    saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                    saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                    saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);
                        
                    saida->createTag("WFEstadoVO");
                
                        saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                        saida->addItem("dsEstado", (char*)dsEstado.arr);
                        saida->addItem("sgEstado", (char*)sgEstado.arr);
            
                    saida->closeTag();
                
                    saida->createTag("WFSubEstadoVO");
                
                        saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                        saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                        saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                
                    saida->closeTag();
                
                    if (i_idAlerta != -1)
                    {
                        saida->createTag("AlertaVO");
                        
                            saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                            saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                            saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                            saida->addItem("nmIcone", (char*)nmIcone.arr);
                            saida->addItem("nmCor", (char*)nmCor.arr);
                            saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                        
                        saida->closeTag();
                    }
                
                    saida->createTag("ns2:ArvoreAtendimentoVO");
                
                        saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                        saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                
                    saida->closeTag();
                
                    saida->createTag("ns3:UsuarioVIVO");
                    
                        saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                        saida->addItem("ns3:nmLoginUsuario", "");
                        saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                        saida->addItem("ns3:sgSenhaUsuario", "");
                
                    saida->closeTag();
                            
                saida->closeTag();
                
            saida->closeTag();
        }
    }
    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFila;

    ULOG_END( "proCConsultaWFFilaMC()" );

    return true;
}

bool proCConsultaWFFilaMCQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int  idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int  idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        int  idGrupoFiltro;
        long idAtendimentoFiltro;
        int  idContatoFiltro;
        int  idEstadoFiltro;
        int  idSubEstadoFiltro;
        char dtAberturaInicioFiltro[11];
        char dtAberturaFimFiltro[11];
        int  idUfOperadora;
        char *idClassificacaoTipoLinhaFiltro;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        short indIdUfOperadora;
        short indIdGrupo;
        short indIdAtendimento;
        short indIdContato;
        short indIdEstado;
        short indIdSubEstado;
        short indDtAberturaInicio;
        short indDtAberturaFim;
        short indIdClassificacaoTipoLinha;

        int iContador;
        short sContador;

    EXEC SQL END DECLARE SECTION;

    idGrupoFiltro = dados->idGrupo;
    idAtendimentoFiltro = dados->idAtendimento;
    idContatoFiltro = dados->idContato;
    idEstadoFiltro = dados->idEstado;
    idSubEstadoFiltro = dados->idSubEstado;
    strcpy(dtAberturaInicioFiltro, dados->dtAberturaInicio);
    strcpy(dtAberturaFimFiltro, dados->dtAberturaFim);
    idUfOperadora = dados->idUfOperadora;
    idClassificacaoTipoLinhaFiltro = dados->idClassificacaoTipoLinha;

    indIdGrupo = status->idGrupo;
    indIdAtendimento = status->idAtendimento;
    indIdContato = status->idContato;
    indIdEstado = status->idEstado;
    indIdSubEstado = status->idSubEstado;
    indDtAberturaInicio = status->dtAberturaInicio;
    indDtAberturaFim = status->dtAberturaFim;
    indIdUfOperadora = status->idUfOperadora;
    indIdClassificacaoTipoLinha = status->idClassificacaoTipoLinha;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    if( indIdEstado != -1 || indIdSubEstado != -1 )
    {
    	//Se existir indIdEstado ou indIdSubEstado então realiza a pesquisa pesada com mais parametros
	    EXEC SQL 
		    SELECT 
			    COUNT(1)
		    INTO
			    :iContador:sContador
		    FROM 
			    ATENDIMENTO.ATENDIMENTOFILAMCWFV01 VW1
            WHERE
                (VW1.SGFLUXOATENDIMENTO = 'MC1'
            AND 
            (
                   (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
                 OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
		        AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		        AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
		        AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		        AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
		        AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
		        AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND TRUNC(VW1.DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'YYYYMMDD'))
                AND TRUNC(VW1.DTABERTURA) <= DECODE(:indDtAberturaFim ,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'YYYYMMDD'))
                //AND VW1.IDPESSOACONTA IS NULL;
            ))
            OR
            (VW1.SGFLUXOATENDIMENTO <> 'MC1'
            AND 
            (
                    VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
                AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
                 OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
                AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
                AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
		        AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		        AND (VW1.IDGRUPO = :idGrupoFiltro OR -1=:indIdGrupo)
		        AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		        AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
		        AND (VW1.IDESTADO = :idEstadoFiltro OR -1=:indIdEstado)
		        AND (VW1.IDSUBESTADO = :idSubEstadoFiltro OR -1=:indIdSubEstado) 
                AND (VW1.IDCLASSIFICACAOTIPOLINHA = :idClassificacaoTipoLinhaFiltro OR -1=:indIdClassificacaoTipoLinha)
                AND TRUNC(VW1.DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'YYYYMMDD'))
                AND TRUNC(VW1.DTABERTURA) <= DECODE(:indDtAberturaFim ,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'YYYYMMDD'))
                //AND VW1.IDPESSOACONTA IS NULL;
            ));
            //AND VW1.IDPESSOACONTA IS NULL;
	}
	else
	{
    	//Se não existir indIdEstado ou indIdSubEstado então realiza a pesquisa menos pesada com menos parametros
        // ==> Remodelagem Atendimento--Fev/2007--Cassio 
        // Esta rotina absorveu a antiga view ATENDIMENTO.ATENDIMENTOFILAWFV02. Esta view só era usada neste ponto do
        // sistema e por este motivo foi absorvida aqui e deletada do banco de dados. - Fev/2007 - Cassio.
	    EXEC SQL 
		    SELECT 
			    COUNT(1)
		    INTO
			    :iContador:sContador
            FROM
                ATENDIMENTO.ATENDIMENTOPRIORIZACAO VW1,
                ACESSO.USUARIOGRUPO USUARIOGRUPO
            WHERE
                (VW1.SGFLUXOATENDIMENTO = 'MC1'
            AND 
            (
                   (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
                 OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
                AND VW1.SGREGRAENCAMINHAMENTO = 'MC'
                AND VW1.IDGRUPOATUAL = USUARIOGRUPO.IDGRUPO
                AND VW1.SGTIPOPORTABILIDADE IS NULL
		        AND USUARIOGRUPO.IDPESSOAUSUARIO = :idUsuarioGrupoFiltro
		        AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		        AND (VW1.IDGRUPOABERTURA = :idGrupoFiltro OR -1=:indIdGrupo)
		        AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		        AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND TRUNC(VW1.DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'YYYYMMDD'))
                AND TRUNC(VW1.DTABERTURA) <= DECODE(:indDtAberturaFim ,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'YYYYMMDD'))
            ))
            OR
            (VW1.SGFLUXOATENDIMENTO <> 'MC1'
            AND 
            (
                    VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
                AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
                 OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
                AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
                AND USUARIOGRUPO.IDPESSOAUSUARIO = :idUsuarioGrupoFiltro
                AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
                AND VW1.SGREGRAENCAMINHAMENTO = 'MC'
                AND VW1.IDGRUPOATUAL = USUARIOGRUPO.IDGRUPO
                AND VW1.SGTIPOPORTABILIDADE IS NULL
		        AND USUARIOGRUPO.IDPESSOAUSUARIO = :idUsuarioGrupoFiltro
		        AND (VW1.IDUFOPERADORA = :idUfOperadora OR -1=:indIdUfOperadora)
		        AND (VW1.IDGRUPOABERTURA = :idGrupoFiltro OR -1=:indIdGrupo)
		        AND (VW1.IDATENDIMENTO = :idAtendimentoFiltro OR -1=:indIdAtendimento)
		        AND (VW1.IDCONTATO = :idContatoFiltro OR -1=:indIdContato)
                AND TRUNC(VW1.DTABERTURA) >= DECODE(:indDtAberturaInicio,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaInicioFiltro,'YYYYMMDD'))
                AND TRUNC(VW1.DTABERTURA) <= DECODE(:indDtAberturaFim ,-1,TRUNC(VW1.DTABERTURA),TO_DATE(:dtAberturaFimFiltro,'YYYYMMDD'))
                //AND VW1.IDPESSOACONTA IS NULL;
            ));
	}

    saida->addItem("totalRegistros", iContador);
    saida->addItem("nrRegistros", 0);

    ULOG_END( "proCConsultaWFFilaMCQtd()" );

    return true;
}

bool proCConsultaWFFilaMCPorProtocoloMC(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorProtocoloMC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *idProtocoloFiltro = dados->nrProtocoloPortabilidade;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        long idAtendimento;
        VARCHAR idAtendimentoProtocolo[39];
        int idContato;
        int idEstado;
        VARCHAR dsEstado[256];
        VARCHAR sgEstado[256];
        int idSubEstado;
        VARCHAR dsSubEstado[256];
        VARCHAR sgSubEstado[256];
        long idPessoa;
        VARCHAR nmPessoa[256];
        VARCHAR dtAbertura[22];
        VARCHAR dtFechamento[22];
        long idAtendimentoAlerta;
        VARCHAR dsMensagem[256];
        int idAlerta;
        VARCHAR sgAlerta[256];
        VARCHAR dsAlerta[256];
        VARCHAR nmIcone[256];
        VARCHAR nmCor[256];
        VARCHAR nrCriticidade[15];
        VARCHAR arvore[2001];
        VARCHAR nrTelefone[256];
        VARCHAR inDocumento[256];
        VARCHAR inACS[256];
        int inPausaAtendimento;
        VARCHAR dtSuspeito[32];
        VARCHAR dtFimPausa[32];
        long idAtendimentoBaixaHistorico;
        VARCHAR nmURLDados[256];
        VARCHAR dtSolicitacaoCancelamento[32];
        VARCHAR dtPrazoFinalInterno[32];
        long idAtendimentoSuspeito;
        long idAtendimentoOrigem;
        VARCHAR dtJanelaPortout[32];
        VARCHAR nrProtocoloPortabilidade[32];

        short i_idAtendimento = -1;
        short i_idAtendimentoProtocolo = -1;
        short i_idContato = -1;
        short i_idEstado = -1;
        short i_dsEstado = -1;
        short i_sgEstado = -1;
        short i_idSubEstado = -1;
        short i_dsSubEstado = -1;
        short i_sgSubEstado = -1;
        short i_idPessoa = -1;
        short i_nmPessoa = -1;
        short i_dtAbertura = -1;
        short i_dtFechamento = -1;
        short i_idAtendimentoAlerta = -1;
        short i_dsMensagem = -1;
        short i_idAlerta = -1;
        short i_sgAlerta = -1;
        short i_dsAlerta = -1;
        short i_nmIcone = -1;
        short i_nmCor = -1;
        short i_nrCriticidade = -1;
        short i_arvore = -1;
        short i_nrTelefone = -1;
        short i_inDocumento = -1;
        short i_inACS = -1;
        short i_inPausaAtendimento = -1;
        short i_dtSuspeito = -1;
        short i_dtFimPausa = -1;
        short i_idAtendimentoBaixaHistorico = -1;
        short i_nmURLDados = -1;
        short i_dtSolicitacaoCancelamento = -1;
        short i_dtPrazoFinalInterno = -1;
        short i_idAtendimentoSuspeito = -1;
        short i_idAtendimentoOrigem = -1;
        short i_dtJanelaPortout = -1;
        short i_nrProtocoloPortabilidade = -1;

    EXEC SQL END DECLARE SECTION;

    ULOG( "idUsuarioGrupoFiltro='%d'",idUsuarioGrupoFiltro );
    ULOG( "idProtocoloFiltro='%s'",idProtocoloFiltro );

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaWFFilaProcPO CURSOR FOR
        SELECT
            VW1.IDATENDIMENTO,
            VW1.IDATENDIMENTOPROTOCOLO,
            VW1.IDCONTATO,
            VW1.IDESTADO,
            VW1.DSESTADO,
            VW1.SGESTADO,
            VW1.IDSUBESTADO,
            VW1.DSSUBESTADO,
            VW1.SGSUBESTADO,
            VW1.IDPESSOAUSUARIOGRUPO,
            VW1.NMPESSOA,
            TO_CHAR(VW1.DTABERTURA,'DD/MM/YYYY HH24:MI:SS') AS DTABERTURA,
            TO_CHAR(VW1.DTFECHAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFECHAMENTO,
            VW1.IDATENDIMENTOALERTA,
            VW1.DSMENSAGEM,
            VW1.IDALERTA,
            VW1.SGALERTA,
            VW1.DSALERTA,
            VW1.NMICONE,
            VW1.NMCOR,
            VW1.NRCRITICIDADE,
            VW1.PATH,
            VW1.NRTELEFONE,
            VW1.INDOCUMENTO,
            0 AS INACS,
            VW1.INPAUSAATENDIMENTO,
            TO_CHAR(VW1.DTSUSPEITO,'DD/MM/YYYY HH24:MI:SS') AS DTSUSPEITO,
            TO_CHAR(VW1.DTFIMPAUSAATENDIMENTO,'DD/MM/YYYY HH24:MI:SS') AS DTFIMPAUSAATENDIMENTO,
            VW1.IDATENDIMENTOBAIXAHISTORICO,
            VW1.NMURLDADOS,
            VW1.DTSOLICITACAOCANCELAMENTO,
            VW1.DTPRAZOFINALINTERNO,
            VW1.IDATENDIMENTOSUSPEITO,
            VW1.IDATENDIMENTOORIGEM,
            TO_CHAR(VW1.DTJANELAPORTOUT,'DD/MM/YYYY HH24:MI:SS') AS DTJANELAPORTOUT,
            VW1.NRPROTOCOLOPORTABILIDADE
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.NRPROTOCOLOPORTABILIDADE = :idProtocoloFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.NRPROTOCOLOPORTABILIDADE = :idProtocoloFiltro
            //AND VW1.IDPESSOACONTA IS NULL;
        ));

    EXEC SQL OPEN consultaWFFilaProcPO;

    while (true)
    {
        i_idAtendimento = 
        i_idAtendimentoProtocolo = 
        i_idContato = 
        i_idEstado = 
        i_dsEstado = 
        i_sgEstado = 
        i_idSubEstado = 
        i_dsSubEstado = 
        i_sgSubEstado = 
        i_idPessoa = 
        i_nmPessoa = 
        i_dtAbertura = 
        i_dtFechamento = 
        i_idAtendimentoAlerta = 
        i_dsMensagem = 
        i_idAlerta = 
        i_sgAlerta = 
        i_dsAlerta = 
        i_nmIcone = 
        i_nmCor = 
        i_nrCriticidade = 
        i_arvore = 
        i_nrTelefone = 
        i_inDocumento = 
        i_inACS = 
        i_inPausaAtendimento = 
        i_dtSuspeito = 
        i_dtFimPausa = 
        i_idAtendimentoBaixaHistorico = 
        i_nmURLDados = 
        i_dtSolicitacaoCancelamento = 
        i_dtPrazoFinalInterno = 
        i_idAtendimentoSuspeito = 
        i_idAtendimentoOrigem = 
        i_nrProtocoloPortabilidade =
        i_dtJanelaPortout = -1;

        EXEC SQL FETCH consultaWFFilaProcPO INTO
            :idAtendimento:i_idAtendimento,
            :idAtendimentoProtocolo:i_idAtendimentoProtocolo,
            :idContato:i_idContato,
            :idEstado:i_idEstado,
            :dsEstado:i_dsEstado,
            :sgEstado:i_sgEstado,
            :idSubEstado:i_idSubEstado,
            :dsSubEstado:i_dsSubEstado,
            :sgSubEstado:i_sgSubEstado,
            :idPessoa:i_idPessoa,
            :nmPessoa:i_nmPessoa,
            :dtAbertura:i_dtAbertura,
            :dtFechamento:i_dtFechamento,
            :idAtendimentoAlerta:i_idAtendimentoAlerta,
            :dsMensagem:i_dsMensagem,
            :idAlerta:i_idAlerta,
            :sgAlerta:i_sgAlerta,
            :dsAlerta:i_dsAlerta,
            :nmIcone:i_nmIcone,
            :nmCor:i_nmCor,
            :nrCriticidade:i_nrCriticidade,
            :arvore:i_arvore,
            :nrTelefone:i_nrTelefone,
            :inDocumento:i_inDocumento,
            :inACS:i_inACS,
            :inPausaAtendimento:i_inPausaAtendimento,
            :dtSuspeito:i_dtSuspeito,
            :dtFimPausa:i_dtFimPausa,
            :idAtendimentoBaixaHistorico:i_idAtendimentoBaixaHistorico,
            :nmURLDados:i_nmURLDados,
            :dtSolicitacaoCancelamento:i_dtSolicitacaoCancelamento,
            :dtPrazoFinalInterno:i_dtPrazoFinalInterno,
            :idAtendimentoSuspeito:i_idAtendimentoSuspeito,
            :idAtendimentoOrigem:i_idAtendimentoOrigem,
            :dtJanelaPortout:i_dtJanelaPortout,
            :nrProtocoloPortabilidade:i_nrProtocoloPortabilidade;

        totalRegistros++;

        numeroRegistros++;

        CONVIND(dsEstado, i_dsEstado);
        CONVIND(idAtendimentoProtocolo,i_idAtendimentoProtocolo);
        CONVIND(sgEstado, i_sgEstado);
        CONVIND(dsSubEstado, i_dsSubEstado);
        CONVIND(sgSubEstado, i_sgSubEstado);
        CONVIND(nmPessoa, i_nmPessoa);
        CONVIND(dtAbertura, i_dtAbertura);
        CONVIND(dtFechamento, i_dtFechamento);
        CONVIND(dsMensagem, i_dsMensagem);
        CONVIND(sgAlerta, i_sgAlerta);
        CONVIND(dsAlerta, i_dsAlerta);
        CONVIND(nmIcone, i_nmIcone);
        CONVIND(nmCor, i_nmCor);
        CONVIND(arvore, i_arvore);
        CONVIND(nrTelefone, i_nrTelefone);
        CONVIND(inDocumento, i_inDocumento);
        CONVIND(inACS, i_inACS);
        CONVIND(dtSuspeito, i_dtSuspeito);
        CONVIND(dtFimPausa, i_dtFimPausa);
        CONVIND(nmURLDados, i_nmURLDados);
        CONVIND(dtSolicitacaoCancelamento, i_dtSolicitacaoCancelamento);
        CONVIND(dtPrazoFinalInterno, i_dtPrazoFinalInterno);
        CONVIND(nrCriticidade, i_nrCriticidade);
        CONVIND(dtJanelaPortout, i_dtJanelaPortout);
        CONVIND(nrProtocoloPortabilidade,i_nrProtocoloPortabilidade);

        if (i_idAtendimentoBaixaHistorico == -1)
        {
            idAtendimentoBaixaHistorico = 0;
        }

        saida->createTag("AtendimentoFilaVO");
            saida->addItem("operacaoWorkflow","");
            saida->createTag("AtendimentoVO");
                saida->addItem("idAtendimento", CONVLONG(idAtendimento,i_idAtendimento));
                saida->addItem("nrProtocolo", (char*)idAtendimentoProtocolo.arr);
                saida->addItem("dtAbertura", (char*)dtAbertura.arr);
                saida->addItem("dtJanelaPortout", (char*)dtJanelaPortout.arr);
                saida->addItem("dtFechamento", (char*)dtFechamento.arr);
                saida->addItem("nrTelefone", (char*)nrTelefone.arr);
                saida->addItem("inDocumento", (char*)inDocumento.arr);
                saida->addItem("inACS", (char*)inACS.arr);
                saida->addItem("inPausaAtendimento", CONVINT(inPausaAtendimento,i_inPausaAtendimento));
                saida->addItem("dtSuspeito", (char*)dtSuspeito.arr);
                saida->addItem("dtFimPausaAtendimento", (char*)dtFimPausa.arr);
                saida->addItem("idAtendimentoBaixaHistorico", idAtendimentoBaixaHistorico);
                saida->addItem("nmURLDados", (char*)nmURLDados.arr);
                saida->addItem("dtSolicitacaoCancelamento", (char*)dtSolicitacaoCancelamento.arr);
                saida->addItem("nrProtocoloPortabilidade", (char*)nrProtocoloPortabilidade.arr);

                saida->createTag("WFEstadoVO");
                    saida->addItem("idEstado", CONVINT(idEstado,i_idEstado));
                    saida->addItem("dsEstado", (char*)dsEstado.arr);
                    saida->addItem("sgEstado", (char*)sgEstado.arr);
                saida->closeTag();
                saida->createTag("WFSubEstadoVO");
                    saida->addItem("idSubEstado", CONVINT(idSubEstado,i_idSubEstado));
                    saida->addItem("dsSubEstado", (char*)dsSubEstado.arr);
                    saida->addItem("sgSubEstado", (char*)sgSubEstado.arr);
                saida->closeTag();
                if (i_idAlerta != -1)
                {
                    saida->createTag("AlertaVO");
                        saida->addItem("idAlerta", CONVINT(idAlerta,i_idAlerta));
                        saida->addItem("dsAlerta", (char*)dsAlerta.arr);
                        saida->addItem("sgAlerta", (char*)sgAlerta.arr);
                        saida->addItem("nmIcone", (char*)nmIcone.arr);
                        saida->addItem("nmCor", (char*)nmCor.arr);
                        saida->addItem("nrCriticidade", (char*)nrCriticidade.arr);
                    saida->closeTag();
                }
                saida->createTag("ns2:ArvoreAtendimentoVO");
                    saida->addItem("ns2:idContato", CONVINT(idContato,i_idContato));
                    saida->addItem("ns2:descricaoCompleta", (char*)arvore.arr);
                saida->closeTag();
                saida->createTag("ns3:UsuarioVIVO");
                    saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
                    saida->addItem("ns3:nmLoginUsuario", "");
                    saida->addItem("ns3:nmNome", (char*)nmPessoa.arr);
                    saida->addItem("ns3:sgSenhaUsuario", "");
                saida->closeTag();
            saida->closeTag();
        saida->closeTag();
    } // while (true)

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFFilaProcPO;

    ULOG_END( "proCConsultaWFFilaMCPorProtocoloMC()" );

    return true;
}

bool proCConsultaWFFilaMCPorProtocoloMCQtd(st_AtendimentoFila* dados, st_vlAtendimentoFila* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFFilaMCPorProtocoloMCQtd()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idUsuarioGrupoFiltro = dados->idUsuarioGrupo; // usuário web
        int idPessoaUsuarioFiltro = dados->idPessoaUsuario; // usuário do combo de lista de usuários
        char *idProtocoloFiltro = dados->nrProtocoloPortabilidade;

        const char *nrPesoHierarquiaFiltro = dados->nrPesoHierarquia;
        const char *idFornecedorConsultorAtdFiltro = dados->idFornecedorConsultorAtd;
        const char *idPerfilConsultorAtdFiltro = dados->idPerfilConsultorAtd==0?"-1":dados->idPerfilConsultorAtd;

        int iContador;
        short sContador;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :iContador:sContador
        FROM
            ATENDIMENTO.ATENDIMENTOFILAMCTODOSWFV01 VW1
        WHERE
            (VW1.SGFLUXOATENDIMENTO = 'MC1'
        AND 
        (
               (VW1.IDPESSOAUSUARIOATUAL = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOATUAL),:idPessoaUsuarioFiltro)
             OR VW1.IDPESSOAUSUARIOATUAL IS NULL AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro )
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND VW1.NRPROTOCOLOPORTABILIDADE = :idProtocoloFiltro
        ))
        OR
        (VW1.SGFLUXOATENDIMENTO <> 'MC1'
        AND 
        (
                VW1.NRPESOHIERARQUIA <= DECODE(:idPerfilConsultorAtdFiltro,'ATD',VW1.NRPESOHIERARQUIA,:nrPesoHierarquiaFiltro)
            AND (VW1.IDPESSOAUSUARIOABERTURA = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,VW1.IDPESSOAUSUARIOABERTURA),VW1.IDPESSOAUSUARIOABERTURA)
             OR NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,DECODE(:idPerfilConsultorAtdFiltro,'ATD',:idUsuarioGrupoFiltro,NVL(VW1.IDPESSOAUSUARIOATUAL,0)),NVL(VW1.IDPESSOAUSUARIOATUAL,0)))
            AND NVL(VW1.IDPESSOAUSUARIOATUAL,0) = DECODE(:idPessoaUsuarioFiltro,0,NVL(VW1.IDPESSOAUSUARIOATUAL,0),:idPessoaUsuarioFiltro)
            AND VW1.IDPESSOAUSUARIOGRUPO = :idUsuarioGrupoFiltro
            AND NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO') = DECODE(:idFornecedorConsultorAtdFiltro,'VIVO',NVL(VW1.IDFORNECEDORCONSULTORATD,'VIVO'),:idFornecedorConsultorAtdFiltro)
            AND VW1.NRPROTOCOLOPORTABILIDADE = :idProtocoloFiltro
            //AND VW1.IDPESSOACONTA IS NULL;
        ));

    saida->addItem("totalRegistros", iContador );
    saida->addItem("nrRegistros"   , iContador );

    ULOG_END( "proCConsultaWFFilaMCPorProtocoloMCQtd()" );

    return true;
}

bool proCConsultorRelacionamentoSimNao(int idPessoaUsuario)
{
    ULOG_START("proCConsultorRelacionamentoSimNao()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int varOraIdPessoaUsuario = idPessoaUsuario;
        int varOraCount;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :varOraCount
        FROM
            CUSTOMER.PESSOA PESSOA,
            CUSTOMER.PESSOADEPARA PESSOADEPARA,
            CUSTOMER.PESSOACONTA PESSOACONTA,
            CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO
        WHERE
            PESSOA.IDPESSOA = :varOraIdPessoaUsuario
        AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
        AND PESSOADEPARA.IDPESSOADEPARA = PESSOACONTA.IDPESSOADEPARA
        AND PESSOACONTA.DTEXPIRACAO IS NULL
        AND PESSOACONTA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
        AND TIPORELACIONAMENTO.NMTIPORELACIONAMENTO = 'CONSULTOR RELACIONAMENTO'
        AND ROWNUM < 2;

    ULOG("totalRegistros=%d",varOraCount);

    ULOG_END("proCConsultorRelacionamentoSimNao()");

    return varOraCount==0?false:true;
}

bool proCObterInfoConsultorAtd(st_AtendimentoFila* dados,st_vlAtendimentoFila* status)
{
    ULOG_START("proCObterInfoConsultorAtd()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int varOraIdPessoaUsuario = dados->idUsuarioGrupo;

        VARCHAR varOraIdPerfilConsultorAtd[128];
        short statOraIdPerfilConsultorAtd=-1;

        VARCHAR varOraNrPesoHierarquia[128];
        short statOraNrPesoHierarquia=-1;

        VARCHAR varOraIdFornecedorConsultorAtd[128];
        short statOraIdFornecedorConsultorAtd=-1;

    EXEC SQL END DECLARE SECTION;

    memset( &varOraIdPerfilConsultorAtd    , 0x0, sizeof(varOraIdPerfilConsultorAtd) );
    memset( &varOraNrPesoHierarquia        , 0x0, sizeof(varOraNrPesoHierarquia) );
    memset( &varOraIdFornecedorConsultorAtd, 0x0, sizeof(varOraIdFornecedorConsultorAtd) );
	
	EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimento(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idPessoaUsuario [%d]",varOraIdPessoaUsuario);

    EXEC SQL
        SELECT
            PERFILCONSULTORATD.NRPESOHIERARQUIA,
            PERFILCONSULTORATD.IDPERFILCONSULTORATD,
            NVL(USUARIO.IDFORNECEDORCONSULTORATD,'VIVO') AS IDFORNECEDORCONSULTORATD
        INTO
            :varOraNrPesoHierarquia:statOraNrPesoHierarquia,
            :varOraIdPerfilConsultorAtd:statOraIdPerfilConsultorAtd,
            :varOraIdFornecedorConsultorAtd:statOraIdFornecedorConsultorAtd
        FROM
            ACESSO.USUARIO USUARIO,
            APOIO.PERFILCONSULTORATD PERFILCONSULTORATD
        WHERE
            USUARIO.IDPESSOAUSUARIO = :varOraIdPessoaUsuario
        AND NVL(USUARIO.IDPERFILCONSULTORATD,'VIVO') = PERFILCONSULTORATD.IDPERFILCONSULTORATD;

    if ( sqlca.sqlcode )
    {
        *(dados->nrPesoHierarquia)=*(dados->idFornecedorConsultorAtd)=*(dados->idPerfilConsultorAtd)=0;
        ULOG_END("proCObterInfoConsultorAtd() ==> NOT FOUND");
        return false;
    }

    CONVIND(varOraNrPesoHierarquia,statOraNrPesoHierarquia);
    CONVIND(varOraIdPerfilConsultorAtd,statOraIdPerfilConsultorAtd);
    CONVIND(varOraIdFornecedorConsultorAtd,statOraIdFornecedorConsultorAtd);

    SAFE_STRNCPY(dados->nrPesoHierarquia,(char*)varOraNrPesoHierarquia.arr);
    SAFE_STRNCPY(dados->idFornecedorConsultorAtd,(char*)varOraIdFornecedorConsultorAtd.arr);
    SAFE_STRNCPY(dados->idPerfilConsultorAtd,(char*)varOraIdPerfilConsultorAtd.arr);

    ULOG("idFornecedorConsultorAtd [%s]",(char*)dados->idFornecedorConsultorAtd);
    ULOG("    idPerfilConsultorAtd [%s]",(char*)dados->idPerfilConsultorAtd);
    ULOG("        nrPesoHierarquia [%s]",(char*)dados->nrPesoHierarquia);

    ULOG_END("proCObterInfoConsultorAtd()");

    return true;
}

