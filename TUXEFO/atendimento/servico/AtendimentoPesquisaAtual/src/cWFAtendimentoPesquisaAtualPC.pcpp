#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoPesquisaAtual.h"
#include "../include/stWFAtendimentoPesquisaAtual.h"

void sql_error_WFAtendimentoPesquisaAtual(sqlca*sqlca);

    // Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stWFAtendimentoPesquisaAtual.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoPesquisaAtual(st_AtendimentoPesquisaAtual* dados, st_vlAtendimentoPesquisaAtual* status, XMLGen* saida)
{
    ULOG_START("proCIncluirWFAtendimentoPesquisaAtual");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct st_AtendimentoPesquisaAtual *oDados = dados;
        struct st_vlAtendimentoPesquisaAtual *oStatus = status;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoPesquisaAtual(&sqlca);

    EXEC SQL 
        INSERT INTO
            ATENDIMENTO.ATENDIMENTOPESQUISAATUAL
            (
                IDATENDIMENTO,
                IDATENDIMENTOPESQUISASATISFA,
                IDUSUARIOALTERACAO,
                DTULTIMAALTERACAO
            )
            VALUES
            (
                :oDados->idAtendimento,
                :oDados->idAtendimentoPesquisaSatisfa,
                :oDados->idPessoaUsuario,
                 SYSDATE
            );

    saida->createTag("Registro");
        saida->addItem("idAtendimento", oDados->idAtendimento);
    saida->closeTag();

    ULOG_END("proCIncluirWFAtendimentoPesquisaAtual");

    return true;
}

bool proCAlterarWFAtendimentoPesquisaAtual(st_AtendimentoPesquisaAtual* dados, st_vlAtendimentoPesquisaAtual* status)
{
    ULOG_START("proCAlterarWFAtendimentoPesquisaAtual");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct st_AtendimentoPesquisaAtual *oDados = dados;
    EXEC SQL END DECLARE SECTION;

    if (status->idAtendimentoPesquisaSatisfa > -1)
    {
        ULOG("UPDATE ATENDIMENTO.ATENDIMENTOPESQUISAATUAL "
                "SET IDATENDIMENTOPESQUISASATISFA = %d,"
                   " DTULTIMAALTERACAO = SYSDATE,"
                   " IDUSUARIOALTERACAO = %d "
                "WHERE IDATENDIMENTO = %d"
                  "AND IDATENDIMENTOPESQUISASATISFA = %d"
            ,oDados->idAtendimentoPesquisaSatisfa
            ,oDados->idPessoaUsuario
            ,oDados->idAtendimento
            ,oDados->idAtendimentoPesquisaSatisfaAtual);

        EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtendimentoPesquisaAtual(&sqlca);
        EXEC SQL
            UPDATE
                ATENDIMENTO.ATENDIMENTOPESQUISAATUAL 
            SET 
                IDATENDIMENTOPESQUISASATISFA = :oDados->idAtendimentoPesquisaSatisfa,
                IDUSUARIOALTERACAO = :oDados->idPessoaUsuario,
                DTULTIMAALTERACAO = SYSDATE
            WHERE 
                IDATENDIMENTO = :oDados->idAtendimento
            AND
                IDATENDIMENTOPESQUISASATISFA = :oDados->idAtendimentoPesquisaSatisfaAtual;
    }
    else
    {
        ULOGW("Não foi informado campo para update");
    }

    ULOG_END("proCAlterarWFAtendimentoPesquisaAtual");

    return true;
}

bool proCExcluirWFAtendimentoPesquisaAtual(st_AtendimentoPesquisaAtual* dados, st_vlAtendimentoPesquisaAtual* status, XMLGen* saida)
{
    ULOG_START("proCExcluirWFAtendimentoPesquisaAtual");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = dados->idAtendimento;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoPesquisaAtual(&sqlca);

    EXEC SQL 
        DELETE
            atendimento.AtendimentoPesquisaAtual
        WHERE
            idAtendimento = :idAtendimento;

    ULOG_END("proCExcluirWFAtendimentoPesquisaAtual");

    return true;
}

bool proCConsultaWFAtendimentoPesquisaAtual(st_AtendimentoPesquisaAtual* dados, st_vlAtendimentoPesquisaAtual* status, char* order, XMLGen* saida)
{
    ULOG_START("proCConsultaWFAtendimentoPesquisaAtual");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento;
        long idAtendimentoPesquisaSatisfa;

        char query[1024] = "SELECT idAtendimento, idAtendimentoPesquisaSatisfa "
                             "FROM atendimento.AtendimentoPesquisaAtual ";

    EXEC SQL END DECLARE SECTION;

    bool separa = false;

    if (status->idAtendimento != -1) 
        montaWhere("idAtendimento", dados->idAtendimento, 1);

    if (status->idAtendimentoPesquisaSatisfa != -1)
        montaWhere("idAtendimentoPesquisaSatisfa", dados->idAtendimentoPesquisaSatisfa, 1);

    if (strlen(order) > 0) 
        sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoPesquisaAtual(&sqlca);

    EXEC SQL PREPARE consultaAtendimentoPesquisaAtual FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoPesquisaAtual;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO :idAtendimento, :idAtendimentoPesquisaSatisfa;

        saida->createTag("WFAtendimentoPesquisaAtualVO");
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("idAtendimentoPesquisaSatisfa", idAtendimentoPesquisaSatisfa);
        saida->closeTag();
    }

    EXEC SQL CLOSE consulta;

    ULOG_END("proCConsultaWFAtendimentoPesquisaAtual");

    return true;
}

bool proCObterPesquisaAtendimentoAtual(long _idAtendimento, long *_idAtendimentoPesquisaSatisfa)
{
    ULOG_START("proCObterPesquisaAtendimentoAtual");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = _idAtendimento;
        long idAtendimentoPesquisaSatisfa;
        short iidAtendimentoPesquisaSatisfa;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoPesquisaAtual(&sqlca);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT 
            IDATENDIMENTOPESQUISASATISFA
        INTO
            :idAtendimentoPesquisaSatisfa:iidAtendimentoPesquisaSatisfa
        FROM 
            ATENDIMENTO.ATENDIMENTOPESQUISAATUAL
        WHERE 
            IDATENDIMENTO = :idAtendimento;

    *_idAtendimentoPesquisaSatisfa = sqlca.sqlcode ? 0:idAtendimentoPesquisaSatisfa;

    ULOG_END("proCObterPesquisaAtendimentoAtual");

    return sqlca.sqlcode ? false : true;
}

void sql_error_WFAtendimentoPesquisaAtual(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
