/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5116174 $ - $Date: 2011/08/12 17:11:33 $
 **/

#if 0
#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../include/cWFAtendimentoRelPesqSatisfaGrava.h"

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#define MAXCOLUNAS 22
EXEC SQL END DECLARE SECTION;

void WFAtdRelGravaPesqSat(sqlca*sqlca);

bool proCBuscarDataHora( st_AtendimentoRelGravaPesqSatis *dados )
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
    char dataAtual[24];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelGravaPesqSat(&sqlca);
    EXEC SQL SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI') INTO :dataAtual FROM DUAL;

    sprintf(dados->dataAtual,"%.*s",sizeof(dados->dataAtual)-1,dataAtual);

    ULOG("dataAtual='%s'",dados->dataAtual);

    return true;
}

bool proCBuscarAtPesqAtual( st_AtendimentoRelGravaPesqSatis *dados
                          , st_vlAtendimentoRelGravaPesqSatis *status
                          , XMLGen *saida
                          , DOMNode *dnode
                          , bool *encontrado )
{
    char *p;
    struct sqlca sqlca;

    if ( !dados )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( -1 == status->idAtendimento )
    {
        p = "tag 'idAtendimento' nao informada";
        ULOGE("%s",mensagemSimples(p));
        throw new TuxBasicSvcException("04E9999",mensagemSimples(p));
    }

    EXEC SQL BEGIN DECLARE SECTION;
        long idAtendimentoParam;
    EXEC SQL END DECLARE SECTION;

    idAtendimentoParam = dados->idAtendimento;

    *encontrado = false;

    ULOG("Buscando idAtendimento '%d' em AtendimentoPesquisaAtual"  ,dados->idAtendimento);
    EXEC SQL WHENEVER NOT FOUND GOTO saida;
    EXEC SQL WHENEVER SQLERROR DO WFAtdRelGravaPesqSat(&sqlca);

    EXEC SQL SELECT idAtendimento,idAtendimentoPesquisaSatisfa
               FROM atendimento.AtendimentoPesquisaAtual
              WHERE idAtendimento = :idAtendimentoParam;

    *encontrado = true;

saida:
    ULOG("idAtendimento '%d' %sencontrado em AtendimentoPesquisaAtual",dados->idAtendimento,*encontrado?"":"nao ");
    return true;
}

bool proCPesqQuestionario( int idPergunta,bool *encontrado )
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int idPerguntaParam;
    EXEC SQL END DECLARE SECTION;

    idPerguntaParam = idPergunta;

    *encontrado = false;

    ULOG("Pesquisando pergunta '%d' em questionario.pergunta " ,idPerguntaParam);

    EXEC SQL WHENEVER NOT FOUND GOTO saidaQuest;
    EXEC SQL WHENEVER SQLERROR DO WFAtdRelGravaPesqSat(&sqlca);

    EXEC SQL SELECT idPergunta
               FROM questionario.pergunta
              WHERE idPergunta = :idPerguntaParam;

    *encontrado = true;

saidaQuest:

    if ( !*encontrado )
    {
        ULOGE( "Pergunta '%d' NAO existe em questionario.pergunta !",idPerguntaParam);
        return false;
    }

    ULOG("Pergunta '%d' existe em questionario.pergunta ",idPerguntaParam);

    return true;
}

void WFAtdRelGravaPesqSat(sqlca*sqlca)
{
    ULOGE("WFAtdRelGravaPesqSat:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}

#endif