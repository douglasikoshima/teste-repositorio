#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/cCfgPerfilGruCon.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/msgPadrao.h"

// Prototipos
short proCAtualizaContatoGrupoPerfil
( 
    unsigned long idUser, 
    unsigned long idContatoPrm, 
    unsigned long idPerfilPrm, 
    unsigned long idGrupoPrm ,
    unsigned long sqOrdemPrm,
    unsigned long idGrupoPerfilPrm
);

short proCApagaContatoGrupoPerfil
( 
    unsigned long idUser, 
    unsigned long idContatoPrm,
    unsigned long idGrupoPerfilPrm 
);

void SqlError( sqlca * sqlca );


/*------------------------------------------------------*/
short proCAtualizaContatoGrupoPerfil( 
    unsigned long idUser, 
    unsigned long idContatoPrm, 
    unsigned long idPerfilPrm, 
    unsigned long idGrupoPrm,
    unsigned long sqOrdemPrm,
    unsigned long idGrupoPerfilPrm )
{
    ULOG_START("proCAtualizaContatoGrupoPerfil()");
    
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
        unsigned long idPerfil      = idPerfilPrm;
        unsigned long idGrupo       = idGrupoPrm;
        unsigned long idContato     = idContatoPrm;
        unsigned long idUsuario     = idUser;
        unsigned long sqOrdem       = sqOrdemPrm;
        unsigned long idGrupoPerfil = idGrupoPerfilPrm;

        int iCount = 0;
        VARCHAR stidContatoPerfil[21+1];
	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );

    ULOG( "idGrupoPerfil[%lu] sqOrdem[%lu] idPerfil [%lu], idGrupo [%lu], idContato [%lu], idUsuario [%lu]", idGrupoPerfil, sqOrdem, idPerfil, idGrupo, idContato, idUsuario );
       
    memset( &stidContatoPerfil, 0, sizeof(stidContatoPerfil) );

    if(idGrupoPerfil != 0 )
    {
        ULOG("UPDATE CONTATOADM.CONTATOPERFIL SET SQORDEM = %lu WHERE IDGRUPOPERFIL = %lu;", sqOrdem ,idGrupoPerfil);

        //Como a rotina de exclusao passa a apagar apenas um por vez e nao todos
        //quando o idGrupoPerfil existe, apenas atualiza a ordem.
        EXEC SQL
        UPDATE 
        	CONTATOADM.CONTATOPERFIL
        SET
        	SQORDEM = :sqOrdem
        WHERE
            IDGRUPOPERFIL = :idGrupoPerfil;
    }//if(idGrupoPerfil != 0 )
    else
    {
      
		//Verifica se existe o atual campo, se existe entao ele esta deletado fisicamente, entao tem que 
		//recuperar o IDCONTATOPERFIL para reverter a delecao
		EXEC SQL
		SELECT
			CONTATOPERFIL.IDCONTATOPERFIL
		INTO
			:stidContatoPerfil
		FROM
			CONTATOADM.GRUPOPERFIL GRUPOPERFIL, 
			CONTATOADM.CONTATOPERFIL CONTATOPERFIL
		WHERE 
			GRUPOPERFIL.IDGRUPOPERFIL = CONTATOPERFIL.IDGRUPOPERFIL
		AND
			GRUPOPERFIL.IDGRUPO = :idGrupo
		AND
			GRUPOPERFIL.IDPERFIL = :idPerfil
		AND
			CONTATOPERFIL.IDCONTATO = :idContato;
			
		//Se nao achou idContatoPerfil entao insere, se achou remoce a data de exclusao
		if( stidContatoPerfil.len <= 0 )
		{
	            
		    //Caso o idGrupoPerfil não existe, entao eh novo e tem que ser inserido, na referida ordem
		    EXEC SQL 
		        SELECT CONTATOADM.GRUPOPERFILSQ.NEXTVAL 
		    INTO 
		       :idGrupoPerfil FROM DUAL;
	
		    //Associa um perfil a um grupo
		    EXEC SQL
		    INSERT INTO CONTATOADM.GRUPOPERFIL
		    (
		        IDGRUPOPERFIL,
		        IDPERFIL,
		        IDGRUPO,
		        IDUSUARIOALTERACAO,
		        DTULTIMAALTERACAO
		    )
		    VALUES
		    (
		        :idGrupoPerfil,
		        :idPerfil,
		        :idGrupo,
		        :idUsuario,
		        SYSDATE
		    );
		
		    //Associa um grupoperfil a um contato
		    EXEC SQL
		    INSERT INTO CONTATOADM.CONTATOPERFIL
		    (
		        IDCONTATOPERFIL,
		        IDGRUPOPERFIL,
		        IDCONTATO,
		        SQORDEM,
		        IDUSUARIOALTERACAO,
		        DTULTIMAALTERACAO
		    )
		    VALUES
		    (
		        CONTATOADM.CONTATOPERFILSQ.NEXTVAL,
		        :idGrupoPerfil,
		        :idContato,
		        :sqOrdem,
		        :idUsuario,
		        SYSDATE
		    );
		}//if( stidContatoPerfil.len <= 0 )
		else
		{
			//Se chegou aqui eh porque tem um contatoperfil com data de exclusao (foi apagado logicamente)
			//e alguem esta incluindo o mesmo perfil com o mesmo grupo para o mesmo contato, entao remove a 
			//data de exlusao logica e o registro volta a existir, ja com a nova ordem
			EXEC SQL
			UPDATE 
				CONTATOADM.CONTATOPERFIL
			SET 
				DTEXCLUSAO = NULL,
		        SQORDEM = :sqOrdem,
		        IDUSUARIOALTERACAO = :idUsuario,
		        DTULTIMAALTERACAO = SYSDATE
			WHERE 
				IDCONTATOPERFIL = :stidContatoPerfil;
		}//else if( stidContatoPerfil.len <= 0 )

        
	}//else if(idGrupoPerfil != 0 )
	ULOG_END("proCAtualizaContatoGrupoPerfil()");
    return 0;
}




short proCApagaContatoGrupoPerfil( 
    unsigned long idUser, 
    unsigned long idContatoPrm,
    unsigned long idGrupoPerfilPrm)
{
    ULOG_START("proCApagaContatoGrupoPerfil()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idContato       = idContatoPrm;
        unsigned long idGrupoPerfil   = idGrupoPerfilPrm;
        unsigned long idUsuario = idUser;
        int iTemProcesso = 0;

	EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );


 

	//
    // Incidencia 3269.
    // Sera feita apenas exclusao logica.
    // 2006-04-06 @ Marcelo @
	/*
	//Antes de apagar a associacao, verifica se o mesmo tem processo em andamento
	EXEC SQL 
	SELECT
		COUNT(1)
	INTO
		:iTemProcesso
	FROM
        CONTATOADM.CONTATOPERFIL CONTATOPERFIL,
        ATENDIMENTO.ATENDIMENTO ATENDIMENTO,
        ATENDIMENTO.GRUPOCRI GRUPOCRI,
        CONTATOADM.GRUPOPERFIL GRUPOPERFIL
    WHERE
        CONTATOPERFIL.IDCONTATO = ATENDIMENTO.IDCONTATO
    AND
       CONTATOPERFIL.IDGRUPOPERFIL = GRUPOPERFIL.IDGRUPOPERFIL
    AND
       GRUPOPERFIL.IDGRUPO = GRUPOCRI.IDGRUPO
    AND
       GRUPOCRI.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO
    AND
       CONTATOPERFIL.IDGRUPOPERFIL = :idGrupoPerfil
	AND NOT EXISTS 
	(
		SELECT 
			ATENDIMENTOFECHAMENTO.IDATENDIMENTO  
		FROM 
			ATENDIMENTO.ATENDIMENTOFECHAMENTO ATENDIMENTOFECHAMENTO 
		WHERE 
			ATENDIMENTOFECHAMENTO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO 
	)
	AND
		ROWNUM  < 2;
    */


	//
    // Incidencia 3269.
    // Sera feita apenas exclusao logica.
    // 2006-04-06 @ Marcelo @
	//Caso tenha processo em andamento, apaga logicamente
	/*
	if( iTemProcesso)
	{
	*/
	    ULOG( "Tem processo DELECAO LOGICA" );
		//Exclusao logica 
		//OBS.: No momento de inserir que que verificar se ja existe ou nao para poder remover a data de exlucao logica
		EXEC SQL
		UPDATE
			CONTATOADM.CONTATOPERFIL
		SET
			DTEXCLUSAO = SYSDATE
		WHERE
	        IDCONTATO = :idContato
	    AND
	        IDGRUPOPERFIL = :idGrupoPerfil;		
	/*
	}
	*/
	//
    // Incidencia 3269.
    // Sera feita apenas exclusao logica.
    // 2006-04-06 @ Marcelo @
	/*
	else
	{
		//Se nao tem processo entao apaga mesmo
		EXEC SQL 
	        DELETE FROM CONTATOADM.CONTATOPERFIL
	    WHERE 
	        IDCONTATO = :idContato
	    AND
	        IDGRUPOPERFIL = :idGrupoPerfil;
	
		EXEC SQL 
	        DELETE FROM CONTATOADM.GRUPOPERFIL
	    WHERE 
	        IDGRUPOPERFIL = :idGrupoPerfil;
	}
	*/


    ULOG_END("proCApagaContatoGrupoPerfil()");

    return 0;

}




void SqlError( sqlca * sqlca )
{
   ULOGE( "sql_error_WFFechamento:sqlcode = [%d],sqlerrmc = [%.70s]"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

	throw new 
        TuxBasicOraException(
            sqlca->sqlcode,
            sqlca->sqlerrm.sqlerrmc,
            sqlca->sqlerrm.sqlerrml
            );
}
