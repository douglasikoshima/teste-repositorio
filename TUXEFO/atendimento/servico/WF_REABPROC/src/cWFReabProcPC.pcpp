#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>
#include <ctype.h>

//#include "../../../commons/SmallString.h"
#include "../include/cRebProcessos.h"
//#include "../../../commons/queryMacro.h"


void sql_error_WFReabProc( sqlca * sqlca );

bool cWFReabProcessos::proCObtemTpLinha( int idPesLinha, int * idTpLinha )
{

   struct sqlca sqlca;
   EXEC SQL BEGIN DECLARE SECTION;
		int idLinha = idPesLinha;

      int   idTipoLinha;
      short i_idTipoLinha;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL WHENEVER SQLERROR  DO sql_error_WFReabProc( &sqlca );
	EXEC SQL 
      SELECT 
         idTipoLinha
      INTO
         :idTipoLinha:i_idTipoLinha 
      FROM 
         ( 
            SELECT 
               LT.idTipoLinha, 
               PL.IDPESSOALINHAHISTORICO 
            FROM 
               CUSTOMER.PESSOALINHAHISTORICO PL, 
               LINHA.LINHATELEFONICA LT 
            WHERE 
               PL.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
         ) 
      WHERE 
         IDPESSOALINHAHISTORICO = :idLinha;

	if ( i_idTipoLinha >= 0 )
      *idTpLinha = idTipoLinha;

   return true;

}



bool cWFReabProcessos::proCObtemSeqGrpTrat( int idGrpPrm, int idContatoPrm, int * idSequenciaPrm )
{
   struct sqlca sqlca;

   EXEC SQL BEGIN DECLARE SECTION;
      int idGrupo   = idGrpPrm;
      int idContato = idContatoPrm;
      int idSequencia = -1;

      short i_idSequencia = -1;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL WHENEVER SQLERROR DO sql_error_WFReabProc( &sqlca );
    /* @Marcelo - Retirar B01
    EXEC SQL 
      SELECT 
         IDSEQUENCIA 
      INTO
         :idSequencia:i_idSequencia
      FROM 
         CONTATOADM.SEQUENCIAB01 
      WHERE 
         IDGRUPO = :idGrupo 
      AND 
         IDCONTATO = :idContato 
      AND 
         IDTIPOSEQUENCIA = 2;
    */

    EXEC SQL 
        SELECT
           SEQUENCIA.IDSEQUENCIA
        INTO
            :idSequencia:i_idSequencia
        FROM 
           CONTATOADM.CONTATOGRUPO CONTATOGRUPO,
           CONTATOADM.TIPOSEQUENCIA TIPOSEQUENCIA,
           CONTATOADM.SEQUENCIA SEQUENCIA
        WHERE 
           SEQUENCIA.IDCONTATOGRUPO = CONTATOGRUPO.IDCONTATOGRUPO
        AND 
           SEQUENCIA.IDTIPOSEQUENCIA = TIPOSEQUENCIA.IDTIPOSEQUENCIA
        AND
           CONTATOGRUPO.IDCONTATO = :idContato
        AND
           CONTATOGRUPO.IDGRUPO = :idGrupo 
        AND
           TIPOSEQUENCIA.IDTIPOSEQUENCIA = 2
        AND 
           ROWNUM < 2;


   if ( i_idSequencia >= 0 )
      *idSequenciaPrm = idSequencia;

   return true;
}



void cWFReabProcessos::GetTime( char *sData, int iFormato )
{
   struct sqlca sqlca;

   EXEC SQL BEGIN DECLARE SECTION;
      char sDataSQL[25];
   EXEC SQL END DECLARE SECTION;

   sDataSQL[0] = 0x0;

   EXEC SQL WHENEVER SQLERROR DO sql_error_WFReabProc( &sqlca );
   if ( iFormato == 0 )
   {
        EXEC SQL 
            SELECT 
                TO_CHAR( SYSDATE,'DD/MM/YYYY HH24:MI' )
            INTO
                :sDataSQL
            FROM DUAL;
        sprintf( sData,"%.16s",sDataSQL );
   }
   else
   {
        EXEC SQL 
            SELECT 
                TO_CHAR( SYSDATE,'DD/MM/YYYY HH24:MI:SS' )
            INTO
                :sDataSQL
            FROM DUAL;
        sprintf( sData,"%.19s",sDataSQL );
   }


}



void sql_error_WFReabProc( sqlca * sqlca )
{
    ULOGE( "sql_error_WFReabProc:sqlcode = [%d],sqlerrmc = [%.70s]"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(  sqlca->sqlcode
                                    ,sqlca->sqlerrm.sqlerrmc
                                    ,sqlca->sqlerrm.sqlerrml
                                  );

}

