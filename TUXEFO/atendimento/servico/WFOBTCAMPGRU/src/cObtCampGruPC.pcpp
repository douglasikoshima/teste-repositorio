
#include "../include/cObtCampGruPC.h"

void cObtCampGruPC::SelectByGroupPC( st_VariaveisCampanhaGrupo *_dadosEntradaPC, Collection *_ResultadoPC )
{
    ULOG_START("cObtCampGruPC::SelectByGroupPC()");

    struct sqlca sqlca;
    st_VariaveisCampanhaGrupo * pResult;

    EXEC SQL BEGIN DECLARE SECTION;
        int idgrp = _dadosEntradaPC->idGrupo ? atoi( _dadosEntradaPC->idGrupo ) : 0;

        VARCHAR idretornowfcti[ 256 ];
        VARCHAR sgretornowfcti[ 256 ];
        VARCHAR dsretornowfcti[ 256 ];
        VARCHAR sgstatus[ 2 ];
        VARCHAR inpadrao[ 2 ];

        short i_idretornowfcti=-1;
        short i_sgretornowfcti=-1;
        short i_dsretornowfcti=-1;
        short i_sgstatus=-1;
        short i_inpadrao=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFobtemCampGrupos( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    ULOG("idGrupo = '%d'",idgrp);

    EXEC SQL DECLARE crSelectRGrp CURSOR FOR
      SELECT 
         idretornowfcti,sgretornowfcti,
         dsretornowfcti,sgstatus,'N' inpadrao
      FROM 
         workflow.retornowfcti
      WHERE 
         inpadrao = 0 
      AND EXISTS
         ( 
            SELECT 
               idretornowfcti 
            FROM 
               workflow.gruporetornowfcti
            WHERE 
               idgrupo = :idgrp
         )
      UNION ALL
         SELECT 
            idretornowfcti,sgretornowfcti,
            dsretornowfcti,sgstatus,'S' inpadrao
         FROM 
            workflow.retornowfcti
         WHERE 
            inpadrao=1 
         AND NOT EXISTS
            (
               SELECT 
                  idretornowfcti 
               FROM 
                  workflow.gruporetornowfcti
               WHERE 
                  idgrupo = :idgrp
            )
         ORDER BY idretornowfcti;

    EXEC SQL OPEN crSelectRGrp;

    for(;;)
    {
        EXEC SQL FETCH crSelectRGrp INTO 
                       :idretornowfcti:i_idretornowfcti,
                       :sgretornowfcti:i_sgretornowfcti,
                       :dsretornowfcti:i_dsretornowfcti,
                       :sgstatus:i_sgstatus,
                       :inpadrao:i_inpadrao;

        CONVIND( idretornowfcti,i_idretornowfcti );
        CONVIND( sgretornowfcti,i_sgretornowfcti );
        CONVIND( dsretornowfcti,i_dsretornowfcti );
        CONVIND( sgstatus,i_sgstatus );
        CONVIND( inpadrao,i_inpadrao );

        pResult = new st_VariaveisCampanhaGrupo;
        if ( pResult )
        {
            strcpy(pResult->idGrupo,(char*)_dadosEntradaPC->idGrupo?_dadosEntradaPC->idGrupo:"(null)");
            strcpy(pResult->idretornowfcti,(char*) idretornowfcti.arr);
            strcpy(pResult->sgretornowfcti,(char*) sgretornowfcti.arr);
            strcpy(pResult->dsretornowfcti,(char*) dsretornowfcti.arr);
            strcpy(pResult->sgstatus,(char*) sgstatus.arr);
            strcpy(pResult->inpadrao,(char*) inpadrao.arr);

            _ResultadoPC->AddItem( (void*) pResult );
        }
        else
        {
            ULOG(erroFalhaAlocacaoMemoria());
        }
    }

    EXEC SQL CLOSE crSelectRGrp;

    ULOG_END("cObtCampGruPC::SelectByGroupPC()");
}


void cObtCampGruPC::sql_error_WFobtemCampGrupos( sqlca * sqlca )
{
    ULOGE("Ocorreu um erro na obtencao de grupos Monitoramento.");

    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
