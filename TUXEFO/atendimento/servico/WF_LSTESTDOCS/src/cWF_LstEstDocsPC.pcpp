
/*---------------------------------------------------------
 * Modulo..: Atendimento
 * Servico.: Lista Estado de Todos Dcoumentos
 * Migracao: Script 205
 * Revisao.: Nov-23-2004 - Marcelo Nunes
 *--------------------------------------------------------*/


#include "../include/cWF_LstEstDocsPC.h"

bool cWF_LstEstDocs::consultaWFAtendimentoDocTecnicoTipo( st_VariaveisLstEstDocs * dados, st_vlVariaveisLstEstDocs * status, Collection *_ResultadoPC )
{
    ULOG_START("cWF_LstEstDocs::consultaWFAtendimentoDocTecnicoTipo()");
	struct sqlca sqlca;
    st_VariaveisLstEstDocs *pConsulta;

    EXEC SQL BEGIN DECLARE SECTION;

      int         idDocumentoTecnicoTipo;
      VARCHAR     dsDocumentoTecnicoTipo[256];

      short       i_dsDocumentoTecnicoTipo;

      char query[1025];

   EXEC SQL END DECLARE SECTION;

   EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
   EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idDocumentoTecnicoTipo, dsDocumentoTecnicoTipo FROM Atendimento.DocumentoTecnicoTipo ");

	bool separa = false;

	if (status->idDocumentoTecnicoTipo != -1) 
		montaWhere("idDocumentoTecnicoTipo", dados->idDocumentoTecnicoTipo, TIPO_INT);

	if (status->dsDocumentoTecnicoTipo != -1) 
		montaWhere("dsDocumentoTecnicoTipo", dados->dsDocumentoTecnicoTipo, TIPO_CHAR);

	sprintf( query, "%s ORDER BY dsDocumentoTecnicoTipo ", query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WF_LstDocTecAss( &sqlca );

	EXEC SQL PREPARE consultaAtendimentoDocTecnicoTipo FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoDocTecnicoTipo;

	EXEC SQL OPEN consulta;

	for ( ;; )
	{
		EXEC SQL FETCH consulta INTO :idDocumentoTecnicoTipo, :dsDocumentoTecnicoTipo:i_dsDocumentoTecnicoTipo;

        ULOG("sqlca.sqlcode = '%i'",sqlca.sqlcode);

		CONVIND( dsDocumentoTecnicoTipo,i_dsDocumentoTecnicoTipo );

      pConsulta = new st_VariaveisLstEstDocs;
      if ( pConsulta != NULL )
      {
         ULOG("idDocumentoTecnicoTipo  = '%d'",idDocumentoTecnicoTipo);
         ULOG("dsDocumentoTecnicoTipo  = '%s'",(char *)dsDocumentoTecnicoTipo.arr);

         sprintf( pConsulta->idDocumentoTecnicoTipo ,"%d",idDocumentoTecnicoTipo );
         strcpy ( pConsulta->dsDocumentoTecnicoTipo ,(char *)dsDocumentoTecnicoTipo.arr );

         _ResultadoPC->AddItem( (void*) pConsulta );
      }
      else
         ULOGE("ERRO: Nao Consegue Alocar Memoria para os Dados");

	}

	EXEC SQL CLOSE consulta;

    ULOG_END("cWF_LstEstDocs::consultaWFAtendimentoDocTecnicoTipo()");

	return true;

}



bool cWF_LstEstDocs::consultaWFApoioProcedencia( st_VariaveisApoioProced * dados, st_vlVariaveisApoioProced * status, Collection *_ResultadoPC )
{
    ULOG_START("cWF_LstEstDocs::consultaWFApoioProcedencia()");
	struct sqlca sqlca;
    st_VariaveisApoioProced *pConsulta;

    EXEC SQL BEGIN DECLARE SECTION;

      int  idProcedencia;
      VARCHAR sgProcedencia[256];
      VARCHAR dsProcedencia[256];
      int  vlPeso;
      int  idUsuarioAlteracao;
      VARCHAR dtUltimaAlteracao[256];

      short i_sgProcedencia;
      short i_dsProcedencia;
      short i_dtUltimaAlteracao;

      char query[800];

    EXEC SQL END DECLARE SECTION;

	sprintf(query,"SELECT idProcedencia, sgProcedencia, dsProcedencia, vlPeso, idUsuarioAlteracao, dtUltimaAlteracao FROM Apoio.Procedencia ");

	bool separa = false;

	if (status->idProcedencia != -1) 
		montaWhere("idProcedencia", dados->idProcedencia, TIPO_INT);

	if (status->sgProcedencia != -1) 
		montaWhere("sgProcedencia", dados->sgProcedencia, TIPO_CHAR);

	if (status->dsProcedencia != -1) 
		montaWhere("dsProcedencia", dados->dsProcedencia, TIPO_CHAR);

	if (status->vlPeso != -1) 
		montaWhere("vlPeso", dados->vlPeso, TIPO_INT);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

   sprintf( query, "%s ORDER BY dsProcedencia ", query );

   EXEC SQL WHENEVER SQLERROR  DO sql_error_WF_LstDocTecAss( &sqlca );
   EXEC SQL WHENEVER NOT FOUND DO BREAK;

	EXEC SQL PREPARE consultaApoioProcedencia FROM :query;
	EXEC SQL DECLARE consultaProc CURSOR FOR consultaApoioProcedencia;

	EXEC SQL OPEN consultaProc;

	for ( ;; )
	{
		EXEC SQL FETCH consultaProc INTO :idProcedencia, 
		                             :sgProcedencia:i_sgProcedencia, 
		                             :dsProcedencia:i_dsProcedencia, 
		                             :vlPeso, 
		                             :idUsuarioAlteracao, 
		                             :dtUltimaAlteracao:i_dtUltimaAlteracao;

        ULOG("sqlca.sqlcode = '%i'",sqlca.sqlcode);

		CONVIND( sgProcedencia, i_sgProcedencia );
		CONVIND( dsProcedencia, i_dsProcedencia );
		CONVIND( dtUltimaAlteracao, i_dtUltimaAlteracao );

      pConsulta = new st_VariaveisApoioProced;
      if ( pConsulta != NULL )
      {
         ULOG("idProcedencia       = '%d'",idProcedencia);
         ULOG("sgProcedencia       = '%s'",(char *)sgProcedencia.arr);
         ULOG("dsProcedencia       = '%s'",(char *)dsProcedencia.arr);
         ULOG("vlPeso              = '%d'",vlPeso);
         ULOG("idUsuarioAlteracao  = '%d'",idUsuarioAlteracao);
         ULOG("dtUltimaAlteracao   = '%s'",(char *)dtUltimaAlteracao.arr);

         sprintf( pConsulta->idProcedencia      ,"%d",idProcedencia );
         strcpy ( pConsulta->sgProcedencia      ,(char *)sgProcedencia.arr );
         strcpy ( pConsulta->dsProcedencia      ,(char *)dsProcedencia.arr );
         sprintf( pConsulta->vlPeso             ,"%d",vlPeso );
         sprintf( pConsulta->idUsuarioAlteracao ,"%d",idUsuarioAlteracao );
         strcpy ( pConsulta->dtUltimaAlteracao  ,(char *)dtUltimaAlteracao.arr );

         _ResultadoPC->AddItem( (void*) pConsulta );
      }
      else
         ULOG("ERRO: Nao Consegue Alocar Memoria para os Dados");

	}

	EXEC SQL CLOSE consultaProc;
	
	ULOG_END("cWF_LstEstDocs::consultaWFApoioProcedencia()");



	return true;

}



void cWF_LstEstDocs::sql_error_WF_LstDocTecAss( sqlca * sqlca )
{
    ULOG("Ocorreu um erro na Listagem de todos os documentos");
    ULOGE("SqlError -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
