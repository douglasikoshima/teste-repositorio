#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"

#include <tuxfw.h>

#include "../include/cWFAtendimentoBaixa.h"
#include "../include/stWFAtendimentoBaixa.h"

void sql_error_WFAtendimentoBaixa(sqlca*sqlca);

    // Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stWFAtendimentoBaixa.h"
    EXEC SQL END DECLARE SECTION;

bool proCObtemWFContatoInformacao(int sIdContato, int sIdUfOperadora, int sIdTipoLinha, int sIdTipoRelacionamento, XMLGen* saida);
bool proCObtemWFContatoTipoRelacionamento(int sIdContato, int sIdTipoRelacionamento, XMLGen* saida);
bool proCObtemWFHierarquiaContato(int sIdContato, XMLGen* saida);

bool proCIncluirWFAtendimentoBaixa(st_AtendimentoBaixa* dados, st_vlAtendimentoBaixa* status, XMLGen* saida)
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoBaixa   oDados;
        struct st_vlAtendimentoBaixa oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);

    EXEC SQL 
        INSERT INTO
            atendimento.Baixa
            (
                idBaixa,
                idNomeBaixa,
                idUsuarioAlteracao,
                dtUltimaAlteracao
            )
            VALUES
            (
                :oDados.idBaixa,
                :oDados.idNomeBaixa,
                DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
            );

    saida->createTag("WFAtendimentoBaixaVO");
        saida->addItem("idBaixa", oDados.idBaixa);
    saida->closeTag();

    return true;
}

bool proCAlterarWFAtendimentoBaixa(st_AtendimentoBaixa* dados, st_vlAtendimentoBaixa* status, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoBaixa   oDados;
        struct st_vlAtendimentoBaixa oStatus;

        char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    sprintf(query,"%s", "UPDATE atendimento.Baixa SET ");

    bool separa = false;

    if (status->idNomeBaixa != -1) 
        montaUpdate("idNomeBaixa", oDados.idNomeBaixa, TIPO_INT);

    if (status->idUsuarioAlteracao != -1) 
        montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

    if (status->dtUltimaAlteracao != -1) 
        montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

    sprintf(query, "%s WHERE idBaixa = %i", query, dados->idBaixa);

    EXEC SQL EXECUTE IMMEDIATE :query;

    return true;
}

bool proCExcluirWFAtendimentoBaixa(st_AtendimentoBaixa* dados, st_vlAtendimentoBaixa* status, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int idBaixa = dados->idBaixa;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);

    EXEC SQL 
        DELETE
            atendimento.Baixa
        WHERE
            idBaixa = :idBaixa;

    return true;
}

bool proCObtemWFContatoTipoRelacionamento(int sIdContato, int sIdTipoRelacionamento, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContato = sIdContato;
        int      idTipoRelacionamento = sIdTipoRelacionamento;
        int      inPermitido;

        short    i_inPermitido;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);


       EXEC SQL
          SELECT 
                 COUNT(*)
          INTO
                :inPermitido:i_inPermitido 
          FROM 
               CONTATOADM.CONTATOTIPORELACIONAMENTO A,
               CONTATOADM.CONTATO B
          WHERE
               A.IDCONTATO = B.IDCONTATO
          and
               A.IDCONTATO = :idContato
          AND
               A.IDTIPORELACIONAMENTO = :idTipoRelacionamento;

            if ( inPermitido > 0 )
            saida->addItem( "inRelacionamento",1 );
        else
            saida->addItem( "inRelacionamento",0 );
    
    return true;

}

bool proCObtemWFContatoMensagem(int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContato = sIdContato;
        VARCHAR  dsMensagemAviso[256];

        short    i_dsMensagemAviso;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);

/* @Marcelo Retirar B01
       EXEC SQL
          SELECT
               DSMENSAGEMAVISO
            INTO
                :dsMensagemAviso:i_dsMensagemAviso
            FROM
                CONTATOADM.CONTATOFOLHAMENSAGEMAVISOB01
            WHERE
                IDCONTATO = :idContato;
*/

       EXEC SQL
            SELECT
                MENSAGEMAVISO.DSMENSAGEMAVISO
            INTO
                :dsMensagemAviso:i_dsMensagemAviso
            FROM 
                CONTATOADM.CONTATOFOLHA CONTATOFOLHA,
                CONTATOADM.MENSAGEMAVISO MENSAGEMAVISO,
                CONTATOADM.CONTATOFOLHAMENSAGEMAVISO CONTATOFOLHAMENSAGEMAVISO
            WHERE 
                CONTATOFOLHAMENSAGEMAVISO.IDCONTATO = CONTATOFOLHA.IDCONTATO
            AND 
                CONTATOFOLHAMENSAGEMAVISO.IDMENSAGEMAVISO = MENSAGEMAVISO.IDMENSAGEMAVISO
            AND
                CONTATOFOLHA.IDCONTATO = :idContato;

            CONVIND (dsMensagemAviso, i_dsMensagemAviso);

            if ( i_dsMensagemAviso != -1 )
                    saida->addItem("mensagem", (char*)dsMensagemAviso.arr );
    
    return true;

}

bool proCObtemWFContatoInformacao(int sIdContato, int sIdUfOperadora, int sIdTipoLinha, int sIdTipoRelacionamento, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContato = sIdContato;
        int      idUfOperadora = sIdUfOperadora;
        int      idTipoLinha = sIdTipoLinha;
        int      idTipoRelacionamento = sIdTipoRelacionamento;
        VARCHAR  nmUrlContato[256];

        short    i_nmUrlContato;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
       EXEC SQL
          SELECT
               NMURLCONTATOINFORMACAO
            INTO
                :nmUrlContato:i_nmUrlContato
            FROM
                CONTATOADM.CONTATOINFORMACAO
            WHERE
                IDCONTATO = :idContato
        AND
            IDUFOPERADORA = :idUfOperadora
        AND
            IDTIPORELACIONAMENTO = :idTipoRelacionamento
        AND 
            IDTIPOLINHA = :idTipoLinha;
            
            CONVIND (nmUrlContato, i_nmUrlContato);

                saida->createTag("AdmContatoInformacaoVO");
                saida->addItem("nmURLContatoInformacao", (char*)nmUrlContato.arr );
                saida->closeTag();
    
    return true;

}

bool proCObtemWFHierarquiaContato(int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContato = sIdContato;
        VARCHAR  dsPath[800];

        short    i_dsPath;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
       EXEC SQL
          SELECT
               PATH
            INTO
                :dsPath:i_dsPath
            FROM
                ATENDIMENTO.HIERARQUIACONTATOV01
            WHERE
                IDCONTATO = :idContato;
            
            CONVIND (dsPath, i_dsPath);

                saida->addItem("dsPath", (char*)dsPath.arr );
    
    return true;

}

bool proCConsultaWFAtendimentoBaixa(st_AtendimentoBaixa* dados, st_vlAtendimentoBaixa* status, char* order, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idBaixa;
        int      idNomeBaixa;
        int      idUsuarioAlteracao;
        VARCHAR dtUltimaAlteracao[256];

        short i_idNomeBaixa;
        short i_idUsuarioAlteracao;
        short i_dtUltimaAlteracao;

        char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    sprintf(query,"SELECT idBaixa, idNomeBaixa, idUsuarioAlteracao, dtUltimaAlteracao FROM atendimento.Baixa ");

    bool separa = false;

    if (status->idBaixa != -1) 
        montaWhere("idBaixa", dados->idBaixa, TIPO_INT);

    if (status->idNomeBaixa != -1) 
        montaWhere("idNomeBaixa", dados->idNomeBaixa, TIPO_INT);

    if (status->idUsuarioAlteracao != -1) 
        montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

    if (status->dtUltimaAlteracao != -1) 
        montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

    if (strlen(order) > 0) 
        sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);

    EXEC SQL PREPARE consultaBaixa FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaBaixa;

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO 
                                    :idBaixa, 
                                    :idNomeBaixa:i_idNomeBaixa,
                                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                                    :dtUltimaAlteracao:i_dtUltimaAlteracao;

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idBaixa",idBaixa );
            saida->addItem( "idNomeBaixa",idNomeBaixa );
            saida->addItem( "idUsuarioAlteracao",idUsuarioAlteracao );
            saida->addItem( "dtUltimaAlteracao",(char*)dtUltimaAlteracao.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE consulta;

    return true;

}

bool proCObtemWFBaixaLista(int sIdBaixa, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idBaixaPai = sIdBaixa;
        int      idBaixa;
        int      idBaixaHierarquia;
        int      idNomeBaixa;
        VARCHAR  nmBaixa[256];

        short i_idBaixa;
        short i_idBaixaHierarquia;
        short i_idNomeBaixa;
        short i_nmBaixa;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaBaixaLista CURSOR FOR
        SELECT 
            IDBAIXA,
            IDBAIXAHIERARQUIA, 
            IDNOMEBAIXA,
            NMBAIXA
        FROM 
            CONTATOADM.BAIXAHIERARQUIAV01
        WHERE
         INDISPONIBILIDADE = 1
      AND 
            IDBAIXAHIERARQUIA = :idBaixaPai
        START WITH IDBAIXAHIERARQUIA = :idBaixaPai
        CONNECT BY IDBAIXAHIERARQUIA = PRIOR IDBAIXA;
            
    EXEC SQL OPEN consultaBaixaLista;

    while (true)
    {
        EXEC SQL FETCH consultaBaixaLista INTO 
                                    :idBaixa: i_idBaixa, 
                                    :idBaixaHierarquia:i_idBaixaHierarquia,
                                    :idNomeBaixa:i_idNomeBaixa,
                                    :nmBaixa:i_nmBaixa;

        CONVIND(nmBaixa, i_nmBaixa);

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idBaixa",idBaixa );
            saida->addItem( "idNomeBaixa",idNomeBaixa );
            saida->addItem( "idBaixaHierarquia",idBaixaHierarquia );
            saida->addItem( "nmBaixa",(char*)nmBaixa.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaBaixaLista;

    return true;

}

bool proCObtemWFContatoLista(int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContatoPai = sIdContato;
        int      idContato;
        int      idContatoHierarquia;
        int      idNomeContato;
        VARCHAR  nmContato[256];
        int inFolha;

        short i_idContato;
        short i_idContatoHierarquia;
        short i_idNomeContato;
        short i_nmContato;
        short i_inFolha;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaContatoLista CURSOR FOR
        SELECT 
            HIERARQUIA.IDCONTATO,
            HIERARQUIA.IDCONTATOPAI,
            HIERARQUIA.IDNOMECONTATO,
            HIERARQUIA.NMCONTATO,
            DECODE(IDCONTATOFOLHA, NULL, 0, 1 ) AS IDCONTATOFOLHA
        FROM 
            CONTATOADM.CONTATOHIERARQUIAV01 HIERARQUIA,
			CONTATOADM.CONTATO CONTATO
        WHERE
            HIERARQUIA.IDCONTATOPAI = :idContatoPai
		AND HIERARQUIA.IDCONTATO = CONTATO.IDCONTATO
		AND CONTATO.IDTIPOARVORE = (SELECT IDTIPOARVORE
                                      FROM APOIO.TIPOARVORE
                                     WHERE DSTIPOARVORE = 'ÁRVORE DE CONTATOS')
        START WITH
            HIERARQUIA.IDCONTATOPAI = :idContatoPai
        CONNECT BY
            HIERARQUIA.IDCONTATOPAI = PRIOR HIERARQUIA.IDCONTATO;
            
    EXEC SQL OPEN consultaContatoLista;

    while (true)
    {
        EXEC SQL FETCH consultaContatoLista INTO 
                                    :idContato: i_idContato, 
                                    :idContatoHierarquia:i_idContatoHierarquia,
                                    :idNomeContato:i_idNomeContato,
                                    :nmContato:i_nmContato,
                                    :inFolha:i_inFolha;

        CONVIND(nmContato, i_nmContato);

        saida->createTag("AdmContatoFolhaVO");
        saida->addProp("xmlns","admsistemas.fo.vivo.com.br/vo");
            saida->addItem( "idContato",idContato );
            saida->addItem( "idNomeContato",idNomeContato );
            saida->addItem( "idContatoPai",idContatoHierarquia );
            saida->addItem( "nmContato",(char*)nmContato.arr );
            
            proCObtemWFHierarquiaContato(idContato, saida);
            
            saida->addItem( "inFolha",inFolha );
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaContatoLista;

    return true;

}

bool proCObtemWFBaixaContato(int sIdBaixa, int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idBaixaPai = sIdBaixa;
        int      idContato = sIdContato;
        int      idBaixa;
        int      idBaixaHierarquia;
        int      idNomeBaixa;
        VARCHAR  nmBaixa[256];

        short i_idBaixa;
        short i_idBaixaHierarquia;
        short i_idNomeBaixa;
        short i_nmBaixa;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaBaixaContato CURSOR FOR

    SELECT DISTINCT 
        IDBAIXA, 
        IDBAIXAHIERARQUIA,
        IDNOMEBAIXA,
        NMBAIXA
    FROM 
        CONTATOADM.BAIXAHIERARQUIAV01
    WHERE
      INDISPONIBILIDADE = 1
   AND 
        IDBAIXAHIERARQUIA = :idBaixaPai 
    START WITH 
        IDBAIXA IN (SELECT IDBAIXA FROM CONTATOADM.CONTATOFOLHABAIXA WHERE IDCONTATO = :idContato) 
    CONNECT BY 
        PRIOR IDBAIXAHIERARQUIA = IDBAIXA 
    ORDER BY 
        IDBAIXA;
                    
    EXEC SQL OPEN consultaBaixaContato;

    while (true)
    {
        EXEC SQL FETCH consultaBaixaContato INTO 
                                    :idBaixa: i_idBaixa, 
                                    :idBaixaHierarquia:i_idBaixaHierarquia,
                                    :idNomeBaixa:i_idNomeBaixa,
                                    :nmBaixa:i_nmBaixa;

        CONVIND(nmBaixa, i_nmBaixa);

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idBaixa",idBaixa );
            saida->addItem( "idNomeBaixa",idNomeBaixa );
            saida->addItem( "idBaixaHierarquia",idBaixaHierarquia );
            saida->addItem( "nmBaixa",(char*)nmBaixa.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaBaixaContato;

    return true;

}

bool proCObtemWFContatoFolha(int sIdContato, int sIdGrupo, int sIdUFOperadora, int sIdTipoLinha, int sIdTipoCarteira, int sIdSegmentacao, int sIdTipoRelacionamento, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContatoPai = sIdContato;
        int      idGrupo = sIdGrupo;
        int      idUFOperadora = sIdUFOperadora;
        int      idTipoLinha = sIdTipoLinha;
        int      idTipoCarteira = sIdTipoCarteira;
        int      idSegmentacao = sIdSegmentacao;
        int      idTipoRelacionamento = sIdTipoRelacionamento;
        int      idContato;
        int      idContatoHierarquia;
        int      idNomeContato;
        VARCHAR  nmContato[256];
        int inFolha;

        short i_idContato;
        short i_idContatoHierarquia;
        short i_idNomeContato;
        short i_nmContato;
        short i_inFolha;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaContatoFolha CURSOR FOR
        SELECT DISTINCT
            HIERARQUIA.IDCONTATO,
            HIERARQUIA.IDCONTATOPAI,
            HIERARQUIA.IDNOMECONTATO,
            HIERARQUIA.NMCONTATO,
            DECODE(IDCONTATOFOLHA, NULL, 0, 1 ) AS IDCONTATOFOLHA
        FROM 
            CONTATOADM.CONTATOHIERARQUIAV01 HIERARQUIA
        WHERE
            HIERARQUIA.INDISPONIBILIDADE = 1
        AND HIERARQUIA.IDCONTATOPAI = :idContatoPai
        START WITH 
            HIERARQUIA.IDCONTATO IN 
            (
                SELECT 
                    CONTATO.IDCONTATO
                FROM 
                    CONTATOADM.CONTATOFILTROV01 CONTATO
                WHERE
                    CONTATO.IDGRUPO = :idGrupo
                AND CONTATO.IDUFOPERADORA = :idUFOperadora
                AND ( CONTATO.IDTIPOLINHA = :idTipoLinha OR :idTipoLinha = '-1' )
                AND ( CONTATO.IDTIPOCARTEIRA = :idTipoCarteira OR :idTipoCarteira = '-1' )
                AND ( CONTATO.IDSEGMENTACAO = :idSegmentacao OR :idSegmentacao = '-1' )
            )
        CONNECT BY 
            PRIOR HIERARQUIA.IDCONTATOPAI = HIERARQUIA.IDCONTATO 
        ORDER BY 
            HIERARQUIA.IDCONTATO;
            
    EXEC SQL OPEN consultaContatoFolha;

    while (true)
    {
        EXEC SQL FETCH consultaContatoFolha INTO 
                                    :idContato: i_idContato, 
                                    :idContatoHierarquia:i_idContatoHierarquia,
                                    :idNomeContato:i_idNomeContato,
                                    :nmContato:i_nmContato,
                                    :inFolha:i_inFolha;

        CONVIND(nmContato, i_nmContato);

        saida->createTag("AdmContatoFolhaVO");
        saida->addProp("xmlns","admsistemas.fo.vivo.com.br/vo");
            saida->addItem( "idContato",idContato );
            saida->addItem( "idNomeContato",idNomeContato );
            saida->addItem( "idContatoPai",idContatoHierarquia );
            saida->addItem( "nmContato",(char*)nmContato.arr );
            saida->addItem( "inFolha",inFolha );
            proCObtemWFContatoMensagem(idContato, saida);
            proCObtemWFContatoTipoRelacionamento(idContato, idTipoRelacionamento, saida);
            proCObtemWFContatoInformacao(idContato, idUFOperadora, idTipoLinha, idTipoRelacionamento, saida);
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaContatoFolha;

    return true;

}


bool proCObtemWFBaixaAtendimento(int sIdBaixa, XMLGen* saida)
{

    struct sqlca sqlca;


    EXEC SQL BEGIN DECLARE SECTION;

        int      idBaixa = sIdBaixa;
        int      idBaixaHierarquia;
        int      idNomeBaixa;
        int     level;
        VARCHAR  nmBaixa[800];

        short i_idBaixaHierarquia;
        short i_idNomeBaixa;
        short i_nmBaixa;
        short i_level;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaBaixaAtendimento CURSOR FOR

    SELECT 
        HIERARQUIA.IDBAIXAHIERARQUIA,
        HIERARQUIA.IDNOMEBAIXA,
        LEVEL, 
        SYS_CONNECT_BY_PATH(REPLACE(HIERARQUIA.NMBAIXA, '/', '\'), '/') AS PATH  
    FROM 
        CONTATOADM.BAIXAHIERARQUIAV01 HIERARQUIA 
    WHERE 
        IDBAIXA = :idBaixa
    START WITH 
        HIERARQUIA.IDBAIXAHIERARQUIA =  (SELECT IDBAIXA
            
        FROM 
            CONTATOADM.BAIXA
        WHERE 
            IDBAIXA NOT IN 
                (SELECT HIERARQUIA.IDBAIXA
                        FROM CONTATOADM.BAIXAHIERARQUIA HIERARQUIA 
                        WHERE HIERARQUIA.IDBAIXA > 0) 
            AND ROWNUM <= 1)
    CONNECT BY 
        HIERARQUIA.IDBAIXAHIERARQUIA = PRIOR HIERARQUIA.IDBAIXA 
    ORDER BY 
        LEVEL;
                    
    EXEC SQL OPEN consultaBaixaAtendimento;

    while (true)
    {
        EXEC SQL FETCH consultaBaixaAtendimento INTO 
                                    :idBaixaHierarquia:i_idBaixaHierarquia,
                                    :idNomeBaixa:i_idNomeBaixa,
                                    :level:i_level, 
                                    :nmBaixa:i_nmBaixa;

        CONVIND(nmBaixa, i_nmBaixa);

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idBaixa",idBaixa );
            saida->addItem( "idNomeBaixa",idNomeBaixa );
            saida->addItem( "level",level );
            saida->addItem( "nmBaixa",(char*)nmBaixa.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaBaixaAtendimento;

    return true;

}

bool proCObtemWFContatoAtendimento(int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContato = sIdContato;
        int      idContatoPai;
        int      idNomeContato;
        int      level;
        VARCHAR  nmContato[800];

        short    i_idContatoPai;
        short    i_idNomeContato;
        short    i_level;
        short    i_nmContato;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaContatoAtendimento CURSOR FOR
    SELECT 
        HIERARQUIA.IDCONTATOPAI,
        HIERARQUIA.IDNOMECONTATO,
        LEVEL, 
        SYS_CONNECT_BY_PATH(REPLACE(HIERARQUIA.NMCONTATO, '/', '\'), '/') AS PATH 
    FROM 
        CONTATOADM.CONTATOHIERARQUIAV01 HIERARQUIA, 
		CONTATOADM.CONTATO CONTATO
    WHERE 
        HIERARQUIA.IDCONTATO = :idContato
		AND HIERARQUIA.IDCONTATO = CONTATO.IDCONTATO
		AND CONTATO.IDTIPOARVORE = (SELECT IDTIPOARVORE
                                      FROM APOIO.TIPOARVORE
                                     WHERE DSTIPOARVORE = 'ÁRVORE DE CONTATOS')
    START WITH 
        HIERARQUIA.IDCONTATOPAI = 1
    CONNECT BY 
        HIERARQUIA.IDCONTATOPAI = PRIOR HIERARQUIA.IDCONTATO 
    ORDER BY 
        LEVEL;
                    
    EXEC SQL OPEN consultaContatoAtendimento;

    while (true)
    {
        EXEC SQL FETCH consultaContatoAtendimento INTO 
                                    :idContatoPai:i_idContatoPai,
                                    :idNomeContato:i_idNomeContato,
                                    :level:i_level, 
                                    :nmContato:i_nmContato;

        CONVIND(nmContato, i_nmContato);

        saida->createTag("WFAtendimentoBaixaVO");
            saida->addItem( "idContato",idContato );
            saida->addItem( "idNomeContato",idNomeContato );
            saida->addItem( "level",level );
            saida->addItem( "nmContato",(char*)nmContato.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE consultaContatoAtendimento;

    return true;

}

bool proCObtemWFContatoRaiz(int sIdContato, XMLGen* saida)
{

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int      idContatoPai = sIdContato;
        int      idContato;
        int      idNomeContato;
        VARCHAR  nmContato[256];
        int inDisponibilidade;

        short i_idContato;
        short i_idNomeContato;
        short i_nmContato;
        short i_inDisponibilidade;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoBaixa(&sqlca);
    // EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    /*
    EXEC SQL DECLARE consultaContatoRaiz CURSOR FOR
        SELECT 
            IDCONTATO, 
            IDNOMECONTATO, 
            NMCONTATO, 
            INDISPONIBILIDADE
        FROM 
            CONTATOADM.CONTATOB01
        WHERE 
            IDCONTATO NOT IN 
                (SELECT HIERARQUIA.IDCONTATO
                        FROM CONTATOADM.CONTATOHIERARQUIA HIERARQUIA 
                        WHERE HIERARQUIA.IDCONTATO > 0) 
            AND ROWNUM <= 1;
    */
            
    EXEC SQL
        SELECT 
            CONTATO.IDCONTATO, 
            NOMECONTATO.IDNOMECONTATO, 
            NOMECONTATO.NMCONTATO, 
            CONTATO.INDISPONIBILIDADE
        INTO
            :idContato: i_idContato, 
            :idNomeContato:i_idNomeContato,
            :nmContato:i_nmContato,
            :inDisponibilidade:i_inDisponibilidade
        FROM 
            CONTATOADM.NOMECONTATO NOMECONTATO,
            CONTATOADM.CONTATO CONTATO
        WHERE 
            CONTATO.IDNOMECONTATO = NOMECONTATO.IDNOMECONTATO
        AND
            CONTATO.IDCONTATO 
        NOT IN 
            (
                SELECT 
                    HIERARQUIA.IDCONTATO
                FROM 
                    CONTATOADM.CONTATOHIERARQUIA HIERARQUIA 
                --//WHERE 
                --//    HIERARQUIA.IDCONTATO > 0
            ) 
        AND ROWNUM < 2;

    CONVIND(nmContato, i_nmContato);

    saida->createTag("WFAtendimentoContatoVO");
        saida->addItem( "idContato",idContato );
        saida->addItem( "idNomeContato",idNomeContato );
        saida->addItem( "nmContato",(char*)nmContato.arr );
        saida->addItem( "inDisponibilidade",inDisponibilidade );
    saida->closeTag();

    // EXEC SQL OPEN consultaContatoRaiz;

    /* @Marcelo Retirar B01
    while (true)
    {
        EXEC SQL FETCH consultaContatoRaiz INTO 
                                    :idContato: i_idContato, 
                                    :idNomeContato:i_idNomeContato,
                                    :nmContato:i_nmContato,
                                    :inDisponibilidade:i_inDisponibilidade;

        CONVIND(nmContato, i_nmContato);

        saida->createTag("WFAtendimentoContatoVO");
            saida->addItem( "idContato",idContato );
            saida->addItem( "idNomeContato",idNomeContato );
            saida->addItem( "nmContato",(char*)nmContato.arr );
            saida->addItem( "inDisponibilidade",inDisponibilidade );
        saida->closeTag();
    }
    */

    // EXEC SQL CLOSE consultaContatoRaiz;

    return true;

}

void sql_error_WFAtendimentoBaixa(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
