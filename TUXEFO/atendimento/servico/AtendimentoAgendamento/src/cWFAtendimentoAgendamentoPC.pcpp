#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoAgendamento.h"
#include "../include/stWFAtendimentoAgendamento.h"

void sql_error_WFAtendimentoAgendamento(sqlca*sqlca);

    // Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stWFAtendimentoAgendamento.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoAgendamento(st_AtendimentoAgendamento* dados, st_vlAtendimentoAgendamento* status, XMLGen* saida)
{
    ULOG_START( "proCIncluirWFAtendimentoAgendamento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoAgendamento   oDados;
        struct st_vlAtendimentoAgendamento oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoAgendamento(&sqlca);

    EXEC SQL SELECT atendimento.AtendimentoAgendamentoSQ.NEXTVAL INTO :oDados.idAtendimentoAgendamento FROM DUAL;

    EXEC SQL 
        INSERT INTO
            ATENDIMENTO.ATENDIMENTOAGENDAMENTO
            (
                IDATENDIMENTOAGENDAMENTO,
                IDATENDIMENTO,
                IDANDAMENTO,
                IDGRUPO,
                DTATENDIMENTOAGENDAMENTO,
                DTULTIMAALTERACAO,
                IDUSUARIOALTERACAO
            )
            VALUES
            (
                :oDados.idAtendimentoAgendamento,
                :oDados.idAtendimento,
                :oDados.idAndamento,
                :oDados.idGrupo,
                TO_DATE(DECODE(:oStatus.dtAtendimentoAgendamento, -1, NULL, :oDados.dtAtendimentoAgendamento),'DD/MM/YYYY HH24:MI:SS'),
                SYSDATE,
                NULL
            );

    saida->createTag("Registro");
        saida->addItem("idAtendimentoAgendamento", oDados.idAtendimentoAgendamento);
    saida->closeTag();

    ULOG_END( "proCIncluirWFAtendimentoAgendamento()" );

    return true;
}

bool proCAlterarWFAtendimentoAgendamento(st_AtendimentoAgendamento* dados, st_vlAtendimentoAgendamento* status, XMLGen* saida)
{
    ULOG_START( "proCAlterarWFAtendimentoAgendamento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtendimentoAgendamento   oDados;
        struct st_vlAtendimentoAgendamento oStatus;

        char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoAgendamento(&sqlca);

    memcpy(&oDados,  dados,  sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    sprintf(query,"%s", "UPDATE atendimento.AtendimentoAgendamento SET ");

    bool separa = false;

    if (status->dtAtendimentoAgendamento != -1)
        montaUpdate("dtAtendimentoAgendamento", oDados.dtAtendimentoAgendamento, 4);

    if (status->idAtendimento != -1) 
        montaUpdate("idAtendimento", oDados.idAtendimento, 1);

    if (status->idAndamento != -1) 
        montaUpdate("idAndamento", oDados.idAndamento, 1);

    sprintf(query, "%s WHERE idAtendimentoAgendamento = %ld", query, dados->idAtendimentoAgendamento);

    ULOG( "QUERY [%s]",query );

    EXEC SQL EXECUTE IMMEDIATE :query;

    ULOG_END( "proCAlterarWFAtendimentoAgendamento()" );

    return true;
}

bool proCExcluirWFAtendimentoAgendamento(st_AtendimentoAgendamento* dados, st_vlAtendimentoAgendamento* status, XMLGen* saida)
{
    ULOG_START( "proCExcluirWFAtendimentoAgendamento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoAgendamento = dados->idAtendimentoAgendamento;

    EXEC SQL END DECLARE SECTION;

    ULOG( "idAtendimentoAgendamento [%d]",idAtendimentoAgendamento );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoAgendamento(&sqlca);

    EXEC SQL 
        DELETE
            atendimento.AtendimentoAgendamento
        WHERE
            idAtendimentoAgendamento = :idAtendimentoAgendamento;

    ULOG_END( "proCExcluirWFAtendimentoAgendamento()" );

    return true;
}

bool proCConsultaWFAtendimentoAgendamento(st_AtendimentoAgendamento* dados, st_vlAtendimentoAgendamento* status, char* order, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFAtendimentoAgendamento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimentoAgendamento;
        long idAtendimento;
        VARCHAR dtAtendimentoAgendamento[256];

        char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    sprintf(query,"SELECT idAtendimentoAgendamento, idAtendimento, TO_CHAR(dtAtendimentoAgendamento,'dd/mm/yyyy hh24:mi') FROM atendimento.AtendimentoAgendamento ");

    bool separa = false;

    if (status->idAtendimentoAgendamento != -1) 
        montaWhere("idAtendimentoAgendamento", dados->idAtendimentoAgendamento, 1);

    if (status->idAtendimento != -1)
        montaWhere("idAtendimento", dados->idAtendimento, 1);

    if (status->dtAtendimentoAgendamento != -1) 
        montaWhere("dtAtendimentoAgendamento", dados->dtAtendimentoAgendamento, 4);

    if (strlen(order) > 0) 
        sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoAgendamento(&sqlca);

    ULOG( "QUERY [%s]",query );

    EXEC SQL PREPARE consultaAtendimentoAgendamento FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoAgendamento;

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO :idAtendimentoAgendamento, :idAtendimento, :dtAtendimentoAgendamento;

        CONV(dtAtendimentoAgendamento);

        saida->createTag("WFAtendimentoAgendamentoVO");
            saida->addItem("idAtendimentoAgendamento", idAtendimentoAgendamento);
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("dtAtendimentoAgendamento", (char *)dtAtendimentoAgendamento.arr);
        saida->closeTag();
    }

    EXEC SQL CLOSE consulta;

    ULOG_END( "proCConsultaWFAtendimentoAgendamento()" );

    return true;

}

void sql_error_WFAtendimentoAgendamento(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
