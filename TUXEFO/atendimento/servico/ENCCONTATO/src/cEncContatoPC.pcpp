 /**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Renato Teixeira
 * @version $Revision: 1.1.2.8 $
 * @CVS     $Author: a5116174 $ - $Date: 2011/08/12 17:11:14 $
 **/

#include "../include/cEncContatoPC.h"
#include"../../../commons/msgPadrao.h"

/**
    Retorna a data atual do banco de dados para ser usada como parametro das demais chamadas.
    Existe uma AK na tabela de atendimento.andamento que não permite dois registros do mesmo
    atendimento tenham o mesmo horario de gravação, como essa função pode ser chamada no mesmo 
    segundo que a função da abertura, e grava assim um segundo registro de andamento, para que
    não ocorra o conflito foi adicionado alguns minutos no andamento.
*/
void cEncContatoPC::dataAtual(char* data)
{

    ULOG_START( "cEncContatoPC::dataAtual()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR dataAtual[64];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);

    // Os 2s abaixo são somados a data para que a data/hora do andamento
    // não fique exatamente igual à data/hora da abertura, causando com
    // isso uma falha no ORDER BY por DTANDAMENTO para o processo e 
    // evitando que queries possam obter a sequencia do que ocorreu
    // primeiro.
    EXEC SQL 
        SELECT
            TO_CHAR(SYSDATE+0.00002, 'DD/MM/YYYY HH24:MI')
        INTO    
            :dataAtual
        FROM
            dual;

    CONV(dataAtual)

    strcpy(data, (char*) dataAtual.arr);

    ULOG( "Encaminha Contato - Dados obtidos - dataAtual = [%s]", data );

    ULOG_END( "cEncContatoPC::dataAtual()" );

}

void cEncContatoPC::dataAndamento(char* data)
{

    ULOG_START( "cEncContatoPC::dataAndamento()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR dataAtual[64];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);

    EXEC SQL 
        SELECT
            TO_CHAR(SYSDATE+0.000002, 'DD/MM/YYYY HH24:MI:SS')
        INTO    
            :dataAtual
        FROM
            DUAL;

    CONV(dataAtual)

    strcpy(data, (char*) dataAtual.arr);

    ULOG("Data de Andamento = [%s]", data );

    ULOG_END( "cEncContatoPC::dataAndamento()" );

}

void cEncContatoPC::proCDataEntrada(long sIdAtendimento, char* telefone, char* data)
{

    ULOG_START( "cEncContatoPC::proCDataEntrada()" );

    struct sqlca sqlca;

    int prefixo = 0;

    if ( telefone && strlen(telefone) > 0 )
    {
        char cConv[3];

        if ( telefone[0] == '0' ) 
        {
            memcpy(cConv,telefone+1,2);
        }
        else
        {
            memcpy(cConv,telefone,2);
        }
        cConv[2]=0;
        prefixo = atoi(cConv);
    }
    else
    {
        prefixo = 11;
    }

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = sIdAtendimento;
        long idAtendimentoOrigem;
        int cdAreaRegistro = prefixo;

        VARCHAR dataEntrada[64];
        short i_idAtendimentoOrigem = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);

    EXEC SQL
        SELECT
            IDATENDIMENTOORIGEM
        INTO
            idAtendimentoOrigem:i_idAtendimentoOrigem
        FROM
            (SELECT 
                IDATENDIMENTOORIGEM
            FROM 
                ATENDIMENTO.ATENDIMENTOORIGEM
            START WITH IDATENDIMENTO = :idAtendimento
            CONNECT BY PRIOR IDATENDIMENTOORIGEM = IDATENDIMENTO
            ORDER BY LEVEL desc)
        WHERE ROWNUM <= 1;

    if (i_idAtendimentoOrigem == -1)
        idAtendimentoOrigem = idAtendimento;

    EXEC SQL 
        SELECT TO_CHAR(dtdia, 'DD/MM/YYYY')
        INTO    
            :dataEntrada
        FROM
        (
        SELECT b.dtDia
        FROM
        (SELECT a.dtAbertura + d.dia as dtDia
        FROM atendimento.atendimento a,
             calendario.dia d
        where idAtendimento = :idAtendimentoOrigem) b,
        (SELECT ar.cdAreaRegistro, f.dtDia
            FROM apoio.AreaRegistro ar,
             customer.UfOperadora uo,
             apoio.UF uf,
             calendario.UfFeriado uff,
             calendario.Feriado f
            WHERE    ar.CDAREAREGISTRO = :cdAreaRegistro
                 AND ar.idUfOperadora = uo.idUfOperadora
                 AND uo.idUF = uf.idUF
                 AND uf.idUf = uff.idUf 
                 AND uff.idFeriado = f.idFeriado) a
        where TRUNC(b.dtdia) = a.dtdia (+)
        AND a.cdAreaRegistro IS NULL 
        AND TO_CHAR(b.dtDia, 'D') NOT IN (1, 7)
        order by b.dtdia)
        where rownum <= 1;

    CONV(dataEntrada)

    strcpy(data, (char*) dataEntrada.arr);

    ULOG("dataEntrada = [%s]", data );

    ULOG_END( "cEncContatoPC::proCDataEntrada()" );

}

/**
    Retorna o id da mensagem de baixa.  
*/
int cEncContatoPC::obtemSequencia(int _idGrupo, int _idContato)
{
    ULOG_START( "cEncContatoPC::obtemSequencia()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int paramOraIdGrupo = _idGrupo;
        int paramOraIdContato = _idContato;

        int varOraIdSequencia;
        short statOraIdSequencia = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato(&sqlca);

    EXEC SQL 
        SELECT
            SEQUENCIA.IDSEQUENCIA
        INTO
            :varOraIdSequencia:statOraIdSequencia
        FROM
            CONTATOADM.SEQUENCIA SEQUENCIA,
            CONTATOADM.CONTATOGRUPO CONTATOGRUPO
        WHERE
            CONTATOGRUPO.IDCONTATOGRUPO = SEQUENCIA.IDCONTATOGRUPO
        AND CONTATOGRUPO.IDGRUPO = :paramOraIdGrupo
        AND CONTATOGRUPO.IDCONTATO = :paramOraIdContato
        AND SEQUENCIA.IDTIPOSEQUENCIA = 2
        AND ROWNUM < 2;

    if (sqlca.sqlcode || statOraIdSequencia == -1)
    {
        varOraIdSequencia = -1;
    }

    ULOG("idSequencia=%d", varOraIdSequencia);

    ULOG_END( "cEncContatoPC::obtemSequencia()" );

    return varOraIdSequencia;
}

/**
    Gerente de conta
*/
bool cEncContatoPC::proCObtemGerentePJ(int idPessoaDeParaCliente,int *idPessoaUsuarioGerentePJ,int *idGrupoAtualGerentePJ)
{
    ULOG_START( "cEncContatoPC::proCObtemGerentePJ()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int pInOraIdPessoaDeParaCliente = idPessoaDeParaCliente;

        int varOraIdPessoaUsuario;
        short statOraIdPessoaUsuario=-1;

        int varOraIdGrupo;
        short statOraIdGrupo=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idPessoaDeParaCliente=%d",pInOraIdPessoaDeParaCliente);

    EXEC SQL
        SELECT
            USUARIO.IDPESSOAUSUARIO
        INTO
            :varOraIdPessoaUsuario:statOraIdPessoaUsuario
        FROM 
            CUSTOMER.PESSOAGESTOR PESSOAGESTOR,
            CUSTOMER.PESSOAGESTORCONTA PESSOAGESTORCONTA ,
            CUSTOMER.PESSOADEPARA PESSOADEPARA,
            CUSTOMER.PESSOACONTA PESSOACONTA,
            CUSTOMER.DOCUMENTO DOCUMENTO,
            CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
            ACESSO.USUARIO USUARIO,
            APOIO.STATUSUSUARIO STATUSUSUARIO 
        WHERE
            PESSOADEPARA.IDPESSOADEPARA = :pInOraIdPessoaDeParaCliente
        AND PESSOADEPARA.IDPESSOADEPARA = PESSOACONTA.IDPESSOADEPARA
        AND PESSOACONTA.IDTIPORELACIONAMENTO = 2
        AND PESSOACONTA.IDCONTA = PESSOAGESTORCONTA.IDCONTA
        AND PESSOAGESTORCONTA.NRDOCUMENTO = PESSOAGESTOR.NRDOCUMENTO
        AND PESSOAGESTOR.NRDOCUMENTO = DOCUMENTO.NRDOCUMENTO
        AND PESSOAGESTOR.IDTIPODOCUMENTO = DOCUMENTO.IDTIPODOCUMENTO
        AND DOCUMENTO.IDDOCUMENTO = PESSOADOCUMENTO.IDDOCUMENTO
        AND PESSOADOCUMENTO.IDPESSOA = USUARIO.IDPESSOAUSUARIO
        AND USUARIO.IDSTATUSUSUARIO = STATUSUSUARIO.IDSTATUSUSUARIO
        AND STATUSUSUARIO.SGSTATUSUSUARIO = 'ATIVO'
        AND ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        ULOG_END( "cEncContatoPC::proCObtemGerentePJ() ==> GESTOR NOT FOUND" );
        return false;
    }

    ULOG("Vai buscar grupo do gerente %d",varOraIdPessoaUsuario);

    EXEC SQL 
        SELECT 
            GRUPO.IDGRUPO
        INTO
            :varOraIdGrupo:statOraIdGrupo
        FROM
            ACESSO.USUARIOGRUPO USUARIOGRUPO,
            ACESSO.GRUPO GRUPO,
            APOIO.TIPOGRUPO TIPOGRUPO
            WHERE USUARIOGRUPO.IDPESSOAUSUARIO = :varOraIdPessoaUsuario
        AND USUARIOGRUPO.IDGRUPO = GRUPO.IDGRUPO
        AND GRUPO.DTEXCLUSAO IS NULL
        AND GRUPO.IDTIPOGRUPO =TIPOGRUPO.IDTIPOGRUPO
        AND TIPOGRUPO.CDTIPOGRUPO = 'NORMAL'
        AND ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        ULOG_END( "cEncContatoPC::proCObtemGerentePJ() ==> GRUPO NOT FOUND" );
        return false;
    }

    *idGrupoAtualGerentePJ = varOraIdGrupo;
    *idPessoaUsuarioGerentePJ = varOraIdPessoaUsuario;
    
    ULOG("idGrupoAtualGerentePJ=%d",idGrupoAtualGerentePJ);

    ULOG_END( "cEncContatoPC::proCObtemGerentePJ()" );

    return true;
}

/**
    Gestor PJ
*/
bool cEncContatoPC::proCObtemGestorPJ(const char *nrDocumento, int *idPessoaUsuarioGestorPJ,int *idGrupoAtualGestorPJ)
{
    ULOG_START( "cEncContatoPC::proCObtemGestorPJ()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *varOraNrDocumento = nrDocumento;
        
        int varOraCount;
        int varOraIdPessoaUsuario = -1;
        int varOraIdPessoaUsuarioPrimeiro = -1;

        int varOraIdGrupoGestor=-1;
        short statOraIdGrupoGestor=-1;

        VARCHAR varOraSgStatusUsuario[256];
        short statOraSgStatusUsuario;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato(&sqlca);

    EXEC SQL DECLARE cursorGestorPJ CURSOR FOR
        SELECT
            PESSOACONSULTOR.IDPESSOA
        FROM
            CUSTOMER.PESSOACONSULTOR PESSOACONSULTOR
        WHERE
            PESSOACONSULTOR.NRDOCUMENTO = :varOraNrDocumento;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN cursorGestorPJ;

    bool encontrou = false;

    // GestorPJ1 ativo? vai pra ele else GestorPJ2 ativo? vai pra ele senão supervisor do GestorPJ1 senão cri mesmo

    while(true)
    {
        EXEC SQL FETCH cursorGestorPJ INTO :varOraIdPessoaUsuario;

        ULOG( "idPessoaUsuarioGestor=%d",varOraIdPessoaUsuario );

        if ( varOraIdPessoaUsuarioPrimeiro == -1 )
        {
            varOraIdPessoaUsuarioPrimeiro = varOraIdPessoaUsuario;
        }

        EXEC SQL WHENEVER NOT FOUND CONTINUE;
        EXEC SQL 
            SELECT
                COUNT(1)
            INTO
                :varOraCount
            FROM
                ACESSO.USUARIO USUARIO,
                APOIO.STATUSUSUARIO STATUSUSUARIO
            WHERE
                USUARIO.IDPESSOAUSUARIO = :varOraIdPessoaUsuario
            AND USUARIO.IDSTATUSUSUARIO = STATUSUSUARIO.IDSTATUSUSUARIO
            AND STATUSUSUARIO.SGSTATUSUSUARIO = 'ATIVO';

        if ( varOraCount )
        { 
            encontrou = true;
            break; 
        }
    }

    EXEC SQL CLOSE cursorGestorPJ;

    if ( !encontrou )
    {
        if ( varOraIdPessoaUsuarioPrimeiro != -1 )
        { // ultimo gestor inativo tb? verifica o chefe do primeiro gestor
            statOraSgStatusUsuario=-1;
            EXEC SQL 
                SELECT 
                    USUARIO.IDPESSOAUSUARIO,
                    STATUSUSUARIO.SGSTATUSUSUARIO
                INTO
                    :varOraIdPessoaUsuario,
                    :varOraSgStatusUsuario:statOraSgStatusUsuario
                FROM
                    ACESSO.USUARIO USUARIO,
                    ACESSO.USUARIOHIERARQUIA USUARIOHIERARQUIA,
                    APOIO.STATUSUSUARIO STATUSUSUARIO
                WHERE
                    USUARIOHIERARQUIA.IDPESSOAUSUARIO = :varOraIdPessoaUsuarioPrimeiro
                AND USUARIOHIERARQUIA.IDPESSOAUSUARIOCHEFE = USUARIO.IDPESSOAUSUARIO
                AND USUARIO.IDSTATUSUSUARIO = STATUSUSUARIO.IDSTATUSUSUARIO;

                if ( sqlca.sqlcode==0 )
                {
                    CONVIND(varOraSgStatusUsuario,statOraSgStatusUsuario);
                    if (strcmp((char*)varOraSgStatusUsuario.arr,"ATIVO")==0 )
                    {
                        encontrou = true;
                        varOraIdPessoaUsuarioPrimeiro = varOraIdPessoaUsuario;
                    }
                }
        } // if ( varOraIdPessoaUsuarioPrimeiro != -1 )

        varOraIdPessoaUsuario = varOraIdPessoaUsuarioPrimeiro;
    }

    if ( encontrou )
    { // obtem um grupo do qual o gestor participa
        EXEC SQL 
            SELECT 
                GRUPO.IDGRUPO
            INTO
                :varOraIdGrupoGestor:statOraIdGrupoGestor
            FROM
                ACESSO.USUARIOGRUPO USUARIOGRUPO,
                ACESSO.GRUPO GRUPO,
                APOIO.TIPOGRUPO TIPOGRUPO
                WHERE USUARIOGRUPO.IDPESSOAUSUARIO = :varOraIdPessoaUsuario
            AND USUARIOGRUPO.IDGRUPO = GRUPO.IDGRUPO
            AND GRUPO.DTEXCLUSAO IS NULL
            AND GRUPO.IDTIPOGRUPO =TIPOGRUPO.IDTIPOGRUPO
            AND TIPOGRUPO.CDTIPOGRUPO = 'NORMAL'
            AND ROWNUM < 2;
        
        *idGrupoAtualGestorPJ = varOraIdGrupoGestor;

        if ( sqlca.sqlcode ) { encontrou = false; }
    }

    *idPessoaUsuarioGestorPJ = varOraIdPessoaUsuario;

    ULOG( "encontrou=%d,idPessoaUsuarioGestor=%d,varOraIdGrupoGestor=%d",encontrou,varOraIdPessoaUsuario,varOraIdGrupoGestor );

    ULOG_END( "cEncContatoPC::proCObtemGestorPJ()" );

    return encontrou;
}

/**
    Destino Possivel do Processo
*/
void cEncContatoPC::proCDestinoPossivel(int idFormulario,int idContato,int idTipoCarteira,int idSegmentacao,int idUfOperadora,char *idDestPossFormulario)
{
    ULOG_START( "cEncContatoPC::proCDestinoPossivel()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int pInOraIdFormulario = idFormulario;
        int pInOraIdContato = idContato;
        int pInOraIdTipoCarteira = idTipoCarteira;
        int pInOraIdSegmentacao = idSegmentacao;
        int pInOraIdUfOperadora = idUfOperadora;

        VARCHAR varOraIdDestPossFormulario[11];
        short statOraIdDestPossFormulario=-1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("  idFormulario=%d",pInOraIdFormulario);
    ULOG("     idContato=%d",pInOraIdContato);
    ULOG("idTipoCarteira=%d",pInOraIdTipoCarteira);
    ULOG(" idSegmentacao=%d",pInOraIdSegmentacao);
    ULOG(" idUfOperadora=%d",pInOraIdUfOperadora);

    EXEC SQL
        SELECT 
            IDDESTPOSSFORMULARIO
        INTO
            :varOraIdDestPossFormulario:statOraIdDestPossFormulario
        FROM
        (
            SELECT 
                DESTPOSSFORMULARIO.IDDESTPOSSFORMULARIO,
                DESTPOSSFORMULARIO.NRPESO
            FROM
                APOIO.ENCAMINHAFDRULE ENCAMINHAFDRULE,
                APOIO.DESTPOSSFORMULARIO DESTPOSSFORMULARIO,
                CONTATOADM.ENCAMINHAFDRULECARTEIRA ENCAMINHAFDRULECARTEIRA,
                CONTATOADM.ENCAMINHAFDRULESEGMENTACAO ENCAMINHAFDRULESEGMENTACAO,
                CONTATOADM.ENCAMINHAFDRULEUFOPERADORA ENCAMINHAFDRULEUFOPERADORA,
                CONTATOADM.ENCAMINHAFDRULEDESTPOSSIVEL ENCAMINHAFDRULEDESTPOSSIVEL,
                CONTATOADM.FORMULARIOENCAMINHAFDRULE FORMULARIOENCAMINHAFDRULE,
                CONTATOADM.FUNCIONALIDADEFRM FUNCIONALIDADEFRM
            WHERE
                ENCAMINHAFDRULE.IDENCAMINHAFDRULE = ENCAMINHAFDRULECARTEIRA.IDENCAMINHAFDRULE
            AND ENCAMINHAFDRULE.IDENCAMINHAFDRULE = ENCAMINHAFDRULESEGMENTACAO.IDENCAMINHAFDRULE
            AND ENCAMINHAFDRULE.IDENCAMINHAFDRULE = ENCAMINHAFDRULEUFOPERADORA.IDENCAMINHAFDRULE
            AND ENCAMINHAFDRULE.IDENCAMINHAFDRULE = ENCAMINHAFDRULEDESTPOSSIVEL.IDENCAMINHAFDRULE
            AND ENCAMINHAFDRULE.IDENCAMINHAFDRULE = FORMULARIOENCAMINHAFDRULE.IDENCAMINHAFDRULE
            AND DESTPOSSFORMULARIO.IDDESTPOSSFORMULARIO = ENCAMINHAFDRULEDESTPOSSIVEL.IDDESTPOSSFORMULARIO
            AND FORMULARIOENCAMINHAFDRULE.IDFORMULARIO = FUNCIONALIDADEFRM.IDFORMULARIO
            --//AND FUNCIONALIDADEFRM.INATIVO = 0
            AND FUNCIONALIDADEFRM.IDCONTATO = :pInOraIdContato
            AND FUNCIONALIDADEFRM.IDFORMULARIO = :pInOraIdFormulario
            AND ENCAMINHAFDRULECARTEIRA.IDTIPOCARTEIRA = :pInOraIdTipoCarteira
            AND ENCAMINHAFDRULESEGMENTACAO.IDSEGMENTACAO = :pInOraIdSegmentacao
            AND ENCAMINHAFDRULEUFOPERADORA.IDUFOPERADORA = :pInOraIdUfOperadora
            ORDER BY
                DESTPOSSFORMULARIO.NRPESO DESC
        )
        WHERE
            ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        EXEC SQL
            SELECT 
                IDDESTPOSSFORMULARIO
            INTO
                :varOraIdDestPossFormulario:statOraIdDestPossFormulario
            FROM
                APOIO.DESTPOSSFORMULARIO
            WHERE
                IDDESTPOSSFORMULARIO = 'CR';

        if ( sqlca.sqlcode )
        {
            strcpy((char*)varOraIdDestPossFormulario.arr,"CR");
            varOraIdDestPossFormulario.len=2;
            ULOG_END( "cEncContatoPC::proCDestinoPossivel() ==> NOT FOUND (usado default forçado)" );
        }
        else
        {
            ULOG_END( "cEncContatoPC::proCDestinoPossivel() ==> NOT FOUND (usado default)" );
        }
    }
    else
    {
        ULOG_END( "cEncContatoPC::proCDestinoPossivel()" );
    }

    CONVIND(varOraIdDestPossFormulario,statOraIdDestPossFormulario);
    strcpy(idDestPossFormulario,(char*)varOraIdDestPossFormulario.arr);

    ULOG("idDestPossFormulario=%s",idDestPossFormulario);
}

// ==> Remodelagem Atendimento--Fev/2007--Cassio
// bool cEncContatoPC::existeContatoLinha(int _idContato, long _idPessoaLinhaHistorico)
// {
//     ULOG_START( "cEncContatoPC::existeContatoLinha()" );
// 
//     struct sqlca sqlca;
// 
//         EXEC SQL BEGIN DECLARE SECTION;
// 
//         int idContato               = _idContato;
//         long idPessoaLinhaHistorico  = _idPessoaLinhaHistorico;
//         int nLinhas=0;
// 
//         EXEC SQL END DECLARE SECTION;
// 
//         EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);
// 
//     EXEC SQL
//         SELECT
//             COUNT(1)
//         INTO
//             :nLinhas
//         FROM
//             atendimento.AtendimentoContatoLinha
//         WHERE
//             IDCONTATO = :idContato
//         AND
//             IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico;
// 
//     ULOG( "nLinhas = %d",nLinhas );
// 
//     ULOG( "idContato = %d",idContato );
// 
//     ULOG( "idPessoaLinhaHistorico = %ld",idPessoaLinhaHistorico );
// 
// 
//     ULOG_END( "cEncContatoPC::existeContatoLinha()" );
// 
//     return nLinhas > 0 ? true : false;
// }

// ==> Remodelagem Atendimento--Fev/2007--Cassio 
// void cEncContatoPC::atualizarContatoLinha(long _idAtendimento, int _idContato, int _idPessoaLinhaHistorico, int _idUsuarioAlteracao)
// {
//     ULOG_START( "cEncContatoPC::atualizarContatoLinha()" );
// 
//     struct sqlca sqlca;
// 
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         long idAtendimento           = _idAtendimento;
//         int idContato               = _idContato;
//         int idPessoaLinhaHistorico  = _idPessoaLinhaHistorico;
//         int idUsuarioAlteracao      = _idUsuarioAlteracao;
// 
//     EXEC SQL END DECLARE SECTION;
// 
//     EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato(&sqlca);
// 
//     ULOG( "idUsuarioAlteracao = %d",idUsuarioAlteracao );
// 
//     ULOG( "idAtendimento = %d",idAtendimento );
// 
//     ULOG( "idContato = %d",idContato );
// 
//     ULOG( "idPessoaLinhaHistorico = %d",idPessoaLinhaHistorico);
// 
//     EXEC SQL
//         UPDATE atendimento.AtendimentoContatoLinha
//         SET
//             IDUSUARIOALTERACAO = :idUsuarioAlteracao
//            ,DTULTIMAALTERACAO = SYSDATE
//            ,IDATENDIMENTO = :idAtendimento
//         WHERE
//             IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico
//         AND
//             IDCONTATO = :idContato;
// 
//     ULOG_END( "cEncContatoPC::atualizarContatoLinha()" );
// }

// ==> Remodelagem Atendimento--Fev/2007--Cassio 
// void cEncContatoPC::registraContatoLinha(long _idAtendimento, int _idContato, int _idPessoaLinhaHistorico, int _idUsuarioAlteracao)
// {
//     ULOG_START( "cEncContatoPC::registraContatoLinha()" );
// 
//     struct sqlca sqlca;
// 
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         long idAtendimento           = _idAtendimento;
//         int idContato               = _idContato;
//         int idPessoaLinhaHistorico  = _idPessoaLinhaHistorico;
//         int idUsuarioAlteracao      = _idUsuarioAlteracao;
// 
//     EXEC SQL END DECLARE SECTION;
// 
//     ULOG( "idUsuarioAlteracao=%d",idUsuarioAlteracao);
// 
//     ULOG( "idAtendimento=%d",idAtendimento);
// 
//     ULOG( "idContato=%d",idContato);
// 
//     ULOG( "idPessoaLinhaHistorico=%d",idPessoaLinhaHistorico);
// 
//     EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);
// 
//     EXEC SQL
//         INSERT INTO
//             atendimento.AtendimentoContatoLinha
//             (
//                 idAtendimento,
//                 idContato,
//                 idPessoaLinhaHistorico,
//                 idUsuarioAlteracao,
//                 dtUltimaAlteracao
//             )
//         VALUES
//             (
//                 :idAtendimento,
//                 :idContato,
//                 :idPessoaLinhaHistorico,
//                 :idUsuarioAlteracao,
//                 SYSDATE
//             );
// 
//     ULOG_END( "cEncContatoPC::registraContatoLinha()" );
// 
// }

bool cEncContatoPC::proCBuscaConsultorDentroPrazo(unsigned long idPessoaLinhaHistoricoPrm,
                                                  unsigned long _idContato,
                                                  long * idPessoaUsuarioPrm,
                                                  unsigned long * idGrupoCRIPrm)
{
    ULOG_START( "cEncContatoPC::proCBuscaConsultorDentroPrazo()" );

    bool retorno = false;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoaLinhaHistorico = idPessoaLinhaHistoricoPrm;
        unsigned long idContato = _idContato;
        long idPessoaUsuario;
        unsigned long idGrupo;
        unsigned long idGrupoPesq = *idGrupoCRIPrm;
        int associado;

        short i_idPessoaUsuario = -1;
        short i_idGrupo;

    EXEC SQL END DECLARE SECTION;

    ULOG( "*** idPessoaLinhaHistorico [%lu]",idPessoaLinhaHistorico );

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT
             ATENDIMENTOCRI.IDPESSOAUSUARIO
            ,GRUPOCRI.IDGRUPO
        INTO
            :idPessoaUsuario:i_idPessoaUsuario
           ,:idGrupo:i_idGrupo
        FROM ATENDIMENTO.GRUPOCRI GRUPOCRI,
             ATENDIMENTO.ATENDIMENTO ATENDIMENTO,
             ATENDIMENTO.ATENDIMENTOCRI ATENDIMENTOCRI
        WHERE GRUPOCRI.DTABERTURA = (SELECT MAX(DTABERTURA) 
                                     FROM ATENDIMENTO.GRUPOCRI
                                     WHERE IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico)
          AND ((TRUNC (SYSDATE - GRUPOCRI.DTABERTURA))) <= (SELECT QTDIAS FROM ATENDIMENTO.PRAZOATENDIMENTOCRI)
          AND GRUPOCRI.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO
          AND GRUPOCRI.IDATENDIMENTO = ATENDIMENTOCRI.IDATENDIMENTO (+)
          AND ATENDIMENTO.IDCONTATO = :idContato 
          AND GRUPOCRI.IDGRUPO IN (SELECT IDGRUPO
                                     FROM CONTATOADM.CONTATOPERFIL CONTATOPERFIL,
                                          CONTATOADM.GRUPOPERFIL GRUPOPERFIL,
                                          CONTATOADM.PERFIL PERFIL
                                    WHERE GRUPOPERFIL.IDGRUPOPERFIL = CONTATOPERFIL.IDGRUPOPERFIL
                                      AND CONTATOPERFIL.IDCONTATO = ATENDIMENTO.IDCONTATO
                                      AND GRUPOPERFIL.IDPERFIL = PERFIL.IDPERFIL
                                      AND PERFIL.INATIVO = 1
                                      AND CONTATOPERFIL.DTEXCLUSAO IS NULL);
    if ( !sqlca.sqlcode )
    {
        // Se encontrou um usuário, verifica se ele continua atrelado ao grupo encontrado
        // e também se o grupo encontrado é CRI.
        if ( i_idPessoaUsuario != -1 )
        {
            EXEC SQL
                SELECT
                    COUNT(1)
                INTO
                    :associado
                FROM 
                    ACESSO.USUARIO USUARIO
                   ,ACESSO.USUARIOGRUPO USUARIOGRUPO
                   ,ACESSO.GRUPO GRUPO
                   ,APOIO.TIPOGRUPO TIPOGRUPO 
                WHERE 
                    USUARIO.IDPESSOAUSUARIO = :idPessoaUsuario
                AND USUARIO.IDPESSOAUSUARIO = USUARIOGRUPO.IDPESSOAUSUARIO
                AND USUARIO.IDSTATUSUSUARIO = 1
                AND USUARIOGRUPO.IDGRUPO = :idGrupo
                AND USUARIOGRUPO.IDGRUPO = GRUPO.IDGRUPO
                AND GRUPO.IDTIPOGRUPO = TIPOGRUPO.IDTIPOGRUPO
                AND TIPOGRUPO.CDTIPOGRUPO = 'CRI';

            if ( associado > 0 )
            {
                *idPessoaUsuarioPrm = idPessoaUsuario;
                *idGrupoCRIPrm = idGrupo;

                ULOG( "idGrupoCRI=%ld",*idGrupoCRIPrm);

                ULOG( "idPessoaUsuario=%ld",*idPessoaUsuarioPrm);
            }
            else
            {
                *idPessoaUsuarioPrm = 0;
                *idGrupoCRIPrm = 0;

                ULOG( "Usuario %ld encontrado nao esta associado ao grupo %ld",idPessoaUsuario,idGrupo);

                retorno = true;
            }
        }
        else
        {
            *idPessoaUsuarioPrm = 0;
            *idGrupoCRIPrm = 0;

            ULOG( "Não foi encontrado um CRI para o grupo %ld",idGrupo);
        }
    }
    else
    {
        *idPessoaUsuarioPrm = 0;
        *idGrupoCRIPrm = 0;

        ULOG( "nao encontrou processo em inbox de CRI" );
    }

    ULOG_END( "cEncContatoPC::proCBuscaConsultorDentroPrazo()" );

    return retorno;
}

bool cEncContatoPC::proCComprovaVariaveis( //const long idAtendimentoPrm,
                                           const unsigned long idPessoaPrm,
                                           //const char * dtEntradaPrm,
                                           st_CRI * dadosPrm,
                                           //long * idAtendimentoAnterior,
                                           unsigned long * idGrupoCRI)
{
    ULOG_START( "cEncContatoPC::proCComprovaVariaveis()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoaLinhaHistorico = idPessoaPrm;

        unsigned long idContato = dadosPrm->idContato;
        unsigned long idTipoLinha = dadosPrm->idTipoLinha;
        unsigned long idUFOperadora = dadosPrm->idUFOperadora;
        unsigned long idTipoRelacionamento = dadosPrm->idTipoRelacionamento;
        unsigned long idTipoPessoa = dadosPrm->idTipoPessoa;
        unsigned long idSegmentacao = dadosPrm->idSegmentacao;
        unsigned long idTipoCarteira = dadosPrm->idTipoCarteira;
        unsigned long idCanal = dadosPrm->idCanal;
        unsigned long idProcedencia = dadosPrm->idProcedencia;
        unsigned long idGrupoAbertura = dadosPrm->idGrupoAbertura;
        long idAtendimento = 0;

        unsigned long idGrupo = 0;

    EXEC SQL END DECLARE SECTION;


    ULOG( "idPessoaLinhaHistorico [%lu]",idPessoaLinhaHistorico );

    ULOG( "idContato [%lu]",idContato );

    ULOG(  "idTipoLinha [%lu]",idTipoLinha );

    ULOG( "idUFOperadora [%lu]",idUFOperadora );

    ULOG( "idTipoRelacionamento [%lu]",idTipoRelacionamento );

    ULOG( "idTipoPessoa [%lu]",idTipoPessoa );

    ULOG( "idSegmentacao [%lu]",idSegmentacao );

    ULOG( "idPessoaLinhaHistorico [%lu]",idPessoaLinhaHistorico );

    ULOG( "idTipoCarteira [%lu]",idTipoCarteira );

    ULOG( "idCanal [%lu]",idCanal );

    ULOG( "idProcedencia [%lu]",idProcedencia );

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
        SELECT
            B.IDGRUPO
        INTO
            :idGrupo
        FROM
            CONTATOADM.CONTATOPERFIL A,
            CONTATOADM.GRUPOPERFIL B,
            CONTATOADM.PERFILV01 C
            //CONTATOADM.UFOPERADORAGRUPO D
        WHERE
            A.IDCONTATO = :idContato
        AND
            A.DTEXCLUSAO IS NULL // INCIDÊNCIA 3235 CRI - NOV/2005
        AND
            A.IDGRUPOPERFIL = B.IDGRUPOPERFIL
        AND
            B.IDPERFIL = C.IDPERFIL
        AND
            (B.DTEXPIRACAO > SYSDATE OR B.DTEXPIRACAO IS NULL)
        AND
            C.IDTIPOLINHA = :idTipoLinha
        AND
            C.IDUFOPERADORA = :idUFOperadora
        AND
            C.IDTIPORELACIONAMENTO = :idTipoRelacionamento
        AND
            C.IDTIPOPESSOA = :idTipoPessoa
        AND
            C.IDSEGMENTACAO = :idSegmentacao
        AND
            C.IDTIPOCARTEIRA = :idTipoCarteira
        AND
            C.IDCANAL = :idCanal
        AND
            C.IDPROCEDENCIA = :idProcedencia
        AND
            C.IDGRUPO = :idGrupoAbertura
        //AND
        //    D.IDUFOPERADORA = :idUFOperadora
        //AND
        //    B.IDGRUPO = D.IDGRUPO
        AND 
            ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        ULOG( "Finalizando proCComprovaVariaveis, "
              "nao encontrou Grupo CRI pelas variaveis..." );

        return false;
    }

    ULOG( "Encontrou Grupo CRI [%lu]",idGrupo );


    *idGrupoCRI = idGrupo;

    ULOG_END( "cEncContatoPC::proCComprovaVariaveis()" );

    return true;
}

int cEncContatoPC::proCConsultaProximoAgrupamento(int idAtividade,int idAgrupamentoEstadoTpProc)
{
    ULOG_START("proCConsultaProximoAgrupamento()");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int varOraIdAtividade = idAtividade;
        int varOraIdAgrupamentoEstadoTpProc = idAgrupamentoEstadoTpProc;

        int varOraIdAgrupamentoEstadoTpProcFt=-1;
        short statOraIdAgrupamentoEstadoTpProcFt=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEncContato(&sqlca);

	EXEC SQL
	    SELECT
		    AGRUPAMENTODESTINO
	    INTO
		    :varOraIdAgrupamentoEstadoTpProcFt:statOraIdAgrupamentoEstadoTpProcFt
	    FROM
		    WORKFLOW.PROXIMOESTADOV01
	    WHERE
	        IDATIVIDADE = :varOraIdAtividade
	    AND AGRUPAMENTOORIGEM = :varOraIdAgrupamentoEstadoTpProc
        AND ROWNUM < 2;

    ULOG_END("proCConsultaProximoAgrupamento()");

	return varOraIdAgrupamentoEstadoTpProcFt;
}

bool cEncContatoPC::proCObterGrupoUsuario( unsigned long idGrupoCRIPrm
                                         , unsigned long idPessoaUsuarioPrm
                                         , st_CRI * dadosPrm
                                         , unsigned long *idGrupoCRI)
{
    ULOG_START( "cEncContatoPC::proCObterGrupoUsuario()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idContato = dadosPrm->idContato;
        unsigned long idTipoLinha = dadosPrm->idTipoLinha;
        unsigned long idUFOperadora = dadosPrm->idUFOperadora;
        unsigned long idTipoRelacionamento = dadosPrm->idTipoRelacionamento;
        unsigned long idTipoPessoa = dadosPrm->idTipoPessoa;
        unsigned long idSegmentacao = dadosPrm->idSegmentacao;
        unsigned long idTipoCarteira = dadosPrm->idTipoCarteira;
        unsigned long idCanal = dadosPrm->idCanal;
        unsigned long idProcedencia = dadosPrm->idProcedencia;
        unsigned long idGrupoAbertura = dadosPrm->idGrupoAbertura;

        unsigned long idPessoaUsuario = idPessoaUsuarioPrm;
        unsigned long idGrupo = idGrupoCRIPrm;

    EXEC SQL END DECLARE SECTION;

    ULOG( "idPessoaUsuario [%lu]",idPessoaUsuario );

    ULOG( "idGrupo [%lu]",idGrupo );

    ULOG( "idContato [%lu]",idContato );

    ULOG( "idTipoLinha [%lu]",idTipoLinha );

    ULOG( "idUFOperadora [%lu]",idUFOperadora );

    ULOG( "idTipoRelacionamento [%lu]",idTipoRelacionamento );

    ULOG( "idTipoPessoa [%lu]",idTipoPessoa );

    ULOG( "idSegmentacao [%lu]",idSegmentacao );

    ULOG( "idTipoCarteira [%lu]",idTipoCarteira );

    ULOG( "idCanal [%lu]",idCanal );

    ULOG( "idProcedencia [%lu]",idProcedencia );

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL
        SELECT
            IDPESSOAUSUARIO
        FROM
            ACESSO.USUARIOGRUPO
        WHERE
            IDPESSOAUSUARIO = :idPessoaUsuario
        AND
            IDGRUPO = :idGrupo;

    if ( !sqlca.sqlcode )
    { // se o usuario continua associado ao grupo original do processo encontrado,
      // usa o mesmo grupo
        *idGrupoCRI = idGrupoCRIPrm;


        ULOG( "Usuario continua associado ao grupo [%lu] original do processo encontrado",idGrupoCRIPrm );
        ULOG_END( "cEncContatoPC::proCObterGrupoUsuario()" );

        return true;
    }

    // Se usuario não esta mais associado ao grupo do processo, busca um grupo
    // em que o usuário esteja associado que seja compatível com o perfil do
    // processo sendo aberto
    EXEC SQL
        SELECT
            B.IDGRUPO
        INTO
            :idGrupo
        FROM
            CONTATOADM.CONTATOPERFIL A,
            CONTATOADM.GRUPOPERFIL B,
            CONTATOADM.PERFILV01 C,
            //CONTATOADM.UFOPERADORAGRUPO D,
            ACESSO.USUARIOGRUPO E
        WHERE
            A.IDCONTATO = :idContato
        AND
            A.DTEXCLUSAO IS NULL // INCIDÊNCIA 3235 CRI - NOV/2005
        AND
            A.IDGRUPOPERFIL = B.IDGRUPOPERFIL
        AND
            B.IDPERFIL = C.IDPERFIL
        AND
            C.IDTIPOLINHA = :idTipoLinha
        AND
            C.IDUFOPERADORA = :idUFOperadora
        AND
            C.IDTIPORELACIONAMENTO = :idTipoRelacionamento
        AND
            C.IDTIPOPESSOA = :idTipoPessoa
        AND
            C.IDSEGMENTACAO = :idSegmentacao
        AND
            C.IDTIPOCARTEIRA = :idTipoCarteira
        AND
            C.IDCANAL = :idCanal
        AND
            C.IDPROCEDENCIA = :idProcedencia
        //AND
        //    D.IDUFOPERADORA = :idUFOperadora
        //AND
        //    B.IDGRUPO = D.IDGRUPO
        AND
            E.IDPESSOAUSUARIO = :idPessoaUsuario
        AND
            E.IDGRUPO = B.IDGRUPO
        AND 
            ROWNUM < 2;

    if ( !sqlca.sqlcode )
    { // Se encontrou um grupo CRI associado ao usuário, vai encaminhar o processo 

        *idGrupoCRI = idGrupo;

        ULOG( "Encontrou Grupo CRI [%lu] associado ao usuario",idGrupo );

        ULOG_END( "cEncContatoPC::proCObterGrupoUsuario()" );

        return true;
    }

    *idGrupoCRI = 0;

    ULOG( "Nenhum grupo compativel com o usuario/processo encontrado" );

    ULOG_END( "cEncContatoPC::proCObterGrupoUsuario()" );

    return false;
}

//================================================================================
// A versão acima é compativel com a alteração feita em 05/11/2005 onde a
// regra de encaminhamento de um processo para um inbox de CRI, foi alterada
// para contemplar a especificação funcional e corrigir erro reportado pela equipe
// de testes da Indra.
// Nov/2005 - Cassio
//================================================================================
//
//bool cEncContatoPC::proCComprovaVariaveisUsuario( const long idAtendimentoPrm,
//                                                  const unsigned long idPessoaPrm,
//                                                  const char * dtEntradaPrm,
//                                                  st_CRI * dadosPrm,
//                                                  long * idAtendimentoAnterior,
//                                                  unsigned long * idGrupoCRI,
//                                                  unsigned long idPessoaUsuarioPrm)
//{
//    ULOG(mensagemSimples("> proCComprovaVariaveisUsuario()"));
//
//  struct sqlca sqlca;
//  
//  EXEC SQL BEGIN DECLARE SECTION;
//
//        unsigned long idPessoaLinhaHistorico = idPessoaPrm;
//
//        unsigned long idContato = dadosPrm->idContato;
//        unsigned long idTipoLinha = dadosPrm->idTipoLinha;
//        unsigned long idUFOperadora = dadosPrm->idUFOperadora;
//        unsigned long idTipoRelacionamento = dadosPrm->idTipoRelacionamento;
//        unsigned long idTipoPessoa = dadosPrm->idTipoPessoa;
//        unsigned long idSegmentacao = dadosPrm->idSegmentacao;
//        unsigned long idTipoCarteira = dadosPrm->idTipoCarteira;
//        unsigned long idCanal = dadosPrm->idCanal;
//        unsigned long idProcedencia = dadosPrm->idProcedencia;
//        unsigned long idGrupoAbertura = dadosPrm->idGrupoAbertura;
//        unsigned long idPessoaUsuario = idPessoaUsuarioPrm;
//        long idAtendimento = *idAtendimentoAnterior;
//
//        unsigned long idGrupo = 0;
//
//  EXEC SQL END DECLARE SECTION;
//
//
//    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
//    EXEC SQL WHENEVER NOT FOUND CONTINUE;
//    EXEC SQL
//        SELECT
//            B.IDGRUPO
//        INTO
//            :idGrupo
//        FROM
//            CONTATOADM.CONTATOPERFIL A,
//            CONTATOADM.GRUPOPERFIL B,
//            CONTATOADM.PERFILV01 C,
//            //CONTATOADM.UFOPERADORAGRUPO D,
//            ACESSO.USUARIOGRUPO E,
//            ACESSO.GRUPO F,
//            ACESSO.USUARIO U,
//            APOIO.STATUSUSUARIO SU
//        WHERE
//            A.IDCONTATO = :idContato
//        AND
//            A.IDGRUPOPERFIL = B.IDGRUPOPERFIL
//      AND
//          B.IDPERFIL = C.IDPERFIL
//        AND
//            C.IDTIPOLINHA = :idTipoLinha
//        AND
//            C.IDUFOPERADORA = :idUFOperadora
//        AND
//            C.IDTIPORELACIONAMENTO = :idTipoRelacionamento
//        AND
//            C.IDTIPOPESSOA = :idTipoPessoa
//        AND
//            C.IDSEGMENTACAO = :idSegmentacao
//        AND
//            C.IDTIPOCARTEIRA = :idTipoCarteira
//        AND
//            C.IDCANAL = :idCanal
//        AND
//            C.IDPROCEDENCIA = :idProcedencia
//        //AND
//        //    D.IDUFOPERADORA = :idUFOperadora
//        //AND
//        //    B.IDGRUPO = D.IDGRUPO
//        AND
//            E.IDPESSOAUSUARIO = :idPessoaUsuario
//        AND
//            U.IDPESSOAUSUARIO = :idPessoaUsuario
//        AND 
//            U.IDSTATUSUSUARIO = SU.IDSTATUSUSUARIO
//        AND
//          SU.SGSTATUSUSUARIO = 'ATIVO'
//        AND
//            B.IDGRUPO = E.IDGRUPO
//        AND
//            B.IDGRUPO = F.IDGRUPO
//        AND
//            F.IDTIPOGRUPO = (SELECT IDTIPOGRUPO FROM APOIO.TIPOGRUPO WHERE CDTIPOGRUPO = 'CRI')
//        AND 
//            ROWNUM < 2;
//
//    if ( sqlca.sqlcode )
//    {
//        ULOG(mensagemSimples("< proCComprovaVariaveisUsuario() (nao encontrou Grupo CRI para usuario pelas variaveis)"));
//
//        return false;
//    }
//
//    ULOG(mensagemSimples("< proCComprovaVariaveisUsuario()"));
//
//    *idGrupoCRI = idGrupo;
//
//    return true;
//}

// ==> Incidência 3288 Homologação Vivo - Nov/2005 - Cassio
// A partir desta versão o tipo de abertura esta sendo gravado na tabela ATENDIMENTO,
// pois não é mais exclusividade do CRI a caracterização do tipo de abertura de um
// atendimento.
//void cEncContatoPC::proCInsereAtendimentoPorContaCRI(const long idAtendimentoPrm)
//{
//    struct sqlca sqlca;
//
//    EXEC SQL BEGIN DECLARE SECTION;
//
//        long idAtendimento = idAtendimentoPrm;
//
//    EXEC SQL END DECLARE SECTION;
//
//
//    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
//    EXEC SQL WHENEVER NOT FOUND CONTINUE;
//
//    EXEC SQL 
//        INSERT INTO
//            ATENDIMENTO.ATENDIMENTOPORCONTACRI
//            (
//                IDATENDIMENTOPORCONTACRI
//               ,IDATENDIMENTO
//               ,DTULTIMAALTERACAO
//            )
//            VALUES
//            (
//                ATENDIMENTO.ATENDIMENTOPORCONTACRISQ.NEXTVAL
//               ,:idAtendimento
//               ,SYSDATE
//            );
//
//}
// <== Incidência 3288 Homologação Vivo - Nov/2005 - Cassio


// void cEncContatoPC::proCInsereAtendimentoGrupoAtual(const long idAtendimentoPrm,
//                                                     const unsigned long idGrupoPrm,
//                                                     const char * dtEntradaPrm)
// {
//     ULOG_START( "cEncContatoPC::proCInsereAtendimentoGrupoAtual()" );
// 
//     struct sqlca sqlca;
//     
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         long idAtendimento = idAtendimentoPrm;
//         unsigned long idGrupo = idGrupoPrm;
//         VARCHAR dtEntradaBko[256];
// 
//     EXEC SQL END DECLARE SECTION;
// 
//     strcpy( (char *)dtEntradaBko.arr,dtEntradaPrm );
//     dtEntradaBko.len = strlen(dtEntradaPrm);
// 
//     EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
//     EXEC SQL WHENEVER NOT FOUND CONTINUE;
// 
//     ULOG( "Inserindo idAtendimento[%lu] idGrupo[%lu]",idAtendimento,idGrupo );
// 
//     EXEC SQL 
//         INSERT INTO
//             atendimento.AtendimentoGrupoAtual
//             (
//                 idAtendimento,
//                 idGrupo,
//                 dtEntradaBKO,
//                 dtEntradaFila,
//                 inCRI
//             )
//             VALUES
//             (
//                 :idAtendimento,
//                 :idGrupo,
//                 TO_DATE(:dtEntradaBko,'DD/MM/YYYY HH24:MI:SS'),
//                 SYSDATE+15/86400, // assume que vai entrar na fila daqui a 15s (doc.cassio)
//                 1
//             );
// 
//     ULOG_END( "cEncContatoPC::proCInsereAtendimentoGrupoAtual()" );
// 
// }


void cEncContatoPC::proCInsereAtendimentoGrupoCRI(const long idAtendimentoPrm,
                                                  const unsigned long idGrupoPrm,
                                                  const unsigned long idPessoaLinhaHistoricoPrm)
{
    ULOG_START( "cEncContatoPC::proCInsereAtendimentoGrupoCRI()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = idAtendimentoPrm;
        unsigned long idGrupo = idGrupoPrm;
        unsigned long idPessoaLinhaHistorico = idPessoaLinhaHistoricoPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG( "Inserindo Atendimento[%lu] Grupo[%lu] idPessoaLinhaHistorico[%lu]",idAtendimento,idGrupo,idPessoaLinhaHistorico );

    EXEC SQL 
        INSERT INTO
            ATENDIMENTO.GRUPOCRI
            (
                IDATENDIMENTO,
                IDGRUPO,
                IDPESSOALINHAHISTORICO,
                DTABERTURA,
                DTULTIMAALTERACAO
            )
            VALUES
            (
                :idAtendimento,
                :idGrupo,
                :idPessoaLinhaHistorico,
                SYSDATE,
                SYSDATE
            );

    ULOG_END( "cEncContatoPC::proCInsereAtendimentoGrupoCRI()" );

}


void cEncContatoPC::proCInsereAtdTratamentoGrupoCRI(const long idAtendimentoPrm,
                                                    const unsigned long idGrupoPrm)
{
    ULOG_START( "cEncContatoPC::proCInsereAtdTratamentoGrupoCRI()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = idAtendimentoPrm;
        unsigned long idGrupo = idGrupoPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG( "Inserindo Atendimento[%lu] Grupo[%lu]",idAtendimento,idGrupo );

    EXEC SQL 
        INSERT INTO
            ATENDIMENTO.TRATAMENTOGRUPOCRI
            (
                IDATENDIMENTO,
                IDGRUPO,
                DTULTIMAALTERACAO
            )
            VALUES
            (
                :idAtendimento,
                :idGrupo,
                SYSDATE
            );

    ULOG_END( "cEncContatoPC::proCInsereAtdTratamentoGrupoCRI()" );

}


bool cEncContatoPC::proCListaGrupoAssociadoCRI( //const long idAtendimentoPrm,
                                                const unsigned long idPessoaLinhaHistoricoPrm,
                                                //const char * dtEntradaPrm,
                                                // long *idAtendimentoAnterior,
                                                unsigned long *idGrupoPrm,
                                                unsigned long idUFOperadoraPrm,
                                                unsigned long idGrupoAberturaPrm)
{
    ULOG_START( "cEncContatoPC::proCListaGrupoAssociadoCRI()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoaLinhaHistorico = idPessoaLinhaHistoricoPrm;
        unsigned long idUFOperadora = idUFOperadoraPrm;
        long idAtendimento = 0;
        unsigned long idGrupo = 0;
        unsigned long idGrupoAbertura = idGrupoAberturaPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
        SELECT DISTINCT
            A.IDGRUPO
        INTO
           :idGrupo
        FROM
            CUSTOMER.LINHATELEFONICAGRUPO A
            //,CONTATOADM.UFOPERADORAGRUPO D
            ,ACESSO.GRUPO G
            ,APOIO.TIPOGRUPO TG
        WHERE
            A.IDGRUPO > 0
        AND
            A.IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico
        AND
            A.DTEXCLUSAO IS NULL
        //AND
        //    D.IDUFOPERADORA = :idUFOperadora
        //AND
        //    A.IDGRUPO = D.IDGRUPO
        // *** Grupo CRI nao pode ser de abertura ***
        //AND
        //    A.IDGRUPO = :idGrupoAbertura
        // *** Linha é sempre associada a grupo CRI ***
        AND 
            A.IDGRUPO = G.IDGRUPO
        AND
            G.IDTIPOGRUPO = TG.IDTIPOGRUPO
        AND
            TG.CDTIPOGRUPO = 'CRI'
        AND
            ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        *idGrupoPrm = 0;

        ULOG( "Finalizando proCListaGrupoAssociadoCRI, nao encontrou grupo associado" );
        ULOG_END( "cEncContatoPC::proCListaGrupoAssociadoCRI()" );

        return false;
    }

    ULOG( "Encontrou Grupo CRI [%lu]",idGrupo );

    //EXEC SQL
    //   SELECT
    //    A.IDATENDIMENTO
    //   INTO
    //      :idAtendimento
    //   FROM
    //      ATENDIMENTO.GRUPOCRI A
    //   WHERE 
    //      A.DTABERTURA = (SELECT MAX(DTABERTURA)
    //                    FROM
    //                           ATENDIMENTO.GRUPOCRI
    //                    WHERE
    //                           IDGRUPO = :idGrupo
    //                    AND
    //                           IDPESSOALINHAHISTORICO = :idPessoaLinhaHistorico
    //                      )
    //   AND 
    //      (TRUNC(SYSDATE - A.DTABERTURA)) <= (SELECT QTDIAS FROM ATENDIMENTO.PRAZOATENDIMENTOCRI)
    //   AND
    //      ROWNUM < 2;

    //  Insere no Atendimento Grupo Atual
    // proCInsereAtendimentoGrupoAtual(idAtendimentoPrm,idGrupo,dtEntradaPrm);

    //  Insere no Atendimento Grupo CRI
    // proCInsereAtendimentoGrupoCRI(idAtendimentoPrm,idGrupo,idPessoaLinhaHistorico);

    //  Insere no Tratamento Grupo CRI
    // proCInsereAtdTratamentoGrupoCRI(idAtendimentoPrm,idGrupo);

    //if ( !sqlca.sqlcode )
    //{
    //
    //    *idAtendimentoAnterior = idAtendimento;
    //}
    //else
    //{
    //}

    *idGrupoPrm = idGrupo;

    ULOG_END( "cEncContatoPC::proCListaGrupoAssociadoCRI()" );

    return true;

}


void cEncContatoPC::proCLstUsuarioGrupoCRI( const long idAtdAnteriorPrm,
                                            const unsigned long idPessoaLinhaHistorico,
                                            unsigned long *idPessoaUsuarioPrm )
{
    ULOG_START( "cEncContatoPC::proCLstUsuarioGrupoCRI()" );
    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoaHist = idPessoaLinhaHistorico;
        long idAtdAnterior = idAtdAnteriorPrm;
        unsigned long idPessoaUsuario = 0;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT 
            IDPESSOAUSUARIO
        INTO
            :idPessoaUsuario
        FROM
            ATENDIMENTO.ATENDIMENTOCRI
        WHERE
            IDATENDIMENTO = :idAtdAnterior
        AND
            IDPESSOALINHAHISTORICO = :idPessoaHist;
        
    if ( !sqlca.sqlcode )
    {
        ULOG("Usuario Associado Encontrado [%lu]",idPessoaUsuario );

        *idPessoaUsuarioPrm = idPessoaUsuario;
    }
    else
    {
        ULOG("Usuario associado nao encontrado");
    }

    ULOG_END( "cEncContatoPC::proCLstUsuarioGrupoCRI()" );
}


// void cEncContatoPC::proCInsereAtendimentoUsuarioAtual(const long idAtendimentoPrm,
//                                                       const unsigned long idPessoaUsuarioPrm)
// {
//     ULOG_START( "cEncContatoPC::proCInsereAtendimentoUsuarioAtual()" );
// 
//     struct sqlca sqlca;
//     
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         long idAtendimento = idAtendimentoPrm;
//         unsigned long idPessoaUsuario = idPessoaUsuarioPrm;
// 
//     EXEC SQL END DECLARE SECTION;
// 
//     ULOG( "Inserindo idAtendimento[%lu] idPessoaUsuario[%lu]"
//            ,idAtendimento,idPessoaUsuario );
// 
//     EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
//     EXEC SQL WHENEVER NOT FOUND CONTINUE;
// 
//     EXEC SQL 
//         INSERT INTO
//             atendimento.AtendimentoUsuarioAtual
//             (
//                 IDATENDIMENTO
//                ,IDPESSOAUSUARIO
//                ,INPAUSAATENDIMENTO
//                ,IDUSUARIOALTERACAO
//                ,DTULTIMAALTERACAO
//                ,DTFIMPAUSAATENDIMENTO
//                ,DTEXCLUSAO
//             )
//             VALUES
//             (
//                 :idAtendimento,
//                 :idPessoaUsuario,
//                 0,
//                 NULL,
//                 SYSDATE,
//                 NULL,
//                 NULL
//             );
// 
//     ULOG_END( "cEncContatoPC::proCInsereAtendimentoUsuarioAtual()" );
// 
// }

void cEncContatoPC::proCInsereAtendimentoCRI(const long idAtendimentoPrm,
                                             const unsigned long idPessoaUsuarioPrm,
                                             const unsigned long idPessoaLinhaHistPrm)
{
    ULOG_START( "cEncContatoPC::proCInsereAtendimentoCRI()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = idAtendimentoPrm;
        unsigned long idPessoaUsuario = idPessoaUsuarioPrm;
        unsigned long idPessoaLinhaHist = idPessoaLinhaHistPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG( "Inserindo idAtendimento[%lu] idPessoaUsuario[%lu] idPessoaLinhaHistorico[%lu]"
                 ,idAtendimento,idPessoaUsuario,idPessoaLinhaHist );

    EXEC SQL 
        INSERT INTO
            Atendimento.AtendimentoCRI
            (
                idAtendimento,
                idPessoaUsuario,
                idPessoaLinhaHistorico,
                dtAbertura,
                dtPrazoCri,
                idUsuarioAlteracao,
                dtUltimaAlteracao
            )
            VALUES
            (
                :idAtendimento,
                :idPessoaUsuario,
                :idPessoaLinhaHist,
                SYSDATE,
                SYSDATE,
                :idPessoaUsuario,
                SYSDATE
            );

    ULOG_END( "cEncContatoPC::proCInsereAtendimentoCRI()" );
}


void cEncContatoPC::proCInsereTratamentoCRI(const int idPessoaUsuarioPrm,const long idAtendimentoPrm)
{
    ULOG_START( "cEncContatoPC::proCInsereTratamentoCRI()" );

    struct sqlca sqlca;
    
    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idPessoaUsuario = idPessoaUsuarioPrm;
        long idAtendimento = idAtendimentoPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG( "Inserindo idAtendimento[%lu] idPessoaUsuario[%lu]"
            ,idAtendimento,idPessoaUsuario );

    EXEC SQL 
        INSERT INTO
            ATENDIMENTO.TRATAMENTOCRI
            (
                IDATENDIMENTO,
                IDPESSOAUSUARIO,
                DTULTIMAALTERACAO,
                IDUSUARIOALTERACAO
            )
            VALUES
            (
                :idAtendimento,
                :idPessoaUsuario,
                SYSDATE,
                NULL
            );

    ULOG_END( "cEncContatoPC::proCInsereTratamentoCRI()" );
}

void cEncContatoPC::proCAtualizarTipoRetornoContatoCRI(long idAtendimentoPrm)
{
    ULOG_START( "cEncContatoPC::proCAtualizarTipoRetornoContatoCRI()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAtendimento = idAtendimentoPrm;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        UPDATE
            ATENDIMENTO.ATENDIMENTO
        SET
            IDTIPORETORNOCONTATO = 4 // COM RETORNO GRUPO CRI
        WHERE
            IDATENDIMENTO = :idAtendimento;

    EXEC SQL 
        UPDATE
            ATENDIMENTO.ATENDIMENTOPRIORIZACAO
        SET
            IDTIPORETORNOCONTATO = 4 // COM RETORNO GRUPO CRI
        WHERE
            IDATENDIMENTO = :idAtendimento;

    ULOG_END( "cEncContatoPC::proCAtualizarTipoRetornoContatoCRI()" );
}

// bool cEncContatoPC::proCAssociarUsuariosDisponiveis( const unsigned long idAtdCriadoPrm,
//                                                      const unsigned long idPessoaLinhaHistPrm,
//                                                      const unsigned long idGrupoPrm )
// {
//     ULOG_START( "cEncContatoPC::proCAssociarUsuariosDisponiveis()" );
// 
//     struct sqlca sqlca;
//     
//     EXEC SQL BEGIN DECLARE SECTION;
// 
//         unsigned long idGrupo = idGrupoPrm;
//         unsigned long idPessoaUsuario = 0;
// 
//     EXEC SQL END DECLARE SECTION;
// 
// 
//     EXEC SQL DECLARE ListaUsuarioCRI CURSOR FOR 
//         SELECT 
//             c.idPessoaUsuario
//         FROM
//             Acesso.UsuarioGrupo           b,
//             Acesso.Usuario                c
//         Where
//             b.IDGRUPO = :idGrupo
//         And
//             c.IDPESSOAUSUARIO = b.IDPESSOAUSUARIO
//         And
//             c.INDISPONIVELWF = 1
//         And
//             RowNum < 2;
// 
//     EXEC SQL WHENEVER SQLERROR DO sql_error_WFEncContato( &sqlca );
//     EXEC SQL WHENEVER NOT FOUND DO break;
// 
//     EXEC SQL OPEN ListaUsuarioCRI;
// 
//     bool encontrou = false;
// 
//     for( ;; )
//     {
//         
//         EXEC SQL FETCH ListaUsuarioCRI INTO :idPessoaUsuario;
// 
//         if ( idPessoaUsuario > 0 )
//         {
//             proCInsereAtendimentoUsuarioAtual( idAtdCriadoPrm,idPessoaUsuario );
//             proCInsereAtendimentoCRI( idAtdCriadoPrm,idPessoaUsuario,idPessoaLinhaHistPrm );
//             proCInsereTratamentoCRI( idPessoaUsuario,idAtdCriadoPrm );
//             encontrou = true;
//         }
// 
//     }
//     EXEC SQL CLOSE ListaUsuarioCRI;
// 
//     ULOG_END( "cEncContatoPC::proCAssociarUsuariosDisponiveis()" );
// 
//     return encontrou;
// 
// }

void cEncContatoPC::sql_error_WFEncContato( sqlca * sqlca )
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
