/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Renato Teixeira
 * @version $Revision: 1.1.2.3.6.2 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:36:43 $
 **/
 
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"


#include "../include/cWFAtendimentoFrmCampoValor.h"
#include "../include/stWFAtendimentoFrmCampoValor.h"

void sql_error_WFAtendimentoFrmCampoValor(sqlca*sqlca);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFAtendimentoFrmCampoValor.h"
    EXEC SQL END DECLARE SECTION;

bool proCIncluirWFAtendimentoFrmCampoValor(st_AtendimentoFrmCampoValor* dados, st_vlAtendimentoFrmCampoValor* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoFrmCampoValor   oDados;
		struct st_vlAtendimentoFrmCampoValor oStatus;

	EXEC SQL END DECLARE SECTION;

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);

	EXEC SQL SELECT atendimento.AtendimentoFrmCampoValorSQ.NEXTVAL INTO :oDados.idAtendimentoFrmCampoValor FROM DUAL;

	EXEC SQL 
		INSERT INTO
			atendimento.AtendimentoFrmCampoValor
			(
				idAtendimentoFrmCampoValor,
				idAtendimentoFrmCampo,
				valor,
				idUsuarioAlteracao,
				dtUltimaAlteracao
			)
			VALUES
			(
				:oDados.idAtendimentoFrmCampoValor,
				:oDados.idAtendimentoFrmCampo,
				:oDados.valor,
				DECODE(:oStatus.idUsuarioAlteracao, -1, NULL, :oDados.idUsuarioAlteracao),
                TO_DATE(DECODE(:oStatus.dtUltimaAlteracao, -1, NULL, :oDados.dtUltimaAlteracao),'DD/MM/YYYY HH24:MI:SS')
			);

	saida->createTag("WFAtendimentoFrmCampoValorVO");
		saida->addItem("idAtendimentoFrmCampoValor", oDados.idAtendimentoFrmCampoValor);
	saida->closeTag();

	return true;
}

bool proCAlterarWFAtendimentoFrmCampoValor(st_AtendimentoFrmCampoValor* dados, st_vlAtendimentoFrmCampoValor* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_AtendimentoFrmCampoValor   oDados;
		struct st_vlAtendimentoFrmCampoValor oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE atendimento.AtendimentoFrmCampoValor SET ");

	bool separa = false;

	if (status->idAtendimentoFrmCampo != -1) 
		montaUpdate("idAtendimentoFrmCampo", oDados.idAtendimentoFrmCampo, 1);

	if (status->valor != -1) 
		montaUpdate("valor", oDados.valor, TIPO_CHAR);

	if (status->idUsuarioAlteracao != -1) 
		montaUpdate("idUsuarioAlteracao", oDados.idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaUpdate("dtUltimaAlteracao", oDados.dtUltimaAlteracao, TIPO_DATAHORA);

	sprintf(query, "%s WHERE idAtendimentoFrmCampoValor = %ld", query, dados->idAtendimentoFrmCampoValor);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFAtendimentoFrmCampoValor(st_AtendimentoFrmCampoValor* dados, st_vlAtendimentoFrmCampoValor* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoFrmCampoValor = dados->idAtendimentoFrmCampoValor;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);

	EXEC SQL 
		DELETE
			atendimento.AtendimentoFrmCampoValor
		WHERE
			idAtendimentoFrmCampoValor = :idAtendimentoFrmCampoValor;

	return true;
}

bool proCConsultaWFAtendimentoFrmCampoValor(st_AtendimentoFrmCampoValor* dados, st_vlAtendimentoFrmCampoValor* status, char* order, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimentoFrmCampoValor;
		long idAtendimentoFrmCampo;
		VARCHAR	valor[256];
		int idUsuarioAlteracao;
		VARCHAR	dtUltimaAlteracao[256];

		short i_idUsuarioAlteracao;
		short i_dtUltimaAlteracao;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idAtendimentoFrmCampoValor, idAtendimento, idContatoFolhaCampo FROM atendimento.AtendimentoFrmCampoValor ");

	bool separa = false;

	if (status->idAtendimentoFrmCampoValor != -1) 
		montaWhere("idAtendimentoFrmCampoValor", dados->idAtendimentoFrmCampoValor, 1);

	if (status->idAtendimentoFrmCampo != -1) 
		montaWhere("idAtendimentoFrmCampo", dados->idAtendimentoFrmCampo, 1);

	if (status->valor != -1) 
		montaWhere("valor", dados->valor, 1);

	if (status->idUsuarioAlteracao != -1) 
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1) 
		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);

	EXEC SQL PREPARE consultaAtendimentoFrmCampoValor FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaAtendimentoFrmCampoValor;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO 
									:idAtendimentoFrmCampoValor, 
									:idAtendimentoFrmCampo, 
									valor,
									:idUsuarioAlteracao:i_idUsuarioAlteracao,
									:dtUltimaAlteracao:i_dtUltimaAlteracao;

		CONV(valor);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);

		saida->createTag("WFAtendimentoFrmCampoValorVO");
			saida->addItem("idAtendimentoFrmCampoValor", idAtendimentoFrmCampoValor);
			saida->addItem("idAtendimentoFrmCampo", idAtendimentoFrmCampo);
			saida->addItem("valor", (char*)valor.arr);
			saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
			saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;

	return true;

}

bool proCObtemWFAtendimentoCamposValor(long sIdAtendimento, XMLGen* saida)
{

	struct sqlca sqlca;
   	
	EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = sIdAtendimento;
		int  idCampo;
		VARCHAR nmCampo[2001];
		VARCHAR nmTipoDadoCampo[256];
		VARCHAR sgLayoutApresentacaoCampo[256];
		VARCHAR sgMascaraApresentacaoCampo[256];
		int  nrTamanho;
		int  idFormularioCampoValor;
        int  qtLinhas = 0;
		VARCHAR valor[256];
		
		short i_idCampo;
		short i_nmCampo;
		short i_nmTipoDadoCampo;
		short i_sgLayoutApresentacaoCampo;
		short i_sgMascaraApresentacaoCampo;
		short i_nrTamanho;
		short i_idFormularioCampoValor;
		short i_valor;
		
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;


	EXEC SQL DECLARE consultaCampos CURSOR FOR
	SELECT 
		IDCAMPO, 
		NMCAMPO, 
		REPLACE(REPLACE(REPLACE(REPLACE(NMTIPODADOCAMPO,'Lista seleção múltipla','Texto'),'Label','Texto'),'Lista preenchida','Texto'),'Memo','Texto') NMTIPODADOCAMPOG, 
		REPLACE(REPLACE(REPLACE(REPLACE(SGLAYOUTAPRESENTACAOCAMPO,'SELECTMULTI','TEXT'),'SELECTPREENCHIDO','TEXT'),'LABEL','TEXT'),'MEMO','TEXT') SGLAYOUTAPRESENTACAOCAMPOG,
		SGMASCARAAPRESENCAOCAMPO, 
		NRTAMANHO, 
		IDATENDIMENTOFRMCAMPO, 
		VALOR 
	FROM 
		ATENDIMENTO.ATENDIMENTOFRMCAMPOVALORV01
	WHERE 
		IDATENDIMENTO = :idAtendimento
	ORDER BY
		SQORDEMAPRESENTACAO;
	
	EXEC SQL OPEN consultaCampos;

	saida->createTag("ns2:FormularioVO");
    saida->addProp("xmlns", "admsistemas.fo.vivo.com.br/vo");

	while (true)
	{
		EXEC SQL FETCH consultaCampos INTO
			:idCampo:i_idCampo,
			:nmCampo:i_nmCampo,
			:nmTipoDadoCampo:i_nmTipoDadoCampo,
			:sgLayoutApresentacaoCampo:i_sgLayoutApresentacaoCampo,
			:sgMascaraApresentacaoCampo:i_sgMascaraApresentacaoCampo,
			:nrTamanho:i_nrTamanho,
			:idFormularioCampoValor:i_idFormularioCampoValor,
			:valor:i_valor;

        qtLinhas++;

        CONVIND(nmCampo, i_nmCampo);
		CONVIND(nmTipoDadoCampo, i_nmTipoDadoCampo);
		CONVIND(sgLayoutApresentacaoCampo, i_sgLayoutApresentacaoCampo);
		CONVIND(sgMascaraApresentacaoCampo, i_sgMascaraApresentacaoCampo);
		CONVIND(valor, i_valor);

			saida->createTag("ns2:FormularioCampoVO");
		
				saida->addItem("ns2:idContatoFolhaCampo", idCampo);
				saida->addItem("ns2:idCampo", idCampo);
				saida->addItem("ns2:nmCampo", (char *)nmCampo.arr);
				saida->createTag("ns2:TipoCampoVO");
					saida->addItem("ns2:nmTipoDadoCampo", (char *)nmTipoDadoCampo.arr);
					saida->addItem("ns2:sgLayoutApresentacaoCampo", (char *)sgLayoutApresentacaoCampo.arr);
					saida->addItem("ns2:sgMascaraApresentacaoCampo", (char *)sgMascaraApresentacaoCampo.arr);
					saida->addItem("ns2:nrTamanho", nrTamanho);
				saida->closeTag();
				saida->createTag("ns2:FormularioCampoValorVO");
					saida->addItem("ns2:idFormularioCampoValor", idFormularioCampoValor);
					saida->addItem("ns2:valor", (char *)valor.arr);
				saida->closeTag();
				
			saida->closeTag();

	}
	saida->closeTag();

	EXEC SQL CLOSE consultaCampos;

    return qtLinhas ? true : false;

}



bool proCObtemWFAtendimentoCamposValorEx(long sIdAtendimento, XMLGen* saida)
{

	struct sqlca sqlca;
   	
	EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = sIdAtendimento;
		int  idCampo;
		VARCHAR nmCampo[2001];
		VARCHAR nmTipoDadoCampo[256];
		VARCHAR sgLayoutApresentacaoCampo[256];
		VARCHAR sgMascaraApresentacaoCampo[256];
		int  nrTamanho;
		int  idFormularioCampoValor;
        int  qtLinhas = 0;
		VARCHAR valor[256];
		
		short i_idCampo;
		short i_nmCampo;
		short i_nmTipoDadoCampo;
		short i_sgLayoutApresentacaoCampo;
		short i_sgMascaraApresentacaoCampo;
		short i_nrTamanho;
		short i_idFormularioCampoValor;
		short i_valor;
		
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtendimentoFrmCampoValor(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;


	EXEC SQL DECLARE consultaCamposEx CURSOR FOR
	SELECT 
		IDCAMPO, 
		NMCAMPO, 
		NMTIPODADOCAMPO, 
		REPLACE(REPLACE(REPLACE(REPLACE(NMTIPODADOCAMPO,'Lista seleção múltipla','Texto'),'Label','Texto'),'Lista preenchida','Texto'),'Memo','Texto') NMTIPODADOCAMPOG, 
		REPLACE(REPLACE(REPLACE(REPLACE(SGLAYOUTAPRESENTACAOCAMPO,'SELECTMULTI','TEXT'),'SELECTPREENCHIDO','TEXT'),'LABEL','TEXT'),'MEMO','TEXT') SGLAYOUTAPRESENTACAOCAMPOG,
		NRTAMANHO, 
		IDATENDIMENTOFRMCAMPO, 
		VALOR 
	FROM 
		FOHIST_OW.ATENDIMENTOFRMCAMPOVALORV01
	WHERE 
		IDATENDIMENTO = :idAtendimento
	ORDER BY
		SQORDEMAPRESENTACAO;
	
	EXEC SQL OPEN consultaCamposEx;

	saida->createTag("ns2:FormularioVO");
    saida->addProp("xmlns", "admsistemas.fo.vivo.com.br/vo");

	while (true)
	{
		EXEC SQL FETCH consultaCamposEx INTO
			:idCampo:i_idCampo,
			:nmCampo:i_nmCampo,
			:nmTipoDadoCampo:i_nmTipoDadoCampo,
			:sgLayoutApresentacaoCampo:i_sgLayoutApresentacaoCampo,
			:sgMascaraApresentacaoCampo:i_sgMascaraApresentacaoCampo,
			:nrTamanho:i_nrTamanho,
			:idFormularioCampoValor:i_idFormularioCampoValor,
			:valor:i_valor;

        qtLinhas++;

        CONVIND(nmCampo, i_nmCampo);
		CONVIND(nmTipoDadoCampo, i_nmTipoDadoCampo);
		CONVIND(sgLayoutApresentacaoCampo, i_sgLayoutApresentacaoCampo);
		CONVIND(sgMascaraApresentacaoCampo, i_sgMascaraApresentacaoCampo);
		CONVIND(valor, i_valor);

			saida->createTag("ns2:FormularioCampoVO");
		
				saida->addItem("ns2:idContatoFolhaCampo", idCampo);
				saida->addItem("ns2:idCampo", idCampo);
				saida->addItem("ns2:nmCampo", (char *)nmCampo.arr);
				saida->createTag("ns2:TipoCampoVO");
					saida->addItem("ns2:nmTipoDadoCampo", (char *)nmTipoDadoCampo.arr);
					saida->addItem("ns2:sgLayoutApresentacaoCampo", (char *)sgLayoutApresentacaoCampo.arr);
					saida->addItem("ns2:sgMascaraApresentacaoCampo", (char *)sgMascaraApresentacaoCampo.arr);
					saida->addItem("ns2:nrTamanho", nrTamanho);
				saida->closeTag();
				saida->createTag("ns2:FormularioCampoValorVO");
					saida->addItem("ns2:idFormularioCampoValor", idFormularioCampoValor);
					saida->addItem("ns2:valor", (char *)valor.arr);
				saida->closeTag();
				
			saida->closeTag();

	}
	saida->closeTag();

	EXEC SQL CLOSE consultaCamposEx;

    return qtLinhas ? true : false;

}



void sql_error_WFAtendimentoFrmCampoValor(sqlca*sqlca)
{
	throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
