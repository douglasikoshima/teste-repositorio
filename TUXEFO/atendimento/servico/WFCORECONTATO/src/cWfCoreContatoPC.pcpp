/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio Garcia
 * @version $Revision: 1.1.114.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2012/07/23 20:16:18 $
 **/

#include "../include/cWfCoreContatoPC.h"
#include "../include/cWfCoreContatoException.h"
#include "../../../commons/queryMacro.h"

bool cWfCoreContatoPC::ObterContatoFuncionalidade(const char *idAcaoPortabilidade
                                                 ,const char *sgTipoPortabilidade)
{
    ULOG_START("cWfCoreContatoPC::ObterContatoFuncionalidade()");

    bool retorno = false;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdAcaoPortabilidade = idAcaoPortabilidade;
        const char *prmOraSgTipoPortabilidade = sgTipoPortabilidade;

        struct
        {
            VARCHAR cdFuncionalidade[51];
            VARCHAR sgSubSistema[11];
            VARCHAR idContato[21];
            VARCHAR idUsuarioAlteracao[21];
            VARCHAR dtUltimaAlteracao[32];
            VARCHAR sgTipoPortabilidade[16];
            VARCHAR idAcaoPortabilidade[21];
            VARCHAR dsAcaoPortabilidade[256];
            VARCHAR dsPathContato[2001];
            VARCHAR inEnviaSms[2];
            VARCHAR idCanal[21];
            VARCHAR idProcedencia[21];
            VARCHAR idGrupoAbertura[21];
            VARCHAR idGrupoTratamento[21];
            VARCHAR nmServico[26];
            VARCHAR tipoOperacao[3];
            VARCHAR sgAtividade[256];
        } varOra;

        struct
        {
            short cdFuncionalidade;
            short sgSubSistema;
            short idContato;
            short idUsuarioAlteracao;
            short dtUltimaAlteracao;
            short sgTipoPortabilidade;
            short idAcaoPortabilidade;
            short dsAcaoPortabilidade;
            short dsPathContato;
            short inEnviaSms;
            short idCanal;
            short idProcedencia;
            short idGrupoAbertura;
            short idGrupoTratamento;
            short nmServico;
            short tipoOperacao;
            short sgAtividade;
        } statOra;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    memset(&varOra,0,sizeof(varOra));
    memset(&statOra,-1,sizeof(statOra));

    ULOG("idAcaoPortabilidade=%s",prmOraIdAcaoPortabilidade);
    ULOG("sgTipoPortabilidade=%s",prmOraSgTipoPortabilidade);

    ULOG("vai buscar parâmetros da ação em CONTATOADM.CONTATOFUNCIONALIDADE");

    EXEC SQL
        SELECT
            CDFUNCIONALIDADE,
            SGSUBSISTEMA,
            IDCONTATO,
            IDUSUARIOALTERACAO,
            TO_CHAR(DTULTIMAALTERACAO,'DD/MM/YYYY') AS DTULTIMAALTERACAO,
            SGTIPOPORTABILIDADE,
            IDACAOPORTABILIDADE,
            NMACAOPORTABILIDADE,
            DSPATHCONTATO,
            INENVIASMS,
            IDCANAL,
            IDPROCEDENCIA,
            IDGRUPOABERTURA,
            IDGRUPOTRATAMENTO,
            NMSERVICO,
            NVL(NRTIPOOPERACAO,1),
            SGATIVIDADE
        INTO
            :varOra:statOra
        FROM
            CONTATOADM.CONTATOFUNCIONALIDADE
        WHERE
            SGSUBSISTEMA = 'FO'
        AND IDACAOPORTABILIDADE = :prmOraIdAcaoPortabilidade
        AND SGTIPOPORTABILIDADE = :prmOraSgTipoPortabilidade;

    if ( 0 == sqlca.sqlcode )
    {
        CONVIND(varOra.cdFuncionalidade,statOra.cdFuncionalidade);
        CONVIND(varOra.sgSubSistema,statOra.sgSubSistema);
        CONVIND(varOra.idContato,statOra.idContato);
        CONVIND(varOra.idUsuarioAlteracao,statOra.idUsuarioAlteracao);
        CONVIND(varOra.dtUltimaAlteracao,statOra.dtUltimaAlteracao);
        CONVIND(varOra.sgTipoPortabilidade,statOra.sgTipoPortabilidade);
        CONVIND(varOra.idAcaoPortabilidade,statOra.idAcaoPortabilidade);
        CONVIND(varOra.dsAcaoPortabilidade,statOra.dsAcaoPortabilidade);
        CONVIND(varOra.dsPathContato,statOra.dsPathContato);
        CONVIND(varOra.inEnviaSms,statOra.inEnviaSms);
        CONVIND(varOra.idCanal,statOra.idCanal);
        CONVIND(varOra.idProcedencia,statOra.idProcedencia);
        CONVIND(varOra.idGrupoAbertura,statOra.idGrupoAbertura);
        CONVIND(varOra.idGrupoTratamento,statOra.idGrupoTratamento);
        CONVIND(varOra.nmServico,statOra.nmServico);
        CONVIND(varOra.tipoOperacao,statOra.tipoOperacao);
        CONVIND(varOra.sgAtividade,statOra.sgAtividade);

        dadosParam.cdFuncionalidade = (char*)varOra.cdFuncionalidade.arr;
        dadosParam.sgSubSistema = (char*)varOra.sgSubSistema.arr;
        dadosParam.idContato = (char*)varOra.idContato.arr;
        dadosParam.idUsuarioAlteracao = (char*)varOra.idUsuarioAlteracao.arr;
        dadosParam.dtUltimaAlteracao = (char*)varOra.dtUltimaAlteracao.arr;
        dadosParam.sgTipoPortabilidade = (char*)varOra.sgTipoPortabilidade.arr;
        dadosParam.idAcaoPortabilidade = (char*)varOra.idAcaoPortabilidade.arr;
        dadosParam.dsAcaoPortabilidade = (char*)varOra.dsAcaoPortabilidade.arr;
        dadosParam.dsPathContato = (char*)varOra.dsPathContato.arr;
        dadosParam.inEnviaSms = (char*)varOra.inEnviaSms.arr;
        dadosParam.idCanal = (char*)varOra.idCanal.arr;
        //dadosParam.idProcedencia = (char*)varOra.idProcedencia.arr;
        dadosParam.idGrupoAbertura = (char*)varOra.idGrupoAbertura.arr;
        dadosParam.idGrupoTratamento = (char*)varOra.idGrupoTratamento.arr;
        dadosParam.nmServico = (char*)varOra.nmServico.arr;
        dadosParam.tipoOperacao = (char*)varOra.tipoOperacao.arr;
        dadosParam.sgAtividade = (char*)varOra.sgAtividade.arr;

        ULOG("cdFuncionalidade=%s",(char*)varOra.cdFuncionalidade.arr);
        ULOG("sgSubSistema=%s",(char*)varOra.sgSubSistema.arr);
        ULOG("idContato=%s",(char*)varOra.idContato.arr);
        ULOG("idUsuarioAlteracao=%s",(char*)varOra.idUsuarioAlteracao.arr);
        ULOG("dtUltimaAlteracao=%s",(char*)varOra.dtUltimaAlteracao.arr);
        ULOG("sgTipoPortabilidade=%s",(char*)varOra.sgTipoPortabilidade.arr);
        ULOG("idAcaoPortabilidade=%s",(char*)varOra.idAcaoPortabilidade.arr);
        ULOG("dsAcaoPortabilidade=%s",(char*)varOra.dsAcaoPortabilidade.arr);
        ULOG("dsPathContato=%s",(char*)varOra.dsPathContato.arr);
        ULOG("inEnviaSms=%s",(char*)varOra.inEnviaSms.arr);
        ULOG("idCanal=%s",(char*)varOra.idCanal.arr);
        //ULOG("idProcedencia=%s",(char*)varOra.idProcedencia.arr);
        ULOG("idGrupoAbertura=%s",(char*)varOra.idGrupoAbertura.arr);
        ULOG("idGrupoTratamento=%s",(char*)varOra.idGrupoTratamento.arr);
        ULOG("nmServico=%s",(char*)varOra.nmServico.arr);
        ULOG("tipoOperacao=%s",(char*)varOra.tipoOperacao.arr);
        ULOG("sgAtividade=%s",(char*)varOra.sgAtividade.arr);

        retorno = true;
    }
    else
    {
        ULOGW("parâmetros não encontrados");
    }

    ULOG_END("cWfCoreContatoPC::ObterContatoFuncionalidade()");

    return retorno;
}

bool cWfCoreContatoPC::ObterIdPessoaUsuarioPortabilidade()
{
    ULOG_START("cWfCoreContatoPC::ObterIdPessoaUsuarioPortabilidade()");

    bool retorno = false;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR varOraIdPessoaUsuario[21];
        short statOraIdPessoaUsuario=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("vai buscar id do usuário de portabilidade");

    EXEC SQL
        SELECT
            IDPESSOAUSUARIO
        INTO
            :varOraIdPessoaUsuario:statOraIdPessoaUsuario
        FROM
            ACESSO.USUARIO
        WHERE
            NMLOGINUSUARIO = 'PORTABILIDADE';

    if ( 0 == sqlca.sqlcode )
    {
        CONVIND(varOraIdPessoaUsuario,statOraIdPessoaUsuario);

        dadosParam.idPessoaUsuario = (char*)varOraIdPessoaUsuario.arr;

        ULOG("idPessoaUsuario=%s",(char*)varOraIdPessoaUsuario.arr);

        retorno = true;
    }
    else
    {
        ULOGW("id de Usuário não encontrado.");
    }

    ULOG_END("cWfCoreContatoPC::ObterIdPessoaUsuarioPortabilidade()");

    return retorno;
}

int cWfCoreContatoPC::VerificarValidadeAcaoPortabilidade(const char *idAcaoPortabilidade)
{
    ULOG_START("cWfCoreContatoPC::VerificarValidadeAcaoPortabilidade()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdAcaoPortabilidade = idAcaoPortabilidade;
        int ddoOraCount;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("vai verificar se idAcaoPortabilidade=%s existe em APOIO.ACAOPORTABILIDADE"
                                                            ,prmOraIdAcaoPortabilidade);
    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :ddoOraCount
        FROM
            APOIO.ACAOPORTABILIDADE
        WHERE
            IDACAOPORTABILIDADE = :prmOraIdAcaoPortabilidade;

    ULOG("retornou %d",ddoOraCount);

    ULOG_END("cWfCoreContatoPC::VerificarValidadeAcaoPortabilidade()");

    return ddoOraCount;
}

void cWfCoreContatoPC::ObterDsAcaoPortabilidade(const char *idAcaoPortabilidade)
{
    ULOG_START("cWfCoreContatoPC::ObterDsAcaoPortabilidade()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdAcaoPortabilidade = idAcaoPortabilidade;
        VARCHAR varOraDsAcaoPortabilidade[256];
        short statOraDsAcaoPortabilidade=-1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("vai obter se dsAcaoPortabilidade para idAcaoPortabilidade=%s em APOIO.ACAOPORTABILIDADE"
                                                            ,prmOraIdAcaoPortabilidade);
    EXEC SQL
        SELECT
            DSACAOPORTABILIDADE
        INTO
            :varOraDsAcaoPortabilidade:statOraDsAcaoPortabilidade
        FROM
            APOIO.ACAOPORTABILIDADE
        WHERE
            IDACAOPORTABILIDADE = :prmOraIdAcaoPortabilidade;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterDsAcaoPortabilidade()");
        throw new CoreContatoException(ERR_NFO_DSACAOPORTABILIDADE,__FILE__,__LINE__);
    }

    CONVIND(varOraDsAcaoPortabilidade,statOraDsAcaoPortabilidade);

    dadosParam.dsAcaoPortabilidade = (char*)varOraDsAcaoPortabilidade.arr;

    ULOG("dsAcaoPortabilidade=%s",dadosParam.dsAcaoPortabilidade.c_str());

    ULOG_END("cWfCoreContatoPC::ObterDsAcaoPortabilidade()");
}

void cWfCoreContatoPC::ObterPrazosJanelaPortout(const char *dtJanelaPortout,int *dsValorParametro,int *prazoJanelaPortout)
{
    ULOG_START("cWfCoreContatoPC::ObterPrazosJanelaPortout()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraDtHrJanelaPortout = dtJanelaPortout;
        char prmOraDtJanelaPortout[9];
        int varOraPrazoJanelaPortout;
        int varOraDsValorParametro;
        short statOraDsValorParametro;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("vai obter o prazo minimo de janela");

    EXEC SQL
        SELECT
            DSVALORPARAMETRO
        INTO
            :varOraDsValorParametro:statOraDsValorParametro
        FROM
            APOIO.PARAMETRO
        WHERE
            CDPARAMETRO='PORTABILIDADE_TMPSTARTCRIT1';

    ULOG("vai obter a quantidade de dias para vencer a janela");

    SAFE_STRNCPY(prmOraDtJanelaPortout,dtJanelaPortout);
    EXEC SQL
        SELECT
            (TO_DATE(:prmOraDtJanelaPortout,'DDMMYYYY')-TRUNC(SYSDATE))*24 AS DIF
        INTO
            :varOraPrazoJanelaPortout
        FROM DUAL;

    if ( varOraPrazoJanelaPortout >= 0 )
    {
        EXEC SQL
            SELECT
                (TO_DATE(:prmOraDtHrJanelaPortout,'DDMMYYYYHH24MISS')-SYSDATE)*24 AS DIF
            INTO
                :varOraPrazoJanelaPortout
            FROM DUAL;
    }

    *dsValorParametro = varOraDsValorParametro;
    *prazoJanelaPortout = varOraPrazoJanelaPortout;

    ULOG("dsValorParametro=%d (prazo mínimo)",*dsValorParametro);
    ULOG("prazoJanelaPortout=%d (dias para vencer)",*prazoJanelaPortout);

    ULOG_END("cWfCoreContatoPC::ObterPrazosJanelaPortout()");
}

int cWfCoreContatoPC::ExisteProtocoloPortabilidade(const char *nrProtocoloPortabilidade)
{
    ULOG_START("cWfCoreContatoPC::ExisteProtocoloPortabilidade()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraNrProtocoloPortabilidade = nrProtocoloPortabilidade;
        int ddoOraCount;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("vai verificar se nrProtocoloPortabilidade=%s ja aberto para 'PORTOUT' em ATENDIMENTO.ATENDIMENTO"
                                                            ,prmOraNrProtocoloPortabilidade);
    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :ddoOraCount
        FROM
            ATENDIMENTO.ATENDIMENTOPRIORIZACAO
        WHERE
            NRPROTOCOLOPORTABILIDADE = :prmOraNrProtocoloPortabilidade
        AND SGTIPOPORTABILIDADE = 'PORTOUT'
        AND ROWNUM < 2;

    ULOG("retornou %d",ddoOraCount);

    ULOG_END("cWfCoreContatoPC::ExisteProtocoloPortabilidade()");

    return ddoOraCount;
}

bool cWfCoreContatoPC::VerificarIdProcedencia(const char *cdProcedencia)
{
    ULOG_START("cWfCoreContatoPC::VerificarIdProcedencia()");

    bool retorno = false;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdProcedencia = cdProcedencia;
        int varOraCount;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    if ( 0==prmOraIdProcedencia || 0==*prmOraIdProcedencia )
    {
        ULOG("idProcedencia não informado, assumindo '1'");
        prmOraIdProcedencia = "1";
    }

    ULOG("vai verificar se idProcedencia='%s' existe em APOIO.PROCEDENCIA"
                                                            ,prmOraIdProcedencia);

    EXEC SQL
        SELECT
            COUNT(1)
        INTO
            :varOraCount
        FROM
            APOIO.PROCEDENCIA
        WHERE
            IDPROCEDENCIA = :prmOraIdProcedencia;

    if ( varOraCount>0 )
    {
        dadosParam.idProcedencia = cdProcedencia;
        retorno = true;
    }
    else
    {
        ULOGW("id de procedencia não encontrado.");
    }

    ULOG_END("cWfCoreContatoPC::VerificarIdProcedencia()");

    return retorno;
}

void cWfCoreContatoPC::ObterDadosMotivo(const char *dsOperacao)
{
    ULOG_START("cWfCoreContatoPC::ObterDadosMotivo()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraDsOperacao = dsOperacao;
        VARCHAR varOraDsMotivo[256];
        short statOraIdMotivo = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("dsOperacao=%s",dsOperacao);

    ULOG("Vai buscar o id do motivo em ATENDIMENTO.MOTIVO");

    EXEC SQL
        SELECT
            IDMOTIVO
        INTO
            :varOraDsMotivo:statOraIdMotivo
        FROM
            ATENDIMENTO.MOTIVO
        WHERE
            DSMOTIVO = :prmOraDsOperacao;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterDadosMotivo()");
        throw new CoreContatoException(ERR_NFO_MOTIVO,__FILE__,__LINE__);
    }

    CONVIND(varOraDsMotivo,statOraIdMotivo);

    dadosParam.idMotivo = (char*)varOraDsMotivo.arr;

    ULOG("idMotivo=%s",(char*)varOraDsMotivo.arr);

    ULOG_END("cWfCoreContatoPC::ObterDadosMotivo()");
}

void cWfCoreContatoPC::ObterSgOperadoraSolicitante(const char *idOperadoraSolicitante)
{
    ULOG_START("cWfCoreContatoPC::ObterSgOperadoraSolicitante()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdOperadoraSolicitante = idOperadoraSolicitante;
        VARCHAR varOraSgOperadoraSolicitante[256];
        short statOraSgOperadoraSolicitante = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idOperadoraSolicitante=%s",idOperadoraSolicitante);

    ULOG("Vai buscar o SGOPERADORASOLICITANTE em APOIO.OPERADORASOLICITANTE");

    EXEC SQL
        SELECT 
            SGOPERADORASOLICITANTE
        INTO
            :varOraSgOperadoraSolicitante:statOraSgOperadoraSolicitante
        FROM
            APOIO.OPERADORASOLICITANTE
        WHERE
            IDOPERADORASOLICITANTE = :prmOraIdOperadoraSolicitante;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterSgOperadoraSolicitante()");
        throw new CoreContatoException(ERR_NFO_OPERSOLICITANTE,__FILE__,__LINE__);
    }

    CONVIND(varOraSgOperadoraSolicitante,statOraSgOperadoraSolicitante);

    dadosParam.sgOperadoraSolicitante = (char*)varOraSgOperadoraSolicitante.arr;

    ULOG("sgOperadoraSolicitante=%s",dadosParam.sgOperadoraSolicitante.c_str());

    ULOG_END("cWfCoreContatoPC::ObterSgOperadoraSolicitante()");
}

void cWfCoreContatoPC::ObterDadosAtividadeWorkflow(const char *sgAtividade)
{
    ULOG_START("cWfCoreContatoPC::ObterDadosAtividadeWorkflow()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraSgAtividade = sgAtividade;

        VARCHAR varOraIdAtividade[21];
        VARCHAR varOraDsTipoAtividade[256];

        short statOraIdAtividade = -1;
        short statOraDsTipoAtividade = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("sgAtividade=%s",sgAtividade);

    ULOG("Vai buscar o id da atividade em WORKFLOW.ATIVIDADE");

    EXEC SQL
        SELECT
            ATIVIDADE.IDATIVIDADE,
            TIPOATIVIDADE.DSTIPOATIVIDADE
        INTO
            :varOraIdAtividade:statOraIdAtividade,
            :varOraDsTipoAtividade:statOraDsTipoAtividade
        FROM
            WORKFLOW.ATIVIDADE ATIVIDADE,
            APOIO.TIPOATIVIDADE TIPOATIVIDADE
        WHERE
            ATIVIDADE.SGATIVIDADE = :prmOraSgAtividade
        AND ATIVIDADE.IDTIPOATIVIDADE = TIPOATIVIDADE.IDTIPOATIVIDADE;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterDadosAtividadeWorkflow()");
        throw new CoreContatoException(ERR_NFO_ATIVIDADE,__FILE__,__LINE__);
    }

    CONVIND(varOraIdAtividade,statOraIdAtividade);
    CONVIND(varOraDsTipoAtividade,statOraDsTipoAtividade);

    dadosParam.idAtividade = (char*)varOraIdAtividade.arr;
    dadosParam.dsTipoAtividade = (char*)varOraDsTipoAtividade.arr;

    ULOG("idAtividade=%s",dadosParam.idAtividade.c_str());
    ULOG("dsTipoAtividade=%s",dadosParam.dsTipoAtividade.c_str());

    ULOG_END("cWfCoreContatoPC::ObterDadosAtividadeWorkflow()");
}

bool cWfCoreContatoPC::ObterIdAtendimento(const char *nrBilhetePortabilidade)
{
    ULOG_START("cWfCoreContatoPC::ObterIdAtendimento()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraNrBilhetePortabilidade = nrBilhetePortabilidade;

        VARCHAR varOraIdAtendimento[21];
        VARCHAR varOraIdAgrupamentoEstadoTpProc[21];
        VARCHAR varOraIdFase[21];

        short statOraIdAtendimento = -1;
        short statOraIdAgrupamentoEstadoTpProc = -1;
        short statOraIdFase = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("nrBilhetePortabilidade=%s",nrBilhetePortabilidade);

    ULOG("Vai buscar o id do atendimento de PORTOUT em ATENDIMENTO.ATENDIMENTOPRIORIZACAO");

    EXEC SQL
        SELECT
            ATENDIMENTOPRIORIZACAO.IDATENDIMENTO,
            ATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC,
            ATENDIMENTOPRIORIZACAO.IDFASE
        INTO
            :varOraIdAtendimento:statOraIdAtendimento,
            :varOraIdAgrupamentoEstadoTpProc:statOraIdAgrupamentoEstadoTpProc,
            :varOraIdFase:statOraIdFase
        FROM
            ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO,
            WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRUPAMENTOESTADOTPPROC,
            WORKFLOW.AGRUPAMENTOESTADO AGRUPAMENTOESTADO,
            WORKFLOW.ESTADO
        WHERE
            ATENDIMENTOPRIORIZACAO.NRPROTOCOLOPORTABILIDADE = :prmOraNrBilhetePortabilidade
        AND ATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC
        AND AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADO = AGRUPAMENTOESTADO.IDAGRUPAMENTOESTADO
        AND AGRUPAMENTOESTADO.IDESTADO = ESTADO.IDESTADO
        AND ESTADO.DSESTADO LIKE 'EM TRATAMENTO%'
        AND ATENDIMENTOPRIORIZACAO.SGTIPOPORTABILIDADE = 'PORTOUT'
        AND ROWNUM < 2;

    if ( sqlca.sqlcode == 0 )
    {
        CONVIND(varOraIdAtendimento,statOraIdAtendimento);
        CONVIND(varOraIdAgrupamentoEstadoTpProc,statOraIdAgrupamentoEstadoTpProc);
        CONVIND(varOraIdFase,statOraIdFase);

        dadosParam.idAtendimento = (char*)varOraIdAtendimento.arr;
        dadosParam.idAgrupamentoEstadoTpProc = (char*)varOraIdAgrupamentoEstadoTpProc.arr;
        dadosParam.idFase = (char*)varOraIdFase.arr;

        ULOG("idAtendimento=%s",dadosParam.idAtendimento.c_str());
        ULOG("idAgrupamentoEstadoTpProc=%s",dadosParam.idAgrupamentoEstadoTpProc.c_str());
        ULOG("idFase=%s",dadosParam.idFase.c_str());
    }

    return sqlca.sqlcode == 0 ? true : false;

    ULOG_END("cWfCoreContatoPC::ObterIdAtendimento()");
}

void cWfCoreContatoPC::ObterAgrupamentoFuturo()
{
    ULOG_START("cWfCoreContatoPC::ObterAgrupamentoFuturo()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdAtividade = dadosParam.idAtividade.c_str();
        const char *prmOraIdAgrupamentoEstadoTpProc = dadosParam.idAgrupamentoEstadoTpProc.c_str();

        VARCHAR varOraIdAgrupamentoEstadoTpProcFt[21];
        short statOraIdAgrupamentoEstadoTpProcFt = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("idAtividade=%s",prmOraIdAtividade);
    ULOG("idAgrupamentoEstadoTpProc=%s",prmOraIdAgrupamentoEstadoTpProc);

    ULOG("Vai buscar o estado futuro do processo em FLUXOACOESPOUTV01");

    EXEC SQL
        SELECT
            FLUXOACOESPOUTV01.IDAGRUPAMENTOESTADOTPPROCFT
        INTO
            :varOraIdAgrupamentoEstadoTpProcFt:statOraIdAgrupamentoEstadoTpProcFt
        FROM 
            WORKFLOW.FLUXOACOESPOUTV01 FLUXOACOESPOUTV01,
            APOIO.TIPORELACIONAMENTOBKO TIPORELACIONAMENTOBKO
        WHERE
            FLUXOACOESPOUTV01.IDATIVIDADE = :prmOraIdAtividade
        AND FLUXOACOESPOUTV01.IDAGRUPAMENTOESTADOTPPROC = :prmOraIdAgrupamentoEstadoTpProc
        AND FLUXOACOESPOUTV01.IDTIPORELACIONAMENTOBKO = TIPORELACIONAMENTOBKO.IDTIPORELACIONAMENTOBKO
        AND TIPORELACIONAMENTOBKO.DSTIPORELACIONAMENTOBKO  = 'ANALISTA DE RETENÇÃO';
    
    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterAgrupamentoFuturo()");
        throw new CoreContatoException(ERR_NFO_ESTADOFUTURO,__FILE__,__LINE__);
    }

    CONVIND(varOraIdAgrupamentoEstadoTpProcFt,statOraIdAgrupamentoEstadoTpProcFt);

    dadosParam.idAgrupamentoEstadoTpProcFt = (char*)varOraIdAgrupamentoEstadoTpProcFt.arr;

    ULOG("idAgrupamentoEstadoTpProcFt=%s",(char*)varOraIdAgrupamentoEstadoTpProcFt.arr);

    ULOG_END("cWfCoreContatoPC::ObterAgrupamentoFuturo()");
}

//============================================================================================
// Rotinas copiadas do REGCONTATOFO
void cWfCoreContatoPC::ObterDadosLinPessoaCliente(const char *ddd,const char *nrLinha,const char *dsOperacao)
{
    ULOG_START("cWfCoreContatoPC::ObterDadosLinPessoaCliente()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraDdd = ddd;
        const char *prmOraNrLinha= nrLinha;
        const char *cdParametro;

        VARCHAR varOraNmGrupoAbertura[256];
        short statOraNmGrupoAbertura;

        VARCHAR varOraIdGrupoAbertura[21];
        short statOraIdGrupoAbertura;

        struct
        {
            VARCHAR idPessoa[21];
            VARCHAR idTipoCarteira[21];
            VARCHAR idSegmentacao[21];
            VARCHAR idPessoaDePara[21];
            VARCHAR idLinhaTelefonica[21];
            VARCHAR idTipoRelacionamento[21];
            VARCHAR dsTipoPessoa[256];
            VARCHAR idClassificacaoCarteira[256];
            VARCHAR inCorporativo[2];
            VARCHAR sgTipoLinha[256];
            VARCHAR idAreaRegistro[21];
        } varOra;

        struct
        {
            short idPessoa;
            short idTipoCarteira;
            short idSegmentacao;
            short idPessoaDePara;
            short idLinhaTelefonica;
            short idTipoRelacionamento;
            short dsTipoPessoa;
            short idClassificacaoCarteira;
            short inCorporativo;
            short sgTipoLinha;
            short idAreaRegistro;
        } statOra;

    EXEC SQL END DECLARE SECTION;

    ULOG("ddd=%s",ddd);
    ULOG("nrLinha=%s",nrLinha);

    memset(&varOra,0,sizeof(varOra));
    memset(&statOra,-1,sizeof(statOra));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("Vai obter os dados da pessoa...");

    EXEC SQL
        SELECT
            PESSOA.IDPESSOA,
            PESSOA.IDTIPOCARTEIRA,
            NVL(LINHASEGMENTACAO.IDSEGMENTACAO,'11') AS IDSEGMENTACAO,
            PESSOADEPARA.IDPESSOADEPARA,
            LINHATELEFONICA.IDLINHATELEFONICA,
            TIPORELACIONAMENTO.IDTIPORELACIONAMENTO,
            TIPOPESSOA.DSTIPOPESSOA,
            TIPOCARTEIRA.IDCLASSIFICACAOCARTEIRA,
            TIPOCARTEIRA.INCORPORATIVO,
            TIPOLINHA.SGTIPOLINHA,
            LINHABASE.IDAREAREGISTRO
        INTO
            :varOra:statOra
        FROM
            CUSTOMER.PESSOA PESSOA,
            CUSTOMER.PESSOADEPARA PESSOADEPARA,
            CUSTOMER.PESSOALINHA PESSOALINHA,
            CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
            LINHA.LINHATELEFONICA LINHATELEFONICA,
            LINHA.LINHABASE LINHABASE,
            LINHA.LINHASEGMENTACAO LINHASEGMENTACAO,
            APOIO.AREAREGISTRO AREAREGISTRO,
            APOIO.TIPOPESSOA TIPOPESSOA,
            APOIO.TIPOCARTEIRA TIPOCARTEIRA,
            APOIO.TIPOLINHA TIPOLINHA
        WHERE
            PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
        AND PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
        AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
        AND PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
        AND PESSOALINHA.IDLINHATELEFONICA = LINHASEGMENTACAO.IDLINHATELEFONICA (+)
        --//AND NVL(LINHATELEFONICA.DTEXPIRACAO,SYSDATE+1) > SYSDATE
        AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
        AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
        AND LINHABASE.NRLINHA = :prmOraNrLinha
        AND AREAREGISTRO.CDAREAREGISTRO = :prmOraDdd
        AND TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C'
        AND PESSOA.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA
        AND PESSOA.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
        AND LINHATELEFONICA.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA
        AND ROWNUM < 2;

    if ( sqlca.sqlcode )
    {
        if ( strcmp(dsOperacao,"PORTOUT") )
        { // se for portin/fraude/winback dados estão em outra tabela

            memset(&varOra,0,sizeof(varOra));
            memset(&statOra,-1,sizeof(statOra));

            ULOG("Vai obter os dados da pessoa para portout...");

            EXEC SQL
                SELECT
                    PESSOA.IDPESSOA,
                    PESSOA.IDTIPOCARTEIRA,
                    NULL AS IDSEGMENTACAO,
                    PESSOAPORTABILIDADE.IDPESSOADEPARA,
                    NULL AS IDLINHATELEFONICA,
                    NULL AS IDTIPORELACIONAMENTO,
                    TIPOPESSOA.DSTIPOPESSOA,
                    TIPOCARTEIRA.IDCLASSIFICACAOCARTEIRA,
                    TIPOCARTEIRA.INCORPORATIVO,
                    TIPOLINHA.SGTIPOLINHA,
                    AREAREGISTRO.IDAREAREGISTRO
                INTO
                    :varOra:statOra
                FROM
                    APOIO.AREAREGISTRO AREAREGISTRO,
                    (
                        SELECT PESPORTMAX.CDAREAREGISTRO,
                               PESPORTMAX.NRLINHA,
                               MAX(PESPORTMAX.DTULTIMAALTERACAO) AS DTULTIMAALTERACAO
                        FROM CUSTOMER.PESSOAPORTABILIDADE PESPORTMAX
                        WHERE PESPORTMAX.CDAREAREGISTRO = :prmOraDdd
                        AND PESPORTMAX.NRLINHA = :prmOraNrLinha
                        GROUP BY PESPORTMAX.CDAREAREGISTRO,PESPORTMAX.NRLINHA
                    ) PPTEMP,
                    CUSTOMER.PESSOA PESSOA,
                    CUSTOMER.PESSOADEPARA PESSOADEPARA,
                    CUSTOMER.PESSOAPORTABILIDADE PESSOAPORTABILIDADE,
                    APOIO.TIPOPESSOA TIPOPESSOA,
                    APOIO.TIPOCARTEIRA TIPOCARTEIRA,
                    APOIO.TIPOLINHA TIPOLINHA
                WHERE
                    PESSOAPORTABILIDADE.CDAREAREGISTRO = PPTEMP.CDAREAREGISTRO
                AND PESSOAPORTABILIDADE.NRLINHA = PPTEMP.NRLINHA
                AND PESSOAPORTABILIDADE.DTULTIMAALTERACAO = PPTEMP.DTULTIMAALTERACAO
                AND PESSOAPORTABILIDADE.CDAREAREGISTRO = AREAREGISTRO.CDAREAREGISTRO
                AND PESSOAPORTABILIDADE.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA (+)
                AND PESSOAPORTABILIDADE.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA
                AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA (+)
                AND PESSOA.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA (+)
                AND PESSOA.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA (+)
                AND ROWNUM < 2;

            if ( sqlca.sqlcode || -1 == statOra.idPessoa )
            {
                memset(&varOra,0,sizeof(varOra));
                memset(&statOra,-1,sizeof(statOra));

                ULOG("Vai obter os dados da pessoa NÃO CLIENTE portout...");

                EXEC SQL
                    SELECT
                        PESSOA.IDPESSOA,
                        PESSOA.IDTIPOCARTEIRA,
                        NULL AS IDSEGMENTACAO,
                        PESSOADEPARA.IDPESSOADEPARA,
                        NULL AS IDLINHATELEFONICA,
                        NULL AS IDTIPORELACIONAMENTO,
                        TIPOPESSOA.DSTIPOPESSOA,
                        TIPOCARTEIRA.IDCLASSIFICACAOCARTEIRA,
                        TIPOCARTEIRA.INCORPORATIVO,
                        NULL AS SGTIPOLINHA,
                        NULL AS IDAREAREGISTRO
                    INTO
                        :varOra:statOra
                    FROM
                        CUSTOMER.PESSOA PESSOA,
                        CUSTOMER.PESSOADEPARA PESSOADEPARA,
                        APOIO.TIPOPESSOA TIPOPESSOA,
                        APOIO.TIPOCARTEIRA TIPOCARTEIRA
                    WHERE 
                        UPPER(PESSOA.NMPESSOA) = 'NÃO CLIENTE'
                    AND PESSOA.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA
                    AND PESSOA.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
                    AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
                    AND ROWNUM < 2;

                ULOG("Vai obter o tipo de relacionamento para NÃO CLIENTE portout...");

                EXEC SQL
                    SELECT
                        IDTIPORELACIONAMENTO
                    INTO
                        :varOra.idTipoRelacionamento:statOra.idTipoRelacionamento
                    FROM
                        CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO
                    WHERE
                        TIPORELACIONAMENTO.NMTIPORELACIONAMENTO = 'NÃO CLIENTE';

                ULOG("Vai obter o tipo de linha para NÃO CLIENTE portout...");

                EXEC SQL
                    SELECT
                        SGTIPOLINHA
                    INTO
                        :varOra.sgTipoLinha:statOra.sgTipoLinha
                    FROM
                        APOIO.TIPOLINHA
                    WHERE
                        SGTIPOLINHA = 'NC';
            }
            else
            {
                CONVIND(varOra.idAreaRegistro,statOra.idAreaRegistro);

                ULOG("Vai obter o idLinhaTelefonica para idAreaRegistro=%s e nrLinha=%s",varOra.idAreaRegistro.arr,prmOraNrLinha);

                EXEC SQL
                    SELECT 
                        LINHATELEFONICA.IDLINHATELEFONICA
                    INTO
                        :varOra.idLinhaTelefonica:statOra.idLinhaTelefonica
                    FROM
                        LINHA.LINHABASE LINHABASE,
                        LINHA.LINHATELEFONICA LINHATELEFONICA
                    WHERE
                        LINHABASE.NRLINHA = :prmOraNrLinha
                    AND LINHABASE.IDAREAREGISTRO = :varOra.idAreaRegistro
                    AND LINHABASE.IDLINHABASE = LINHATELEFONICA.IDLINHABASE;

                ULOG("Vai obter o idTipoRelacionamento de cliente para portout...");

                EXEC SQL
                    SELECT
                        IDTIPORELACIONAMENTO
                    INTO
                        :varOra.idTipoRelacionamento:statOra.idTipoRelacionamento
                    FROM
                        CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO
                    WHERE
                        TIPORELACIONAMENTO.NMTIPORELACIONAMENTO = 'CLIENTE';
            }

            CONVIND(varOra.idPessoaDePara,statOra.idPessoaDePara);

            ULOG("Vai obter o idSegmentacao de cliente para o idPessoaDePara=%s",varOra.idPessoaDePara.arr);

            EXEC SQL
                SELECT
                    PESSOASEGMENTACAOHISTORICO.IDSEGMENTACAO
                INTO
                    :varOra.idSegmentacao:statOra.idSegmentacao
                FROM
                    CUSTOMER.PESSOASEGMENTACAOHISTORICO PESSOASEGMENTACAOHISTORICO,
                    CUSTOMER.PESSOASEGMENTACAO PESSOASEGMENTACAO
                WHERE
                    PESSOASEGMENTACAO.IDPESSOADEPARA = :varOra.idPessoaDePara
                AND PESSOASEGMENTACAO.IDPESSOASEGMENTACAO = PESSOASEGMENTACAOHISTORICO.IDPESSOASEGMENTACAO
                AND ROWNUM < 2;

            if ( sqlca.sqlcode || -1 == statOra.idSegmentacao )
            {
                ULOG("Vai obter o idSegmentacao de 'NÃO SEGMENTADO'");

                EXEC SQL
                    SELECT
                        SEGMENTACAO.IDSEGMENTACAO
                    INTO
                        :varOra.idSegmentacao:statOra.idSegmentacao
                    FROM
                        APOIO.SEGMENTACAO SEGMENTACAO
                    WHERE
                        SEGMENTACAO.DSSEGMENTACAO = 'NÃO SEGMENTADO';
            }

        } // if ( strcmp(dsOperacao,"PORTOUT") )
        else
        {
            ULOGW("sqlcode=%d",sqlca.sqlcode);
            ULOG_END("cWfCoreContatoPC::ObterDadosLinPessoaCliente()");
            throw new CoreContatoException(ERR_NFO_DADOSPESSOA,__FILE__,__LINE__);
        }
    }

    CONVIND(varOra.idPessoa,statOra.idPessoa);
    CONVIND(varOra.idTipoCarteira,statOra.idTipoCarteira);
    CONVIND(varOra.idSegmentacao,statOra.idSegmentacao);
    CONVIND(varOra.idPessoaDePara,statOra.idPessoaDePara);
    CONVIND(varOra.idLinhaTelefonica,statOra.idLinhaTelefonica);
    CONVIND(varOra.idTipoRelacionamento,statOra.idTipoRelacionamento);
    CONVIND(varOra.dsTipoPessoa,statOra.dsTipoPessoa);
    CONVIND(varOra.idClassificacaoCarteira,statOra.idClassificacaoCarteira);
    CONVIND(varOra.inCorporativo,statOra.inCorporativo);
    CONVIND(varOra.sgTipoLinha,statOra.sgTipoLinha);

    dadosParam.idPessoaCliente = (char*)varOra.idPessoa.arr;
    dadosParam.idSegmentacaoCliente = (char*)varOra.idSegmentacao.arr;
    dadosParam.idPessoaDeParaCliente = (char*)varOra.idPessoaDePara.arr;
    dadosParam.idTipoCarteiraCliente = (char*)varOra.idTipoCarteira.arr;
    dadosParam.idLinhaTelefonicaCliente = (char*)varOra.idLinhaTelefonica.arr;
    dadosParam.idLinhaTelefonica = (char*)varOra.idLinhaTelefonica.arr;
    dadosParam.idTipoRelacionamentoCliente = (char*)varOra.idTipoRelacionamento.arr;
    dadosParam.dsTipoPessoa = (char*)varOra.dsTipoPessoa.arr;
    // idPessoaLinhaHistorico = (char*)varOra.idPessoaLinhaHistorico.arr;

    ULOG("idPessoaCliente=%s",dadosParam.idPessoaCliente.c_str());
    ULOG("idSegmentacaoCliente=%s",dadosParam.idSegmentacaoCliente.c_str());
    ULOG("idPessoaDeParaCliente=%s",dadosParam.idPessoaDeParaCliente.c_str());
    ULOG("idTipoCarteiraCliente=%s",dadosParam.idTipoCarteiraCliente.c_str());
    ULOG("idClassificacaoCarteira=%s",varOra.idClassificacaoCarteira.arr);
    ULOG("inCorporativo=%s",varOra.inCorporativo.arr);
    ULOG("idLinhaTelefonicaCliente=%s",dadosParam.idLinhaTelefonicaCliente.c_str());
    ULOG("idTipoRelacionamentoCliente=%s",dadosParam.idTipoRelacionamentoCliente.c_str());
    ULOG("dsTipoPessoa=%s",dadosParam.dsTipoPessoa.c_str());
    ULOG("sgTipoLinha=%s",varOra.sgTipoLinha.arr);
    // ULOG("idPessoaLinhaHistorico=%s",idPessoaLinhaHistorico.c_str());

    // Atende à regra definida via e-mail pelo Marcelo Novaes em 11/09/2008
    // 1) Não considero mais o tipo da pessoa. A partir de agora somente a carteira.  OK 
    // 2) Se carteira for corporativa diferente de GCN o grupo será o PORT ATIVO PJ  (independente do tipo de pessoa) 
    // 3) Se a carteira for corporativa GCN o grupo será o BKO PORTABILIDADE
    // 4) Sem considerar a cartteira caso a conta possua um consultor de relacionamento associado,
    //    o processo deverá ser tratavado para o consultor cadastrado e o mesmo somente visualizará
    //    os processos direcionados para ele na fila.
    // 5) Se a carteira for não corporativa  para qualquer tipo de linha  PORT ATIVO PF PRE E POS
    if ( stricmp((char*)varOra.inCorporativo.arr,"1")==0 )
    {
        if ( strcmp((char*)varOra.idClassificacaoCarteira.arr,"GCN")==0 )
        {
            cdParametro = "PORTABILIDADE_GRUPO_PJ_GCN";
        }
        else
        {
            cdParametro = "PORTABILIDADE_GRUPO_PJ_PMES";
        }
    }
    else
    {
        cdParametro = "PORTABILIDADE_GRUPO_PF_TODAS";
    }

    ULOG("vai obter o nome do grupo para o parametro=%s",cdParametro);

    statOraNmGrupoAbertura = -1;

    EXEC SQL
        SELECT
            DSVALORPARAMETRO
        INTO
            :varOraNmGrupoAbertura:statOraNmGrupoAbertura
        FROM
            APOIO.PARAMETRO
        WHERE 
            CDPARAMETRO = :cdParametro;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterDadosLinPessoaCliente()");
        throw new CoreContatoException(ERR_NFO_PARAMETRONOTFOUND,__FILE__,__LINE__);
    }

    CONVIND(varOraNmGrupoAbertura,statOraNmGrupoAbertura);

    statOraIdGrupoAbertura = -1;

    ULOG("vai obter o id do grupo=%s",varOraNmGrupoAbertura.arr);

    EXEC SQL
        SELECT
            IDGRUPO
        INTO
            :varOraIdGrupoAbertura:statOraIdGrupoAbertura
        FROM
            ACESSO.GRUPO
        WHERE
            NMGRUPO = :varOraNmGrupoAbertura;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterDadosLinPessoaCliente()");
        throw new CoreContatoException(ERR_NFO_GRUPOABERTURANF,__FILE__,__LINE__);
    }

    CONVIND(varOraIdGrupoAbertura,statOraIdGrupoAbertura);
    dadosParam.idGrupoAbertura = (char*)varOraIdGrupoAbertura.arr;
    ULOG("idGrupoAbertura=%s",dadosParam.idGrupoAbertura.c_str());

    ULOG_END("cWfCoreContatoPC::ObterDadosLinPessoaCliente()");
}

/*
void cWfCoreContatoPC::ObterIdConta(const char *_idLinhaTelefonica,const char *_idTipoRelacionamento)
{
    ULOG_START("cWfCoreContatoPC::ObterIdConta()");

    EXEC SQL BEGIN DECLARE SECTION;

        const char *idLinhaTelefonica = _idLinhaTelefonica;
        const char *idTipoRelacionamento = _idTipoRelacionamento;

    EXEC SQL END DECLARE SECTION;

    ULOG("idLinhaTelefonica=%s",idLinhaTelefonica);
    ULOG("idTipoRelacionamento=%s",idTipoRelacionamento);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();

    EXEC SQL
        SELECT
            IDCONTA
        INTO
            :mOra_idConta:mOra_iidConta
        FROM
            CUSTOMER.LINHACONTA LINHACONTA
        WHERE
            LINHACONTA.IDLINHATELEFONICA = :idLinhaTelefonica
        AND (LINHACONTA.DTEXPIRACAO >= SYSDATE OR LINHACONTA.DTEXPIRACAO IS NULL)
        AND rownum < 2;

    if ( sqlca.sqlcode )
    {
        ULOGW("sqlcode=%d",sqlca.sqlcode);
        ULOG_END("cWfCoreContatoPC::ObterIdConta()");
        throw new CoreContatoException(ERR_PRC_OBT_IDCONTA,__FILE__,__LINE__);
    }

    CONVIND(mOra_idConta,mOra_iidConta);

    idConta = (char*)mOra_idConta.arr;

    ULOG("idConta=%s",idConta.c_str());

    ULOG_END("cWfCoreContatoPC::ObterIdConta()");
}
*/

void cWfCoreContatoPC::ObterDadosPessoaCliente(const char *dsOperacao)
{
    ULOG_START("cWfCoreContatoPC::ObterDadosPessoaCliente()");

    bool telefoneNaoEncontrado = false;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *prmOraIdPessoa = dadosParam.idPessoaCliente.c_str();

        struct
        {
            VARCHAR idTipoCarteira[21];
            VARCHAR nmPessoa[256];
            VARCHAR idPessoaDePara[21];
        } varOra;

        struct
        {
            short idTipoCarteira;
            short nmPessoa;
            short idPessoaDePara;
        } statOra;

        struct
        {
            VARCHAR idPessoaLinhaHistorico[21];
            VARCHAR idLinhaTelefonica[21];
        } varOraPes;

        struct
        {
            short idPessoaLinhaHistorico;
            short idLinhaTelefonica;
        } statOraPes;

        VARCHAR varOraIdConta[21];
        VARCHAR varOraIdSegmentacao[21];

        short statOraIdConta = -1;
        short statOraIdSegmentacao = -1;

    EXEC SQL END DECLARE SECTION;

    memset(&varOra,0,sizeof(varOra));
    memset(&statOra,-1,sizeof(statOra));

    memset(&varOraPes,0,sizeof(varOraPes));
    memset(&statOraPes,-1,sizeof(statOraPes));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOG("Vai buscar nome e carteira de idPessoa=%s",prmOraIdPessoa);

    ////////////////////////////////////////////////////////////////////////////
    // 1) Encontra o IDPESSOADEPARA e o tipo da carteira
    EXEC SQL
        SELECT
            PESSOA.IDTIPOCARTEIRA,
            PESSOA.NMPESSOA,
            PESSOADEPARA.IDPESSOADEPARA
        INTO
            :varOra:statOra
        FROM
            CUSTOMER.PESSOA PESSOA,
            CUSTOMER.PESSOADEPARA PESSOADEPARA
        WHERE
            PESSOA.IDPESSOA = :prmOraIdPessoa
        AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
        AND ROWNUM < 2;

    if ( sqlca.sqlcode )
    { // O IDPESSOADEPARA é obrigatório, se não encontrar sai por exceção.
        if ( strcmp(dsOperacao,"PORTOUT")==0 )
        { // se não esta fazendo PORTIN/WINBACK/FRAUDE o dado é obrigatório
            ULOGW("sqlcode=%d",sqlca.sqlcode);
            ULOG_END("cWfCoreContatoPC::ObterDadosPessoaCliente()");
            throw new CoreContatoException(ERR_IDPESSOADEPARA_NAOEXISTE,__FILE__,__LINE__);
        }

        ULOG("Tipo da carteira do cliente não encontrada, assumindo 'NÃO CLASSIFICADO'");

        statOra.idTipoCarteira = -1;

        EXEC SQL
            SELECT
                IDTIPOCARTEIRA
            INTO
                :varOra.idTipoCarteira:statOra.idTipoCarteira
            FROM
                APOIO.TIPOCARTEIRA
            WHERE
                DSTIPOCARTEIRA = 'NÃO CLASSIFICADO';

        if ( sqlca.sqlcode )
        { // Se 'NÃO CLASSIFICADO' não foi cadastrado, sai com erro.
            ULOGW("sqlcode=%d",sqlca.sqlcode);
            ULOG_END("cWfCoreContatoPC::ObterDadosPessoaCliente()");
            throw new CoreContatoException(ERR_IDTPCARTEIRA_NAO_EXISTE,__FILE__,__LINE__);
        }
    }

    CONVIND(varOra.idTipoCarteira,statOra.idTipoCarteira);
    CONVIND(varOra.nmPessoa,statOra.nmPessoa);
    CONVIND(varOra.idPessoaDePara,statOra.idPessoaDePara);

    dadosParam.idTipoCarteiraCliente = (char*)varOra.idTipoCarteira.arr;
    dadosParam.nmPessoaCliente = (char*)varOra.nmPessoa.arr;
    dadosParam.idPessoaDeParaCliente = (char*)varOra.idPessoaDePara.arr;

    ULOG("idTipoCarteira=%s",dadosParam.idTipoCarteiraCliente.c_str());
    ULOG("nmPessoa=%s",dadosParam.nmPessoaCliente.c_str());
    ULOG("idPessoaDePara=%s",dadosParam.idPessoaDeParaCliente.c_str());

    ////////////////////////////////////////////////////////////////////////////
    // 2) Tenta obter o id da linha do cliente
    //
    //  Nota:
    //    Em discusão com o analista funcional, Marcelo Rodrigues, ficou 
    //    estabelecido que todas as consultas que forem feitas apenas pelo
    //    numero da linha serão para linhas válidas e ativas na VIVO, 
    //    garantindo com isso que o idPessoaLinhaHistorico mais novo que é
    //    pesquisado ainda pertence ao usuário/cliente para o qual o processo
    //    será aberto.
    //    Dez/2006 - Cassio
    //
    ULOG("(1) Obtendo número da linha do cliente idPessoaDePara=%s",dadosParam.idPessoaDeParaCliente.c_str());
    EXEC SQL
        SELECT
            PESSOALINHAHISTORICO.IDPESSOALINHAHISTORICO,
            PESSOALINHAHISTORICO.IDLINHATELEFONICA
        INTO
            :varOraPes:statOraPes
        FROM
            CUSTOMER.PESSOALINHAHISTORICO PESSOALINHAHISTORICO,
            CUSTOMER.PESSOALINHA PESSOALINHA,
            LINHA.LINHATELEFONICA LINHATELEFONICA,
            LINHA.LINHABASE LINHABASE
        WHERE
            PESSOALINHAHISTORICO.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA
        AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE
        AND PESSOALINHAHISTORICO.IDTIPORELACIONAMENTO = 2
        AND PESSOALINHAHISTORICO.IDPESSOADEPARA = :varOra.idPessoaDePara
        AND PESSOALINHA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA
        AND PESSOALINHAHISTORICO.IDLINHATELEFONICA = PESSOALINHA.IDLINHATELEFONICA
        AND PESSOALINHAHISTORICO.IDTIPORELACIONAMENTO = PESSOALINHA.IDTIPORELACIONAMENTO
        AND ROWNUM < 2;

    if ( sqlca.sqlcode )
    { // Dados da linha são obrigatórios
        
        ULOG("(2) Obtendo número da linha do cliente idPessoaDePara=%s",dadosParam.idPessoaDeParaCliente.c_str());
        
        memset(&varOraPes,0,sizeof(varOraPes));
        memset(&statOraPes,-1,sizeof(statOraPes));

        EXEC SQL
            SELECT
                IDPESSOALINHAHISTORICO,
                IDLINHATELEFONICA
            INTO
                :varOraPes:statOraPes
            FROM
            (
                SELECT
                    PESSOALINHAHISTORICO.IDPESSOALINHAHISTORICO,
                    PESSOALINHAHISTORICO.CDAREAREGISTRO,
                    PESSOALINHAHISTORICO.NRLINHA,
                    PESSOALINHAHISTORICO.IDLINHATELEFONICA
                FROM
                    CUSTOMER.PESSOALINHAHISTORICO PESSOALINHAHISTORICO
                WHERE
                    PESSOALINHAHISTORICO.IDPESSOADEPARA = :varOra.idPessoaDePara
                AND PESSOALINHAHISTORICO.IDTIPORELACIONAMENTO = 2
                ORDER BY 
                    PESSOALINHAHISTORICO.DTULTIMAALTERACAO DESC
            )
            WHERE ROWNUM < 2;

        if ( sqlca.sqlcode )
        { // Dados da linha são obrigatórios
            if ( strcmp(dsOperacao,"PORTOUT")==0 )
            { // se não esta fazendo PORTIN/WINBACK/FRAUDE o dado é obrigatório
                ULOGW("sqlcode=%d",sqlca.sqlcode);
                ULOG_END("cWfCoreContatoPC::ObterDadosPessoaCliente()");
                throw new CoreContatoException(ERR_NFO_LINHATELEFONICA,__FILE__,__LINE__);
            }
        }
    }

    CONVIND(varOraPes.idPessoaLinhaHistorico,statOraPes.idPessoaLinhaHistorico);
    CONVIND(varOraPes.idLinhaTelefonica,statOraPes.idLinhaTelefonica);

    if ( 0==sqlca.sqlcode && dadosParam.idLinhaTelefonica.length() == 0 )
    {
        dadosParam.idPessoaLinhaHistorico = (char*)varOraPes.idPessoaLinhaHistorico.arr;
        dadosParam.idLinhaTelefonica = (char*)varOraPes.idLinhaTelefonica.arr;

        ULOG("idPessoaLinhaHistorico=%s",dadosParam.idPessoaLinhaHistorico.c_str());
        ULOG("idLinhaTelefonica=%s",dadosParam.idLinhaTelefonica.c_str());
    }

    ////////////////////////////////////////////////////////////////////////////
    // 3) Tenta obter o id da conta
    ULOG("Vai obter o id da conta");

    EXEC SQL
        SELECT
            LINHACONTA.IDCONTA
        INTO
            :varOraIdConta:statOraIdConta
        FROM
            CUSTOMER.LINHACONTA LINHACONTA
        WHERE
            LINHACONTA.IDLINHATELEFONICA = :varOraPes.idLinhaTelefonica
        AND NVL(LINHACONTA.DTEXPIRACAO,SYSDATE+1) > SYSDATE
        AND LINHACONTA.IDTIPORELACIONAMENTO = (SELECT TPR.IDTIPORELACIONAMENTO
                                                 FROM CUSTOMER.TIPORELACIONAMENTO TPR
                                                WHERE TPR.SGTIPORELACIONAMENTO = 'C');
    if ( 0 == sqlca.sqlcode )
    {
        CONVIND(varOraIdConta,statOraIdConta);

        dadosParam.idConta = (char*)varOraIdConta.arr;

        ULOG("idConta=%s",dadosParam.idConta.c_str());
    }
    else
    {
        ULOG("idConta não encontrado");
    }

    ////////////////////////////////////////////////////////////////////////////
    // 4) Tenta obter a segmentação do cliente
    EXEC SQL
        SELECT
            PESSOASEGMENTACAOHISTORICO.IDSEGMENTACAO
        INTO
            :varOraIdSegmentacao:statOraIdSegmentacao
        FROM
            CUSTOMER.PESSOASEGMENTACAOHISTORICO PESSOASEGMENTACAOHISTORICO,
            CUSTOMER.PESSOASEGMENTACAO PESSOASEGMENTACAO
        WHERE
            PESSOASEGMENTACAO.IDPESSOADEPARA = :varOra.idPessoaDePara
        AND PESSOASEGMENTACAO.IDPESSOASEGMENTACAO =
                                 PESSOASEGMENTACAOHISTORICO.IDPESSOASEGMENTACAO;

    if ( sqlca.sqlcode )
    { // Se não encontrou a segmentação, assume como não segmentado

        ULOG("Segmentaçao do cliente não encontrada, assumindo 'NÃO SEGMENTADO'");

        statOraIdSegmentacao = -1;

        EXEC SQL
            SELECT
                IDSEGMENTACAO
            INTO
                :varOraIdSegmentacao:statOraIdSegmentacao
            FROM
                APOIO.SEGMENTACAO
            WHERE
                DSSEGMENTACAO = 'NÃO SEGMENTADO';

        if ( sqlca.sqlcode )
        { // Se 'NÃO SEGMENTADO' não foi cadastrado, sai com erro.
            ULOGW("sqlcode=%d",sqlca.sqlcode);
            ULOG_END("cWfCoreContatoPC::ObterDadosPessoaCliente()");
            throw new CoreContatoException(ERR_IDSEGMENTACAO_NSEG_NEXIS,__FILE__,__LINE__);
        }
    }

    CONVIND(varOraIdSegmentacao,statOraIdSegmentacao);

    dadosParam.idSegmentacaoCliente = (char*)varOraIdSegmentacao.arr;

    ULOG("idSegmentacao=%s",dadosParam.idSegmentacaoCliente.c_str());

    ULOG_END("cWfCoreContatoPC::ObterDadosPessoaCliente()");
}

/*
void cWfCoreContatoPC::VerificarProcedencia(const char *_idProcedencia)
{
    ULOG_START("cWfCoreContatoPC::VerificarProcedencia()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *mOra_idProcedencia = _idProcedencia;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();

    EXEC SQL
        SELECT
            IDPROCEDENCIA
        FROM
            APOIO.PROCEDENCIA
        WHERE
            IDPROCEDENCIA = :mOra_idProcedencia;

    ULOG("idProcedencia=%s",_idProcedencia);

    if ( sqlca.sqlcode )
    {
        ULOGW("cWfCoreContatoPC::VerificarProcedencia(),sqlcode=%d",sqlca.sqlcode);
        throw new CoreContatoException(ERR_IDPROCEDENCIA_NAOEXISTE,__FILE__,__LINE__);
    }

    ULOG_END("cWfCoreContatoPC::VerificarProcedencia()");
}

void cWfCoreContatoPC::ObterIdContato(const char *_cdContato, char **_idContato)
{
    ULOG_START("cWfCoreContatoPC::ObterIdContato()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *mOra_cdContato = _cdContato;
        VARCHAR mOra_dsValorParametro[256];
        short mOra_idsValorParametro = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();

    EXEC SQL
        SELECT 
            DSVALORPARAMETRO
        INTO
            :mOra_dsValorParametro:mOra_idsValorParametro
        FROM 
            APOIO.PARAMETRO
        WHERE 
            CDPARAMETRO = :mOra_cdContato;

    if ( sqlca.sqlcode )
    {
        ULOGW("cWfCoreContatoPC::ObterIdContato(),sqlcode=%d",sqlca.sqlcode);
        throw new CoreContatoException(ERR_DSVALORPARAMETRO_NAOEXIS,__FILE__,__LINE__);
    }

    CONVIND(mOra_dsValorParametro,mOra_idsValorParametro);

    *_idContato = new char [strlen((char*)mOra_dsValorParametro.arr)+1];
    strcpy(*_idContato,(char*)mOra_dsValorParametro.arr);

    ULOG_END("cWfCoreContatoPC::ObterIdContato()");
}

void cWfCoreContatoPC::VerificarCanal(const char *_idCanal)
{
    ULOG_START("cWfCoreContatoPC::VerificarCanal()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *mOra_idCanal = _idCanal;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();

    EXEC SQL
        SELECT
            IDCANAL
        FROM
            APOIO.CANAL
        WHERE
            IDCANAL = :mOra_idCanal;

    ULOG("idCanal=%s",_idCanal);

    if ( sqlca.sqlcode )
    {
        ULOGW("cWfCoreContatoPC::VerificarCanal(),sqlcode=%d",sqlca.sqlcode);
        throw new CoreContatoException(ERR_IDCANAL_NAOEXISTE,__FILE__,__LINE__);
    }

    ULOG_END("cWfCoreContatoPC::VerificarCanal()");
}

void cWfCoreContatoPC::VerificarContato(const char *_idContato)
{
    ULOG_START("cWfCoreContatoPC::VerificarContato()");

    EXEC SQL BEGIN DECLARE SECTION;
        const char *mOra_idContato = _idContato;
        int mOra_Indisponibilidade;
        short mOra_iIndisponibilidade;
    EXEC SQL END DECLARE SECTION;

    ULOG("idContato=%s",_idContato);

    EXEC SQL WHENEVER SQLERROR DO sql_error_WfCoreContatoPC();

    EXEC SQL
        SELECT
            INDISPONIBILIDADE
        INTO
            :mOra_Indisponibilidade:mOra_iIndisponibilidade
        FROM
            CONTATOADM.CONTATO
        WHERE
            IDCONTATO = :mOra_idContato;

    if ( sqlca.sqlcode )
    {
        ULOGW("cWfCoreContatoPC::VerificarContato(),sqlcode=%d",sqlca.sqlcode);
        throw new CoreContatoException(ERR_IDCONTATO_NAOEXISTE,__FILE__,__LINE__);
    }

    ULOG("Indisponibilidade=%d",mOra_Indisponibilidade);

    // ==========================================================================
    // ==> Março, 2007 - Cassio
    // O Miguel Benaventes solicitou que este serviço não verifique se o contato
    // esta disponível para abrir um processo.
    //
    // if ( mOra_Indisponibilidade != 1 )
    // {
    //     ULOGW("cWfCoreContatoPC::VerificarContato(),sqlcode=%d",sqlca.sqlcode);
    //     throw new CoreContatoException(ERR_IDCONTATO_INDISPONI,__FILE__,__LINE__);
    // }
    // ==> Março, 2007 - Cassio
    // ==========================================================================

    EXEC SQL
        SELECT
            IDCONTATO
        FROM
            CONTATOADM.CONTATOFOLHA
        WHERE
            IDCONTATO = :mOra_idContato;

    if ( sqlca.sqlcode )
    {
        ULOGW("cWfCoreContatoPC::VerificarContato(),sqlcode=%d",sqlca.sqlcode);
        throw new CoreContatoException(ERR_IDCONTATO_NAOEHFOLHA,__FILE__,__LINE__);
    }

    ULOG_END("cWfCoreContatoPC::VerificarContato()");
}
*/

void cWfCoreContatoPC::sql_error_WfCoreContatoPC()
{
    throw new TuxBasicOraException(sqlca.sqlcode
                                  ,sqlca.sqlerrm.sqlerrmc
                                  ,sqlca.sqlerrm.sqlerrml);
}
