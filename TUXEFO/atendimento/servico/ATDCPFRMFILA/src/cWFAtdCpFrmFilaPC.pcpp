/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:37 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include <tuxfw.h>
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../../../commons/SmallString.h"

#include "../include/stWFAtdCpFrmFila.h"

#include <iostream>
using namespace std;

void WFAtdCpFrmFilaErro(sqlca*sqlca);

void proCObterCamposFormulario(XMLGen *saida)
{
    ULOG_START( "proCObterCamposFormulario()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR idContatoFolhaCampo[256];
        VARCHAR idCampo[256];
        VARCHAR nmCampo[256];

        short i_idContatoFolhaCampo;
        short i_idCampo;
        short i_nmCampo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdCpFrmFilaErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE cursorCamposForm CURSOR FOR 
        SELECT 
            idCampo,nmCampo,NVL(idTabelaDominio,0) idTabelaDominio
        INTO
            idContatoFolhaCampo:i_idContatoFolhaCampo,
            idCampo:i_idCampo,
            nmCampo:i_nmCampo            
        FROM 
            Atendimento.CampoDominioV01;

    EXEC SQL OPEN cursorCamposForm;

    while (true)
    {
        EXEC SQL FETCH cursorCamposForm 
                  INTO idCampo:i_idCampo,
                       nmCampo:i_nmCampo,
                       idContatoFolhaCampo:i_idContatoFolhaCampo;

        CONVIND( idContatoFolhaCampo,i_idContatoFolhaCampo );
        CONVIND( idCampo,i_idCampo );
        CONVIND( nmCampo,i_nmCampo );

        saida->createTag("FormularioCampoVO");
            saida->addItem( "idContatoFolhaCampo",(char*)idContatoFolhaCampo.arr );
            saida->addItem( "idCampo",(char*)idCampo.arr );
            saida->addItem( "nmCampo",(char*)nmCampo.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE cursorCamposForm;

    ULOG_END( "proCObterCamposFormulario()" );

}

void proCObterTiposLinha(XMLGen *saida)
{
    ULOG_START( "proCObterTiposLinha()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR idTipoLinha[256];
        VARCHAR dsTipoLinha[256];

        short i_idTipoLinha;
        short i_dsTipoLinha;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdCpFrmFilaErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE cursorTiposLinha CURSOR FOR 
        SELECT 
            idTipoLinha, dsTipoLinha
        INTO
            idTipoLinha:i_idTipoLinha,
            dsTipoLinha:i_dsTipoLinha
        FROM 
            apoio.TipoLinha
        WHERE
            idTipoLinha > 0;

    EXEC SQL OPEN cursorTiposLinha;

    while (true)
    {
        EXEC SQL FETCH cursorTiposLinha 
                  INTO idTipoLinha:i_idTipoLinha,
                       dsTipoLinha:i_dsTipoLinha;

        CONVIND( idTipoLinha,i_idTipoLinha );
        CONVIND( dsTipoLinha,i_dsTipoLinha );

        saida->createTag("TipoLinhaVO");
        saida->addProp("xmlns", "cliente.fo.vivo.com.br/vo");
            saida->addItem( "id",(char*)idTipoLinha.arr );
            saida->addItem( "descricao",(char*)dsTipoLinha.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE cursorTiposLinha;

    ULOG_END( "proCObterTiposLinha()" );
}

void proCObterUfOperadoras(XMLGen *saida)
{
    ULOG_START( "proCObterUfOperadoras()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR idUFOperadora[256];
        VARCHAR sgUF[256];
        VARCHAR nmUF[256];

        short i_idUFOperadora;
        short i_sgUF;
        short i_nmUF;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdCpFrmFilaErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

/*
    EXEC SQL DECLARE cursorUfOperadoras CURSOR FOR 
        SELECT 
            idUFOperadora,sgUF,nmUF
        INTO
            idUFOperadora:i_idUFOperadora,
            sgUF:i_sgUF,
            nmUF:i_nmUF
        FROM 
            customer.UFOperadoraB01
        WHERE
            idUF > 0;
*/

    EXEC SQL DECLARE cursorUfOperadoras CURSOR FOR 
        SELECT 
            idUFOperadora,sgUF,nmUF
        INTO
            idUFOperadora:i_idUFOperadora,
            sgUF:i_sgUF,
            nmUF:i_nmUF
        FROM 
            CUSTOMER.OPERADORA OPERADORA,
            APOIO.UF UF,
            CUSTOMER.UFOPERADORA UFOPERADORA
        WHERE 
            UFOPERADORA.IDUF = UF.IDUF
        AND 
            UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
        AND
            UF.IDUF > 0;

    EXEC SQL OPEN cursorUfOperadoras;

    while (true)
    {
        EXEC SQL FETCH cursorUfOperadoras 
                  INTO idUFOperadora:i_idUFOperadora,
                       sgUF:i_sgUF,
                       nmUF:i_nmUF;

        CONVIND( idUFOperadora,i_idUFOperadora );
        CONVIND( sgUF,i_sgUF );
        CONVIND( nmUF,i_nmUF );

        saida->createTag("UFVO");
        saida->addProp("xmlns", "cliente.fo.vivo.com.br/vo");
            saida->addItem( "idUF",(char*)idUFOperadora.arr );
            saida->addItem( "sgUF",(char*)sgUF.arr );
            saida->addItem( "nmUF",(char*)nmUF.arr );
        saida->closeTag();
    }

    EXEC SQL CLOSE cursorUfOperadoras;

    ULOG_END( "proCObterUfOperadoras()" );

}

void WFAtdCpFrmFilaErro(sqlca*sqlca)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE( "WFAtdCpFrmFilaErro:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc
         );

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
