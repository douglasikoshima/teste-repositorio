#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#include "../include/cWFAndamentoObservacao.h"
#include "../include/stWFAndamentoObservacao.h"

void rtrim(char *pStr);
void sql_error_WFAndamentoObservacao(sqlca*sqlca);

    // Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stWFAndamentoObservacao.h"
    EXEC SQL END DECLARE SECTION;

long proCIncluirWFAndamentoObservacao(st_AndamentoObservacao* dados, st_vlAndamentoObservacao* status, XMLDPR *xmlDpr)
{
    ULOG_START( "proCIncluirWFAndamentoObservacao()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AndamentoObservacao   *oDados = dados;
        struct st_vlAndamentoObservacao *oStatus = status;
        VARCHAR varOraDsObservacao[1001];
        short statOraDsObservacao = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL
        SELECT 
            SUBSTR(TRIM(:oDados->pdsAndamentoObservacao),1,1000)
        INTO
            :varOraDsObservacao:statOraDsObservacao
        FROM DUAL;

    CONVIND(varOraDsObservacao,statOraDsObservacao);

    if ( varOraDsObservacao.arr[0] )
    {
        ULOG( "vai inserir observação para idAndamento=%ld",oDados->idAndamento );

        EXEC SQL WHENEVER SQLERROR DO sql_error_WFAndamentoObservacao(&sqlca);

        EXEC SQL 
            INSERT INTO
                atendimento.AndamentoObservacao
                (
                    idAndamento,
                    dsAndamentoObservacao,
                    idUsuarioAlteracao,
                    dtUltimaAlteracao
                )
                VALUES
                (
                    :oDados->idAndamento,
                    :varOraDsObservacao:statOraDsObservacao,
                    DECODE(:oStatus->idUsuarioAlteracao,-1,NULL,:oDados->idUsuarioAlteracao),
                    DECODE(:oStatus->dtUltimaAlteracao,-1,SYSDATE,TO_DATE(:oDados->dtUltimaAlteracao,'DD/MM/YYYY HH24:MI:SS'))
                );

        // ==> SM324--DPR--DEZ/2006--Cassio
        if ( xmlDpr )
        {
            AndamentoObservacaoDPR andamentoobservacaodpr;

            andamentoobservacaodpr.setIdAndamento(oDados->idAndamento);
            andamentoobservacaodpr.setDsAndamentoObservacao((char*)oDados->pdsAndamentoObservacao);
            andamentoobservacaodpr.setOpCode(OPCODE_INSERT);

            xmlDpr->andamentoobservacaovo.inserir(&andamentoobservacaodpr);
        }
        // <== SM324--DPR--DEZ/2006--Cassio
    }

    ULOG_END( "proCIncluirWFAndamentoObservacao()" );

    return oDados->idAndamento;
}

bool proCAlterarWFAndamentoObservacao(st_AndamentoObservacao* dados, st_vlAndamentoObservacao* status, XMLGen* saida)
{

    ULOG_START( "proCAlterarWFAndamentoObservacao()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AndamentoObservacao   *oDados = dados;
        struct st_vlAndamentoObservacao *oStatus = status;

        char query[800] = "UPDATE atendimento.AndamentoObservacao SET ";

    EXEC SQL END DECLARE SECTION;

    
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAndamentoObservacao(&sqlca);

    bool separa = false;

    if (status->dsAndamentoObservacao != -1) 
        montaUpdate("dsAndamentoObservacao", oDados->pdsAndamentoObservacao, TIPO_CHAR);

    if (status->idUsuarioAlteracao != -1) 
        montaUpdate("idUsuarioAlteracao", oDados->idUsuarioAlteracao, TIPO_INT);

    if (status->dtUltimaAlteracao != -1) 
        montaUpdate("dtUltimaAlteracao", oDados->dtUltimaAlteracao, TIPO_DATAHORA);

    sprintf(query, "%s WHERE idAndamento = %ld", query, dados->idAndamento);

    ULOG( "QUERY [%s]",query );

    EXEC SQL EXECUTE IMMEDIATE :query;

    ULOG_END( "proCAlterarWFAndamentoObservacao()" );

    return true;
}

bool proCExcluirWFAndamentoObservacao(st_AndamentoObservacao* dados, st_vlAndamentoObservacao* status, XMLGen* saida)
{

    ULOG_START( "proCExcluirWFAndamentoObservacao()" );

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAndamento = dados->idAndamento;

    EXEC SQL END DECLARE SECTION;


    ULOG( "idAndamento [%ld]",idAndamento );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAndamentoObservacao(&sqlca);

    EXEC SQL 
        DELETE
            atendimento.AndamentoObservacao
        WHERE
            idAndamento = :idAndamento;

    ULOG_END( "bool proCExcluirWFAndamentoObservacao()" );

    return true;
}


bool proCObterComentarioHistorico(st_AndamentoObservacao* dados,st_vlAndamentoObservacao* status,XMLGen* saida)
{
    ULOG_START( "proCObterComentarioHistorico()" );

    struct sqlca sqlca;

    if ( -1 == status->idAndamento )
    {
        return false;
    }

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR dsAndamentoObservacao[1001];
        short i_dsAndamentoObservacao = -1;
        
	    long idAndamento = dados->idAndamento;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAndamentoObservacao(&sqlca);

    EXEC SQL 
    SELECT dsAndamentoObservacao
        INTO :dsAndamentoObservacao:i_dsAndamentoObservacao
    FROM 
        atendimento.AndamentoObservacao
    WHERE idAndamento = :idAndamento
    AND ROWNUM <=1;

    saida->createTag("StringComumVO");
    saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    
    if (i_dsAndamentoObservacao != -1)
    {
        CONVIND(dsAndamentoObservacao,i_dsAndamentoObservacao);
        saida->addItem("stringComum", (char*)dsAndamentoObservacao.arr);
    }
    else
        saida->addItem("stringComum", "");

    saida->closeTag();

    ULOG_END( "proCObterComentarioHistorico()" );

    return true;
}

bool proCConsultaWFAndamentoObservacao(st_AndamentoObservacao* dados, st_vlAndamentoObservacao* status, char* order, XMLGen* saida)
{

    ULOG_START( "proCConsultaWFAndamentoObservacao()" );

    struct sqlca sqlca;
    int linha=0;

    EXEC SQL BEGIN DECLARE SECTION;

        long idAndamento;
        VARCHAR dsAndamentoObservacao[1001];
        int idUsuarioAlteracao;
        VARCHAR dtUltimaAlteracao[256];

        short i_dsAndamentoObservacao;
        short i_idUsuarioAlteracao;
        short i_dtUltimaAlteracao;

        char query[800] = "SELECT idAndamento, dsAndamentoObservacao, idUsuarioAlteracao, TO_CHAR( dtUltimaAlteracao, 'DD/MM/YYYY' ) "
                            "FROM atendimento.AndamentoObservacao ";

    EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    bool separa = false;

    if (status->idAndamento != -1) 
        montaWhere("idAndamento", dados->idAndamento, TIPO_INT);

    if (status->dsAndamentoObservacao != -1) 
        montaWhere("dsAndamentoObservacao", dados->dsAndamentoObservacao, TIPO_CHAR);

    if (strlen(order) > 0) 
        sprintf( query, "%s ORDER BY %s ", query, order);

    ULOG( "QUERY = [%s]",query );

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAndamentoObservacao(&sqlca);

    EXEC SQL PREPARE consultaAndamentoObservacao FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaAndamentoObservacao;

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO 
                                    :idAndamento, 
                                    :dsAndamentoObservacao:i_dsAndamentoObservacao,
                                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                                    :dtUltimaAlteracao:i_dtUltimaAlteracao;

        CONVIND(dsAndamentoObservacao,i_dsAndamentoObservacao);
        CONVIND(dtUltimaAlteracao,i_dtUltimaAlteracao)

        saida->createTag("WFAndamentoObservacaoVO");
        saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
            saida->addItem("idAndamento", idAndamento);
            saida->addItem("dsAndamentoObservacao", (char*)dsAndamentoObservacao.arr);
            saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
            saida->addItem("dtUltimaAlteracao", (char*)dtUltimaAlteracao.arr);
        saida->closeTag();

        ULOG( "linha %d:idAndamento=%u,"
              "dsAndamentoObservacao=%s,idUsuarioAlteracao=%d,dtUltimaAlteracao=%s"
                                ,++linha
                                ,idAndamento
                                ,(char*)dsAndamentoObservacao.arr
                                ,idUsuarioAlteracao
                                ,(char*)dtUltimaAlteracao.arr 
            );
    }

    EXEC SQL CLOSE consulta;

    ULOG_END( "proCConsultaWFAndamentoObservacao()" );

    return true;

}

void sql_error_WFAndamentoObservacao(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}

//===
// remove espaços em branco do final de uma string C -- Cassio --
void rtrim(char *pStr)
{
    if ( pStr )
    {
        int tam = strlen(pStr)-1;

        if ( tam>=0 && *(pStr+tam) == ' ' )
        {
            *(pStr+tam) = 0;
            rtrim(pStr);
        }
    }
}
