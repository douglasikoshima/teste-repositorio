#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>
#include <tuxfw.h>

int ConsultaTpUfOperadora( const char *idContatoParam , const char *idRetorno, XMLGen *Saida )
{
   ULOG_START("ConsultaTpUfOperadora()");  
   
	struct sqlca sqlca;
    sqlca.sqlcode=0 ;

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR ORA_dsRegional[ 256 ];
        unsigned long ORA_idUfOperadora;
        unsigned long ORA_idContato = atol( idContatoParam );
        unsigned long ORA_idRetorno = atol( idRetorno );

        short   i_nmRegional;

    EXEC SQL END DECLARE SECTION;


    EXEC SQL DECLARE ReadUfOperadora CURSOR FOR 
        SELECT   
            IDUFOPERADORA, 
            DSREGIONAL
        FROM (
                SELECT UFOPERADORA.IDUFOPERADORA,
                       (UF.SGUF || ' - ' || PESSOA.NMPESSOA) AS DSREGIONAL
                  FROM 
                        CUSTOMER.UFOPERADORA UFOPERADORA,
                        CUSTOMER.OPERADORA OPERADORA,
                        CUSTOMER.PESSOADEPARA PESSOADEPARA,
                        CUSTOMER.PESSOA PESSOA,
                        APOIO.UF UF
                  WHERE UFOPERADORA.IDUF = UF.IDUF
                    AND UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
                    AND OPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
                    AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
                    AND UFOPERADORA.IDUFOPERADORA NOT IN 
                                        (
                                        SELECT 
                                                IDUFOPERADORA 
                                        FROM
                                                CONTATOADM.TIPORETORNOUFOPERADORA  TIPORETORNOUFOPERADORA,
                                                ContatoAdm.ContatoTipoRetorno  ContatoTipoRetorno
                                        WHERE ContatoTipoRetorno.IDCONTATOTIPORETORNO = TIPORETORNOUFOPERADORA.IDCONTATOTIPORETORNO  
                                        AND ContatoTipoRetorno.IDCONTATO = :ORA_idContato
                                        AND ContatoTipoRetorno.IDTIPORETORNOCONTATO = :ORA_idRetorno
                                        )  
        )  
        ORDER BY UPPER (DSREGIONAL);
    
    EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL OPEN ReadUfOperadora;
   
    for( ;; )
    {
        EXEC SQL 
            FETCH 
                ReadUfOperadora 
            INTO :ORA_idUfOperadora , 
                 :ORA_dsRegional:i_nmRegional;

        if ( i_nmRegional == -1 )
            ORA_dsRegional.arr[0] = 0x0;
        else
            ORA_dsRegional.arr[ ORA_dsRegional.len ] = 0x0;

        Saida->createTag( "AdmTipoUfOperadoraVO" );
            Saida->addItem( "idUfOperadora",ORA_idUfOperadora );
            Saida->addItem( "dsRegional",(char*)ORA_dsRegional.arr );
        Saida->closeTag();

        memset( (char *)ORA_dsRegional.arr , 0x0 , sizeof(ORA_dsRegional.arr) );
    }

    EXEC SQL CLOSE ReadUfOperadora;
    
    ULOG_END("ConsultaTpUfOperadora()");  
   
	return 1;

UndefinedError:
        throw new TuxBasicOraException( sqlca.sqlcode,
                                        sqlca.sqlerrm.sqlerrmc,
                                        sqlca.sqlerrm.sqlerrml );

}

