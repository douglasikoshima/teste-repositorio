#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <sqlda.h>
#include <tuxfw.h>

int ConsultaGrupoSel( const char *idContatoParam , const char *idRetorno, XMLGen *Saida )
{   
    ULOG_START("ConsultaGrupoSel()");  
    struct sqlca sqlca;
    sqlca.sqlcode=0 ;

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR nmGrupo[256];
        unsigned long idGrupo;

        unsigned long idContato = atol( idContatoParam );
        unsigned long ORA_idRetorno = atol( idRetorno );

        short   i_nmGrupo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE ReadSelGrupo CURSOR FOR 
        SELECT 
            d.idSequencia, 
			b.nmGrupo
        FROM 
            ContatoAdm.TipoRetornoSequencia  a ,
            Acesso.Grupo                     b ,
            ContatoAdm.ContatoTipoRetorno    c ,
            ContatoAdm.Sequencia             d ,
            ContatoAdm.ContatoGrupo          e
        WHERE
            d.idSequencia > 0
        AND 
            a.idContatoTipoRetorno = c.idContatoTipoRetorno
        AND
            d.idSequencia = a.idSequencia
        AND
            d.idContatoGrupo = e.idContatoGrupo
        AND
            e.idGrupo = b.idGrupo
        AND
            c.idContato = :idContato
        AND 
            c.idTipoRetornoContato = :ORA_idRetorno
        ORDER BY b.nmGrupo;


    EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL OPEN ReadSelGrupo;

    for( ;; )
    {
        EXEC SQL FETCH ReadSelGrupo INTO :idGrupo, 
                                         :nmGrupo:i_nmGrupo;
        
        if ( i_nmGrupo == -1 )
            nmGrupo.arr[0] = 0x0;
        else
            nmGrupo.arr[ nmGrupo.len ] = 0x0;

        Saida->createTag( "AdmGrupoVO" );
            Saida->addItem( "idGrupo",idGrupo );
            Saida->addItem( "nmGrupo",(char*)nmGrupo.arr );
        Saida->closeTag();

        memset( (char *)nmGrupo.arr , 0x0 , sizeof(nmGrupo.arr) );
    }
    
    EXEC SQL CLOSE ReadSelGrupo;
    ULOG_END("ConsultaGrupoSel()");  
    return 1;

UndefinedError:
        throw new TuxBasicOraException( sqlca.sqlcode,
                                        sqlca.sqlerrm.sqlerrmc,
                                        sqlca.sqlerrm.sqlerrml );

}

