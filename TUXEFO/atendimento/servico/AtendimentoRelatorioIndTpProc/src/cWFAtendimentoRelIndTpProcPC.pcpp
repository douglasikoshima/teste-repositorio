/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:33 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRelIndTpProc.h"

bool proCBuscarParamMediaPorcent( char *_mediaPorcentagem, size_t sizeofMediaPorcentagem )
{
    struct sqlca sqlca;

    if ( !_mediaPorcentagem )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( 0 > sizeofMediaPorcentagem )
    {
        ULOGE("%s",bufferDestInsuficiente());
        throw new TuxBasicSvcException("04E9999",bufferDestInsuficiente());
    }

    EXEC SQL BEGIN DECLARE SECTION;
        char mediaPorcentagem[256];
    EXEC SQL END DECLARE SECTION;

    mediaPorcentagem[0] = 0;

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL SELECT DSVALORPARAMETRO INTO :mediaPorcentagem FROM APOIO.PARAMETRO WHERE CDPARAMETRO = 'mediaPorcentagem';

    sprintf(_mediaPorcentagem,"%.*s",sizeofMediaPorcentagem,rtrim(mediaPorcentagem));

    if ( mediaPorcentagem[0] )
    {
        ULOG( "mediaPorcentagem='%s'",mediaPorcentagem);

        return true;
    }

    ULOG( "Parametro 'mediaPorcentagem' nao cadastrado em APOIO.PARAMETRO.");

    return false;
}

bool proCExecutarRelatorioITP( st_AtendimentoRel *dados
                             , st_vlAtendimentoRel *status
                             , XMLGen *saida
                             , DOMNode *dnode )
{
    char valor[32];
    struct sqlca sqlca;
    string idColunas;
    string where;
    char ordemStr[32];
    string compGrpTratamento;
    string savedRegional = "";
    string savedGrpTrat = "";
    bool tagDetRegON = false;
    bool tagIndcON = false;
    int ordem = 0;
    int linha=0;
    float qtdeGrupo = 0;
    float qtdeGrupoAnterior = 0;
    float percentTotGrupo = 0;
    int divisor = 0;

    if ( !dados )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if( -1 == status->mediaPorcentagem )
    {
        ULOGE("%s",mensagemSimples("Parametro 'mediaPorcentagem' nao informado"));
        throw new TuxBasicSvcException("04E9999",mensagemSimples("Parametro 'mediaPorcentagem' nao informado"));
    }

    // Gera os filtros
    if( -1 != status->idGrupo )
    {
        sprintf(valor,"%d",dados->idGrupo);
        if (where.size()) where += (string)" AND";
        where += " idGrupo=" + (string)valor;
    }
    else
    {
	sprintf(valor,"%d",dados->idPessoaUsuario);
        where += "idGrupo IN (SELECT idGrupo "
                               "FROM acesso.usuarioGrupo "
                              "WHERE idPessoaUsuario = "
                       + (string)valor + (string)")";
    }	

    if( -1 != status->idRegional )
    {
        sprintf(valor,"%d",dados->idRegional);
        if (where.size()) where += (string)" AND";
        where += " idRegional=" + (string)valor;
    }

    idColunas ="SELECT regional,idRegional,idGrupo,grupoTratamento,tipoProcesso"
                      ",percentual,totAbertosHorAntHoje,totAbertosHorAntSemAnt "
                  "FROM atendimento.AtendimentoIndicadorTpProcV01 ";

    if ( where.size() )
    {
        idColunas += " WHERE " + where;
    }

    idColunas += " ORDER BY regional,grupoTratamento,tipoProcesso";

    EXEC SQL BEGIN DECLARE SECTION;
        char *query;

        VARCHAR regional[256];
        VARCHAR grupoTratamento[256];
        VARCHAR tipoProcesso[256];

        VARCHAR idRegional[32];
        VARCHAR idGrupo[32];
        VARCHAR percentual[32];
        VARCHAR totAbertosHorAntHoje[32];
        VARCHAR totAbertosHorAntSemAnt[32];

        short i_regional;
        short i_grupoTratamento;
        short i_tipoProcesso;

        short i_idRegional;
        short i_idGrupo;
        short i_percentual;
        short i_totAbertosHorAntHoje;
        short i_totAbertosHorAntSemAnt;

    EXEC SQL END DECLARE SECTION;

    query = (char*)idColunas.c_str();

    ULOG( "WFATDRELINDTPR=%s",query);

    saida->createTag("WFIndicadoresVO");
    saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");
    saida->addItem("dsTituloIndicadores","Avaliação por Tipo de Processo");
    saida->addItem("dsTipoIndicadores","Tipo de Processo");

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR recebeQuery;

    EXEC SQL OPEN consulta;

    while (true)
    {
        EXEC SQL FETCH consulta INTO :regional:i_regional,
                                     :idRegional:i_idRegional,
                                     :idGrupo:i_idGrupo,
                                     :grupoTratamento:i_grupoTratamento,
                                     :tipoProcesso:i_tipoProcesso,
                                     :percentual:i_percentual,
                                     :totAbertosHorAntHoje:i_totAbertosHorAntHoje,
                                     :totAbertosHorAntSemAnt:i_totAbertosHorAntSemAnt;

        CONVIND (regional,i_regional);
        CONVIND (grupoTratamento,i_grupoTratamento);
        CONVIND (tipoProcesso,i_tipoProcesso);
        CONVIND (idRegional,i_idRegional);
        CONVIND (idGrupo,i_idGrupo);
        CONVIND (percentual,i_percentual);
        CONVIND (totAbertosHorAntHoje,i_totAbertosHorAntHoje);
        CONVIND (totAbertosHorAntSemAnt,i_totAbertosHorAntSemAnt);

        compGrpTratamento = (string)((char*)grupoTratamento.arr);

        if ( tagDetRegON 
           && (savedRegional != (string)((char*)regional.arr)
              || savedGrpTrat != compGrpTratamento) )
        {
            
	    if (qtdeGrupoAnterior == 0)
		divisor = 1;
	    else
		divisor = qtdeGrupoAnterior;
	    percentTotGrupo = ((qtdeGrupo - qtdeGrupoAnterior)/divisor) * 100;

    ULOG( "Total Grupo Hoje=%d",qtdeGrupo);
    ULOG( "Total Grupo Anterior=%d",qtdeGrupoAnterior);
    ULOG( "Total Grupo=%d",percentTotGrupo);

	    saida->createTag("detalheGrupo");
            saida->addItem("descricao","Total");
            saida->addItem("quantidade",qtdeGrupo);
            saida->addItem("porcentagem",percentTotGrupo);
            saida->closeTag(); // detalheGrupo
            saida->closeTag(); // detalheRegional

	    qtdeGrupo = 0;
	    qtdeGrupoAnterior = 0;

	    tagDetRegON = false;
        }

        if ( savedRegional != (string)((char*)regional.arr) )
        {
            savedRegional = (string)((char*)regional.arr);
            savedGrpTrat = "";

            ordem = ordem + 1;

            sprintf(ordemStr,"%d",ordem);

            if ( tagIndcON )
            {
                saida->closeTag(); // Indicadores
            }

            tagIndcON = true;

            saida->createTag("Indicadores");
            saida->addItem("ordem",ordemStr);
            saida->addItem("dsRegional",(char*)savedRegional.c_str());
        }

        if ( savedGrpTrat != compGrpTratamento )
        {
            savedGrpTrat = (string)((char*)grupoTratamento.arr);

            saida->createTag("detalheRegional");
            saida->addItem("dsGrupo",(char*)grupoTratamento.arr);

            tagDetRegON = true;
        }

        saida->createTag("detalheGrupo");
        saida->addItem("descricao",(char*)tipoProcesso.arr);
        saida->addItem("quantidade",(char*)totAbertosHorAntHoje.arr);
        saida->addItem("porcentagem",(char*)percentual.arr);
        saida->closeTag();

        qtdeGrupo += atof((char*)totAbertosHorAntHoje.arr);
        qtdeGrupoAnterior += atof((char*)totAbertosHorAntSemAnt.arr);
        
    } // while (true)

    if ( tagDetRegON )
    {
	    if (qtdeGrupoAnterior == 0)
		divisor = 1;
	    else
		divisor = qtdeGrupoAnterior;
	    percentTotGrupo = ((qtdeGrupo - qtdeGrupoAnterior)/divisor) * 100;

    ULOG( "Total Grupo=%d",percentTotGrupo);

	saida->createTag("detalheGrupo");
        saida->addItem("descricao","Total");
        saida->addItem("quantidade",qtdeGrupo);
        saida->addItem("porcentagem",percentTotGrupo);
        saida->closeTag();

        qtdeGrupo = 0;
        percentTotGrupo = 0;
    }

    if ( tagIndcON )
    {
        saida->closeTag(); // Indicadores
    }

    saida->addItem("mediaPorcentagem",dados->mediaPorcentagem);

    saida->closeTag(); // WFIndicadoresVO

    EXEC SQL CLOSE consulta;

    return true;
}
