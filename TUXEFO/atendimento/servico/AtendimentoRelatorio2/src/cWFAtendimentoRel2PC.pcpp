/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @remark  Relatório TOTAL POR REPRESENTANTE BKO
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.114.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:36:43 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRel2.h"

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#define MAXCOLUNAS  10 // 18
#define COL_FIXAS   3
EXEC SQL END DECLARE SECTION;

#define IND_NMGRUPO             0
#define IND_NMLOGINUSUARIOATUAL 1
#define IND_DSFASE              4
#define IND_DSTIPOCARTEIRA      5
#define IND_DSSEGMENTACAO       6
#define IND_MENOR_DATA          7
#define IND_IDGRUPO            10

#define TIPOPRAZO ('V' == toupper(dados->prazo[0]) ? (string)"INTERNO" : (string)"ANATEL")

void WFAtdRelCompletarWhereRel2(string &where,DOMNode *entrada,char *dnode);

TuxHelper tx;

// Vetor contendo valores lógicos onde cada item representa uma coluna da clausula select
// sendo executada; Se o valor do vetor respectivo a coluna = true; é gerada uma tag no
// xml de saida respectiva ao dado da coluna, mesmo que o valor do dado seja = NULL.
// Caso contrário se o valor do vetor for diferente de true, a coluna não foi solicitada
// na clausula select e não é gerada uma saida xml para a coluna.
bool bColunas[MAXCOLUNAS];
bool bColunasWhereDetalhe[MAXCOLUNAS];

void MontarNomesColunas(string &idColunas,DOMNode *entrada,char *dnode,string alias);

void MontarNomesColunasMenorData(string &minDatacolNivel2,string &minDatacolNivel1,string &groupBY
                                ,DOMNode *entrada,char *dnode);

void MontarQuebra(string &group,string &order,string &nmColuna,DOMNode *entrada,char *dnode);


bool proCExecutarRelatorio2( st_AtendimentoRel *dados
                           , st_vlAtendimentoRel *status
                           , XMLGen *saida
                           , DOMNode *dnode )
{
    char valor[32];
    struct sqlca sqlca;
    string idColunas;
    string idColunasTmpNivel1;
    string idColunasTmpNivel2;
    string idColunasTmpNivel3;
    string minDatacolNivel2;
    string minDatacolNivel1;
    string minDataGroupBY;
    string minDataWhere;
    string where;
    string group;
    string order;
    string nmColuna;
    string queryDin;
    int linha=0;
    int i;

    if ( !dados )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    WFAtdRelCompletarWhereRel2(where,dnode,"WFFaseVO");
    WFAtdRelCompletarWhereRel2(where,dnode,"WFEstadoVO");
    //WFAtdRelCompletarWhereRel2(where,dnode,"FiltroDetalhe");

    MontarNomesColunas(idColunasTmpNivel1,dnode,"WFRelatoriosQuebraVO","NIVEL1.");
    MontarNomesColunas(idColunasTmpNivel2,dnode,"WFRelatoriosQuebraVO","NIVEL2.");
    MontarNomesColunas(idColunasTmpNivel3,dnode,"WFRelatoriosQuebraVO","NIVEL3.");

    MontarNomesColunasMenorData(minDatacolNivel2,minDatacolNivel1,minDataGroupBY
                               ,dnode,"WFRelatoriosQuebraVO");

    MontarQuebra(group,order,nmColuna,dnode,"WFRelatoriosQuebraVO");

    EXEC SQL BEGIN DECLARE SECTION;
        char *query;
        short i_colunas[MAXCOLUNAS+1];
        VARCHAR colunas[MAXCOLUNAS+1][256];

        VARCHAR colunasMenorData[256];
        short i_colunasMenorData;

    EXEC SQL END DECLARE SECTION;

    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    queryDin +=  
           "SELECT ";
    queryDin +=  idColunasTmpNivel1;
    queryDin +=  
                 "NULL AS MINDATAPRAZO"
                 ",NIVEL1.NOPRAZO "
                 ",NIVEL1.FORAPRAZO "
                 ",NIVEL1.IDGRUPO "
           "FROM "
           "( "
               "SELECT ROWNUM AS NLIN,";

    queryDin +=  idColunasTmpNivel2;
    queryDin +=  
                     " NIVEL2.NOPRAZO "
                     ",NIVEL2.FORAPRAZO "
                     ",NIVEL2.IDGRUPO "
               "FROM "
               "( "
                   "SELECT ";

    queryDin +=  idColunasTmpNivel3;
    queryDin +=  
                          "NIVEL3.IDGRUPO"
                         ",SUM(NIVEL3.NOPRAZO) AS NOPRAZO "
                         ",SUM(NIVEL3.FORAPRAZO) AS FORAPRAZO "
                   "FROM "
                   "( "
                       "SELECT NMLOGINUSUARIOATUAL "
                             ",NMGRUPOOPERADORA "
                             ",NMGRUPO "
                             ",DSTIPOCARTEIRA "
                             ",DSSEGMENTACAO "
                             ",DSFASE "
                             ",UF "
                             ",IDPESSOAUSUARIO "
                             ",IDGRUPOOPERADORA "
                             ",IDUFOPERADORA "
                             ",IDGRUPO "
                             ",IDTIPOCARTEIRA "
                             ",IDSEGMENTACAO "
                             ",IDFASE "
                             ",NOPRAZO"
                             ",FORAPRAZO"
                       " FROM ( "
                           "SELECT"
                                 " (SELECT USUARIO.NMLOGINUSUARIO FROM ACESSO.USUARIO USUARIO WHERE TEMP2.IDPESSOAUSUARIO=USUARIO.IDPESSOAUSUARIO) AS NMLOGINUSUARIOATUAL "
                                 ",GRUPOOPERADORA.NMGRUPOOPERADORA "
                                 ",(SELECT GRUPO.NMGRUPO FROM ACESSO.GRUPO WHERE GRUPO.IDGRUPO = TEMP2.IDGRUPO) AS NMGRUPO "
                                 ",(SELECT TIPOCARTEIRA.DSTIPOCARTEIRA FROM APOIO.TIPOCARTEIRA TIPOCARTEIRA WHERE TEMP2.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA) AS DSTIPOCARTEIRA "
                                 ",(SELECT SEGMENTACAO.DSSEGMENTACAO FROM APOIO.SEGMENTACAO SEGMENTACAO WHERE TEMP2.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO ) AS DSSEGMENTACAO "
                                 ",(SELECT FASE.DSFASE FROM WORKFLOW.FASE WHERE TEMP2.IDFASE = FASE.IDFASE) AS DSFASE "
                                 ",(SELECT UF.NMUF FROM APOIO.UF WHERE UFOPERADORA.IDUF = UF.IDUF) AS UF "
                                 ",TEMP2.IDPESSOAUSUARIO "
                                 ",GRUPOOPERADORA.IDGRUPOOPERADORA "
                                 ",TEMP2.IDUFOPERADORA "
                                 ",TEMP2.IDGRUPO "
                                 ",TEMP2.IDTIPOCARTEIRA "
                                 ",TEMP2.IDSEGMENTACAO "
                                 ",TEMP2.IDFASE "
                                 ",TEMP2.NOPRAZO"
                                 ",TEMP2.FORAPRAZO "
                           "FROM "
                               "( "
                                   "SELECT TEMP1.IDPESSOAUSUARIO "
                                         ",TEMP1.IDUFOPERADORA "
                                         ",TEMP1.IDGRUPO,TEMP1.IDTIPOCARTEIRA "
                                         ",TEMP1.IDSEGMENTACAO "
                                         ",TEMP1.IDFASE "
                                         ",SUM(TEMP1.NOPRAZO) AS NOPRAZO "
                                         ",SUM(TEMP1.FORAPRAZO) AS FORAPRAZO "
                                   "FROM "
                                   "( "
                                       "SELECT "
                                              // "(SELECT IDPESSOAUSUARIO "
                                              //    "FROM ATENDIMENTO.ATENDIMENTOUSUARIOATUAL "
                                              //   "WHERE ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOUSUARIOATUAL.IDATENDIMENTO) "
                                              //                                                                                  "AS IDPESSOAUSUARIO "
                                               "ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL AS IDPESSOAUSUARIO "
                                              ",ATENDIMENTOPRIORIZACAO.IDUFOPERADORA "
                                              ",ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA "
                                              ",ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO "
                                              ",ATENDIMENTOPRIORIZACAO.IDFASE "
                                              ",ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL AS IDGRUPO "
                                              ",(CASE WHEN SYSDATE > ATENDIMENTOPRIORIZACAO.DTPRAZOFINAL"+TIPOPRAZO+" THEN 0 ELSE 1 END) AS NOPRAZO "
                                              ",(CASE WHEN SYSDATE <= ATENDIMENTOPRIORIZACAO.DTPRAZOFINAL"+TIPOPRAZO+" THEN 0 ELSE 1 END) AS FORAPRAZO "
                                           "FROM ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO "
                                               //",ATENDIMENTO.ATENDIMENTOGRUPOATUAL ATENDIMENTOGRUPOATUAL "
                                          //"WHERE ATENDIMENTOPRIORIZACAO.IDATENDIMENTO = ATENDIMENTOGRUPOATUAL.IDATENDIMENTO ";
                                          "WHERE ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL IS NOT NULL "
                                          "AND ATENDIMENTOPRIORIZACAO.IDANDAMENTOATUAL IS NOT NULL ";
    if( -1 != status->idRegional )
    {
        sprintf(valor,"%d",dados->idRegional);
        queryDin += " AND ATENDIMENTOPRIORIZACAO.IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->idCarteira)
    {
        sprintf(valor,"%d",dados->idCarteira);
        queryDin += " AND ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA=" + (string)valor;
    }

    if( -1 != status->idSegmentacao )
    {
        sprintf(valor,"%d",dados->idSegmentacao);
        queryDin += " AND ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO=" + (string)valor;
    }

    if( -1 != status->idGrupo )
    {
        sprintf(valor,"%d",dados->idGrupo);
        queryDin += " AND ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL=" + (string)valor;
    }

    if ( where.size() )
    {
        queryDin +=  " AND " + where;
    }

    queryDin +=  
                                   ") TEMP1 "
                                   "GROUP BY TEMP1.IDPESSOAUSUARIO,TEMP1.IDUFOPERADORA,TEMP1.IDGRUPO,TEMP1.IDTIPOCARTEIRA,TEMP1.IDSEGMENTACAO "
                                           ",TEMP1.IDFASE "
                               ") TEMP2 "
                               ",CUSTOMER.GRUPOOPERADORA GRUPOOPERADORA "
                               ",CUSTOMER.UFOPERADORA UFOPERADORA "
                               ",CUSTOMER.OPERADORA OPE "
                               ",CUSTOMER.UFOPERADORA UFO "
                           "WHERE "
                                 "TEMP2.IDUFOPERADORA = UFO.IDUFOPERADORA "
                             "AND UFO.IDPESSOADEPARAOPERADORA = OPE.IDPESSOADEPARAOPERADORA "
                             "AND OPE.IDGRUPOOPERADORA = GRUPOOPERADORA.IDGRUPOOPERADORA "
                             "AND TEMP2.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
                       ") "
                       "WHERE 1=1 ";

    if( -1 != status->idRegional )
    {
        sprintf(valor,"%d",dados->idRegional);
        queryDin += " AND IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->idCarteira)
    {
        sprintf(valor,"%d",dados->idCarteira);
        queryDin += " AND IDTIPOCARTEIRA=" + (string)valor;
    }

    if( -1 != status->idSegmentacao )
    {
        sprintf(valor,"%d",dados->idSegmentacao);
        queryDin += " AND IDSEGMENTACAO=" + (string)valor;
    }

    if( -1 != status->idRepresentante )
    {
        sprintf(valor,"%d",dados->idRepresentante);
        queryDin += " AND IDPESSOAUSUARIO=" + (string)valor;
    }

    if( -1 != status->idGrupo )
    {
        sprintf(valor,"%d",dados->idGrupo);
        queryDin += " AND IDGRUPO=" + (string)valor;
    }

    if ( where.size() )
    {
        queryDin +=  " AND " + where;
    }

    queryDin +=  
                    ") NIVEL3 ";

    if ( group.size() )
    {
        queryDin += " GROUP BY " + group + ",NIVEL3.IDGRUPO";
        queryDin += " ORDER BY " + order;
    }

    queryDin +=  
               ") NIVEL2 "
           ") NIVEL1 ";

    queryDin += "WHERE NLIN >= " + (string)linIni + " AND NLIN <= " + (string)linFin;

    query = (char*)queryDin.c_str();

    ULOG("QUERY=%s",query);

    saida->createTag("WFRelatorioDinamicoVO");
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");

    WFAtdRelGerarHeaderSaidaXML(nmColuna,saida,dnode);

    for ( i=0; i<MAXCOLUNAS+1;i++ )
    {
        colunas[i].arr[0] = 0;
        colunas[i].len = 0;
    }

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR recebeQuery;

    EXEC SQL OPEN consulta;

    int nRegs = 0;

    while ( true || ++nRegs > dados->qtdLinhasBloco )
    {
        nRegs++;

        // minDataWhere = "";
        minDataWhere.erase();

        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

        EXEC SQL FETCH consulta INTO :colunas[ 0]:i_colunas[ 0], // nmgrupo
                                     :colunas[ 1]:i_colunas[ 1], // nmloginusuarioatual
                                     :colunas[ 2]:i_colunas[ 2], // ..
                                     :colunas[ 3]:i_colunas[ 3], // ..
                                     :colunas[ 4]:i_colunas[ 4], // ..
                                     :colunas[ 5]:i_colunas[ 5], // ..
                                     :colunas[ 6]:i_colunas[ 6], // ..
                                     :colunas[ 7]:i_colunas[ 7], // menor data
                                     :colunas[ 8]:i_colunas[ 8], // no prazo
                                     :colunas[ 9]:i_colunas[ 9], // fora prazo
                                     :colunas[10]:i_colunas[10]; // idgrupo

        for ( i=0;i<MAXCOLUNAS+1;i++ )
        {
            CONVIND(colunas[i],i_colunas[i]);
        }

        if ( bColunasWhereDetalhe[IND_NMGRUPO] )
        {
            if ( minDataWhere.size() ) minDataWhere += " AND ";
            minDataWhere += "NMGRUPO = '" + (string)((char*)colunas[IND_NMGRUPO].arr) + "'";
        }

        if ( bColunasWhereDetalhe[IND_NMLOGINUSUARIOATUAL] )
        {
            if ( minDataWhere.size() ) minDataWhere += " AND ";

            if ( colunas[IND_NMLOGINUSUARIOATUAL].arr[0] )
            {
                minDataWhere += "NMLOGINUSUARIOATUAL = '" + (string)((char*)colunas[IND_NMLOGINUSUARIOATUAL].arr) + "'";
            }
            else
            {
                minDataWhere += "NMLOGINUSUARIOATUAL IS NULL";
            }
        }

        if ( bColunasWhereDetalhe[IND_DSTIPOCARTEIRA] )
        {
            if ( minDataWhere.size() ) minDataWhere += " AND ";
            minDataWhere += "DSTIPOCARTEIRA = '" + (string)((char*)colunas[IND_DSTIPOCARTEIRA].arr) + "'";
        }

        if ( bColunasWhereDetalhe[IND_DSSEGMENTACAO] )
        {
            if ( minDataWhere.size() ) minDataWhere += " AND ";
            minDataWhere += "DSSEGMENTACAO = '" + (string)((char*)colunas[IND_DSSEGMENTACAO].arr) + "'";
        }

        if ( bColunasWhereDetalhe[IND_DSFASE] )
        {
            if ( minDataWhere.size() ) minDataWhere += " AND ";
            minDataWhere += "DSFASE = '" + (string)((char*)colunas[IND_DSFASE].arr) + "'";
        }

        // -------------------------------------------------------------
        // Busca a data mais atrazada para o registro encontrado
        queryDin = 
      "SELECT TO_CHAR(DTABERTURA,'DD/MM/YYYY') FROM ("
           "SELECT " + minDatacolNivel2 +
                 ",MIN(DTABERTURA) AS DTABERTURA "
           "FROM "
           "( "
               "SELECT ";

        queryDin += minDatacolNivel2;

        queryDin += 
                     ",DTABERTURA "
               "FROM "
               "( "
                   "SELECT /*+ NO_CPU_COSTING */ ";

        queryDin += minDatacolNivel1 +
                        ",AP.DTABERTURA "
                   "FROM ATENDIMENTO.ATENDIMENTOPRIORIZACAO AP ";
                       //",ATENDIMENTO.ATENDIMENTOGRUPOATUAL AGA ";

        //if( -1 != status->idRepresentante )
        //{
        //    queryDin += ",ATENDIMENTO.ATENDIMENTOUSUARIOATUAL AUA ";
        //}

        queryDin += 
                     "WHERE AP.IDANDAMENTOATUAL IS NOT NULL ";

        if ( colunas[IND_IDGRUPO].arr[0] )
        {
            queryDin += 
                         "AND AP.IDGRUPOATUAL = " + (string)((char*)colunas[IND_IDGRUPO].arr);

                         //"WHERE AP.IDATENDIMENTO = AGA.IDATENDIMENTO ";
            //queryDin +=    "AND AP.IDGRUPO = " + (string)((char*)colunas[IND_IDGRUPO].arr);
        }
        else
        {
            queryDin += 
                         "AND AP.IDGRUPOATUAL IS NULL ";
        }

        if( -1 != status->idRepresentante )
        {
            sprintf(valor,"%d",dados->idRepresentante);
            //queryDin += "AND AP.IDATENDIMENTO = AUA.IDATENDIMENTO "
            //            "AND AUA.IDPESSOAUSUARIO=" + (string)valor;
            queryDin += "AND AP.IDPESSOAUSUARIOATUAL = " + (string)valor;
        }

        if( -1 != status->idRegional )
        {
            sprintf(valor,"%d",dados->idRegional);
            queryDin += " AND AP.IDUFOPERADORA=" + (string)valor;
        }

        if( -1 != status->idCarteira)
        {
            sprintf(valor,"%d",dados->idCarteira);
            queryDin += " AND AP.IDTIPOCARTEIRA=" + (string)valor;
        }

        if( -1 != status->idSegmentacao )
        {
            sprintf(valor,"%d",dados->idSegmentacao);
            queryDin += " AND AP.IDSEGMENTACAO=" + (string)valor;
        }

        if( -1 != status->idGrupo )
        {
            sprintf(valor,"%d",dados->idGrupo);
            //queryDin += " AND AGA.IDGRUPO=" + (string)valor;
            queryDin += " AND AP.IDGRUPOATUAL=" + (string)valor;
        }

        queryDin += 
               ") GDTA ";

        if ( minDataWhere.size() )
        {
            queryDin += (string)" WHERE " + minDataWhere;
        }

        queryDin += 
           ") DMA ";

        queryDin += " GROUP BY " + minDataGroupBY + ")";

        query = (char*)queryDin.c_str();

        ULOG("QUERY DATA MINIMA=%s",query);

        EXEC SQL PREPARE executarQuery FROM :query;
        EXEC SQL DECLARE cursorObtMenorData CURSOR FOR executarQuery;

        EXEC SQL OPEN cursorObtMenorData;

        i_colunasMenorData = -1;

        EXEC SQL FETCH cursorObtMenorData INTO :colunasMenorData:i_colunasMenorData;

        EXEC SQL CLOSE cursorObtMenorData;

        // -------------------------------------------------------------
        // Gera o XML de saída
        saida->createTag("ValoresRelatorio");

        for ( i=0;i<MAXCOLUNAS;i++ )
        {
            if ( bColunas[i] ) 
            {
                if ( i == IND_MENOR_DATA )
                {
                    CONVIND(colunasMenorData,i_colunasMenorData);

                    WFAtdRelGerarDadosSaidaXML((VARCHAR*)&colunasMenorData,saida);
                }
                else
            {
                WFAtdRelGerarDadosSaidaXML((VARCHAR*)&colunas[i],saida);
            }
        }
        }

        saida->closeTag();
    }

    saida->addItem("inFin", sqlca.sqlcode == 1403 ? true:false);

    saida->closeTag();

    EXEC SQL CLOSE consulta;

    return true;
}

void MontarQuebra(string &group,string &order,string &nmColuna,DOMNode *entrada,char *dnode)
{
    char *p0;
    DOMNode *dn;
    int index = 0;
    int i;

    if ( !entrada )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index ) )
    {
        if ( p0 = tx.walkTree(dn,"idCampo",0),p0 )
        {
            if ( group.size() )
            {
                group += ",";
                order += ",";
                nmColuna += ",";
            }

            group += "NIVEL3."+(string)p0;
            
            if ( isCampoAlfanumerico(p0) )
            {
                order += "UPPER(NIVEL3." + (string)p0 + ")";
            }
            else
            {
                order += "NIVEL3."+(string)p0;
            }

            nmColuna += (string)p0 + ",";
            XMLString::release(&p0);
        }

        bColunas[index] = true;

        index++;
    }

    for ( i=index; i<MAXCOLUNAS-COL_FIXAS; i++ )
    {
        bColunas[i] = false;
    }

    for ( i=MAXCOLUNAS-COL_FIXAS; i<MAXCOLUNAS; i++ )
    {
        bColunas[i] = true;
    }

    nmColuna += obterNomeColunaFixa(ID_DATA_MAIS_ANTIGA);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_TOTAL_DENTRO_PRAZO);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_TOTAL_FORA_PRAZO);

    index += COL_FIXAS;

    ULOG( "group=%s",group.c_str() );
    ULOG( "Nomes de colunas=%s",nmColuna.c_str() );
}

void MontarNomesColunas(string &idColunas,DOMNode *entrada,char *dnode,string alias)
{
    char *p0;
    DOMNode *dn;
    int index = 0;
    int i;

    if ( !entrada )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index ) )
    {
        if ( p0 = tx.walkTree(dn,"idCampo",0),p0 )
        {
            idColunas += alias + (string)p0 + ",";
            XMLString::release(&p0);
        }

        bColunas[index] = true;

        index++;
    }

    for ( i=index; i<MAXCOLUNAS-COL_FIXAS; i++ )
    {
        bColunas[i] = false;
    }

    for ( i=MAXCOLUNAS-COL_FIXAS; i<MAXCOLUNAS; i++ )
    {
        bColunas[i] = true;
    }

    index += COL_FIXAS;

    for ( i=index; i<MAXCOLUNAS; i++ )
    {
        idColunas += "NULL,";
    }

    ULOG( "idColunas=%s",idColunas.c_str() );
}

void MontarNomesColunasMenorData(string &minDatacolNivel2,string &minDatacolNivel1,string &groupBY
                                ,DOMNode *entrada,char *dnode)
{
    char *p0;
    DOMNode *dn;
    int index = 0;

    if ( !entrada )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    bColunasWhereDetalhe[IND_NMGRUPO] = false;
    bColunasWhereDetalhe[IND_NMLOGINUSUARIOATUAL] = false;
    bColunasWhereDetalhe[IND_DSTIPOCARTEIRA] = false;
    bColunasWhereDetalhe[IND_DSSEGMENTACAO] = false;
    bColunasWhereDetalhe[IND_DSFASE] = false;

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( p0 = tx.walkTree(dn,"idCampo",0),p0 )
        {
            if ( stricmp(p0,"NMGRUPO") == 0 )
            {
                if ( minDatacolNivel2.size() ) minDatacolNivel2 += ",";
                minDatacolNivel2 += (string)p0;

                if ( groupBY.size() ) groupBY += ",";
                groupBY += (string)p0;

                if ( minDatacolNivel1.size() ) minDatacolNivel1 += ",";
                minDatacolNivel1 +=
                         "(SELECT GRP.NMGRUPO FROM ACESSO.GRUPO GRP WHERE AP.IDGRUPOATUAL = GRP.IDGRUPO) AS NMGRUPO ";
                         //"(SELECT GRP.NMGRUPO FROM ACESSO.GRUPO GRP WHERE AGA.IDGRUPO = GRP.IDGRUPO) AS NMGRUPO ";

                bColunasWhereDetalhe[IND_NMGRUPO] = true;
            }

            else if ( stricmp(p0,"NMLOGINUSUARIOATUAL") == 0 )
            {
                if ( minDatacolNivel2.size() ) minDatacolNivel2 += ",";
                minDatacolNivel2 += (string)p0;

                if ( groupBY.size() ) groupBY += ",";
                groupBY += (string)p0;

                if ( minDatacolNivel1.size() ) minDatacolNivel1 += ",";
                // minDatacolNivel1 +=
                //         "(SELECT USU.NMLOGINUSUARIO FROM ACESSO.USUARIO USU,ATENDIMENTO.ATENDIMENTOUSUARIOATUAL AUA WHERE AP.IDATENDIMENTO = AUA.IDATENDIMENTO(+) AND AUA.IDPESSOAUSUARIO = USU.IDPESSOAUSUARIO) AS NMLOGINUSUARIOATUAL ";
                minDatacolNivel1 +=
                        "(SELECT USU.NMLOGINUSUARIO FROM ACESSO.USUARIO USU WHERE AP.IDPESSOAUSUARIOATUAL = USU.IDPESSOAUSUARIO) AS NMLOGINUSUARIOATUAL ";

                bColunasWhereDetalhe[IND_NMLOGINUSUARIOATUAL] = true;
            }

            else if ( stricmp(p0,"DSTIPOCARTEIRA") == 0 )
            {
                if ( minDatacolNivel2.size() ) minDatacolNivel2 += ",";
                minDatacolNivel2 += (string)p0;

                if ( groupBY.size() ) groupBY += ",";
                groupBY += (string)p0;

                if ( minDatacolNivel1.size() ) minDatacolNivel1 += ",";
                minDatacolNivel1 +=
                        "(SELECT TPC.DSTIPOCARTEIRA FROM APOIO.TIPOCARTEIRA TPC WHERE AP.IDTIPOCARTEIRA = TPC.IDTIPOCARTEIRA) AS DSTIPOCARTEIRA ";

                bColunasWhereDetalhe[IND_DSTIPOCARTEIRA] = true;
            }

            else if ( stricmp(p0,"DSSEGMENTACAO") == 0 )
            {
                if ( minDatacolNivel2.size() ) minDatacolNivel2 += ",";
                minDatacolNivel2 += (string)p0;

                if ( groupBY.size() ) groupBY += ",";
                groupBY += (string)p0;

                if ( minDatacolNivel1.size() ) minDatacolNivel1 += ",";
                minDatacolNivel1 +=
                            "(SELECT SEG.DSSEGMENTACAO FROM APOIO.SEGMENTACAO SEG WHERE AP.IDSEGMENTACAO = SEG.IDSEGMENTACAO) AS DSSEGMENTACAO ";

                bColunasWhereDetalhe[IND_DSSEGMENTACAO] = true;
            }

            else if ( stricmp(p0,"DSFASE") == 0 )
            {
                if ( minDatacolNivel2.size() ) minDatacolNivel2 += ",";
                minDatacolNivel2 += (string)p0;

                if ( groupBY.size() ) groupBY += ",";
                groupBY += (string)p0;

                if ( minDatacolNivel1.size() ) minDatacolNivel1 += ",";
                minDatacolNivel1 +=
                            "(SELECT FASE.DSFASE FROM WORKFLOW.FASE FASE WHERE FASE.IDFASE = AP.IDFASE) AS DSFASE ";

                bColunasWhereDetalhe[IND_DSFASE] = true;
            }

            XMLString::release(&p0);
        }
    }

    ULOG( "minDatacolNivel1=%s",minDatacolNivel1.c_str() );

    ULOG( "minDatacolNivel2=%s",minDatacolNivel2.c_str() );
}

void WFAtdRelCompletarWhereRel2(string &where,DOMNode *entrada,char *dnode)
{
    bool firstTime = true;
    char *p0;
    char *p1;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( !strcmp(dnode,"WFRelatoriosFiltroRegionalVO") )
        {
            if ( p0 = tx.walkTree(dn,"idRegional",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idUFOperadora=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        if ( !strcmp(dnode,"WFFaseVO") )
        {
            if ( p0 = tx.walkTree(dn,"idFase",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idFase=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"StatusUsuarioVO") )
        {
            if ( p0 = tx.walkTree(dn,"idStatus",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idStatusUsuario=" + (string) p0;
                XMLString::release(&p0);
            }
        }
/*
        else if ( !strcmp(dnode,"WFRelatoriosFiltroOperadoraVO") )
        {
            if ( p0 = tx.walkTree(dn,"idOperadora",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += " AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " idOperadora=" + (string) p0;
                XMLString::release(&p0);
            }
        }
*/
        else if ( p0 = tx.walkTree(dn,"idGrupo",0),p0 )
        {
            if ( firstTime )
            {
                if ( where.size() ) where += " AND ";
                where += "(";
                firstTime = false;
            }
            else
            {
                where += " OR ";
            }
            where += " idGrupo=" + (string) p0;
            XMLString::release(&p0);
        }
        else if ( p0 = tx.walkTree(dn,"idEstado",0),p0 )
        {
            if ( firstTime )
            {
                if ( where.size() ) where += " AND ";
                where += "(";
                firstTime = false;
            }
            else
            {
                where += " OR ";
            }
            // O serviço 
            where += " idFase=" + (string) p0;
            XMLString::release(&p0);
        }
        else if ( p0 = tx.walkTree(dn,"idColuna",0),p0 )
        {
            p1 = tx.walkTree(dn,"valor",0);

            if ( p1 )
            {
                if ( *p1 )
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + " = '" + (string)p1 + "'";
                }
                else
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + (string)" IS NULL";
                }

                XMLString::release(&p1);
            }
            else
            {
                Mensagem me = Endereco(__LINE__,__FILE__).mensagem("campo 'valor' para '%s' "
                                                                   "do %do donNode '%s' nao definido"
                                                                  ,p0,index,dnode);
                ULOGE("%s",me.MsgPadrao());
                throw new TuxBasicSvcException("04E9999",me.MsgPadrao());
            }
            XMLString::release(&p0);
        }
    }

    if ( !firstTime )
    {
        where += ")";
    }
}
