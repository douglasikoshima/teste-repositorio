/** 
 * @modulo  Workflow
 * @usecase Workflow
 * @author
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5116174 $ - $Date: 2011/08/12 17:11:20 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtdInBoxRC.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

void sql_error_WFAtdInBoxAdq(sqlca*sqlca);
void cria_xml_saida( struct st_SaidaAtdInBox *oDadosSaida,struct st_vlSaidaAtdInBox *oStatusSaida,XMLGen* saida) ;
void convid_dados( struct st_SaidaAtdInBox *oDadosSaida,struct st_vlSaidaAtdInBox *oStatusSaida );

bool proCConsultaTotalWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida);
bool proCConsultaTotalWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida);
bool proCConsultaTotalWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida);
bool proCConsultaTotalWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida);
bool proCConsultaTotalWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
	#include "../include/stWFAtdInBoxRC.h"
/*	    struct st_SaidaAtdInBox
	    {
		    long long idAtendimento;
		    int  idContato;
		    int  idEstado;
		    VARCHAR dsEstado[256];
		    VARCHAR sgEstado[256];
		    int  idSubEstado;
		    VARCHAR dsSubEstado[256];		    
		    VARCHAR sgSubEstado[256];
		    VARCHAR nmPessoa[256];
		    VARCHAR dtAbertura[22];
		    VARCHAR dtFechamento[22];
		    long idAtendimentoAlerta;
		    VARCHAR dsMensagem[256];
		    int  idAlerta;
    		 VARCHAR sgAlerta[256];
		    VARCHAR dsAlerta[256];
		    VARCHAR nmIcone[256];
		    VARCHAR nmCor[256];
		    VARCHAR nrCriticidade[15];
		    VARCHAR arvore[800];
		    VARCHAR nrTelefone[256];
		    VARCHAR inDocumento[256];
		    VARCHAR inACS[256];
		    int inPausaAtendimento;
		    VARCHAR dtSuspeito[256];
		    long idAtendimentoBaixaHistorico;
		    VARCHAR nmURLDados[256];
		    VARCHAR dtSolicitacaoCancelamento[256];
		    long idAtendimentoSuspeito;
		    long idAtendimentoOrigem;
		    int qtInsistencia;
		    VARCHAR dtPrazoFinalInterno[22];	
		    VARCHAR dtPrazoFinalAnatel[22];	
		    VARCHAR  idPessoaDePara[21];
		    VARCHAR dtFimPausa[256];
		    VARCHAR nmRegional[256];
		    VARCHAR nmPessoaBko[256];
		    VARCHAR nmGrupoBko[256];
		    VARCHAR dtEntrada[22];
		    VARCHAR dtSaida[22];
		    VARCHAR nrDocumento[256];
		    int tipoPessoa;	
	    };
	    
	    struct st_vlSaidaAtdInBox
	    {
		    short idAtendimento;
		    short  idContato;
		    short  idEstado;
		    short dsEstado;
		    short sgEstado;
		    short  idSubEstado;
		    short dsSubEstado;		    
		    short sgSubEstado;
		    short nmPessoa;
		    short dtAbertura;
		    short dtFechamento;
		    short  idAtendimentoAlerta;
		    short dsMensagem;
		    short  idAlerta;
    		 short sgAlerta;
		    short dsAlerta;
		    short nmIcone;
		    short nmCor;
		    short nrCriticidade;
		    short arvore;
		    short nrTelefone;
		    short inDocumento;
		    short inACS;
		    short inPausaAtendimento;
		    short dtSuspeito;
		    short idAtendimentoBaixaHistorico;
		    short nmURLDados;
		    short dtSolicitacaoCancelamento;
		    short idAtendimentoSuspeito;
		    short idAtendimentoOrigem;
		    short qtInsistencia;
		    short dtPrazoFinalInterno;	
		    short dtPrazoFinalAnatel;	
		    short  idPessoaDePara;
		    short dtFimPausa;
		    short nmRegional;
		    short nmPessoaBko;
		    short nmGrupoBko;
		    short dtEntrada;
		    short dtSaida;
		    short nrDocumento;
		    short tipoPessoa;	
	    };

*/
	   struct st_SaidaAtdInBox                               
	   {                                                     
        long   idAtendimento;                         
        VARCHAR    idAtendimentoProtocolo[39];
        int        idContato;                                   
        int        idEstado;                                    
        VARCHAR    dsEstado[256];                            
        VARCHAR    sgEstado[256];                            
        int        idSubEstado;                                
        VARCHAR    dsSubEstado[256];                        
        VARCHAR    sgSubEstado[256];                        
        VARCHAR    nmPessoa[256];                           
        VARCHAR    dtAbertura[22];                          
        VARCHAR    dtFechamento[22];                        
        long   idAtendimentoAlerta;                  
        VARCHAR    dsMensagem[256];                         
        int        idAlerta;                                    
        VARCHAR    sgAlerta[256];                           
        VARCHAR    dsAlerta[256];                           
        VARCHAR    nmIcone[256];                            
        VARCHAR    nmCor[256];                              
        VARCHAR    nrCriticidade[15];                       
        VARCHAR    arvore[800];
        VARCHAR    nrTelefone[256];                         
        VARCHAR    inDocumento[256];                       
        VARCHAR    inACS[256];                              
        int        inPausaAtendimento;                         
        VARCHAR    dtSuspeito[256];                         
        VARCHAR    dtFimPausaAtendimento[22] ;              
        long   idAtendimentoBaixaHistorico;           
        VARCHAR    nmURLDados[256];                         
        VARCHAR    dtSolicitacaoCancelamento[22];           
        VARCHAR    dtPrazoFinalInterno[22];                 
        long   idAtendimentoSuspeito;                
        long   idAtendimentoOrigem ;                 
       };                                     
	   
	   struct st_vlSaidaAtdInBox
	   {                                                     
        short   idAtendimento;                         
        short   idAtendimentoProtocolo;
        short   idContato;                                   
        short   idEstado;                                    
        short   dsEstado;                            
        short   sgEstado;                            
        short   idSubEstado;                                
        short   dsSubEstado;                        
        short   sgSubEstado;                        
        short   nmPessoa;                           
        short   dtAbertura ;                          
        short   dtFechamento ;                        
        short   idAtendimentoAlerta;                  
        short   dsMensagem ;                         
        short   idAlerta;                                    
        short   sgAlerta ;                           
        short   dsAlerta ;                           
        short   nmIcone ;                            
        short   nmCor ;                              
        short   nrCriticidade ;                       
        short   arvore ;
        short   nrTelefone ;                         
        short   inDocumento  ;                        
        short   inACS ;                              
        short   inPausaAtendimento;                         
        short   dtSuspeito ;                         
        short   dtFimPausaAtendimento  ;              
        short   idAtendimentoBaixaHistorico;           
        short   nmURLDados ;                         
        short   dtSolicitacaoCancelamento ;           
        short   dtPrazoFinalInterno;                 
        short   idAtendimentoSuspeito;                
        short   idAtendimentoOrigem ;                 
       } ;               

EXEC SQL END DECLARE SECTION;

bool proCConsultaTotalWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
	ULOG_START("bool proCConsultaTotalWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtdInBoxRC oDados;
        struct st_vlAtdInBoxRC oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);

	EXEC SQL 
    		SELECT 
			COUNT(1)
		INTO
			:numRegistros:i_numRegistros
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND 
	         	(idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento);

	saida->addItem("totalRegistros", numRegistros);
	
	ULOG_END("bool proCConsultaTotalWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	return true;
}

bool proCConsultaTotalWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
	ULOG_START("bool proCConsultaTotalWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_AtdInBoxRC oDados;
        struct st_vlAtdInBoxRC oStatus;

        int  numRegistros;
        short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);

	EXEC SQL 
    		SELECT 
			COUNT(1)
		INTO
			:numRegistros:i_numRegistros
	         FROM 
	         	ATENDIMENTO.AtdAdpProcWFRCV01
	         WHERE 
//	         	IDPESSOAUSUARIOGRUPO = :oDados.idPessoaUsuario
//	         	AND IDPESSOAUSUARIOCRI IS NULL
//	         	AND 
	         	(IDATENDIMENTO = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
	         	AND IDPESSOADEPARA IN
      		         	(SELECT 
			   		        PDP.IDPESSOADEPARA
				        FROM
					        CUSTOMER.PESSOADEPARA PDP,
					        CUSTOMER.PESSOADOCUMENTO PD,
					        CUSTOMER.DOCUMENTO D,
					        APOIO.TIPODOCUMENTO TD
				        WHERE
		 			        PDP.IDPESSOA = PD.IDPESSOA
		 			        AND D.IDDOCUMENTO = PD.IDDOCUMENTO
		 			        AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
	 	 			        AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
		 			        AND D.NRDOCUMENTO = :oDados.documento
                        );

	saida->addItem("totalRegistros", numRegistros);
   ULOG_END("bool proCConsultaTotalWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	return true;
}


bool proCConsultaTotalWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
	ULOG_START("bool proCConsultaTotalWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

	int prefixo = 0;
	int numero  = 0;
	char cConv[3];

	if ( dados->documento[0]=='0' ) 
	{
		strncpy(cConv,dados->documento+1,2);cConv[2]=0;
		prefixo = atoi(cConv);
		numero  = atoi(dados->documento+3);
	}
	else
	{
		strncpy(cConv,dados->documento,2);cConv[2]=0;
		prefixo = atoi(cConv);
		numero  = atoi(dados->documento+2);
	}

    EXEC SQL BEGIN DECLARE SECTION;

		int   oprefixo         = prefixo;
		int   otelefone        = numero;

	    struct st_AtdInBoxRC oDados;
	    struct st_vlAtdInBoxRC oStatus;

		int  numRegistros;
		short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
	
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);

	EXEC SQL 
    		SELECT 
			COUNT(1)
		INTO
			:numRegistros:i_numRegistros
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND 
                   cdAreaRegistro = :oprefixo
	         	AND nrLinha = :otelefone
	         	AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento);

	saida->addItem("totalRegistros", numRegistros);
    ULOG_END("bool proCConsultaTotalWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	return true;
}

bool proCConsultaTotalWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
	ULOG_START("bool proCConsultaTotalWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

	    struct st_AtdInBoxRC oDados;
	    struct st_vlAtdInBoxRC oStatus;

		int  numRegistros;
		short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);
	
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);

	EXEC SQL 
    	SELECT 
			COUNT(1)
		INTO
			:numRegistros:i_numRegistros
	     FROM 
			atendimento.AtdAdpProcWFRCV01,
			Atendimento.AtendimentoConta AtendimentoConta
	     WHERE 
//	        AtdAdpProcWFRCV01.idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//			AND
			 AtendimentoConta.IDATENDIMENTO = AtdAdpProcWFRCV01.IDATENDIMENTO
//	        AND AtdAdpProcWFRCV01.idPessoaUsuarioCri IS NULL
	        AND AtendimentoConta.cdConta = :oDados.documento
	        AND (AtdAdpProcWFRCV01.idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento);

	saida->addItem("totalRegistros", numRegistros);
	
	ULOG_END("bool proCConsultaTotalWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	return true;
}

bool proCConsultaTotalWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{

	ULOG_START("bool proCConsultaTotalWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

	    struct st_AtdInBoxRC oDados;
	    struct st_vlAtdInBoxRC oStatus;

	    int  numRegistros;
	    short i_numRegistros;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);

	EXEC SQL 
    		SELECT 
			COUNT(1)
		INTO
			:numRegistros:i_numRegistros
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND 
	         	(idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
	         	AND idPessoaDePara IN
      		         	(SELECT 
			   		PDP.IDPESSOADEPARA
				FROM
					CUSTOMER.PESSOADEPARA PDP
				WHERE
		 			PDP.IDPESSOA = :oDados.documento);

	saida->addItem("totalRegistros", numRegistros);
	
	ULOG_END("bool proCConsultaTotalWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	return true;
}

bool proCConsultaWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
	ULOG_START("bool proCConsultaWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

	int numeroRegistros = 0;
	int totalRegistros = 0;
//    char sbuffer[1025];

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_SaidaAtdInBox oDadosSaida;
        struct st_vlSaidaAtdInBox oStatusSaida;

        struct st_AtdInBoxRC oDados;
        struct st_vlAtdInBoxRC oStatus;

	EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	memset(&oStatusSaida,-1,sizeof(oStatusSaida));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Usuario - Executando Consulta...");

        EXEC SQL DECLARE consultaWFAdqUsuario2 CURSOR FOR
    		SELECT 
              idAtendimento, 
              idAtendimentoProtocolo,
              idContato, 
              idEstado, 
              dsEstado, 
              sgEstado, 
              idSubEstado, 
              dsSubEstado, 
              sgSubEstado, 
              nmPessoa, 
              TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
              TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
              idAtendimentoAlerta, 
              dsMensagem, 
              idAlerta, 
              sgAlerta, 
              dsAlerta, 
              nmIcone, 
              nmCor, 
              nrCriticidade, 
              path, 
              nrTelefone, 
              inDocumento, 
              0 as inACS, 
              inPausaAtendimento, 
              TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
              TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
              idAtendimentoBaixaHistorico, 
              nmURLDados, 
              dtSolicitacaoCancelamento, 
              dtPrazoFinalInterno, 
              idAtendimentoSuspeito, 
              idAtendimentoOrigem 
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND
	         	 (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
		  ORDER BY nrCriticidade DESC, idAtendimento;

        EXEC SQL OPEN consultaWFAdqUsuario2;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Usuario - Lendo o fetch...");

	while (true)
	{
		EXEC SQL FETCH consultaWFAdqUsuario2 INTO :oDadosSaida INDICATOR :oStatusSaida;

		totalRegistros++;
		numeroRegistros++;

		if (numeroRegistros <= 100)
		{
		    convid_dados( &oDadosSaida,   &oStatusSaida );
            cria_xml_saida( &oDadosSaida,  &oStatusSaida,saida)        ;					   
		}
		else
			break;
	}

	if (numeroRegistros > 100)
	{
		numeroRegistros = 100;
		proCConsultaTotalWFAdq(dados, status, saida);
	}
	else
		saida->addItem("totalRegistros", totalRegistros);
	saida->addItem("nrRegistros", numeroRegistros);
	
	ULOG_START("bool proCConsultaWFAdq(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	EXEC SQL CLOSE consultaWFAdqUsuario2;

	return true;
}

bool proCConsultaWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{

	ULOG_START("bool proCConsultaWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");

	struct sqlca sqlca;

	int numeroRegistros = 0;
	int totalRegistros = 0;
//    char sbuffer[1025];

    EXEC SQL BEGIN DECLARE SECTION;


      struct st_SaidaAtdInBox oDadosSaida;
	   struct st_vlSaidaAtdInBox oStatusSaida;

		struct st_AtdInBoxRC oDados;
		struct st_vlAtdInBoxRC oStatus;

	EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	memset(&oStatusSaida,-1,sizeof(oStatusSaida));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Usuario Documento - Executando Consulta...");
        EXEC SQL DECLARE consultaWFAdqDocumento CURSOR FOR
    		SELECT 
              idAtendimento, 
              idAtendimentoProtocolo,
              idContato, 
              idEstado, 
              dsEstado, 
              sgEstado, 
              idSubEstado, 
              dsSubEstado, 
              sgSubEstado, 
              nmPessoa, 
              TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
              TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
              idAtendimentoAlerta, 
              dsMensagem, 
              idAlerta, 
              sgAlerta, 
              dsAlerta, 
              nmIcone, 
              nmCor, 
              nrCriticidade, 
              path, 
              nrTelefone, 
              inDocumento, 
              0 as inACS, 
              inPausaAtendimento, 
              TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
              TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
              idAtendimentoBaixaHistorico, 
              nmURLDados, 
              dtSolicitacaoCancelamento, 
              dtPrazoFinalInterno, 
              idAtendimentoSuspeito, 
              idAtendimentoOrigem 
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND 
	         	(idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
	         	AND idPessoaDePara IN
      		         	(SELECT 
			   		        PDP.IDPESSOADEPARA
				        FROM
					        CUSTOMER.PESSOADEPARA PDP,
					        CUSTOMER.PESSOADOCUMENTO PD,
					        CUSTOMER.DOCUMENTO D,
					        APOIO.TIPODOCUMENTO TD
				        WHERE
		 			        PDP.IDPESSOA = PD.IDPESSOA
		 			        AND D.IDDOCUMENTO = PD.IDDOCUMENTO
		 			        AND D.IDTIPODOCUMENTO = TD.IDTIPODOCUMENTO
	 	 			        AND TD.SGCLASSIFICACAO = :oDados.tipoDocumento
		 			        AND D.NRDOCUMENTO = :oDados.documento
                        )
		ORDER BY nrCriticidade DESC, idAtendimento;

    EXEC SQL OPEN consultaWFAdqDocumento;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Usuario Documento - Lendo o fetch...");
	while (true)
	{
		EXEC SQL FETCH consultaWFAdqDocumento INTO :oDadosSaida INDICATOR :oStatusSaida;

		totalRegistros++;
		numeroRegistros++;

		if (numeroRegistros <= 100)
		{
            convid_dados( &oDadosSaida,   &oStatusSaida );
            cria_xml_saida( &oDadosSaida,  &oStatusSaida,saida)        ;			
		}
		else
			break;
	}

	if (numeroRegistros > 100)
	{
		numeroRegistros = 100;
		proCConsultaTotalWFAdqDocumento(dados, status, saida);
	}
	else
		saida->addItem("totalRegistros", totalRegistros);
	saida->addItem("nrRegistros", numeroRegistros);

	
	ULOG_START("bool proCConsultaWFAdqDocumento(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	
	EXEC SQL CLOSE consultaWFAdqDocumento;

	return true;
}

bool proCConsultaWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
   ULOG_START("bool proCConsultaWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	ULOG("cWFAtdInBoxRC - Pesquisa Adquirir Linha - Executando a consulta...");

	struct sqlca sqlca;

	int numeroRegistros = 0;
	int totalRegistros = 0;
//    char sbuffer[1025];

	int prefixo = 0;
	int numero  = 0;
	char cConv[3];

	if ( dados->documento[0]=='0' ) 
	{
		strncpy(cConv,dados->documento+1,2);cConv[2]=0;
		prefixo = atoi(cConv);
		numero  = atoi(dados->documento+3);
	}
	else
	{
		strncpy(cConv,dados->documento,2);cConv[2]=0;
		prefixo = atoi(cConv);
		numero  = atoi(dados->documento+2);
	}

    EXEC SQL BEGIN DECLARE SECTION;

		int   oprefixo         = prefixo;
		int   otelefone        = numero;

	    struct st_SaidaAtdInBox oDadosSaida;
	    struct st_vlSaidaAtdInBox oStatusSaida;
                             
		struct st_AtdInBoxRC oDados;                          
		struct st_vlAtdInBoxRC oStatus;                       
                                                            
	EXEC SQL END DECLARE SECTION;                            
                                                            
    memcpy(&oDados, dados, sizeof(oDados));                 
    memcpy(&oStatus, status, sizeof(oStatus));              
                                                            
	memset(&oStatusSaida,-1,sizeof(oStatusSaida));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha - Executando Consulta...");

    EXEC SQL DECLARE consultaWFAdqLinha CURSOR FOR
    	SELECT 
              idAtendimento, 
              idAtendimentoProtocolo,
              idContato, 
              idEstado, 
              dsEstado, 
              sgEstado, 
              idSubEstado, 
              dsSubEstado, 
              sgSubEstado, 
              nmPessoa, 
              TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
              TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
              idAtendimentoAlerta, 
              dsMensagem, 
              idAlerta, 
              sgAlerta, 
              dsAlerta, 
              nmIcone, 
              nmCor, 
              nrCriticidade, 
              path, 
              nrTelefone, 
              inDocumento, 
              0 as inACS, 
              inPausaAtendimento, 
              TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
              TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
              idAtendimentoBaixaHistorico, 
              nmURLDados, 
              dtSolicitacaoCancelamento, 
              dtPrazoFinalInterno, 
              idAtendimentoSuspeito, 
              idAtendimentoOrigem 
	     FROM 
	        Atendimento.AtdAdpProcWFRCV01
	     WHERE 
//	        idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	        AND idPessoaUsuarioCri IS NULL
//	        AND 
	        cdAreaRegistro = :oprefixo
	        AND nrLinha = :otelefone
	        AND (idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
	ORDER BY nrCriticidade DESC, idAtendimento;

    EXEC SQL OPEN consultaWFAdqLinha;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha - Lendo o fetch...");

	while (true)
	{
		EXEC SQL FETCH consultaWFAdqLinha INTO :oDadosSaida INDICATOR :oStatusSaida;

		totalRegistros++;
		numeroRegistros++;

		if (numeroRegistros <= 100)
		{
            convid_dados( &oDadosSaida,   &oStatusSaida );
            cria_xml_saida( &oDadosSaida,  &oStatusSaida,saida)        ;			
		}
		else
			break;
	}

	if (numeroRegistros > 100)
	{
		numeroRegistros = 100;
		proCConsultaTotalWFAdqLinha(dados, status, saida);
	}
	else
    {
		saida->addItem("totalRegistros", totalRegistros);
    }

	saida->addItem("nrRegistros", numeroRegistros);

	ULOG("cWFAtdInBoxRC - Pesquisa Fila Linha - Fetch pronto...");

	EXEC SQL CLOSE consultaWFAdqLinha;
   ULOG_END("bool proCConsultaWFAdqLinha(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");
	return true;


}

bool proCConsultaWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
   ULOG_START("bool proCConsultaWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");   
	ULOG("cWFAtdInBoxRC - Pesquisa Adquirir Conta - Executando a consulta...");

	struct sqlca sqlca;

	int numeroRegistros = 0;
	int totalRegistros = 0;
//    char sbuffer[1025];

    EXEC SQL BEGIN DECLARE SECTION;


	    struct st_SaidaAtdInBox oDadosSaida;
	    struct st_vlSaidaAtdInBox oStatusSaida;

		struct st_AtdInBoxRC oDados;
		struct st_vlAtdInBoxRC oStatus;

	EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	memset(&oStatusSaida,-1,sizeof(oStatusSaida));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha - Executando Consulta...");

	// Esta consulta foi alterada para utilizar a view AtdAdpProcWFRCV01 genérica ao invés de AtdAdqContaCriWFV01
        EXEC SQL DECLARE consultaWFAdqConta CURSOR FOR
    		SELECT 
              AtdAdpProcWFRCV01.idAtendimento, 
              AtdAdpProcWFRCV01.idAtendimentoProtocolo,
              AtdAdpProcWFRCV01.idContato, 
              AtdAdpProcWFRCV01.idEstado, 
              AtdAdpProcWFRCV01.dsEstado, 
              AtdAdpProcWFRCV01.sgEstado, 
              AtdAdpProcWFRCV01.idSubEstado, 
              AtdAdpProcWFRCV01.dsSubEstado, 
              AtdAdpProcWFRCV01.sgSubEstado, 
              AtdAdpProcWFRCV01.nmPessoa, 
              TO_CHAR(AtdAdpProcWFRCV01.dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
              TO_CHAR(AtdAdpProcWFRCV01.dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
              AtdAdpProcWFRCV01.idAtendimentoAlerta, 
              AtdAdpProcWFRCV01.dsMensagem, 
              AtdAdpProcWFRCV01.idAlerta, 
              AtdAdpProcWFRCV01.sgAlerta, 
              AtdAdpProcWFRCV01.dsAlerta, 
              AtdAdpProcWFRCV01.nmIcone, 
              AtdAdpProcWFRCV01.nmCor, 
              AtdAdpProcWFRCV01.nrCriticidade, 
              AtdAdpProcWFRCV01.path, 
              AtdAdpProcWFRCV01.nrTelefone, 
              AtdAdpProcWFRCV01.inDocumento, 
              0 as inACS, 
              AtdAdpProcWFRCV01.inPausaAtendimento, 
              TO_CHAR(AtdAdpProcWFRCV01.dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
              TO_CHAR(AtdAdpProcWFRCV01.dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
              AtdAdpProcWFRCV01.idAtendimentoBaixaHistorico, 
              AtdAdpProcWFRCV01.nmURLDados, 
              AtdAdpProcWFRCV01.dtSolicitacaoCancelamento, 
              AtdAdpProcWFRCV01.dtPrazoFinalInterno, 
              AtdAdpProcWFRCV01.idAtendimentoSuspeito, 
              AtdAdpProcWFRCV01.idAtendimentoOrigem     		
	         FROM 
				   atendimento.AtdAdpProcWFRCV01,
				   Atendimento.AtendimentoConta AtendimentoConta
	         WHERE 
//	         	AtdAdpProcWFRCV01.idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND AtdAdpProcWFRCV01.idPessoaUsuarioCri IS NULL
//				   AND
				    AtendimentoConta.IDATENDIMENTO = AtdAdpProcWFRCV01.IDATENDIMENTO
	         	AND AtendimentoConta.cdConta = :oDados.documento
	         	AND (AtdAdpProcWFRCV01.idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
		ORDER BY nrCriticidade DESC, idAtendimento;

        EXEC SQL OPEN consultaWFAdqConta;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha - Lendo o fetch...");
	while (true)
	{
		EXEC SQL FETCH consultaWFAdqConta INTO :oDadosSaida INDICATOR :oStatusSaida;

		totalRegistros++;
		numeroRegistros++;

		if (numeroRegistros <= 100)
		{
            convid_dados( &oDadosSaida,   &oStatusSaida );
            cria_xml_saida( &oDadosSaida,  &oStatusSaida,saida)        ;			
		}

		else
			break;
	}

	if (numeroRegistros > 100)
	{
		numeroRegistros = 100;
		proCConsultaTotalWFAdqConta(dados, status, saida);
	}
	else
		saida->addItem("totalRegistros", totalRegistros);
	saida->addItem("nrRegistros", numeroRegistros);

	ULOG("cWFAtdInBoxRC - Pesquisa Fila Linha - Fetch pronto...");

	EXEC SQL CLOSE consultaWFAdqConta;
   ULOG_END("bool proCConsultaWFAdqConta(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");   
	return true;
}

bool proCConsultaWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)
{
   ULOG_START("bool proCConsultaWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");      
	ULOG("cWFAtdInBoxRC - Pesquisa Adquirir Nome - Executando a consulta...");

	struct sqlca sqlca;

	int numeroRegistros = 0;
	int totalRegistros = 0;
//    char sbuffer[1025];

    EXEC SQL BEGIN DECLARE SECTION;

	    struct st_SaidaAtdInBox oDadosSaida;
	    struct st_vlSaidaAtdInBox oStatusSaida;

		struct st_AtdInBoxRC oDados;
		struct st_vlAtdInBoxRC oStatus;

	EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

	memset(&oStatusSaida,-1,sizeof(oStatusSaida));

	ULOG("Filtro por numero de linha =  [%s]", dados->documento);
	ULOG("Filtro por usuario =  [%d]", dados->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", dados->idAtendimento);

	ULOG("Filtro por numero de linha =  [%d]", status->documento);
	ULOG("Filtro por usuario =  [%d]", status->idPessoaUsuario);
	ULOG("Filtro por Atendimento =  [%d]", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdInBoxAdq(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	
	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha Documento - Executando Consulta...");
        EXEC SQL DECLARE consultaWFAdqNome CURSOR FOR
    		SELECT 
              idAtendimento, 
              idAtendimentoProtocolo,
              idContato, 
              idEstado, 
              dsEstado, 
              sgEstado, 
              idSubEstado, 
              dsSubEstado, 
              sgSubEstado, 
              nmPessoa, 
              TO_CHAR(dtAbertura,'DD/MM/YYYY HH24:MI:SS') dtAbertura, 
              TO_CHAR(dtFechamento,'DD/MM/YYYY  HH24:MI:SS'), 
              idAtendimentoAlerta, 
              dsMensagem, 
              idAlerta, 
              sgAlerta, 
              dsAlerta, 
              nmIcone, 
              nmCor, 
              nrCriticidade, 
              path, 
              nrTelefone, 
              inDocumento, 
              0 as inACS, 
              inPausaAtendimento, 
              TO_CHAR(dtSuspeito,'DD/MM/YYYY HH24:MI:SS'), 
              TO_CHAR(dtFimPausaAtendimento,'DD/MM/YYYY HH24:MI:SS'), 
              idAtendimentoBaixaHistorico, 
              nmURLDados, 
              dtSolicitacaoCancelamento, 
              dtPrazoFinalInterno, 
              idAtendimentoSuspeito, 
              idAtendimentoOrigem     		
	         FROM 
	         	Atendimento.AtdAdpProcWFRCV01
	         WHERE 
//	         	idPessoaUsuarioGrupo = :oDados.idPessoaUsuario
//	         	AND idPessoaUsuarioCri IS NULL
//	         	AND 
	         	(idAtendimento = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
	         	AND idPessoaDePara IN
      		         	(SELECT 
			   		PDP.IDPESSOADEPARA
				FROM
					CUSTOMER.PESSOADEPARA PDP
				WHERE
		 			PDP.IDPESSOA = :oDados.documento)
		ORDER BY nrCriticidade DESC, idAtendimento;

    EXEC SQL OPEN consultaWFAdqNome;

	ULOG("cWFAtdInBoxRC - Pesquisa Inbox Linha Documento - Lendo o fetch...");

	while (true)
	{
		EXEC SQL FETCH consultaWFAdqNome INTO :oDadosSaida INDICATOR :oStatusSaida;

		totalRegistros++;
		numeroRegistros++;

		if (numeroRegistros <= 100)
		{
            convid_dados( &oDadosSaida,   &oStatusSaida );
            cria_xml_saida( &oDadosSaida,  &oStatusSaida,saida)        ;
		}
		else
			break;
	}

	if (numeroRegistros > 100)
	{
		numeroRegistros = 100;
		proCConsultaTotalWFAdqNome(dados, status, saida);
	}
	else
		saida->addItem("totalRegistros", totalRegistros);
	saida->addItem("nrRegistros", numeroRegistros);

	ULOG("cWFAtdInBoxRC - Pesquisa Fila Linha Documento - Fetch pronto...");

	EXEC SQL CLOSE consultaWFAdqNome;
   ULOG_END("bool proCConsultaWFAdqNome(st_AtdInBoxRC* dados, st_vlAtdInBoxRC* status, XMLGen* saida)");      
	return true;
}

void convid_dados( struct st_SaidaAtdInBox *oDadosSaida,   struct st_vlSaidaAtdInBox *oStatusSaida )
{
    CONVIND(oDadosSaida->idAtendimentoProtocolo, oStatusSaida->idAtendimentoProtocolo);
    CONVIND(oDadosSaida->dsEstado, oStatusSaida->dsEstado);
    CONVIND(oDadosSaida->sgEstado, oStatusSaida->sgEstado);
    CONVIND(oDadosSaida->dsSubEstado, oStatusSaida->dsSubEstado);
    CONVIND(oDadosSaida->sgSubEstado, oStatusSaida->sgSubEstado);
    CONVIND(oDadosSaida->nmPessoa, oStatusSaida->nmPessoa);
    CONVIND(oDadosSaida->dtAbertura, oStatusSaida->dtAbertura);
    CONVIND(oDadosSaida->dtFechamento, oStatusSaida->dtFechamento);
    CONVIND(oDadosSaida->dsMensagem, oStatusSaida->dsMensagem);
    CONVIND(oDadosSaida->sgAlerta, oStatusSaida->sgAlerta);
    CONVIND(oDadosSaida->dsAlerta, oStatusSaida->dsAlerta);
    CONVIND(oDadosSaida->nmIcone, oStatusSaida->nmIcone);
    CONVIND(oDadosSaida->nmCor, oStatusSaida->nmCor);
    CONVIND(oDadosSaida->arvore, oStatusSaida->arvore);
    CONVIND(oDadosSaida->nrTelefone, oStatusSaida->nrTelefone);
    CONVIND(oDadosSaida->inDocumento, oStatusSaida->inDocumento);
    CONVIND(oDadosSaida->inACS, oStatusSaida->inACS);
    CONVIND(oDadosSaida->dtSuspeito, oStatusSaida->dtSuspeito);
    CONVIND(oDadosSaida->dtFimPausaAtendimento, oStatusSaida->dtFimPausaAtendimento);
    CONVIND(oDadosSaida->nmURLDados, oStatusSaida->nmURLDados);
    CONVIND(oDadosSaida->dtSolicitacaoCancelamento, oStatusSaida->dtSolicitacaoCancelamento);
    CONVIND(oDadosSaida->dtPrazoFinalInterno, oStatusSaida->dtPrazoFinalInterno);
    CONVIND(oDadosSaida->nrCriticidade, oStatusSaida->nrCriticidade);
}

void cria_xml_saida( struct st_SaidaAtdInBox *oDadosSaida,  struct st_vlSaidaAtdInBox *oStatusSaida,XMLGen* saida)
{
    saida->createTag("AtendimentoFilaVO");
	    
	    saida->addItem("operacaoWorkflow","");
	    
	    saida->createTag("AtendimentoVO");
	    
		    saida->addItem("idAtendimento",CONVINT(oDadosSaida->idAtendimento,oStatusSaida->idAtendimento));
		    saida->addItem("nrProtocolo", (char*)oDadosSaida->idAtendimentoProtocolo.arr);
		    saida->addItem("dtAbertura", (char*)oDadosSaida->dtAbertura.arr);
		    saida->addItem("dtFechamento", (char*)oDadosSaida->dtFechamento.arr);
		    saida->addItem("nrTelefone", (char*)oDadosSaida->nrTelefone.arr);
		    saida->addItem("inDocumento", (char*)oDadosSaida->inDocumento.arr);
		    saida->addItem("inACS", (char*)oDadosSaida->inACS.arr);
		    saida->addItem("inPausaAtendimento", CONVINT(oDadosSaida->inPausaAtendimento,oStatusSaida->inPausaAtendimento));
		    saida->addItem("dtSuspeito", (char*)oDadosSaida->dtSuspeito.arr);
		    saida->addItem("dtFimPausaAtendimento", (char*)oDadosSaida->dtFimPausaAtendimento.arr);
		    saida->addItem("idAtendimentoBaixaHistorico", CONVINT(oDadosSaida->idAtendimentoBaixaHistorico,oStatusSaida->idAtendimentoBaixaHistorico));
		    saida->addItem("nmURLDados", (char*)oDadosSaida->nmURLDados.arr);
		    saida->addItem("dtSolicitacaoCancelamento", (char*)oDadosSaida->dtSolicitacaoCancelamento.arr);
			    
		    saida->createTag("WFEstadoVO");
	    
			    saida->addItem("idEstado", CONVINT(oDadosSaida->idEstado,oStatusSaida->idEstado));
			    saida->addItem("dsEstado", (char*)oDadosSaida->dsEstado.arr);
			    saida->addItem("sgEstado", (char*)oDadosSaida->sgEstado.arr);

		    saida->closeTag();
	    
		    saida->createTag("WFSubEstadoVO");
	    
			    saida->addItem("idSubEstado", CONVINT(oDadosSaida->idSubEstado,oStatusSaida->idSubEstado));
			    saida->addItem("dsSubEstado", (char*)oDadosSaida->dsSubEstado.arr);
			    saida->addItem("sgSubEstado", (char*)oDadosSaida->sgSubEstado.arr);
	    
		    saida->closeTag();
	    
		    if (oStatusSaida->idAlerta != -1)
			        {

			    saida->createTag("AlertaVO");
			    
				    saida->addItem("idAlerta", CONVINT(oDadosSaida->idAlerta,oStatusSaida->idAlerta));
				    saida->addItem("dsAlerta", (char*)oDadosSaida->dsAlerta.arr);
				    saida->addItem("sgAlerta", (char*)oDadosSaida->sgAlerta.arr);
				    saida->addItem("nmIcone", (char*)oDadosSaida->nmIcone.arr);
				    saida->addItem("nmCor", (char*)oDadosSaida->nmCor.arr);
				    saida->addItem("nrCriticidade", (char*)oDadosSaida->nrCriticidade.arr);
			    
			    saida->closeTag();
		    }
	    
		    saida->createTag("ns2:ArvoreAtendimentoVO");
	    
			    saida->addItem("ns2:idContato", CONVINT(oDadosSaida->idContato,oStatusSaida->idContato));
			    saida->addItem("ns2:descricaoCompleta", (char*)oDadosSaida->arvore.arr);
	    
		    saida->closeTag();
	    
		    saida->createTag("ns3:UsuarioVIVO");
		    
  			    // saida->addItem("ns3:idPessoaUsuario", CONVINT(idPessoa,i_idPessoa));
			    saida->addItem("ns3:nmLoginUsuario", "");
			    saida->addItem("ns3:nmNome", (char*)oDadosSaida->nmPessoa.arr);
			    saida->addItem("ns3:sgSenhaUsuario", "");
	    
		    saida->closeTag();
				    
	    saida->closeTag();
	    
    saida->closeTag();	
}

void sql_error_WFAtdInBoxAdq( sqlca * sqlca )
{
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("sql_error_WFAtdInBoxAdq:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
