/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5116174 $ - $Date: 2011/08/12 17:11:35 $
 **/

#undef SQLCA
#define SQLCA_NONE

#include "../include/cWF_IniAcaoPC.h"

void sql_error_WFAtdNvsPri(sqlca *sqlca);

int cWF_InsereIncidencia::proCConsAtdNovasPrioridades(long idAtendimento, DadosNovasPrioridades *dadosNovasPrioridades)
{
    ULOG_START("cWF_InsereIncidencia::proCConsAtdNovasPrioridades()");
    

    if ( 0 == dadosNovasPrioridades )
    {
        return 0;
    }

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
		long idAtd = idAtendimento;
        VARCHAR nrCriticidade[16];
        VARCHAR nmCor[256];

        short i_nrCriticidade=-1;
        short i_nmCor=-1;
    EXEC SQL END DECLARE SECTION;

    memset(dadosNovasPrioridades,0,sizeof(DadosNovasPrioridades));

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtdNvsPri(&sqlca);
	EXEC SQL SELECT
			       nrCriticidade,nmCor
               INTO
                   nrCriticidade:i_nrCriticidade,
                   nmCor:i_nmCor
               FROM
                   atendimento.AtendimentoNovasPrioridadesV01
		      WHERE
			       idAtendimento = :idAtd;

    CONVIND(nrCriticidade, i_nrCriticidade);

	strcpy(dadosNovasPrioridades->nrCriticidade, (char*) nrCriticidade.arr);

    if ( -1 != i_nmCor )
    {
        CONVIND(nmCor,i_nmCor);

        strcpy(dadosNovasPrioridades->nmCor,(char*)nmCor.arr);
    }

    ULOG_END("cWF_InsereIncidencia::proCConsAtdNovasPrioridades()");

    return sqlca.sqlcode ? 0 : 1;
}

int cWF_InsereIncidencia::proCBuscaQuantidadeInsistencia(long _idAtendimento)
{
    ULOG_START("cWF_InsereIncidencia::proCBuscaQuantidadeInsistencia()");
   

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = _idAtendimento;
        int qtInsistencia;

		short i_qtInsistencia;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtdNvsPri(&sqlca);

	EXEC SQL 
		SELECT
			qtInsistencia
		INTO
			qtInsistencia:i_qtInsistencia
		FROM
			atendimento.Atendimento
		WHERE
			idAtendimento = :idAtendimento;

    
    ULOG_END("cWF_InsereIncidencia::proCBuscaQuantidadeInsistencia()");

	return (i_qtInsistencia != -1) ? qtInsistencia : -1;
}

int cWF_InsereIncidencia::proCBuscaCodigoAlerta(int _idAtividade)
{
    ULOG_START("cWF_InsereIncidencia::proCBuscaCodigoAlerta()");
    

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idAtividade = _idAtividade;
        int idAlerta;

		short i_idAlerta;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtdNvsPri(&sqlca);

	EXEC SQL 
		SELECT
			idAlerta
		INTO
			idAlerta:i_idAlerta
		FROM
			workflow.AtividadeAlerta
		WHERE
			idAtividade = :idAtividade;

    ULOG_END("cWF_InsereIncidencia::proCBuscaCodigoAlerta()");

	return (i_idAlerta != -1) ? idAlerta : -1;
}

int cWF_InsereIncidencia::proCGrupoAtual(long _idAtendimento)
{
    ULOG_START("cWF_InsereIncidencia::proCGrupoAtual()");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento = _idAtendimento;
        int idGrupo;

		short i_idGrupo;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFAtdNvsPri(&sqlca);

	EXEC SQL 
		SELECT
			idGrupo
		INTO
			idGrupo:i_idGrupo
		FROM
			atendimento.AtendimentoGrupoAtual
		WHERE
			idAtendimento = :idAtendimento;

    
    ULOG_END("cWF_InsereIncidencia::proCGrupoAtual()");

	return (i_idGrupo != -1) ? idGrupo : -1;
}

void sql_error_WFAtdNvsPri( sqlca * sqlca )
{
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("sql_error_WFAtdNvsPri:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
