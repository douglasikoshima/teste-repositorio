#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include"../../../commons/queryMacro.h"


#include "../include/cWFDocumentoTecnico.h"
#include "../include/stWFDocumentoTecnico.h"

bool proCPegaDocumentoTecnico( char * dsDocumentoTecnico, int idDocumentoTecnico );
void sql_error_WFDocumentoTecnico(sqlca*sqlca);
void escreveXMLDocumentoTecnico(
								long idAtendimento,
								long idAtendimentoDocumento,
								int idDocumentoTecnico,
								char* dsTipoDocumentoProcesso,
								char* nrDocumento,
								char* dtAbertura,
								char* dtEstimadaFechamento,
								char* dtFechamento,
								char* dsDocumento,
								char* dsResposta,
                     	int idUsuarioAlteracao,
                     	char* dtUltimaAlteracao,
                     	int idDocumentoTecnicoTipo,
                     	char* ComentarioAbertura,
                     	char* ComentarioFechamento,
                     	int inEstadoTecnico,
								XMLGen* saida);

	// Declara as estruturas compatíveis ao ProC.
    EXEC SQL BEGIN DECLARE SECTION;
		#include "../include/stWFDocumentoTecnico.h"
    EXEC SQL END DECLARE SECTION;


bool proCFecharWFDocumentoTecnico(st_DocumentoTecnico* dados, st_vlDocumentoTecnico* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_DocumentoTecnico   oDados;
		struct st_vlDocumentoTecnico oStatus;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

	ULOG("Numero Documento: %s",dados->nrDocumento);
	ULOG("DTFECHAMENTO: %s",dados->dtFechamento);
	ULOG("COMENTARIOFECHAMENT: %s",dados->ComentarioFechamento);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));


	EXEC SQL
		UPDATE 
			ATENDIMENTO.DOCUMENTOTECNICO
		SET
			DTFECHAMENTO = TO_DATE(DECODE(:oStatus.dtFechamento, -1, NULL, :oDados.dtFechamento),'DD/MM/YYYY HH24:MI:SS'),
			COMENTARIOFECHAMENTO = :oDados.ComentarioFechamento,
			INESTADOTECNICO = :oDados.inEstadoTecnico
		WHERE
			UPPER(nrDocumento) = UPPER( :oDados.nrDocumento);

	return true;
}


bool proCIncluirWFDocumentoTecnico(st_DocumentoTecnico *dados, st_vlDocumentoTecnico *status, XMLGen* saida)
{
	ULOG_START("proCIncluirWFDocumentoTecnico");

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_DocumentoTecnico   *oDados = dados;
		struct st_vlDocumentoTecnico *oStatus = status;

	EXEC SQL END DECLARE SECTION;

	ULOG("           nrDocumento: '%s'",oDados->nrDocumento);
	ULOG("            dtAbertura: '%s'",oDados->dtAbertura);
	ULOG("  dtEstimadaFechamento: '%s'",oDados->dtEstimadaFechamento);
	ULOG("          dtFechamento: '%s'",oDados->dtFechamento);
	ULOG("           dsDocumento: '%s'",oDados->dsDocumento);
	ULOG("            dsResposta: '%s'",oDados->dsResposta);
	ULOG("    ComentarioAbertura: '%s'",oDados->ComentarioAbertura);
	ULOG("  ComentarioFechamento: '%s'",oDados->ComentarioFechamento);
	ULOG("idDocumentoTecnicoTipo: %d"  ,oDados->idDocumentoTecnicoTipo);
	ULOG("       inEstadoTecnico: %d"  ,oDados->inEstadoTecnico);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

	EXEC SQL 
        SELECT ATENDIMENTO.DOCUMENTOTECNICOSQ.NEXTVAL INTO :oDados->idDocumentoTecnico FROM DUAL;

	EXEC SQL 
		INSERT INTO
			ATENDIMENTO.DOCUMENTOTECNICO
			(
                IDDOCUMENTOTECNICO,
                NRDOCUMENTO,
                DTABERTURA,
                DTESTIMADAFECHAMENTO,
                DTFECHAMENTO,
                DSDOCUMENTO,
                DSRESPOSTA,
                IDUSUARIOALTERACAO,
                DTULTIMAALTERACAO,
                IDDOCUMENTOTECNICOTIPO,
                COMENTARIOABERTURA,
                COMENTARIOFECHAMENTO,
                INESTADOTECNICO
			)
			VALUES
			(
				:oDados->idDocumentoTecnico,
                SUBSTR(TRIM(:oDados->nrDocumento),1,255),
                DECODE(:oStatus->dtAbertura,-1,NULL,TO_DATE(:oDados->dtAbertura,'DD/MM/YYYY')),
                DECODE(:oStatus->dtEstimadaFechamento,-1,SYSDATE,TO_DATE(:oDados->dtEstimadaFechamento,'DD/MM/YYYY')),
                DECODE(:oStatus->dtFechamento,-1,NULL,TO_DATE(:oDados->dtFechamento,'DD/MM/YYYY')),
                SUBSTR(TRIM(:oDados->dsDocumento),1,255),
                SUBSTR(TRIM(:oDados->dsResposta),1,500),
				:oDados->idUsuarioAlteracao,
                SYSDATE,
				:oDados->idDocumentoTecnicoTipo,
                SUBSTR(TRIM(:oDados->ComentarioAbertura),1,255),
                SUBSTR(TRIM(:oDados->ComentarioFechamento),1,255),
				:oDados->inEstadoTecnico
			);

	saida->createTag("Registro");
		saida->addItem("idDocumentoTecnico", oDados->idDocumentoTecnico);
	saida->closeTag();

	ULOG_END("proCIncluirWFDocumentoTecnico");

	return true;
}

bool proCValidarWFDocumentoTecnico( char *sNrDocumento )
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        int iDocTecn;
        char *nrDocumento = sNrDocumento;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error_WFDocumentoTecnico(&sqlca);

    EXEC SQL 
        SELECT 
            COUNT(1)
        INTO
            :iDocTecn
        FROM
            ATENDIMENTO.DOCUMENTOTECNICO
        WHERE
            UPPER(NRDOCUMENTO) = UPPER(:nrDocumento)
        AND
            ROWNUM < 2;

    return iDocTecn > 0 ? false : true;
}

bool proCPegaDocumentoTecnico( char * dsDocumentoTecnico, int idDocumentoTecnico )
{

   struct sqlca sqlca;
      
   EXEC SQL BEGIN DECLARE SECTION;
      
      VARCHAR dsDocumentoTecnicoTipo[256];
      int idDocumentoTecnicoTipo;
      
      short i_dsDocumentoTecnicoTipo;

   EXEC SQL END DECLARE SECTION;
   
   idDocumentoTecnicoTipo = idDocumentoTecnico;
   

   EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);
  	EXEC SQL SELECT dsDocumentoTecnicoTipo INTO :dsDocumentoTecnicoTipo:i_dsDocumentoTecnicoTipo FROM Atendimento.DocumentoTecnicoTipo WHERE idDocumentoTecnicoTipo = :idDocumentoTecnicoTipo;
   if ( sqlca.sqlcode == 1403 )
      return true;
      
   if ( i_dsDocumentoTecnicoTipo == -1 )
      return true;
      
   dsDocumentoTecnicoTipo.arr[dsDocumentoTecnicoTipo.len] = 0x0;
   strcpy(dsDocumentoTecnico,(char *)dsDocumentoTecnicoTipo.arr);
   
	return true;

}

bool proCAlterarWFDocumentoTecnico(st_DocumentoTecnico* dados, st_vlDocumentoTecnico* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		struct st_DocumentoTecnico   oDados;
		struct st_vlDocumentoTecnico oStatus;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

	memcpy(&oDados,  dados,  sizeof(oDados));
	memcpy(&oStatus, status, sizeof(oStatus));

	sprintf(query,"%s", "UPDATE Atendimento.DocumentoTecnico SET ");

	bool separa = false;

	if (status->idDocumentoTecnico != -1) 
		montaUpdate("idDocumentoTecnico", oDados.idDocumentoTecnico, 1);

	if (status->nrDocumento != -1)
		montaUpdate("nrDocumento", dados->nrDocumento, 2);

	if (status->dtAbertura != -1)
		montaUpdate("dtAbertura", oDados.dtAbertura, 4);

	if (status->dtEstimadaFechamento != -1)
		montaUpdate("dtEstimadaFechamento", oDados.dtEstimadaFechamento, 4);

	if (status->dtFechamento != -1)
		montaUpdate("dtFechamento", oDados.dtFechamento, 4);

	if (status->dsDocumento != -1)
		montaUpdate("dsDocumento", dados->dsDocumento, 2);

	if (status->dsResposta != -1)
		montaUpdate("dsResposta", dados->dsResposta, 2);

	if (status->dsResposta != -1)
		montaUpdate("dsResposta", dados->dsResposta, 2);

	if (status->idUsuarioAlteracao != -1)
		montaUpdate("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1)
		montaUpdate("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (status->idDocumentoTecnicoTipo != -1)
		montaUpdate("idDocumentoTecnicoTipo", dados->idDocumentoTecnicoTipo, TIPO_INT);

	if (status->ComentarioAbertura != -1)
		montaUpdate("ComentarioAbertura", dados->ComentarioAbertura, TIPO_CHAR);

	if (status->ComentarioFechamento != -1)
		montaUpdate("ComentarioFechamento", dados->ComentarioFechamento, TIPO_CHAR);

	if (status->inEstadoTecnico != -1)
		montaUpdate("inEstadoTecnico", dados->inEstadoTecnico, TIPO_INT);

	sprintf(query, "%s WHERE idDocumentoTecnico = %i", query, dados->idDocumentoTecnico);

	EXEC SQL EXECUTE IMMEDIATE :query;

	return true;
}

bool proCExcluirWFDocumentoTecnico(st_DocumentoTecnico* dados, st_vlDocumentoTecnico* status, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnico = dados->idDocumentoTecnico;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

	EXEC SQL 
		DELETE
			Atendimento.DocumentoTecnico
		WHERE
			idDocumentoTecnico = :idDocumentoTecnico;

	return true;
}

bool proCConsultaWFDocumentoTecnico(st_DocumentoTecnico* dados, st_vlDocumentoTecnico* status, char* order, XMLGen* saida)
{

   
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idDocumentoTecnico;
		VARCHAR nrDocumento[256];
		VARCHAR dtAbertura[256];
		VARCHAR dtEstimadaFechamento[256];
		VARCHAR dtFechamento[256];
		VARCHAR dsDocumento[256];
		VARCHAR dsResposta[501];
		int idUsuarioAlteracao;
		VARCHAR dtUltimaAlteracao[256];
		int idDocumentoTecnicoTipo;
		VARCHAR ComentarioAbertura[256];
		VARCHAR ComentarioFechamento[256];
		int inEstadoTecnico;

		char query[800];

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFEstado(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	sprintf(query,"SELECT idDocumentoTecnico, nrDocumento, "); 
	sprintf(query,"%s TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'), ", query); 
	sprintf(query,"%s TO_CHAR(dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'), ", query); 
	sprintf(query,"%s TO_CHAR(dtFechamento,'dd/mm/yyyy hh24:mi'), ", query); 
	sprintf(query,"%s dsDocumento, dsResposta, idUsuarioAlteracao ", query);
	sprintf(query,"%s TO_CHAR(dtUltimaAlteracao,'dd/mm/yyyy hh24:mi'), ", query);
	sprintf(query,"%s idDocumentoTecnicoTipo, ComentarioAbertura, ComentarioFechamento, inEstadoTecnico FROM Atendimento.DocumentoTecnico ", query); 

	bool separa = false;

	if (status->idDocumentoTecnico != -1) 
		montaWhere("idDocumentoTecnico", dados->idDocumentoTecnico, 1);

	if (status->nrDocumento != -1)
		montaWhere("nrDocumento", dados->nrDocumento, 2);

	if (status->dtAbertura != -1) 
		montaWhere("dtAbertura", dados->dtAbertura, 4);

	if (status->dtEstimadaFechamento != -1) 
		montaWhere("dtEstimadaFechamento", dados->dtEstimadaFechamento, 4);

	if (status->dtFechamento != -1) 
		montaWhere("dtFechamento", dados->dtFechamento, 4);

	if (status->dsDocumento != -1)
		montaWhere("dsDocumento", dados->dsDocumento, 2);

	if (status->dsResposta != -1)
		montaWhere("dsResposta", dados->dsResposta, 2);

	if (status->idUsuarioAlteracao != -1)
		montaWhere("idUsuarioAlteracao", dados->idUsuarioAlteracao, TIPO_INT);

	if (status->dtUltimaAlteracao != -1)
		montaWhere("dtUltimaAlteracao", dados->dtUltimaAlteracao, TIPO_DATAHORA);

	if (status->idDocumentoTecnicoTipo != -1)
		montaWhere("idDocumentoTecnicoTipo", dados->idDocumentoTecnicoTipo, TIPO_INT);

	if (status->ComentarioAbertura != -1)
		montaWhere("ComentarioAbertura", dados->ComentarioAbertura, TIPO_CHAR);

	if (status->ComentarioFechamento != -1)
		montaWhere("ComentarioFechamento", dados->ComentarioFechamento, TIPO_CHAR);

	if (status->inEstadoTecnico != -1)
		montaWhere("inEstadoTecnico", dados->inEstadoTecnico, TIPO_INT);

	if (strlen(order) > 0) 
		sprintf( query, "%s ORDER BY %s ", query, order);



    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

	EXEC SQL PREPARE consultaDocumentoTecnico FROM :query;
	EXEC SQL DECLARE consulta CURSOR FOR consultaDocumentoTecnico;

	EXEC SQL OPEN consulta;

	while (true)
	{
		EXEC SQL FETCH consulta INTO :idDocumentoTecnico, 
		                             :nrDocumento, 
		                             :dtAbertura, 
		                             :dtEstimadaFechamento, 
		                             :dtFechamento, 
		                             :dsDocumento, 
		                             :dsResposta, 
		                             :idUsuarioAlteracao, 
		                             :dtUltimaAlteracao, 
		                             :idDocumentoTecnicoTipo, 
		                             :ComentarioAbertura, 
		                             :ComentarioFechamento, 
		                             :inEstadoTecnico;

		CONV(nrDocumento);
		CONV(dtAbertura);
		CONV(dtEstimadaFechamento);
		CONV(dtFechamento);
		CONV(dsDocumento);
		CONV(dsResposta);

		saida->createTag("WFDocumentoTecnicoVO");
			saida->addItem("idDocumentoTecnico", idDocumentoTecnico);
			saida->addItem("nrDocumento", (char *)nrDocumento.arr);
			saida->addItem("dtAbertura", (char *)dtAbertura.arr);
			saida->addItem("dtEstimadaFechamento", (char *)dtEstimadaFechamento.arr);
			saida->addItem("dtFechamento", (char *)dtFechamento.arr);
			saida->addItem("dsDocumento", (char *)dsDocumento.arr);
			saida->addItem("dsResposta", (char *)dsResposta.arr);
			saida->addItem("idUsuarioAlteracao", idUsuarioAlteracao);
			saida->addItem("dtUltimaAlteracao", (char *)dtUltimaAlteracao.arr);
			saida->addItem("idDocumentoTecnicoTipo", idDocumentoTecnicoTipo);
			saida->addItem("ComentarioAbertura", (char *)ComentarioAbertura.arr);
			saida->addItem("ComentarioFechamento", (char *)ComentarioFechamento.arr);
			saida->addItem("inEstadoTecnico", inEstadoTecnico);
		saida->closeTag();
	}

	EXEC SQL CLOSE consulta;

	return true;

}

bool proCConsultaWFDocumentoAtendimento(long idAtendimento, XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idatendimento = idAtendimento;

		long idAtendimentoDocumento;
		int idDocumentoTecnico;
		VARCHAR dsTipoDocumentoProcesso[256];
		VARCHAR nrDocumento[256];
		VARCHAR dtAbertura[256];
		VARCHAR dtEstimadaFechamento[256];
		VARCHAR dtFechamento[256];
		VARCHAR dsDocumento[256];
		VARCHAR dsResposta[501];
		int idUsuarioAlteracao;
		VARCHAR dtUltimaAlteracao[256];
		int idDocumentoTecnicoTipo;
		VARCHAR ComentarioAbertura[256];
		VARCHAR ComentarioFechamento[256];
		int inEstadoTecnico;

		short i_idAtendimentoDocumento;
		short i_idDocumentoTecnico;
		short i_dsTipoDocumentoProcesso;
		short i_nrDocumento;
		short i_dtAbertura;
		short i_dtEstimadaFechamento;
		short i_dtFechamento;
		short i_dsDocumento;
		short i_dsResposta;
		short i_idUsuarioAlteracao;
		short i_dtUltimaAlteracao;
		short i_idDocumentoTecnicoTipo;
		short i_ComentarioAbertura;
		short i_ComentarioFechamento;
		short i_inEstadoTecnico;

    EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

/*
	EXEC SQL DECLARE consultaDocumento CURSOR FOR 
	SELECT 
			idAtendimentoDocumento, 
			idDocumentoTecnico, 
			dsDocumentoTecnicoTipo, 
			nrDocumento, 
			TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtFechamento,'dd/mm/yyyy hh24:mi'),
			dsDocumento, 
			dsResposta,
		         idUsuarioAlteracao,
		         dtUltimaAlteracao,
		         idDocumentoTecnicoTipo,
		         ComentarioAbertura,
		         ComentarioFechamento,
		         inEstadoTecnico
	FROM 
			Atendimento.AtendimentoDocumentoB01
	WHERE
		idAtendimento = :idatendimento;
*/

	EXEC SQL DECLARE consultaDocumento CURSOR FOR 
        SELECT 
            ATENDIMENTODOCUMENTO.IDATENDIMENTODOCUMENTO, 
            DOCUMENTOTECNICO.IDDOCUMENTOTECNICO, 
            DOCUMENTOTECNICOTIPO.DSDOCUMENTOTECNICOTIPO, 
            DOCUMENTOTECNICO.NRDOCUMENTO, 
            TO_CHAR(ATENDIMENTO.DTABERTURA,'DD/MM/YYYY HH24:MI') AS DTABERTURA, 
            TO_CHAR(DOCUMENTOTECNICO.DTESTIMADAFECHAMENTO,'DD/MM/YYYY HH24:MI') AS DTESTIMADAFECHAMENTO, 
            TO_CHAR(DOCUMENTOTECNICO.DTFECHAMENTO,'DD/MM/YYYY HH24:MI') AS DTFECHAMENTO,
            DOCUMENTOTECNICO.DSDOCUMENTO, 
            DOCUMENTOTECNICO.DSRESPOSTA,
            ATENDIMENTODOCUMENTO.IDUSUARIOALTERACAO,
            ATENDIMENTODOCUMENTO.DTULTIMAALTERACAO,
            DOCUMENTOTECNICOTIPO.IDDOCUMENTOTECNICOTIPO,
            DOCUMENTOTECNICO.COMENTARIOABERTURA,
            DOCUMENTOTECNICO.COMENTARIOFECHAMENTO,
            DOCUMENTOTECNICO.INESTADOTECNICO
        FROM 
            ATENDIMENTO.ATENDIMENTO ATENDIMENTO,
            ATENDIMENTO.DOCUMENTOTECNICOTIPO DOCUMENTOTECNICOTIPO,
            ATENDIMENTO.DOCUMENTOTECNICO DOCUMENTOTECNICO,
            ATENDIMENTO.ATENDIMENTODOCUMENTO ATENDIMENTODOCUMENTO
        WHERE 
            ATENDIMENTODOCUMENTO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO
        AND 
            ATENDIMENTODOCUMENTO.IDDOCUMENTOTECNICO = DOCUMENTOTECNICO.IDDOCUMENTOTECNICO
        AND
            DOCUMENTOTECNICO.IDDOCUMENTOTECNICOTIPO = DOCUMENTOTECNICOTIPO.IDDOCUMENTOTECNICOTIPO
        AND
            ATENDIMENTO.IDATENDIMENTO = :idatendimento;

	EXEC SQL OPEN consultaDocumento;

	while (true)
	{
		EXEC SQL FETCH consultaDocumento INTO 
                    :idAtendimentoDocumento:i_idAtendimentoDocumento,
                    :idDocumentoTecnico:i_idDocumentoTecnico, 
                    :dsTipoDocumentoProcesso:i_dsTipoDocumentoProcesso,
                    :nrDocumento:i_nrDocumento, 
                    :dtAbertura:i_dtAbertura, 
                    :dtEstimadaFechamento:i_dtEstimadaFechamento, 
                    :dtFechamento:i_dtFechamento, 
                    :dsDocumento:i_dsDocumento, 
                    :dsResposta:i_dsResposta,
                    :idUsuarioAlteracao:i_idUsuarioAlteracao,
                    :dtUltimaAlteracao:i_dtUltimaAlteracao,
                    :idDocumentoTecnicoTipo:i_idDocumentoTecnicoTipo,
                    :ComentarioAbertura:i_ComentarioAbertura,
                    :ComentarioFechamento:i_ComentarioFechamento,
                    :inEstadoTecnico:i_inEstadoTecnico;

		CONVIND(dsTipoDocumentoProcesso, i_dsTipoDocumentoProcesso);
		CONVIND(nrDocumento, i_nrDocumento);
		CONVIND(dtAbertura, i_dtAbertura);
		CONVIND(dtEstimadaFechamento, i_dtEstimadaFechamento);
		CONVIND(dtFechamento, i_dtFechamento);
		CONVIND(dsDocumento, i_dsDocumento);
		CONVIND(dsResposta, i_dsResposta);
		CONVIND(dtUltimaAlteracao, i_dtUltimaAlteracao);
		CONVIND(ComentarioAbertura, i_ComentarioAbertura);
		CONVIND(ComentarioFechamento, i_ComentarioFechamento);

		escreveXMLDocumentoTecnico(
                                    idAtendimento,
                                    idAtendimentoDocumento,
                                    idDocumentoTecnico,
                                    (char *)dsTipoDocumentoProcesso.arr,
                                    (char *)nrDocumento.arr,
                                    (char *)dtAbertura.arr,
                                    (char *)dtEstimadaFechamento.arr,
                                    (char *)dtFechamento.arr,
                                    (char *)dsDocumento.arr,
                                    (char *)dsResposta.arr,
                                    idUsuarioAlteracao,
                                    (char *)dtUltimaAlteracao.arr,
                                    idDocumentoTecnicoTipo,
                                    (char *)ComentarioAbertura.arr,
                                    (char *)ComentarioFechamento.arr,
                                    inEstadoTecnico,
                                    saida
								  );
	}

	EXEC SQL CLOSE consultaDocumento;

	return true;

}

bool proCTodosDocumentosTecnicos(XMLGen* saida)
{

	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		long idAtendimento;
		long idAtendimentoDocumento;
		int idDocumentoTecnico;
		VARCHAR dsTipoDocumentoProcesso[256];
		VARCHAR nrDocumento[256];
		VARCHAR dtAbertura[256];
		VARCHAR dtEstimadaFechamento[256];
		VARCHAR dtFechamento[256];
		VARCHAR dsDocumento[256];
		VARCHAR dsResposta[501];
		int idUsuarioAlteracao;
		VARCHAR dtUltimaAlteracao[256];
		int idDocumentoTecnicoTipo;
		VARCHAR ComentarioAbertura[256];
		VARCHAR ComentarioFechamento[256];
		int inEstadoTecnico;

    EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

/*  @Marcelo Retirar B01
	EXEC SQL DECLARE consultaTodosDocumentos CURSOR FOR 
	SELECT 
			idAtendimento,
			idAtendimentoDocumento, 
			idDocumentoTecnico, 
			dsDocumentoTecnicoTipo, 
			nrDocumento, 
			TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtFechamento,'dd/mm/yyyy hh24:mi'),
			dsDocumento, 
			dsResposta,
         idUsuarioAlteracao,
         dtUltimaAlteracao,
         idDocumentoTecnicoTipo,
         ComentarioAbertura,
         ComentarioFechamento,
         inEstadoTecnico
	FROM 
			Atendimento.AtendimentoDocumentoB01;
*/
	
	EXEC SQL DECLARE consultaTodosDocumentos CURSOR FOR 
        SELECT 
            ATENDIMENTO.IDATENDIMENTO,
            ATENDIMENTODOCUMENTO.IDATENDIMENTODOCUMENTO, 
            DOCUMENTOTECNICO.IDDOCUMENTOTECNICO, 
            DOCUMENTOTECNICOTIPO.DSDOCUMENTOTECNICOTIPO, 
            DOCUMENTOTECNICO.NRDOCUMENTO, 
            TO_CHAR(ATENDIMENTO.DTABERTURA,'DD/MM/YYYY HH24:MI') AS DTABERTURA, 
            TO_CHAR(DOCUMENTOTECNICO.DTESTIMADAFECHAMENTO,'DD/MM/YYYY HH24:MI') AS DTESTIMADAFECHAMENTO, 
            TO_CHAR(DOCUMENTOTECNICO.DTFECHAMENTO,'DD/MM/YYYY HH24:MI') AS DTFECHAMENTO,
            DOCUMENTOTECNICO.DSDOCUMENTO, 
            DOCUMENTOTECNICO.DSRESPOSTA,
            ATENDIMENTODOCUMENTO.IDUSUARIOALTERACAO,
            ATENDIMENTODOCUMENTO.DTULTIMAALTERACAO,
            DOCUMENTOTECNICOTIPO.IDDOCUMENTOTECNICOTIPO,
            DOCUMENTOTECNICO.COMENTARIOABERTURA,
            DOCUMENTOTECNICO.COMENTARIOFECHAMENTO,
            DOCUMENTOTECNICO.INESTADOTECNICO
        FROM 
            ATENDIMENTO.ATENDIMENTO ATENDIMENTO,
            ATENDIMENTO.DOCUMENTOTECNICOTIPO DOCUMENTOTECNICOTIPO,
            ATENDIMENTO.DOCUMENTOTECNICO DOCUMENTOTECNICO,
            ATENDIMENTO.ATENDIMENTODOCUMENTO ATENDIMENTODOCUMENTO
        WHERE 
            ATENDIMENTODOCUMENTO.IDATENDIMENTO = ATENDIMENTO.IDATENDIMENTO
        AND 
            ATENDIMENTODOCUMENTO.IDDOCUMENTOTECNICO = DOCUMENTOTECNICO.IDDOCUMENTOTECNICO
        AND
            DOCUMENTOTECNICO.IDDOCUMENTOTECNICOTIPO = DOCUMENTOTECNICOTIPO.IDDOCUMENTOTECNICOTIPO;

	EXEC SQL OPEN consultaTodosDocumentos;

	while (true)
	{
		EXEC SQL FETCH consultaTodosDocumentos INTO
                                                :idAtendimento,
                                                :idAtendimentoDocumento,
                                                :idDocumentoTecnico, 
                                                :dsTipoDocumentoProcesso,
                                                :nrDocumento, 
                                                :dtAbertura, 
                                                :dtEstimadaFechamento, 
                                                :dtFechamento, 
                                                :dsDocumento, 
                                                :dsResposta,
                                                :idUsuarioAlteracao,
                                                :dtUltimaAlteracao,
                                                :idDocumentoTecnicoTipo,
                                                :ComentarioAbertura,
                                                :ComentarioFechamento,
                                                :inEstadoTecnico;


		CONV(dsTipoDocumentoProcesso);
		CONV(nrDocumento);
		CONV(dtAbertura);
		CONV(dtEstimadaFechamento);
		CONV(dtFechamento);
		CONV(dsDocumento);
		CONV(dsResposta);

		escreveXMLDocumentoTecnico(
                                    idAtendimento,
                                    idAtendimentoDocumento,
                                    idDocumentoTecnico,
                                    (char *)dsTipoDocumentoProcesso.arr,
                                    (char *)nrDocumento.arr,
                                    (char *)dtAbertura.arr,
                                    (char *)dtEstimadaFechamento.arr,
                                    (char *)dtFechamento.arr,
                                    (char *)dsDocumento.arr,
                                    (char *)dsResposta.arr,
                                    idUsuarioAlteracao,
                                    (char *)dtUltimaAlteracao.arr,
                                    idDocumentoTecnicoTipo,
                                    (char *)ComentarioAbertura.arr,
                                    (char *)ComentarioFechamento.arr,
                                    inEstadoTecnico,
                                    saida
								  );
	}

	EXEC SQL CLOSE consultaDocumento;

	return true;

}

void escreveXMLDocumentoTecnico(
                                long idAtendimento,
                                long idAtendimentoDocumento,
                                int  idDocumentoTecnico,
                                char* dsTipoDocumentoProcesso,
                                char* nrDocumento,
                                char* dtAbertura,
                                char* dtEstimadaFechamento,
                                char* dtFechamento,
                                char* dsDocumento,
                                char* dsResposta,
                                int idUsuarioAlteracao,
                                char* dtUltimaAlteracao,
                                int idDocumentoTecnicoTipo,
                                char* ComentarioAbertura,
                                char* ComentarioFechamento,
                                int inEstadoTecnico,
                                XMLGen* saida
                               )
{

        saida->createTag("AtendimentoWorkflowTecnicoDocVO");
            saida->addItem("idAtendimento", idAtendimento);
            saida->addItem("idAtendimentoDocumento", idAtendimentoDocumento);
            saida->addItem("idDocumentoTecnico", idDocumentoTecnico);
            saida->addItem("dsTipoDocumentoProcesso", dsTipoDocumentoProcesso);
            saida->addItem("nrDocumento", nrDocumento);
            saida->addItem("dtAbertura", dtAbertura);
            saida->addItem("dtEstimadaFechamento", dtEstimadaFechamento);
            saida->addItem("dtFechamento", dtFechamento);
            saida->addItem("dsDocumento", dsDocumento);
            saida->addItem("dsResposta", dsResposta);
            saida->addItem("idUsuarioAlteracao",idUsuarioAlteracao);
            saida->addItem("dtUltimaAlteracao",dtUltimaAlteracao);
            saida->addItem("idDocumentoTecnicoTipo",idDocumentoTecnicoTipo);
            saida->addItem("ComentarioAbertura",ComentarioAbertura);
            saida->addItem("ComentarioFechamento",ComentarioFechamento);
            saida->addItem("inEstadoTecnico",inEstadoTecnico);
        saida->closeTag();
}

bool proCSelecaoDocumentosTecnicos(st_DocumentoTecnico* dados, st_vlDocumentoTecnico* status, char * dtInicio , char * dtFinal, char *idAtendAssoc, XMLGen * saida )
{
   struct sqlca sqlca;
   
   char dsDocTecn[256];
   int  idDocumento;
   

   idDocumento = 0;
      
   EXEC SQL BEGIN DECLARE SECTION;
      
      int idDocumentoTecnico;
      VARCHAR nrDocumento[256];
      VARCHAR dtAbertura[256];
      VARCHAR dtEstimadaFechamento[256];
      VARCHAR dtFechamento[256];
      VARCHAR dsDocumento[256];
      VARCHAR dsResposta[501];
      int idDocumentoTecnicoTipo;
      VARCHAR dsDocumentoTecnicoTipo[256];
      int inEstadoTecnico;
      int qtdProcessosVinculados;
      long idAtdAssoc = atol(idAtendAssoc);
      
      
      short i_nrDocumento;
      short i_dtAbertura;
      short i_dtFechamento;
      short i_dtEstimadaFechamento;
      short i_dsDocumento;
      short i_dsResposta;
      short i_idDocumentoTecnicoTipo;
      short i_inEstadoTecnico;

    char query[2049];

    EXEC SQL END DECLARE SECTION;

    qtdProcessosVinculados = 0;

    sprintf(query,"SELECT a.idDocumentoTecnico, a.nrDocumento, "); 
    sprintf(query,"%s TO_CHAR(a.dtAbertura,'dd/mm/yyyy hh24:mi'), ", query); 
    sprintf(query,"%s TO_CHAR(a.dtEstimadaFechamento,'dd/mm/yyyy hh24:mi'), ", query); 
    sprintf(query,"%s TO_CHAR(a.dtFechamento,'dd/mm/yyyy hh24:mi'), ", query); 
    sprintf(query,"%s a.dsDocumento, a.dsResposta, ", query);
    if ( !idAtdAssoc )
        sprintf(query,"%s a.idDocumentoTecnicoTipo, a.inEstadoTecnico FROM Atendimento.DocumentoTecnico a ", query); 	
    else
        sprintf(query,"%s a.idDocumentoTecnicoTipo, a.inEstadoTecnico FROM Atendimento.DocumentoTecnico a, Atendimento.AtendimentoDocumento b ", query); 

    bool separa = false;

    if (status->nrDocumento != -1)
        montaWhere("nrDocumento", dados->nrDocumento, TIPO_CHAR);

    if (status->dtAbertura != -1) 
        montaWhere("dtAbertura", dados->dtAbertura, TIPO_DATA);

    if (status->dsDocumento != -1)
        montaWhere("dsDocumento", dados->dsDocumento, TIPO_CHAR);

    if (status->dsResposta != -1)
        montaWhere("dsResposta", dados->dsResposta, TIPO_CHAR);

    if (status->idDocumentoTecnicoTipo != -1)
        montaWhere("idDocumentoTecnicoTipo", dados->idDocumentoTecnicoTipo, TIPO_INT);

    if (status->ComentarioAbertura != -1)
        montaWhere("ComentarioAbertura", dados->ComentarioAbertura, TIPO_CHAR);

    if (status->inEstadoTecnico != -1)
        montaWhere("inEstadoTecnico", dados->inEstadoTecnico, TIPO_INT);

    if ( strlen(dtInicio) > 0 && !separa )
    {
        sprintf( query,"%sWhere dtAbertura >= TO_DATE('%s','DD/MM/YYYY HH24:MI') ",query,dtInicio );
        separa = true;
    }
    if ( strlen(dtInicio) > 0 && separa )
        sprintf( query,"%sAnd dtAbertura >= TO_DATE('%s','DD/MM/YYYY HH24:MI') ",query,dtInicio );

    if ( strlen(dtFinal) > 0 && !separa )
    {
        sprintf( query,"%sWhere dtAbertura <= TO_DATE('%s','DD/MM/YYYY HH24:MI') ",query,dtFinal );
        separa = true;
    }
    if ( strlen(dtFinal) > 0 && separa )
        sprintf( query,"%sAnd dtAbertura <= TO_DATE('%s','DD/MM/YYYY HH24:MI') ",query,dtFinal );

    if ( idAtdAssoc > 0 && separa )
        sprintf( query,"%sAnd a.idDocumentoTecnico = b.idDocumentoTecnico and b.idAtendimento = %ld",query,idAtdAssoc );

    if ( idAtdAssoc > 0 && !separa )
    {
        sprintf( query,"%sWhere a.idDocumentoTecnico = b.idDocumentoTecnico and b.idAtendimento = %ld",query,idAtdAssoc );
        separa = true;
    }
	   
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFDocumentoTecnico(&sqlca);

    EXEC SQL PREPARE selecaoDocumentoTecnico FROM :query;
    EXEC SQL DECLARE selecao CURSOR FOR selecaoDocumentoTecnico;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL OPEN selecao;

    saida->createTag("AtendimentoWorkflowTecnicoVO");
    saida->addProp( "xmlns","workflow.fo.vivo.com.br/vo" );
    saida->addProp( "xmlns:ns2","admsistemas.fo.vivo.com.br/vo" );
    while (true)
    {
        EXEC SQL FETCH selecao INTO :idDocumentoTecnico, :nrDocumento:i_nrDocumento, 
                        :dtAbertura:i_dtAbertura, :dtEstimadaFechamento:i_dtEstimadaFechamento, 
                        :dtFechamento:i_dtFechamento, :dsDocumento:i_dsDocumento, :dsResposta:i_dsResposta, 
                        :idDocumentoTecnicoTipo:i_idDocumentoTecnicoTipo, :inEstadoTecnico:i_inEstadoTecnico;

         
        EXEC SQL SELECT COUNT (idAtendimento) INTO :qtdProcessosVinculados FROM Atendimento.atendimentoDocumento WHERE idDocumentoTecnico = :idDocumentoTecnico;


        idDocumento = idDocumentoTecnicoTipo;
        dsDocTecn[0] = 0x0;
        proCPegaDocumentoTecnico( dsDocTecn, idDocumento );
 
        CONVIND(nrDocumento,i_nrDocumento);
        CONVIND(dtAbertura,i_dtAbertura);
        CONVIND(dtFechamento,i_dtFechamento);
        CONVIND(dtEstimadaFechamento,i_dtEstimadaFechamento);
        CONVIND(dsDocumento,i_dsDocumento);
        CONVIND(dsResposta,i_dsResposta);
        CONV(nrDocumento);
        CONV(dsDocumento);
        CONV(dsResposta);

        dsDocumentoTecnicoTipo.arr[dsDocumentoTecnicoTipo.len] = 0x0;
      
        saida->createTag("AtendimentoWorkflowTecnicoDocVO");
            saida->addItem("idDocumentoTecnico", idDocumentoTecnico);
            saida->addItem("nrDocumento", (char *)nrDocumento.arr);
            saida->addItem("dtAbertura", (char *)dtAbertura.arr);
            if ( dtFechamento.len > 0 )
               saida->addItem("dtFechamento", (char *)dtFechamento.arr);
            if ( dtEstimadaFechamento.len > 0 )
               saida->addItem("dtEstimadaFechamento", (char *)dtEstimadaFechamento.arr);
            dsDocumento.arr[dsDocumento.len] = 0x0;
            saida->addItem("dsDocumento", (char *)dsDocumento.arr);
            dsResposta.arr[dsResposta.len] = 0x0;
            saida->addItem("dsResposta", (char *)dsResposta.arr);
            //saida->addItem("dsTipoDocumentoProcesso", (char *)dsDocumentoTecnicoTipo.arr);
            saida->addItem("dsTipoDocumentoProcesso", dsDocTecn );
            
            if ( inEstadoTecnico == 0 )
               saida->addItem("dsEstadoDocumentoProcesso", "Aberto" );
            else
               saida->addItem("dsEstadoDocumentoProcesso", "Fechado" );
   
            saida->addItem("qtdProcessosVinculados", qtdProcessosVinculados);
        saida->closeTag();
    }
    saida->closeTag();

    EXEC SQL CLOSE selecao;

    return true;

}



void sql_error_WFDocumentoTecnico(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
