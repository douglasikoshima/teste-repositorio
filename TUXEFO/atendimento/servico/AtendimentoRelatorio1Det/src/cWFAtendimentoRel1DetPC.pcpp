/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @remark  Relatório TOTAL POR GRUPO DE DESTINO BKO - DETALHE
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.2.1.124.4.38.1 $
 * @CVS     $Author: a5110705 $ - $Date: 2016/11/08 13:39:17 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRel1Det.h"

//==============================================================================
// Defines
#define TIPOPRAZO ('V' == toupper(dados->prazo[0]) ? (string)"INTERNO" : (string)"ANATEL")

//==============================================================================
// Prototipos
void WFAtdRelObterDominiosAlfanumericos(string &valorDest,DOMNode *entrada,char *dnode,const char *pTagName);
void montarCabecalhoCSV(string &nmColuna,st_AtendimentoRel *dados);
int montarListaNomeOperadora(string &listaIdAtendimentos,int rowsToFetch);
// int montarListaUFRegional(string &listaIdAtendimentos,int rowsToFetch);
int montarListaDtEntradaFila(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNmUsuAbertura(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNmUsuAtual(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNrTelContato(string &listaIdAtendimentos,int rowsToFetch);
int montarListaDtDevolucao(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNmPessoa(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNrDocumento(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNmResponsavel(string &listaIdAtendimentos,int rowsToFetch);
int montarListaNrLinha(string &listaIdAtendimentos,int rowsToFetch);

//==============================================================================
// Tipos usados pelo ProC
EXEC SQL BEGIN DECLARE SECTION;

    #define MAX_ROWS_TO_FETCH_REL 300

    struct sqlca sqlca;
    const char *pOraStatement;
    
    int varOraDsValorParametro;
    short statOraDsValorParametro;


    struct VARORARELATD
    {
        VARCHAR idAtendimento[39];
        VARCHAR idAtendimentoProtocolo[39];
        VARCHAR dtAbertura[20];
        VARCHAR dtPrazoFinal[20];
        VARCHAR nmGrupoAbertura[100];
        VARCHAR nmGrupoTratamento[100];
        VARCHAR dsTipoCarteira[60];
        VARCHAR dsSegmentacao[60];
        VARCHAR dsTipoPessoa[30];
        VARCHAR dsEstado[50];
        VARCHAR dsSubEstado[50];
        VARCHAR nmPath[4000];
        VARCHAR horasDecorridas[20];
        //VARCHAR nmLoginUsuarioAtual[100];
    } varLstOraAtd[MAX_ROWS_TO_FETCH_REL];

    struct STATORARELATD
    {
        short idAtendimento;
        short idAtendimentoProtocolo;
        short dtAbertura;
        short dtPrazoFinal;
        short nmGrupoAbertura;
        short nmGrupoTratamento;
        short dsTipoCarteira;
        short dsSegmentacao;
        short dsTipoPessoa;
        short dsEstado;
        short dsSubEstado;
        short nmPath;
        short horasDecorridas;
        //short nmLoginUsuarioAtual;
    } statLstOraAtd[MAX_ROWS_TO_FETCH_REL];

    // Lista de nomes de operadoras
    struct VARORANMOPER
    {
        VARCHAR idAtendimento[39];
        VARCHAR nmOperadora[60];
        VARCHAR ufRegional[50];
    } varLstOraNmOperadora[MAX_ROWS_TO_FETCH_REL];

    struct STATORANMOPER
    {
        short idAtendimento;
        short nmOperadora;
        short ufRegional;
    } statLstOraNmOperadora[MAX_ROWS_TO_FETCH_REL];

    // Lista de datas de entrada na fila
    struct VARORADTENTRADAFILA
    {
        VARCHAR idAtendimento[39];
        VARCHAR dtEntradaFila[24];
    } varLstOraDtEntradaFila[MAX_ROWS_TO_FETCH_REL];

    struct STATORADTENTRADAFILA
    {
        short idAtendimento;
        short dtEntradaFila;
    } statLstOraDtEntradaFila[MAX_ROWS_TO_FETCH_REL];

    // Lista de nomes de usuários de abertura
    struct VARORANMUSUABERTURA
    {
        VARCHAR idAtendimento[39];
        VARCHAR nmUsuAbertura[60];
    } varLstOraNmUsuAbertura[MAX_ROWS_TO_FETCH_REL];

    struct STATORANMUSUABERTURA
    {
        short idAtendimento;
        short nmUsuAbertura;
    } statLstOraNmUsuAbertura[MAX_ROWS_TO_FETCH_REL]; 

    // Lista de nomes de usuários atualmente com o processo
    struct VARORANMUSUATUAL
    {
        VARCHAR idAtendimento[39];
        VARCHAR nmUsuAtual[60];
    } varLstOraNmUsuAtual[MAX_ROWS_TO_FETCH_REL];

    struct STATORANMUSUATUAL
    {
        short idAtendimento;
        short nmUsuAtual;
    } statLstOraNmUsuAtual[MAX_ROWS_TO_FETCH_REL];

    // Lista de telefones de contato
    struct VARORANRTELCONTATO
    {
        VARCHAR idAtendimento[39];
        VARCHAR nrTelContato[18]; //(11) 9999-9999
    } varLstOraNrTelContato[MAX_ROWS_TO_FETCH_REL];

    struct STATORANRTELCONTATO
    {
        short idAtendimento;
        short nrTelContato;
    } statLstOraNrTelContato[MAX_ROWS_TO_FETCH_REL];

    // Lista de datas de devolução
    struct VARORADTDEVOLUCAO
    {
        VARCHAR idAtendimento[39];
        VARCHAR dtDevolucao[20];
    } varLstOraDtDevolucao[MAX_ROWS_TO_FETCH_REL];

    struct STATORADTDEVOLUCAO
    {
        short idAtendimento;
        short dtDevolucao;
    } statLstOraDtDevolucao[MAX_ROWS_TO_FETCH_REL];

    // Lista de nomes de pessoas dos processos
    struct VARORANMPESSOA
    {
        VARCHAR idAtendimento[39];
        VARCHAR nmPessoa[20];
    } varLstOraNmPessoa[MAX_ROWS_TO_FETCH_REL];

    struct STATORANMPESSOA
    {
        short idAtendimento;
        short nmPessoa;
    } statLstOraNmPessoa[MAX_ROWS_TO_FETCH_REL];

    // Lista de documentos das pessoas dos processos
    struct VARORANRDOCUMENTO
    {
        VARCHAR idAtendimento[39];
        VARCHAR nrDocumento[30];
    } varLstOraNrDocumento[MAX_ROWS_TO_FETCH_REL];

    struct STATORANRDOCUMENTO
    {
        short idAtendimento;
        short nrDocumento;
    } statLstOraNrDocumento[MAX_ROWS_TO_FETCH_REL];

    // Lista dos responsáveis pelo processo
    struct VARORANMRESPONSAVEL
    {
        VARCHAR idAtendimento[39];
        VARCHAR nmResponsavel[256];
    } varLstOraNmResponsavel[MAX_ROWS_TO_FETCH_REL];

    struct STATORANMRESPONSAVEL
    {
        short idAtendimento;
        short nmResponsavel;
    } statLstOraNmResponsavel[MAX_ROWS_TO_FETCH_REL];

	// Demanda 20640442 - start - 29/01/2014
    // Lista de numero de linha
    struct VARORANRLINHA
    {
        VARCHAR idAtendimento[39];
		VARCHAR nrLinha[18];
		//VARCHAR cdAreaRegistro[5];
		//VARCHAR nrTelefone[18];
        //VARCHAR cdAreaRegistroOrigem[5];
		//VARCHAR nrTelefoneOrigem[18];
    } varLstOraNrLinha[MAX_ROWS_TO_FETCH_REL];

    struct STATORANRLINHA
    {
        short idAtendimento;
		short nrLinha;
		//short cdAreaRegistro;
		//short nrTelefone;
        //short cdAreaRegistroOrigem;
		//short nrTelefoneOrigem;
    } statLstOraNrLinha[MAX_ROWS_TO_FETCH_REL];
	// Demanda 20640442 - end - 29/01/2014

EXEC SQL END DECLARE SECTION;

//==============================================================================
// Implementação
bool proCExecutarRelatorio1Det( st_AtendimentoRel *dados
                              , st_vlAtendimentoRel *status
                              , XMLGen *saida
                              , DOMNode *dnode )
{
    ULOG_START("proCExecutarRelatorio1Det()");

    string queryDin;
    string nmColuna;
    string saidaDet;
    string idGrupo;
    string idGrupoOperadora;
    string idRegional;
    string listaIdFases;
    string idSegmentacao;
    string idTipoCarteira;
    string listaIdAtendimento;

    string nmGrupo;
    string nmGrupoOperadora;
    string UF;
    string dsFase;
    string dsTipoCarteira;
    string dsSegmentacao;

    if ( !dados )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE("%s",erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    EXEC SQL BEGIN DECLARE SECTION;
        char linIni[32],linFin[32];

        VARCHAR varOraIdGenerico[39];
        short statOraIdGenerico;

        int rows_to_fetch = dados->qtdLinhasBloco+1; // numero de linhas para cada fetch
        int rows_this_time=0; // numero de linhas carregadas no fetch

    EXEC SQL END DECLARE SECTION;

    if (rows_to_fetch > MAX_ROWS_TO_FETCH_REL) { rows_to_fetch=MAX_ROWS_TO_FETCH_REL; }

    // Se o relatório consolidado possui ID's de filtragem então os mesmos são passados para o detalhe
    WFAtdRelObterDominiosAlfanumericos(idGrupo         ,dnode,"WFGrupoVO"                    ,"idGrupo");
    WFAtdRelObterDominiosAlfanumericos(idGrupoOperadora,dnode,"WFRelatoriosFiltroOperadoraVO","idOperadora");
    WFAtdRelObterDominiosAlfanumericos(idRegional      ,dnode,"WFRelatoriosFiltroRegionalVO" ,"idRegional");
    WFAtdRelObterDominiosAlfanumericos(listaIdFases    ,dnode,"WFEstadoVO"                   ,"idEstado");
    WFAtdRelObterDominiosAlfanumericos(idSegmentacao   ,dnode,"WFRelatoriosFiltroSegmentoVO" ,"idSegmento");
    WFAtdRelObterDominiosAlfanumericos(idTipoCarteira  ,dnode,"WFRelatoriosFiltroCarteiraVO" ,"idCarteira");

    // Nomes dos filtros no caso de não terem sido enviados os ID's
    WFAtdRelObterDominiosAlfanumericos(nmGrupo         ,dnode,"FiltroDetalhe","nmGrupo");
    WFAtdRelObterDominiosAlfanumericos(nmGrupoOperadora,dnode,"FiltroDetalhe","nmGrupoOperadora");
    WFAtdRelObterDominiosAlfanumericos(UF              ,dnode,"FiltroDetalhe","UF");
    WFAtdRelObterDominiosAlfanumericos(dsFase          ,dnode,"FiltroDetalhe","dsFase");
    WFAtdRelObterDominiosAlfanumericos(dsTipoCarteira  ,dnode,"FiltroDetalhe","dsTipoCarteira");
    WFAtdRelObterDominiosAlfanumericos(dsSegmentacao   ,dnode,"FiltroDetalhe","dsSegmentacao");

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    // Obtém os IDs de filtros que estiverem faltando
    if ( idGrupo.size() == 0 )
    {
        if ( pOraStatement = nmGrupo.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    IDGRUPO 
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    ACESSO.GRUPO
                WHERE
                    NMGRUPO = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                idGrupo = (char*)varOraIdGenerico.arr;
                ULOG("idGrupo=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idGrupo não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    if ( idGrupoOperadora.size() == 0 )
    {
        if ( pOraStatement = nmGrupoOperadora.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    IDGRUPOOPERADORA
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    CUSTOMER.GRUPOOPERADORA
                WHERE
                    NMGRUPOOPERADORA = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                idGrupoOperadora = (char*)varOraIdGenerico.arr;
                ULOG("idGrupoOperadora=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idGrupoOperadora não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    if ( idRegional.size() == 0 )
    {
        if ( pOraStatement = UF.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    UFOPERADORA.IDUFOPERADORA
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    CUSTOMER.UFOPERADORA UFOPERADORA,
                    APOIO.UF UF
                WHERE
                    UFOPERADORA.IDUF=UF.IDUF
                AND UF.NMUF = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                idRegional = (char*)varOraIdGenerico.arr;
                ULOG("idRegional(UF)=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idRegional não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    if ( listaIdFases.size() == 0 )
    {
        if ( pOraStatement = dsFase.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    IDFASE
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    WORKFLOW.FASE
                WHERE
                    DSFASE = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                listaIdFases = (char*)varOraIdGenerico.arr;
                ULOG("idFase=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idFase não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    if ( idTipoCarteira.size() == 0 )
    {
        if ( pOraStatement = dsTipoCarteira.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    IDTIPOCARTEIRA
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    APOIO.TIPOCARTEIRA 
                WHERE
                    DSTIPOCARTEIRA = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                idTipoCarteira = (char*)varOraIdGenerico.arr;
                ULOG("idTipoCarteira=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idTipoCarteira não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    if ( idSegmentacao.size() == 0 )
    {
        if ( pOraStatement = dsSegmentacao.c_str(),*pOraStatement )
        {
            statOraIdGenerico = -1;

            EXEC SQL
                SELECT
                    IDSEGMENTACAO
                INTO
                    :varOraIdGenerico:statOraIdGenerico
                FROM
                    APOIO.SEGMENTACAO
                WHERE
                    DSSEGMENTACAO = :pOraStatement;

            if ( 0==sqlca.sqlcode )
            {
                CONVIND(varOraIdGenerico,statOraIdGenerico);
                idSegmentacao = (char*)varOraIdGenerico.arr;
                ULOG("idSegmentacao=%s",(char*)varOraIdGenerico.arr);
            }
            else
            {
                ULOG("idSegmentacao não encontrado para valor=%s",pOraStatement);
            }
        }
    }

    EXEC SQL
        SELECT
            DSVALORPARAMETRO
        INTO
            :varOraDsValorParametro:statOraDsValorParametro
        FROM
            APOIO.PARAMETRO
        WHERE
            CDPARAMETRO = 'REL_TGDBKO_TB';

    dados->qtdLinhasBloco = sqlca.sqlcode ? 20:varOraDsValorParametro;

    ULOG("varOraDsValorParametro=%d",varOraDsValorParametro);
    ULOG("        qtdLinhasBloco=%d",dados->qtdLinhasBloco);

    // 1a vez? então monta cabeçalho do CSV
    if ( dados->bloco == 0 ) { montarCabecalhoCSV(nmColuna,dados); }

    // Linhas inicial e final
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //"+1" aqui é necessário para controle de fim de relatório

    // Monta a query da pesquisa dos processos
    queryDin =
       "SELECT "
           "NIVELB.IDATENDIMENTO,"
           "NIVELB.IDATENDIMENTOPROTOCOLO,"
           "TO_CHAR(NIVELB.DTABERTURA,'DD/MM/YYYY HH24:MI') AS DTABERTURA,"
           "TO_CHAR(NIVELB.DTPRAZOFINAL,'DD/MM/YYYY HH24:MI') AS DTPRAZOFINAL,"
           "NIVELB.NMGRUPO_ABERTURA,"
           "NIVELB.NMGRUPO_TRATAMENTO,"
           "NIVELB.DSTIPOCARTEIRA,"
           "NIVELB.DSSEGMENTACAO,"
           "NIVELB.DSTIPOPESSOA,"
           "NIVELB.DSESTADO,"
           "NIVELB.DSSUBESTADO,"
           "NIVELB.NMPATH,"
           "RTRIM (LTRIM (TO_CHAR (TRUNC (DECODE (SIGN (((SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ), -1, 0, (  (  SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ) ), '9999909' ) ) ) || ':' || RTRIM (LTRIM (TO_CHAR (ROUND (  (  (  DECODE (SIGN ((  (  SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ), -1, 0, (  (  SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ) - TRUNC (DECODE (SIGN ((  (  SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ), -1, 0, (  (  SYSDATE - (NIVELB.DTABERTURA ) ) * 24 ) ) ) ) * 100 ) * .6, 0 ), '09' ) ) ) AS HORASDECORRIDAS"
           //(sem uso) "NIVELB.NMLOGINUSUARIOATUAL"
       " FROM"
       "("
           "SELECT "
               "NIVELA.IDATENDIMENTO,"
               "NIVELA.IDATENDIMENTOPROTOCOLO,"
               "NIVELA.DTABERTURA,"
               "NIVELA.DTPRAZOFINAL,"
               "NIVELA.NMGRUPO_ABERTURA,"
               "NIVELA.NMGRUPO_TRATAMENTO,"
               "NIVELA.DSTIPOCARTEIRA,"
               "NIVELA.DSSEGMENTACAO,"
               "NIVELA.DSTIPOPESSOA,"
               "NIVELA.DSESTADO,"
               "NIVELA.DSSUBESTADO,"
               "NIVELA.NMPATH,"
               //(sem uso) "NIVELA.NMLOGINUSUARIOATUAL,"
               "ROWNUM AS NLIN"
           " FROM "
               "("
                   "SELECT ATENDIMENTOPRIORIZACAO.IDATENDIMENTO,"
                          "ATENDIMENTOPRIORIZACAO.IDATENDIMENTOPROTOCOLO,"
                          "ATENDIMENTOPRIORIZACAO.DTABERTURA,"
                          "ATENDIMENTOPRIORIZACAO.DTPRAZOFINAL"+TIPOPRAZO+" AS DTPRAZOFINAL,"
                          "GRUPOABER.NMGRUPO AS NMGRUPO_ABERTURA,"
                          "GRUPO.NMGRUPO AS NMGRUPO_TRATAMENTO,"
                          "TIPOCARTEIRA.DSTIPOCARTEIRA,"
                          "SEGMENTACAO.DSSEGMENTACAO,"
                          "TIPOPESSOA.DSTIPOPESSOA,"
                          "ESTADO.DSESTADO,"
                          "SUBESTADO.DSSUBESTADO,"
                          "CONTATO.NMPATH"
                          //(sem uso)"USUARIO.NMLOGINUSUARIO AS NMLOGINUSUARIOATUAL"
                  " FROM ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO"
                       ",ACESSO.GRUPO GRUPO"
                       ",ACESSO.GRUPO GRUPOABER"
                       ",APOIO.TIPOCARTEIRA TIPOCARTEIRA"
                       ",APOIO.SEGMENTACAO SEGMENTACAO"
                       ",APOIO.TIPOPESSOA TIPOPESSOA"
                       ",WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRUPAMENTOESTADOTPPROC"
                       ",WORKFLOW.AGRUPAMENTOESTADO AGRUPAMENTOESTADO"
                       ",WORKFLOW.ESTADO ESTADO"
                       ",WORKFLOW.SUBESTADO SUBESTADO"
                       ",CONTATOADM.CONTATO CONTATO";
                       //",ACESSO.USUARIO USUARIO";

    if ( idGrupoOperadora.size() )
    {
        queryDin +=
                       ",CUSTOMER.OPERADORA OPERADORA"
                       ",CUSTOMER.UFOPERADORA UFOPERADORA ";
    }

    if ( idGrupo.size() > 0 )
    {
        queryDin +=
                 " WHERE ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = "+idGrupo+
                   " AND ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = GRUPO.IDGRUPO";
    }
    else
    {
        queryDin +=
                 " WHERE ATENDIMENTOPRIORIZACAO.IDGRUPOATUAL = GRUPO.IDGRUPO";
    }

    queryDin +=
                   " AND ATENDIMENTOPRIORIZACAO.IDGRUPOABERTURA = GRUPOABER.IDGRUPO"
                   " AND ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA (+)"
                   " AND ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO (+)"
                   " AND ATENDIMENTOPRIORIZACAO.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA (+)"
                   " AND ATENDIMENTOPRIORIZACAO.IDAGRUPAMENTOESTADOTPPROC = AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADOTPPROC"
                   " AND AGRUPAMENTOESTADOTPPROC.IDAGRUPAMENTOESTADO = AGRUPAMENTOESTADO.IDAGRUPAMENTOESTADO"
                   " AND AGRUPAMENTOESTADO.IDESTADO = ESTADO.IDESTADO"
                   " AND AGRUPAMENTOESTADO.IDSUBESTADO = SUBESTADO.IDSUBESTADO"
                   " AND ATENDIMENTOPRIORIZACAO.IDCONTATO = CONTATO.IDCONTATO";
                   //" AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUARIO.IDPESSOAUSUARIO (+)";

    if ( idGrupoOperadora.size() )
    {
        queryDin +=
            " AND ATENDIMENTOPRIORIZACAO.IDUFOPERADORA=UFOPERADORA.IDUFOPERADORA"
            " AND UFOPERADORA.IDPESSOADEPARAOPERADORA=OPERADORA.IDPESSOADEPARAOPERADORA"
            " AND OPERADORA.IDGRUPOOPERADORA="+idGrupoOperadora;
    }

    if ( idRegional.size() )
    {
        queryDin +=
            " AND ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = "+idRegional;
    }

    if ( listaIdFases.size()>0 )
    {
        queryDin +=
            " AND ATENDIMENTOPRIORIZACAO.IDFASE IN ("+listaIdFases+")";
    }

    if ( idSegmentacao.size()>0 )
    {
        queryDin +=
            " AND ATENDIMENTOPRIORIZACAO.IDSEGMENTACAO = "+idSegmentacao;
    }

    if ( idTipoCarteira.size()>0 )
    {
        queryDin +=
            " AND ATENDIMENTOPRIORIZACAO.IDTIPOCARTEIRA = "+idTipoCarteira;
    }

    queryDin += // "Danger Will Robinson": Se for alterar este order by precisará mudar a lógica de merge abaixo.
                   " ORDER BY ATENDIMENTOPRIORIZACAO.IDATENDIMENTO"
               ") NIVELA"
       ") NIVELB "
       "WHERE "
           "NIVELB.NLIN >="+(string)linIni+" AND NIVELB.NLIN <="+(string)linFin;

    pOraStatement = (char*)queryDin.c_str();
    ULOG("%s",pOraStatement);

    EXEC SQL PREPARE LoadProcessosGrupo FROM :pOraStatement;
    EXEC SQL DECLARE curLoadProcessosGrupo CURSOR FOR LoadProcessosGrupo;

    EXEC SQL OPEN curLoadProcessosGrupo;

        EXEC SQL FOR :rows_to_fetch
            FETCH curLoadProcessosGrupo INTO :varLstOraAtd:statLstOraAtd;

        rows_this_time = sqlca.sqlerrd[2];

    bool isFim = sqlca.sqlcode ? true:false;

    EXEC SQL CLOSE curLoadProcessosGrupo;

    int maxIt = isFim ? rows_this_time:rows_this_time-1;
    ULOG("rows_this_time=%d",rows_this_time);
    ULOG("         maxIt=%d",maxIt);

    int it;
    for (it=0;it<maxIt;it++)
    {
        CONVIND(varLstOraAtd[it].idAtendimento,statLstOraAtd[it].idAtendimento);
        CONVIND(varLstOraAtd[it].idAtendimentoProtocolo,statLstOraAtd[it].idAtendimentoProtocolo);
        CONVIND(varLstOraAtd[it].dtAbertura,statLstOraAtd[it].dtAbertura);
        CONVIND(varLstOraAtd[it].dtPrazoFinal,statLstOraAtd[it].dtPrazoFinal);
        CONVIND(varLstOraAtd[it].nmGrupoAbertura,statLstOraAtd[it].nmGrupoAbertura);
        CONVIND(varLstOraAtd[it].nmGrupoTratamento,statLstOraAtd[it].nmGrupoTratamento);
        CONVIND(varLstOraAtd[it].dsTipoCarteira,statLstOraAtd[it].dsTipoCarteira);
        CONVIND(varLstOraAtd[it].dsSegmentacao,statLstOraAtd[it].dsSegmentacao);
        CONVIND(varLstOraAtd[it].dsTipoPessoa,statLstOraAtd[it].dsTipoPessoa);
        CONVIND(varLstOraAtd[it].dsEstado,statLstOraAtd[it].dsEstado);
        CONVIND(varLstOraAtd[it].dsSubEstado,statLstOraAtd[it].dsSubEstado);
        CONVIND(varLstOraAtd[it].nmPath,statLstOraAtd[it].nmPath);
        CONVIND(varLstOraAtd[it].horasDecorridas,statLstOraAtd[it].horasDecorridas);
        //CONVIND(varLstOraAtd[it].nmLoginUsuarioAtual,statLstOraAtd[it].nmLoginUsuarioAtual);

        if ( listaIdAtendimento.size()>0 ) { listaIdAtendimento+=","; }
        listaIdAtendimento+=(char*)varLstOraAtd[it].idAtendimento.arr;
    }

    int qtRowsNomeOperadora = 0;
    int qtRowsUFRegional = 0;
    int qtRowsDtEntradaFila = 0;
    int qtRowsNmUsuAbertura = 0;
    int qtRowsNmUsuAtual = 0;
    int qtRowsNrTelContato = 0;
    int qtRowsDtDevolucao = 0;
    int qtRowsNmPessoa = 0;
    int qtRowsNrDocumento = 0;
    int qtRowsNmResponsavel = 0;
	int qtRowsNrLinha = 0; // Demanda 20640442 - 29/01/2014

    ULOG("lista->%s",(char*)listaIdAtendimento.c_str());

    if ( rows_this_time > 0 )
    {
        // Carrega as listas contendo outras colunas de retorno
        qtRowsNomeOperadora = montarListaNomeOperadora(listaIdAtendimento,rows_to_fetch);
        // qtRowsUFRegional = montarListaUFRegional(listaIdAtendimento,rows_to_fetch);
        qtRowsDtEntradaFila = montarListaDtEntradaFila(listaIdAtendimento,rows_to_fetch);
        qtRowsNmUsuAbertura = montarListaNmUsuAbertura(listaIdAtendimento,rows_to_fetch);
        qtRowsNmUsuAtual = montarListaNmUsuAtual(listaIdAtendimento,rows_to_fetch);
        qtRowsNrTelContato = montarListaNrTelContato(listaIdAtendimento,rows_to_fetch);
        qtRowsDtDevolucao = montarListaDtDevolucao(listaIdAtendimento,rows_to_fetch);
        qtRowsNmPessoa = montarListaNmPessoa(listaIdAtendimento,rows_to_fetch);
        qtRowsNrDocumento = montarListaNrDocumento(listaIdAtendimento,rows_to_fetch);
        qtRowsNmResponsavel = montarListaNmResponsavel(listaIdAtendimento,rows_to_fetch);
		qtRowsNrLinha = montarListaNrLinha(listaIdAtendimento,rows_to_fetch); // Demanda 20640442 - 29/01/2014
    }

    saida->createTag("WFRelatorioDinamicoVO");
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");

    if ( dados->bloco == 0 ) { saidaDet = nmColuna ; }

    // executa merge dos dados de todas as queries para gerar a tag no padrão csv de saída
    int itRowsNmOperRegional,itRowsNmOperRegionalAnt=0;
    // int itRowsUFRegional,itRowsUFRegionalAnt=0;
    int itRowsDtEntradaFila,itRowsDtEntradaFilaAnt=0;
    int itRowsNmUsuAbertura,itRowsNmUsuAberturaAnt=0;
    int itRowsNrTelContato,itRowsNrTelContatoAnt=0;
    int itRowsNmUsuAtual,itRowsNmUsuAtualAnt=0;
    int itRowsDtDevolucao,itRowsDtDevolucaoAnt=0;
    int itRowsNmPessoa,itRowsNmPessoaAnt=0;
    int itRowsNrDocumento,itRowsNrDocumentoAnt=0;
    int itRowsNmResponsavel,itRowsNmResponsavelAnt=0;
	int itRowsNrLinha,itRowsNrLinhaAnt=0;  // Demanda 20640442 - 29/01/2014

    for (it=0;it<maxIt;it++)
    {
        if (saidaDet.length() ) { saidaDet += "\n"; }

        // nmOperadora + ufRegional
        for (itRowsNmOperRegional=itRowsNmOperRegionalAnt;itRowsNmOperRegional<qtRowsNomeOperadora;itRowsNmOperRegional++)
        {
            if ( !strcmp((char*)varLstOraNmOperadora[itRowsNmOperRegional].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNmOperadora[itRowsNmOperRegional].nmOperadora.arr)+CSV_SEPARADOR+
                           (string)(char*)(varLstOraNmOperadora[itRowsNmOperRegional].ufRegional.arr);
                itRowsNmOperRegionalAnt = itRowsNmOperRegional+1;
                break;
            }
        }

        // // ufRegional
        // for (itRowsUFRegional=itRowsUFRegionalAnt;itRowsUFRegional<qtRowsUFRegional;itRowsUFRegional++)
        // {
        //     if ( !strcmp((char*)varLstOraUFRegional[itRowsUFRegional].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
        //     {
        //         saidaDet +=(string)(char*)(varLstOraUFRegional[itRowsUFRegional].ufRegional.arr)+CSV_SEPARADOR;
        //         itRowsUFRegionalAnt = itRowsUFRegional+1;
        //         break;
        //     }
        // }

        saidaDet +=CSV_SEPARADOR
                 +(string)(char*)(varLstOraAtd[it].idAtendimentoProtocolo.arr)+CSV_SEPARADOR // Número do Protocolo
                 +(string)(char*)(varLstOraAtd[it].idAtendimento.arr)+CSV_SEPARADOR // Número do Processo
                 +(string)(char*)(varLstOraAtd[it].dtAbertura.arr)+CSV_SEPARADOR; // Data de Abertura

        // Data de Entrada na Fila
        for (itRowsDtEntradaFila=itRowsDtEntradaFilaAnt;itRowsDtEntradaFila<qtRowsDtEntradaFila;itRowsDtEntradaFila++)
        {
            if ( !strcmp((char*)varLstOraDtEntradaFila[itRowsDtEntradaFila].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraDtEntradaFila[itRowsDtEntradaFila].dtEntradaFila.arr);
                itRowsDtEntradaFilaAnt = itRowsDtEntradaFila+1;
                break;
            }
        }
        saidaDet +=CSV_SEPARADOR
                 +(string)(char*)(varLstOraAtd[it].nmGrupoTratamento.arr)+CSV_SEPARADOR // Grupo de Tratamento Atual
                 +(string)(char*)(varLstOraAtd[it].nmGrupoAbertura.arr)+CSV_SEPARADOR; // Grupo de Abertura

        // Usuario responsável pela abertura do processo
        for (itRowsNmUsuAbertura=itRowsNmUsuAberturaAnt;itRowsNmUsuAbertura<qtRowsNmUsuAbertura;itRowsNmUsuAbertura++)
        {
            if ( !strcmp((char*)varLstOraNmUsuAbertura[itRowsNmUsuAbertura].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNmUsuAbertura[itRowsNmUsuAbertura].nmUsuAbertura.arr);
                itRowsNmUsuAberturaAnt = itRowsNmUsuAbertura+1;
                break;
            }
        }
        saidaDet +=CSV_SEPARADOR
                 +(string)(char*)(varLstOraAtd[it].dsTipoCarteira.arr)+CSV_SEPARADOR // Carteira
                 +(string)(char*)(varLstOraAtd[it].dsSegmentacao.arr)+CSV_SEPARADOR; // Segmento

        // Fone de Contato
        for (itRowsNrTelContato=itRowsNrTelContatoAnt;itRowsNrTelContato<qtRowsNrTelContato;itRowsNrTelContato++)
        {
            if ( !strcmp((char*)varLstOraNrTelContato[itRowsNrTelContato].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNrTelContato[itRowsNrTelContato].nrTelContato.arr);
                itRowsNrTelContatoAnt = itRowsNrTelContato+1;
                break;
            }
        }

        saidaDet += CSV_SEPARADOR
                 +(string)(char*)(varLstOraAtd[it].dsTipoPessoa.arr)+CSV_SEPARADOR // Tipo do Cliente (tipo da pessoa)
                 +(string)(char*)(varLstOraAtd[it].dsEstado.arr)+CSV_SEPARADOR // Estado do processo
                 +(string)(char*)(varLstOraAtd[it].dsSubEstado.arr)+CSV_SEPARADOR // Subestado do processo
                 +(string)(char*)(varLstOraAtd[it].nmPath.arr)+CSV_SEPARADOR // Path do contato
                 +(string)(char*)(varLstOraAtd[it].horasDecorridas.arr)+CSV_SEPARADOR // Horas decorridas desde a abertura
                 +(string)(char*)(varLstOraAtd[it].dtPrazoFinal.arr)+CSV_SEPARADOR; // Prazo (Anatel ou Interno)

        // Nome do usuário atual
        for (itRowsNmUsuAtual=itRowsNmUsuAtualAnt;itRowsNmUsuAtual<qtRowsNmUsuAtual;itRowsNmUsuAtual++)
        {
            if ( !strcmp((char*)varLstOraNmUsuAtual[itRowsNmUsuAtual].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNmUsuAtual[itRowsNmUsuAtual].nmUsuAtual.arr);
                itRowsNmUsuAtualAnt = itRowsNmUsuAtual+1;
                break;
            }
        }
        saidaDet += CSV_SEPARADOR;

        // Responsável (gestor)
        for (itRowsNmResponsavel=itRowsNmResponsavelAnt;itRowsNmResponsavel<qtRowsNmResponsavel;itRowsNmResponsavel++)
        {
            if ( !strcmp((char*)varLstOraNmResponsavel[itRowsNmResponsavel].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNmResponsavel[itRowsNmResponsavel].nmResponsavel.arr);
                itRowsNmResponsavelAnt = itRowsNmResponsavel+1;
                break;
            }
        }
        saidaDet +=CSV_SEPARADOR;

        // Data de devolução
        for (itRowsDtDevolucao=itRowsDtDevolucaoAnt;itRowsDtDevolucao<qtRowsDtDevolucao;itRowsDtDevolucao++)
        {
            if ( !strcmp((char*)varLstOraDtDevolucao[itRowsDtDevolucao].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraDtDevolucao[itRowsDtDevolucao].dtDevolucao.arr);
                itRowsDtDevolucaoAnt = itRowsDtDevolucao+1;
                break;
            }
        }
        saidaDet += CSV_SEPARADOR;

        // Razão Social (nmPessoa)
        for (itRowsNmPessoa=itRowsNmPessoaAnt;itRowsNmPessoa<qtRowsNmPessoa;itRowsNmPessoa++)
        {
            if ( !strcmp((char*)varLstOraNmPessoa[itRowsNmPessoa].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNmPessoa[itRowsNmPessoa].nmPessoa.arr);
                itRowsNmPessoaAnt = itRowsNmPessoa+1;
                break;
            }
        }
        saidaDet += CSV_SEPARADOR;

        // CNPJ
        for (itRowsNrDocumento=itRowsNrDocumentoAnt;itRowsNrDocumento<qtRowsNrDocumento;itRowsNrDocumento++)
        {
            if ( !strcmp((char*)varLstOraNrDocumento[itRowsNrDocumento].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
            {
                saidaDet +=(string)(char*)(varLstOraNrDocumento[itRowsNrDocumento].nrDocumento.arr);
                itRowsNrDocumentoAnt = itRowsNrDocumento+1;
                break;
            }
        }

        // Demanda 20640442 - start - 29/01/2014
        saidaDet += CSV_SEPARADOR;

		// Numero da Linha
        for (itRowsNrLinha=itRowsNrLinhaAnt;itRowsNrLinha<qtRowsNrLinha;itRowsNrLinha++)
        {
			if ( !strcmp((char*)varLstOraNrLinha[itRowsNrLinha].idAtendimento.arr,(char*)varLstOraAtd[it].idAtendimento.arr) )
			{
			/*
				if ( !strcmp((char*)varLstOraNrLinha[itRowsNrLinha].nrTelefoneOrigem.arr, '\0') )
				{
					saidaDet +=(string)(char*)(varLstOraNrLinha[itRowsNrLinha].cdAreaRegistro.arr)+
							   (string)(char*)(varLstOraNrLinha[itRowsNrLinha].nrTelefone.arr);
				}
				else
				{
					saidaDet +=(string)(char*)(varLstOraNrLinha[itRowsNrLinha].cdAreaRegistroOrigem.arr)+
					           (string)(char*)(varLstOraNrLinha[itRowsNrLinha].nrTelefoneOrigem.arr);
				}
			*/
				saidaDet +=(string)(char*)(varLstOraNrLinha[itRowsNrLinha].nrLinha.arr);
				itRowsNrLinhaAnt = itRowsNrLinha+1;
				break;
			}
        }
        // Demanda 20640442 - end - 29/01/2014

        if ( saidaDet.length() >= 22000L )
        {
            saida->addItem("csv",(char*)saidaDet.c_str());
            saidaDet.erase();
        }

    } // for (int it=0;it<maxIt;it++)

    if ( saidaDet.length() )
    {
        saida->addItem("csv",(char*)saidaDet.c_str());
    }

    saida->addItem("inFin", isFim);

    saida->closeTag();

    ULOG_END("proCExecutarRelatorio1Det()");

    return true;
}

//==============================================================================
// Funções internas
void montarCabecalhoCSV(string &nmColuna,st_AtendimentoRel *dados)
{
    ULOG_START("montarCabecalhoCSV()");

    nmColuna += obterNomeColunaFixa(ID_OPERADORA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_UF);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_NUM_PROTOCOLO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_NUM_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_DATA_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_DATA_ENTR_GRUPO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_GRUPO_ATUAL);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_GRUPO_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_USUARIO_ABERTURA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_CARTEIRA);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_SEGMENTO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_FONE_CONTATO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_TIPO_CLIENTE);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_ESTADO_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_SUBEST_PROCESSO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_ARVORE_CONTATO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_HORAS_DECORRIDAS);
    nmColuna += CSV_SEPARADOR;

    if ( 'A' == toupper(dados->prazo[0]) )
    {
        nmColuna += obterNomeColunaFixa(ID_PRAZO_ANATEL);
    }
    else
    {
        nmColuna += obterNomeColunaFixa(ID_PRAZO_INTERNO);
    }
    nmColuna += CSV_SEPARADOR;

    nmColuna += obterNomeColunaFixa(ID_NOME_USUARIO_ATUAL);
    nmColuna += CSV_SEPARADOR;

    // O nome login do usuário atual esta sendo concatenado ao nome do 
    // usuário atual
    //nmColuna += obterNomeColunaFixa(ID_LOGIN_USU_ATUAL);
    //nmColuna += CSV_SEPARADOR;

    nmColuna += obterNomeColunaFixa(ID_NOME_GESTOR);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_DATA_DEVOLUCAO);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_RAZ_SOCIAL);
    nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_NUM_DOCUMENTO);
    // Demanda 20640442 - start - 29/01/2014
	nmColuna += CSV_SEPARADOR;
    nmColuna += obterNomeColunaFixa(ID_NUM_LINHA);
	// Demanda 20640442 - end - 29/01/2014

    ULOG("Nomes de colunas=%s",nmColuna.c_str() );

    ULOG_END("montarCabecalhoCSV()");
}

void WFAtdRelObterDominiosAlfanumericos(string &valorDest,DOMNode *entrada,char *dnode,const char *pTagName)
{
    ULOG_START("WFAtdRelObterDominiosAlfanumericos()");

    char *p0;
    char *p1;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( !strcmp(dnode,"WFGrupoVO") )
        {
            if ( p0 = tx.walkTree(dn,"idGrupo",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroOperadoraVO") )
        {
            if ( p0 = tx.walkTree(dn,"idOperadora",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroRegionalVO") )
        {
            if ( p0 = tx.walkTree(dn,"idRegional",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroSegmentoVO") )
        {
            if ( p0 = tx.walkTree(dn,"idSegmento",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFRelatoriosFiltroCarteiraVO") )
        {
            if ( p0 = tx.walkTree(dn,"idCarteira",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"WFEstadoVO") )
        {
            if ( p0 = tx.walkTree(dn,"idEstado",0),p0 )
            {
                if (valorDest.size() > 0) { valorDest += ","; }
                valorDest += p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"FiltroDetalhe") )
        {
            if ( p0 = tx.walkTree(dn,"idColuna",0),p0 )
            {
                if ( strcmp(p0,pTagName)==0 )
                {
                    if ( p1 = tx.walkTree(dn,"valor",0),p1 )
                    {
                        valorDest = p1;
                        XMLString::release(&p1);
                    }
                }

                XMLString::release(&p0);
            }
        }
    }

    ULOG("dnode=%s: valorDest=%s",dnode,valorDest.c_str());

    ULOG_END("WFAtdRelObterDominiosAlfanumericos()");
}

int montarListaNomeOperadora(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNomeOperadora()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "
           "PESSOPER.NMPESSOA AS NMOPERADORA, "
           "UF.NMUF "
         "FROM "
           "ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO, "
           "CUSTOMER.UFOPERADORA UFOPERADORA, "
           //"CUSTOMER.OPERADORA OPERADORA, "
           "CUSTOMER.PESSOADEPARA PESSOADEPARA, "
           "CUSTOMER.PESSOA PESSOPER, "
           "APOIO.UF UF "
       "WHERE "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "AND ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
       //"AND OPERADORA.IDPESSOADEPARAOPERADORA = UFOPERADORA.IDPESSOADEPARAOPERADORA "
       //"AND OPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA "
       "AND UFOPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA "
       "AND PESSOADEPARA.IDPESSOA = PESSOPER.IDPESSOA "
       "AND UFOPERADORA.IDUF = UF.IDUF "
       "ORDER BY "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO";

    memset(varLstOraNmOperadora,0,sizeof(varLstOraNmOperadora));
    memset(statLstOraNmOperadora,-1,sizeof(statLstOraNmOperadora));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNmOperadora FROM :pOraStatement;
    EXEC SQL DECLARE curListaNmOperadora CURSOR FOR ListaNmOperadora;

    EXEC SQL OPEN curListaNmOperadora;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNmOperadora INTO :varLstOraNmOperadora:statLstOraNmOperadora;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNmOperadora;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNmOperadora[it].idAtendimento,statLstOraNmOperadora[it].idAtendimento);
        CONVIND(varLstOraNmOperadora[it].nmOperadora,statLstOraNmOperadora[it].nmOperadora);
    }

    ULOG_END("montarListaNomeOperadora()");
    
    return rows_this_time;
}

// int montarListaUFRegional(string &listaIdAtendimentos,int rowsToFetch)
// {
//     ULOG_START("montarListaUFRegional()");
// 
//     int rows_this_time=0;
// 
//     EXEC SQL BEGIN DECLARE SECTION;
//         const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
//         int rows_to_fetch = rowsToFetch;
//     EXEC SQL END DECLARE SECTION;
// 
//     string queryDin =
//        "SELECT "
//            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "
//            "UF.NMUF "
//          "FROM "
//            "ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO, "
//            "CUSTOMER.UFOPERADORA UFOPERADORA, "
//            "APOIO.UF UF "
//        "WHERE "
//            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
//        "AND ATENDIMENTOPRIORIZACAO.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
//        "AND UFOPERADORA.IDUF = UF.IDUF "
//        "ORDER BY "
//            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO";
// 
//     memset(varLstOraUFRegional,0,sizeof(varLstOraUFRegional));
//     memset(statLstOraUFRegional,-1,sizeof(statLstOraUFRegional));
// 
//     pOraStatement = (char*)queryDin.c_str();
//     //ULOG("%s",pOraStatement);
// 
//     EXEC SQL WHENEVER NOT FOUND CONTINUE;
// 
//     EXEC SQL PREPARE ListaUFRegional FROM :pOraStatement;
//     EXEC SQL DECLARE curListaUFRegional CURSOR FOR ListaUFRegional;
// 
//     EXEC SQL OPEN curListaUFRegional;
//         EXEC SQL FOR :rows_to_fetch
//             FETCH curListaUFRegional INTO :varLstOraUFRegional:statLstOraUFRegional;
//         rows_this_time = sqlca.sqlerrd[2];
//     EXEC SQL CLOSE curListaUFRegional;
// 
//     ULOG("rows_this_time=%d",rows_this_time);
// 
//     for (int it=0;it<rows_this_time;it++)
//     {
//         CONVIND(varLstOraUFRegional[it].idAtendimento,statLstOraUFRegional[it].idAtendimento);
//         CONVIND(varLstOraUFRegional[it].ufRegional,statLstOraUFRegional[it].ufRegional);
//     }
// 
//     ULOG_END("montarListaUFRegional()");
//     
//     return rows_this_time;
// }

int montarListaDtEntradaFila(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaDtEntradaFila()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ATENDIMENTOGRUPOBKO.IDATENDIMENTO, "
           "TO_CHAR(ATENDIMENTOGRUPOBKO.DTENTRADAFILA,'DD/MM/YYYY HH24:MI') AS DTENTRADAFILA "
         "FROM "
           "ATENDIMENTO.ATENDIMENTOGRUPOBKO ATENDIMENTOGRUPOBKO "
       "WHERE "
           "ATENDIMENTOGRUPOBKO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "ORDER BY "
           "ATENDIMENTOGRUPOBKO.IDATENDIMENTO";

    memset(varLstOraDtEntradaFila,0,sizeof(varLstOraDtEntradaFila));
    memset(statLstOraDtEntradaFila,-1,sizeof(statLstOraDtEntradaFila));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaDtEntradaFila FROM :pOraStatement;
    EXEC SQL DECLARE curListaDtEntradaFila CURSOR FOR ListaDtEntradaFila;

    EXEC SQL OPEN curListaDtEntradaFila;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaDtEntradaFila INTO :varLstOraDtEntradaFila:statLstOraDtEntradaFila;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaDtEntradaFila;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraDtEntradaFila[it].idAtendimento,statLstOraDtEntradaFila[it].idAtendimento);
        CONVIND(varLstOraDtEntradaFila[it].dtEntradaFila,statLstOraDtEntradaFila[it].dtEntradaFila);
    }

    ULOG_END("montarListaDtEntradaFila()");
    
    return rows_this_time;
}

int montarListaNmUsuAbertura(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNmUsuAbertura()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
		"SELECT "
			"ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "         
			"REGEXP_REPLACE(PESSABER.NMNOME||' '||PESSABER.NMSOBRENOME||' ('||USUABER.NMLOGINUSUARIO||')','['||CHR(10)||'|'||CHR(13)||']',' ') AS NMUSUARIOABERTURA "
       "FROM "
			"ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO, "
            "CUSTOMER.PESSOA PESSABER, "
            "ACESSO.USUARIO USUABER "
       "WHERE "
			"ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
		"AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOABERTURA = PESSABER.IDPESSOA "
		"AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOABERTURA = USUABER.IDPESSOAUSUARIO "
		"ORDER BY "
			"ATENDIMENTOPRIORIZACAO.IDATENDIMENTO ";

    memset(varLstOraNmUsuAbertura,0,sizeof(varLstOraNmUsuAbertura));
    memset(statLstOraNmUsuAbertura,-1,sizeof(statLstOraNmUsuAbertura));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNmUsuAbertura FROM :pOraStatement;
    EXEC SQL DECLARE curListaNmUsuAbertura CURSOR FOR ListaNmUsuAbertura;

    EXEC SQL OPEN curListaNmUsuAbertura;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNmUsuAbertura INTO :varLstOraNmUsuAbertura:statLstOraNmUsuAbertura;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNmUsuAbertura;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNmUsuAbertura[it].idAtendimento,statLstOraNmUsuAbertura[it].idAtendimento);
        CONVIND(varLstOraNmUsuAbertura[it].nmUsuAbertura,statLstOraNmUsuAbertura[it].nmUsuAbertura);
    }

    ULOG_END("montarListaNmUsuAbertura()");
    
    return rows_this_time;
}

int montarListaNmUsuAtual(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNmUsuAtual()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "
		   "REGEXP_REPLACE(PESSOA.NMNOME||' '||PESSOA.NMSOBRENOME||' ('||USUARIO.NMLOGINUSUARIO||')','['||CHR(10)||'|'||CHR(13)||']',' ') AS NMUSUARIOATUAL "
       "FROM "
           "ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO, "
           "CUSTOMER.PESSOA PESSOA, "
           "ACESSO.USUARIO USUARIO "
       "WHERE "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = PESSOA.IDPESSOA "
       "AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUARIO.IDPESSOAUSUARIO "
       "ORDER BY "
           "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO";
   //
   //
   // Quando subirem p/produção a manutenção dos nomes de usuários de
   // ACESSO.USUARIO devemos trocar a query acima por esta (mais performática).
   //
   // Cassio -- Jul/2009
   //
   // "SELECT "
   //     "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "
   //     "USUARIO.NMNOME||' '||USUARIO.NMULTIMONOME||' ('||USUARIO.NMLOGINUSUARIO||')' AS NMUSUARIOATUAL "
   // "FROM "
   //     "ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO, "
   //     "ACESSO.USUARIO USUARIO "
   // "WHERE "
   //     "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
   // "AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUARIO.IDPESSOAUSUARIO "
   // "ORDER BY "
   //     "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO";
   //
    memset(varLstOraNmUsuAtual,0,sizeof(varLstOraNmUsuAtual));
    memset(statLstOraNmUsuAtual,-1,sizeof(statLstOraNmUsuAtual));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNmUsuAtual FROM :pOraStatement;
    EXEC SQL DECLARE curListaNmUsuAtual CURSOR FOR ListaNmUsuAtual;

    EXEC SQL OPEN curListaNmUsuAtual;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNmUsuAtual INTO :varLstOraNmUsuAtual:statLstOraNmUsuAtual;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNmUsuAtual;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNmUsuAtual[it].idAtendimento,statLstOraNmUsuAtual[it].idAtendimento);
        CONVIND(varLstOraNmUsuAtual[it].nmUsuAtual,statLstOraNmUsuAtual[it].nmUsuAtual);
    }

    ULOG_END("montarListaNmUsuAtual()");
    
    return rows_this_time;
}

int montarListaNrTelContato(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNrTelContato()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ATENDIMENTOCONTATO.IDATENDIMENTO, "
           "ATENDIMENTOCONTATO.NRTELEFONECONTATO "
       "FROM "
           "ATENDIMENTO.ATENDIMENTOCONTATO ATENDIMENTOCONTATO "
       "WHERE "
           "ATENDIMENTOCONTATO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "ORDER BY "
           "ATENDIMENTOCONTATO.IDATENDIMENTO";

    memset(varLstOraNrTelContato,0,sizeof(varLstOraNrTelContato));
    memset(statLstOraNrTelContato,-1,sizeof(statLstOraNrTelContato));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNrTelContato FROM :pOraStatement;
    EXEC SQL DECLARE curListaNrTelContato CURSOR FOR ListaNrTelContato;

    EXEC SQL OPEN curListaNrTelContato;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNrTelContato INTO :varLstOraNrTelContato:statLstOraNrTelContato;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNrTelContato;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNrTelContato[it].idAtendimento,statLstOraNrTelContato[it].idAtendimento);
        CONVIND(varLstOraNrTelContato[it].nrTelContato,statLstOraNrTelContato[it].nrTelContato);
    }

    ULOG_END("montarListaNrTelContato()");
    
    return rows_this_time;
}

int montarListaDtDevolucao(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaDtDevolucao()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ANDAMENTOTRANS.IDATENDIMENTO, "
           "TO_CHAR(MAX(ANDAMENTOTRANS.DTANDAMENTO),'DD/MM/YYYY HH24:MI') AS DATADEVOLUCAO "
       "FROM "
           "ANDAMENTO.ANDAMENTOTRANS ANDAMENTOTRANS "
       "WHERE "
           "ANDAMENTOTRANS.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "AND ANDAMENTOTRANS.IDATIVIDADE IN (SELECT IDATIVIDADE "
                                            "FROM WORKFLOW.ATIVIDADE "
                                           "WHERE DSATIVIDADE = 'DEVOLVER BKO') "
       "GROUP BY "
           "ANDAMENTOTRANS.IDATENDIMENTO "
       "ORDER BY "
           "ANDAMENTOTRANS.IDATENDIMENTO";

    memset(varLstOraDtDevolucao,0,sizeof(varLstOraDtDevolucao));
    memset(statLstOraDtDevolucao,-1,sizeof(statLstOraDtDevolucao));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaDtDevolucao FROM :pOraStatement;
    EXEC SQL DECLARE curListaDtDevolucao CURSOR FOR ListaDtDevolucao;

    EXEC SQL OPEN curListaDtDevolucao;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaDtDevolucao INTO :varLstOraDtDevolucao:statLstOraDtDevolucao;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaDtDevolucao;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraDtDevolucao[it].idAtendimento,statLstOraDtDevolucao[it].idAtendimento);
        CONVIND(varLstOraDtDevolucao[it].dtDevolucao,statLstOraDtDevolucao[it].dtDevolucao);
    }

    ULOG_END("montarListaDtDevolucao()");
    
    return rows_this_time;
}

int montarListaNmPessoa(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNmPessoa()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "ATENDIMENTOPESSOA.IDATENDIMENTO, "
           "PESSOA.NMPESSOA "
       "FROM "
           "ATENDIMENTO.ATENDIMENTOPESSOA ATENDIMENTOPESSOA, "
           "CUSTOMER.PESSOA PESSOA, "
           "CUSTOMER.PESSOADEPARA PESSOADEPARA "
       "WHERE "
           "ATENDIMENTOPESSOA.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       "AND ATENDIMENTOPESSOA.IDTIPORELACIONAMENTO > 1 "
       "AND ATENDIMENTOPESSOA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA  "
       "AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA  "
       "AND PESSOA.IDTIPOPESSOA = 2 "
       "ORDER BY "
           "ATENDIMENTOPESSOA.IDATENDIMENTO";

    memset(varLstOraNmPessoa,0,sizeof(varLstOraNmPessoa));
    memset(statLstOraNmPessoa,-1,sizeof(statLstOraNmPessoa));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNmPessoa FROM :pOraStatement;
    EXEC SQL DECLARE curListaNmPessoa CURSOR FOR ListaNmPessoa;

    EXEC SQL OPEN curListaNmPessoa;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNmPessoa INTO :varLstOraNmPessoa:statLstOraNmPessoa;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNmPessoa;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNmPessoa[it].idAtendimento,statLstOraNmPessoa[it].idAtendimento);
        CONVIND(varLstOraNmPessoa[it].nmPessoa,statLstOraNmPessoa[it].nmPessoa);
    }

    ULOG_END("montarListaNmPessoa()");
    
    return rows_this_time;
}

int montarListaNrDocumento(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNrDocumento()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT IDATENDIMENTO, "
          "SUBSTR(NRDOCUMENTO,1,2)||'.'||SUBSTR(NRDOCUMENTO,3,3)||'.'||"
          "SUBSTR(NRDOCUMENTO,6,3)||'/'||SUBSTR(NRDOCUMENTO,9,4)||'-'||"
          "SUBSTR(NRDOCUMENTO,13) AS NRDOCUMENTO "
       "FROM "
       "( "
           "SELECT "
               "ATENDIMENTOPESSOA.IDATENDIMENTO,"
               "LPAD(DOCUMENTO.NRDOCUMENTO,14,'              ') AS NRDOCUMENTO "
           "FROM "
               "ATENDIMENTO.ATENDIMENTOPESSOA ATENDIMENTOPESSOA, "
               "CUSTOMER.PESSOADEPARA PESSOADEPARA, "
               "CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO, "
               "CUSTOMER.DOCUMENTO DOCUMENTO, "
               "APOIO.TIPODOCUMENTO TIPODOCUMENTO  "
           "WHERE "
               "ATENDIMENTOPESSOA.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
           "AND ATENDIMENTOPESSOA.IDTIPORELACIONAMENTO = 2 "
           "AND ATENDIMENTOPESSOA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA "
           "AND NVL(PESSOADOCUMENTO.DTEXPIRACAO,SYSDATE+1) > SYSDATE   "
           "AND PESSOADEPARA.IDPESSOA = PESSOADOCUMENTO.IDPESSOA "
           "AND PESSOADOCUMENTO.IDDOCUMENTO = DOCUMENTO.IDDOCUMENTO "
           "AND DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO  "
           "AND TIPODOCUMENTO.SGCLASSIFICACAO = 'CNPJ' "
       ") "
           "ORDER BY "
               "IDATENDIMENTO";

    memset(varLstOraNrDocumento,0,sizeof(varLstOraNrDocumento));
    memset(statLstOraNrDocumento,-1,sizeof(statLstOraNrDocumento));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNrDocumento FROM :pOraStatement;
    EXEC SQL DECLARE curListaNrDocumento CURSOR FOR ListaNrDocumento;

    EXEC SQL OPEN curListaNrDocumento;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNrDocumento INTO :varLstOraNrDocumento:statLstOraNrDocumento;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNrDocumento;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNrDocumento[it].idAtendimento,statLstOraNrDocumento[it].idAtendimento);
        CONVIND(varLstOraNrDocumento[it].nrDocumento,statLstOraNrDocumento[it].nrDocumento);
    }

    ULOG_END("montarListaNrDocumento()");

    return rows_this_time;
}


int montarListaNmResponsavel(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNmResponsavel()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
        "SELECT DISTINCT "
            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO, "
            "PESSOASUPERVISOR.NMPESSOA||' ('||USUARIOSUPERVISOR.NMLOGINUSUARIO||')' AS RESPONSAVEL "
        "FROM "
            "ACESSO.USUARIOHIERARQUIA USUARIOHIERARQUIA, "
            "CUSTOMER.PESSOA PESSOASUPERVISOR, "
            "ACESSO.USUARIO USUARIOSUPERVISOR, "
            "ACESSO.USUARIOROLE USUARIOROLE, "
            "ACESSO.ROLE ROLE, "
            "ATENDIMENTO.ATENDIMENTOPRIORIZACAO ATENDIMENTOPRIORIZACAO "
        "WHERE "
            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
        "AND ATENDIMENTOPRIORIZACAO.IDPESSOAUSUARIOATUAL = USUARIOHIERARQUIA.IDPESSOAUSUARIO "
        "AND USUARIOHIERARQUIA.IDPESSOAUSUARIOCHEFE = PESSOASUPERVISOR.IDPESSOA "
        "AND USUARIOHIERARQUIA.IDPESSOAUSUARIOCHEFE = USUARIOSUPERVISOR.IDPESSOAUSUARIO "
        "AND USUARIOHIERARQUIA.IDPESSOAUSUARIOCHEFE = USUARIOROLE.IDPESSOAUSUARIO "
        "AND USUARIOROLE.IDROLE = ROLE.IDROLE "
        "AND UPPER(ROLE.NMROLE) LIKE '%%SUPERVISOR%%' "
        "ORDER BY "
            "ATENDIMENTOPRIORIZACAO.IDATENDIMENTO ";

    memset(varLstOraNmResponsavel,0,sizeof(varLstOraNmResponsavel));
    memset(statLstOraNmResponsavel,-1,sizeof(statLstOraNmResponsavel));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNmResponsavel FROM :pOraStatement;
    EXEC SQL DECLARE curListaNmResponsavel CURSOR FOR ListaNmResponsavel;

    EXEC SQL OPEN curListaNmResponsavel;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNmResponsavel INTO :varLstOraNmResponsavel:statLstOraNmResponsavel;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNmResponsavel;

    ULOG("rows_this_time=%d",rows_this_time);

    for (int it=0;it<rows_this_time;it++)
    {
        CONVIND(varLstOraNmResponsavel[it].idAtendimento,statLstOraNmResponsavel[it].idAtendimento);
        CONVIND(varLstOraNmResponsavel[it].nmResponsavel,statLstOraNmResponsavel[it].nmResponsavel);
    }

    ULOG_END("montarListaNmResponsavel()");

    return rows_this_time;
}

// Demanda 20640442 - start - 29/01/2014
int montarListaNrLinha(string &listaIdAtendimentos,int rowsToFetch)
{
    ULOG_START("montarListaNrLinha()");

    int rows_this_time=0;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *pOraListaIdAtendimentos = listaIdAtendimentos.c_str();
        int rows_to_fetch = rowsToFetch;
    EXEC SQL END DECLARE SECTION;

    string queryDin =
       "SELECT "
           "TO_CHAR(IDATENDIMENTO),"
           "NRLINHA "
       "FROM "
			"ATENDIMENTO.ATENDIMENTODETALHEV01 "
       "WHERE "
			"IDATENDIMENTO IN ("+listaIdAtendimentos+") "
	   " ORDER BY "
           "IDATENDIMENTO";

    memset(varLstOraNrLinha,0,sizeof(varLstOraNrLinha));
    memset(statLstOraNrLinha,-1,sizeof(statLstOraNrLinha));

    pOraStatement = (char*)queryDin.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNrLinha FROM :pOraStatement;
    EXEC SQL DECLARE curListaNrLinha CURSOR FOR ListaNrLinha;

    EXEC SQL OPEN curListaNrLinha;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNrLinha INTO :varLstOraNrLinha:statLstOraNrLinha;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNrLinha;

    ULOG("rows_this_time=%d",rows_this_time);

	for (int it=0;it<rows_this_time;it++)
	{
		CONVIND(varLstOraNrLinha[it].idAtendimento,statLstOraNrLinha[it].idAtendimento);
		CONVIND(varLstOraNrLinha[it].nrLinha,statLstOraNrLinha[it].nrLinha);
	}

/*
    string queryDin1 =
       "SELECT "
           "ATENDIMENTO.IDATENDIMENTO,"
		   "AREAREGISTRO.CDAREAREGISTRO,"
           "LINHABASE.NRLINHA,"
		   "NULL,"
		   "NULL "
       "FROM "
           "ATENDIMENTO.ATENDIMENTO ATENDIMENTO,"
		   "LINHA.LINHATELEFONICA LINHATELEFONICA,"
		   "LINHA.LINHABASE LINHABASE,"
		   "APOIO.AREAREGISTRO AREAREGISTRO "
       "WHERE "
		   "ATENDIMENTO.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA "
	   "AND LINHATELEFONICA.IDLINHABASE = LINHABASE.IDLINHABASE "
	   "AND LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO "
	   "AND ATENDIMENTO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
       " ORDER BY "
           "ATENDIMENTO.IDATENDIMENTO";

    memset(varLstOraNrLinha,0,sizeof(varLstOraNrLinha));
    memset(statLstOraNrLinha,-1,sizeof(statLstOraNrLinha));

    pOraStatement = (char*)queryDin1.c_str();
    //ULOG("%s",pOraStatement);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL PREPARE ListaNrLinha1 FROM :pOraStatement;
    EXEC SQL DECLARE curListaNrLinha1 CURSOR FOR ListaNrLinha1;

    EXEC SQL OPEN curListaNrLinha1;
        EXEC SQL FOR :rows_to_fetch
            FETCH curListaNrLinha1 INTO :varLstOraNrLinha:statLstOraNrLinha;
        rows_this_time = sqlca.sqlerrd[2];
    EXEC SQL CLOSE curListaNrLinha1;

    ULOG("rows_this_time=%d",rows_this_time);

	if ( rows_this_time > 0 )
	{
		for (int it=0;it<rows_this_time;it++)
		{
			CONVIND(varLstOraNrLinha[it].idAtendimento,statLstOraNrLinha[it].idAtendimento);
			CONVIND(varLstOraNrLinha[it].cdAreaRegistro,statLstOraNrLinha[it].cdAreaRegistro);
			CONVIND(varLstOraNrLinha[it].nrTelefone,statLstOraNrLinha[it].nrTelefone);
			CONVIND(varLstOraNrLinha[it].cdAreaRegistroOrigem,statLstOraNrLinha[it].cdAreaRegistroOrigem);
			CONVIND(varLstOraNrLinha[it].nrTelefoneOrigem,statLstOraNrLinha[it].nrTelefoneOrigem);
		}
	}
	else
	{
		string queryDin2 =
		   "SELECT "
			   "ATENDIMENTO.IDATENDIMENTO,"
			   "PROTOCOLO.CDAREAREGISTRO,"
			   "PROTOCOLO.NRTELEFONE,"
			   "PROTOCOLO.CDAREAREGISTROORIGEM,"
			   "PROTOCOLO.NRTELEFONEORIGEM "
		   "FROM "
			   "ATENDIMENTO.ATENDIMENTO ATENDIMENTO,"
			   "ATENDIMENTO.ATENDIMENTOPROTOCOLO PROTOCOLO "
		   "WHERE "
			   "PROTOCOLO.IDATENDIMENTOPROTOCOLO(+) = ATENDIMENTO.IDATENDIMENTOPROTOCOLO "
		   "AND ATENDIMENTO.IDATENDIMENTO IN ("+listaIdAtendimentos+") "+
		   " ORDER BY "
			   "ATENDIMENTO.IDATENDIMENTO";

		memset(varLstOraNrLinha,0,sizeof(varLstOraNrLinha));
		memset(statLstOraNrLinha,-1,sizeof(statLstOraNrLinha));

		pOraStatement = (char*)queryDin2.c_str();
		//ULOG("%s",pOraStatement);

		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		EXEC SQL PREPARE ListaNrLinha FROM :pOraStatement;
		EXEC SQL DECLARE curListaNrLinha CURSOR FOR ListaNrLinha;

		EXEC SQL OPEN curListaNrLinha;
			EXEC SQL FOR :rows_to_fetch
				FETCH curListaNrLinha INTO :varLstOraNrLinha:statLstOraNrLinha;
			rows_this_time = sqlca.sqlerrd[2];
		EXEC SQL CLOSE curListaNrLinha;

		ULOG("rows_this_time2=%d",rows_this_time);

		for (int it=0;it<rows_this_time;it++)
		{
			CONVIND(varLstOraNrLinha[it].idAtendimento,statLstOraNrLinha[it].idAtendimento);
			CONVIND(varLstOraNrLinha[it].cdAreaRegistro,statLstOraNrLinha[it].cdAreaRegistro);
			CONVIND(varLstOraNrLinha[it].nrTelefone,statLstOraNrLinha[it].nrTelefone);
			CONVIND(varLstOraNrLinha[it].cdAreaRegistroOrigem,statLstOraNrLinha[it].cdAreaRegistroOrigem);
			CONVIND(varLstOraNrLinha[it].nrTelefoneOrigem,statLstOraNrLinha[it].nrTelefoneOrigem);
		}
	}
*/
    ULOG_END("montarListaNrLinha()");

    return rows_this_time;
}
// Demanda 20640442 - end - 29/01/2014
