
#include "../include/cWfPsqInBoxRetPC.h"

void cWfPsqInBoxRetPC::pesquisaWFRetornoCTI( st_VariaveisPsqCTI *_dadosEntradaPC, Collection *_ResultadoPC )
{

    ULOG_START("cWfPsqInBoxRetPC::pesquisaWFRetornoCTI()");

    struct sqlca sqlca;
    st_VariaveisPsqCTI *pCTI;

    bool flagSepara = false;

    EXEC SQL BEGIN DECLARE SECTION;

        int idretornowfctiAux;
        char dsretornowfctiAux[256];
        char sgstatusAux[2];

        VARCHAR idretornowfcti[23];
        VARCHAR sgretornowfcti[256];
        VARCHAR dsretornowfcti[256];
        VARCHAR sgstatus[2];
        VARCHAR inpadrao[23];

        char query[1025];

        short i_idretornowfcti;
        short i_sgretornowfcti;
        short i_dsretornowfcti;
        short i_sgstatus;
        short i_inpadrao;

    EXEC SQL END DECLARE SECTION;

    idretornowfctiAux = atoi( _dadosEntradaPC->idretornowfcti );
    strcpy( dsretornowfctiAux,_dadosEntradaPC->dsretornowfcti );
    strcpy( sgstatusAux,_dadosEntradaPC->sgstatus );

    strcpy( query,
           "SELECT TO_CHAR(idretornowfcti)"
                 ",sgretornowfcti"
                 ",dsretornowfcti"
                 ",sgstatus"
                 ",TO_CHAR(inpadrao) "
             "FROM Workflow.Retornowfcti" );

    if( idretornowfctiAux > 0 )
    {
        char buffer[128];
        sprintf( buffer," WHERE idretornowfcti = %d",idretornowfctiAux );
        strcat( query,buffer );
        flagSepara = true;
    }

    if( strlen(dsretornowfctiAux) > 0 )
    {
        if( flagSepara == false )
        {
            register int i = -1;
            char buffer[1024];
            char UpperBuf[512];
            char tmp[11];
            int x;
            
            memset(UpperBuf,0x0,sizeof(UpperBuf));

            i = strlen(dsretornowfctiAux);
            for( x = 0;x < i;x++ )
            {
                UpperBuf[x] = toupper(dsretornowfctiAux[x]);
            }

            strcat( query," WHERE UPPER(dsretornowfcti) LIKE " );
            strcpy( tmp,"%" );
            sprintf( buffer,"'%s%s",tmp,UpperBuf );
            strcat( query,buffer );
            strcat( query,"%'");
            flagSepara = true;
        }
        else
        {
            int i = -1;
            char buffer[1024];
            char UpperBuf[512];
            char tmp[11];
            int x = -1;
            memset(UpperBuf,0x0,sizeof(UpperBuf));
            
            i = strlen(dsretornowfctiAux);
            for(x=0;x < i;x++)
            {
                UpperBuf[x] = toupper(dsretornowfctiAux[x]);
            }

            strcat( query," AND UPPER(dsretornowfcti) LIKE " );
            strcpy( tmp,"%" );
            sprintf( buffer,"'%s%s",tmp,UpperBuf );
            strcat( query,buffer );
            strcat( query,"%'");
        }
    }

    if( strlen(sgstatusAux) > 0 )
    {
        if( flagSepara == false )
        {
            strcat( query," WHERE sgstatus = '" );
            strcat( query,sgstatusAux );
            strcat( query,"'");
        }
        else
        {
            strcat( query," AND sgstatus = '" );
            strcat( query,sgstatusAux );
            strcat( query,"'");
        }
    }

    ULOG("query = %s",query);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFRetornoCTI( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE consultaRetornoCTI FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR consultaRetornoCTI;

    EXEC SQL OPEN consulta;

    ULOG("sqlca.sqlcode = '%d'",sqlca.sqlcode);

    for ( ;; )
    {
        EXEC SQL FETCH consulta INTO
                    :idretornowfcti:i_idretornowfcti,
                    :sgretornowfcti:i_sgretornowfcti,
                    :dsretornowfcti:i_dsretornowfcti,
                    :sgstatus:i_sgstatus,
                    :inpadrao:i_inpadrao;

        CONVIND( idretornowfcti,i_idretornowfcti );
        CONVIND( sgretornowfcti,i_sgretornowfcti );
        CONVIND( dsretornowfcti,i_dsretornowfcti );
        CONVIND( sgstatus,i_sgstatus );
        CONVIND( inpadrao,i_inpadrao );

        pCTI = new st_VariaveisPsqCTI;
        if ( pCTI )
        {
            strcpy( pCTI->idretornowfcti,(char*)idretornowfcti.arr );
            strcpy( pCTI->sgretornowfcti,(char*)sgretornowfcti.arr );
            strcpy( pCTI->dsretornowfcti,(char*)dsretornowfcti.arr );
            strcpy( pCTI->sgstatus      ,(char*)sgstatus.arr );
            strcpy( pCTI->inpadrao      ,(char*)inpadrao.arr );

            _ResultadoPC->AddItem( (void*) pCTI );
        }
        else
        {
            ULOG(erroFalhaAlocacaoMemoria());
        }
    }

    EXEC SQL CLOSE consulta;

    ULOG_START("cWfPsqInBoxRetPC::pesquisaWFRetornoCTI()");
}

void cWfPsqInBoxRetPC::sql_error_WFRetornoCTI( sqlca * sqlca )
{
    ULOG(mensagemSimples("Ocorreu um erro na pesquisa de Retorno CTI."));
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
