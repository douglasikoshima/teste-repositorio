/**
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.2.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2010/04/06 14:28:07 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<ctype.h>

#include "../include/cWFAtdMsgRC.h"

#include "../../../commons/SmallString.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

void sql_error_WFAtdMsgRC(sqlca*sqlca);

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
    #include "../include/stWFAtdMsgRC.h"
EXEC SQL END DECLARE SECTION;

bool proCConsultaWFMensagemUsuarioRC(st_AtdMsgRC* dados, st_vlAtdMsgRC* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFMensagemUsuarioRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    EXEC SQL BEGIN DECLARE SECTION;

        struct st_SaidaAtdMsgRC
        {
            VARCHAR  idAtendimento[21];
            VARCHAR dsAtividade[256];
            int  idContato;
            VARCHAR dtMensagem[22];
            VARCHAR arvore[800];
            VARCHAR nrTelefone[256];
            VARCHAR nmPessoa[256];
        }oDadosSaida;
        
        struct st_vlSaidaAtdMsgRC
        {
            short idAtendimento;
            short dsAtividade;
            short idContato;
            short dtMensagem;
            short arvore;
            short nrTelefone;
            short nmPessoa;
        }oStatusSaida;

        struct st_AtdMsgRC oDados;
        struct st_vlAtdMsgRC oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));

    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("idPessoaUsuario=%d", dados->idPessoaUsuario);
    ULOG("idAtendimento=%d", dados->idAtendimento);

    ULOG("status idPessoaUsuario=%d", status->idPessoaUsuario);
    ULOG("status idAtendimento=%d", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdMsgRC(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL DECLARE consultaWFMsgUsuarioRC CURSOR FOR
        SELECT 
            IDATENDIMENTO, 
            DSATIVIDADE, 
            IDCONTATO, 
            TO_CHAR(DTMENSAGEM,'DD/MM/YYYY HH24:MI:SS'), 
            PATH,
            NRTELEFONE,
            NMPESSOA
         FROM 
            ATENDIMENTO.ATDMENSAGEMWFRCV01
         WHERE 
            IDPESSOAUSUARIODESTINO = :oDados.idPessoaUsuario
            AND (IDATENDIMENTO = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
            AND (IDCONTATO = :oDados.idContato OR -1=:oStatus.idContato)
            AND (TRUNC(DTMENSAGEM)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
            AND (TRUNC(DTMENSAGEM)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
    ORDER BY DTMENSAGEM DESC;

    EXEC SQL OPEN consultaWFMsgUsuarioRC;

    while (true)
    {
        EXEC SQL FETCH consultaWFMsgUsuarioRC INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
            CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
            CONVIND(oDadosSaida.dsAtividade, oStatusSaida.dsAtividade);
            CONVIND(oDadosSaida.dtMensagem, oStatusSaida.dtMensagem);
            CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
            CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);

            saida->createTag("RWFAtendimentoVO");
        
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtMensagem.arr);
                saida->addItem("operacaoWorkflow", (char*)oDadosSaida.dsAtividade.arr);
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("nmNome", (char*)oDadosSaida.nmPessoa.arr);

            saida->closeTag();
        }
    }

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFMsgUsuarioRC;

    ULOG( "totalRegistros=%d",totalRegistros );

    ULOG( "numeroRegistros=%d",numeroRegistros );

    ULOG_END( "proCConsultaWFMensagemUsuarioRC()" );

    return true;
}


bool proCConsultaWFMensagemLinhaRC(st_AtdMsgRC* dados, st_vlAtdMsgRC* status, XMLGen* saida)
{
    ULOG_START( "proCConsultaWFMensagemLinhaRC()" );

    struct sqlca sqlca;

    int numeroRegistros = 0;
    int totalRegistros = 0;

    int prefixo = 0;
    int numero  = 0;
    char cConv[3];

    if ( dados->nrLinha[0]=='0' ) 
    {
        strncpy(cConv,dados->nrLinha+1,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+3);
    }
    else
    {
        strncpy(cConv,dados->nrLinha,2);cConv[2]=0;
        prefixo = atoi(cConv);
        numero  = atoi(dados->nrLinha+2);
    }

    EXEC SQL BEGIN DECLARE SECTION;

        int   oprefixo         = prefixo;
        int   otelefone        = numero;

        struct st_SaidaAtdMsgRC
        {
            VARCHAR  idAtendimento[21];
            VARCHAR dsAtividade[256];
            int  idContato;
            VARCHAR dtMensagem[22];
            VARCHAR arvore[800];
            VARCHAR nrTelefone[256];
            VARCHAR nmPessoa[256];
        }oDadosSaida;
        
        struct st_vlSaidaAtdMsgRC
        {
            short idAtendimento;
            short dsAtividade;
            short idContato;
            short dtMensagem;
            short qtInsistencia;
            short arvore;
            short nrTelefone;
            short nmPessoa;
        }oStatusSaida;

        struct st_AtdMsgRC oDados;
        struct st_vlAtdMsgRC oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oDados, dados, sizeof(oDados));
    memcpy(&oStatus, status, sizeof(oStatus));
    memset(&oStatusSaida,-1,sizeof(oStatusSaida));

    ULOG("nrLinha=%s", dados->nrLinha);
    ULOG("idPessoaUsuario=%d", dados->idPessoaUsuario);
    ULOG("idAtendimento=%d", dados->idAtendimento);

    ULOG("status nrLinha=%d", status->nrLinha);
    ULOG("status idPessoaUsuario=%d", status->idPessoaUsuario);
    ULOG("status idAtendimento=%d", status->idAtendimento);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdMsgRC(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    
    EXEC SQL DECLARE consultaWFMsgLinhaRC CURSOR FOR
        SELECT 
            IDATENDIMENTO, 
            DSATIVIDADE, 
            IDCONTATO, 
            TO_CHAR(DTMENSAGEM,'DD/MM/YYYY HH24:MI:SS'), 
            PATH,
            NRTELEFONE,
            NMPESSOA
         FROM 
            ATENDIMENTO.ATDMENSAGEMWFRCV01
         WHERE 
            IDPESSOAUSUARIODESTINO = :oDados.idPessoaUsuario
            AND CDAREAREGISTRO = :oprefixo
            AND NRLINHA = :otelefone
            AND (IDATENDIMENTO = :oDados.idAtendimento OR -1=:oStatus.idAtendimento)
            AND (IDCONTATO = :oDados.idContato OR -1=:oStatus.idContato)
            AND (TRUNC(DTMENSAGEM)>=TO_DATE(:oDados.dtAberturaInicio, 'DD/MM/YYYY' ) OR -1 = :oStatus.dtAberturaInicio)
            AND (TRUNC(DTMENSAGEM)<=TO_DATE(:oDados.dtAberturaFim,'DD/MM/YYYY') OR -1 = :oStatus.dtAberturaFim)
    ORDER BY DTMENSAGEM DESC;

    EXEC SQL OPEN consultaWFMsgLinhaRC;
    while (true)
    {
        EXEC SQL FETCH consultaWFMsgLinhaRC INTO :oDadosSaida INDICATOR :oStatusSaida;

        totalRegistros++;

        if (numeroRegistros < 100)
        {
            numeroRegistros++;

            CONVIND(oDadosSaida.idAtendimento, oStatusSaida.idAtendimento);
            CONVIND(oDadosSaida.nmPessoa, oStatusSaida.nmPessoa);
            CONVIND(oDadosSaida.dsAtividade, oStatusSaida.dsAtividade);
            CONVIND(oDadosSaida.dtMensagem, oStatusSaida.dtMensagem);
            CONVIND(oDadosSaida.arvore, oStatusSaida.arvore);
            CONVIND(oDadosSaida.nrTelefone, oStatusSaida.nrTelefone);

            saida->createTag("RWFAtendimentoVO");
                saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
                saida->addItem("idAtendimento", (char*)oDadosSaida.idAtendimento.arr);
                saida->addItem("dtAbertura", (char*)oDadosSaida.dtMensagem.arr);
                saida->addItem("operacaoWorkflow", (char*)oDadosSaida.dsAtividade.arr);
                saida->addItem("nrTelefone", (char*)oDadosSaida.nrTelefone.arr);
                saida->addItem("descricaoCompleta", (char*)oDadosSaida.arvore.arr);
                saida->addItem("nmNome", (char*)oDadosSaida.nmPessoa.arr);
            saida->closeTag();
        }
    }

    saida->addItem("totalRegistros", totalRegistros);
    saida->addItem("nrRegistros", numeroRegistros);

    EXEC SQL CLOSE consultaWFMsgLinhaRC;

    ULOG( "totalRegistros=%d",totalRegistros );

    ULOG( "numeroRegistros=%d",numeroRegistros );

    ULOG_END( "proCConsultaWFMensagemLinhaRC()" );

    return true;
}




bool proCIncluirWFAndamentoMensagemRC(st_AtdMsgRC* dados, st_vlAtdMsgRC* status)
{
    ULOG_START( "proCIncluirWFAndamentoMensagemRC()" );

    struct sqlca sqlca;

    if ( status->idAndamento == -1 )
    {
        ULOG("idAndamento nao fornecido");
        ULOG_END( "proCIncluirWFAndamentoMensagemRC()" );
        return false;
    }

    if ( status->idPessoaUsuarioBko == -1 )
    {
        ULOG("idPessoaUsuarioBko nao fornecido");
        ULOG_END( "proCIncluirWFAndamentoMensagemRC()" );
        return false;
    }

    if ( status->idUsuarioAlteracao == -1 )
    {
        ULOG("idUsuarioAlteracao nao fornecido");
        ULOG_END( "proCIncluirWFAndamentoMensagemRC()" );
        return false;
    }

    EXEC SQL BEGIN DECLARE SECTION;

        unsigned long idAndamento = dados->idAndamento;
        unsigned long idPessoaUsuario = dados->idPessoaUsuario;
        unsigned long idPessoaUsuarioBko = dados->idPessoaUsuarioBko;
        unsigned long idUsuarioAlteracao = dados->idUsuarioAlteracao;

        int inOrigem = dados->inOrigem;

        char *dtMensagem = dados->dtMensagem;
        char *dtUltimaAlteracao = dados->dtUltimaAlteracao;

        struct st_vlAtdMsgRC oStatus;

    EXEC SQL END DECLARE SECTION;

    memcpy(&oStatus, status, sizeof(oStatus));

    ULOG( "idAndamento=%u",idAndamento);

    ULOG( "idPessoaUsuario=%d",idPessoaUsuario );

    ULOG( "idPessoaUsuarioBko=%d",idPessoaUsuarioBko );

    ULOG( "inOrigem=%d",inOrigem );

    ULOG( "dtMensagem=[%s]",dtMensagem );

    ULOG( "dtUltimaAlteracao=[%s]",dtUltimaAlteracao );

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdMsgRC(&sqlca);
    EXEC SQL 
      INSERT INTO
          ATENDIMENTO.ANDAMENTOMENSAGEM
          (
              IDANDAMENTO
             ,IDPESSOAUSUARIO
             ,IDPESSOAUSUARIODESTINO
             ,DTMENSAGEM
             ,IDUSUARIOALTERACAO
             ,DTULTIMAALTERACAO
             ,INORIGEM
          )
          VALUES
          (
              :idAndamento
             ,:idPessoaUsuario
             ,:idPessoaUsuarioBko
             ,TO_DATE(:dtMensagem,'DD/MM/YYYY HH24:MI:SS')
             ,DECODE(:oStatus.idUsuarioAlteracao, -1, NULL,:idUsuarioAlteracao)
             ,DECODE(:oStatus.dtUltimaAlteracao, -1, NULL,TO_DATE(:dtUltimaAlteracao,'DD/MM/YYYY HH24:MI:SS'))
             ,DECODE(:oStatus.inOrigem, -1,1,:inOrigem)
          );

    ULOG_END( "proCIncluirWFAndamentoMensagemRC()" );

    return true;
}

void sql_error_WFAtdMsgRC( sqlca * sqlca )
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE( "sql_error_WFAtdMsgRC:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc );

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
