/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.2.3.6.2 $
 * @CVS     $Author: a5114878 $ - $Date: 2013/02/06 12:36:44 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"
#include "../include/cWFAtdDetalhe.h"

bool proCConsultaWFAndamentoAcsPC( long sIdAtendimento,  XMLGen *xml_g );
bool proCConsultaWFComentarioAcsPC( long sIdAtendimento,  XMLGen *xml_g );
void WFAtdDetalhe(sqlca*sqlca);

bool proCConsultaWFMigracaoAcsPC( char* sIdProcesso,  XMLGen *xml_g )
{
   ULOG_START("proCConsultaWFMigracaoAcsPC()"); 
   ULOG("Realizando Consulta Migracao ACS.");
   
   struct sqlca sqlca;
   
   EXEC SQL BEGIN DECLARE SECTION;

      char idProcessoFiltro[21];

      VARCHAR idAtendimento[21];
      int idSistemaOrigem;
      VARCHAR idProcesso[21];
      VARCHAR nmUsuarioGrupoBKO[256];
      VARCHAR nmUsuarioBKO[256];
      int inProcessoTecnico;
      VARCHAR obsAtendimento[256];
      VARCHAR nmClienteUsuario[256];
      int inClienteVIVO;
      VARCHAR nmTipoCliente[256];
      VARCHAR nmCPF_CNPJ[256];
      VARCHAR nmContato[256];
      VARCHAR nmTelefoneContato[256];
      VARCHAR nmEmailContato[256];
      VARCHAR nmTipoCarteira[256];
      VARCHAR nmSegmentacao[256];
      int idLinhaTelefonica;
      VARCHAR nrLinha[21];
      VARCHAR nmTipoServico[256];
      VARCHAR nmProcesso[256];
      VARCHAR dtTratamentoBKO[20];
      VARCHAR dtAtualizacao[20];
      VARCHAR dtImportacao[20];
      VARCHAR obsHistorico[4001];
      VARCHAR idPessoaDePara[21];
      int idTipoAtendimento;
      VARCHAR idAndamento[39];
      int idAtividade;
      int idContatoFolhaBaixa;
      VARCHAR dtAndamento[20];
      VARCHAR nmUsuarioGrupo[256];
      VARCHAR nmUsuario[256];
      VARCHAR dsTipoAtendimento[256];
      int idComentario;
      VARCHAR nmUsuarioGrupoMigracao[256];
      VARCHAR nmLoginUsuario[256];
      VARCHAR dtAbertura[20];
      VARCHAR Observacao[4001];
      int idTipoAtendimentoMigracao;


      short   i_idAtendimento = -1;
      short   i_nmUsuarioGrupoBKO = -1;
      short   i_nmUsuarioBKO= -1;
      short   i_obsAtendimento= -1;
      short   i_nmClienteUsuario= -1;
      short   i_nmTipoCliente= -1;
      short   i_nmCPF_CNPJ= -1;
      short   i_nmContato= -1;
      short   i_nrLinha= -1;
      short   i_idAndamento= -1;
      short   i_idPessoaDePara= -1;
      short   i_nmTelefoneContato= -1;
      short   i_nmEmailContato= -1;
      short   i_nmTipoCarteira= -1;
      short   i_nmSegmentacao= -1;
      short   i_idLinhaTelefonica = -1;
      short   i_nmTipoServico= -1;
      short   i_nmProcesso= -1;
      short   i_dtTratamentoBKO= -1;
      short   i_dtImportacao= -1;
      short   i_obsHistorico= -1;
      short   i_dtAndamento= -1;
      short   i_nmUsuarioGrupo= -1;
      short   i_nmUsuario= -1;
      short   i_dsTipoAtendimento= -1;
      short   i_nmUsuarioGrupoMigracao= -1;
      short   i_nmLoginUsuario= -1;
      short   i_dtAbertura= -1;
      short   i_Observacao= -1;
      short   i_dtAtualizacao= -1;
      short   i_idProcesso= -1;
      short   i_inProcessoTecnico= -1;
      short   i_idContatoFolhaBaixa= -1;
      short   i_idComentario= -1;

   EXEC SQL END DECLARE SECTION;
       
   strcpy(idProcessoFiltro, sIdProcesso);

   EXEC SQL WHENEVER SQLERROR  DO WFAtdDetalhe(&sqlca);
   ULOG("Procedemos a obter Consulat: %s", idProcessoFiltro);

	EXEC SQL SELECT 
			idAtendimento, 
			idSistemaOrigem, 
			nmUsuarioGrupoBKO, 
			nmUsuarioBKO, 
			inProcessoTecnico, 
			obsAtendimento, 
			nmClienteUsuario, 
			inClienteVIVO, 
			nmTipoCliente, 
			nmCPF_CNPJ, 
			nmContato, 
			nmTelefoneContato, 
			nmEmailContato, 
			nmTipoCarteira, 
			nmSegmentacao, 
			idLinhaTelefonica, 
			nrLinha, 
			nmTipoServico, 
			nmProcesso, 
			TO_CHAR(dtTratamentoBKO,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtAtualizacao,'dd/mm/yyyy hh24:mi'), 
			TO_CHAR(dtImportacao,'dd/mm/yyyy hh24:mi'), 
			obsHistorico, 
			idPessoaDePara, 
			idProcesso, 
			idTipoAtendimentoMigracao, 
			idAndamento, 
			idAtividade, 
			idContatoFolhaBaixa, 
			TO_CHAR(dtAndamento,'dd/mm/yyyy hh24:mi'), 
			nmUsuarioGrupo, 
			nmUsuario, 
			idTipoAtendimento, 
			dsTipoAtendimento, 
			idComentario, 
			nmUsuarioGrupoMigracao, 
			nmLoginUsuario, 
			TO_CHAR(dtAbertura,'dd/mm/yyyy hh24:mi'), 
			Observacao 
		INTO 
			 :idAtendimento:i_idAtendimento,
			 :idSistemaOrigem,
			 :nmUsuarioGrupoBKO:i_nmUsuarioGrupoBKO,
			 :nmUsuarioBKO:i_nmUsuarioBKO,
			 :inProcessoTecnico:i_inProcessoTecnico,
			 :obsAtendimento:i_obsAtendimento,
			 :nmClienteUsuario:i_nmClienteUsuario,
			 :inClienteVIVO,
			 :nmTipoCliente:i_nmTipoCliente,
			 :nmCPF_CNPJ:i_nmCPF_CNPJ,
			 :nmContato:i_nmContato,
			 :nmTelefoneContato:i_nmTelefoneContato,
			 :nmEmailContato:i_nmEmailContato,
			 :nmTipoCarteira:i_nmTipoCarteira,
			 :nmSegmentacao:i_nmSegmentacao,
			 :idLinhaTelefonica:i_idLinhaTelefonica,
			 :nrLinha:i_nrLinha,
			 :nmTipoServico:i_nmTipoServico,
			 :nmProcesso:i_nmProcesso,
			 :dtTratamentoBKO:i_dtTratamentoBKO,
			 :dtAtualizacao:i_dtAtualizacao,
			 :dtImportacao:i_dtImportacao,
			 :obsHistorico:i_obsHistorico,
			 :idPessoaDePara:i_idPessoaDePara,
			 :idProcesso:i_idProcesso,
			 :idTipoAtendimentoMigracao,
			 :idAndamento:i_idAndamento,
			 :idAtividade,
			 :idContatoFolhaBaixa:i_idContatoFolhaBaixa,
			 :dtAndamento:i_dtAndamento,
			 :nmUsuarioGrupo:i_nmUsuarioGrupo,
			 :nmUsuario:i_nmUsuario,
			 :idTipoAtendimento,
			 :dsTipoAtendimento:i_dsTipoAtendimento,
			 :idComentario:i_idComentario,
			 :nmUsuarioGrupoMigracao:i_nmUsuarioGrupoMigracao,
			 :nmLoginUsuario:i_nmLoginUsuario,
			 :dtAbertura:i_dtAbertura,
			 :Observacao:i_Observacao
		FROM 
			Atendimento.MigracaoACSV01 
		WHERE 
			idProcesso = :idProcessoFiltro
			AND (idContatoFolhaBaixa IS NULL OR idContatoFolhaBaixa = 0)
			AND ROWNUM <= 1;

	if ( i_inProcessoTecnico == -1 )
		inProcessoTecnico = 0;
         
	if ( i_idContatoFolhaBaixa == -1 )
		idContatoFolhaBaixa = 0;
         
	if ( i_idComentario == -1 )
		idComentario = 0;
         
	if ( i_idLinhaTelefonica == -1 )
		idLinhaTelefonica = 0;
         
	CONVIND(idAtendimento,i_idAtendimento);
	CONVIND(nmUsuarioGrupoBKO,i_nmUsuarioGrupoBKO);
	CONVIND(nmUsuarioBKO,i_nmUsuarioBKO);
	CONVIND(obsAtendimento,i_obsAtendimento);
	CONVIND(nmClienteUsuario,i_nmClienteUsuario);
	CONVIND(nmTipoCliente,i_nmTipoCliente);
	CONVIND(nmCPF_CNPJ,i_nmCPF_CNPJ);
	CONVIND(nmContato,i_nmContato);
	CONVIND(nmTelefoneContato,i_nmTelefoneContato);
	CONVIND(nmEmailContato,i_nmEmailContato);
	CONVIND(nmTipoCarteira,i_nmTipoCarteira);
	CONVIND(nmSegmentacao,i_nmSegmentacao);
	CONVIND(dtAbertura,i_dtAbertura);

	CONVIND(nmTipoServico,i_nmTipoServico);
	CONVIND(nrLinha,i_nrLinha);
	CONVIND(idPessoaDePara,i_idPessoaDePara);
	CONVIND(nmProcesso,i_nmProcesso);
	CONVIND(nmUsuarioGrupo,i_nmUsuarioGrupo);
	CONVIND(nmUsuario,i_nmUsuario);
	CONVIND(nmUsuarioGrupoMigracao,i_nmUsuarioGrupoMigracao);
	CONVIND(nmLoginUsuario,i_nmLoginUsuario);
	CONVIND(Observacao,i_Observacao);
	CONVIND(dtAtualizacao,i_dtAtualizacao);
	CONVIND(idProcesso,i_idProcesso);
	CONVIND(dtTratamentoBKO,i_dtTratamentoBKO);
	CONVIND(dtImportacao,i_dtImportacao);
	CONVIND(obsHistorico,i_obsHistorico);
	CONVIND(dtAndamento,i_dtAndamento);
	CONVIND(dsTipoAtendimento,i_dsTipoAtendimento);

        xml_g->createTag("AtendimentoDetalheACSMigracaoVO");
        xml_g->addProp("xmlns","workflow.fo.vivo.com.br/vo");
		 xml_g->addItem("idAtendimento", (char*)idAtendimento.arr );
		 xml_g->addItem("idSistemaOrigem", idSistemaOrigem );
		 xml_g->addItem("idProcesso", (char*)idProcesso.arr );
		 xml_g->addItem("nmUsuarioGrupoBKO", (char*)nmUsuarioGrupoBKO.arr );
		 xml_g->addItem("nmUsuarioBKO", (char*)nmUsuarioBKO.arr );
		 xml_g->addItem("inProcessoTecnico", inProcessoTecnico );
		 xml_g->addItem("obsAtendimento", (char*)obsAtendimento.arr );
		 xml_g->addItem("nmClienteUsuario", (char*)nmClienteUsuario.arr );
		 xml_g->addItem("inClienteVIVO", inClienteVIVO );
		 xml_g->addItem("nmTipoCliente", (char*)nmTipoCliente.arr );
		 xml_g->addItem("nmCPFCNPJ", (char*)nmCPF_CNPJ.arr );
		 xml_g->addItem("nmContato", (char*)nmContato.arr );
		 xml_g->addItem("nmTelefoneContato", (char *)nmTelefoneContato.arr );
		 xml_g->addItem("nmEmailContato", (char*)nmEmailContato.arr );
		 xml_g->addItem("nmTipoCarteira", (char*)nmTipoCarteira.arr );
		 xml_g->addItem("nmSegmentacao", (char *)nmSegmentacao.arr );
		 xml_g->addItem("idLinhaTelefonica", idLinhaTelefonica );
		 xml_g->addItem("nrLinha", (char*)nrLinha.arr );
		 xml_g->addItem("nmTipoServico", (char*)nmTipoServico.arr );
		 xml_g->addItem("nmProcesso", (char*)nmProcesso.arr );
		 xml_g->addItem("dtTratamentoBKO", (char*)dtTratamentoBKO.arr );
		 xml_g->addItem("dtAtualizacao", (char*)dtAtualizacao.arr );
		 xml_g->addItem("dtImportacao", (char*)dtImportacao.arr );
		 xml_g->addItem("obsHistorico", (char*)obsHistorico.arr );
		 xml_g->addItem("idPessoaDePara", (char*)idPessoaDePara.arr );
		 xml_g->addItem("idTipoAtendimento", idTipoAtendimento );

        ULOG("Procedemos a obter dados.");
		proCConsultaWFAndamentoAcsPC(atol((char*)idAtendimento.arr), xml_g);
		proCConsultaWFComentarioAcsPC(atol((char*)idAtendimento.arr), xml_g);

		if ( strlen((char*)dsTipoAtendimento.arr) > 0 )
		{
			xml_g->createTag("TipoAtendimentoVO");
			        xml_g->addItem("dsTipoAtendimento", (char*)dsTipoAtendimento.arr);
			xml_g->closeTag();
		}
	xml_g->closeTag();
    ULOG_END("proCConsultaWFMigracaoAcsPC()"); 
	return true;
}

bool proCConsultaWFAndamentoAcsPC( long sIdAtendimento,  XMLGen *xml_g )
{
   ULOG_END("proCConsultaWFAndamentoAcsPC()"); 
   ULOG("Realizando Consulta Andamento ACS.");
   
   struct sqlca sqlca;
   
   EXEC SQL BEGIN DECLARE SECTION;

      long idAtendimento = sIdAtendimento;
      VARCHAR idAndamento[39];
      int idAtividade;
      int idContatoFolhaBaixa;
      VARCHAR dtAndamento[20];
      VARCHAR nmUsuarioGrupo[256];
      VARCHAR nmUsuario[256];


      short   i_idAndamento= -1;
      short   i_idAtividade = -1;
      short   i_idContatoFolhaBaixa= -1;
      short   i_dtAndamento= -1;
      short   i_nmUsuarioGrupo= -1;
      short   i_nmUsuario= -1;

   EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdDetalhe(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaAndamento CURSOR FOR 
	SELECT
		idAndamento,
		idAtividade,
		TO_CHAR(dtAndamento, 'DD/MM/YYYY HH24:MI'),
		idContatoFolhaBaixa,
		nmUsuarioGrupo,
		nmUsuario
	FROM 
		ATENDIMENTO.ANDAMENTOMIGRACAO
	WHERE
		idAtendimento = :idAtendimento;

    EXEC SQL OPEN consultaAndamento;

    while (true)
    {
        EXEC SQL FETCH consultaAndamento INTO :idAndamento:i_idAndamento,
                                     :idAtividade:i_idAtividade,
                                     :dtAndamento:i_dtAndamento,
                                     :idContatoFolhaBaixa:i_idContatoFolhaBaixa,
                                     :nmUsuarioGrupo:i_nmUsuarioGrupo,
                                     :nmUsuario:i_nmUsuario;

	CONVIND(idAndamento,i_idAndamento);
	CONVIND(dtAndamento,i_dtAndamento);
	CONVIND(nmUsuarioGrupo,i_nmUsuarioGrupo);
	CONVIND(nmUsuario,i_nmUsuario);

	     xml_g->createTag("AtendimentoDetalheACSAndamentoVO");
      	          xml_g->addItem("idAndamento", (char*)idAndamento.arr);
      	          xml_g->addItem("idAtividade", idAtividade);
      	          xml_g->addItem("idContatoFolhaBaixa", idContatoFolhaBaixa);
      	          xml_g->addItem("dtAndamento", (char*)dtAndamento.arr);
      	          xml_g->addItem("nmUsuarioGrupo",(char*)nmUsuarioGrupo.arr);
      	          xml_g->addItem("nmUsuario", (char*)nmUsuario.arr);
              xml_g->closeTag();
    }
    EXEC SQL CLOSE consultaAndamento;
    
    ULOG_END("proCConsultaWFAndamentoAcsPC()"); 
    
    return true;
}

bool proCConsultaWFComentarioAcsPC( long sIdAtendimento,  XMLGen *xml_g )
{
   ULOG_START("proCConsultaWFComentarioAcsPC()"); 
   ULOG("Realizando Consulta Comentario ACS.");
   
   struct sqlca sqlca;
   
   EXEC SQL BEGIN DECLARE SECTION;

      long idAtendimento = sIdAtendimento;
      VARCHAR idComentario[21];
      VARCHAR dtAbertura[20];
      VARCHAR nmUsuarioGrupo[256];
      VARCHAR nmLoginUsuario[256];
      VARCHAR observacao[4001];


      short   i_idComentario= -1;
      short   i_dtAbertura = -1;
      short   i_nmUsuarioGrupo= -1;
      short   i_nmLoginUsuario= -1;
      short   i_observacao= -1;

   EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO WFAtdDetalhe(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL DECLARE consultaComentario CURSOR FOR 
	SELECT
		idComentario,
		nmUsuarioGrupo,
		nmLoginUsuario,
		TO_CHAR(dtAbertura, 'DD/MM/YYYY HH24:MI'),
		observacao
	FROM 
		ATENDIMENTO.COMENTARIOSMIGRACAO
	WHERE
		idAtendimento = :idAtendimento;

    EXEC SQL OPEN consultaComentario;

    while (true)
    {
        EXEC SQL FETCH consultaComentario INTO :idComentario:i_idComentario,
                                     :nmUsuarioGrupo:i_nmUsuarioGrupo,
                                     :nmLoginUsuario:i_nmLoginUsuario,
                                     :dtAbertura:i_dtAbertura,
                                     :observacao:i_observacao;
	CONVIND(idComentario,i_idComentario);
	CONVIND(dtAbertura,i_dtAbertura);
	CONVIND(nmUsuarioGrupo,i_nmUsuarioGrupo);
	CONVIND(nmLoginUsuario,i_nmLoginUsuario);
	CONVIND(observacao,i_observacao);
	     xml_g->createTag("AtendimentoDetalheACSComentariosVO");
      	          xml_g->addItem("idComentario", (char*)idComentario.arr);
      	          xml_g->addItem("nmUsuarioGrupo",(char*)nmUsuarioGrupo.arr);
      	          xml_g->addItem("nmLoginUsuario", (char*)nmLoginUsuario.arr);
      	          xml_g->addItem("dtAbertura", (char*)dtAbertura.arr);
      	          xml_g->addItem("observacao", (char*)observacao.arr);
              xml_g->closeTag();
    }
    EXEC SQL CLOSE consultaComentario;
    ULOG_END("proCConsultaWFComentarioAcsPC()"); 
    return true;
}

void WFAtdDetalhe(sqlca*sqlca)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("WFAtdDetalhe:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
