
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/cLstPerfil.h"
#include "../../../commons/queryMacro.h"
#include "../../../commons/SmallString.h"
#include "../../../commons/msgPadrao.h"

// Prototipos
void sql_error_LstPerfil( sqlca * sqlca );
void proCListaPerfil
( 
    st_LstPerfil * dados,
    st_vlLstPerfil * status,
    XMLGen * Saida  
);

void proCListaNomePerfil
( 
    char * sNomePerfil, 
    st_LstPerfil * dados,
    st_vlLstPerfil * status,
    XMLGen * Saida 
);



//void proCListaPerfil( VEC_LSTPERFIL * pLstPerfil )
void proCListaPerfil
( 
    st_LstPerfil * dados,
    st_vlLstPerfil * status,
    XMLGen * Saida  
)
{
    ULOG_START("proCListaPerfil()");
	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;

        char *query;
        unsigned long idPerfil;
        int           associado;
        VARCHAR       nmPerfil[256];
        VARCHAR       dtExclusao[256];


        short         i_nmPerfil;
        short         i_dtExclusao;

        int           iinAtivo;
        short         sinAtivo;

	EXEC SQL END DECLARE SECTION;

    SmallString sQuery;

    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    sQuery = 
        "SELECT "
	          "IDPERFIL,"
	          "NMPERFIL,"
              "TO_CHAR(DTEXCLUSAO,'DD/MM/YYYY') AS DTEXCLUSAO, "
              "NVL(INATIVO, 0 ) "
        "FROM "
        "( "
            "SELECT "
                "ROWNUM AS NLIN,"
                "IDPERFIL,"
                "NMPERFIL,"
                "DTEXCLUSAO, "
	            "INATIVO "
            "FROM "
	            "CONTATOADM.PERFIL "
            "WHERE "
	            "IDPERFIL > 0 "
	        "AND "
	        	"DTEXCLUSAO IS NULL "
         ") "
         "WHERE NLIN >= ";
         sQuery += linIni;
         sQuery += " AND NLIN <= ";
         sQuery += linFin;
         sQuery += 
            "ORDER BY "
                 "NMPERFIL ";


    query = sQuery;

    ULOG( "Query [%s]",query );

    EXEC SQL WHENEVER SQLERROR DO sql_error_LstPerfil( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE ConsultaPerfil CURSOR FOR recebeQuery;

    EXEC SQL OPEN ConsultaPerfil;

    int nRegs = 0;

    for( ;; )
    {

        nRegs++;

        EXEC SQL FETCH ConsultaPerfil INTO :idPerfil,
                                           :nmPerfil:i_nmPerfil,
                                           :dtExclusao:i_dtExclusao,
                                           :iinAtivo:sinAtivo;


        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

		CONVIND( nmPerfil,i_nmPerfil );
		CONVIND( dtExclusao,i_dtExclusao );

        EXEC SQL
             SELECT 
                COUNT(1)
             INTO
                :associado 
             FROM 
                ContatoAdm.GrupoPerfil 
             WHERE 
                idPerfil = :idPerfil;

        Saida->createTag( "Perfil" );
           Saida->addItem( "idPerfil",idPerfil );
           Saida->addItem( "nmPerfil",(char*)nmPerfil.arr );
		   //
           //  Incidência 3267 - GO to RJ
           //  No caso do perfil estar desabilitado,
           //  mostrar ao usuario que nao existe mais associacao,
           //  mesmo prevalecendo associacao internamente no sistema.
           //
           //  2006-04-06 @ Marcelo @
		   if ( iinAtivo == 1 )
		   {
			   if ( associado > 0 )
			   {
				   Saida->addItem( "associado",1 );
			   }
			   else
			   {
				   Saida->addItem( "associado",0 );
			   }
		   }
           else //  -> de qqer forma mostra que nao estah associado
           {
			   Saida->addItem( "associado",0 );
           }

           Saida->addItem( "habilitado", iinAtivo );

        Saida->closeTag();

    }
    Saida->addItem("inFim", sqlca.sqlcode == 1403 ? true:false);

    EXEC SQL CLOSE ConsultaPerfil;

    ULOG_END("proCListaPerfil()");

}




void proCListaNomePerfil
( 
char * sNomePerfil, 
st_LstPerfil * dados,
st_vlLstPerfil * status,
XMLGen * Saida 
)
{
    ULOG_START("proCListaNomePerfil()");
	struct sqlca sqlca;
	
	SmallString query;

	EXEC SQL BEGIN DECLARE SECTION;

		char *        queryChar;
        unsigned long idPerfil;
        int           associado;
        VARCHAR       nmPerfil[256];
        VARCHAR       dtExclusao[256];
        short         i_nmPerfil;
        short         i_dtExclusao;
        int           iinAtivo;
        short         sinAtivo;

	EXEC SQL END DECLARE SECTION;


    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    query = 
        "SELECT "
	          "IDPERFIL,"
	          "NMPERFIL,"
              "TO_CHAR(DTEXCLUSAO,'DD/MM/YYYY') AS DTEXCLUSAO, "
              "NVL(INATIVO, 0 ) "
        "FROM "
        "( "
            "SELECT "
                "ROWNUM AS NLIN,"
                "IDPERFIL, "
                "NMPERFIL, "
                "TO_CHAR(DTEXCLUSAO,'DD/MM/YYYY') AS DTEXCLUSAO, "
                "INATIVO "
            "FROM "
	            "CONTATOADM.PERFIL "
            "WHERE "
	            "IDPERFIL > 0 "
	        "AND "
	        	"DTEXCLUSAO IS NULL "
            "AND "
                "UPPER(NMPERFIL) ";
		    
            query += "LIKE UPPER ('%%";
		    query += sNomePerfil;
		    query += "%%') ";

         query += ") ";
         query += "WHERE NLIN >= ";
         query += linIni;
         query += " AND NLIN <= ";
         query += linFin;
         query += " ORDER BY NMPERFIL";

	queryChar = query;
	
    

    ULOG("Executando Query [%s]",queryChar);

    EXEC SQL WHENEVER SQLERROR DO sql_error_LstPerfil( &sqlca );
    EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL PREPARE Consulta FROM :queryChar;
    EXEC SQL DECLARE ConsultaNomePerfil CURSOR FOR Consulta;


    EXEC SQL OPEN ConsultaNomePerfil;

    int nRegs = 0;

    for( ;; )
    {
        nRegs++;

        EXEC SQL 
        FETCH 
        	ConsultaNomePerfil 
        INTO 
        	:idPerfil,
            :nmPerfil:i_nmPerfil,
            :dtExclusao:i_dtExclusao,
            :iinAtivo:sinAtivo;

        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

		CONVIND( nmPerfil,i_nmPerfil );
		CONVIND( dtExclusao,i_dtExclusao );

        EXEC SQL
             SELECT 
                COUNT(1)
             INTO
                :associado 
             FROM 
                ContatoAdm.GrupoPerfil 
             WHERE 
                idPerfil = :idPerfil;

        Saida->createTag( "Perfil" );
           Saida->addItem( "idPerfil",idPerfil );
           Saida->addItem( "nmPerfil",(char*)nmPerfil.arr );
		   //
           //  Incidência 3267 - GO to RJ
           //  No caso do perfil estar desabilitado,
           //  mostrar ao usuario que nao existe mais associacao,
           //  mesmo prevalecendo associacao internamente no sistema.
           //
           //  2006-04-06 @ Marcelo @
		   if ( iinAtivo == 1 )
		   {
			   if ( associado > 0 )
			   {
				   Saida->addItem( "associado",1 );
			   }
			   else
			   {
				   Saida->addItem( "associado",0 );
			   }
		   }
           else //  -> de qqer forma mostra que nao estah associado
           {
			   Saida->addItem( "associado",0 );
           }

           Saida->addItem( "habilitado", iinAtivo );

        Saida->closeTag();

    }

    Saida->addItem("inFim", sqlca.sqlcode == 1403 ? true:false);

    EXEC SQL CLOSE ConsultaNomePerfil;

    ULOG_END("proCListaNomePerfil()");

}




void sql_error_LstPerfil( sqlca * sqlca )
{
    ULOGE("sql_error_LstPerfil -> sqlcode=%d,sqlerrmc=%.70s",sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	throw new 
        TuxBasicOraException(
            sqlca->sqlcode,
            sqlca->sqlerrm.sqlerrmc,
            sqlca->sqlerrm.sqlerrml
            );
}
