/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:59 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../include/cWFAtdPesqEstSubEx.h"
#include "../../../commons/SmallString.h"

void WFAtdPesqEstadoEstadoErro(sqlca*sqlca);

void proCConsultaWFEstadoSubEstadoEx(st_AtdPesqEstSub *dados
                                  ,st_vlAtdPesqEstSub *status
                                  ,XMLGen *saida)
{
    ULOG_START("proCConsultaWFEstadoSubEstadoEx()");

    bool tagWFEstadoVOAberta = false;
    int idEstadoAnterior = -1;
    SmallString sql;
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idEstado;
		int idSubEstado;
		VARCHAR sgEstado[256];
		VARCHAR dsEstado[256];
		VARCHAR dsSubEstado[256];
		VARCHAR sgSubEstado[256];
		int inFiltro;

        int idFiltroEstado = dados->idEstado;
        int idFiltroSubEstado = dados->idSubEstado;

        int idStatusFiltroEstado = status->idEstado;
        int idStatusFiltroSubEstado = status->idSubEstado;

		short i_idEstado;
		short i_idSubEstado;
		short i_sgEstado;
		short i_dsEstado;
		short i_dsSubEstado;
		short i_sgSubEstado;
		short i_inFiltro;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO WFAtdPesqEstadoEstadoErro(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	EXEC SQL DECLARE cursorConsEstSubEst CURSOR FOR
        SELECT 
            E.IDESTADO,E.DSESTADO,E.SGESTADO, E.INFILTRO,
            SE.IDSUBESTADO,SE.DSSUBESTADO,SE.SGSUBESTADO 
        FROM 
            WORKFLOW.AGRUPAMENTOESTADO AE,
            WORKFLOW.ESTADO E,
            WORKFLOW.SUBESTADO SE
        WHERE 
            E.IDESTADO = AE.IDESTADO
        AND AE.IDSUBESTADO = SE.IDSUBESTADO
        AND SGESTADO NOT LIKE 'RCE%'
        AND E.SGESTADO NOT LIKE 'POUT_%'
        AND SE.SGSUBESTADO NOT LIKE 'POUT_%'
        AND AE.IDESTADO = DECODE(:idStatusFiltroEstado,-1,AE.IDESTADO,:idFiltroEstado)
        AND AE.IDSUBESTADO = DECODE(:idStatusFiltroSubEstado,-1,AE.IDSUBESTADO,:idFiltroSubEstado)
        ORDER BY
            E.IDESTADO,E.DSESTADO,SE.IDSUBESTADO,SE.DSSUBESTADO;

	EXEC SQL OPEN cursorConsEstSubEst;

	saida->createTag("WFEstadosVO");
	saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");

	while (true)
	{
		EXEC SQL FETCH cursorConsEstSubEst INTO 
									:idEstado:i_idEstado, 
									:dsEstado:i_dsEstado, 
									:sgEstado:i_sgEstado, 
									:inFiltro:i_inFiltro, 
									:idSubEstado:i_idSubEstado, 
									:dsSubEstado:i_dsSubEstado, 
									:sgSubEstado:i_sgSubEstado;
		CONVIND(sgEstado,i_sgEstado);
		CONVIND(dsEstado,i_dsEstado);
		CONVIND(dsSubEstado,i_dsSubEstado);
		CONVIND(sgSubEstado,i_sgSubEstado);

        if ( idEstado != idEstadoAnterior )
        {
            if ( tagWFEstadoVOAberta ) saida->closeTag();

	        saida->createTag("WFEstadoVO");
		        saida->addItem("idEstado",idEstado);
		        saida->addItem("dsEstado",(char*)dsEstado.arr);
		        saida->addItem("sgEstado",(char*)sgEstado.arr);
		        saida->addItem("inFiltro",inFiltro);

            tagWFEstadoVOAberta = true;

            idEstadoAnterior = idEstado;
        }

	    saida->createTag("WFSubEstadoVO");
			saida->addItem("idSubEstado",idSubEstado);
			saida->addItem("dsSubEstado",(char*)dsSubEstado.arr);
			saida->addItem("sgSubEstado",(char*)sgSubEstado.arr);
		saida->closeTag();
	}

    if ( tagWFEstadoVOAberta ) saida->closeTag();

	saida->closeTag();

	EXEC SQL CLOSE cursorConsEstSubEst;

    ULOG_END("proCConsultaWFEstadoSubEstadoEx()");
}

void proCConsultaWFEstadoSubEstadoPoEx(st_AtdPesqEstSub *dados
                                    ,st_vlAtdPesqEstSub *status
                                    ,XMLGen *saida)
{
    ULOG_START("proCConsultaWFEstadoSubEstadoPoEx()");

    bool tagWFEstadoVOAberta = false;
    int idEstadoAnterior = -1;
    SmallString sql;
	struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

		int idEstado;
		int idSubEstado;
		VARCHAR sgEstado[256];
		VARCHAR dsEstado[256];
		VARCHAR dsSubEstado[256];
		VARCHAR sgSubEstado[256];
		int inFiltro;

        int idFiltroEstado = dados->idEstado;
        int idFiltroSubEstado = dados->idSubEstado;

        int idStatusFiltroEstado = status->idEstado;
        int idStatusFiltroSubEstado = status->idSubEstado;

		short i_idEstado;
		short i_idSubEstado;
		short i_sgEstado;
		short i_dsEstado;
		short i_dsSubEstado;
		short i_sgSubEstado;
		short i_inFiltro;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO WFAtdPesqEstadoEstadoErro(&sqlca);
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	EXEC SQL DECLARE cursorConsEstSubEstPo CURSOR FOR
        SELECT 
            E.IDESTADO,E.DSESTADO,E.SGESTADO, E.INFILTRO,
            SE.IDSUBESTADO,SE.DSSUBESTADO,SE.SGSUBESTADO 
		FROM 
            WORKFLOW.AGRUPAMENTOESTADO AE,
            WORKFLOW.ESTADO E,
            WORKFLOW.SUBESTADO SE
        WHERE 
            AE.IDESTADO = E.IDESTADO
        AND AE.IDSUBESTADO = SE.IDSUBESTADO
        AND (E.SGESTADO LIKE 'POUT_%' OR SE.SGSUBESTADO LIKE 'POUT_%')
        AND AE.IDESTADO = DECODE(:idStatusFiltroEstado,-1,AE.IDESTADO,:idFiltroEstado)
        AND AE.IDSUBESTADO = DECODE(:idStatusFiltroSubEstado,-1,AE.IDSUBESTADO,:idFiltroSubEstado)
		ORDER BY
			E.DSESTADO,SE.DSSUBESTADO;

	EXEC SQL OPEN cursorConsEstSubEstPo;

	saida->createTag("WFEstadosVO");
	saida->addProp("xmlns","workflow.fo.vivo.com.br/vo");

	while (true)
	{
		EXEC SQL FETCH cursorConsEstSubEstPo INTO 
									:idEstado:i_idEstado, 
									:dsEstado:i_dsEstado, 
									:sgEstado:i_sgEstado, 
									:inFiltro:i_inFiltro, 
									:idSubEstado:i_idSubEstado, 
									:dsSubEstado:i_dsSubEstado, 
									:sgSubEstado:i_sgSubEstado;
		CONVIND(sgEstado,i_sgEstado);
		CONVIND(dsEstado,i_dsEstado);
		CONVIND(dsSubEstado,i_dsSubEstado);
		CONVIND(sgSubEstado,i_sgSubEstado);

        if ( idEstado != idEstadoAnterior )
        {
            if ( tagWFEstadoVOAberta ) saida->closeTag();

	        saida->createTag("WFEstadoVO");
		        saida->addItem("idEstado",idEstado);
		        saida->addItem("dsEstado",(char*)dsEstado.arr);
		        saida->addItem("sgEstado",(char*)sgEstado.arr);
		        saida->addItem("inFiltro",inFiltro);

            tagWFEstadoVOAberta = true;

            idEstadoAnterior = idEstado;
        }

	    saida->createTag("WFSubEstadoVO");
			saida->addItem("idSubEstado",idSubEstado);
			saida->addItem("dsSubEstado",(char*)dsSubEstado.arr);
			saida->addItem("sgSubEstado",(char*)sgSubEstado.arr);
		saida->closeTag();
	}

    if ( tagWFEstadoVOAberta ) saida->closeTag();

	saida->closeTag();

    ULOG_END("proCConsultaWFEstadoSubEstadoPoEx()");

	EXEC SQL CLOSE cursorConsEstSubEstPo;
}

void WFAtdPesqEstadoEstadoErro(sqlca*sqlca)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("WFAtdPesqEstadoEstadoErro:sqlcode=%d,sqlerrmc=%.70s"
                              ,sqlca->sqlcode
                              ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
}
