/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:34:22 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/queryMacro.h"
#include "../../../commons/msgPadrao.h"

#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtendimentoRel4.h"

// Declara as estruturas compatíveis ao ProC.
EXEC SQL BEGIN DECLARE SECTION;
#define MAXCOLUNAS  8
#define COL_FIXAS   2
EXEC SQL END DECLARE SECTION;

// Vetor contendo valores lógicos onde cada item representa uma coluna da clausula select
// sendo executada; Se o valor do vetor respectivo a coluna = true; é gerada uma tag no
// xml de saida respectiva ao dado da coluna, mesmo que o valor do dado seja = NULL.
// Caso contrário se o valor do vetor for diferente de true, a coluna não foi solicitada
// na clausula select e não é gerada uma saida xml para a coluna.
bool bColunas[MAXCOLUNAS];

void MontarQuebra(string &idColunas
                 ,string &group
                 ,string &nmColuna
                 ,DOMNode *entrada
                 ,char *dnode
                 ,st_AtendimentoRel *dados
                 ,st_vlAtendimentoRel *status);

void WFAtdRelCompletarWhereRel4(string &where,DOMNode *entrada,char *dnode);

bool proCExecutarRelatorio4( st_AtendimentoRel *dados
                           , st_vlAtendimentoRel *status
                           , XMLGen *saida
                           , DOMNode *dnode )
{
    char valor[32];
    struct sqlca sqlca;
    string strQuery;
    string idColunasTmp;
    string idColunasTmp1;
    string where;
    string group;
    string nmColuna;
    int linha=0;
    int i;

    if ( !dados )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !status )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !saida )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    // Gera os filtros
    if( -1 != status->idOperadora )
    {
        sprintf(valor,"%d",dados->idOperadora);
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->idRegional )
    {
        sprintf(valor,"%d",dados->idRegional);
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->idUF )
    {
        sprintf(valor,"%d",dados->idUF);
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.IDUFOPERADORA=" + (string)valor;
    }

    if( -1 != status->dtInicio )
    {
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.DTABERTURA >= (SELECT TO_DATE('" + (string)dados->dtInicio + "','DD/MM/YYYY') FROM DUAL)";
    }

    if( -1 != status->dtFim )
    {
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.DTABERTURA <= (SELECT TO_DATE('" + (string)dados->dtFim + "','DD/MM/YYYY')  FROM DUAL)";
    }

    if( -1 != status->idCargo )
    {
        sprintf(valor,"%d",dados->idCargo);
        if (where.size()) { where += " AND "; }
    where += "idGrupo IN (SELECT DISTINCT UG.idGrupo "
                           "FROM "
                                "ORGANOGRAMA.HIERARQUIADEPTOPESSOA HDP, "
                                "ACESSO.USUARIOGRUPO UG, "
                                "(SELECT NC.IDNIVELCARGO "
                                   "FROM "
                                        "ORGANOGRAMA.NIVELCARGO NC, "
                                        "(SELECT idNivel "
                                           "FROM ORGANOGRAMA.NIVELHIERARQUIA H "
                                     "START WITH "
                                                "h.idNivelPai = (SELECT IDNIVEL "
                                                                  "FROM ORGANOGRAMA.NIVELCARGO NCR "
                                                                 "WHERE NCR.IDNIVELCARGO =" 
                                                                                + (string)valor + ") "
                                     "CONNECT BY "
                                                "h.idNivelPai = PRIOR h.idNivel) NV "
                                          "WHERE NV.IDNIVEL = NC.IDNIVEL) NCH "
                                  "WHERE (HDP.IDNIVELCARGO = NCH.IDNIVELCARGO  "
                                     "OR HDP.IDNIVELCARGO = " + (string)valor + ") "
                                    "AND HDP.IDPESSOA = UG.IDPESSOAUSUARIO "
                                    "AND UG.INSUPERVISOR = 1) ";    
    }
    
    if( -1 != status->idGrupo )
    {
        sprintf(valor,"%d",dados->idGrupo);
        if (where.size()) where += "\n\t\t\t\t\tAND ";
        where += " ATDRELQTMOTREPREBKO.IDGRUPO=" + (string)valor;
    }

    char linIni[32],linFin[32];
    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    WFAtdRelCompletarWhereRel4(where,dnode,"StatusUsuarioVO");
    //WFAtdRelCompletarWhereRel4(where,dnode,"WFEstadoVO");
    WFAtdRelCompletarWhereRel4(where,dnode,"FiltroDetalhe");

    MontarQuebra(idColunasTmp,group,nmColuna,dnode,"WFRelatoriosQuebraVO",dados,status);

    if (group.size()) group += ",";
    group += "DSMOTIVO";

    idColunasTmp1 = idColunasTmp + "DSMOTIVO,QTFECHADOS";

    strQuery =
   "\nSELECT " + idColunasTmp + "DSMOTIVO,QTFECHADOS "
   "\nFROM "
   "\n("
       "\n\tSELECT "
           "\n\tROWNUM AS NLIN," + idColunasTmp + "DSMOTIVO,QTFECHADOS "
       "\n\tFROM "
       "\n\t("
           "\n\t\tSELECT " + idColunasTmp + "DSMOTIVO,QTFECHADOS "
           "\n\t\tFROM "
           "\n\t\t("
               "\n\t\t\tSELECT " + idColunasTmp + "DSMOTIVO,SUM(QTFECHADOS) AS QTFECHADOS "
               "\n\t\t\tFROM "
               "\n\t\t\t("
                   "\n\t\t\t\tSELECT "
                          "\n\t\t\t\t\t(SELECT GRUPO.NMGRUPO FROM ACESSO.GRUPO GRUPO WHERE GRUPO.IDGRUPO = PRE4.IDGRUPO) AS NMGRUPO,"
                          "\n\t\t\t\t\t(SELECT PESSOA.NMNOME FROM CUSTOMER.PESSOA PESSOA WHERE PESSOA.IDPESSOA = PRE4.IDPESSOAUSUARIO) AS NMNOME,"
                          "\n\t\t\t\t\t(SELECT USUARIO.NMLOGINUSUARIO FROM ACESSO.USUARIO USUARIO WHERE USUARIO.IDPESSOAUSUARIO = PRE4.IDPESSOAUSUARIO) AS NMLOGINUSUARIO,"
                          "\n\t\t\t\t\t(SELECT UF.NMUF FROM CUSTOMER.UFOPERADORA UFOPERADORA,APOIO.UF UF "
                            "WHERE PRE4.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
                              "AND UFOPERADORA.IDUF = UF.IDUF) AS UF,"
                          "\n\t\t\t\t\t(SELECT GRUPOOPERADORA.NMGRUPOOPERADORA "
                            "FROM CUSTOMER.UFOPERADORA UFOPERADORA,CUSTOMER.GRUPOOPERADORA GRUPOOPERADORA,CUSTOMER.OPERADORA OPERADORA "
                            "WHERE PRE4.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA "
                              "AND UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA "
                              "AND OPERADORA.IDGRUPOOPERADORA = GRUPOOPERADORA.IDGRUPOOPERADORA) AS NMGRUPOOPERADORA,"
                          "\n\t\t\t\t\t(SELECT STATUSUSUARIO.SGSTATUSUSUARIO FROM APOIO.STATUSUSUARIO STATUSUSUARIO "
                            "WHERE STATUSUSUARIO.IDSTATUSUSUARIO = PRE4.IDSTATUSUSUARIO) AS SGSTATUSUSUARIO, "
                          "\n\t\t\t\t\t(SELECT MOTIVO.DSMOTIVO FROM ATENDIMENTO.MOTIVO WHERE MOTIVO.IDMOTIVO = PRE4.IDMOTIVO) AS DSMOTIVO,"
                          "\n\t\t\t\t\tQTFECHADOS"
                   "\n\t\t\t\tFROM"
                   "\n\t\t\t\t( "
                       "\n\t\t\t\t\tSELECT ATDRELQTMOTREPREBKO.CDAREAREGISTRO,"
                              "\n\t\t\t\t\t\tATDRELQTMOTREPREBKO.IDUFOPERADORA,"
                              "\n\t\t\t\t\t\tATDRELQTMOTREPREBKO.IDGRUPO,"
                              "\n\t\t\t\t\t\tATDRELQTMOTREPREBKO.IDPESSOAUSUARIO,"
                              "\n\t\t\t\t\t\tUSUARIO.IDSTATUSUSUARIO,"
                              "\n\t\t\t\t\t\tATDRELQTMOTREPREBKO.IDMOTIVO,"
                              "\n\t\t\t\t\t\tQTFECHADOS"
                       "\n\t\t\t\t\tFROM"
                           "\n\t\t\t\t\tATENDIMENTO.ATDRELQTMOTREPREBKO ATDRELQTMOTREPREBKO,"
                           "\n\t\t\t\t\tACESSO.USUARIO USUARIO"
                       "\n\t\t\t\t\tWHERE ATDRELQTMOTREPREBKO.IDPESSOAUSUARIO = USUARIO.IDPESSOAUSUARIO";
                       "\n\t\t\t\t\t AND ";

    if ( where.size() )
    {
        strQuery +=    "\n\t\t\t\t\tAND " + where;
    }

    strQuery +=
                "\n\t\t\t\t\t) PRE4"
            "\n\t\t\t\t)";

    if ( group.size() )
    {
        strQuery += "\n\t\t\t\t\tGROUP BY " + group;
    }

    strQuery +=
       "\n\t\t\t\t\t)";

    if ( group.size() )
    {
        strQuery += "\n\t\t\t\tORDER BY " + group;
    }

    strQuery +=
   "\n\t)\n)\nWHERE NLIN >= " + (string)linIni + " AND NLIN <= " + (string)linFin;

    EXEC SQL BEGIN DECLARE SECTION;
        char *query = (char*)strQuery.c_str();
        short i_colunas[MAXCOLUNAS];
        VARCHAR colunas[MAXCOLUNAS][256];
    EXEC SQL END DECLARE SECTION;

    ULOG( "QUERY = [%s]",query );

    saida->createTag("WFRelatorioDinamicoVO");
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");

    WFAtdRelGerarHeaderSaidaXML(nmColuna,saida,dnode);

    for ( i=0; i<MAXCOLUNAS;i++ )
    {
        colunas[i].arr[0] = 0;
        colunas[i].len = 0;
    }

    EXEC SQL WHENEVER SQLERROR DO WFAtdRelSqlErro(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :query;
    EXEC SQL DECLARE consulta CURSOR FOR recebeQuery;

    EXEC SQL OPEN consulta;

    int nRegs = 0;

    while ( true )
    {
        nRegs++;

        EXEC SQL FETCH consulta INTO :colunas[ 0]:i_colunas[ 0],
                                     :colunas[ 1]:i_colunas[ 1],
                                     :colunas[ 2]:i_colunas[ 2],
                                     :colunas[ 3]:i_colunas[ 3],
                                     :colunas[ 4]:i_colunas[ 4],
                                     :colunas[ 5]:i_colunas[ 5],
                                     :colunas[ 6]:i_colunas[ 6],
                                     :colunas[ 7]:i_colunas[ 7];
    
        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

        saida->createTag("ValoresRelatorio");

        for ( i=0;i<MAXCOLUNAS;i++ )
        {
            CONVIND(colunas[i],i_colunas[i]);

            if ( bColunas[i] ) 
            {
                WFAtdRelGerarDadosSaidaXML((VARCHAR*)&colunas[i],saida);
            }
        }

        saida->closeTag();
    }

    saida->addItem("inFin", sqlca.sqlcode == 1403 ? true:false);

    saida->closeTag();

    EXEC SQL CLOSE consulta;

    return true;
}

void MontarQuebra(string &idColunas
                 ,string &group
                 ,string &nmColuna
                 ,DOMNode *entrada
                 ,char *dnode
                 ,st_AtendimentoRel *dados
                 ,st_vlAtendimentoRel *status)
{
    bool firstTime = true;
    char *p0;
    DOMNode *dn;
    int index = 0;
    int i;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index ) )
    {
        if ( p0 = tx.walkTree(dn,"idCampo",0),p0 )
        {
            if ( group.size() )
            {
                group += ",";
                nmColuna += ",";
            }

            idColunas += (string)p0 + ",";
            group += (string)p0;
            nmColuna += (string)p0 + ",";
            XMLString::release(&p0);
        }

        bColunas[index] = true;

        index++;
    }

    for ( i=index; i<MAXCOLUNAS-COL_FIXAS; i++ )
    {
        bColunas[i] = false;
    }

    for ( i=MAXCOLUNAS-COL_FIXAS; i<MAXCOLUNAS; i++ )
    {
        bColunas[i] = true;
    }

    if ( nmColuna.size() ) { nmColuna += ","; }
    nmColuna += obterNomeColunaFixa(ID_MOTIVO_FECHMTO);
    nmColuna += ",";
    nmColuna += obterNomeColunaFixa(ID_NUM_FECHADOS);

    index += COL_FIXAS;

    for ( i=index; i<MAXCOLUNAS; i++ )
    {
        idColunas += "NULL,";
    }

    ULOG( "group=%s",group.c_str() );
    ULOG( "Nomes de colunas=%s",nmColuna.c_str() );
}

void WFAtdRelCompletarWhereRel4(string &where,DOMNode *entrada,char *dnode)
{
    bool firstTime = true;
    char *p0;
    char *p1;
    DOMNode *dn;
    int index = 0;
    TuxHelper tx;

    if ( !entrada )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    if ( !dnode )
    {
        ULOGE(erroPonteiroInvalido());
        throw new TuxBasicSvcException("04E9999",erroPonteiroInvalido());
    }

    while ( dn = tx.walkDOM(entrada,dnode,index++ ) )
    {
        if ( !strcmp(dnode,"WFRelatoriosFiltroRegionalVO") )
        {
            if ( p0 = tx.walkTree(dn,"idRegional",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += "\n\t\t\t\t\t AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += "ATDRELQTMOTREPREBKO.IDUFOPERADORA=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( !strcmp(dnode,"StatusUsuarioVO") )
        {
            if ( p0 = tx.walkTree(dn,"idStatus",0),p0 )
            {
                if ( firstTime )
                {
                    if ( where.size() ) where += "\n\t\t\t\t\t AND ";
                    where += "(";
                    firstTime = false;
                }
                else
                {
                    where += " OR ";
                }
                where += " USUARIO.IDSTATUSUSUARIO=" + (string) p0;
                XMLString::release(&p0);
            }
        }
        else if ( p0 = tx.walkTree(dn,"idGrupo",0),p0 )
        {
            if ( firstTime )
            {
                if ( where.size() ) where += "\n\t\t\t\t\t AND ";
                where += "(";
                firstTime = false;
            }
            else
            {
                where += " OR ";
            }
            where += " ATDRELQTMOTREPREBKO.IDGRUPO=" + (string) p0;
            XMLString::release(&p0);
        }
        else if ( p0 = tx.walkTree(dn,"idColuna",0),p0 )
        {
            p1 = tx.walkTree(dn,"valor",0);

            if ( p1 )
            {
                if ( *p1 )
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + " = '" + (string)p1 + "'";
                }
                else
                {
                    if ( where.size() ) where += " AND ";
                    where += (string)p0 + (string)" IS NULL";
                }

                XMLString::release(&p1);
            }
            else
            {
                Mensagem me = Endereco(__LINE__,__FILE__).mensagem("campo 'valor' para '%s' "
                                                                   "do %do donNode '%s' nao definido"
                                                                  ,p0,index,dnode);
                ULOGE("%s",me.MsgPadrao());
                throw new TuxBasicSvcException("04E9999",me.MsgPadrao());
            }
            XMLString::release(&p0);
        }
    }

    if ( !firstTime )
    {
        where += ")";
    }
}
