/**
 * 
 * @modulo  Workflow
 * @usecase Workflow
 * @author  Cassio M Garcia
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:34:09 $
 **/

#undef SQLCA
#define SQLCA_NONE
#include <sqlca.h>
#include <sqlda.h>

#include "../../../commons/msgPadrao.h"

#include "../../AtendimentoCommonsRel/include/cWFComunsRelatorios.h"
#include "../include/cWFAtdRelNaoEncam.h"

#include "../../../commons/queryMacro.h"

void sql_error_WFAtdRelNaoEncam(sqlca*sqlca);

bool proCExecutarRelatorio( st_AtendimentoRel *dados
                           , st_vlAtendimentoRel *status
                           , XMLGen *saida)
{
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;

        int idGrupo;
        int idContato;
        int nLin;
        int iTotal;
        char dtInicio[11];
        char dtFim[11];
        char linIni[32],linFin[32];
        const char *pQuery;

        short indIdGrupo;
        short indIdContato;
        short indDtInicio;
        short indDtFim;

        struct
        {
            VARCHAR nmGrupo[256];
            VARCHAR nmGrupoAbertura[256];
            VARCHAR dsProcedencia[256];
            VARCHAR nmCanal[256];
            VARCHAR dsTipoCarteira[256];
            VARCHAR dsSegmentacao[256];
            VARCHAR dsTipoPessoa[256];
            VARCHAR dsTipoRelacionamento[256];
            VARCHAR dsTipoLinha[256];
            VARCHAR nmPath[2001];
        } stRegistro;

        short i_nmGrupo;
        short i_nmGrupoAbertura;
        short i_dsProcedencia;
        short i_dsTipoCarteira;
        short i_nmCanal;
        short i_dsSegmentacao;
        short i_dsTipoPessoa;
        short i_dsTipoRelacionamento;
        short i_dsTipoLinha;
        short i_nmPath;
        short i_Total;

    EXEC SQL END DECLARE SECTION;

    idGrupo = dados->idGrupo;
    idContato = dados->idContato;
    strcpy(dtInicio, dados->dtInicio);
    strcpy(dtFim, dados->dtFim);
    
    indIdGrupo = status->idGrupo;
    indIdContato = status->idContato;
    indDtInicio = status->dtInicio;
    indDtFim = status->dtFim;

    sprintf(linIni,"%d",dados->bloco * dados->qtdLinhasBloco + 1);
    sprintf(linFin,"%d",(dados->bloco+1) * dados->qtdLinhasBloco + 1); //+1 aqui é necessário para controle de fim de relatório

    ULOG("Contato: status=%d,valor=%d",indIdContato,idContato);
    ULOG("Grupo: status=%d,valor=%d",indIdGrupo,idGrupo);
    ULOG("Datas inicial e final ='%s' - '%s'",dtInicio,dtFim);
    ULOG("linhas inicial e final ='%s' - '%s'",linIni,linFin);

    EXEC SQL WHENEVER SQLERROR  DO sql_error_WFAtdRelNaoEncam(&sqlca);
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    string query =
       "\nSELECT "
            "\nNLIN "
           "\n,NMGRUPOBKO "
           "\n,NMPATH "
           "\n,NMTIPORELACIONAMENTO "
           "\n,DSTIPOCARTEIRA "
           "\n,DSSEGMENTACAO "
           "\n,NMCANAL "
           "\n,DSPROCEDENCIA "
           "\n,NMGRUPOABERTURA "
           "\n,DSTIPOPESSOA "
           "\n,DSTIPOLINHA "
           "\n,QTINCORRETOS "
       "\nFROM "
       "\n( "
           "\n\tSELECT "
                "\n\tROWNUM AS NLIN "
               "\n\t,NMGRUPOBKO "
               "\n\t,NMPATH "
               "\n\t,NMTIPORELACIONAMENTO "
               "\n\t,DSTIPOCARTEIRA "
               "\n\t,DSSEGMENTACAO "
               "\n\t,NMCANAL "
               "\n\t,DSPROCEDENCIA "
               "\n\t,NMGRUPOABERTURA "
               "\n\t,DSTIPOPESSOA "
               "\n\t,DSTIPOLINHA "
               "\n\t,QTINCORRETOS "
           "\n\tFROM "
           "\n\t( "
               "\n\t\tSELECT "
                    "\n\t\tNMGRUPOBKO "
                   "\n\t\t,NMPATH "
                   "\n\t\t,NMTIPORELACIONAMENTO "
                   "\n\t\t,DSTIPOCARTEIRA "
                   "\n\t\t,DSSEGMENTACAO "
                   "\n\t\t,NMCANAL "
                   "\n\t\t,DSPROCEDENCIA "
                   "\n\t\t,NMGRUPOABERTURA "
                   "\n\t\t,DSTIPOPESSOA "
                   "\n\t\t,DSTIPOLINHA "
                   "\n\t\t,QTINCORRETOS "
               "\n\t\tFROM "
               "\n\t\t( "
                   "\n\t\t\tSELECT "
                        "\n\t\t\t(SELECT GRUPO.NMGRUPO FROM ACESSO.GRUPO GRUPO WHERE GRUPO.IDGRUPO = GRP.IDGRUPO) AS NMGRUPOBKO "
                       "\n\t\t\t,(SELECT CONTATO.NMPATH FROM CONTATOADM.CONTATO CONTATO WHERE CONTATO.IDCONTATO = GRP.IDCONTATO) AS NMPATH "
                       "\n\t\t\t,(SELECT TIPORELACIONAMENTO.NMTIPORELACIONAMENTO FROM CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO WHERE TIPORELACIONAMENTO.IDTIPORELACIONAMENTO = GRP.IDTIPORELACIONAMENTO) AS NMTIPORELACIONAMENTO "
                       "\n\t\t\t,(SELECT TIPOCARTEIRA.DSTIPOCARTEIRA FROM APOIO.TIPOCARTEIRA TIPOCARTEIRA WHERE TIPOCARTEIRA.IDTIPOCARTEIRA = GRP.IDTIPOCARTEIRA) AS DSTIPOCARTEIRA "
                       "\n\t\t\t,(SELECT SEGMENTACAO.DSSEGMENTACAO FROM APOIO.SEGMENTACAO SEGMENTACAO WHERE SEGMENTACAO.IDSEGMENTACAO = GRP.IDSEGMENTACAO) AS DSSEGMENTACAO "
                       "\n\t\t\t,(SELECT CANAL.NMCANAL FROM APOIO.CANAL CANAL WHERE CANAL.IDCANAL = GRP.IDCANAL) AS NMCANAL "
                       "\n\t\t\t,(SELECT PROCEDENCIA.DSPROCEDENCIA FROM APOIO.PROCEDENCIA PROCEDENCIA WHERE PROCEDENCIA.IDPROCEDENCIA = GRP.IDPROCEDENCIA) AS DSPROCEDENCIA "
                       "\n\t\t\t,(SELECT GRUPOABER.NMGRUPO FROM ACESSO.GRUPO GRUPOABER WHERE GRUPOABER.IDGRUPO = GRP.IDGRUPOABERTURA) AS NMGRUPOABERTURA "
                       "\n\t\t\t,(SELECT TIPOPESSOA.DSTIPOPESSOA FROM APOIO.TIPOPESSOA TIPOPESSOA WHERE TIPOPESSOA.IDTIPOPESSOA = GRP.IDTIPOPESSOA) AS DSTIPOPESSOA "
                       "\n\t\t\t,(SELECT TIPOLINHA.DSTIPOLINHA FROM APOIO.TIPOLINHA TIPOLINHA WHERE TIPOLINHA.IDTIPOLINHA = GRP.IDTIPOLINHA) AS DSTIPOLINHA "
                       "\n\t\t\t,QTINCORRETOS "
                   "\n\t\t\tFROM "
                       "\n\t\t\t( "
                           "\n\t\t\t\tSELECT  "
                                "\n\t\t\t\tIDGRUPO "
                               "\n\t\t\t\t,IDCONTATO "
                               "\n\t\t\t\t,IDTIPORELACIONAMENTO "
                               "\n\t\t\t\t,IDTIPOCARTEIRA "
                               "\n\t\t\t\t,IDSEGMENTACAO "
                               "\n\t\t\t\t,IDCANAL "
                               "\n\t\t\t\t,IDPROCEDENCIA "
                               "\n\t\t\t\t,IDGRUPOABERTURA "
                               "\n\t\t\t\t,IDTIPOPESSOA "
                               "\n\t\t\t\t,IDTIPOLINHA "
                               "\n\t\t\t\t,SUM(QTINCORRETOS) AS QTINCORRETOS "
                           "\n\t\t\t\tFROM "
                               "\n\t\t\t\tATENDIMENTO.ATDENCAMINHADOINCORRETO "
                           "\n\t\t\t\tWHERE "
                               "\n\t\t\t\tDTABERTURA >= (SELECT TO_DATE('" + (string)dtInicio + "','DD/MM/YYYY' ) FROM DUAL) "
                               "\n\t\t\t\tAND DTABERTURA >= (SELECT TO_DATE('" + (string)dtFim + "','DD/MM/YYYY' ) FROM DUAL) ";
    if ( indIdContato > 0 )
    {
        char valor[32];
        sprintf(valor,"%d",idContato);
        query +=           "\n\t\t\t\tAND IDCONTATO = " + (string) valor;
    }

    if ( indIdGrupo > 0 )
    {
        char valor[32];
        sprintf(valor,"%d",idGrupo);
        query +=           "\n\t\t\t\tAND IDGRUPO = " + (string) valor;
    }
        query +=           "\n\t\t\t\tGROUP BY  "
                                "\n\t\t\t\tIDGRUPO "
                               "\n\t\t\t\t,IDCONTATO "
                               "\n\t\t\t\t,IDTIPORELACIONAMENTO "
                               "\n\t\t\t\t,IDTIPOCARTEIRA "
                               "\n\t\t\t\t,IDSEGMENTACAO "
                               "\n\t\t\t\t,IDCANAL "
                               "\n\t\t\t\t,IDPROCEDENCIA "
                               "\n\t\t\t\t,IDGRUPOABERTURA "
                               "\n\t\t\t\t,IDTIPOPESSOA "
                               "\n\t\t\t\t,IDTIPOLINHA "
                       "\n\t\t\t) GRP "
               "\n\t\t) "
               "\n\tORDER BY "
                    "\n\tUPPER(NMGRUPOBKO) "
                   "\n\t,UPPER(NMPATH) "
                   "\n\t,UPPER(NMTIPORELACIONAMENTO) "
                   "\n\t,UPPER(DSTIPOCARTEIRA) "
                   "\n\t,UPPER(DSSEGMENTACAO) "
                   "\n\t,UPPER(NMCANAL) "
                   "\n\t,UPPER(DSPROCEDENCIA) "
                   "\n\t,UPPER(NMGRUPOABERTURA) "
                   "\n\t,UPPER(DSTIPOPESSOA) "
                   "\n\t,UPPER(DSTIPOLINHA) "
           "\n\t) "
       "\n) ";

    query += "\nWHERE NLIN >= " + (string)linIni + " AND NLIN <= " + (string)linFin;

    pQuery = query.c_str();

    ULOG("%s",pQuery);

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL PREPARE recebeQuery FROM :pQuery;
    EXEC SQL DECLARE consultaRelatorio CURSOR FOR recebeQuery;

    EXEC SQL OPEN consultaRelatorio;

    //soh monta o cabecalho antes de tudo
    saida->createTag("WFRelatorioDinamicoVO");
    //monta a linha com cabecalho
    saida->addProp("xmlns", "workflow.fo.vivo.com.br/vo");
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "nmGrupoBko");
            saida->addItem("dsColuna", "Grupo");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "nmContato");
            saida->addItem("dsColuna", "Contato");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsTipoRelacionamento");
            saida->addItem("dsColuna", "Tipo de Cliente");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsTipoCarteira");
            saida->addItem("dsColuna", "Carteira");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsSegmentaçao");
            saida->addItem("dsColuna", "Segmentaçao");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "nmCanal");
            saida->addItem("dsColuna", "Canal");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsProcedencia");
            saida->addItem("dsColuna", "Procedencia");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "nmGrupoAbertura");
            saida->addItem("dsColuna", "Grupo de Abertura");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsTipoPessoa");
            saida->addItem("dsColuna", "Natureza");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "dsTipoLinha");
            saida->addItem("dsColuna", "Tipo de Linha");
        saida->closeTag();
        saida->createTag("ColunasRelatorio");
            saida->addItem("idColuna", "totalAtendimento");
            saida->addItem("dsColuna", "Total");
        saida->closeTag();

    int nRegs = 0;
    memset( &stRegistro, 0, sizeof( stRegistro ) );

    while ( true ) 
    {
        nRegs++;

        i_nmGrupo = i_nmPath = i_dsTipoRelacionamento = i_dsTipoCarteira =
        i_dsSegmentacao = i_nmCanal = i_dsProcedencia = i_nmGrupoAbertura =
        i_dsTipoPessoa = i_dsTipoLinha = i_Total = -1;

        EXEC SQL 
        FETCH 
            consultaRelatorio 
        INTO
            :nLin,
            :stRegistro.nmGrupo:i_nmGrupo,
            :stRegistro.nmPath:i_nmPath,
            :stRegistro.dsTipoRelacionamento:i_dsTipoRelacionamento,
            :stRegistro.dsTipoCarteira:i_dsTipoCarteira,
            :stRegistro.dsSegmentacao:i_dsSegmentacao,
            :stRegistro.nmCanal:i_nmCanal,
            :stRegistro.dsProcedencia:i_dsProcedencia,
            :stRegistro.nmGrupoAbertura:i_nmGrupoAbertura,
            :stRegistro.dsTipoPessoa:i_dsTipoPessoa,
            :stRegistro.dsTipoLinha:i_dsTipoLinha,
            :iTotal:i_Total;

        // Este controle é necessário, pois o controle de fim precisa de um registro a mais
        // do que o solicitado no bloco.
        if ( nRegs > dados->qtdLinhasBloco )
        {
            break;
        }

        CONVIND(stRegistro.nmGrupo,i_nmGrupo);
        CONVIND(stRegistro.nmPath,i_nmPath);
        CONVIND(stRegistro.dsTipoRelacionamento,i_dsTipoRelacionamento);
        CONVIND(stRegistro.dsTipoCarteira,i_dsTipoCarteira);
        CONVIND(stRegistro.dsSegmentacao,i_dsSegmentacao);
        CONVIND(stRegistro.nmCanal,i_nmCanal);
        CONVIND(stRegistro.dsProcedencia,i_dsProcedencia);
        CONVIND(stRegistro.nmGrupoAbertura,i_nmGrupoAbertura);
        CONVIND(stRegistro.dsTipoPessoa,i_dsTipoPessoa);
        CONVIND(stRegistro.dsTipoLinha,i_dsTipoLinha);

        //monta as linhas com os valores
        saida->createTag("ValoresRelatorio");
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.nmGrupo.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.nmPath.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsTipoRelacionamento.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsTipoCarteira.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsSegmentacao.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.nmCanal.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsProcedencia.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.nmGrupoAbertura.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsTipoPessoa.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", (char*)stRegistro.dsTipoLinha.arr);
            saida->closeTag();
            saida->createTag("ValorColuna");
                saida->addItem("valor", iTotal);
            saida->closeTag();
        saida->closeTag();

    } //while ( true ) 

    saida->addItem("inFin", sqlca.sqlcode == 1403 ? true:false);
    saida->closeTag();//WFRelatorioDinamicoVO

    EXEC SQL CLOSE consultaRelatorio;

    return true;
}

void sql_error_WFAtdRelNaoEncam(sqlca*sqlca)
{
    throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
