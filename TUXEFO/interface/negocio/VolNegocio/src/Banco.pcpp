// Banco.cpp: implementation of the CBanco class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
#include "Defines.h"
#include "Util.hpp"
#include "Banco.hpp"

EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CBanco::CBanco()
{  	   
    this->setIdBanco(-1);
    this->setIdTipoBanco(-1);
	this->setNmBanco("");
	this->setDsURLBanco("");
}

CBanco::~CBanco() 
{

}

/*

  GETs

*/

int CBanco::getIdBanco() 
{
	return this->m_iIdBanco;
}

int CBanco::getIdTipoBanco() 
{
	return this->m_iIdTipoBanco;
}

char * CBanco::getNmBanco() 
{
	return this->m_cNmBanco;
}

char * CBanco::getDsURLBanco() 
{
	return this->m_cDsURLBanco;
}

/*

   SETs

*/

void CBanco::setIdBanco(int value) 
{
	this->m_iIdBanco = value;
}

void CBanco::setIdTipoBanco(int value) 
{
	this->m_iIdTipoBanco = value;
}

void CBanco::setNmBanco(char *value) 
{
	strcpy(this->m_cNmBanco, value);
}

void CBanco::setDsURLBanco(char *value) 
{
	strcpy(this->m_cDsURLBanco, value);
}

//Metodos de Negocio da Interface da Classe CBanco:

void CBanco::consultarBancos(int iIdTipoBanco,
							 list<CBanco> & listaBanco)
{
	CBanco::carregarBancosDB(iIdTipoBanco, listaBanco);
}

// Métodos de acesso a banco de dados
void CBanco::carregarBancosDB(int iIdTipoBanco,
							  list<CBanco> & listaBanco)
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	int  iIdBanco;
	int  iIdTipoBancoDB;
	char cNmBanco[256];
	char cDsURLBanco[256];
	EXEC SQL END DECLARE SECTION;

	CBanco     oBanco;

	// valores das chaves da consulta SQL
	iIdTipoBancoDB = iIdTipoBanco;

	// garante que a lista esta vazia
	listaBanco.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	EXEC SQL DECLARE LSTBANCOS CURSOR FOR

		SELECT
			a.idBanco,
			NVL(nmBanco, ' ') as nmBanco,
			NVL(dsURLBanco, ' ') as dsURLBanco
		FROM
			vol.TipoBancoUF  a,
			apoio.Banco  b
		WHERE
            a.idBanco = b.idBanco 			
            AND idTipoBanco = :iIdTipoBancoDB;

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTBANCOS;

	for( ;; ) {

		// varre todos os registros para criar a lista com os bancos

		EXEC SQL FETCH LSTBANCOS INTO
			:iIdBanco,
			:cNmBanco,
			:cDsURLBanco;

		oBanco.setIdBanco(iIdBanco);
		oBanco.setIdTipoBanco(iIdTipoBanco);
		oBanco.setNmBanco(CUtil::trim(cNmBanco));
		oBanco.setDsURLBanco(CUtil::trim(cDsURLBanco));

		listaBanco.push_back(oBanco);

	}

	EXEC SQL CLOSE LSTBANCOS;

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);

}