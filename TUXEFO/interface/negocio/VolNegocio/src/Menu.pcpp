#undef SQLCA
#define SQLCA_NONE

#include "Util.hpp"
#include "Menu.hpp"



/*EXEC SQL INCLUDE SQLCA;*/

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


CMenu::CMenu(){
		m_iIdItemMenu = -1;
	 m_iIdItemMenuPai = -1;
	 strcpy( this->cNmItem, "" );
	 strcpy( this->cNmAction, "" );

}


CMenu::~CMenu() {
}


int CMenu::getIdItemMenu(){
	return m_iIdItemMenu;
}
	
int	CMenu::getIdItemMenuPai() {
	return m_iIdItemMenuPai;
}
char *	CMenu::getNmItem(){
	return cNmItem;
}
char *	CMenu::getNmAction(){
	return cNmAction;
}


void CMenu::setIdItemMenu(int idMenu){
	this->m_iIdItemMenu = idMenu;
}

void CMenu::setIdItemMenuPai(int idMenuPai){
	this->m_iIdItemMenuPai = idMenuPai;
}
void CMenu::setNmItem( char * NmItem){
	strcpy(this->cNmItem, NmItem);
}
void CMenu::setNmAction( char * NmAction){
	strcpy(this->cNmAction, NmAction);

}


void CMenu::obterDadosMenu(int iCanal, list <CMenu> & lstMenu){
	this->obterDadosMenuDB(iCanal, lstMenu);
}


void CMenu::obterDadosMenuDB(int iCanal, list <CMenu> & lstMenu){


	struct sqlca sqlca;


	EXEC SQL BEGIN DECLARE SECTION;
		int  iIdItemMenu;
		int idItemMenuPai;
		int idCanal;
		char cNmItem  [ 255 ];
		char cNmAction [ 255 ];
	EXEC SQL END DECLARE SECTION;


	// valores das chaves da consulta SQL

	memset(&cNmItem,				' ', sizeof(cNmItem));
	memset(&cNmAction,					' ', sizeof(cNmAction));

    idCanal = iCanal;
	

	// garante que a lista esta vazia
	lstMenu.clear();
	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
       
	EXEC SQL DECLARE LSTMENU CURSOR FOR
	SELECT
		  b.IDITEMMENU, c.IDITEMMENUPAI, NVL(b.NMITEM, ' ') as NMITEM , NVL(b.DSHINT, ' ') as DSSHINT
	FROM	
		vol.itemmenucanal  A,
		acesso.itemmenu  B ,
		acesso.itemmenuhierarquia  C
	WHERE
		A.iditemmenu = B.IDITEMMENU AND
		B.IDITEMMENU (+) = C.IDITEMMENU AND
		A.IDCANAL = :idCanal;
	
		
	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTMENU;
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
	for( ;; ) {
		// varre todos os registros para criar a lista com os Relacionamentos

		EXEC SQL FETCH LSTMENU INTO
			:iIdItemMenu,
			:idItemMenuPai,
			:cNmItem,
			:cNmAction;

	this->setIdItemMenu( iIdItemMenu );
		this->setIdItemMenuPai( idItemMenuPai );
		this->setNmItem( CUtil::trim(cNmItem) );
		this->setNmAction( CUtil::trim(cNmAction) ); 

		memset(&cNmItem,				' ', sizeof(cNmItem));
		memset(&cNmAction,					' ', sizeof(cNmAction));			

		lstMenu.push_back( *this );
	}

	EXEC SQL CLOSE LSTMENU;

	return;

	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode ); 

}


