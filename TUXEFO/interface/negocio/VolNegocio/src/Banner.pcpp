#include "Banner.h"
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<tuxfw.h>

Banner::Banner()
{

}

Banner::~Banner()
{
	
}

int Banner::getBanners(XMLGen*xml,char*idAreaBanner)
{
	tuxfw_getlogger()->debug("Banner::getBanners");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char *cidAreaBanner =idAreaBanner;
		struct param{
			VARCHAR idBanner[256];
			VARCHAR dsAreaBanner[256];
			VARCHAR urlBanner[256];
			VARCHAR dsBanner[256];
			VARCHAR idTipoBanner[256];
			VARCHAR dsTipoBanner[256];
			VARCHAR nmBanner[256];
			VARCHAR idAreaBanner[256];
		}m_param;
		struct iparam{
			short idBanner;
			short dsAreaBanner;
			short urlBanner;
			short dsBanner;
			short idTipoBanner;
			short dsTipoBanner;
			short nmBanner;
			short idAreaBanner;
		}m_iparam;
	EXEC SQL END DECLARE SECTION;

	if(idAreaBanner != NULL && !strcmp(idAreaBanner,""))
		cidAreaBanner = "-1";

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL DECLARE CURSORBANNER CURSOR FOR 
		SELECT BANNER.IDBANNER,
			   AREABANNER.DSAREABANNER,
			   BANNER.URLBANNER,
			   BANNER.DSBANNER,
			   BANNER.IDTIPOBANNER,
			   TIPOBANNER.DSTIPOBANNER,
			   BANNER.NMBANNER,
			   BANNER.IDAREABANNER
		FROM
				ACESSO.BANNER BANNER,
				APOIO.TIPOBANNER TIPOBANNER,
				APOIO.AREABANNER AREABANNER
		WHERE
			   BANNER.IDTIPOBANNER = TIPOBANNER.IDTIPOBANNER AND
			   AREABANNER.IDAREABANNER = Banner.IDAREABANNER AND
			   (BANNER.IDAREABANNER = :cidAreaBanner OR :cidAreaBanner = -1)
		ORDER BY BANNER.DSBANNER;
	EXEC SQL OPEN CURSORBANNER;
	for(;;)
	{
		memset(&m_param,0,sizeof(param));
		memset(&m_iparam,0,sizeof(iparam));
		EXEC SQL FETCH CURSORBANNER INTO :m_param:m_iparam;
		xml->createTag("BannerVO");
		xml->addItem("idBanner",(char*)m_param.idBanner.arr);
		xml->addItem("dsAreaBanner",(char*)m_param.dsAreaBanner.arr);
		xml->addItem("urlBanner",(char*)m_param.urlBanner.arr);
		xml->addItem("dsBanner",(char*)m_param.dsBanner.arr);
		xml->addItem("idTipoBanner",(char*)m_param.idTipoBanner.arr);
		xml->addItem("dsTipoBanner",(char*)m_param.dsTipoBanner.arr);
		xml->addItem("nmBanner",(char*)m_param.nmBanner.arr);
		xml->addItem("idAreaBanner",(char*)m_param.idAreaBanner.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE CURSORBANNER;


	sqlca.sqlcode = 0;
	return 1;

Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::getParametrosBusca(XMLGen*xml)
{
	tuxfw_getlogger()->debug("Banner::getParametrosBusca");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct area{
			VARCHAR idAreaBanner[256];
			VARCHAR dsAreaBanner[256];
		}m_area;
		struct iarea{
			short idAreaBanner;
			short dsAreaBanner;
		}m_iarea;
		struct uf{
			VARCHAR idUF[256];
			VARCHAR dsUF[256];
		}m_uf;
		struct iuf{
			short idUF;
			short dsUF;
		}m_iuf;
		struct tipoLinha{
			VARCHAR idTipoLinha[256];
			VARCHAR dsTipoLinha[256];
		}m_tipoLinha;
		struct itipoLinha{
			short idTipoLinha;
			short dsTipoLinha;
		}m_itipoLinha;
		struct grupo{
			VARCHAR idGrupo[256];
			VARCHAR nmGrupo[256];
		}m_grupo;
		struct igrupo{
			short idGrupo;
			short nmGrupo;
		}m_igrupo;
	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL DECLARE CURSORAREA CURSOR FOR 
		SELECT AREABANNER.IDAREABANNER,
			   AREABANNER.DSAREABANNER
		FROM
				APOIO.AREABANNER AREABANNER
		ORDER BY AREABANNER.DSAREABANNER;
	EXEC SQL OPEN CURSORAREA;
	for(;;)
	{
		memset(&m_area,0,sizeof(m_area));
		memset(&m_iarea,0,sizeof(m_iarea));
		EXEC SQL FETCH CURSORAREA INTO :m_area:m_iarea;
		xml->createTag("Area");
		xml->addItem("idArea",(char*)m_area.idAreaBanner.arr);
		xml->addItem("nmArea",(char*)m_area.dsAreaBanner.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE CURSORAREA;

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL DECLARE CURSORUF CURSOR FOR 
		SELECT IDUF,
			   SGUF
		FROM
				APOIO.UF
		WHERE IDUF BETWEEN 1 AND 30
		ORDER BY SGUF;
	EXEC SQL OPEN CURSORUF;
	for(;;)
	{
		memset(&m_uf,0,sizeof(m_uf));
		memset(&m_iuf,0,sizeof(m_iuf));
		EXEC SQL FETCH CURSORUF INTO :m_uf:m_iuf;
		xml->createTag("UF");
		xml->addItem("idUf",(char*)m_uf.idUF.arr);
		xml->addItem("sgUf",(char*)m_uf.dsUF.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE CURSORUF;

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL DECLARE CURSORTIPOLINHA CURSOR FOR 
		SELECT IDTIPOLINHA,
			   DSTIPOLINHA
		FROM
				APOIO.TIPOLINHA
		ORDER BY DSTIPOLINHA;
	EXEC SQL OPEN CURSORTIPOLINHA;
	for(;;)
	{
		memset(&m_tipoLinha,0,sizeof(m_tipoLinha));
		memset(&m_itipoLinha,0,sizeof(m_itipoLinha));
		EXEC SQL FETCH CURSORTIPOLINHA INTO :m_tipoLinha:m_itipoLinha;
		xml->createTag("TipoLinha");
		xml->addItem("idTipoLinha",(char*)m_tipoLinha.idTipoLinha.arr);
		xml->addItem("dsTipoLinha",(char*)m_tipoLinha.dsTipoLinha.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE CURSORTIPOLINHA;

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL DECLARE CURSORGRUPO CURSOR FOR 
		SELECT IDTIPORELACIONAMENTOPESSOA,
			   DSRELACIONAMENTOPESSOA
		FROM
				apoio.TipoRelacionamentoPessoa
		ORDER BY DSRELACIONAMENTOPESSOA;
	EXEC SQL OPEN CURSORGRUPO;
	for(;;)
	{
		memset(&m_grupo,0,sizeof(m_grupo));
		memset(&m_igrupo,0,sizeof(m_igrupo));
		EXEC SQL FETCH CURSORGRUPO INTO :m_grupo:m_igrupo;
		xml->createTag("GrupoUsuario");
		xml->addItem("idGrupoUsuario",(char*)m_grupo.idGrupo.arr);
		xml->addItem("nmGrupoUsuario",(char*)m_grupo.nmGrupo.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE CURSORGRUPO;


	return 1;

Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::pesquisaBanner(XMLGen*xml,char*idAreaBanner,char*idUF,char*idTipoLinha,char*idGrupo,int numPagina,int registros)
{
	tuxfw_getlogger()->debug("Banner::pesquisaBanner");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*cidAreaBanner=idAreaBanner;
		char*cidUF=idUF;
		char*cidTipoLinha=idTipoLinha;
		char*cidGrupo=idGrupo;

		char*cidAreaBannerAux="0";
		char*cidUFAux="0";
		char*cidTipoLinhaAux="0";
		char*cidGrupoAux="0";

		int rangeStart = numPagina*registros;
		int rangeEnd = rangeStart+registros;
		struct param{
			VARCHAR idGrupoBanner[21];
			VARCHAR sgUF[256];
			VARCHAR dsAreaBanner[256];
			VARCHAR dsTipoLinha[256];
			VARCHAR nmGrupo[256];
			VARCHAR idBanner[21];
			VARCHAR urlBanner[256];
			VARCHAR dsBanner[256];
			VARCHAR idAreaBanner[256];
			VARCHAR nmBanner[256];
			VARCHAR idTipoBanner[256];
		}m_param;
		struct iparam{
			short idGrupoBanner;
			short sgUF;
			short dsAreaBanner;
			short dsTipoLinha;
			short nmGrupo;
			short idBanner;
			short urlBanner;
			short dsBanner;
			short idAreaBanner;
			short nmBanner;
			short idTipoBanner;
		}m_iparam;
		
		struct param2{
			VARCHAR ctotal[256];
		}m_param2;
		struct iparam2{
			short ictotal;
		}m_iparam2;

		char query[1024];
		char query2[2000];
	EXEC SQL END DECLARE SECTION;

	if(idAreaBanner != NULL && !strcmp(idAreaBanner,""))
		cidAreaBanner = cidAreaBannerAux = "-1";
	if(idUF != NULL && !strcmp(idUF,""))
		cidUF = cidUFAux = "-1";
	if(idTipoLinha != NULL && !strcmp(idTipoLinha,""))
		cidTipoLinha = cidTipoLinhaAux = "-1";
	if(idGrupo != NULL && !strcmp(idGrupo,""))
		cidGrupo = cidGrupoAux = "-1";

	memset(&m_param2,0,sizeof(m_param2));
	memset(&m_iparam2,0,sizeof(m_iparam2));
	sqlca.sqlcode = 0;

	// count
	strcpy(query,"SELECT"
		" COUNT(1) AS total"
			" FROM"
			"	ACESSO.RelacionamentoBanner RelacionamentoBanner,"
			"	ACESSO.BANNER BANNER,"
			"	APOIO.AREABANNER AREABANNER,"
			"	APOIO.TIPOLINHA TIPOLINHA,"
			"	APOIO.UF UF,"
			"	APOIO.TipoRelacionamentoPessoa TipoRelacionamentoPessoa"
			" WHERE"
			"	RelacionamentoBanner.IDUF = UF.IDUF AND"
			"	RelacionamentoBanner.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA AND"
			"	RelacionamentoBanner.IDTipoRelacionamentoPessoa = TipoRelacionamentoPessoa.IDTipoRelacionamentoPessoa AND"
			"	RelacionamentoBanner.IDBANNER = BANNER.IDBANNER(+) AND"
			"	RelacionamentoBanner.IDAREABANNER = AREABANNER.IDAREABANNER AND");
	sprintf(query,"%s (UF.IDUF IN (%s) OR %s = -1) AND",query,cidUF,cidUFAux);
	sprintf(query,"%s (TIPOLINHA.IDTIPOLINHA IN (%s) OR %s = -1) AND",query,cidTipoLinha,cidTipoLinhaAux);
	sprintf(query,"%s (RelacionamentoBanner.IDTipoRelacionamentoPessoa IN (%s) OR %s = -1) AND ",query,cidGrupo,cidGrupoAux);
	sprintf(query,"%s (AREABANNER.IDAREABANNER IN (%s) OR %s = -1)",query,cidAreaBanner,cidAreaBannerAux);

	tuxfw_getlogger()->debug("query1: %s",query);
	
	// COUNT
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND GOTO Error;
	EXEC SQL PREPARE S1 FROM :query; 
	EXEC SQL DECLARE COUNTBANNER CURSOR FOR S1;
	EXEC SQL OPEN COUNTBANNER;
	EXEC SQL FETCH COUNTBANNER INTO :m_param2:m_iparam2;
	xml->addItem("total",(char*)m_param2.ctotal.arr);
	tuxfw_getlogger()->debug("total: %s",m_param2.ctotal.arr);		
	EXEC SQL CLOSE COUNTBANNER;



	sqlca.sqlcode = 0;
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	strcpy(query2,"SELECT "
			"IDRelacionamentoBanner,"
			"SGUF,"
			"DSAREABANNER,"
			"DSTIPOLINHA,"
			"DSRelacionamentoPessoa,"
			"IDBANNER,"
			"URLBANNER,"
			"DSBANNER,"
			"IDAREABANNER,"
			"NMBANNER,"
			"IDTIPOBANNER"
			" FROM ("
		" SELECT"
		"		IDRelacionamentoBanner,"
		"		SGUF,"
		"		DSAREABANNER,"
		"		DSTIPOLINHA,"
		"		DSRelacionamentoPessoa,"
		"		IDBANNER,"
		"		URLBANNER,"
		"		DSBANNER,"
		"       IDAREABANNER,"
		"       NMBANNER,"
		"       IDTIPOBANNER,"
		"		ROWNUM AS LINHA"
		"		FROM ("
		" SELECT"
		"		RelacionamentoBanner.IDRelacionamentoBanner,"
		"		UF.SGUF,"
		"		AREABANNER.DSAREABANNER,"
		"		TIPOLINHA.DSTIPOLINHA,"
		"		TipoRelacionamentoPessoa.DSRelacionamentoPessoa,"
		"		BANNER.IDBANNER,"
		"		NVL(BANNER.URLBANNER,'') AS URLBANNER,"
		"		DECODE(BANNER.IDCAMPANHA,null,NVL (BANNER.DSBANNER, ''),NVL(CAMPANHA.NMCAMPANHA,'')) AS DSBANNER,"
		"		RelacionamentoBanner.IDAREABANNER,"
		"		BANNER.NMBANNER,"
		"		BANNER.IDTIPOBANNER"
		"	FROM"
		"		ACESSO.RelacionamentoBanner RelacionamentoBanner,"
		"		ACESSO.BANNER BANNER,"
		"		APOIO.AREABANNER AREABANNER,"
		"		APOIO.TIPOLINHA TIPOLINHA,"
		"		APOIO.UF UF,"
		"	        APOIO.TipoRelacionamentoPessoa TipoRelacionamentoPessoa,"
		"		VOL.CAMPANHACE CAMPANHA"
		"	WHERE"
		"		RelacionamentoBanner.IDUF = UF.IDUF AND"
		"		RelacionamentoBanner.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA AND"
		"		RelacionamentoBanner.IDTipoRelacionamentoPessoa = TipoRelacionamentoPessoa.IDTipoRelacionamentoPessoa AND"
		"		RelacionamentoBanner.IDBANNER = BANNER.IDBANNER(+) AND "
		"		RelacionamentoBanner.IDAREABANNER = AREABANNER.IDAREABANNER AND "
		"		CAMPANHA.IDCAMPANHA(+) = BANNER.IDCAMPANHA AND ");
		sprintf(query2,"%s (UF.IDUF IN (%s) OR %s = -1) AND ",query2,cidUF,cidUFAux);
		sprintf(query2,"%s (TIPOLINHA.IDTIPOLINHA IN (%s) OR %s = -1) AND ",query2,cidTipoLinha,cidTipoLinhaAux);
		sprintf(query2,"%s (RelacionamentoBanner.idtiporelacionamentopessoa IN (%s) OR %s = -1) AND ",query2,cidGrupo,cidGrupoAux);
		sprintf(query2,"%s (AREABANNER.IDAREABANNER IN (%s) OR %s = -1)",query2,cidAreaBanner, cidAreaBannerAux);
		sprintf(query2,"%s	ORDER BY RelacionamentoBanner.IDRelacionamentoBanner,UF.SGUF,AREABANNER.DSAREABANNER,TIPOLINHA.DSTIPOLINHA,",query2);
		sprintf(query2,"%s	DSRelacionamentoPessoa,BANNER.IDBANNER,BANNER.URLBANNER,BANNER.DSBANNER,RelacionamentoBanner.IDAREABANNER",query2);
		sprintf(query2,"%s ) WHERE ROWNUM <= %d ) WHERE LINHA > %d",query2,rangeEnd,rangeStart);
		

	tuxfw_getlogger()->debug("query2: %s",query2);

	EXEC SQL PREPARE S2 FROM :query2; 
	EXEC SQL DECLARE PESQUISABANNER CURSOR FOR S2;
	EXEC SQL OPEN PESQUISABANNER;
	for(;;)
	{
		memset(&m_param,0,sizeof(m_param));
		memset(&m_iparam,0,sizeof(m_iparam));
		EXEC SQL FETCH PESQUISABANNER INTO :m_param:m_iparam;
		xml->createTag("BannerResultadoPesquisaVO");
		xml->addItem("idGrupoBanner",(char*)m_param.idGrupoBanner.arr);
		xml->addItem("sgUF",(char*)m_param.sgUF.arr);
		xml->addItem("dsAreaBanner",(char*)m_param.dsAreaBanner.arr);
		xml->addItem("dsTipoLinha",(char*)m_param.dsTipoLinha.arr);
		xml->addItem("nmGrupo",(char*)m_param.nmGrupo.arr);
		xml->addItem("idBanner",(char*)m_param.idBanner.arr);
		xml->addItem("urlBanner",(char*)m_param.urlBanner.arr);
		xml->addItem("dsBanner",(char*)m_param.dsBanner.arr);
		xml->addItem("idAreaBanner",(char*)m_param.idAreaBanner.arr);
		xml->addItem("nmBanner",(char*)m_param.nmBanner.arr);
		xml->addItem("dsTipoBanner",(char*)m_param.idTipoBanner.arr);
		xml->closeTag();
		
	}	
	EXEC SQL CLOSE PESQUISABANNER;

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}


int Banner::incluirBanner(char* idCampanhaPrm,char*urlBanner,char*idAreaBanner,char*idTipoBanner,char*dsBanner,char*nmBanner,char*idBanner)
{
	tuxfw_getlogger()->debug("Banner::incluirBanner");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* idCampanha = idCampanhaPrm;
		char*curlBanner=urlBanner;
		char*cidAreaBanner=idAreaBanner;
		char*cidTipoBanner=idTipoBanner;
		char*cdsBanner=dsBanner;
		char*cnmBanner = nmBanner;
		VARCHAR sequence[21];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	memset(&sequence,0,sizeof(sequence));

	EXEC SQL
	SELECT ACESSO.BANNERSQ.NEXTVAL INTO :sequence FROM DUAL;

	sprintf(idBanner,"%s",(char*)sequence.arr);

	tuxfw_getlogger()->debug("idBanner=%s",idBanner);
	tuxfw_getlogger()->debug("urlBanner [%s]",urlBanner);
	tuxfw_getlogger()->debug("idCampanha [%s]",idCampanha);

	if ( urlBanner[0] != 0x0 )
	{
	    tuxfw_getlogger()->debug("executa gravacao com urlBanner");
    	EXEC SQL
    		INSERT INTO ACESSO.BANNER 
    		(IDBANNER,URLBANNER,IDAREABANNER,IDTIPOBANNER,DSBANNER,NMBANNER)
    		VALUES
    		(:sequence,:curlBanner,:cidAreaBanner,:cidTipoBanner,:cdsBanner,:cnmBanner);
    }

	if ( idCampanha[0] != 0x0 )
	{
	    tuxfw_getlogger()->debug("executa gravacao com idCampanha");
	    tuxfw_getlogger()->debug("sequence [%s],idCampanha [%s],cidAreaBanner [%s],cidTipoBanner [%s],cdsBanner [%s],cnmBanner [%s]",(char*)sequence.arr,idCampanha,cidAreaBanner,cidTipoBanner,cdsBanner,cnmBanner);
    	EXEC SQL
    		INSERT INTO ACESSO.BANNER 
    		(IDBANNER,IDCAMPANHA,IDAREABANNER,IDTIPOBANNER,DSBANNER,NMBANNER)
    		VALUES
    		(:sequence,:idCampanha,:cidAreaBanner,:cidTipoBanner,:cdsBanner,:cnmBanner);
    }


	if ( idCampanha[0] == 0x0 && urlBanner[0] == 0x0)
	{
	    tuxfw_getlogger()->debug("executa gravacao sem idCampanha e sem url (swf)");
	    tuxfw_getlogger()->debug("sequence [%s],idCampanha [%s],cidAreaBanner [%s],cidTipoBanner [%s],cdsBanner [%s],cnmBanner [%s]",(char*)sequence.arr,idCampanha,cidAreaBanner,cidTipoBanner,cdsBanner,cnmBanner);
    	EXEC SQL
    		INSERT INTO ACESSO.BANNER
    		(IDBANNER,IDAREABANNER,IDTIPOBANNER,DSBANNER,NMBANNER)
    		VALUES
    		(:sequence,:cidAreaBanner,:cidTipoBanner,:cdsBanner,:cnmBanner);
    }
      

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::associarGrupoBanner(char*idGrupoBanner,char*idBanner)
{
	tuxfw_getlogger()->debug("Banner::associarGrupoBanner");

	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*cidGrupoBanner=idGrupoBanner;
		char*cidBanner=idBanner;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL
	UPDATE ACESSO.RelacionamentoBanner 
	SET IDBANNER = :cidBanner
	WHERE
		IDRelacionamentoBanner = :cidGrupoBanner;

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::removerGrupoBanner(char*idGrupoBanner)
{
	tuxfw_getlogger()->debug("Banner::removerGrupoBanner");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*cidGrupoBanner=idGrupoBanner;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL
	UPDATE ACESSO.RelacionamentoBanner 
	SET IDBANNER = ''
	WHERE
		IDRelacionamentoBanner = :cidGrupoBanner;

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::log(char*idGrupoBanner,char*login,char*ip,char* operacao)
{
	tuxfw_getlogger()->debug("Banner::log");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*cidGrupoBanner=idGrupoBanner;
		char*clogin=login;
		char*cip=ip;
		char*choperacao=operacao;
		struct param{
			VARCHAR idUF[21];
			VARCHAR idTipoLinha[21];
			VARCHAR idGrupo[21];
			VARCHAR idBanner[21];
		}m_param;
		struct iparam{
			short idUF;
			short idTipoLinha;
			short idGrupo;
			short idBanner;
		}m_iparam;
	EXEC SQL END DECLARE SECTION;

	memset(&m_param,0,sizeof(m_param));
	memset(&m_iparam,0,sizeof(m_iparam));

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND GOTO Error;
	EXEC SQL
		SELECT IDUF,IDTIPOLINHA,idTipoRelacionamentoPessoa,IDBANNER
		INTO :m_param:m_iparam
		FROM
		ACESSO.RelacionamentoBanner
		WHERE
		IDRelacionamentoBanner = :cidGrupoBanner;
	
	EXEC SQL
		INSERT INTO ACESSO.BANNERRELACIONAMENTOLOG 
		(IDBANNERRELACIONAMENTOLOG,LOGIN,DSIP,DSACAO,DTULTIMAALTERACAO,IDBANNER,IDUF,IDTIPOLINHA,idTipoRelacionamentoPessoa)
		VALUES
		(ACESSO.BANNERRELACIONAMENTOLOGSQ.NEXTVAL,:clogin,:cip,:choperacao,sysdate,:m_param.idBanner,:m_param.idUF,:m_param.idTipoLinha,:m_param.idGrupo);	

	return 1;

Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::log(char*idBanner,char*login,char*ip)
{
	tuxfw_getlogger()->debug("Banner::log inclusao banner");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*clogin=login;
		char*cip=ip;
		char*cidBanner=idBanner;
		struct param{
			VARCHAR nmBanner[256];
			VARCHAR urlBanner[256];
			VARCHAR idAreaBanner[21];
			VARCHAR idTipoBanner[21];
			VARCHAR dsBanner[256];
		}m_param;
		struct iparam{
			short nmBanner;
			short urlBanner;
			short idAreaBanner;
			short idTipoBanner;
			short dsBanner;
		}m_iparam;
	EXEC SQL END DECLARE SECTION;

	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND GOTO Error;

	EXEC SQL
		SELECT NMBANNER,URLBANNER,IDAREABANNER,IDTIPOBANNER,DSBANNER
		INTO :m_param:m_iparam
			  FROM ACESSO.BANNER where IDBANNER=:cidBanner;

	tuxfw_getlogger()->debug("nmBanner = %s",(char*)m_param.idAreaBanner.arr);
	
	EXEC SQL
		INSERT INTO ACESSO.BANNERLOG 
		(IDBANNERLOG,LOGIN,DSIP,DSACAO,DTULTIMAALTERACAO,NMBANNER,URLBANNER,IDAREABANNER,IDTIPOBANNER,DSBANNER)
		VALUES
		(ACESSO.BANNERLOGSQ.NEXTVAL,:clogin,:cip,'INCLUIR BANNER',sysdate,:m_param.nmBanner,:m_param.urlBanner,:m_param.idAreaBanner,:m_param.idTipoBanner,:m_param.dsBanner);	

	return 1;

Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int Banner::updateBanner(char*banner,char*link)
{
	tuxfw_getlogger()->debug("Banner::updateBanner");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char*idbanner = banner;
		char*urlBanner = link;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND GOTO Error;
	EXEC SQL
		UPDATE ACESSO.BANNER  SET URLBANNER = :urlBanner
		WHERE idbanner = :idbanner;

	return 1;

Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}
