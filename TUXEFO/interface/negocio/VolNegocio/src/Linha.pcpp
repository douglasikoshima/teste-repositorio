//---------------------------------------------------------------------------
//                         (c) Consórcio Indra/PT-SI.
//                            xxxxxxxxxxxxxxxxxxxxxxx
//                                xxxxxxxxxxxxxx
//-----------------------------------------------------------------------------
// Los contenidos de este fichero son propiedad de Telefónica Consórcio Indra/PT-SI. 
// titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado, 
// en su totalidad o en parte, con el permiso escrito de Consórcio Indra/PT-SI 
// o de acuerdo con los terminos y condiciones establecidas en el acuerdo/contrato bajo 
// el que se suministra.
//---------------------------------------------------------------------------
//*  Modulo                   : LSTDADOSINI, LSTVIGSERV
//*  Fichero                  : Linha
//*  Tipo                     : .cpp
//*  Autor                    : Aldebaran
//*  Fecha primera version    : 
//*  Version actual           : 
//*//---------------------------------------------------------------------------
//*  Proposito:
//*
//*  Implementar os negocios referentes as linhas telefonicas 
//*//---------------------------------------------------------------------------
//*  Dependencias:
//*
//*  Servico.hpp
//*//---------------------------------------------------------------------------
//*  Consideraciones de portabilidad:
//*
//*  
////---------------------------------------------------------------------------

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
#include "Defines.h"
#include "Util.hpp"
#include "Linha.hpp"


EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CLinha::CLinha(){

    m_oPessoa = CPessoa::createInstance();
	m_oPonto = NULL;

	m_iCdAreaRegistro = -1;
	m_iNrLinha        = -1;
	m_iIdTipoLinha    = -1;

	strcpy( this->m_cDsTipoLinha, "" );
}

CLinha::CLinha(CPessoa* pPessoa){

    m_oPessoa = pPessoa;

	m_iCdAreaRegistro = -1;
	m_iNrLinha        = -1;
	m_iIdTipoLinha    = -1;

	strcpy( this->m_cDsTipoLinha, "" );
}


CLinha::~CLinha() {

	if(NULL != this->m_oPonto)
       delete this->m_oPonto;
}



//Interface da Classe CLinha:

// Operações da classe

//---------------------------------------------------------------------------
void CLinha::consultarTipoLinha() {
	 this->consultarTipoLinhaDB();
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarVigServicosLinha
//*
//*  <-  CServico - retorno de lista com todos os servicos de uma linha 
//*                 telefonica com suas respectivas vigencias
//*  
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consultar a vigencia dos servicos da linha em questao
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::consultarVigServicosLinha( list< CServico > & listaServico ) {
    ULOG_START( "CLinha::consultarVigServicosLinha()" );
    
    CServico::consultarVigServicosLinha( this->getCdAreaRegistro(),
										 this->getNrLinha(),
                                         listaServico);

    ULOG_END( "CLinha::consultarVigServicosLinha()" );

}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  validarLinha
//*
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Validar existencia de uma determinada linha telefonica
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::validarLinha(void)
{
	this->validarLinhaDB();
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarLinhasDisp
//*
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consulta linhas atreladas a uma pessoa
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::consultarLinhasDisp( int iIdPessoa, list< CLinha > & listaLinha )
{
	consultarLinhasDispDB(iIdPessoa, listaLinha);
}


//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarServicos
//*
//*  <-  CServico - retorno de lista com todos os servicos e quais estão habilitados
//*  
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consultar a vigencia dos servicos da linha em questao
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::consultarServicos( list< CServico > & listaServico ) {
    ULOG_START( "CLinha::consultarServicos()" );
    
    CServico::consultarServicosLinha(	this->getCdAreaRegistro(),
										this->getNrLinha(),
                                        listaServico);
    ULOG_END( "CLinha::consultarServicos()" );

}

/*

  GETs

*/


//---------------------------------------------------------------------------
int CLinha::getCdAreaRegistro() {
	return this->m_iCdAreaRegistro;
}

//---------------------------------------------------------------------------
int CLinha::getNrLinha() {
	return this->m_iNrLinha;
}

//---------------------------------------------------------------------------
int CLinha::getIdTipoLinha() {
	return this->m_iIdTipoLinha;
}

//---------------------------------------------------------------------------
char * CLinha::getDsTipoLinha() {
	return this->m_cDsTipoLinha;
}

//---------------------------------------------------------------------------
CPonto * CLinha::getPonto() {

	if(this->m_oPonto == NULL)
		this->m_oPonto = new CPonto();

	return this->m_oPonto;
}

/*
 
   SETs

*/


//---------------------------------------------------------------------------
void CLinha::setCdAreaRegistro(int value) {
	this->m_iCdAreaRegistro = value;
}

//---------------------------------------------------------------------------
void CLinha::setNrLinha(int value) {
	this->m_iNrLinha = value;
}

//---------------------------------------------------------------------------
void CLinha::setIdTipoLinha(int value) {
	this->m_iIdTipoLinha = value;
}

//---------------------------------------------------------------------------
void CLinha::setDsTipoLinha(char *value) {
	strcpy(this->m_cDsTipoLinha,value); 
}



// Metodos que acionam a interface de m_oPessoa (CPessoa)
char* CLinha::obterLembreteSenha(void){
    // Delega para CSenha a Execução da Consulta.
	return this->m_oPessoa->obterLembreteSenha(this->getCdAreaRegistro(), this->getNrLinha());

}

void CLinha::consultarExtratoPontos() {
	this->getPonto()->consultarExtrato(this->getCdAreaRegistro(), 
                                        this->getNrLinha());
}

// PRIVATE
// Métodos de acesso a banco de dados

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarTipoLinhaDB
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consultar informacoes do tipo da linha
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::consultarTipoLinhaDB(void) {

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
 	int  iCdAreaRegistro;
 	int  iNrLinha;
 	int  iIdTipoLinha;
	char cDsTipoLinha[256];
 	EXEC SQL END DECLARE SECTION;
	
	iCdAreaRegistro = this->getCdAreaRegistro();
	iNrLinha = this->getNrLinha();
	

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
     
	EXEC SQL
	SELECT
		linhaTelefonica.idTipoLinha, dsTipoLinha
	INTO
		:iIdTipoLinha, :cDsTipoLinha
	FROM
		linha.linhaBase linhaBase,
		linha.LinhaTelefonica linhaTelefonica, 
		apoio.areaRegistro areaRegistro,
		apoio.tipolinha TipoLinha
	WHERE
		linhaBase.nrLinha =  :iNrLinha AND
		linhaBase.IDAREAREGISTRO = areaRegistro.IDAREAREGISTRO AND
		areaRegistro.CDAREAREGISTRO =  :iCdAreaRegistro AND
		/*   linhaBase.IDLINHABASE = linhaTelefonica.IDLINHATELEFONICA AND   */
		linhaBase.IDLINHABASE = linhaTelefonica.IDLINHABASE AND
		linhaTelefonica.IDTIPOLINHA  =  TipoLinha.IDTIPOLINHA;
	

	// ID não existe
	if (sqlca.sqlcode == NO_DATA_FOUND) {
		throw new TuxBasicOraException(sqlca.sqlcode);
	}

	this->setIdTipoLinha(iIdTipoLinha);
	this->setDsTipoLinha(CUtil::trim(cDsTipoLinha));
    
	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  validarLinhaDB
//*
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Validar existencia de uma determinada linha telefonica
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::validarLinhaDB(void)
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
 	int  iCdAreaRegistro;
 	int  iNrLinha;
 	EXEC SQL END DECLARE SECTION;

	iCdAreaRegistro = this->getCdAreaRegistro();
	iNrLinha = this->getNrLinha();

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
     
	EXEC SQL 
	SELECT
		cdAreaRegistro, nrLinha
	INTO
		:iCdAreaRegistro, :iNrLinha
	FROM
		linha.linhaBase linhaBase,
		linha.LinhaTelefonica linhaTelefonica, 
		apoio.areaRegistro areaRegistro		
	WHERE
		 linhaBase.nrLinha =  :iNrLinha AND
		 linhaBase.IDAREAREGISTRO = areaRegistro.IDAREAREGISTRO AND
		 areaRegistro.CDAREAREGISTRO =  :iCdAreaRegistro AND
		 linhaBase.IDLINHABASE = linhaTelefonica.IDLINHATELEFONICA;
	

	// ID não existe
	if (sqlca.sqlcode == NO_DATA_FOUND) {
		throw new TuxBasicOraException(sqlca.sqlcode);
	}

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode);	
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarLinhasDispDB
//*
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consulta linhas atreladas a uma pessoa
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CLinha::consultarLinhasDispDB( int iIdPessoa, list< CLinha > & listaLinha )
{
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
 	int  iIdPessoaDB;
 	int  iCdAreaRegistro;
 	int  iNrLinha;
 	EXEC SQL END DECLARE SECTION;
	
	CLinha	oLinha;
	
	// valores das chaves da consulta SQL
    iIdPessoaDB = iIdPessoa;

	// garante que a lista esta vazia
	listaLinha.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
	EXEC SQL DECLARE LSTARVORECLI CURSOR FOR

		SELECT
			f.cdAreaRegistro, e.nrLinha	
		FROM
			customer.Pessoa        a,
			customer.PessoaDePara  b,
			customer.PessoaLinha   c,
			linha.LinhaTelefonica  d,
			linha.LinhaBase        e,
			apoio.AreaRegistro     f
		WHERE
			a.idPessoa = :iIdPessoaDB AND
			a.idPessoa = b.idPessoa AND 
			b.idPessoaDePara = c.idPessoaDePara AND
			c.idLinhaTelefonica = d.idLinhaTelefonica AND
			d.idLinhaBase = e.idLinhaBase AND
			e.idAreaRegistro = f.idAreaRegistro;
			
	EXEC SQL WHENEVER NOT FOUND DO break;
	
	EXEC SQL OPEN LSTARVORECLI;

	for( ;; ) {

		// varre todos os registros para criar a lista com as linhas

		EXEC SQL FETCH LSTARVORECLI INTO
			:iCdAreaRegistro, iNrLinha;

		oLinha.setCdAreaRegistro( iCdAreaRegistro );
		oLinha.setNrLinha( iNrLinha ); 
		
		listaLinha.push_back( oLinha );
	}

	EXEC SQL CLOSE LSTARVORECLI;

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode ); 

}