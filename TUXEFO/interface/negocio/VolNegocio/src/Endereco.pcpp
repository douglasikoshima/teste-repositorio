// Endereco.cpp: implementation of the CEndereco class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>

#include "Endereco.hpp"



EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CEndereco::CEndereco()
	: m_iIdTipoEndereco( -1 )
{
	strcpy( this->m_cNmTipoLogradouro, "" );
	strcpy( this->m_cNmTituloLogradouro, "" );
	strcpy( this->m_cNmLogradouro, "" );
	strcpy( this->m_cNrEndereco, "" );
	strcpy( this->m_cDsEnderecoComplemento, "" );
	strcpy( this->m_cNmBairro, "" );
	strcpy( this->m_cNrCep, "" );
	strcpy( this->m_cNmMunicipio, "" );
	strcpy( this->m_cDsTipoEndereco, "" );
	strcpy( this->m_cSgTipoEndereco, "" );
}

CEndereco::CEndereco( const CEndereco & value )
	: m_iIdTipoEndereco( value.m_iIdTipoEndereco )
{
	strcpy( this->m_cNmTipoLogradouro, value.m_cNmTipoLogradouro );
	strcpy( this->m_cNmTituloLogradouro, value.m_cNmTituloLogradouro );
	strcpy( this->m_cNmLogradouro, value.m_cNmLogradouro );
	strcpy( this->m_cNrEndereco, value.m_cNrEndereco );
	strcpy( this->m_cDsEnderecoComplemento, value.m_cDsEnderecoComplemento );
	strcpy( this->m_cNmBairro, value.m_cNmBairro );
	strcpy( this->m_cNrCep, value.m_cNrCep );
	strcpy( this->m_cNmMunicipio, value.m_cNmMunicipio );
	strcpy( this->m_cDsTipoEndereco, value.m_cDsTipoEndereco );
	strcpy( this->m_cSgTipoEndereco, value.m_cSgTipoEndereco );
}

CEndereco::~CEndereco() {
}

CEndereco & CEndereco::operator =( const CEndereco & value ) {
	this->m_iIdTipoEndereco = value.m_iIdTipoEndereco;
	strcpy( this->m_cNmTipoLogradouro, value.m_cNmTipoLogradouro );
	strcpy( this->m_cNmTituloLogradouro, value.m_cNmTituloLogradouro );
	strcpy( this->m_cNmLogradouro, value.m_cNmLogradouro );
	strcpy( this->m_cNrEndereco, value.m_cNrEndereco );
	strcpy( this->m_cDsEnderecoComplemento, value.m_cDsEnderecoComplemento );
	strcpy( this->m_cNmBairro, value.m_cNmBairro );
	strcpy( this->m_cNrCep, value.m_cNrCep );
	strcpy( this->m_cNmMunicipio, value.m_cNmMunicipio );
	strcpy( this->m_cDsTipoEndereco, value.m_cDsTipoEndereco );
	strcpy( this->m_cSgTipoEndereco, value.m_cSgTipoEndereco );
	return *this;
}

/*

  GETs

*/

int CEndereco::getIdTipoEndereco() {
	return this->m_iIdTipoEndereco;
}

char * CEndereco::getNmTipoLogradouro() {
	return this->m_cNmTipoLogradouro;
}

char * CEndereco::getNmTituloLogradouro() {
	return this->m_cNmTituloLogradouro;
}

char * CEndereco::getNmLogradouro() {
	return this->m_cNmLogradouro;
}

char * CEndereco::getNrEndereco() {
	return this->m_cNrEndereco;
}

char * CEndereco::getDsEnderecoComplemento() {
	return this->m_cDsEnderecoComplemento;
}

char * CEndereco::getNmBairro() {
	return this->m_cNmBairro;
}

char * CEndereco::getNrCep() {
	return this->m_cNrCep;
}

char * CEndereco::getNmMunicipio() {
	return this->m_cNmMunicipio;
}

char * CEndereco::getSgTipoEndereco(){
	return this->m_cSgTipoEndereco;
}
char * CEndereco::getDsTipoEndereco(){
	return this->m_cDsTipoEndereco;
}

/*
 
   SETs

*/

void CEndereco::setIdTipoEndereco( int value ) {
	this->m_iIdTipoEndereco = value;
}

void CEndereco::setNmTipoLogradouro( char * value ) {
	strcpy( this->m_cNmTipoLogradouro, value );
}

void CEndereco::setNmTituloLogradouro( char * value ) {
	strcpy( this->m_cNmTituloLogradouro, value );
}

void CEndereco::setNmLogradouro( char * value ) {
	strcpy( this->m_cNmLogradouro, value );
}

void CEndereco::setNrEndereco( char * value ) {
	strcpy( this->m_cNrEndereco, value );
}

void CEndereco::setDsEnderecoComplemento( char * value ) {
	strcpy( this->m_cDsEnderecoComplemento, value );
}

void CEndereco::setNmBairro( char * value ) {
	strcpy( this->m_cNmBairro, value );
}

void CEndereco::setNrCep( char * value ) {
	strcpy( this->m_cNrCep, value );
}

void CEndereco::setNmMunicipio( char * value ) {
	strcpy( this->m_cNmMunicipio, value );
}

void CEndereco::setSgTipoEndereco(char * value){
	strcpy( this->m_cSgTipoEndereco, value );
}
void CEndereco::setDsTipoEndereco(char * value){
	strcpy( this->m_cDsTipoEndereco, value );
}

//Metodos de Negocio da Interface da Classe CEndereco:

void CEndereco::alterarEndereco( int iIdPessoa ) {
	 this->alterarDadosEnderecoDB( iIdPessoa );
}

void CEndereco::inserirEndereco( int iIdPessoa ) {
	 this->inserirDadosEnderecoDB( iIdPessoa );
}

void CEndereco::consultarEndereco( int iIdPessoa ) {
	 this->carregarDadosEnderecoDB( iIdPessoa );
}

void CEndereco::consultarTipoEnd(list < CEndereco > & listaEnd ){

	CEndereco::carregarTipoEnderecoDB( listaEnd );

}



// METODOS PRIVATE

void CEndereco::alterarDadosEnderecoDB( int iIdPessoa ) {

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		int  iIdPessoaAux;
		int  iIdTipoEndereco;
		char cNmTipoLogradouro[ 256 ];
		char cNmTituloLogradouro[ 256 ];
		char cNmLogradouro[ 256 ];
		char cNrEndereco[ 256 ];
		char cDsEnderecoComplemento[ 256 ];
		char cNmBairro[ 256 ];
		char cNrCep[ 256 ];
		char cNmMunicipio[ 256 ];
 	EXEC SQL END DECLARE SECTION;

	iIdPessoaAux = iIdPessoa;
	iIdTipoEndereco = this->m_iIdTipoEndereco;
	strcpy( cNmTipoLogradouro, this->m_cNmTipoLogradouro );
	strcpy( cNmTituloLogradouro, this->m_cNmTituloLogradouro );
	strcpy( cNmLogradouro, this->m_cNmLogradouro );
	strcpy( cNrEndereco, this->m_cNrEndereco );
	strcpy( cDsEnderecoComplemento, this->m_cDsEnderecoComplemento );
	strcpy( cNmBairro, this->m_cNmBairro );
	strcpy( cNrCep, this->m_cNrCep );
	strcpy( cNmMunicipio, this->m_cNmMunicipio );

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
     
	EXEC SQL UPDATE
		customer.PessoaEndereco 
	SET
		nmTipoLogradouro = :cNmTipoLogradouro
		, nmTituloLogradouro = :cNmTituloLogradouro
		, nmLogradouro = :cNmLogradouro
		, nrEndereco = :cNrEndereco
		, dsEnderecoComplemento = :cDsEnderecoComplemento
		, nmBairro = :cNmBairro
		, nrCep = :cNrCep
		, nmMunicipio = :cNmMunicipio
	WHERE
		idPessoa = :iIdPessoaAux
		and idTipoEndereco = :iIdTipoEndereco;


	if (sqlca.sqlcode > 0){
		throw TuxBasicOraException( sqlca.sqlcode );
	}

	return;
	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode );

}
void CEndereco::inserirDadosEnderecoDB( int iIdPessoa ) {

	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		int  iIdPessoaAux;
		int  iIdTipoEndereco;
		int cAuxIdPessoaEnd;
		char cNmTipoLogradouro[ 256 ];
		char cNmTituloLogradouro[ 256 ];
		char cNmLogradouro[ 256 ];
		char cNrEndereco[ 256 ];
		char cDsEnderecoComplemento[ 256 ];
		char cNmBairro[ 256 ];
		char cNrCep[ 256 ];
		char cNmMunicipio[ 256 ];
 	EXEC SQL END DECLARE SECTION;

	iIdPessoaAux = iIdPessoa;
	iIdTipoEndereco = this->m_iIdTipoEndereco;
	strcpy( cNmTipoLogradouro, this->m_cNmTipoLogradouro );
	strcpy( cNmTituloLogradouro, this->m_cNmTituloLogradouro );
	strcpy( cNmLogradouro, this->m_cNmLogradouro );
	strcpy( cNrEndereco, this->m_cNrEndereco );
	strcpy( cDsEnderecoComplemento, this->m_cDsEnderecoComplemento );
	strcpy( cNmBairro, this->m_cNmBairro );
	strcpy( cNrCep, this->m_cNrCep );
	strcpy( cNmMunicipio, this->m_cNmMunicipio );

	/*IDPESSOAENDERECO, IDPESSOA, IDPAIS, IDTIPOENDERECO, IDUF, IDSISTEMAORIGEM*/

	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
//EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
	EXEC SQL SELECT customer.pessoaenderecoSQ.NEXTVAL INTO :cAuxIdPessoaEnd FROM DUAL;

	EXEC SQL INSERT INTO 
		customer.PessoaEndereco (
			IDPESSOAENDERECO,
			IDPESSOA,
			IDPAIS,
			IDTIPOENDERECO,
			IDUF,
			IDSISTEMAORIGEM,
			nmTipoLogradouro
			, nmTituloLogradouro
			, nmLogradouro
			, nrEndereco
			, dsEnderecoComplemento
			, nmBairro
			, nrCep
			, nmMunicipio )
	VALUES	(
			:cAuxIdPessoaEnd
		, :iIdPessoaAux
		, '1'
		, :iIdTipoEndereco
		, '1'
		, '1'
		, :cNmTipoLogradouro
		, :cNmTituloLogradouro
		, :cNmLogradouro
		, :cNrEndereco
		, :cDsEnderecoComplemento
		, :cNmBairro
		, :cNrCep
		, :cNmMunicipio);

	EXEC SQL COMMIT;

/*	if (sqlca.sqlcode < 0){
		throw TuxBasicOraException( sqlca.sqlcode );
	}
*/

	//Verifica se houve ou nao erro ORACLE
	if(sqlca.sqlcode < 0) {
		throw TuxBasicOraException( sqlca.sqlcode );
	}

	return;

	sqlErrorConstrutor:
			throw TuxBasicOraException( sqlca.sqlcode );

}


void CEndereco::carregarDadosEnderecoDB( int iIdPessoa ) {
	 
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	int  iIdPessoaDB;
	int  iIdTipoEnderecoDB;
	char cNmTipoLogradouro[ 256 ];
	char cNmTituloLogradouro[ 256 ];
	char cNmLogradouro[ 256 ];
	char cNrEndereco[ 256 ];
	char cDsEnderecoComplemento[ 256 ];
	char cNmBairro[ 256 ];
	char cNrCep[ 256 ];
	char cNmMunicipio[ 256 ];
	EXEC SQL END DECLARE SECTION;
		
	// valores das chaves da consulta SQL
    iIdPessoaDB = iIdPessoa;
	iIdTipoEnderecoDB = this->getIdTipoEndereco();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
	
	EXEC SQL
	SELECT 
		NVL(nmTipoLogradouro, ' ') AS nmTipoLogradouro,
		NVL(nmTituloLogradouro, ' ') AS nmTituloLogradouro,
		NVL(nmLogradouro, ' ') AS nmLogradouro,
		NVL(nrEndereco, ' ') AS nrEndereco,
		NVL(dsEnderecoComplemento, ' ') AS dsEnderecoComplemento,
		NVL(nmBairro, ' ') AS nmBairro,
		NVL(nrCep, ' ') AS  nrCep,
		NVL(nmMunicipio, ' ') AS nmMunicipio
	INTO
		:cNmTipoLogradouro,
		:cNmTituloLogradouro,
		:cNmLogradouro,
		:cNrEndereco, 
		:cDsEnderecoComplemento, 
		:cNmBairro, 
		:cNrCep, 
		:cNmMunicipio
	FROM
		customer.PessoaEndereco PessoaEndereco,
		customer.Pessoa Pessoa
	WHERE
		Pessoa.idPessoa = :iIdPessoaDB AND
		Pessoa.idPessoa = PessoaEndereco.IDPESSOA AND
		PessoaEndereco.idTipoEndereco = :iIdTipoEnderecoDB;
	
		
	// Endereço não existe
	if (sqlca.sqlcode == NO_DATA_FOUND) {
		throw new TuxBasicOraException(sqlca.sqlcode);
	}

	this->setNmTipoLogradouro( CUtil::trim(cNmTipoLogradouro) );
	this->setNmTituloLogradouro( CUtil::trim(cNmTituloLogradouro) );
	this->setNmLogradouro( CUtil::trim(cNmLogradouro) );
	this->setNrEndereco( CUtil::trim(cNrEndereco) ); 
	this->setDsEnderecoComplemento( CUtil::trim(cDsEnderecoComplemento) ); 
	this->setNmBairro( CUtil::trim(cNmBairro) ); 
	this->setNrCep( CUtil::trim(cNrCep) ); 
	this->setNmMunicipio( CUtil::trim(cNmMunicipio) ); 

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode ); 
}

// Métodos de acesso a banco de dados
void CEndereco::carregarTipoEnderecoDB(list < CEndereco > & listaEnd){

	struct sqlca sqlca;

	
	EXEC SQL BEGIN DECLARE SECTION;
		int  iIdTpEnd;
		char cSgTpEnd[ 256 ];
		char cDsTpEnd[ 256 ];
 	EXEC SQL END DECLARE SECTION;
	
	CEndereco oEndereco;

	// Marca ponto de controle de erro
	listaEnd.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

    EXEC SQL DECLARE LSTEND CURSOR FOR

		SELECT
			idTipoEndereco,
			sgTipoEndereco,
			dsTipoEndereco
		FROM
			apoio.TipoEndereco;

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTEND;

	for( ;; ) {
	// varre todos os registros para criar a lista com os Relacionamentos
		EXEC SQL FETCH LSTEND INTO
			  :iIdTpEnd
			, :cSgTpEnd
			, :cDsTpEnd;

			oEndereco.setIdTipoEndereco(iIdTpEnd);
			oEndereco.setSgTipoEndereco(CUtil::trim(cSgTpEnd));
			oEndereco.setDsTipoEndereco(CUtil::trim(cDsTpEnd));


			listaEnd.push_back( oEndereco );
	}

	EXEC SQL CLOSE LSTEND;
	return;
 
	sqlErrorConstrutor:
			throw TuxBasicOraException( sqlca.sqlcode );

}

