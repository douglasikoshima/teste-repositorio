// TipoRecarga.cpp: implementation of the CTipoRecarga class.
//
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
#include "Defines.h"
#include "Util.hpp"
#include "TipoRecarga.hpp"

EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CTipoRecarga::CTipoRecarga()
{  	   
	this->setIdTipoRecarga(-1);
	this->setDsTipoRecarga("");
	this->setDtValidade1("");
	this->setDtValidade2("");
	this->setVlTipoRecarga("");
}

CTipoRecarga::~CTipoRecarga() 
{

}

/*

  GETs

*/

int CTipoRecarga::getIdTipoRecarga() 
{
	return this->m_iIdTipoRecarga;
}

char * CTipoRecarga::getDsTipoRecarga() 
{
	return this->m_cDsTipoRecarga;
}

char * CTipoRecarga::getDtValidade1() 
{
	return this->m_cDtValidade1;
}

char * CTipoRecarga::getDtValidade2() 
{
	return this->m_cDtValidade2;
}

char * CTipoRecarga::getVlTipoRecarga() 
{
	return this->m_cVlTipoRecarga;
}

/*

   SETs

*/

void CTipoRecarga::setIdTipoRecarga(int value) 
{
	this->m_iIdTipoRecarga = value;
}

void CTipoRecarga::setDsTipoRecarga(char *value) 
{
	strcpy(this->m_cDsTipoRecarga, value);
}

void CTipoRecarga::setDtValidade1(char *value) 
{
	strcpy(this->m_cDtValidade1, value);
}

void CTipoRecarga::setDtValidade2(char *value) 
{
	strcpy(this->m_cDtValidade2, value);
}

void CTipoRecarga::setVlTipoRecarga(char *value) 
{
	strcpy(this->m_cVlTipoRecarga, value);
}

//Metodos de Negocio da Interface da Classe CTipoRecarga:

void CTipoRecarga::consultarTipoRecargas(int iCdAreaRegistro,
                                         list< CTipoRecarga > & listaRecargas)
{
	CTipoRecarga::carregarTipoRecargasDB(iCdAreaRegistro, listaRecargas);
}

// Métodos de acesso a banco de dados
void CTipoRecarga::carregarTipoRecargasDB(int iCdAreaRegistro,
                                          list< CTipoRecarga > & listaRecargas)
{ 
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;	
	int  iCdAreaRegistroDB;
	int  iIdTipoRecarga;
	char cDsTipoRecarga[56];
	char cDtValidade1[32];
	char cDtValidade2[32];
	//char cVlTipoRecarga[32];
	EXEC SQL END DECLARE SECTION;

	CTipoRecarga     oRecarga;

	// valores das chaves da consulta SQL
	iCdAreaRegistroDB = iCdAreaRegistro;

	// garante que a lista esta vazia
	listaRecargas.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	EXEC SQL DECLARE LSTTIPORECARGAS CURSOR FOR

		SELECT
			idTipoRecarga,
			NVL(dsTipoRecarga, ' ') as dsTipoRecarga,
			NVL(dtValidade1, ' ') as dtValidade1,
			NVL(dtValidade2, ' ') as dtValidade2
			//NVL(vlTipoRecarga, ' ') as vlTipoRecarga
		FROM
			Apoio.TipoRecarga
		WHERE
			idUFOperadora = :iCdAreaRegistroDB;

	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTTIPORECARGAS;

	for( ;; ) 
	{

		// varre todos os registros para criar a lista com os bancos

		EXEC SQL FETCH LSTTIPORECARGAS INTO
			:iIdTipoRecarga,
			:cDsTipoRecarga,
			:cDtValidade1,
			:cDtValidade2;
			//:cVlTipoRecarga;

		oRecarga.setIdTipoRecarga(iIdTipoRecarga);		
		oRecarga.setDsTipoRecarga(CUtil::trim(cDsTipoRecarga));
		oRecarga.setDtValidade1(CUtil::trim(cDtValidade1));
		oRecarga.setDtValidade2(CUtil::trim(cDtValidade2));
		//oRecarga.setVlTipoRecarga(CUtil::trim(cVlTipoRecarga));

		listaRecargas.push_back(oRecarga);

	}

	EXEC SQL CLOSE LSTTIPORECARGAS;

	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException(sqlca.sqlcode); 

}