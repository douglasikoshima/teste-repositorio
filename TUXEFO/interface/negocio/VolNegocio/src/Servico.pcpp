//---------------------------------------------------------------------------
//                         (c) Consórcio Indra/PT-SI.
//                            xxxxxxxxxxxxxxxxxxxxxxx
//                                xxxxxxxxxxxxxx
//-----------------------------------------------------------------------------
// Los contenidos de este fichero son propiedad de Telefónica Consórcio Indra/PT-SI. 
// titular del copyright. Este fichero solo podra ser copiado, distribuido y utilizado, 
// en su totalidad o en parte, con el permiso escrito de Consórcio Indra/PT-SI 
// o de acuerdo con los terminos y condiciones establecidas en el acuerdo/contrato bajo 
// el que se suministra.
//---------------------------------------------------------------------------
//*  Modulo                   : LSTSERVICOS, LSTVIGSERV
//*  Fichero                  : Servico
//*  Tipo                     : .cpp
//*  Autor                    : Aldebaran
//*  Fecha primera version    : 
//*  Version actual           : 
//*//---------------------------------------------------------------------------
//*  Proposito:
//*
//*  Implementar os negocios referentes aos servicos disponiveis as linhas 
//*  telefonicas ou ao sistema
//*//---------------------------------------------------------------------------
//*  Dependencias:
//*
//*  Linha.hpp
//*//---------------------------------------------------------------------------
//*  Consideraciones de portabilidad:
//*
//*  
////---------------------------------------------------------------------------

#undef SQLCA
#define SQLCA_NONE

#include <sqlca.h>
#include <tuxfw.h>
#include "Defines.h"
#include "Util.hpp"
#include "Servico.hpp"


EXEC SQL INCLUDE SQLCA;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------------------
CServico::CServico() {
	m_iIdServico = -1;
	strcpy( this->m_cSgServico, "" );
	strcpy( this->m_cNmServico, "" );
	strcpy( this->m_cIdServicoSistemaOrigem, "");
	strcpy( this->m_cDtVigenciaInicio, "");
	strcpy( this->m_cDtVigenciaFinal, "");
	strcpy(this->m_servicoAtlys,"");
	m_iInHabilitado = -1;
}

//---------------------------------------------------------------------------
CServico::CServico( const CServico & value )
	               : m_iIdServico( value.m_iIdServico )
{
	strcpy( this->m_cSgServico, value.m_cSgServico );
	strcpy( this->m_cNmServico, value.m_cNmServico );
	strcpy( this->m_cDtVigenciaInicio, value.m_cDtVigenciaInicio);
	strcpy( this->m_cDtVigenciaFinal, value.m_cDtVigenciaFinal);
	strcpy( this->m_cIdServicoSistemaOrigem, value.m_cIdServicoSistemaOrigem );
	strcpy( this->m_servicoAtlys,value.m_servicoAtlys);
	m_iInHabilitado = value.m_iInHabilitado;
}
//---------------------------------------------------------------------------
CServico::~CServico() {
}

//---------------------------------------------------------------------------
CServico & CServico::operator =( const CServico & value ) {
	this->m_iIdServico = value.m_iIdServico;
	strcpy( this->m_cSgServico, value.m_cSgServico );
	strcpy( this->m_cNmServico, value.m_cNmServico );
	strcpy( this->m_cDtVigenciaInicio, value.m_cDtVigenciaInicio);
	strcpy( this->m_cDtVigenciaFinal, value.m_cDtVigenciaFinal);
	strcpy( this->m_cIdServicoSistemaOrigem, value.m_cIdServicoSistemaOrigem );
	strcpy( this->m_servicoAtlys,value.m_servicoAtlys);
	this->m_iInHabilitado = value.m_iInHabilitado;
	return *this;
}

//---------------------------------------------------------------------------
bool CServico::operator==( const CServico & s ) { 
	//(this->m_cSgServico == s.m_cSgServico) &&  
	//(this->m_cDtVigenciaInicio == s.m_cDtVigenciaInicio) &&
	//(this->m_cDtVigenciaFinal == s.m_cDtVigenciaFinal) &&
	//(this->m_iInHabilitado == s.m_iInHabilitado) 
	//(this->m_cNmServico == s.m_cNmServico)
 	//(this->m_cNmServico == s.m_cNmServico))
 
  return (this->m_iIdServico == s.m_iIdServico);

}

//Interface da Classe CServico:

// Operações da classe

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarServicosLinha
//* 
//*  <-  CServico        - lista de retorno com todos os servicos existentes
//*  
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Montar lista com todos os servicos existentes
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CServico::consultarServicosLinha(int iCdAreaRegistro, int iNrLinha, list< CServico > & listaServico ) {
    ULOG_START( "CServico::consultarServicosLinha()" );
	 CServico::consultarDadosServicosLinhaDB( iCdAreaRegistro, iNrLinha, listaServico );
    ULOG_END( "CServico::consultarServicosLinha()" );
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarVigServicosLinha
//*
//*  ->  iCdAreaRegistro - codigo de area da linha
//*  ->  iNrLinha        - numero da linha
//*  <-  CServico        - lista de retorno com todos os servicos disponiveis
//*                        para a linha
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consultar a vigencia dos servicos da linha em questao
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CServico::consultarVigServicosLinha( int iCdAreaRegistro, int iNrLinha, list< CServico > & listaServico ) {
    ULOG_START( "CServico::consultarVigServicosLinha()" );
	CServico::carregarDadosVigServicosLinhaDB( iCdAreaRegistro, iNrLinha, listaServico );
    ULOG_END( "CServico::consultarVigServicosLinha()" );

}

void CServico::consultarVigenciaInvertida( int iCdAreaRegistro, int iNrLinha, char* cDsServico){
	CServico::consultarVigenciaInvertidaDB( iCdAreaRegistro, iNrLinha, cDsServico);
}

/*

  GETs

*/

//---------------------------------------------------------------------------
int CServico::getIdServico() {
	return this->m_iIdServico;
}

//---------------------------------------------------------------------------
char * CServico::getSgServico() {
	return this->m_cSgServico;
}

//---------------------------------------------------------------------------
char * CServico::getNmServico() {
	return this->m_cNmServico;
}

//---------------------------------------------------------------------------
char * CServico::getDtVigenciaInicio() {	
	return this->m_cDtVigenciaInicio;
}

//---------------------------------------------------------------------------
char * CServico::getDtVigenciaFinal() {
	return this->m_cDtVigenciaFinal;
}

//---------------------------------------------------------------------------
int CServico::getInHabilitado() {
	return this->m_iInHabilitado;
}

//---------------------------------------------------------------------------
char * CServico::getIdServicoSistemaOrigem() {
	return this->m_cIdServicoSistemaOrigem;
}

char * CServico::getServicoAtlys(){
	return this->m_servicoAtlys;
}
/*
 
   SETs

*/

//---------------------------------------------------------------------------
void CServico::setIdServico(int value) {
	this->m_iIdServico = value;
}

//---------------------------------------------------------------------------
void CServico::setSgServico(char *value) {
	strcpy(this->m_cSgServico,value); 
}

//---------------------------------------------------------------------------
void CServico::setNmServico(char *value) {
	strcpy(this->m_cNmServico,value); 
}

//---------------------------------------------------------------------------
void CServico::setDtVigenciaInicio(char *value) {
	strcpy(this->m_cDtVigenciaInicio,value); 
}

//---------------------------------------------------------------------------
void CServico::setDtVigenciaFinal(char *value) {
	strcpy(this->m_cDtVigenciaFinal,value); 
}

//---------------------------------------------------------------------------
void CServico::setInHabilitado(int value) {
	this->m_iInHabilitado = value;
}

//---------------------------------------------------------------------------
void CServico::setIdServicoSistemaOrigem(char *value) {
	strcpy(this->m_cIdServicoSistemaOrigem,value); 
}

void CServico::setServicoAtlys(char* value){
	strcpy(this->m_servicoAtlys,value);
}

// PRIVATE
// Métodos de acesso a banco de dados


void CServico::consultarVigenciaInvertidaDB( int iCdAreaRegistro, int iNrLinha, char* cDsServico) {
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
	int  iCdAreaRegistroAux;
	int  iNrLinhaAux;
	char cDsServicoAux[256]="";
	char cDtVigenciaFinalAux[10+1]="";
 	EXEC SQL END DECLARE SECTION;
	

	// valores das chaves da consulta SQL
    iCdAreaRegistroAux = iCdAreaRegistro;
    iNrLinhaAux = iNrLinha;
	strcpy(cDsServicoAux, cDsServico);

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;

	EXEC SQL
		SELECT
			DECODE(MAX(DTVIGENCIAFINAL), NULL,' ',TO_CHAR(MAX(DTVIGENCIAFINAL), 'dd/mm/yyyy'))
		INTO
			:cDtVigenciaFinalAux
		FROM
			linha.LinhaTelefonica 	a,
			linha.LinhaBase 			b,
			apoio.AreaRegistro 		c,
			linha.PlanoServicoLinha  	d,
			linha.PlanoServico 		e
		WHERE
			a.idLinhaBase 		= b.idLinhaBase
		AND	b.idAreaRegistro 	= c.idAreaRegistro
		AND	a.idLinhaTelefonica = d.idLinhaTelefonica
		AND	d.idServico 		= e.idServico
		AND	NVL(d.inPlano,0) 	= 0
		AND	cdAreaRegistro		= :iCdAreaRegistroAux
		AND nrLinha				= :iNrLinhaAux
		AND sgServico			= :cDsServicoAux;

	strcpy(cDtVigenciaFinalAux, CUtil::trim(cDtVigenciaFinalAux));

	this->setDtVigenciaInicio(cDtVigenciaFinalAux);


	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode ); 
	
}
	

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  consultarLstServicosDB
//* 
//*  <-  CServico        - lista de retorno com todos os servicos existentes e 
//*						   ativos para a linha.
//*  
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Montar, a partir do banco, lista com todos os servicos existentes
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CServico::consultarDadosServicosLinhaDB(int iCdAreaRegistro,
                                             int iNrLinha, 
											 list< CServico > & listaServico ) {

    ULOG_START( "CServico::consultarDadosServicosLinhaDB()" );
    
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
 	int  iIdServico;
	char cSgServico[ 256 ];
	char cNmServico[ 256 ];
	char cIdServicoSistemaOrigem[ 256 ];
	int iInHabilidato;
	int  iCdAreaRegistroAux;
	int  iNrLinhaAux;
 	EXEC SQL END DECLARE SECTION;

	CServico	oServico;


	// valores das chaves da consulta SQL
    iCdAreaRegistroAux = iCdAreaRegistro;
    iNrLinhaAux = iNrLinha;

	// garante que a lista esta vazia
	listaServico.clear();

	// Marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
     
	EXEC SQL DECLARE LSTSERVICO CURSOR FOR

/*		SELECT
			  e.idServico
			, e.sgServico
			, e.nmServico
			, b.nrLinha
		FROM
			linha.LinhaTelefonica    a ,
			linha.LinhaBase          b , 
			apoio.AreaRegistro       c ,
			linha.PlanoServicoLinha  d ,
			linha.PlanoServico       e   
		WHERE
			c.cdAreaRegistro = :iCdAreaRegistroAux
		And	b.nrLinha = :iNrLinhaAux
		And (e.inPlano = 0 OR e.inPlano is Null)
		And a.idLinhaBase = b.idLinhaBase 
		And b.idAreaRegistro =  c.idAreaRegistro  
		And a.idLinhaTelefonica = d.idLinhaTelefonica
		And a.idLinhaTelefonica = d.idLinhaTelefonica         
		And d.idServico(+) = e.idServico; 
*/

		SELECT Distinct
			  NVL(idServico,0) as idServico
			, NVL(sgServico,' ') as sgServico
			, NVL(nmServico,' ') as nmServico
			, NVL(idServicoSistemaOrigem,' ') as idServicoSistemaOrigem
			, NVL(nrLinha,0) as nrLinha
		FROM
			linha.PlanoServicoLinhaV01
		WHERE
			cdAreaRegistro	= :iCdAreaRegistroAux
		And	nrLinha			= :iNrLinhaAux; 


    ULOG( "*** Realizando pesquisa de Servicos para DDD[%d], nrLinha[%d]", iCdAreaRegistroAux, iNrLinhaAux );
    
	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN LSTSERVICO;

	for( ;; ) {
		EXEC SQL FETCH LSTSERVICO INTO
			  :iIdServico
			, :cSgServico
			, :cNmServico
			, :cIdServicoSistemaOrigem
			, :iInHabilidato;

		oServico.m_iIdServico = iIdServico;
		CUtil::trim(cSgServico);
        CUtil::trim(cNmServico);
		strcpy( oServico.m_cSgServico, cSgServico ); 
		strcpy( oServico.m_cNmServico, cNmServico ); 
		strcpy( oServico.m_cIdServicoSistemaOrigem, cIdServicoSistemaOrigem ); 

		if (iInHabilidato > 0)
			oServico.m_iInHabilitado = 1;
		else
			oServico.m_iInHabilitado = 0;
        
        ULOG( "oServico.m_iIdServico              [%d]", oServico.m_iIdServico );
        ULOG( "oServico.m_cSgServico              [%s]", oServico.m_cSgServico );
        ULOG( "oServico.m_cNmServico              [%s]", oServico.m_cNmServico );
        ULOG( "oServico.m_cIdServicoSistemaOrigem [%s]", oServico.m_cIdServicoSistemaOrigem );
        
		listaServico.push_back( oServico );
	}

	EXEC SQL CLOSE LSTSERVICO;

    ULOG_END( "CServico::consultarDadosServicosLinhaDB()" );
    
	return;

	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode );
}

//---------------------------------------------------------------------------
//*  Especificacion
//*  
//*  carregarDadosVigServicosLinhaDB
//*
//*  ->  iCdAreaRegistro - codigo de area da linha
//*  ->  iNrLinha        - numero da linha
//*  <-  CServico        - lista de retorno com todos os servicos disponiveis
//*                        para a linha
//*
//---------------------------------------------------------------------------
//*  Proposito
//*
//*  Consultar no banco a vigencia dos servicos da linha em questao
//*
//---------------------------------------------------------------------------
//*  Proceso
//*
//*  
//*
//---------------------------------------------------------------------------

void CServico::carregarDadosVigServicosLinhaDB( int iCdAreaRegistro,
                                                int iNrLinha,
												list< CServico > & listaServico ) {
    ULOG_START( "CServico::carregarDadosVigServicosLinhaDB()" );
    
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
 	int  iIdServico;
	char cNmServico[ 256 ];
	char cDtVigenciaInicio[ 32 ];
	char cDtVigenciaFinal[ 32 ];
	int  iCdAreaRegistroAux;
	int  iNrLinhaAux;
 	EXEC SQL END DECLARE SECTION;
	
	CServico	oServico;
	
	// valores das chaves da consulta SQL
    iCdAreaRegistroAux = iCdAreaRegistro;
    iNrLinhaAux = iNrLinha;

	// garante que a lista esta vazia
	listaServico.clear();

	// marca ponto de controle de erro
	EXEC SQL WHENEVER SQLERROR GOTO sqlErrorConstrutor;
    
    ULOG( "*** Realizando pesquisa de Servicos para DDD[%d], nrLinha[%d]", iCdAreaRegistroAux, iNrLinhaAux );    
	
    EXEC SQL DECLARE LSTVIGSERV CURSOR FOR

		SELECT
			idServico
			, NVL(nmServico, ' ')
			, NVL(TO_CHAR(dtVigenciaInicio, 'dd/mm/yyyy'), ' ')
			, NVL(TO_CHAR(dtVigenciaFinal, 'dd/mm/yyyy'), ' ')
		FROM
			linha.PlanoServicoLinhaV01
		WHERE
            cdAreaRegistro = :iCdAreaRegistroAux
            AND nrLinha = :iNrLinhaAux;

	EXEC SQL WHENEVER NOT FOUND DO break;
	
	EXEC SQL OPEN LSTVIGSERV;

	for( ;; ) {

		// varre todos os registros para criar a lista com os servicos

		EXEC SQL FETCH LSTVIGSERV INTO
			:iIdServico
			, :cNmServico
			, :cDtVigenciaInicio
			, :cDtVigenciaFinal;

		oServico.setIdServico( iIdServico );
        ULOG( "*** oServico.setIdServico [%d]", iIdServico );
        
		oServico.setNmServico( CUtil::trim( cNmServico ) ); 
        ULOG( "*** oServico.setNmServico [%s]", CUtil::trim( cNmServico ) );

		//FormatDate(cDate, cDtVigenciaInicio, DATE_TIME_FULL);
		oServico.setDtVigenciaInicio( CUtil::trim( cDtVigenciaInicio ) ); 
        ULOG( "*** oServico.setDtVigenciaInicio [%s]", CUtil::trim( cDtVigenciaInicio ) );
		
		//FormatDate(cDate, cDtVigenciaFinal, DATE_TIME_FULL);
		//CUtilOra::FormatDate( cDate, cDtVigenciaFinal, CUtilOra.DATE_TIME_FULL );
		oServico.setDtVigenciaFinal( CUtil::trim( cDtVigenciaFinal ) ); 
        ULOG( "*** oServico.setDtVigenciaFinal [%s]", CUtil::trim( cDtVigenciaFinal ) );

		listaServico.push_back( oServico );
	}

	EXEC SQL CLOSE LSTVIGSERV;

    ULOG_END( "CServico::carregarDadosVigServicosLinhaDB()" );
    
	return;
 
	sqlErrorConstrutor:
		throw TuxBasicOraException( sqlca.sqlcode ); 
	
}


