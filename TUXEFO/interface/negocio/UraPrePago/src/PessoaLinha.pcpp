// PessoaLinha.cpp: implementation of the PessoaLinha class.
//
//////////////////////////////////////////////////////////////////////

#include "../include/PessoaLinha.h"
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

PessoaLinha::PessoaLinha()
{

}

PessoaLinha::~PessoaLinha()
{

}

int PessoaLinha::getLinha(char*nrLinha,char*cdAreaRegistro,stLinha&linha)
{
	tuxfw_getlogger()->debug("PessoaLinha::getLinha");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR idLinhaTelefonica[21+1];
			VARCHAR nrLinha[16];
			VARCHAR sgTipoLinha[256+1];
		}m_param;
		struct iparam{
			short idLinhaTelefonica;
			short nrLinha;
			short sgTipoLinha;
		}m_iparam;
		char*cnrLinha = nrLinha;
		char*ccdAreaRegistro = cdAreaRegistro;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT
			  LINHATELEFONICA.IDLINHATELEFONICA,
			  AREAREGISTRO.CDAREAREGISTRO || LINHABASE.NRLINHA AS NRLINHA,
			  TIPOLINHA.SGTIPOLINHA
		INTO :m_param:m_iparam
		FROM
			LINHA.LINHABASE  LINHABASE,
			LINHA.LINHATELEFONICA  LINHATELEFONICA,
			APOIO.AREAREGISTRO  AREAREGISTRO,
			APOIO.TIPOLINHA TIPOLINHA
		WHERE
			TIPOLINHA.IDTIPOLINHA = LINHATELEFONICA.IDTIPOLINHA AND
			LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
			LINHABASE.IDLINHABASE = LINHATELEFONICA.IDLINHABASE AND
			LINHABASE.NRLINHA = :cnrLinha AND
			AREAREGISTRO.CDAREAREGISTRO = :ccdAreaRegistro;
	if(sqlca.sqlcode == 1403)
		return 0;

	strcpy(linha.nrLinha,(char*)m_param.nrLinha.arr);
	strcpy(linha.idLinha,(char*)m_param.idLinhaTelefonica.arr);
	strcpy(linha.sgTipoLinha,(char*)m_param.sgTipoLinha.arr);
	tuxfw_getlogger()->debug("TIPOLINHA %s",linha.sgTipoLinha);


	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int PessoaLinha::estadoLinha(char*nrLinha,char*cdAreaRegistro,char*sgClassificacao)
{
	tuxfw_getlogger()->debug("PessoaLinha::estadoLinha");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR dsEstadoLinha[255+1];
		}m_param;
		struct iparam{
			short dsEstadoLinha;
		}m_iparam;
		char*cnrLinha = nrLinha;
		char*ccdAreaRegistro = cdAreaRegistro;
		char*psgClassificacao = sgClassificacao;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));

	tuxfw_getlogger()->debug("sgClassificacao = %s", psgClassificacao);

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT
			ESTADOLINHA.SGCLASSIFICACAO 
		INTO    :m_param:m_iparam
		FROM 
			LINHA.LINHABASE LINHABASE,
			APOIO.AREAREGISTRO AREAREGISTRO,
			APOIO.ESTADOLINHA ESTADOLINHA
		WHERE 
			LINHABASE.NRLINHA = :cnrLinha AND
			AREAREGISTRO.CDAREAREGISTRO = :ccdAreaRegistro AND
			LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
			LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA AND
			ESTADOLINHA.SGCLASSIFICACAO IN (:psgClassificacao);
	if(sqlca.sqlcode == 1403)
		return 0;

	tuxfw_getlogger()->debug("ESTADOLINHA = %s",(char*)m_param.dsEstadoLinha.arr);

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int PessoaLinha::estadoLinhaTitularidade(char*nrLinha,char*cdAreaRegistro)
{
	tuxfw_getlogger()->debug("PessoaLinha::estadoLinhaTitularidade");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR dsEstadoLinha[255+1];
		}m_param;
		struct iparam{
			short dsEstadoLinha;
		}m_iparam;
		char*cnrLinha = nrLinha;
		char*ccdAreaRegistro = cdAreaRegistro;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT
			ESTADOLINHA.SGCLASSIFICACAO 
		INTO    :m_param:m_iparam
		FROM 
			LINHA.LINHABASE LINHABASE,
			APOIO.AREAREGISTRO AREAREGISTRO,
			APOIO.ESTADOLINHA ESTADOLINHA
		WHERE 
			LINHABASE.NRLINHA = :cnrLinha AND
			AREAREGISTRO.CDAREAREGISTRO = :ccdAreaRegistro AND
			LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
			LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA AND
			ESTADOLINHA.SGCLASSIFICACAO IN ('A','B');
	if(sqlca.sqlcode == 1403)
		return 0;

	tuxfw_getlogger()->debug("ESTADOLINHA = %s",(char*)m_param.dsEstadoLinha.arr);

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int PessoaLinha::estadoLinhaAtivo(char*nrLinha,char*cdAreaRegistro)
{
	tuxfw_getlogger()->debug("PessoaLinha::estadoLinhaAtivo");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR dsEstadoLinha[255+1];
		}m_param;
		struct iparam{
			short dsEstadoLinha;
		}m_iparam;
		char*cnrLinha = nrLinha;
		char*ccdAreaRegistro = cdAreaRegistro;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT
			ESTADOLINHA.SGCLASSIFICACAO 
		INTO    :m_param:m_iparam
		FROM 
			LINHA.LINHABASE LINHABASE,
			APOIO.AREAREGISTRO AREAREGISTRO,
			APOIO.ESTADOLINHA ESTADOLINHA
		WHERE 
			LINHABASE.NRLINHA = :cnrLinha AND
			AREAREGISTRO.CDAREAREGISTRO = :ccdAreaRegistro AND
			LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
			LINHABASE.IDESTADOLINHA = ESTADOLINHA.IDESTADOLINHA AND
			ESTADOLINHA.SGCLASSIFICACAO IN ('A','B','P');
	if(sqlca.sqlcode == 1403)
		return 0;

	tuxfw_getlogger()->debug("ESTADOLINHA = %s",(char*)m_param.dsEstadoLinha.arr);

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int PessoaLinha::getPessoaLinha(char*nrLinha,char*cdAreaRegistro,char*idPessoa)
{
	tuxfw_getlogger()->debug("PessoaLinha::getPessoaLinha");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR idPessoa[255+1];
		}m_param;
		struct iparam{
			short idPessoa;
		}m_iparam;
		char*cnrLinha = nrLinha;
		char*ccdAreaRegistro = cdAreaRegistro;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));

	tuxfw_getlogger()->debug("nrLinha = (%s) %s", nrLinha,cdAreaRegistro);

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
	SELECT
		  PESSOA.IDPESSOA
	INTO
		:m_param:m_iparam
	FROM
		LINHA.LINHABASE LINHABASE,
		LINHA.LINHATELEFONICA LINHATELEFONICA,
		APOIO.AREAREGISTRO AREAREGISTRO,
		APOIO.TIPOLINHA TIPOLINHA,
		CUSTOMER.PESSOALINHA PESSOALINHA,
		CUSTOMER.PESSOADEPARA PESSOADEPARA,
		CUSTOMER.PESSOA PESSOA
	WHERE
		PESSOALINHA.IDLINHATELEFONICA = LINHATELEFONICA.IDLINHATELEFONICA AND
		PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA AND
		PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA AND
		TIPOLINHA.IDTIPOLINHA = LINHATELEFONICA.IDTIPOLINHA AND
		LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
		LINHABASE.IDLINHABASE = LINHATELEFONICA.IDLINHABASE AND
		PESSOALINHA.IDTIPORELACIONAMENTO = 2 AND
		LINHABASE.NRLINHA = :cnrLinha AND
		AREAREGISTRO.CDAREAREGISTRO = :ccdAreaRegistro AND
		ROWNUM = 1;
	if(sqlca.sqlcode == 1403)
		return 0;

	tuxfw_getlogger()->debug("IDPESSOA = %s",(char*)m_param.idPessoa.arr);

	strcpy(idPessoa,(char*)m_param.idPessoa.arr);

	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}
