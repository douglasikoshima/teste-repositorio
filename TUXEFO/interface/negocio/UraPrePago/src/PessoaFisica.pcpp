// PessoaFisica.cpp: implementation of the PessoaFisica class.
//
//////////////////////////////////////////////////////////////////////

#include "../include/PessoaFisica.h"
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

PessoaFisica::PessoaFisica()
{

}

PessoaFisica::~PessoaFisica()
{

}

int PessoaFisica::getDadosPessoa(char*idPessoa,stPessoaFisica&pessoaFisica)
{
	tuxfw_getlogger()->debug("PessoaFisica::getDadosPessoa");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR nmPessoa[256];
			VARCHAR idSexo[21];
			VARCHAR dtNascimento[15];
			VARCHAR idEstadoCivil[21];
			VARCHAR idEscolaridade[21];
			VARCHAR idOcupacao[21];
			VARCHAR dsOcupacao[256];
		}m_param;
		struct iparam{
			short nmPessoa;
			short idSexo;
			short dtNascimento;
			short idEstadoCivil;
			short idEscolaridade;
			short idOcupacao;
			short dsOcupacao;
		}m_iparam;
		char*cidPessoa = idPessoa;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT 
			   PESSOA.NMPESSOA,
			   PESSOAFISICA.IDSEXO,
			   TO_CHAR(PESSOAFISICA.DTNASCIMENTO,'DD/MM/RRRR') AS DTNASCIMENTO,
			   PESSOAFISICA.IDESTADOCIVIL,
			   ESCOLARIDADE.IDVALORPOSSIVEL AS IDESCOLARIDADE,
			   OCUPACAO.IDVALORPOSSIVEL AS IDOCUPACAO,
			   OCUPACAO.DSVALORPOSSIVEL AS DSOCUPACAO
		INTO 
				m_param:m_iparam
		FROM
			   CUSTOMER.PESSOA  PESSOA,
			   CUSTOMER.PESSOAFISICA  PESSOAFISICA,
			   (
                    SELECT
                        PESSOAVALORPOSSIVEL.IDPESSOA,
                        VALORPOSSIVEL.IDVALORPOSSIVEL
                    FROM
                        --//CUSTOMER.ATRIBUTO  ATRIBUTO,
                        CUSTOMER.VALORPOSSIVEL  VALORPOSSIVEL,
                        CUSTOMER.PESSOAVALORPOSSIVEL  PESSOAVALORPOSSIVEL
                    WHERE
                        --VALORPOSSIVEL.IDATRIBUTO = ATRIBUTO.IDATRIBUTO AND
                        PESSOAVALORPOSSIVEL.IDVALORPOSSIVEL = VALORPOSSIVEL.IDVALORPOSSIVEL AND
                        PESSOAVALORPOSSIVEL.IDPESSOA = :cidPessoa AND
                        PESSOAVALORPOSSIVEL.DTEXCLUSAO IS NULL AND
                        --//ATRIBUTO.IDATRIBUTO = 90       
                        VALORPOSSIVEL.IDATRIBUTO = 90 /* Escolaridade */
			   )ESCOLARIDADE,
			   (
                    SELECT
                        PESSOAVALORPOSSIVEL.IDPESSOA,
                        VALORPOSSIVEL.IDVALORPOSSIVEL,
                        VALORPOSSIVEL.DSVALORPOSSIVEL
                    FROM
                        --//CUSTOMER.ATRIBUTO  ATRIBUTO,
                        CUSTOMER.VALORPOSSIVEL  VALORPOSSIVEL,
                        CUSTOMER.PESSOAVALORPOSSIVEL  PESSOAVALORPOSSIVEL
                    WHERE
                        --//VALORPOSSIVEL.IDATRIBUTO = ATRIBUTO.IDATRIBUTO AND
                        PESSOAVALORPOSSIVEL.IDVALORPOSSIVEL = VALORPOSSIVEL.IDVALORPOSSIVEL AND
                        PESSOAVALORPOSSIVEL.IDPESSOA = :cidPessoa AND
                        PESSOAVALORPOSSIVEL.DTEXCLUSAO IS NULL AND
                        --//ATRIBUTO.IDATRIBUTO = 107
                        VALORPOSSIVEL.IDATRIBUTO = 107  /* Natureza de ocupação */
			   )OCUPACAO
		WHERE
			 PESSOA.IDPESSOA = PESSOAFISICA.IDPESSOA AND
			 ESCOLARIDADE.IDPESSOA(+) = PESSOA.IDPESSOA AND
			 OCUPACAO.IDPESSOA(+) = PESSOA.IDPESSOA AND
             PESSOA.IDPESSOA = :cidPessoa;

	if(sqlca.sqlcode == 1403)
		return 0;

	strcpy(pessoaFisica.nmPessoa,(char*)m_param.nmPessoa.arr);
	strcpy(pessoaFisica.idSexo,(char*)m_param.idSexo.arr);
	strcpy(pessoaFisica.dtNascimento,(char*)m_param.dtNascimento.arr);
	strcpy(pessoaFisica.idEstadoCivil,(char*)m_param.idEstadoCivil.arr);
	strcpy(pessoaFisica.idEscolaridade,(char*)m_param.idEscolaridade.arr);
	strcpy(pessoaFisica.idOcupacao,(char*)m_param.idOcupacao.arr);
	strcpy(pessoaFisica.dsOcupacao,(char*)m_param.dsOcupacao.arr);


	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}

int PessoaFisica::getSexoBySigla(char*sgSexo,char*idSexo)
{
	tuxfw_getlogger()->debug("PessoaFisica::getSexoBySigla");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR idSexo[21+1];
		}m_param;
		struct iparam{
			short idSexo;
		}m_iparam;
		char*csgSexo=sgSexo;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(param));
	memset(&m_iparam,0,sizeof(iparam));
	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL
		SELECT
			IDSEXO
		INTO
		:m_param:m_iparam
		FROM
			APOIO.SEXO 
			WHERE SGSEXO = :csgSexo AND ROWNUM = 1;
	if(sqlca.sqlcode == 1403)
		return 0;
	strcpy(idSexo,(char*)m_param.idSexo.arr);
	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}