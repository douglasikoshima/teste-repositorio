#include <sqlca.h>
#include <Log.h>


/////////////////////////////////////////////////////////////////////////////////////////////
// CLogBase

CLogBase::CLogBase()
{
	tuxfw_getlogger()->debug("CLogBase::CLogBase()");
	memset(&m_idSistemaOrigem,0,sizeof(m_idSistemaOrigem));
	memset(&m_dtInicio,0,sizeof(m_dtInicio));
	memset(&m_dtFim,0,sizeof(m_dtFim));
	memset(&m_nrTerminal,0,sizeof(m_nrTerminal));
	memset(&m_idLinhaSistemaOrigem,0,sizeof(m_idLinhaSistemaOrigem));
	memset(&m_idContaSistemaOrigem,0,sizeof(m_idContaSistemaOrigem));
	memset(&m_nmAPI,0,sizeof(m_nmAPI));
	memset(&m_dsProcesso,0,sizeof(m_dsProcesso));
	memset(&m_idCanal,0,sizeof(m_idCanal));
	setExecute(false);
}

CLogBase::~CLogBase()
{
	tuxfw_getlogger()->debug("CLogBase::~CLogBase()");
}

int CLogBase::log(char*xmlgen,char*dsStatusCode,char*dsStatusText,char*idUser,int idStatusComunicacao)
{
	tuxfw_getlogger()->debug("CLogBase::log");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char *cIdSistemaOrigem = getIdSistemaOrigem();
		char *cDtInicio = getDtInicio();
		char *cDtFim = getDtFim();
		char *cNrTerminal = getNrTerminal();
		char *cIdLinhaSistemaOrigem = getIdLinhaSistemaOrigem();
		char *cIdContaSistemaOrigem = getIdContaSistemaOrigem();
		char *cNmAPI = getNmAPI();
		char *cDsProcesso = getDsProcesso();
		char *cIdCanal = getIdCanal();
		char *cDsXMLIN = xmlgen;
		char *cDsStatusCode = dsStatusCode;
		char *cDsStatusText = dsStatusText;
		char *cIdUser = idUser;
		int cIdStatusComunicacao = idStatusComunicacao;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO OraException;
	EXEC SQL
		INSERT INTO VOL.ESTATISTICALEGADO 
		(IDESTATISTICALEGADO,IDSISTEMAORIGEM,DTINICIO,DTFIM,NRTERMINAL,IDLINHASISTEMAORIGEM,
		IDCONTASISTEMAORIGEM,NMAPI,DSPROCESSO,IDCANAL,DSXMLIN,DSSTATUSCODE,DSSTATUSTEXT,
		IDSTATUSCOMUNICACAO,DTULTIMAALTERACAO,IDUSUARIOALTERACAO)
		VALUES
		(
		VOL.ESTATISTICALEGADOSQ.NEXTVAL,:cIdSistemaOrigem,TO_DATE(:cDtInicio,'DD/MM/YYYY HH24:MI:SS'),TO_DATE(:cDtFim,'DD/MM/YYYY HH24:MI:SS'),:cNrTerminal,:cIdLinhaSistemaOrigem,
		:cIdContaSistemaOrigem,:cNmAPI,:cDsProcesso,:cIdCanal,:cDsXMLIN,:cDsStatusCode,:cDsStatusText,:cIdStatusComunicacao,
		SYSDATE,:cIdUser
		);
	return 1;
	OraException:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		throw TuxBasicOraException(sqlca.sqlcode);
}

void CLogBase::setIdSistemaOrigem(char* idSistemaOrigem)
{
	if(idSistemaOrigem!=NULL)
		strcpy(m_idSistemaOrigem,idSistemaOrigem);
}
void CLogBase::setDtInicio(char* dtInicio)
{
	if(dtInicio!=NULL)
		strcpy(m_dtInicio,dtInicio);
}
void CLogBase::setDtFim(char* dtFim)
{
	if(dtFim!=NULL)
		strcpy(m_dtFim,dtFim);
}
void CLogBase::setNrTerminal(char* nrTerminal)
{
	if(nrTerminal!=NULL)
		strcpy(m_nrTerminal,nrTerminal);
}
void CLogBase::setIdLinhaSistemaOrigem(char* idLinhaSistemaOrigem)
{
	if(idLinhaSistemaOrigem!=NULL)
		strcpy(m_idLinhaSistemaOrigem,idLinhaSistemaOrigem);
}
void CLogBase::setIdContaSistemaOrigem(char* idContaSistemaOrigem)
{
	if(idContaSistemaOrigem!=NULL)
		strcpy(m_idContaSistemaOrigem,idContaSistemaOrigem);
}
void CLogBase::setNmAPI(char* nmAPI)
{
	if(nmAPI!=NULL)
		strcpy(m_nmAPI,nmAPI);
}
void CLogBase::setDsProcesso(char* dsProcesso)
{
	if(dsProcesso!=NULL)
		strcpy(m_dsProcesso,dsProcesso);
}
void CLogBase::setIdCanal(char* idCanal)
{
	if(idCanal!=NULL)
		strcpy(m_idCanal,idCanal);
}

char* CLogBase::getIdSistemaOrigem()
{
	return this->m_idSistemaOrigem;
}
char* CLogBase::getDtInicio()
{
	return this->m_dtInicio;
}
char* CLogBase::getDtFim()
{
	return this->m_dtFim;
}
char* CLogBase::getNrTerminal()
{
	return this->m_nrTerminal;
}
char* CLogBase::getIdLinhaSistemaOrigem()
{
	return this->m_idLinhaSistemaOrigem;
}
char* CLogBase::getIdContaSistemaOrigem()
{
	return this->m_idContaSistemaOrigem;
}
char* CLogBase::getNmAPI()
{
	return this->m_nmAPI;
}
char* CLogBase::getDsProcesso()
{
	return this->m_dsProcesso;
}
char* CLogBase::getIdCanal()
{
	return this->m_idCanal;
}

bool CLogBase::getExecute()
{
	return m_execute;
}

void CLogBase::setExecute(bool execute)
{
	m_execute = execute;
}

/////////////////////////////////////////////////////////////////////////////////////////////
// CLog
CLog::CLog()
{
	tuxfw_getlogger()->debug("CLog::CLog()");
}

CLog::~CLog()
{
	tuxfw_getlogger()->debug("CLog::~CLog()");
}

int CLog::getTimeSysdate()
{
	tuxfw_getlogger()->debug("CLog::getTimeSysdate");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cTimeSysdate[20];
	EXEC SQL END DECLARE SECTION;
	memset(&cTimeSysdate,0,sizeof(cTimeSysdate));
	EXEC SQL
		SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AS DATA 
		INTO :cTimeSysdate
		FROM DUAL;
	EXEC SQL WHENEVER NOT FOUND GOTO OraNoDataFound;
	EXEC SQL WHENEVER SQLERROR GOTO OraException;
	setDtInicio((char*)cTimeSysdate.arr);
	return 1;
	OraNoDataFound:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		return 0;
	OraException:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		return 0;
}

int CLog::getSistemaOrigem(char*sgSistemaOrigem)
{
	tuxfw_getlogger()->debug("CLog::getSistemaOrigem");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cSistemaorigem[21];
		char *cSgSistemaOrigem = sgSistemaOrigem;
	EXEC SQL END DECLARE SECTION;
	memset(&cSistemaorigem,0,sizeof(cSistemaorigem));
	EXEC SQL
		SELECT IDSISTEMAORIGEM
		INTO :cSistemaorigem
		FROM APOIO.SISTEMAORIGEM  
		WHERE SGSISTEMAORIGEM = :cSgSistemaOrigem;
	EXEC SQL WHENEVER NOT FOUND GOTO OraNoDataFound;
	EXEC SQL WHENEVER SQLERROR GOTO OraException;
	setIdSistemaOrigem((char*)cSistemaorigem.arr);
	return 1;
	OraNoDataFound:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);	
		return 0;
	OraException:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		return 0;
}

int CLog::getCanal(char*nmCanal)
{
	tuxfw_getlogger()->debug("CLog::getCanal");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cCanal[20];
		char *cNmCanal = nmCanal;
	EXEC SQL END DECLARE SECTION;
	memset(&cCanal,0,sizeof(cCanal));
	EXEC SQL
		SELECT IDCANAL INTO :cCanal FROM APOIO.CANAL  WHERE NMCANAL = :cNmCanal;
	EXEC SQL WHENEVER NOT FOUND GOTO OraNoDataFound;
	EXEC SQL WHENEVER SQLERROR GOTO OraException;
	setIdCanal((char*)cCanal.arr);
	return 1;
	OraNoDataFound:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		setIdCanal("15");
		return 0;
	OraException:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		setIdCanal("15");
		return 0;
}

int CLog::getParametroLog()
{
	tuxfw_getlogger()->debug("CLog::getParametroLog()");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cParametro[256];
	EXEC SQL END DECLARE SECTION;
	memset(&cParametro,0,sizeof(cParametro));
	EXEC SQL
		SELECT NVL(DSVALORPARAMETRO,0) INTO :cParametro FROM
		APOIO.PARAMETRO  WHERE CDPARAMETRO = 'ESTATISTICA_LEGADO';
	EXEC SQL WHENEVER NOT FOUND GOTO OraNoDataFound;
	EXEC SQL WHENEVER SQLERROR GOTO OraException;
	if(!strcmp(((char*)cParametro.arr),"ATIVO"))
	{
		setExecute(true);
		return 1;
	}
	return 0;
	OraNoDataFound:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		setExecute(false);
		return 0;
	OraException:
		tuxfw_getlogger()->debug("throw TuxBasicOraException %d",sqlca.sqlcode);
		setExecute(false);
		return 0;
}