/**
 * @modulo  Cliente
 * @usecase Ura
 * @author  Luiz Carlos Fonseca
 * @author  Bruno Pereira Soares
 * @version $Revision: 1.1 $
 * @CVS     $Author: a5110702 $ - $Date: 2009/07/31 15:33:18 $
 **/

/**
 * Serviço de pesquisa de satisfação
 **/

#undef SQLCA
#define SQLCA_NONE

#include<stdio.h>
#include<sqlca.h>
#include<sqlda.h>
#include<iostream.h>

#include "PesquisaSatisfacao.hpp"
#include "../../../negocio/commons/include/Commom.hpp"
#include "../../../negocio/commons/include/stLinha.hpp"
#include <tuxfw.h>

void sql_error(struct stStatuslinha*, int);

EXEC SQL BEGIN DECLARE SECTION;
#include "../../../negocio/commons/include/stLinha.hpp"
EXEC SQL END DECLARE SECTION;

void buscaIdPessoa(stStatuslinha *stLinha) {
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		struct stStatuslinha o_stLinha;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error(&o_stLinha, ERR_DATABASE);
	EXEC SQL WHENEVER NOT FOUND DO sql_error(&o_stLinha, ERR_NOT_FOUND_OR_DISABLED);

	memset( &o_stLinha, 0, sizeof( o_stLinha ) );
	memcpy(&o_stLinha,&(*stLinha),sizeof(o_stLinha));

	/* Utilizamos o campo dblIdcliente independente de ser cliente ou usuário. 
	 * As rotinas de senha já fazem essas validações.
         */
	EXEC SQL 
	SELECT
		PessoaDePara.idPessoa	
        INTO 
		:o_stLinha.dblIdcliente
	FROM
		apoio.arearegistro AreaRegistro,
		linha.linhaBase LinhaBase,
		linha.linhaTelefonica LinhaTelefonica,		
		customer.pessoalinha PessoaLinha,
		customer.pessoadepara PessoaDePara
	WHERE
		 LinhaBase.NRLINHA =  TO_NUMBER(:o_stLinha.ntLinha) AND
		 LinhaBase.IDAREAREGISTRO = AreaRegistro.IDAREAREGISTRO AND
		 AreaRegistro.CDAREAREGISTRO = TO_NUMBER(:o_stLinha.ntArea) AND
		 LinhaBase.idlinhabase = LinhaTelefonica.IDLINHABASE AND
		 LinhaTelefonica.IDLINHATELEFONICA = PessoaLinha.IDLINHATELEFONICA AND
		 PessoaLinha.IDPESSOADEPARA = PessoaDePara.IDPESSOADEPARA AND		
		 ROWNUM = 1;

	memcpy(&(*stLinha),&o_stLinha,sizeof(*stLinha));
}

bool jaExisteNota(struct stStatuslinha *o_stLinha, int iIdAtendimento) {

	struct sqlca sqlca;
	
	EXEC SQL BEGIN DECLARE SECTION;
		int iOraIdAtd;
		int iOraVl;
	EXEC SQL END DECLARE SECTION;

	iOraIdAtd = iIdAtendimento;

	EXEC SQL WHENEVER SQLERROR DO sql_error(o_stLinha, ERR_DATABASE);
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	EXEC SQL SELECT COUNT(*) INTO :iOraVl FROM ATENDIMENTO.ATENDIMENTOPESQUISAURA  WHERE IDATENDIMENTO=:iOraIdAtd;

	if (iOraVl > 0) return true;
	
	return false;
}

void sql_error(struct stStatuslinha *stLinha, int Status)
{
        EXEC SQL WHENEVER SQLERROR CONTINUE;
        stLinha->ntStatus = Status;
}
