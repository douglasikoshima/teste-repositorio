#include "Email.h"
#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>
#include<tuxfw.h>

CEmail::CEmail()
{

}

CEmail::~CEmail()
{

}

int CEmail::getEmail(XMLGen*gen,char* linha,char* ddd)
{
	tuxfw_getlogger()->debug("Email::getEmail");
	tuxfw_getlogger()->debug("linha=%s",linha);
	tuxfw_getlogger()->debug("ddd=%s",ddd);

	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct param{
			VARCHAR dsContato[256];
			VARCHAR idTipoLinha[21+1];
			VARCHAR idPessoa[21+1];						
		}m_param;
		struct iparam{
			short dsContato;
			short idTipoLinha;
			short idPessoa;
		}m_iparam;
		char*clinha = linha;
		char*cddd = ddd;
		int fraseSecreta = 0;
	EXEC SQL END DECLARE SECTION;
	sqlca.sqlcode = 0;
	memset(&m_param,0,sizeof(m_param));
	memset(&m_iparam,0,sizeof(m_iparam));

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;	
	EXEC SQL SELECT
			  PESSOA.IDPESSOA,
			  LINHATELEFONICA.IDTIPOLINHA
		INTO
			 :m_param.idPessoa:m_iparam.idPessoa,
			 :m_param.idTipoLinha:m_iparam.idTipoLinha
		FROM
			LINHA.LINHABASE LINHABASE,
			LINHA.LINHATELEFONICA LINHATELEFONICA,
			APOIO.AREAREGISTRO AREAREGISTRO,
			CUSTOMER.PESSOALINHA PESSOALINHA,
			CUSTOMER.PESSOA PESSOA,
			CUSTOMER.PESSOADEPARA PESSOADEPARA,
			CUSTOMER.TIPORELACIONAMENTO			
		WHERE
			 LINHABASE.NRLINHA = TO_NUMBER(:clinha) AND
			 LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO AND
			 AREAREGISTRO.CDAREAREGISTRO = TO_NUMBER(:cddd) AND
			 LINHABASE.IDLINHABASE = LINHATELEFONICA.IDLINHABASE AND
			 LINHATELEFONICA.IDLINHATELEFONICA = PESSOALINHA.IDLINHATELEFONICA AND
			 PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA AND
			 PESSOADEPARA.IDPESSOADEPARA = PESSOALINHA.IDPESSOADEPARA AND
			 PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO AND
			 TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C' AND ROWNUM = 1;

	if(sqlca.sqlcode == 1403)
	{
		return ERRO_LINHA_NAO_ENCONTRADA;
	}// linha pós
	else if(!strcmp((char*)m_param.idTipoLinha.arr,"1")||
	!strcmp((char*)m_param.idTipoLinha.arr,"5"))
	{
		return ERRO_LINHA_POSPAGA;
	}
	sqlca.sqlcode = 0;


	EXEC SQL WHENEVER SQLERROR GOTO Error;
    EXEC SQL WHENEVER NOT FOUND do break;	
	EXEC SQL DECLARE CursorEmail CURSOR FOR
		SELECT
			  NVL(PESSOACOMUNICACAO.DSCONTATO,' ')
		FROM
			CUSTOMER.PESSOACOMUNICACAO PESSOACOMUNICACAO,
			APOIO.TIPOCOMUNICACAO TIPOCOMUNICACAO	
		WHERE
			 PESSOACOMUNICACAO.IDTIPOCOMUNICACAO = TIPOCOMUNICACAO.IDTIPOCOMUNICACAO AND
			 TIPOCOMUNICACAO.SGCLASSIFICACAO = 'E-MAIL' AND
			 PESSOACOMUNICACAO.IDPESSOA = :m_param.idPessoa
		ORDER BY
			  PESSOACOMUNICACAO.DTULTIMAALTERACAO DESC;
	EXEC SQL OPEN CursorEmail;
	for(;;)
	{
		memset(&m_param.dsContato,0,sizeof(m_param.dsContato));
		memset(&m_iparam.dsContato,0,sizeof(m_iparam.dsContato));
		EXEC SQL FETCH CursorEmail INTO :m_param.dsContato:m_iparam.dsContato;
		gen->addItem("email",(char*)m_param.dsContato.arr);
		break;
	}
	EXEC SQL CLOSE CursorEmail;
		
		
	if(!strcmp((char*)m_param.dsContato.arr,"") || sqlca.sqlcode == 1403)
	{
		return ERRO_EMAIL_NAO_ENCONTRADO;
	}

	sqlca.sqlcode = 0;

	EXEC SQL WHENEVER SQLERROR GOTO Error;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;	
	EXEC SQL
		SELECT COUNT(1) 
		INTO :fraseSecreta
		FROM CUSTOMER.SENHA
		WHERE
		IDPESSOA = :m_param.idPessoa AND
		DSFRASESECRETA IS NOT NULL;

	if(fraseSecreta)
		gen->addItem("fraseSecreta","S");
	else
		gen->addItem("fraseSecreta","N");



	return 1;
Error:
	tuxfw_getlogger()->debug("ERRO: sqlca.sqlcode = %d",sqlca.sqlcode);
	throw TuxBasicOraException(sqlca.sqlcode);
}