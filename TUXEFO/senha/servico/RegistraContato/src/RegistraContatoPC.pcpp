/* $Id: RegistraContatoPC.pcpp,v 1.1.2.2 2011/08/24 21:54:39 a5114878 Exp $ */

#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <tuxfw.h>
#include "../include/RegistraContato.h"

    EXEC SQL BEGIN DECLARE SECTION;
        #include "../include/stRegistraContato.h"
    EXEC SQL END DECLARE SECTION;

void sql_error_registracontato(sqlca*);


/*********************************************
* Grava no histórico a senha antiga do usuário
* ou a nova quando é gerada pela primeira vez
* a senha.
*********************************************/
bool proCRegistraContato(stRegistraContato* m_stDados) 
{

    ULOG_START("proCRegistraContato()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct stRegistraContato dadosoracle;
        int idHistoricoSenhaUsuario = 0;
    EXEC SQL END DECLARE SECTION;

    memcpy(&dadosoracle, m_stDados, sizeof(dadosoracle));

    EXEC SQL SELECT customer.historicosenhasq.nextval INTO :dadosoracle.idHistoricoSenha FROM dual;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_registracontato(&sqlca);

    // Grava no histórico de senhas a inclusão da nova senha.
    EXEC SQL 
        INSERT INTO
            customer.historicosenha
            (
                idHistoricoSenha,
                idTipoHistoricoSenha,
                idSenha,
                idTipoSenha,
                idTipoStatusSenha,
                idCanal,
                idPessoaUsuario,
                idTipoSistema,
                cdSenha,
                dtExpiracao,
                dtRegistroHistorico,
                obsRegistro,
                nmRepresentante,
				idTerminal
            )
            VALUES
            (
                :dadosoracle.idHistoricoSenha,
                :dadosoracle.idTipoHistoricoSenha,
                :dadosoracle.idSenha,
                :dadosoracle.idTipoSenha,
                :dadosoracle.idTipoStatusSenha,
                :dadosoracle.idCanal,
                :dadosoracle.idPessoaUsuario,
                :dadosoracle.idTipoSistema,
                :dadosoracle.cdSenha,
                :dadosoracle.dtExpiracao,
                sysdate,
                :dadosoracle.obsRegistro,
                :dadosoracle.nmRepresentante,
				:dadosoracle.iIdTerminal
            );
              
    ULOG_END("proCRegistraContato()");
    return true;    
}

bool proCRegistraContatoAlteracao(int idSenha, stRegistraContato* m_stDados) 
{

    ULOG_START("proCRegistraContatoAlteracao()");

    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
    
        struct stRegistraContato dadosoracle;
        int idHistoricoSenhaUsuario = 0;
        int idsenha                 = idSenha;
        char passwd[33];

        int  ora_idSenha;
        int  ora_idTipoSenha;
        int  ora_idTipoStatusSenha;
        VARCHAR ora_cdSenha[33];
        VARCHAR ora_dtExpiracao[40];
        VARCHAR ora_nmRepresentante[128];
        
        short i_ora_idSenha = -1;
        short i_ora_idTipoSenha = -1;
        short i_ora_idTipoStatusSenha = -1;
        short i_ora_cdSenha = -1;
        short i_ora_dtExpiracao = -1;
        short i_ora_nmRepresentante = -1;

    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR  DO sql_error_registracontato(&sqlca);

    memcpy(&dadosoracle, m_stDados, sizeof(dadosoracle));

    if (dadosoracle.idPessoaLinha < 0)
        dadosoracle.idPessoaLinha = 0; 
    
    strcpy(passwd,dadosoracle.cdSenha);
    ULOG( "Inserindo em customer.historicosenha a senha: [%s]", passwd );

    EXEC SQL
    SELECT
        senha.idSenha ,
        senha.idTipoSenha ,
        senha.idTipoStatusSenha ,
        senha.cdSenha ,
        senha.dtExpiracao ,
        senha.nmRepresentante
    INTO
        :ora_idSenha:i_ora_idSenha ,
        :ora_idTipoSenha:i_ora_idTipoSenha ,
        :ora_idTipoStatusSenha:i_ora_idTipoStatusSenha ,
        :ora_cdSenha:i_ora_cdSenha ,
        :ora_dtExpiracao:i_ora_dtExpiracao ,
        :ora_nmRepresentante:i_ora_nmRepresentante
    FROM
        customer.Senha senha
    WHERE
        senha.idSenha = :idsenha;


    // Grava no histórico de senhas a inclusão da nova senha.
    EXEC SQL 
    INSERT INTO
    customer.historicosenha
    (
        idHistoricoSenha,
        idTipoHistoricoSenha,
        idSenha,
        idTipoSenha,
        idTipoStatusSenha,
        idCanal,
        idPessoaUsuario,
        idTipoSistema,
        cdSenha,
        dtExpiracao,
        dtRegistroHistorico,
        obsRegistro,
        nmRepresentante,
        idPessoaLinha,
        idTerminal
    )
    VALUES
    (
        customer.historicosenhasQ.nextval,
        :dadosoracle.idTipoHistoricoSenha,
        :ora_idSenha,
        :ora_idTipoSenha,
        :ora_idTipoStatusSenha,
        :dadosoracle.idCanal,
        :dadosoracle.idPessoaUsuario,
        :dadosoracle.idTipoSistema,
        decode( :passwd, NULL, :ora_cdSenha, :passwd ) ,
        :ora_dtExpiracao ,
        SYSDATE ,
        :dadosoracle.obsRegistro ,
        :ora_nmRepresentante ,
        DECODE(:dadosoracle.idPessoaLinha, 0, NULL, :dadosoracle.idPessoaLinha),
        :dadosoracle.iIdTerminal
    );
    

    /*
    EXEC SQL 
        INSERT INTO
            customer.historicosenha
            (
                idHistoricoSenha,
                idTipoHistoricoSenha,
                idSenha,
                idTipoSenha,
                idTipoStatusSenha,
                idCanal,
                idPessoaUsuario,
                idTipoSistema,
                cdSenha,
                dtExpiracao,
                dtRegistroHistorico,
                obsRegistro,
                nmRepresentante,
                idPessoaLinha,
				idTerminal
            )
            SELECT
                customer.historicosenhasQ.nextval,
                :dadosoracle.idTipoHistoricoSenha,
                senha.idSenha,
                senha.idTipoSenha,
                senha.idTipoStatusSenha,
                :dadosoracle.idCanal,
                :dadosoracle.idPessoaUsuario,
                :dadosoracle.idTipoSistema,
                /* decode( :passwd, NULL, senha.cdSenha, :passwd ) , */
                //:passwd ,
                /*cdSenha,*/
                //senha.dtExpiracao,
                //sysdate,
                //:dadosoracle.obsRegistro,
                //nmRepresentante,
                //DECODE(:dadosoracle.idPessoaLinha, 0, NULL, :dadosoracle.idPessoaLinha),
				//DECODE(:dadosoracle.iIdTerminal, 0, NULL, :dadosoracle.iIdTerminal)			
            //FROM
                //customer.Senha senha
            //WHERE
                //senha.idSenha = :idsenha;


	ULOG("proCRegistraContatoAlteracao() %d\r\n", dadosoracle.iIdTerminal);

    ULOG_END("proCRegistraContatoAlteracao()");
              
    return true;    
}

void sql_error_registracontato(sqlca*sqlca)
{
//throw TuxBasicOraException(sqlca->sqlcode);
throw new TuxBasicOraException(sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc,sqlca->sqlerrm.sqlerrml);
}
