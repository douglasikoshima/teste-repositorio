#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaLinhapcTMA.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalTMA.h"
EXEC SQL END DECLARE SECTION;

/********************************************************************************/
void CPessoaLinhapc::proCInserePessoaLinha(TPessoaLinha *ptPessoaLinha)
{
    ULOG_START("CPessoaLinhapc::proCInserePessoaLinha");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptPessoaLinha->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara, ptPessoaLinha->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPessoaLinha->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ptPessoaLinha->szIdUsuarioAlteracao);

    EXEC SQL SELECT customer.pessoalinhasq.nextval INTO :oszIdPessoaLinha FROM DUAL;

    EXEC SQL INSERT INTO Customer.PessoaLinha
                       ( idpessoalinha
                       , dtpessoalinha
                       , idtiporelacionamento
                       , idpessoadepara
                       , idlinhatelefonica
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoaLinha
                       , SYSDATE
                       , :oszIdTipoRelacionamento
                       , :oszIdPessoaDePara
                       , :oszIdLinhaTelefonica
                       , :oszIdUsuarioAlteracao
                       , SYSDATE );

    STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaLinha, oszIdPessoaLinha);

    ULOGI("Finalizando proCInserePessoaLinha <OK>");
    ULOG_END("CPessoaLinhapc::proCInserePessoaLinha");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaLinha <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
 
/********************************************************************************/
bool CPessoaLinhapc::proCBuscaPessoaLinha(TPessoaLinha *ptPessoaLinha)
{
    ULOG_START("CPessoaLinhapc::proCBuscaPessoaLinha");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszDtPessoaLinha[LEN_DTPESSOALINHA];
        VARCHAR oszIdTipoRelacionamento[LEN_IDTIPORELACIONAMENTO];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
        VARCHAR oszDtUltimaAlteracao[LEN_DTULTIMAALTERACAO];

        short iIdPessoaLinha = 0;
        short iDtPessoaLinha = 0;
        short iIdTipoRelacionamento = 0;
        short iIdPessoaDePara = 0;
        short iIdLinhaTelefonica = 0;
        short iIdUsuarioAlteracao = 0;
        short iDtUltimaAlteracao = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdTipoRelacionamento, ptPessoaLinha->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdLinhaTelefonica, ptPessoaLinha->szIdLinhaTelefonica);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR( idpessoalinha        )
                  , TO_CHAR( dtpessoalinha        , 'DD/MM/YYYY' )
                  , TO_CHAR( idtiporelacionamento )
                  , TO_CHAR( idpessoadepara       )
                  , TO_CHAR( idlinhatelefonica    )
                  , TO_CHAR( idusuarioalteracao   )
                  , TO_CHAR( dtultimaalteracao    , 'DD/MM/YYYY' )
               INTO :oszIdPessoaLinha:iIdPessoaLinha
                  , :oszDtPessoaLinha:iDtPessoaLinha
                  , :oszIdTipoRelacionamento:iIdTipoRelacionamento
                  , :oszIdPessoaDePara:iIdPessoaDePara
                  , :oszIdLinhaTelefonica:iIdLinhaTelefonica
                  , :oszIdUsuarioAlteracao:iIdUsuarioAlteracao
                  , :oszDtUltimaAlteracao:iDtUltimaAlteracao
               FROM Customer.PessoaLinha
              WHERE idtiporelacionamento    = TO_NUMBER( :oszIdTipoRelacionamento )
                AND idlinhatelefonica       = TO_NUMBER( :oszIdLinhaTelefonica );


    if( iIdPessoaLinha != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaLinha, oszIdPessoaLinha);
    }
    if( iDtPessoaLinha != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szDtPessoaLinha, oszDtPessoaLinha);
    }
    if( iIdTipoRelacionamento != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdTipoRelacionamento, oszIdTipoRelacionamento);
    }
    if( iIdPessoaDePara != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdPessoaDePara, oszIdPessoaDePara);
    }
    if( iIdLinhaTelefonica != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdLinhaTelefonica, oszIdLinhaTelefonica);
    }
    if( iIdUsuarioAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szIdUsuarioAlteracao, oszIdUsuarioAlteracao);
    }
    if( iDtUltimaAlteracao != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinha->szDtUltimaAlteracao, oszDtUltimaAlteracao);
    }

    ULOGI("Finalizando proCBuscaPessoaLinha <FOUND>");
    ULOG_END("CPessoaLinhapc::proCBuscaPessoaLinha");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaLinha <NOT FOUND>");
        ULOG_END("CPessoaLinhapc::proCBuscaPessoaLinha");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaLinha <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/********************************************************************************/
void CPessoaLinhapc::proCAtualizaPessoaLinha(TPessoaLinha tPessoaLinha)
{
    ULOG_START("CPessoaLinhapc::proCAtualizaPessoaLinha");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszIdPessoaDePara[LEN_IDPESSOADEPARA];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaLinha, tPessoaLinha.szIdPessoaLinha);
    STRCPY_TO_ORA(oszIdPessoaDePara, tPessoaLinha.szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, tPessoaLinha.szIdUsuarioAlteracao);


    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto erro;

    EXEC SQL UPDATE customer.pessoalinha
                SET idpessoadepara       = TO_NUMBER(:oszIdPessoaDePara)
                  , idusuarioalteracao   = TO_NUMBER(:oszIdUsuarioAlteracao)
                  , dtultimaalteracao    = SYSDATE
              WHERE idpessoalinha        = TO_NUMBER(:oszIdPessoaLinha);

    ULOGI("Finalizando proCAtualizaPessoaLinha <OK>");
    ULOG_END("CPessoaLinhapc::proCAtualizaPessoaLinha");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaLinha <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
