#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoaLinhaPrepcTMA.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalTMA.h"
EXEC SQL END DECLARE SECTION;

/**************************************************************************************/
void CPessoaLinhaPrepc::proCInserePessoaLinhaPre(TPessoaLinhaPre tPessoaLinhaPre)
{
    ULOG_START("CPessoaLinhaPrepc::proCInserePessoaLinhaPre");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszInMudancaTitularidade[LEN_INMUDANCATITULARIDADE];
        VARCHAR oszInSincronismo[LEN_INSINCRONISMO];
        VARCHAR oszInUsuarioNaoInformado[LEN_INUSUARIONAOINFORMADO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaLinha, tPessoaLinhaPre.szIdPessoaLinha);
    STRCPY_TO_ORA(oszInMudancaTitularidade, tPessoaLinhaPre.szInMudancaTitularidade);
    STRCPY_TO_ORA(oszInSincronismo, tPessoaLinhaPre.szInSincronismo);
    STRCPY_TO_ORA(oszInUsuarioNaoInformado, tPessoaLinhaPre.szInUsuarioNaoInformado);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL INSERT INTO customer.pessoalinhapre
                       ( idpessoalinha
                        ,inmudancatitularidade
                        ,insincronismo
                        ,inusuarionaoinformado )
                VALUES ( TO_NUMBER(:oszIdPessoaLinha)
                       , TO_NUMBER(:oszInMudancaTitularidade)
                       , TO_NUMBER(:oszInSincronismo)
                       , TO_NUMBER(:oszInUsuarioNaoInformado));


    ULOGI("Finalizando proCInserePessoaLinhaPre <OK>");
    ULOG_END("CPessoaLinhaPrepc::proCInserePessoaLinhaPre");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoaLinhaPre <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/**************************************************************************************/
void CPessoaLinhaPrepc::proCAtualizaPessoaLinhaPre(TPessoaLinhaPre tPessoaLinhaPre)
{
    ULOG_START("CPessoaLinhaPrepc::proCAtualizaPessoaLinhaPre");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszInMudancaTitularidade[LEN_INMUDANCATITULARIDADE];
        VARCHAR oszInSincronismo[LEN_INSINCRONISMO];
        VARCHAR oszInUsuarioNaoInformado[LEN_INUSUARIONAOINFORMADO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaLinha, tPessoaLinhaPre.szIdPessoaLinha);
    STRCPY_TO_ORA(oszInMudancaTitularidade, tPessoaLinhaPre.szInMudancaTitularidade);
    STRCPY_TO_ORA(oszInSincronismo, tPessoaLinhaPre.szInSincronismo);
    STRCPY_TO_ORA(oszInUsuarioNaoInformado, tPessoaLinhaPre.szInUsuarioNaoInformado);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL UPDATE customer.pessoalinhapre
                SET inmudancatitularidade = TO_NUMBER(:oszInMudancaTitularidade),
                    insincronismo = TO_NUMBER(:oszInSincronismo),
                    inusuarionaoinformado = TO_NUMBER(:oszInUsuarioNaoInformado)
              WHERE idpessoalinha = TO_NUMBER(:oszIdPessoaLinha);


    ULOGI("Finalizando proCAtualizaPessoaLinhaPre <OK>");
    ULOG_END("CPessoaLinhaPrepc::proCAtualizaPessoaLinhaPre");
    return;

    naoexiste:
        ULOGI("Finalizando proCAtualizaPessoaLinhaPre <NOT FOUND>");
        ULOG_END("CPessoaLinhaPrepc::proCAtualizaPessoaLinhaPre");
        return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoaLinhaPre <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/**************************************************************************************/
bool CPessoaLinhaPrepc::proCBuscaPessoaLinhaPre(TPessoaLinhaPre *ptPessoaLinhaPre)
{
    ULOG_START("CPessoaLinhaPrepc::proCBuscaPessoaLinhaPre");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[LEN_IDPESSOALINHA];
        VARCHAR oszInMudancaTitularidade[LEN_INMUDANCATITULARIDADE];
        VARCHAR oszInSincronismo[LEN_INSINCRONISMO];
        VARCHAR oszInUsuarioNaoInformado[LEN_INUSUARIONAOINFORMADO];

        short iIdPessoaLinha=0;
        short iInMudancaTitularidade=0;
        short iInSincronismo=0;
        short iInUsuarioNaoInformado=0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoaLinha, ptPessoaLinhaPre->szIdPessoaLinha);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    EXEC SQL SELECT TO_CHAR(idpessoalinha),
                    TO_CHAR(inmudancatitularidade),
                    TO_CHAR(insincronismo),
                    TO_CHAR(inusuarionaoinformado)
            INTO    :oszIdPessoaLinha,
                    :oszInMudancaTitularidade,
                    :oszInSincronismo,
                    :oszInUsuarioNaoInformado
            FROM    customer.pessoalinhapre
            WHERE   idpessoalinha = TO_NUMBER(:oszIdPessoaLinha);


    if(iIdPessoaLinha != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinhaPre->szIdPessoaLinha, oszIdPessoaLinha);
    }
    if(iInMudancaTitularidade != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinhaPre->szInMudancaTitularidade, oszInMudancaTitularidade);
    }
    if(iInSincronismo != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinhaPre->szInSincronismo, oszInSincronismo);
    }
    if(iInUsuarioNaoInformado != -1 ) {
        STRCPY_FROM_ORA(ptPessoaLinhaPre->szInUsuarioNaoInformado, oszInUsuarioNaoInformado);
    }


    ULOGI("Finalizando proCBuscaPessoaLinhaPre <FOUND>");
    ULOG_END("CPessoaLinhaPrepc::proCBuscaPessoaLinhaPre");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoaLinhaPre <NOT FOUND>");
        ULOG_END("CPessoaLinhaPrepc::proCBuscaPessoaLinhaPre");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoaLinhaPre <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}


/**************************************************************************************/
void CPessoaLinhaPrepc::proCInsereMudancaTitularidade(char* szCodAreaRegistro, char* szNrLinha)
{
    ULOG_START("CPessoaLinhaPrepc::proCInsereMudancaTitularidade");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszXMLEnvio[1024];
        VARCHAR oszIdCompServicoDesativado[LEN_IDCOMPSERVICODESATIVADO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    // Max: Conforme a SM 347, devemos inserir um registro na tabela INFRA.COMPSERVICODESATIVADO
    char szXML[1024];
    sprintf(szXML, "<ARG>\n"
                   "    <CONTROLE>\n"
                   "        <BYPASS>false</BYPASS>\n"
                   "    </CONTROLE>\n"
                   "    <REG>\n"
                   "        <COD_AREA>%s</COD_AREA>\n"
                   "        <NUM_LINE>%s</NUM_LINE>\n"
                   "        <PLATAFORMA>O</PLATAFORMA>\n"
                   "        <SERVICO>INFCLIENTE</SERVICO>\n"
                   "        <OPERACAO>CADSRVMAIL</OPERACAO>\n"
                   "        <CANAL>VOL</CANAL>\n"
                   "        <USUARIO>VOL</USUARIO>\n"
                   "        <SENHA>123456</SENHA>\n"
                   "        <ORIGEM>VOL</ORIGEM>\n"
                   "        <CON_NUMBER>1456</CON_NUMBER>\n"
                   "        <TRANS_NUMBER>1</TRANS_NUMBER>\n"
                   "    </REG>\n"
                   "    <DADOS>\n"
                   "        <OPCAO>CANCELAR</OPCAO>\n"
                   "        <TAREFA>COMPSERV_M</TAREFA>\n"
                   "    </DADOS>\n"
                   "</ARG>\n", szCodAreaRegistro, szNrLinha);


    STRCPY_TO_ORA(oszXMLEnvio, szXML);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT infra.compservicodesativadosq.nextval INTO :oszIdCompServicoDesativado FROM DUAL;

    EXEC SQL INSERT INTO INFRA.COMPSERVICODESATIVADO
                       ( IDCOMPSERVICODESATIVADO
                         ,DTCRIACAO
                         ,CDERRO
                         ,DSERRO
                         ,XMLRETORNO
                         ,QTTENTATIVA
                         ,XMLENVIO
                         ,DTULTIMAALTERACAO )
                VALUES ( :oszIdCompServicoDesativado
                       , SYSDATE
                       , NULL
                       , ''
                       , ''
                       , 0
                       , :oszXMLEnvio
                       , SYSDATE );


    ULOGI("Finalizando proCInsereMudancaTitularidade <OK>");
    ULOG_END("CPessoaLinhaPrepc::proCInsereMudancaTitularidade");
    return;

    naoexiste:
        ULOGI("Finalizando proCInsereMudancaTitularidade <NOT FOUND>");
        ULOG_END("CPessoaLinhaPrepc::proCInsereMudancaTitularidade");
        return;

    erro:
        ULOGE("Finalizando proCInsereMudancaTitularidade <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
