#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include "tuxfw.h"
#include "PessoapcTMA.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalTMA.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************/
void CPessoapc::proCInserePessoa(TPessoa *ptPessoa)
{
    ULOG_START("CPessoapc::proCInserePessoa");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR    oszIdPessoa[LEN_IDPESSOA];
        VARCHAR    oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR    oszIdPessoaSistemaOrigem[LEN_IDPESSOASISTEMAORIGEM];
        VARCHAR    oszNmPessoa[LEN_NMPESSOA];
        VARCHAR    oszNmNome[LEN_NMNOME];
        VARCHAR    oszNmNomeMeio[LEN_NMNOMEMEIO];
        VARCHAR    oszNmSobrenome[LEN_NMSOBRENOME];
        VARCHAR    oszDtChurn[LEN_DTCHURN];
        VARCHAR    oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR    oszInFalecimentoInformado[LEN_INFALECIMENTOINFORMADO];
        VARCHAR    oszDtFalecimento[LEN_DTFALECIMENTO];
        VARCHAR    oszIdTipoPessoa[LEN_IDTIPOPESSOA];
        VARCHAR    oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR    oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR    oszIdTipoCarteira[LEN_IDTIPOCARTEIRA];
        VARCHAR    oszIdUf[LEN_IDUF];
        VARCHAR    oszVlrChurnProbabilidade[LEN_VLRCHURNPROBABILIDADE];
        VARCHAR    oszDtTipoCarteira[LEN_DTTIPOCARTEIRA];
        VARCHAR    oszIdProbInadimplencia[LEN_IDPROBINADIMPLENCIA];
        VARCHAR    oszIdChurnProbabilidade[LEN_IDCHURNPROBABILIDADE];
        VARCHAR    oszDsCargoContato[LEN_DSCARGOCONTATO];
        VARCHAR    oszDsDeptoContato[LEN_DSDEPTOCONTATO];
        VARCHAR    oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdSistemaOrigem,        ptPessoa->szIdSistemaOrigem);
    STRCPY_TO_ORA(oszNmPessoa              , ptPessoa->szNmPessoa);
    STRCPY_TO_ORA(oszNmNome                , ptPessoa->szNmNome);
    STRCPY_TO_ORA(oszNmNomeMeio            , ptPessoa->szNmNomeMeio);
    STRCPY_TO_ORA(oszNmSobrenome           , ptPessoa->szNmSobrenome);
    STRCPY_TO_ORA(oszDtChurn               , ptPessoa->szDtChurn);
    STRCPY_TO_ORA(oszDtCadastro            , ptPessoa->szDtCadastro);
    STRCPY_TO_ORA(oszInFalecimentoInformado, ptPessoa->szInFalecimentoInformado);
    STRCPY_TO_ORA(oszDtFalecimento         , ptPessoa->szDtFalecimento);
    STRCPY_TO_ORA(oszIdTipoPessoa          , ptPessoa->szIdTipoPessoa);
    STRCPY_TO_ORA(oszTsSincronismo         , ptPessoa->szTsSincronismo);
    STRCPY_TO_ORA(oszSqSincronismo         , ptPessoa->szSqSincronismo);
    STRCPY_TO_ORA(oszIdTipoCarteira        , ptPessoa->szIdTipoCarteira);
    STRCPY_TO_ORA(oszIdUf                  , ptPessoa->szIdUf);
    STRCPY_TO_ORA(oszVlrChurnProbabilidade , ptPessoa->szVlrChurnProbabilidade);
    STRCPY_TO_ORA(oszDtTipoCarteira        , ptPessoa->szDtTipoCarteira);
    STRCPY_TO_ORA(oszIdProbInadimplencia   , ptPessoa->szIdProbInadimplencia);
    STRCPY_TO_ORA(oszIdChurnProbabilidade  , ptPessoa->szIdChurnProbabilidade);
    STRCPY_TO_ORA(oszDsCargoContato        , ptPessoa->szDsCargoContato);
    STRCPY_TO_ORA(oszDsDeptoContato        , ptPessoa->szDsDeptoContato);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao    , ptPessoa->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT customer.pessoasq.nextval INTO :oszIdPessoa FROM DUAL;

    STRCPY_FROM_ORA(ptPessoa->szIdPessoa, oszIdPessoa);
    STRCPY_FROM_ORA(ptPessoa->szIdPessoaSistemaOrigem, oszIdPessoa);


    EXEC SQL INSERT INTO Customer.Pessoa
                       ( idpessoa
                       , idsistemaorigem
                       , idpessoasistemaorigem
                       , nmpessoa
                       , nmnome
                       , nmnomemeio
                       , nmsobrenome
                       , dtchurn
                       , infalecimentoinformado
                       , dtfalecimento
                       , idtipopessoa
                       , tssincronismo
                       , sqsincronismo
                       , idtipocarteira
                       , iduf
                       , vlrchurnprobabilidade
                       , dttipocarteira
                       , idprobinadimplencia
                       , idchurnprobabilidade
                       , dtcadastro
                       , dscargocontato
                       , dsdeptocontato
                       , idusuarioalteracao
                       , dtultimaalteracao )
                VALUES ( :oszIdPessoa
                       , :oszIdSistemaOrigem
                       , :oszIdPessoa
                       , :oszNmPessoa
                       , :oszNmNome
                       , :oszNmNomeMeio
                       , :oszNmSobrenome
                       , TO_DATE( :oszDtChurn, 'YYYYMMDDHH24MISS')
                       , :oszInFalecimentoInformado
                       , TO_DATE( :oszDtFalecimento, 'YYYYMMDDHH24MISS')
                       , :oszIdTipoPessoa
                       , :oszTsSincronismo
                       , :oszSqSincronismo
                       , :oszIdTipoCarteira
                       , :oszIdUf
                       , :oszVlrChurnProbabilidade
                       , TO_DATE( :oszDtTipoCarteira, 'YYYYMMDDHH24MISS')
                       , :oszIdProbInadimplencia
                       , :oszIdChurnProbabilidade
                       , SYSDATE
                       , :oszDsCargoContato
                       , :oszDsDeptoContato
                       , :oszIdUsuarioAlteracao
                       , SYSDATE);


    ULOGI("Finalizando proCInserePessoa <OK>");
    ULOG_END("CPessoapc::proCInserePessoa");
    return;

    erro:
        ULOGE("Finalizando proCInserePessoa <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
void CPessoapc::proCAtualizaPessoa(TPessoa *ptPessoa)
{
    ULOG_START("CPessoapc::proCAtualizaPessoa");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszNmPessoa[LEN_NMPESSOA];
        VARCHAR oszNmNome[LEN_NMNOME];
        VARCHAR oszNmNomeMeio[LEN_NMNOMEMEIO];
        VARCHAR oszNmSobrenome[LEN_NMSOBRENOME];
        VARCHAR oszDtChurn[LEN_DTCHURN];
        VARCHAR oszInFalecimentoInformado[LEN_INFALECIMENTOINFORMADO];
        VARCHAR oszDtFalecimento[LEN_DTFALECIMENTO];
        VARCHAR oszIdTipoPessoa[LEN_IDTIPOPESSOA];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdTipoCarteira[LEN_IDTIPOCARTEIRA];
        VARCHAR oszIdUf[LEN_IDUF];
        VARCHAR oszVlrChurnProbabilidade[LEN_VLRCHURNPROBABILIDADE];
        VARCHAR oszDtTipoCarteira[LEN_DTTIPOCARTEIRA];
        VARCHAR oszIdProbInadimplencia[LEN_IDPROBINADIMPLENCIA];
        VARCHAR oszIdChurnProbabilidade[LEN_IDCHURNPROBABILIDADE];
        VARCHAR oszDsCargoContato[LEN_DSCARGOCONTATO];
        VARCHAR oszDsDeptoContato[LEN_DSDEPTOCONTATO];
        VARCHAR oszIdUsuarioAlteracao[LEN_IDUSUARIOALTERACAO];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    STRCPY_TO_ORA(oszIdPessoa              , ptPessoa->szIdPessoa);
    STRCPY_TO_ORA(oszNmPessoa              , ptPessoa->szNmPessoa);
    STRCPY_TO_ORA(oszNmNome                , ptPessoa->szNmNome);
    STRCPY_TO_ORA(oszNmNomeMeio            , ptPessoa->szNmNomeMeio);
    STRCPY_TO_ORA(oszNmSobrenome           , ptPessoa->szNmSobrenome);
    STRCPY_TO_ORA(oszDtChurn               , ptPessoa->szDtChurn);
    STRCPY_TO_ORA(oszInFalecimentoInformado, ptPessoa->szInFalecimentoInformado);
    STRCPY_TO_ORA(oszDtFalecimento         , ptPessoa->szDtFalecimento);
    STRCPY_TO_ORA(oszIdTipoPessoa          , ptPessoa->szIdTipoPessoa);
    STRCPY_TO_ORA(oszTsSincronismo         , ptPessoa->szTsSincronismo);
    STRCPY_TO_ORA(oszSqSincronismo         , ptPessoa->szSqSincronismo);
    STRCPY_TO_ORA(oszIdTipoCarteira        , ptPessoa->szIdTipoCarteira);
    STRCPY_TO_ORA(oszIdUf                  , ptPessoa->szIdUf);
    STRCPY_TO_ORA(oszVlrChurnProbabilidade , ptPessoa->szVlrChurnProbabilidade);
    STRCPY_TO_ORA(oszDtTipoCarteira        , ptPessoa->szDtTipoCarteira);
    STRCPY_TO_ORA(oszIdProbInadimplencia   , ptPessoa->szIdProbInadimplencia);
    STRCPY_TO_ORA(oszIdChurnProbabilidade  , ptPessoa->szIdChurnProbabilidade);
    STRCPY_TO_ORA(oszDsCargoContato        , ptPessoa->szDsCargoContato);
    STRCPY_TO_ORA(oszDsDeptoContato        , ptPessoa->szDsDeptoContato);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao    , ptPessoa->szIdUsuarioAlteracao);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL UPDATE customer.pessoa
                SET nmpessoa                = :oszNmPessoa
                  , nmnome                  = :oszNmNome
                  , nmnomemeio              = :oszNmNomeMeio
                  , nmsobrenome             = :oszNmSobrenome
                  , dtchurn                 = TO_DATE(:oszDtChurn, 'YYYYMMDDHH24MISS')
                  , infalecimentoinformado  = :oszInFalecimentoInformado
                  , dtfalecimento           = TO_DATE(:oszDtFalecimento, 'YYYYMMDDHH24MISS')
                  , idtipopessoa            = :oszIdTipoPessoa
                  , tssincronismo           = :oszTsSincronismo
                  , sqsincronismo           = :oszSqSincronismo
                  , idtipocarteira          = :oszIdTipoCarteira
                  , iduf                    = :oszIdUf
                  , vlrchurnprobabilidade   = :oszVlrChurnProbabilidade
                  , dttipocarteira          = TO_DATE(:oszDtTipoCarteira, 'YYYYMMDDHH24MISS')
                  , idprobinadimplencia     = :oszIdProbInadimplencia
                  , idchurnprobabilidade    = :oszIdChurnProbabilidade
                  , dscargocontato          = :oszDsCargoContato
                  , dsdeptocontato          = :oszDsDeptoContato
                  , idusuarioalteracao      = :oszIdUsuarioAlteracao
                  , dtultimaalteracao       = SYSDATE
              WHERE idpessoa                = TO_NUMBER(:oszIdPessoa); 

    ULOGI("Finalizando proCAtualizaPessoa <OK>");
    ULOG_END("CPessoapc::proCAtualizaPessoa");
    return;

    erro:
        ULOGE("Finalizando proCAtualizaPessoa <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/****************************************************************************************/
bool CPessoapc::proCBuscaPessoa(TPessoa *ptPessoa)
{
    ULOG_START("CPessoapc::proCBuscaPessoa");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdSistemaOrigem[LEN_IDSISTEMAORIGEM];
        VARCHAR oszIdPessoaSistemaOrigem[LEN_IDPESSOASISTEMAORIGEM];
        VARCHAR oszNmPessoa[LEN_NMPESSOA];
        VARCHAR oszNmNome[LEN_NMNOME];
        VARCHAR oszNmNomeMeio[LEN_NMNOMEMEIO];
        VARCHAR oszNmSobrenome[LEN_NMSOBRENOME];
        VARCHAR oszDtChurn[LEN_DTCHURN];
        VARCHAR oszDtCadastro[LEN_DTCADASTRO];
        VARCHAR oszInFalecimentoInformado[LEN_INFALECIMENTOINFORMADO];
        VARCHAR oszDtFalecimento[LEN_DTFALECIMENTO];
        VARCHAR oszIdTipoPessoa[LEN_IDTIPOPESSOA];
        VARCHAR oszTsSincronismo[LEN_TSSINCRONISMO];
        VARCHAR oszSqSincronismo[LEN_SQSINCRONISMO];
        VARCHAR oszIdTipoCarteira[LEN_IDTIPOCARTEIRA];
        VARCHAR oszIdUf[LEN_IDUF];
        VARCHAR oszVlrChurnProbabilidade[LEN_VLRCHURNPROBABILIDADE];
        VARCHAR oszDtTipoCarteira[LEN_DTTIPOCARTEIRA];
        VARCHAR oszIdProbInadimplencia[LEN_IDPROBINADIMPLENCIA];
        VARCHAR oszIdChurnProbabilidade[LEN_IDCHURNPROBABILIDADE];
        VARCHAR oszDsCargoContato[LEN_DSCARGOCONTATO];
        VARCHAR oszDsDeptoContato[LEN_DSDEPTOCONTATO];

        short osiIdPessoaSistemaOrigemIND=0;
        short osiNmPessoaIND=0;
        short osiNmNomeIND=0;
        short osiNmNomeMeioIND=0;
        short osiNmSobrenomeIND=0;
        short osiDtChurnIND=0;
        short osiDtFalecimentoIND=0;
        short osiTsSincronismoIND=0;
        short osiSqSincronismoIND=0;
        short osiVlrChurnProbabilidadeIND=0;
        short osiDtTipoCarteiraIND=0;
        short osiDsCargoContatoIND=0;
        short osiDsDeptoContatoIND=0;
        short osiIdPessoaIND=0;
        short osiIdSistemaOrigemIND=0;
        short osiInFalecimentoInformadoIND=0;
        short osiIdTipoPessoaIND=0;
        short osiIdTipoCarteiraIND=0;
        short osiIdUfIND=0;
        short osiIdProbInadimplenciaIND=0;
        short osiIdChurnProbabilidadeIND=0;
        short osiDtCadastroIND=0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdPessoa, ptPessoa->szIdPessoa);

    EXEC SQL
        SELECT
                     IDPESSOA
            ,        IDSISTEMAORIGEM
            ,        IDPESSOASISTEMAORIGEM
            ,        NMPESSOA
            ,        NMNOME
            ,        NMNOMEMEIO
            ,        NMSOBRENOME
            ,TO_CHAR(DTCHURN,'DD/MM/YYYY')
            ,        INFALECIMENTOINFORMADO
            ,TO_CHAR(DTFALECIMENTO,'DD/MM/YYYY')
            ,        IDTIPOPESSOA
            ,        TSSINCRONISMO
            ,        SQSINCRONISMO
            ,        IDTIPOCARTEIRA
            ,        IDUF
            ,        VLRCHURNPROBABILIDADE
            ,TO_CHAR(DTTIPOCARTEIRA,'DD/MM/YYYY')
            ,        IDPROBINADIMPLENCIA
            ,        IDCHURNPROBABILIDADE
            ,TO_CHAR(DTCADASTRO,'DD/MM/YYYY')
            ,        DSCARGOCONTATO
            ,        DSDEPTOCONTATO
        INTO
             :oszIdPessoa:osiIdPessoaIND
            ,:oszIdSistemaOrigem:osiIdSistemaOrigemIND
            ,:oszIdPessoaSistemaOrigem:osiIdPessoaSistemaOrigemIND
            ,:oszNmPessoa:osiNmPessoaIND
            ,:oszNmNome:osiNmNomeIND
            ,:oszNmNomeMeio:osiNmNomeMeioIND
            ,:oszNmSobrenome:osiNmSobrenomeIND
            ,:oszDtChurn:osiDtChurnIND
            ,:oszInFalecimentoInformado
            ,:oszDtFalecimento:osiDtFalecimentoIND
            ,:oszIdTipoPessoa:osiIdTipoPessoaIND
            ,:oszTsSincronismo:osiTsSincronismoIND
            ,:oszSqSincronismo:osiSqSincronismoIND
            ,:oszIdTipoCarteira:osiIdTipoCarteiraIND
            ,:oszIdUf:osiIdUfIND
            ,:oszVlrChurnProbabilidade:osiVlrChurnProbabilidadeIND
            ,:oszDtTipoCarteira:osiDtTipoCarteiraIND
            ,:oszIdProbInadimplencia:osiIdProbInadimplenciaIND
            ,:oszIdChurnProbabilidade:osiIdChurnProbabilidadeIND
            ,:oszDtCadastro:osiDtCadastroIND
            ,:oszDsCargoContato:osiDsCargoContatoIND
            ,:oszDsDeptoContato:osiDsDeptoContatoIND
        FROM
            CUSTOMER.PESSOA
        WHERE
            IDPESSOA = :oszIdPessoa;

    if(osiIdPessoaIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdPessoa, oszIdPessoa);
    }

    if(osiIdSistemaOrigemIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdSistemaOrigem, oszIdSistemaOrigem);
    }

    if(osiIdPessoaSistemaOrigemIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdPessoaSistemaOrigem, oszIdPessoaSistemaOrigem);
    }

    if(osiNmPessoaIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szNmPessoa, oszNmPessoa);
    }

    if(osiNmNomeIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szNmNome, oszNmNome);
    }

    if(osiNmNomeMeioIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szNmNomeMeio, oszNmNomeMeio);
    }

    if(osiNmSobrenomeIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szNmSobrenome, oszNmSobrenome);
    }

    if(osiDtChurnIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDtChurn, oszDtChurn);
    }

    if(osiDtCadastroIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDtCadastro, oszDtCadastro);
    }

    if(osiInFalecimentoInformadoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szInFalecimentoInformado, oszInFalecimentoInformado);
    }

    if(osiDtFalecimentoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDtFalecimento, oszDtFalecimento);
    }

    if(osiIdTipoPessoaIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdTipoPessoa, oszIdTipoPessoa);
    }

    if(osiTsSincronismoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szTsSincronismo, oszTsSincronismo);
    }

    if(osiSqSincronismoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szSqSincronismo, oszSqSincronismo);
    }

    if(osiDtTipoCarteiraIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDtTipoCarteira, oszDtTipoCarteira);
    }

    if(osiIdTipoCarteiraIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdTipoCarteira, oszIdTipoCarteira);
    }
    
    if(osiIdUfIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdUf, oszIdUf);
    }

    if(osiVlrChurnProbabilidadeIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szVlrChurnProbabilidade, oszVlrChurnProbabilidade);
    }

    if(osiIdProbInadimplenciaIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdProbInadimplencia, oszIdProbInadimplencia);
    }

    if(osiIdChurnProbabilidadeIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szIdChurnProbabilidade, oszIdChurnProbabilidade);
    }

    if(osiDsCargoContatoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDsCargoContato, oszDsCargoContato);
    }

    if(osiDsDeptoContatoIND != -1) {
        STRCPY_FROM_ORA(ptPessoa->szDsDeptoContato, oszDsDeptoContato);
    }

    ULOGI("Finalizando proCBuscaPessoa <FOUND>");
    ULOG_END("CPessoapc::proCBuscaPessoa");
    return true;

    naoexiste:
        ULOGI("Finalizando proCBuscaPessoa <NOT FOUND>");
        ULOG_END("CPessoapc::proCBuscaPessoa");
        return false;

    erro:
        ULOGE("Finalizando proCBuscaPessoa <ERROR>");
        throw new TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
