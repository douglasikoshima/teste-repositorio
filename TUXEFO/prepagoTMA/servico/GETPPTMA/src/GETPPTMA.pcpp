#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include <tuxfw.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalTMA.h"
EXEC SQL END DECLARE SECTION;


/* prototipos */
void ApoioSexo(XMLGen *xml_g);
void ApoioTipoDocumento(XMLGen *xml_g);
void ApoioUF(XMLGen *xml_g);
void ApoioTipoEndereco(XMLGen *xml_g);
void ApoioTipoComunicacao(XMLGen *xml_g);
void ApoioEstadoCivil(XMLGen *xml_g);
void ApoioValorPossivelEscolaridade(XMLGen *xml_g);
void ApoioValorPossivelOcupacao(XMLGen *xml_g);
void ApoioTipoDocumentoInscricao(XMLGen *xml_g);
void ApoioCFOP(XMLGen *xml_g);
void ApoioTipoCarteira(XMLGen *xml_g);

DECLARE_TUXEDO_SERVICE(GETPPTMA);

void implGETPPTMA::Execute(DOMNode *dnode, XMLGen *xml_g)
{
    try
    {
        ULOG_START("GETPPTMA");
    
        xml_g->createTag("ListasVO");
        xml_g->addProp("xmlns", "cliente.fo.vivo.com.br/vo");

        ApoioSexo(xml_g);
        ApoioTipoDocumento(xml_g);
        ApoioUF(xml_g);
        ApoioTipoEndereco(xml_g);
        ApoioTipoComunicacao(xml_g);
        ApoioEstadoCivil(xml_g);
        ApoioValorPossivelEscolaridade(xml_g);
        ApoioValorPossivelOcupacao(xml_g);
        ApoioTipoDocumentoInscricao(xml_g);
        ApoioCFOP(xml_g);
        ApoioTipoCarteira(xml_g);
    
        xml_g->closeTag(); //ListasVO
    }
    catch(...)
    {
        ULOG("Exception");
        throw;
    }

    ULOG_END("GETPPTMA");
    setStatusCode("13I0000", "Sucesso");
}

/*******************************************************************************
 * Referente a apoio.sexo
 *******************************************************************************/
void ApoioSexo(XMLGen *xml_g)
{
    ULOG_START("ApoioSexo");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdSexo[LEN_IDSEXO];
        VARCHAR oszDsSexo[LEN_DSSEXO];

        short oiIdSexo=0;
        short oiDsSexo=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdSexo);
    MEMSET_ORA(oszDsSexo);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioSexo CURSOR FOR
        SELECT
            asex.idsexo,
            asex.dssexo
        FROM
            apoio.sexo asex
        ORDER BY
            asex.idsexo;

	EXEC SQL OPEN cApoioSexo;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioSexo INTO :oszIdSexo:oiIdSexo,
                                       :oszDsSexo:oiDsSexo;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaTipoSexo");

        ULOG("oszIdSexo[%.*s](%d)",oszIdSexo.len, oszIdSexo.arr, oiIdSexo);
        szAux[0]=0x00;
        if(oiIdSexo != -1) {
            STRCPY_FROM_ORA(szAux, oszIdSexo);
        }
        xml_g->addItem("idSexo", szAux);


        ULOG("oszDsSexo[%.*s](%d)",oszDsSexo.len, oszDsSexo.arr, oiDsSexo);
        szAux[0]=0x00;
        if(oiDsSexo != -1) {
            STRCPY_FROM_ORA(szAux, oszDsSexo);
        }
        xml_g->addItem("dsSexo", szAux);

    	xml_g->closeTag(); //ListaTipoSexo

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioSexo;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioSexo <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioSexo <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioSexo <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.tipodocumento
 *******************************************************************************/
void ApoioTipoDocumento(XMLGen *xml_g)
{
    ULOG_START("ApoioTipoDocumento");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszDsTipoDocumento[LEN_DSTIPODOCUMENTO];

        short oiIdTipoDocumento=0;
        short oiDsTipoDocumento=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdTipoDocumento);
    MEMSET_ORA(oszDsTipoDocumento);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;


	EXEC SQL DECLARE cApoioTipoDocumento CURSOR FOR
        SELECT
            atd.idtipodocumento,
            atd.dstipodocumento
        FROM
            apoio.tipodocumento atd
        WHERE
            atd.invisualiza = 1
        AND
            atd.sgclassificacao NOT IN ('CPR')
        AND
            atd.idtipopessoa = 1;

	EXEC SQL OPEN cApoioTipoDocumento;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioTipoDocumento INTO :oszIdTipoDocumento:oiIdTipoDocumento,
                                                :oszDsTipoDocumento:oiDsTipoDocumento;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaTipoDocumento");

        ULOG("oszIdTipoDocumento[%.*s](%d)",oszIdTipoDocumento.len, oszIdTipoDocumento.arr, oiIdTipoDocumento);
        szAux[0]=0x00;
        if(oiIdTipoDocumento != -1) {
            STRCPY_FROM_ORA(szAux, oszIdTipoDocumento);
        }
        xml_g->addItem("idTipoDocumento", szAux);


        ULOG("oszDsTipoDocumento[%.*s](%d)",oszDsTipoDocumento.len, oszDsTipoDocumento.arr, oiDsTipoDocumento);
        szAux[0]=0x00;
        if(oiDsTipoDocumento != -1) {
            STRCPY_FROM_ORA(szAux, oszDsTipoDocumento);
        }
        xml_g->addItem("dsTipoDocumento", szAux);

    	xml_g->closeTag(); //ListaTipoDocumento

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioTipoDocumento;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioTipoDocumento <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioTipoDocumento <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioTipoDocumento <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.uf
 *******************************************************************************/
void ApoioUF(XMLGen *xml_g)
{
    ULOG_START("ApoioUF");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdUF[LEN_IDUF];
        VARCHAR oszSgUF[LEN_DSUF];

        short oiIdUF=0;
        short oiSgUF=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdUF);
    MEMSET_ORA(oszSgUF);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioUF CURSOR FOR
        SELECT 	
            uf.iduf,
            uf.sguf
        FROM 
            apoio.uf uf
        WHERE
            uf.iduf > 0
        AND
            uf.sguf != 'spsp'
        AND
            uf.sguf IN ('AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO');

	EXEC SQL OPEN cApoioUF;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioUF INTO    :oszIdUF:oiIdUF,
                                        :oszSgUF:oiSgUF;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaUF");

        ULOG("oszIdUF[%.*s](%d)",oszIdUF.len, oszIdUF.arr, oiIdUF);
        szAux[0]=0x00;
        if(oiIdUF != -1) {
            STRCPY_FROM_ORA(szAux, oszIdUF);
        }
        xml_g->addItem("idUF", szAux);

        ULOG("oszSgUF[%.*s](%d)",oszSgUF.len, oszSgUF.arr, oiSgUF);
        szAux[0]=0x00;
        if(oiSgUF != -1) {
            STRCPY_FROM_ORA(szAux, oszSgUF);
        }
        xml_g->addItem("sgUF", szAux);

    	xml_g->closeTag(); //ListaUF

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioUF;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioUF <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioUF <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioUF <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.tipoendereco
 *******************************************************************************/
void ApoioTipoEndereco(XMLGen *xml_g)
{
    ULOG_START("ApoioTipoEndereco");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoEndereco[LEN_IDTIPOENDERECO];
        VARCHAR oszDsTipoEndereco[LEN_DSTIPOENDERECO];

        short oiIdTipoEndereco=0;
        short oiDsTipoEndereco=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdTipoEndereco);
    MEMSET_ORA(oszDsTipoEndereco);

	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioTipoEndereco CURSOR FOR
        SELECT 	
            ate.idtipoendereco,
            ate.dstipoendereco
        FROM 
            apoio.tipoendereco ate
        WHERE
            ate.idtipoendereco > 0
        AND
        (
                ate.sgtipoendereco = 'COB'
            OR
                ate.sgtipoendereco = 'COM'  
            OR
                ate.sgtipoendereco = 'COR'        
            OR
                ate.sgtipoendereco = 'RES'  
        );


	EXEC SQL OPEN cApoioTipoEndereco;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioTipoEndereco INTO    :oszIdTipoEndereco:oiIdTipoEndereco,
                                                  :oszDsTipoEndereco:oiDsTipoEndereco;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaTipoEndereco");

        ULOG("oszIdTipoEndereco[%.*s](%d)",oszIdTipoEndereco.len, oszIdTipoEndereco.arr, oiIdTipoEndereco);
        szAux[0]=0x00;
        if(oiIdTipoEndereco != -1) {
            STRCPY_FROM_ORA(szAux, oszIdTipoEndereco);
        }
        xml_g->addItem("idTipoEndereco", szAux);

        ULOG("oszDsTipoEndereco[%.*s](%d)",oszDsTipoEndereco.len, oszDsTipoEndereco.arr, oiDsTipoEndereco);
        szAux[0]=0x00;
        if(oiDsTipoEndereco != -1) {
            STRCPY_FROM_ORA(szAux, oszDsTipoEndereco);
        }
        xml_g->addItem("dsTipoEndereco", szAux);

    	xml_g->closeTag(); //ListaTipoEndereco

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioTipoEndereco;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioTipoEndereco <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioTipoEndereco <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioTipoEndereco <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.tipocomunicacao
 *******************************************************************************/
void ApoioTipoComunicacao(XMLGen *xml_g)
{
    ULOG_START("ApoioTipoComunicacao");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoComunicacao[LEN_IDTIPOCOMUNICACAO];
        VARCHAR oszDsTipoComunicacao[LEN_DSTIPOCOMUNICACAO];

        short oiIdTipoComunicacao=0;
        short oiDsTipoComunicacao=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdTipoComunicacao);
    MEMSET_ORA(oszDsTipoComunicacao);

	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioTipoComunicacao CURSOR FOR
        SELECT 	
            atc.IDTIPOCOMUNICACAO,
            atc.DSTIPOCOMUNICACAO
        FROM 
            APOIO.TIPOCOMUNICACAO atc
        WHERE
            atc.IDTIPOCOMUNICACAO > 0;


	EXEC SQL OPEN cApoioTipoComunicacao;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioTipoComunicacao INTO    :oszIdTipoComunicacao:oiIdTipoComunicacao,
                                                     :oszDsTipoComunicacao:oiDsTipoComunicacao;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaTipoTelefone");

        ULOG("oszIdTipoComunicacao[%.*s](%d)",oszIdTipoComunicacao.len, oszIdTipoComunicacao.arr, oiIdTipoComunicacao);
        szAux[0]=0x00;
        if(oiIdTipoComunicacao != -1) {
            STRCPY_FROM_ORA(szAux, oszIdTipoComunicacao);
        }
        xml_g->addItem("idTipoTelefone", szAux);

        ULOG("oszDsTipoComunicacao[%.*s](%d)",oszDsTipoComunicacao.len, oszDsTipoComunicacao.arr, oiDsTipoComunicacao);
        szAux[0]=0x00;
        if(oiDsTipoComunicacao != -1) {
            STRCPY_FROM_ORA(szAux, oszDsTipoComunicacao);
        }
        xml_g->addItem("dsTipoTelefone", szAux);

    	xml_g->closeTag(); //ListaTipoTelefone

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioTipoComunicacao;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioTipoComunicacao <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioTipoComunicacao <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioTipoComunicacao <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.estadocivil
 *******************************************************************************/
void ApoioEstadoCivil(XMLGen *xml_g)
{
    ULOG_START("ApoioEstadoCivil");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdEstadoCivil[LEN_IDESTADOCIVIL];
        VARCHAR oszDsEstadoCivil[LEN_DSESTADOCIVIL];

        short oiIdEstadoCivil=0;
        short oiDsEstadoCivil=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdEstadoCivil);
    MEMSET_ORA(oszDsEstadoCivil);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioEstadoCivil CURSOR FOR
        SELECT 	
            aec.idestadocivil,
            aec.dsestadocivil
        FROM 
            apoio.estadocivil aec
        WHERE
            aec.idestadocivil > 0;

	EXEC SQL OPEN cApoioEstadoCivil;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioEstadoCivil INTO    :oszIdEstadoCivil:oiIdEstadoCivil,
                                                 :oszDsEstadoCivil:oiDsEstadoCivil;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaEstadoCivil");

        ULOG("oszIdEstadoCivil[%.*s](%d)",oszIdEstadoCivil.len, oszIdEstadoCivil.arr, oiIdEstadoCivil);
        szAux[0]=0x00;
        if(oiIdEstadoCivil != -1) {
            STRCPY_FROM_ORA(szAux, oszIdEstadoCivil);
        }
        xml_g->addItem("idEstadoCivil", szAux);


        ULOG("oszDsEstadoCivil[%.*s](%d)",oszDsEstadoCivil.len, oszDsEstadoCivil.arr, oiDsEstadoCivil);
        szAux[0]=0x00;
        if(oiDsEstadoCivil != -1) {
            STRCPY_FROM_ORA(szAux, oszDsEstadoCivil);
        }
        xml_g->addItem("dsEstadoCivil", szAux);

    	xml_g->closeTag(); //ListaEstadoCivil

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioEstadoCivil;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioEstadoCivil <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioEstadoCivil <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioEstadoCivil <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.valorpossivel (escolaridade)
 *******************************************************************************/
void ApoioValorPossivelEscolaridade(XMLGen *xml_g)
{
    ULOG_START("ApoioValorPossivelEscolaridade");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdValorPossivel[LEN_IDVALORPOSSIVEL];
        VARCHAR oszDsValorPossivel[LEN_DSVALORPOSSIVEL];

        short oiIdValorPossivel=0;
        short oiDsValorPossivel=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdValorPossivel);
    MEMSET_ORA(oszDsValorPossivel);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioValorPossivelEscolaridade CURSOR FOR
        SELECT 	
            cvp.idvalorpossivel,
            cvp.dsvalorpossivel
        FROM 
            customer.valorpossivel cvp
        WHERE 
            cvp.idatributo = 90;


	EXEC SQL OPEN cApoioValorPossivelEscolaridade;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioValorPossivelEscolaridade INTO    :oszIdValorPossivel:oiIdValorPossivel,
                                                               :oszDsValorPossivel:oiDsValorPossivel;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaEscolaridade");

        ULOG("oszIdValorPossivel[%.*s](%d)",oszIdValorPossivel.len, oszIdValorPossivel.arr, oiIdValorPossivel);
        szAux[0]=0x00;
        if(oiIdValorPossivel != -1) {
            STRCPY_FROM_ORA(szAux, oszIdValorPossivel);
        }
        xml_g->addItem("idEscolaridade", szAux);

        ULOG("oszDsValorPossivel[%.*s](%d)",oszDsValorPossivel.len, oszDsValorPossivel.arr, oiDsValorPossivel);
        szAux[0]=0x00;
        if(oiDsValorPossivel != -1) {
            STRCPY_FROM_ORA(szAux, oszDsValorPossivel);
        }
        xml_g->addItem("dsEscolaridade", szAux);

    	xml_g->closeTag(); //ListaEscolaridade

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioValorPossivelEscolaridade;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioValorPossivelEscolaridade <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioValorPossivelEscolaridade <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioValorPossivelEscolaridade <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.valorpossivel (ocupacao)
 *******************************************************************************/
void ApoioValorPossivelOcupacao(XMLGen *xml_g)
{
    ULOG_START("ApoioValorPossivelOcupacao");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdValorPossivel[LEN_IDVALORPOSSIVEL];
        VARCHAR oszDsValorPossivel[LEN_DSVALORPOSSIVEL];

        short oiIdValorPossivel=0;
        short oiDsValorPossivel=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdValorPossivel);
    MEMSET_ORA(oszDsValorPossivel);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioValorPossivelOcupacao CURSOR FOR
        SELECT 	
            cvp.idvalorpossivel,
            cvp.dsvalorpossivel
        FROM 
            customer.valorpossivel cvp
        WHERE 
            cvp.idatributo = 107;


	EXEC SQL OPEN cApoioValorPossivelOcupacao;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioValorPossivelOcupacao INTO    :oszIdValorPossivel:oiIdValorPossivel,
                                                           :oszDsValorPossivel:oiDsValorPossivel;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaNatOcupacao");

        ULOG("oszIdValorPossivel[%.*s](%d)",oszIdValorPossivel.len, oszIdValorPossivel.arr, oiIdValorPossivel);
        szAux[0]=0x00;
        if(oiIdValorPossivel != -1) {
            STRCPY_FROM_ORA(szAux, oszIdValorPossivel);
        }
        xml_g->addItem("idOcupacao", szAux);

        ULOG("oszDsValorPossivel[%.*s](%d)",oszDsValorPossivel.len, oszDsValorPossivel.arr, oiDsValorPossivel);
        szAux[0]=0x00;
        if(oiDsValorPossivel != -1) {
            STRCPY_FROM_ORA(szAux, oszDsValorPossivel);
        }
        xml_g->addItem("dsOcupacao", szAux);

    	xml_g->closeTag(); //ListaNatOcupacao

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioValorPossivelOcupacao;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioValorPossivelOcupacao <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioValorPossivelOcupacao <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioValorPossivelOcupacao <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.tipodocumento (inscricao)
 *******************************************************************************/
void ApoioTipoDocumentoInscricao(XMLGen *xml_g)
{
    ULOG_START("ApoioTipoDocumentoInscricao");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoDocumento[LEN_IDTIPODOCUMENTO];
        VARCHAR oszDsTipoDocumento[LEN_DSTIPODOCUMENTO];

        short oiIdTipoDocumento=0;
        short oiDsTipoDocumento=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdTipoDocumento);
    MEMSET_ORA(oszDsTipoDocumento);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioTipoDocumentoInscricao CURSOR FOR
        SELECT 
            td.idtipodocumento, 
            td.dstipodocumento
        FROM 
            apoio.tipodocumento td
        WHERE
            td.sgclassificacao IN('IE', 'IF', 'IM', 'II')
        AND
            td.invisualiza = 1
        AND
            td.idtipopessoa = 2;

	EXEC SQL OPEN cApoioTipoDocumentoInscricao;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioTipoDocumentoInscricao INTO    :oszIdTipoDocumento:oiIdTipoDocumento,
                                                            :oszDsTipoDocumento:oiDsTipoDocumento;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaTipoInscricao");

        ULOG("oszIdTipoDocumento[%.*s](%d)",oszIdTipoDocumento.len, oszIdTipoDocumento.arr, oiIdTipoDocumento);
        szAux[0]=0x00;
        if(oiIdTipoDocumento != -1) {
            STRCPY_FROM_ORA(szAux, oszIdTipoDocumento);
        }
        xml_g->addItem("idInscricao", szAux);


        ULOG("oszDsTipoDocumento[%.*s](%d)",oszDsTipoDocumento.len, oszDsTipoDocumento.arr, oiDsTipoDocumento);
        szAux[0]=0x00;
        if(oiDsTipoDocumento != -1) {
            STRCPY_FROM_ORA(szAux, oszDsTipoDocumento);
        }
        xml_g->addItem("dsInscricao", szAux);

    	xml_g->closeTag(); //ListaTipoInscricao

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioTipoDocumentoInscricao;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioTipoDocumentoInscricao <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioTipoDocumentoInscricao <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioTipoDocumentoInscricao <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.cfop (Classificacao Tributaria)
 *******************************************************************************/
void ApoioCFOP(XMLGen *xml_g)
{
    ULOG_START("ApoioCFOP");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdCFOP[LEN_IDCFOP];
        VARCHAR oszDsCFOP[LEN_DSCFOP];

        short oiIdCFOP=0;
        short oiDsCFOP=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdCFOP);
    MEMSET_ORA(oszDsCFOP);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioCFOP CURSOR FOR
        SELECT 	
            cfop.idcfop,
            cfop.dscfop
        FROM 
            apoio.cfop cfop;

	EXEC SQL OPEN cApoioCFOP;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioCFOP INTO  :oszIdCFOP:oiIdCFOP,
                                        :oszDsCFOP:oiDsCFOP;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaClassTributaria");

        ULOG("oszIdCFOP[%.*s](%d)",oszIdCFOP.len, oszIdCFOP.arr, oiIdCFOP);
        szAux[0]=0x00;
        if(oiIdCFOP != -1) {
            STRCPY_FROM_ORA(szAux, oszIdCFOP);
        }
        xml_g->addItem("idTributaria", szAux);

        ULOG("oszDsCFOP[%.*s](%d)",oszDsCFOP.len, oszDsCFOP.arr, oiDsCFOP);
        szAux[0]=0x00;
        if(oiDsCFOP != -1) {
            STRCPY_FROM_ORA(szAux, oszDsCFOP);
        }
        xml_g->addItem("dsTributaria", szAux);

    	xml_g->closeTag(); //ListaClassTributaria

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioCFOP;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioCFOP <NOT FOUND>");
        return;
    }
    
    ULOG_END("ApoioCFOP <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioCFOP <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}

/*******************************************************************************
 * Referente a apoio.tipocarteira (Classificacao empresa)
 *******************************************************************************/
void ApoioTipoCarteira(XMLGen *xml_g)
{
    ULOG_START("ApoioTipoCarteira");

	struct sqlca sqlca;
    int iCount;
    char szAux[LEN_AUX_ORA + LEN_EOS];
    bool bFlagStop=false;

	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdTipoCarteira[LEN_IDTIPOCARTEIRA];
        VARCHAR oszDsTipoCarteira[LEN_DSTIPOCARTEIRA];

        short oiIdTipoCarteira=0;
        short oiDsTipoCarteira=0;
	EXEC SQL END DECLARE SECTION;

    MEMSET_ORA(oszIdTipoCarteira);
    MEMSET_ORA(oszDsTipoCarteira);


	EXEC SQL WHENEVER SQLERROR GOTO sqlError;

	EXEC SQL DECLARE cApoioTipoCarteira CURSOR FOR
        SELECT 	
            atc.idtipocarteira,
            atc.dstipocarteira
        FROM 
            apoio.tipocarteira atc
        WHERE
            atc.idtipocarteira > 0;

	EXEC SQL OPEN cApoioTipoCarteira;

	for(iCount=0;;iCount++)
    {
        EXEC SQL FETCH cApoioTipoCarteira INTO  :oszIdTipoCarteira:oiIdTipoCarteira,
                                                :oszDsTipoCarteira:oiDsTipoCarteira;

        ULOG("sqlca.sqlcode(%d) iCount(%d)", sqlca.sqlcode, iCount);
        if(sqlca.sqlcode == 1403) {
            bFlagStop=true;
            if(iCount > 0) {
                break;
            }
        }

    	xml_g->createTag("ListaClassEmpresa");

        ULOG("oszIdTipoCarteira[%.*s](%d)",oszIdTipoCarteira.len, oszIdTipoCarteira.arr, oiIdTipoCarteira);
        szAux[0]=0x00;
        if(oiIdTipoCarteira != -1) {
            STRCPY_FROM_ORA(szAux, oszIdTipoCarteira);
        }
        xml_g->addItem("idClassificacaoEmpresa", szAux);

        ULOG("oszDsTipoCarteira[%.*s](%d)",oszDsTipoCarteira.len, oszDsTipoCarteira.arr, oiDsTipoCarteira);
        szAux[0]=0x00;
        if(oiDsTipoCarteira != -1) {
            STRCPY_FROM_ORA(szAux, oszDsTipoCarteira);
        }
        xml_g->addItem("dsClassificacaoEmpresa", szAux);

    	xml_g->closeTag(); //ListaClassEmpresa

        if(bFlagStop == true) {
            break;
        }
    }

    EXEC SQL CLOSE cApoioTipoCarteira;

    ULOG("Quantidade de elementos obtidos (%d)", iCount);

    if(iCount == 0) {
        ULOG_END("ApoioTipoCarteira <NOT FOUND>");
        return;
    }

    ULOG_END("ApoioTipoCarteira <OK>");
    return;

	sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ApoioTipoCarteira <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
