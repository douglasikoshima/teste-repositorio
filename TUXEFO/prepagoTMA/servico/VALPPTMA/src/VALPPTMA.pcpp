#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>

#include <tuxfw.h>
#include <AreaRegistroBloqueadoPreTMA.h>
#include <PPExceptionTMA.h>

EXEC SQL BEGIN DECLARE SECTION;
#include "PPGlobalTMA.h"
EXEC SQL END DECLARE SECTION;


/* prototipos */
void ValidaLinhaPPTMA(char *pszCdAreaRegistro, char *pszNrLinha, XMLGen *xml_g);

DECLARE_TUXEDO_SERVICE(VALPPTMA);

void implVALPPTMA::Execute(DOMNode *dnode, XMLGen *xml_g)
{
    char szAux[LEN_AUX + LEN_EOS];
    char szNrLinha[LEN_NRLINHA + LEN_EOS];
    char szCdAreaRegistro[LEN_CDAREAREGISTRO + LEN_EOS];

    CAreaRegistroBloqueado *pclAreaRegistroBloqueado=NULL;
    bool bDDDBloqueado;


    /* Usadas na macro GETTREE */
    char szMessage[LEN_RETURN_MESSAGE + LEN_EOS];
    char *pTree;

    try
    {
        ULOG_START("VALPPTMA");

        GETTREE(szAux, dnode, "nrLinha", 0, OBRIGATORIO, "nrLinha"); ULOG("nrLinha[%s]", szAux);

        memset(szCdAreaRegistro, 0x00, sizeof(szCdAreaRegistro));
        memcpy(szCdAreaRegistro, szAux, 2); ULOG("szCdAreaRegistro[%s]", szCdAreaRegistro);
        strcpy(szNrLinha, szAux+2); ULOG("szNrLinha[%s]", szNrLinha);
   
        CAreaRegistroBloqueado pclAreaRegistroBloqueado;
        pclAreaRegistroBloqueado.setCdAreaRegistro(szCdAreaRegistro);
        bDDDBloqueado = pclAreaRegistroBloqueado.DDDBloqueado();
    
        xml_g->createTag("PrePagoRetornoValidaLinha");
        xml_g->addProp("xmlns" ,"cliente.fo.vivo.com.br/vo");

        if(bDDDBloqueado == true)
        {
            xml_g->addItem("result", "BLOQ");
            xml_g->addItem("digito", "" );
            xml_g->addItem("idlinhaTelefonica", "" );
            xml_g->addItem("idPessoa", "" );
            xml_g->addItem("idTipoPessoa", "" );
        }
        else
        {
            ValidaLinhaPPTMA(szCdAreaRegistro, szNrLinha, xml_g);
        }

        xml_g->closeTag(); //PrePagoRetornoValidaLinha

    }
    catch(...)
    {
        ULOG("Exception");
        throw;
    }

    ULOG_END("VALPPTMA");
    setStatusCode("13I0000", "Sucesso");
}

/*******************************************************************************
 *******************************************************************************/
void ValidaLinhaPPTMA(char *pszCdAreaRegistro, char *pszNrLinha, XMLGen *xml_g)
{
    ULOG_START("ValidaLinhaPPTMA");

    struct sqlca sqlca;

    char szNrDigitoLinha[LEN_NUMBER_ORA + LEN_EOS];
    char szIdLinhaTelefonica[LEN_IDLINHATELEFONICA + LEN_EOS];
    char szIdPessoa[LEN_IDPESSOA + LEN_EOS];
    char szIdTipoPessoa[LEN_IDTIPOPESSOA + LEN_EOS];

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszCdAreaRegistro[LEN_CDAREAREGISTRO];
        VARCHAR oszNrLinha[LEN_NRLINHA];

        VARCHAR oszNrDigitoLinha[LEN_NUMBER_ORA];
        VARCHAR oszIdLinhaTelefonica[LEN_IDLINHATELEFONICA];
        VARCHAR oszIdPessoa[LEN_IDPESSOA];
        VARCHAR oszIdTipoPessoa[LEN_IDTIPOPESSOA];

        short oiNrDigitoLinha=0;
        short oiIdLinhaTelefonica=0;
        short oiIdPessoa=0;
        short oiIdTipoPessoa=0;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    memset(&oszCdAreaRegistro,0,sizeof(oszCdAreaRegistro));
    memset(&oszNrLinha,0,sizeof(oszNrLinha));

    STRCPY_TO_ORA(oszCdAreaRegistro, pszCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, pszNrLinha);

    EXEC SQL
        SELECT
            LINHABASE.NRDIGITOLINHA,
            LINHATELEFONICA.IDLINHATELEFONICA,
            PESSOA.IDPESSOA,
            PESSOA.IDTIPOPESSOA
        INTO
            :oszNrDigitoLinha:oiNrDigitoLinha,
            :oszIdLinhaTelefonica:oiIdLinhaTelefonica,
            :oszIdPessoa:oiIdPessoa,
            :oszIdTipoPessoa:oiIdTipoPessoa
        FROM
            CUSTOMER.PESSOALINHA        PESSOALINHA,
            LINHA.LINHATELEFONICA       LINHATELEFONICA,
            LINHA.LINHABASE             LINHABASE,
            CUSTOMER.LINHACONTA         LINHACONTA,
            APOIO.AREAREGISTRO          AREAREGISTRO,
            APOIO.TIPOLINHA             TIPOLINHA,
            CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
            CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTOPESSOA,
            CUSTOMER.PESSOADEPARA       PESSOADEPARA,
            CUSTOMER.PESSOA             PESSOA
        WHERE 
            LINHABASE.IDAREAREGISTRO = AREAREGISTRO.IDAREAREGISTRO
        AND LINHABASE.IDLINHABASE = LINHATELEFONICA.IDLINHABASE
        AND LINHATELEFONICA.IDLINHATELEFONICA = LINHACONTA.IDLINHATELEFONICA
        AND LINHACONTA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
        AND LINHATELEFONICA.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA
        AND LINHATELEFONICA.IDLINHATELEFONICA = PESSOALINHA.IDLINHATELEFONICA (+) --//Alter join, linhas pre ativas nao tem pessoa
        AND PESSOALINHA.IDPESSOADEPARA = PESSOADEPARA.IDPESSOADEPARA (+) --//Alter join, linhas pre ativas nao tem pessoa
        AND PESSOALINHA.IDTIPORELACIONAMENTO = TIPORELACIONAMENTOPESSOA.IDTIPORELACIONAMENTO (+) --//Alter join, linhas pre ativas nao tem pessoa
        AND PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA (+) --//Alter join, linhas pre ativas nao tem pessoa
        AND (TIPOLINHA.SGTIPOLINHA = 'PRÉ' OR TIPOLINHA.SGTIPOLINHA = 'PRÉCHIP')
        AND TIPORELACIONAMENTO.SGTIPORELACIONAMENTO = 'C' --//Verifica se a relacao com conta eh do tipo cliente
        AND NVL(TIPORELACIONAMENTOPESSOA.SGTIPORELACIONAMENTO,'C') = 'C'
        AND LINHABASE.NRLINHA = :oszNrLinha
        AND AREAREGISTRO.CDAREAREGISTRO = :oszCdAreaRegistro
        AND NVL(LINHACONTA.DTEXPIRACAO,SYSDATE+1) > SYSDATE
        AND ROWNUM < 2;

    ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);

    if ( sqlca.sqlcode )
    {
        ULOG("Vai verificar se linha %s%s é de prospect...",
                                oszCdAreaRegistro.arr,oszNrLinha.arr);

        EXEC SQL
            SELECT
                NULL AS NRDIGITOLINHA,
                1 AS IDLINHATELEFONICA,
                PESSOA.IDPESSOA,
                PESSOA.IDTIPOPESSOA
            INTO
                :oszNrDigitoLinha:oiNrDigitoLinha,
                :oszIdLinhaTelefonica:oiIdLinhaTelefonica,
                :oszIdPessoa:oiIdPessoa,
                :oszIdTipoPessoa:oiIdTipoPessoa
            FROM
                CUSTOMER.PESSOADEPARA PESSOADEPARA,
                CUSTOMER.PESSOA PESSOA
            WHERE 
                PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
            AND PESSOA.NRLINHAPROSPECT = :oszNrLinha
            AND PESSOA.CDAREAREGISTROPROSPECT = :oszCdAreaRegistro;

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
    }

    memset(szNrDigitoLinha, 0x00, sizeof(szNrDigitoLinha));
    memset(szIdLinhaTelefonica, 0x00, sizeof(szIdLinhaTelefonica));
    memset(szIdPessoa, 0x00, sizeof(szIdPessoa));
    memset(szIdTipoPessoa, 0x00, sizeof(szIdTipoPessoa));

    if( sqlca.sqlcode == 0 )
    {
        ULOG("oszNrDigitoLinha[%.*s](%d)", oszNrDigitoLinha.len, oszNrDigitoLinha.arr, oiNrDigitoLinha);
        ULOG("oszIdLinhaTelefonica[%.*s](%d)", oszIdLinhaTelefonica.len, oszIdLinhaTelefonica.arr, oiIdLinhaTelefonica);
        ULOG("oszIdPessoa[%.*s](%d)", oszIdPessoa.len, oszIdPessoa.arr, oiIdPessoa);
        ULOG("oszIdTipoPessoa[%.*s](%d)", oszIdTipoPessoa.len, oszIdTipoPessoa.arr, oiIdTipoPessoa);

        if(oiNrDigitoLinha != -1)
        {
            STRCPY_FROM_ORA(szNrDigitoLinha, oszNrDigitoLinha);
        }
        if(oiIdLinhaTelefonica != -1)
        {
            STRCPY_FROM_ORA(szIdLinhaTelefonica, oszIdLinhaTelefonica);
        }
        if(oiIdPessoa != -1)
        {
            STRCPY_FROM_ORA(szIdPessoa, oszIdPessoa);
        }
        if(oiIdTipoPessoa != -1)
        {
            STRCPY_FROM_ORA(szIdTipoPessoa, oszIdTipoPessoa);
        }
    }

    ULOG("szNrDigitoLinha[%s]", szNrDigitoLinha);
    ULOG("szIdLinhaTelefonica[%s]", szIdLinhaTelefonica);
    ULOG("szIdPessoa[%s]", szIdPessoa);
    ULOG("szIdTipoPessoa[%s]", szIdTipoPessoa);

    if(strlen(szIdLinhaTelefonica) == 0 || sqlca.sqlcode == 1403)
    {
        ULOG("Local1");
        xml_g->addItem("result", "NOK");
        xml_g->addItem("digito", "");
        xml_g->addItem("idlinhaTelefonica", "");
        xml_g->addItem("idPessoa", "");
        xml_g->addItem("idTipoPessoa", "");
    }
    else
    {
        ULOG("Local2");
        if(strlen(szIdPessoa) > 0)
        {
            ULOG("Local3");
            xml_g->addItem("result", "OK");
            xml_g->addItem("digito", szNrDigitoLinha);
            xml_g->addItem("idlinhaTelefonica", szIdLinhaTelefonica);
            xml_g->addItem("idPessoa", szIdPessoa);
            xml_g->addItem("idTipoPessoa", szIdTipoPessoa);
        }
        else
        {
            ULOG("Local4");
            xml_g->addItem("result", "OK");
            xml_g->addItem("digito", szNrDigitoLinha);
            xml_g->addItem("idlinhaTelefonica", szIdLinhaTelefonica);
            xml_g->addItem("idPessoa", "");
            xml_g->addItem("idTipoPessoa", "");
        }
    }

    ULOG_END("ValidaLinhaPPTMA <OK>");
    return;

    sqlError:
        ULOGE("ERRO: sqlca.sqlcode(%d)[%.*s]", sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        ULOG_END("ValidaLinhaPPTMA <ERROR>");
        throw TuxBasicOraException(sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrm.sqlerrml);
}
