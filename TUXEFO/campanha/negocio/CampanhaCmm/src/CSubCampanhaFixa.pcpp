#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CSubCampanhaFixa.h>

CSubCampanhaFixa::CSubCampanhaFixa()
{
}

CSubCampanhaFixa::~CSubCampanhaFixa()
{
}

int CSubCampanhaFixa::Insert( char* cidCampanha, 
						      char* cinAtiva, 
						      char* cinDisponibilidade )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidSubCampanhaFixa[21+1];
		char* cAuxidCampanha  = cidCampanha;
		char* cAuxinAtiva  = cinAtiva;
		char* cAuxinDisponibilidade  = cinDisponibilidade;
	EXEC SQL END DECLARE SECTION;
	
	ZeraSubCampanhaFixa();
	
	memset( &cAuxidSubCampanhaFixa, 0, sizeof(cAuxidSubCampanhaFixa) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
	sqlca.sqlcode=0;
	
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT CAMPANHA.SUBCAMPANHAFIXASQ.NEXTVAL
		INTO :cAuxidSubCampanhaFixa
		FROM DUAL;

	EXEC SQL 
		INSERT INTO CAMPANHA.SUBCAMPANHAFIXA
		  (IDSUBCAMPANHAFIXA, 
		   IDCAMPANHA, 
		   INATIVO, 
		   INDISPONIBILIDADE)
		VALUES
		  (:cAuxidSubCampanhaFixa, 
		   :cAuxidCampanha, 
		   :cAuxinAtiva, 
		   :cAuxinDisponibilidade);  
	
	Add( (char*)cAuxidSubCampanhaFixa.arr, 
	     cAuxidCampanha,
	     cAuxinAtiva,
	     cAuxinDisponibilidade );

	return 1;

GotoInsert:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaFixa::Insert( char* cnmSubCampanhaFixa,
							  char* cidCampanha, 
						      char* cinAtiva, 
						      char* cinDisponibilidade )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidSubCampanhaFixa[21+1];
		char* cAuxnmSubCampanhaFixa = cnmSubCampanhaFixa;
		char* cAuxidCampanha = cidCampanha;
		char* cAuxinAtiva = cinAtiva;
		char* cAuxinDisponibilidade = cinDisponibilidade;
	EXEC SQL END DECLARE SECTION;
	
	ZeraSubCampanhaFixa();
	
	memset( &cAuxidSubCampanhaFixa, 0, sizeof(cAuxidSubCampanhaFixa) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert2;
	sqlca.sqlcode=0;
	
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT CAMPANHA.SUBCAMPANHAFIXASQ.NEXTVAL
		INTO :cAuxidSubCampanhaFixa
		FROM DUAL;

	EXEC SQL 
		INSERT INTO CAMPANHA.SUBCAMPANHAFIXA
		  (IDSUBCAMPANHAFIXA,
		   NMSUBCAMPANHAFIXA,
		   IDCAMPANHA,
		   INATIVO, 
		   INDISPONIBILIDADE)
		VALUES
		  (:cAuxidSubCampanhaFixa, 
		   :cAuxnmSubCampanhaFixa,
		   :cAuxidCampanha, 
		   :cAuxinAtiva, 
		   :cAuxinDisponibilidade);  
	
	Add( (char*)cAuxidSubCampanhaFixa.arr, 
		 cAuxnmSubCampanhaFixa,
	     cAuxidCampanha,
	     cAuxinAtiva,
	     cAuxinDisponibilidade );

	return 1;

GotoInsert2:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaFixa::Update( char* cidSubCampanhaFixa, 
	                          char* cidCampanha, 
							  char* cinAtiva, 
							  char* cinDisponibilidade )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaFixa  = cidSubCampanhaFixa;
		char* cAuxidCampanha  = cidCampanha;
		char* cAuxinAtiva  = cinAtiva;
		char* cAuxinDisponibilidade  = cinDisponibilidade;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaFixa();
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
	sqlca.sqlcode=0;
	
	EXEC SQL 
		UPDATE CAMPANHA.SUBCAMPANHAFIXA
		   SET IDCAMPANHA = :cAuxidCampanha,
		       INATIVO = :cAuxinAtiva,
		       INDISPONIBILIDADE = :cAuxinDisponibilidade
		 WHERE IDSUBCAMPANHAFIXA = :cAuxidSubCampanhaFixa;   
	
	if( sqlca.sqlcode == 0 )
		return 1;
	else
		return 0;

GotoUpdate:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}


int CSubCampanhaFixa::ListId( char* cid )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidOra = cid;
		struct
		{
			VARCHAR stidSubCampanhaFixa[21+1];
			VARCHAR stidCampanha[21+1];
			VARCHAR stinAtiva[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stSubCampanhaFixaRegistro;
		struct
		{
			short iidSubCampanhaFixa;
			short iidCampanha;
			short iinAtiva;
			short iinDisponibilidade;
		} stSubCampanhaFixaIndicator;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaFixa();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	sqlca.sqlcode=0;

   	EXEC SQL DECLARE CursorSubCampanhaFixaId CURSOR FOR
		SELECT IDSUBCAMPANHAFIXA, 
			   IDCAMPANHA, 
			   INATIVO, 
			   INDISPONIBILIDADE
		  FROM CAMPANHA.SUBCAMPANHAFIXA SUBCAMPANHAFIXA
		 WHERE IDSUBCAMPANHAFIXA = :cidOra;

	EXEC SQL OPEN CursorSubCampanhaFixaId;

	if(sqlca.sqlcode)
		return 0;
	else
	{
		for(;;)
		{
			memset( &stSubCampanhaFixaRegistro, 0, sizeof(stSubCampanhaFixaRegistro) );
			EXEC SQL FETCH CursorSubCampanhaFixaId INTO :stSubCampanhaFixaRegistro:stSubCampanhaFixaIndicator;

			Add( (char*)stSubCampanhaFixaRegistro.stidSubCampanhaFixa.arr, 
			     (char*)stSubCampanhaFixaRegistro.stidCampanha.arr,
			     (char*)stSubCampanhaFixaRegistro.stinAtiva.arr,
			     (char*)stSubCampanhaFixaRegistro.stinDisponibilidade.arr );

			iCont++;

		}
		EXEC SQL CLOSE CursorSubCampanhaFixaId;
	}

	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CSubCampanhaFixa::ListAll( void )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidSubCampanhaFixa[21+1];
			VARCHAR stidCampanha[21+1];
			VARCHAR stinAtiva[21+1];
			VARCHAR stinDisponibilidade[21+1];
		} stSubCampanhaFixaRegistro;
		struct
		{
			short iidSubCampanhaFixa;
			short iidCampanha;
			short iinAtiva;
			short iinDisponibilidade;
		} stSubCampanhaFixaIndicator;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaFixa();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
	sqlca.sqlcode=0;

   	EXEC SQL DECLARE CursorSubCampanhaFixaAll CURSOR FOR
		SELECT IDSUBCAMPANHAFIXA, 
			   IDCAMPANHA, 
			   INATIVO, 
			   INDISPONIBILIDADE
		  FROM CAMPANHA.SUBCAMPANHAFIXA SUBCAMPANHAFIXA;

	EXEC SQL OPEN CursorSubCampanhaFixaAll;

	if(sqlca.sqlcode)
		return 0;
	else
	{
		for(;;)
		{
			memset( &stSubCampanhaFixaRegistro, 0, sizeof(stSubCampanhaFixaRegistro) );
			EXEC SQL FETCH CursorSubCampanhaFixaAll INTO :stSubCampanhaFixaRegistro:stSubCampanhaFixaIndicator;

			Add( (char*)stSubCampanhaFixaRegistro.stidSubCampanhaFixa.arr, 
			     (char*)stSubCampanhaFixaRegistro.stidCampanha.arr,
			     (char*)stSubCampanhaFixaRegistro.stinAtiva.arr,
			     (char*)stSubCampanhaFixaRegistro.stinDisponibilidade.arr );

			iCont++;

		}
		EXEC SQL CLOSE CursorSubCampanhaFixaAll;
	}

	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CSubCampanhaFixa::ProcuraNome( char* cnmSubCampanhaFixa )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		int   iCont = 0;
		char* cAuxnmSubCampanhaFixa = cnmSubCampanhaFixa;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoProcuraNome;
	sqlca.sqlcode=0;

   	EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iCont
	FROM 
		CAMPANHA.SUBCAMPANHAFIXA
	WHERE
		UPPER(NMSUBCAMPANHAFIXA) = UPPER(TRIM(:cAuxnmSubCampanhaFixa));

	return iCont;

GotoProcuraNome:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CSubCampanhaFixa::GetXml( char* cNomeTag, XMLGen*xml )
{
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp( "xmlns", "campanha.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idSubCampanhaFixa", Registro(x)->cidSubCampanhaFixa );
				xml->addItem("idCampanha", Registro(x)->cidCampanha );
				xml->addItem("inAtiva", Registro(x)->cinAtiva );
				xml->addItem("inDisponibilidade", Registro(x)->cinDisponibilidade );
			}
			xml->closeTag();
		}
	}
}



int CSubCampanhaFixa::ProcuraNome( char* cnmSubCampanhaFixa, char* cidCampanha )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		int   iCont = 0;
		char* cAuxnmSubCampanhaFixa = cnmSubCampanhaFixa;
		char* cAuxidCampanha = cidCampanha;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoProcuraNome;
	sqlca.sqlcode=0;

   	EXEC SQL
	SELECT 
		COUNT(1)
	INTO
		:iCont
	FROM 
		CAMPANHA.SUBCAMPANHAFIXA
	WHERE
		UPPER(NMSUBCAMPANHAFIXA) = UPPER(TRIM(:cAuxnmSubCampanhaFixa))
	AND 
		IDCAMPANHA=:cAuxidCampanha;

	return iCont;

GotoProcuraNome:
	throw TuxBasicOraException(sqlca.sqlcode);

}