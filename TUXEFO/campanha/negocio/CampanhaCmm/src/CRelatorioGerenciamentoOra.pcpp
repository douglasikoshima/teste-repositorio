///////////////////////////////////////////////////////////////////////////////////////////
// CRelatorioGerenciamento.cpp: CRelatorioGerenciamento class.
///////////////////////////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include<sqlca.h>
#include<sqlda.h>

#include <CTipoMotivoCampanha.h>
#include <SRelatorioCampanha.h>
#include <CRelatorioCampanha.h>
#include <CRelatorioGerenciamento.h>
#include <CGetHeader.h>


#define endOraStr(varstr)      varstr.arr[varstr.len]= '\0'
#define oraToStr(bstr,vchar)   if(!bstr) strncpy(bstr,vchar.arr,vchar.len)


// Monta o relatório
void CRelatorioGerenciamento::montaRelatorio(struct SRelatorioCampanha* sRelatorioCampanha, XMLGen* xml_g) 
{ 
	int iQtdReg = 0;
	CTipoMotivoCampanha oTipoMotivoCampanha;

	xml_g->createTag("CampanhaRelatorioVO");
	xml_g->addProp("xmlns","campanha.fo.vivo.com.br/vo");

	CGetHeader Header(sRelatorioCampanha, xml_g);
	Header.Executar(); 

	iQtdReg = GraficoAuxiliarPercentual( sRelatorioCampanha, xml_g );

	xml_g->addItem("total", iQtdReg); 

	xml_g->closeTag();	
}


int CRelatorioGerenciamento::GraficoAuxiliarPercentual( struct SRelatorioCampanha* sRelatorioCampanha,
		                                                 XMLGen* xgOut )
{

	int iQtdReg = 0;
	struct	sqlca sqlca;
	char szDesc[1024]; szDesc[0] = '\0';
	char szValor[1024]; szValor[0] = '\0';


	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR oszSgTipoMotivoCampanha    [300+1];//Esta variavel esta maior porque eh concatenada com caracteres a mais
		VARCHAR oszIdPessoa				   [255+1];
		VARCHAR oszIdCanalCampanha		   [255+1];
		VARCHAR oszDtInicio				   [255+1];
		VARCHAR oszDtFim				   [255+1];
		VARCHAR oszIdSubCampanhaHistorico  [255+1];
		VARCHAR oszIdUfOperadora		   [255+1];
		VARCHAR oszIdGrupo				   [255+1];

		VARCHAR oszNmOperador			   [255+1];

		int iPublicoTotal = 0;
		int iMetaDiariaOperador = 0;
		int iMetaDiariaCampanha = 0;
		int iQtdeEfetivos = 0;
		float fTMAMedio = 0.0;
		float fTMA = 0.0;
		float fTMADevPadrao = 0.0;
		
		int iIdMotivo = 0;
		int iQtde = 0;

		int iQtdeSubMotivo = 0;
		int	iIdPessoaUsuario = -1;
		int	iMetaDiaria = 0;

		int iQtdeFaltam = 0;

		int iQtdeMotivo = 0;
		int iAderiram = 0;
		int iNAderiram = 0;
		int iReagendaram = 0;
		float fReagendaram = 0.0;
		int iVaoAvaliar = 0;
	EXEC SQL END DECLARE SECTION;

	
	//------------------------------------------------------------------------------------------------------				
	// Monta o xml de saida

	CGetHeader Header(sRelatorioCampanha, xgOut);

	if( Header.Executar() > 0 )
	{

		// Carrega as variaveis para filtro	

		STRCPY_TO_ORA( oszIdPessoa,					sRelatorioCampanha->pcsgOperador		); 
		STRCPY_TO_ORA( oszIdCanalCampanha,			sRelatorioCampanha->pcidCanalCampanha	); 
		STRCPY_TO_ORA( oszDtInicio,					sRelatorioCampanha->pcdtInicio			); 
		STRCPY_TO_ORA( oszDtFim,					sRelatorioCampanha->pcdtFim				); 
		STRCPY_TO_ORA( oszIdSubCampanhaHistorico,	sRelatorioCampanha->pcidSubCampanha		); 
		STRCPY_TO_ORA( oszIdUfOperadora,			sRelatorioCampanha->pcidRegional		);
		STRCPY_TO_ORA( oszNmOperador,				sRelatorioCampanha->pcnmOperador		);
		STRCPY_TO_ORA( oszIdGrupo,					sRelatorioCampanha->pcidGrupo			);

		
//		endOraStr(oszIdPessoa);

		ULOGI("  --->login sRelatorioCampanha->pcnmOperador [%s]", sRelatorioCampanha->pcnmOperador); 
		ULOGI("  --->login oszNmOperador.arr [%s]", oszNmOperador.arr); 
		ULOGI("  --->login oszIdPessoa.arr [%s]", oszIdPessoa.arr); 
		
		
		//------------------------------------------------------------------------------------------------------				
		// Obtem o id do operador através do nome, caso tenha sido passado
		EXEC SQL WHENEVER SQLERROR GOTO endRelatorio;
		EXEC SQL WHENEVER NOT FOUND CONTINUE;


		// Verifica se o idgrupo foi passado e se esta na lista de grupos para esta campanha
		if( atoi(sRelatorioCampanha->pcidGrupo) > -1 ) 
		{
			EXEC SQL 
			SELECT
				COUNT(CG.IDGRUPO)
			INTO
				:iQtde
			FROM 
				CONTATOADM.SUBCAMPANHAGRUPOUSUARIO CG,
				CAMPANHA.SUBCAMPANHAHISTORICO		SUB
			WHERE
				SUB.IDSUBCAMPANHAHISTORICO = :oszIdSubCampanhaHistorico
				AND SUB.IDSUBCAMPANHAFIXA = CG.IDSUBCAMPANHAFIXA
				AND CG.IDGRUPO = :oszIdGrupo
				AND CG.INATIVO = 1;

			// Se este grupo não está na lista, então retorne como nenhum registro encontrado
			if( iQtde == 0 )
			{
				iQtdReg = 0;
				return iQtdReg;
			}
		}


		// Caso não exista um operador utilizaremos -1 para retornar todos os operadores
		if( strlen(sRelatorioCampanha->pcnmOperador) > 0 )
		{
			
			EXEC SQL
			SELECT
				USUARIO.IDPESSOAUSUARIO  
			INTO	
				:iIdPessoaUsuario
			FROM
				ACESSO.USUARIO USUARIO
			WHERE	
				USUARIO.NMLOGINUSUARIO = :oszNmOperador
				AND ROWNUM <= 1;

			// Se não encontramos um operador, retorna 0 em total
			if( iIdPessoaUsuario == -1 )
			{
				iQtdReg = 0;
				return iQtdReg;
			}

		}
		else
			iIdPessoaUsuario = -1;


		ULOGI("  ---> idUsuario %d", iIdPessoaUsuario); 



		//------------------------------------------------------------------------------------------------------				
		// PUBLICO TOTAL, META DIARIA, Contatos Efetivos, TMO por Usuário
		//
		EXEC SQL
		SELECT
				PARAM.NRPUBLICOTOTAL "PUBLICO TOTAL",
				PARAM.NRMETADIARIAOPERADOR "META DIARIA OPERADOR", 
				PARAM.NRMETADIARIACAMPANHA "META DIARIA CAMPANHA", 
				COUNT(DISTINCT(ATENCAMP.IDATENDIMENTOCAMPANHA)) "QTDE EFETIVOS",
				TRUNC(AVG(ATENCAMP.QTTEMPOATENDIMENTO), 2) "TMO/TMA MEDIO",
				//TRUNC(STDDEV(ATENCAMP.QTTEMPOATENDIMENTO), 2) "DESVIO PADRAO TMA",
				TRUNC(AVG(ATENCAMP.QTTEMPOATENDIMENTO), 2) "DESVIO PADRAO TMA",
				(PARAM.NRTEMPOMEDIOCONTATO * 60) "TMA (seg)"
		INTO
				:iPublicoTotal,
				:iMetaDiariaOperador,
				:iMetaDiariaCampanha,
				:iQtdeEfetivos,
				:fTMAMedio,
				:fTMADevPadrao,
				:fTMA
		FROM   
				CAMPANHA.ATENDIMENTOCAMPANHA	ATENCAMP,
				CAMPANHA.MOTIVOCAMPANHA			MOT,
				CAMPANHA.CANALCAMPANHA 			CANALCAMP,
				CAMPANHA.CANALUFOPERADORA		CANALUFOP,
				ACESSO.USUARIO					USUARIO,
				ACESSO.USUARIOGRUPO				USUARIOGRUPO,
				ACESSO.GRUPO					GRUPO,
				CAMPANHA.PARAMETRIZACAOCAMPANHA PARAM
		WHERE  
				ATENCAMP.IDMOTIVOCAMPANHA = MOT.IDMOTIVOCAMPANHA
				AND	MOT.IDSUBCAMPANHAHISTORICO = :oszIdSubCampanhaHistorico
				AND CANALCAMP.IDSUBCAMPANHAHISTORICO = MOT.IDSUBCAMPANHAHISTORICO
				AND CANALCAMP.IDCANALCAMPANHA    = :oszIdCanalCampanha
				AND CANALUFOP.IDCANALUFOPERADORA = CANALCAMP.IDCANALUFOPERADORA
				AND ( CANALUFOP.IDUFOPERADORA    = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
				AND ATENCAMP.IDCANALCAMPANHA     = CANALCAMP.IDCANALCAMPANHA
				AND ATENCAMP.IDMOTIVOCAMPANHA    = MOT.IDMOTIVOCAMPANHA
				AND USUARIO.IDPESSOAUSUARIO		 = ATENCAMP.IDUSUARIOALTERACAO
				AND ( USUARIO.IDPESSOAUSUARIO	 = :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
				AND USUARIO.IDPESSOAUSUARIO		 = USUARIOGRUPO.IDPESSOAUSUARIO
				AND USUARIOGRUPO.IDGRUPO 		 = GRUPO.IDGRUPO
 				AND ( GRUPO.IDGRUPO 			 = :oszIdGrupo OR -1 = :oszIdGrupo )
				AND PARAM.IDCANALCAMPANHA		 = CANALCAMP.IDCANALCAMPANHA 
				AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' )
		GROUP BY
				PARAM.NRPUBLICOTOTAL,
				PARAM.NRMETADIARIAOPERADOR,
				PARAM.NRMETADIARIACAMPANHA,
				PARAM.NRTEMPOMEDIOCONTATO;





		//------------------------------------------------------------------------------------------------------				
		// Clientes Aderiram
		EXEC SQL
		SELECT 
				COUNT(DISTINCT(ATENCAMP.IDATENDIMENTOCAMPANHA))
		INTO	
			  :iAderiram
		FROM   
			   CAMPANHA.ATENDIMENTOCAMPANHA	ATENCAMP,
			   CAMPANHA.MOTIVOCAMPANHA		MOT,
			   CAMPANHA.CANALCAMPANHA 		CANALCAMP,
			   CAMPANHA.CANALUFOPERADORA	CANALUFOP,
			   ACESSO.USUARIOGRUPO			USUARIOGRUPO,
			   APOIO.TIPOSTATUSCAMPANHA		TPSTATUSCAMP,
               APOIO.TIPOMOTIVOCAMPANHA 	TIP
		WHERE  
				ATENCAMP.IDMOTIVOCAMPANHA = MOT.IDMOTIVOCAMPANHA
				AND	MOT.IDSUBCAMPANHAHISTORICO =:oszIdSubCampanhaHistorico
				AND MOT.IDTIPOSTATUSCAMPANHA          = TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA
				AND TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA = 2
				AND TIP.IDTIPOMOTIVOCAMPANHA   = MOT.IDTIPOMOTIVOCAMPANHA 
				AND TIP.INADERIU = 1
				AND CANALCAMP.IDSUBCAMPANHAHISTORICO = MOT.IDSUBCAMPANHAHISTORICO
				AND CANALCAMP.IDCANALCAMPANHA    = :oszIdCanalCampanha
				AND CANALUFOP.IDCANALUFOPERADORA = CANALCAMP.IDCANALUFOPERADORA
				AND ( CANALUFOP.IDUFOPERADORA    = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
				AND ATENCAMP.IDCANALCAMPANHA     = CANALCAMP.IDCANALCAMPANHA
				AND ATENCAMP.IDMOTIVOCAMPANHA    = MOT.IDMOTIVOCAMPANHA
				AND ( ATENCAMP.IDUSUARIOALTERACAO= :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
				AND ATENCAMP.IDUSUARIOALTERACAO  = USUARIOGRUPO.IDPESSOAUSUARIO
				AND ( USUARIOGRUPO.IDGRUPO	   	 = :oszIdGrupo OR -1 = :oszIdGrupo )
				AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' );



		//------------------------------------------------------------------------------------------------------				
		// Clientes NÃO Aderiram
		EXEC SQL
		SELECT 
				COUNT(DISTINCT(ATENCAMP.IDATENDIMENTOCAMPANHA))
		INTO	
			  :iNAderiram
		FROM   
			   CAMPANHA.ATENDIMENTOCAMPANHA	ATENCAMP,
			   CAMPANHA.MOTIVOCAMPANHA		MOT,
			   CAMPANHA.CANALCAMPANHA 		CANALCAMP,
			   CAMPANHA.CANALUFOPERADORA	CANALUFOP,
			   ACESSO.USUARIOGRUPO			USUARIOGRUPO,
			   APOIO.TIPOSTATUSCAMPANHA		TPSTATUSCAMP,
               APOIO.TIPOMOTIVOCAMPANHA 	TIP
		WHERE  
				ATENCAMP.IDMOTIVOCAMPANHA = MOT.IDMOTIVOCAMPANHA
				AND	MOT.IDSUBCAMPANHAHISTORICO =:oszIdSubCampanhaHistorico
				AND MOT.IDTIPOSTATUSCAMPANHA          = TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA
				AND TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA = 2
				AND TIP.IDTIPOMOTIVOCAMPANHA   = MOT.IDTIPOMOTIVOCAMPANHA 
				AND TIP.INADERIU = 0
				AND CANALCAMP.IDSUBCAMPANHAHISTORICO = MOT.IDSUBCAMPANHAHISTORICO
				AND CANALCAMP.IDCANALCAMPANHA    = :oszIdCanalCampanha
				AND CANALUFOP.IDCANALUFOPERADORA = CANALCAMP.IDCANALUFOPERADORA
				AND ( CANALUFOP.IDUFOPERADORA    = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
				AND ATENCAMP.IDCANALCAMPANHA     = CANALCAMP.IDCANALCAMPANHA
				AND ATENCAMP.IDMOTIVOCAMPANHA    = MOT.IDMOTIVOCAMPANHA
				AND ATENCAMP.IDUSUARIOALTERACAO  = USUARIOGRUPO.IDPESSOAUSUARIO
				AND ( USUARIOGRUPO.IDGRUPO	   	 = :oszIdGrupo OR -1 = :oszIdGrupo )
				AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' );



		
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		//------------------------------------------------------------------------------------------------------				
		//Contatos que vão Avaliar
		ULOGI("  --->Contatos que vão Avaliar"); 
		EXEC SQL	
		SELECT	
				COUNT(DISTINCT(ATENCAMP.IDATENDIMENTOCAMPANHA)) QTDE
		INTO 
				:iVaoAvaliar
		FROM	
			   CAMPANHA.ATENDIMENTOCAMPANHA	ATENCAMP,
			   CAMPANHA.MOTIVOCAMPANHA		MOT,
			   CAMPANHA.CANALCAMPANHA 		CANALCAMP,
			   CAMPANHA.CANALUFOPERADORA	CANALUFOP,
			   ACESSO.USUARIOGRUPO			USUARIOGRUPO,
			   APOIO.TIPOSTATUSCAMPANHA		TPSTATUSCAMP
		WHERE	
				ATENCAMP.IDMOTIVOCAMPANHA = MOT.IDMOTIVOCAMPANHA
				AND	MOT.IDSUBCAMPANHAHISTORICO        =:oszIdSubCampanhaHistorico
				AND MOT.IDTIPOSTATUSCAMPANHA          = TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA
				AND TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA = 3
				AND CANALCAMP.IDSUBCAMPANHAHISTORICO  = MOT.IDSUBCAMPANHAHISTORICO
				AND CANALCAMP.IDCANALCAMPANHA    = :oszIdCanalCampanha
				AND CANALUFOP.IDCANALUFOPERADORA = CANALCAMP.IDCANALUFOPERADORA
				AND ( CANALUFOP.IDUFOPERADORA    = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
				AND ATENCAMP.IDCANALCAMPANHA     = CANALCAMP.IDCANALCAMPANHA
				AND ATENCAMP.IDMOTIVOCAMPANHA    = MOT.IDMOTIVOCAMPANHA
				AND ( ATENCAMP.IDUSUARIOALTERACAO= :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
				AND ATENCAMP.IDUSUARIOALTERACAO  = USUARIOGRUPO.IDPESSOAUSUARIO
				AND ( USUARIOGRUPO.IDGRUPO	   	 = :oszIdGrupo OR -1 = :oszIdGrupo )
				AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' );



		//------------------------------------------------------------------------------------------------------				
		// Reagendados	
		EXEC SQL
		SELECT	COUNT(DISTINCT(ATENCAMP.IDMOTIVOCAMPANHA))
		INTO
			  :iReagendaram
		FROM	
			   CAMPANHA.ATENDIMENTOCAMPANHA	ATENCAMP,
			   CAMPANHA.MOTIVOCAMPANHA		MOT,
			   CAMPANHA.CANALCAMPANHA 		CANALCAMP,
			   CAMPANHA.CANALUFOPERADORA	CANALUFOP,
			   ACESSO.USUARIOGRUPO			USUARIOGRUPO,
			   APOIO.TIPOSTATUSCAMPANHA		TPSTATUSCAMP
		WHERE	
				ATENCAMP.IDMOTIVOCAMPANHA = MOT.IDMOTIVOCAMPANHA
				AND	MOT.IDSUBCAMPANHAHISTORICO        =:oszIdSubCampanhaHistorico
				AND MOT.IDTIPOSTATUSCAMPANHA          = TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA
				AND TPSTATUSCAMP.IDTIPOSTATUSCAMPANHA = 1
				AND CANALCAMP.IDSUBCAMPANHAHISTORICO  = MOT.IDSUBCAMPANHAHISTORICO
				AND CANALCAMP.IDCANALCAMPANHA    = :oszIdCanalCampanha
				AND CANALUFOP.IDCANALUFOPERADORA = CANALCAMP.IDCANALUFOPERADORA
				AND ( CANALUFOP.IDUFOPERADORA    = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
				AND ATENCAMP.IDCANALCAMPANHA     = CANALCAMP.IDCANALCAMPANHA
				AND ATENCAMP.IDMOTIVOCAMPANHA    = MOT.IDMOTIVOCAMPANHA
				AND ( ATENCAMP.IDUSUARIOALTERACAO= :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
				AND ATENCAMP.IDUSUARIOALTERACAO  = USUARIOGRUPO.IDPESSOAUSUARIO
				AND ( USUARIOGRUPO.IDGRUPO	   	 = :oszIdGrupo OR -1 = :oszIdGrupo )
				AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' );




		//------------------------------------------------------------------------------------------------------				
		//Monta o XML de saída
		sprintf(szValor, "%d", iAderiram);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Adesões:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		xgOut->createTag("grafico");
			xgOut->addItem("descricao", "Adesões:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		sprintf(szValor, "%d", iNAderiram);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Não Adesões:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		xgOut->createTag("grafico");
			xgOut->addItem("descricao", "Não Adesões:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		

		sprintf(szValor, "%d", iReagendaram);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Reagendamentos:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		xgOut->createTag("grafico");
			xgOut->addItem("descricao", "Reagendamentos:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();

		// Quantos faltam
//		iQtdeFaltam = iQtdeEfetivos - iAderiram;
		iQtdeFaltam = (iMetaDiariaCampanha == 0) ? 0 : (iMetaDiariaCampanha - iAderiram);
		iQtdeFaltam = (iQtdeFaltam > 0) ? iQtdeFaltam : 0;
		sprintf(szValor, "%d", iQtdeFaltam);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Qtos. Faltam" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		
		fReagendaram = (iQtdeEfetivos == 0) ? 0 : ( (float)iReagendaram/(float)iQtdeEfetivos ) * 100.0;
		sprintf(szValor, "%0.2f%%", fReagendaram);

		//Contatos que EFETIVOS
		sprintf(szValor, "%d", iQtdeEfetivos);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos Efetivos:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
		xgOut->createTag("grafico");
			xgOut->addItem("descricao", "Contatos Efetivos:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		sprintf(szValor, "%d", iVaoAvaliar);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos Vão Pensar:" );
			xgOut->addItem("valor", szValor); 
		xgOut->closeTag();
		xgOut->createTag("grafico");
			xgOut->addItem("descricao", "Contatos Vão Pensar:" );
			xgOut->addItem("valor", szValor); 
		xgOut->closeTag();


		ULOGI("  --->Contagem dos Motivos"); 
		//------------------------------------------------------------------------------------------------------				
		// Sumariza os motivos
		EXEC SQL DECLARE RelEfe1 CURSOR for
		SELECT
			  'Nº Contatos com o Motivo: "'||TIP.SGTIPOMOTIVOCAMPANHA||'"',
			   COUNT(DISTINCT(ATENCAMP.IDATENDIMENTOCAMPANHA)) as QTDE
		FROM 
				CAMPANHA.MOTIVOCAMPANHA 	   	  MOT,
                CAMPANHA.SUBCAMPANHAHISTORICO 	  SUB,
                APOIO.TIPOMOTIVOCAMPANHA 		  TIP,
				CAMPANHA.CANALCAMPANHA 			  CANALCAMP,
				CAMPANHA.CANALUFOPERADORA		  CANALUFOP,
				ACESSO.USUARIOGRUPO				  USUARIOGRUPO,
				CAMPANHA.ATENDIMENTOCAMPANHA	  ATENCAMP
		WHERE 
              SUB.IDSUBCAMPANHAHISTORICO		= :oszIdSubCampanhaHistorico
			  AND SUB.IDSUBCAMPANHAHISTORICO	= MOT.IDSUBCAMPANHAHISTORICO
        	  AND TIP.IDTIPOMOTIVOCAMPANHA		= MOT.IDTIPOMOTIVOCAMPANHA
			  AND CANALCAMP.IDSUBCAMPANHAHISTORICO = SUB.IDSUBCAMPANHAHISTORICO
			  AND CANALCAMP.IDCANALCAMPANHA      = :oszIdCanalCampanha
			  AND CANALUFOP.IDCANALUFOPERADORA   = CANALCAMP.IDCANALUFOPERADORA
			  AND ( CANALUFOP.IDUFOPERADORA      = :oszIdUfOperadora OR -1 = :oszIdUfOperadora )
			  AND ATENCAMP.IDCANALCAMPANHA       = CANALCAMP.IDCANALCAMPANHA
			  AND ATENCAMP.IDMOTIVOCAMPANHA      = MOT.IDMOTIVOCAMPANHA
			  AND ATENCAMP.IDUSUARIOALTERACAO    = USUARIOGRUPO.IDPESSOAUSUARIO
			  AND ( USUARIOGRUPO.IDPESSOAUSUARIO = :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
			  AND ( USUARIOGRUPO.IDGRUPO	     = :oszIdGrupo OR -1 = :oszIdGrupo )
			  AND TRUNC( ATENCAMP.DTATENDIMENTO	) BETWEEN TO_DATE(:oszDtInicio, 'DD/MM/YYYY' ) AND TO_DATE(:oszDtFim, 'DD/MM/YYYY' )
	    GROUP BY 
			  TIP.SGTIPOMOTIVOCAMPANHA
		ORDER BY 
			  UPPER(TRIM(1));


		EXEC SQL OPEN RelEfe1;
		EXEC SQL WHENEVER NOT FOUND DO break;
		for(;;)
		{
			EXEC SQL FETCH RelEfe1 INTO
				:oszSgTipoMotivoCampanha,
				:iQtdeMotivo;

			STRCPY_FROM_ORA(szDesc, oszSgTipoMotivoCampanha );
			sprintf(szValor, "%d", iQtdeMotivo);

			xgOut->createTag("numerico");
				xgOut->addItem("descricao", szDesc);
				xgOut->addItem("valor", szValor);
			xgOut->closeTag();
			iQtdReg++;
		}
		EXEC SQL CLOSE RelEfe1;
		
		// Extrai os segundos e milésimos
		float fSegundos = (fTMADevPadrao/60.0) - ( (int)(fTMADevPadrao/60.0) );
		fSegundos = fSegundos * 60;
		sprintf(szValor, "%d:%02d", ( (int)(fTMADevPadrao/60) ), (int)fSegundos);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Desvio padrão do TMA (min:seg):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		sprintf(szValor, "%d", iMetaDiariaCampanha);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Meta Diaria Campanha:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();

		
		sprintf(szValor, "%d", iPublicoTotal);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Publico Total:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();
				
		// Calculo quantos faltam para a meta da campanha
//		float fQtdeFaltamMeta = (iPublicoTotal == 0) ? 0 : ( (float)iMetaDiariaCampanha/(float)iPublicoTotal );
//		fQtdeFaltamMeta = ( (float)iQtdeEfetivos * fQtdeFaltamMeta ) - iAderiram;

		float fQtdeFaltamMeta = (iPublicoTotal == 0) ? 0 : ( iPublicoTotal - iAderiram );
		fQtdeFaltamMeta = (fQtdeFaltamMeta > 0) ? fQtdeFaltamMeta : 0;
		sprintf(szValor, "%d", (int)fQtdeFaltamMeta);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Quantos Contatos Faltam para a Meta:" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();

		fSegundos = (fTMA/60) - ( (int)(fTMA/60) );
		fSegundos = fSegundos * 60;
		sprintf(szValor, "%d:%02d", ( (int)(fTMA/60) ), (int)fSegundos);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "TMA da Campanha (min:seg):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		fSegundos = (fTMAMedio/60) - ( (int)(fTMAMedio/60) );
		fSegundos = fSegundos * 60;
		sprintf(szValor, "%d:%02d", ( (int)(fTMAMedio/60) ), (int)fSegundos);
		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "TMA Médio da Campanha (min:seg):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		//Dados percentuais
		float fPercTMA = (fTMA == 0) ? 0 : ( fTMA/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("porcentagem");
			xgOut->addItem("descricao", "TMA da Campanha (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();

		
		fPercTMA = (fTMA == 0) ? 0 : ( fTMAMedio/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("porcentagem");
			xgOut->addItem("descricao", "TMA médio (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		fPercTMA = (fTMA == 0) ? 0 : ( fTMADevPadrao/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("porcentagem");
			xgOut->addItem("descricao", "Desvio padrão do TMA (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		//Dados do grafico auxiliar	
		fPercTMA = (fTMA == 0) ? 0 : ( fTMA/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("graficoAuxiliar");
			xgOut->addItem("descricao", "TMA da Campanha (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();

		
		fPercTMA = (fTMA == 0) ? 0 : ( fTMAMedio/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("graficoAuxiliar");
			xgOut->addItem("descricao", "TMA médio (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		fPercTMA = (fTMA == 0) ? 0 : ( fTMADevPadrao/fTMA ) * 100;
		sprintf(szValor, "%0.2f", fPercTMA);
		xgOut->createTag("graficoAuxiliar");
			xgOut->addItem("descricao", "Desvio padrão do TMA (%):" );
			xgOut->addItem("valor", szValor ); 
		xgOut->closeTag();


		// Numero de TAGs "numerico" inseridas no XML
		iQtdReg += 13;

	}
	else
	{
		iQtdReg = 0;
	}

	return iQtdReg;

endRelatorio:
	//throw TuxBasicOraException(sqlca.sqlcode);
	ULOGI("  ---> erro %s - ", "Erro proveniente do Pro*C/C++!!!") ;
	iQtdReg = 0;
	return iQtdReg;
}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//Recupera o tempo medio da tabela de parametrizacao
/*	EXEC SQL
	SELECT 
		ROUND(PARAMETRIZACAOCAMPANHA.NRTEMPOMEDIOCONTATO, 2) TEMPOMEDIO,
        PARAMETRIZACAOCAMPANHA.NRMETADIARIACAMPANHA*(TO_DATE(:pcdtFim,'DD/MM/YYYY')-TO_DATE(:pcdtInicio,'DD/MM/YYYY')) METAPORPERIODO
	INTO
		:stRegistro.stTempoMedio:stIndicator.iTempoMedio,
		:stRegistro.stMetaPorPeriodo:stIndicator.iMetaPorPeriodo
	FROM 
		CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
		CAMPANHA.PARAMETRIZACAOCAMPANHA PARAMETRIZACAOCAMPANHA
	WHERE
		CANALCAMPANHA.IDCANALCAMPANHA = PARAMETRIZACAOCAMPANHA.IDCANALCAMPANHA
	AND
		CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
	AND
		CANALCAMPANHA.IDSUBCAMPANHAHISTORICO = :pcidSubCampanha; */


/*	tuxfw_getlogger()->information("  --->Recupera a media e o desvio padrao"); 
	//Recupera a media e o desvio padrao
	//Realiza um decode quando stRegistro.stMetaPorPeriodo for = 0
	EXEC SQL
	SELECT
		ROUND(DECODE( SOMATORIA, NULL, 0, SOMATORIA ),2) SOMATORIA,
		ROUND(DECODE( MEDIA, NULL, 0, MEDIA ),2) MEDIA,
		ROUND(DECODE( DESVIOPADRAO, NULL, 0, DESVIOPADRAO ),2) DESVIOPADRAO,
		REGISTROS,
        DECODE( SIGN(:stRegistro.stMetaPorPeriodo-REGISTROS), -1, 0, :stRegistro.stMetaPorPeriodo-REGISTROS ) FALTANTES,
        ROUND(DECODE( SIGN(:stRegistro.stMetaPorPeriodo-REGISTROS), -1, 0, (:stRegistro.stMetaPorPeriodo-REGISTROS) / DECODE(:stRegistro.stMetaPorPeriodo, 0, 0.0000001, :stRegistro.stMetaPorPeriodo) * 100), 2 ) FALTANTESPERCENTUAL
	INTO
		:stRegistro.stSomatoria:stIndicator.iSomatoria,
		:stRegistro.stMedia:stIndicator.iMedia,
		:stRegistro.stDesvioPadrao:stIndicator.iDesvioPadrao,
		:stRegistro.stRegistros:stIndicator.iRegistros,
		:stRegistro.stFaltantes:stIndicator.iFaltantes,
		:stRegistro.stFaltantesPercentual:stIndicator.iFaltantesPercentual
	FROM
		(
		SELECT 
			SUM(ATENDIMENTOCAMPANHA.QTTEMPOATENDIMENTO) SOMATORIA,
			AVG(ATENDIMENTOCAMPANHA.QTTEMPOATENDIMENTO) MEDIA,
			STDDEV( ATENDIMENTOCAMPANHA.QTTEMPOATENDIMENTO ) DESVIOPADRAO,
			COUNT(1) REGISTROS
		FROM
			CAMPANHA.CANALCAMPANHA 				 CANALCAMPANHA,
			CAMPANHA.CANALUFOPERADORA			 CANALUFOP,
			CAMPANHA.ATENDIMENTOCAMPANHA 		 ATENDIMENTOCAMPANHA
		WHERE
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND
			CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
		AND
			CANALCAMPANHA.IDSUBCAMPANHAHISTORICO = :pcidSubCampanha
		AND 
			CANALUFOP.IDCANALUFOPERADORA = CANALCAMPANHA.IDCANALUFOPERADORA
		AND 
			( CANALUFOP.IDUFOPERADORA    = :pcidRegional OR -1 = :pcidRegional )
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:pcdtInicio,'DD/MM/YYYY') 
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:pcdtFim,'DD/MM/YYYY')
		AND 
			( ATENDIMENTOCAMPANHA.IDUSUARIOALTERACAO = :iIdPessoaUsuario OR -1 = :iIdPessoaUsuario )
		AND 
			ATENDIMENTOCAMPANHA.IDUSUARIOALTERACAO  = 
			(
			   SELECT USUARIOGRUPO.IDPESSOAUSUARIO
			   FROM	  ACESSO.USUARIOGRUPO USUARIOGRUPO
			   WHERE  USUARIOGRUPO.IDPESSOAUSUARIO = ATENDIMENTOCAMPANHA.IDUSUARIOALTERACAO
			   		  AND ( USUARIOGRUPO.IDGRUPO   = :pcidGrupo OR -1 = :pcidGrupo )
					  AND ROWNUM <= 1
			)
	);	*/





/*		tuxfw_getlogger()->information("  --->Contatos com motivo chamada"); 
		//Contatos com motivo chamada
		EXEC SQL	
		SELECT 
			COUNT(1) NAOADERIU
		INTO 
			:iVAOAVALIAR
		FROM
			CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
			CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
			CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
			APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA
		WHERE
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND
			ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDMOTIVOCAMPANHA
		AND
			MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND
			UPPER(TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA) = 'CHAMADA'
		AND
			CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:pcdtInicio,'DD/MM/YYYY') 
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:pcdtFim,'DD/MM/YYYY');

		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos com motivo Chamada:" );
			xgOut->addItem("valor", iVAOAVALIAR); 
		xgOut->closeTag();

		tuxfw_getlogger()->information("  --->Contatos com ligacao caida"); 
		//Contatos com ligacao caida
		EXEC SQL	
		SELECT 
			COUNT(1) NAOADERIU
		INTO 
			:iVAOAVALIAR
		FROM
			CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
			CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
			CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
			APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA
		WHERE
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND
			ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDMOTIVOCAMPANHA
		AND
			MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND
			UPPER(TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA) = 'LIGAÇÃO CAÍDA'
		AND
			CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:pcdtInicio,'DD/MM/YYYY') 
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:pcdtFim,'DD/MM/YYYY');

		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos com Ligação caída:" );
			xgOut->addItem("valor", iVAOAVALIAR); 
		xgOut->closeTag();

		tuxfw_getlogger()->information("  --->Contatos com Sistema Inoperante"); 
		//Contatos com Sistema Inoperante
		EXEC SQL	
		SELECT 
			COUNT(1) NAOADERIU
		INTO 
			:iVAOAVALIAR
		FROM
			CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
			CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
			CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
			APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA
		WHERE
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND
			ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDMOTIVOCAMPANHA
		AND
			MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND
			UPPER(TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA) = 'SISTEMA INOPERANTE'
		AND
			CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:pcdtInicio,'DD/MM/YYYY') 
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:pcdtFim,'DD/MM/YYYY');

		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos com Sistema inoperante:" );
			xgOut->addItem("valor", iVAOAVALIAR); 
		xgOut->closeTag();

		tuxfw_getlogger()->information("  --->Contatos com Transferência Indevida"); 
		//Contatos com Transferência Indevida
		EXEC SQL	
		SELECT 
			COUNT(1) NAOADERIU
		INTO 
			:iVAOAVALIAR
		FROM
			CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
			CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
			CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
			APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA
		WHERE
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND
			ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDMOTIVOCAMPANHA
		AND
			MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND
			UPPER(TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA) = 'TRANSFERÊNCIA INDEVIDA'
		AND
			CANALCAMPANHA.IDCANALCAMPANHA = :pcidCanalCampanha
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:pcdtInicio,'DD/MM/YYYY') 
		AND
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:pcdtFim,'DD/MM/YYYY');

		xgOut->createTag("numerico");
			xgOut->addItem("descricao", "Contatos com Transferência indevida:" );
			xgOut->addItem("valor", iVAOAVALIAR); 
		xgOut->closeTag();

*/
