#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CSubCampanhaHistorico.h>

CSubCampanhaHistorico::CSubCampanhaHistorico()
{
}

CSubCampanhaHistorico::~CSubCampanhaHistorico()
{
}

int CSubCampanhaHistorico::Insert(  char* cidSubCampanhaFixa, 
									char* cdsScriptSubCampanha, 
									char* cinClienteTelefonica, 
									char* cqtMaximaAgenda,
									char* cdtInicio,
								    char* cdtTermino,
								    char* csqVersao,
									char* cinReincidente,
									char* cidTipoCampanha,
									char* sqApresentacao,
									char* cidUser,
									char* cdsNmSubCampanha )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidSubCampanhaHistorico[21+1];
		char* cAuxidSubCampanhaFixa = cidSubCampanhaFixa;
		char* cAuxdsScriptSubCampanha = cdsScriptSubCampanha;
		char* cAuxinClienteTelefonica = cinClienteTelefonica;
		char* cAuxqtMaximaAgenda = cqtMaximaAgenda;
		char* cAuxdtInicio = cdtInicio;
		char* cAuxdtTermino = cdtTermino;
		char* cAuxsqVersao = csqVersao;
		char* cAuxinReincidente = cinReincidente;
		char* cAuxidTipoCampanha = cidTipoCampanha;
		char* cAuxidUser = cidUser;
		char* cAuxsqApresentacao = sqApresentacao;
		char* cAuxdsNmSubCampanha= cdsNmSubCampanha;
	EXEC SQL END DECLARE SECTION;
	
	ZeraSubCampanhaHistorico();
	
	memset( &cAuxidSubCampanhaHistorico, 0, sizeof(cAuxidSubCampanhaHistorico) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
	sqlca.sqlcode=0;
	
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT CAMPANHA.SUBCAMPANHAHISTORICOSQ.NEXTVAL
		INTO :cAuxidSubCampanhaHistorico
		FROM DUAL;

	EXEC SQL 
		INSERT INTO CAMPANHA.SUBCAMPANHAHISTORICO
		  (	IDSUBCAMPANHAHISTORICO, 
			DSSCRIPTSUBCAMPANHA, 
			INCLIENTETELEFONICA, 
			QTMAXIMAAGENDA, 
			DTINICIO, 
			DTTERMINO, 
			SQVERSAO, 
			INREINCIDENTE, 
			IDTIPOCAMPANHA, 
			IDSUBCAMPANHAFIXA,			
			IDUSUARIOALTERACAO, 
			DTULTIMAALTERACAO, 
			SQAPRESENTACAO,
			NMSUBCAMPANHA,
			INATIVO)
		VALUES
		  (:cAuxidSubCampanhaHistorico, 
		   :cAuxdsScriptSubCampanha, 
		   :cAuxinClienteTelefonica, 
		   :cAuxqtMaximaAgenda, 
		   TO_DATE(:cAuxdtInicio, 'DD/MM/YYYY'), 
		   TO_DATE(:cAuxdtTermino, 'DD/MM/YYYY'), 
		   :cAuxsqVersao, 
		   :cAuxinReincidente, 
		   :cAuxidTipoCampanha, 
		   :cAuxidSubCampanhaFixa,
		   :cAuxidUser,
		   SYSDATE,
		   :cAuxsqApresentacao,
		   :cAuxdsNmSubCampanha,
		   1);

	return (1);

GotoInsert:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaHistorico::Insert(  char* cidSubCampanhaFixa, 
									char* cdsScriptSubCampanha, 
									char* cinClienteTelefonica, 
									char* cqtMaximaAgenda,
									char* cdtInicio,
								    char* cdtTermino,
					                char* csqVersao,
									char* cinReincidente,
									char* cidTipoCampanha,
									char* sqApresentacao,
									char* cidUser,
									char* cdsNmSubCampanha,
					                char* cinDisponibilidade )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidSubCampanhaHistorico[21+1];
		VARCHAR stsqApresentacao[21+1];
		char* cAuxidSubCampanhaFixa = cidSubCampanhaFixa;
		char* cAuxdsScriptSubCampanha = cdsScriptSubCampanha;
		char* cAuxinClienteTelefonica = cinClienteTelefonica;
		char* cAuxqtMaximaAgenda = cqtMaximaAgenda;
		char* cAuxdtInicio = cdtInicio;
		char* cAuxdtTermino = cdtTermino;
		char* cAuxinReincidente = cinReincidente;
		char* cAuxidTipoCampanha = cidTipoCampanha;
		char* cAuxidUser = cidUser;
		char* cAuxsqApresentacao = sqApresentacao;
		char* cAuxdsNmSubCampanha = cdsNmSubCampanha;
		char* cAuxinDisponibilidade = cinDisponibilidade;
		char* cAuxsqVersao = csqVersao;
	EXEC SQL END DECLARE SECTION;
	
	ZeraSubCampanhaHistorico();
	
	memset( &cAuxidSubCampanhaHistorico, 0, sizeof(cAuxidSubCampanhaHistorico) );
	memset( &stsqApresentacao, 0, sizeof(stsqApresentacao) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert2;
	sqlca.sqlcode=0;

	//Caso nao tenha recebida a sqApresentacao, entao recupera a maior
	if( strlennull( cAuxsqApresentacao ) <= 0 )
	{
		EXEC SQL 
			SELECT 
				MAX( SUBCAMPANHAHISTORICO.SQAPRESENTACAO )+1
			INTO 
				:stsqApresentacao 
			FROM 
				CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO;

		cAuxsqApresentacao = (char*)stsqApresentacao.arr;
	}
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT CAMPANHA.SUBCAMPANHAHISTORICOSQ.NEXTVAL
		INTO :cAuxidSubCampanhaHistorico
		FROM DUAL;

	EXEC SQL 
		INSERT INTO CAMPANHA.SUBCAMPANHAHISTORICO
		  (	IDSUBCAMPANHAHISTORICO, 
			DSSCRIPTSUBCAMPANHA, 
			INCLIENTETELEFONICA, 
			QTMAXIMAAGENDA, 
			DTINICIO, 
			DTTERMINO, 
			SQVERSAO, 
			INREINCIDENTE, 
			IDTIPOCAMPANHA, 
			IDSUBCAMPANHAFIXA,			
			IDUSUARIOALTERACAO, 
			DTULTIMAALTERACAO, 
			SQAPRESENTACAO,
			NMSUBCAMPANHA,
			INDISPONIBILIDADE,
			INATIVO
			)
		VALUES
		  (:cAuxidSubCampanhaHistorico, 
		   :cAuxdsScriptSubCampanha, 
		   :cAuxinClienteTelefonica, 
		   :cAuxqtMaximaAgenda, 
		   TO_DATE(:cAuxdtInicio, 'DD/MM/YYYY'), 
		   TO_DATE(:cAuxdtTermino, 'DD/MM/YYYY'), 
		   :cAuxsqVersao, 
		   :cAuxinReincidente, 
		   :cAuxidTipoCampanha, 
		   :cAuxidSubCampanhaFixa,
		   :cAuxidUser,
		   SYSDATE,
		   :cAuxsqApresentacao,
		   :cAuxdsNmSubCampanha,
		   :cAuxinDisponibilidade,
		   1);
		   
	Add( (char*)cAuxidSubCampanhaHistorico.arr, 
	     cAuxidSubCampanhaFixa,
	     cAuxdsScriptSubCampanha,
	     cAuxinClienteTelefonica,
	     cAuxqtMaximaAgenda,
	     cAuxdtInicio,
	     cAuxdtTermino,
	     cAuxsqVersao,
	     cAuxinReincidente,
	     cAuxidTipoCampanha,
		 cAuxsqApresentacao,
		 cAuxdsNmSubCampanha,
		 cAuxinDisponibilidade
	);

	return 1;

GotoInsert2:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaHistorico::Duplicar( char* cidSubCampanhaHistoricoOrigem, 
									 char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		int   iCont;
		char* cAuxidUser = cidUser;
		char* cAuxidSubCampanhaHistoricoOrigem = cidSubCampanhaHistoricoOrigem;
		struct
		{
			VARCHAR stidSubCampanhaHistorico[21+1];
			VARCHAR stidSubCampanhaFixa[21+1];
			VARCHAR stdsScriptSubCampanha[255+1];
			VARCHAR stinClienteTelefonica[21+1];
			VARCHAR stqtMaximaAgenda[21+1];
			VARCHAR stdtInicio[21+1];
			VARCHAR stdtTermino[21+1];
			VARCHAR stsqVersao[21+1];
			VARCHAR stinReincidente[21+1];
			VARCHAR stidTipoCampanha[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stnmSubCampanha[255+1];
			VARCHAR stinDisponibilidade[21+1];
		} stRegistro;
		struct
		{
			short iidSubCampanhaHistorico;
			short iidSubCampanhaFixa;
			short idsScriptSubCampanha;
			short iinClienteTelefonica;
			short iqtMaximaAgenda;
			short idtInicio;
			short idtTermino;
			short isqVersao;
			short iinReincidente;
			short iidTipoCampanha;
			short isqApresentacao;
			short inmSubCampanha;
			short iinDisponibilidade;
		} stIndicator;		
	EXEC SQL END DECLARE SECTION;
	
	ZeraSubCampanhaHistorico();
	
	memset( &stRegistro, 0, sizeof(stRegistro) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoDuplicar;
	sqlca.sqlcode=0;

	//Recupera o registro que sera copiado
	EXEC SQL 
		SELECT
			IDSUBCAMPANHAHISTORICO, 
			IDSUBCAMPANHAFIXA,			
			DSSCRIPTSUBCAMPANHA, 
			INCLIENTETELEFONICA, 
			QTMAXIMAAGENDA, 
			DTINICIO, 
			DTTERMINO, 
			SQVERSAO, 
			INREINCIDENTE, 
			IDTIPOCAMPANHA, 
			SQAPRESENTACAO,
			NMSUBCAMPANHA,
			INDISPONIBILIDADE
		INTO
			:stRegistro:stIndicator
		FROM
			CAMPANHA.SUBCAMPANHAHISTORICO
		WHERE
			IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaHistoricoOrigem;

	//Recupera a ultima versao + 1
	EXEC SQL 
		SELECT
			MAX(SQVERSAO)+1 SQVERSAO
		INTO
			:stRegistro.stsqVersao:stIndicator.isqVersao
		FROM
			CAMPANHA.SUBCAMPANHAHISTORICO
		WHERE
			IDSUBCAMPANHAFIXA = :stRegistro.stidSubCampanhaFixa;

	//Pega um id unico de sequencia para a insercao
	memset( &stRegistro.stidSubCampanhaHistorico, 0, sizeof(stRegistro.stidSubCampanhaHistorico) );
	EXEC SQL
		SELECT CAMPANHA.SUBCAMPANHAHISTORICOSQ.NEXTVAL
		INTO :stRegistro.stidSubCampanhaHistorico
		FROM DUAL;

	//Insere na a subcampanha historico, ja faz update na versao
	EXEC SQL 
		INSERT INTO CAMPANHA.SUBCAMPANHAHISTORICO
		  (	IDSUBCAMPANHAHISTORICO, 
			DSSCRIPTSUBCAMPANHA, 
			INCLIENTETELEFONICA, 
			QTMAXIMAAGENDA, 
			DTINICIO, 
			DTTERMINO, 
			SQVERSAO, 
			INREINCIDENTE, 
			IDTIPOCAMPANHA, 
			IDSUBCAMPANHAFIXA,			
			SQAPRESENTACAO,
			NMSUBCAMPANHA,
			INDISPONIBILIDADE,
			IDUSUARIOALTERACAO, 
			DTULTIMAALTERACAO,
			INATIVO) 
		VALUES
		  (:stRegistro.stidSubCampanhaHistorico, 
		   :stRegistro.stdsScriptSubCampanha, 
		   :stRegistro.stinClienteTelefonica, 
		   :stRegistro.stqtMaximaAgenda, 
		   :stRegistro.stdtInicio, 
		   :stRegistro.stdtTermino, 
		   :stRegistro.stsqVersao,
		   :stRegistro.stinReincidente, 
		   :stRegistro.stidTipoCampanha, 
		   :stRegistro.stidSubCampanhaFixa,
		   :stRegistro.stsqApresentacao,
		   :stRegistro.stnmSubCampanha||' ('||TO_CHAR(:stRegistro.stsqVersao)||')',
		   :stRegistro.stinDisponibilidade,
		   :cAuxidUser,
		   SYSDATE,
		   1);
		   
	//Salva os dados internamente na classe
	Add( (char*)stRegistro.stidSubCampanhaHistorico.arr, 
	     (char*)stRegistro.stidSubCampanhaFixa.arr,
	     (char*)stRegistro.stdsScriptSubCampanha.arr,
	     (char*)stRegistro.stinClienteTelefonica.arr,
	     (char*)stRegistro.stqtMaximaAgenda.arr,
	     (char*)stRegistro.stdtInicio.arr,
	     (char*)stRegistro.stdtTermino.arr,
	     (char*)stRegistro.stsqVersao.arr,
	     (char*)stRegistro.stinReincidente.arr,
	     (char*)stRegistro.stidTipoCampanha.arr,
		 (char*)stRegistro.stsqApresentacao.arr,
		 (char*)stRegistro.stnmSubCampanha.arr,
		 (char*)stRegistro.stinDisponibilidade.arr
	);
	//Verifica se existe a subcampanha atual
	EXEC SQL
		SELECT 
			COUNT(1)
		INTO
			:iCont
		FROM
			CAMPANHA.SUBCAMPANHAATUAL
		WHERE
			IDSUBCAMPANHAFIXA = :stRegistro.stidSubCampanhaFixa;
			
	if( iCont <= 0 )
	{
		//Insere a subcampanha atual com o registro acima
		EXEC SQL
			INSERT INTO CAMPANHA.SUBCAMPANHAATUAL
			  (	IDSUBCAMPANHAHISTORICO, 
				IDSUBCAMPANHAFIXA,			
				IDUSUARIOALTERACAO, 
				DTULTIMAALTERACAO
			  )
			VALUES
			  (:stRegistro.stidSubCampanhaHistorico, 
			   :stRegistro.stidSubCampanhaFixa,
			   :cAuxidUser,
			   SYSDATE
			  );
	}
	else
	{
		//Atualiza a subcampanha atual com o registro acima
		EXEC SQL
			UPDATE 
				CAMPANHA.SUBCAMPANHAATUAL
			SET
				IDSUBCAMPANHAHISTORICO = :stRegistro.stidSubCampanhaHistorico,
				IDUSUARIOALTERACAO = :cAuxidUser,
				DTULTIMAALTERACAO = SYSDATE
			WHERE
				IDSUBCAMPANHAFIXA = :stRegistro.stidSubCampanhaFixa;
	}
		
	return 1;

GotoDuplicar:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaHistorico::Update( char* cidSubCampanhaHistorico, 
			                       char* cidSubCampanhaFixa, 
								   char* cdsScriptSubCampanha, 
								   char* cinClienteTelefonica, 
								   char* cqtMaximaAgenda,
								   char* cdtInicio,
								   char* cdtTermino,
								   char* csqVersao,
								   char* cinReincidente,
								   char* cidTipoCampanha,								   
								   char* sqApresentacao,
								   char* cidUser,
								   char* cdsNmSubCampanha )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaHistorico  = cidSubCampanhaHistorico;
		char* cAuxidSubCampanhaFixa  = cidSubCampanhaFixa;
		char* cAuxdsScriptSubCampanha  = cdsScriptSubCampanha;
		char* cAuxinClienteTelefonica  = cinClienteTelefonica;
		char* cAuxqtMaximaAgenda = cqtMaximaAgenda;
		char* cAuxdtInicio  = cdtInicio;
		char* cAuxdtTermino = cdtTermino;
		char* cAuxsqVersao     = csqVersao;
		char* cAuxinReincidente = cinReincidente;
		char* cAuxidTipoCampanha = cidTipoCampanha;
		
		char* cAuxidUser = cidUser;
		char* cAuxsqApresentacao = sqApresentacao;
		char* cAuxdsNmSubCampanha= cdsNmSubCampanha;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaHistorico();
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
	sqlca.sqlcode=0;
	
	EXEC SQL 
		UPDATE CAMPANHA.SUBCAMPANHAHISTORICO
		   SET	DSSCRIPTSUBCAMPANHA = :cAuxdsScriptSubCampanha,
				INCLIENTETELEFONICA = :cAuxinClienteTelefonica,
				QTMAXIMAAGENDA = :cAuxqtMaximaAgenda,
				DTINICIO = :cAuxdtInicio,
				DTTERMINO = :cAuxdtInicio,
				SQVERSAO = :cAuxsqVersao,
				INREINCIDENTE = :cAuxinReincidente,
				IDTIPOCAMPANHA = :cAuxidTipoCampanha,
				IDSUBCAMPANHAFIXA = :cAuxidSubCampanhaFixa,
				IDUSUARIOALTERACAO = :cAuxidUser,
				DTULTIMAALTERACAO =	sysdate,
				sqApresentacao = :cAuxsqApresentacao,
				NMSUBCAMPANHA = :cAuxdsNmSubCampanha,
				INATIVO = 1
		 WHERE IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaHistorico;  
	
	return 1;

GotoUpdate:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CSubCampanhaHistorico::UpdateNome(	char* cdsNmSubCampanha,
					                    char* cidSubCampanhaFixa,
					                    char* cidUser)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaFixa  = cidSubCampanhaFixa;
		char* cAuxdsNmSubCampanha= cdsNmSubCampanha;
		char* cAuxidUser = cidUser;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaHistorico();
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdateNome;
	sqlca.sqlcode=0;
	
	EXEC SQL 
	UPDATE 
		CAMPANHA.SUBCAMPANHAHISTORICO
	SET	
		IDUSUARIOALTERACAO = :cAuxidUser,
		DTULTIMAALTERACAO =	SYSDATE,
		NMSUBCAMPANHA = :cAuxdsNmSubCampanha,
		INATIVO = 1
	 WHERE 
		IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaFixa;  
	
	return 1;

GotoUpdateNome:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}


int CSubCampanhaHistorico::ListId( char* cidSubCampanhaHistorico )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaHistorico = cidSubCampanhaHistorico;
		struct
		{
			VARCHAR stidSubCampanhaHistorico[21+1];
			VARCHAR stdsScriptSubCampanha[256+1];
			VARCHAR stinClienteTelefonica[21+1];
			VARCHAR stqtMaximaAgenda[21+1];
			VARCHAR stdtInicio[12+1];
			VARCHAR stdtTermino[12+1];
			VARCHAR stsqVersao[21+1];
			VARCHAR stinReincidente[21+1];
			VARCHAR stidTipoCampanha[21+1];
			VARCHAR stidSubCampanhaFixa[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stdsNmSubCampanha[255+1];
		} stSubCampanhaHistoricoRegistro;
		struct
		{
			short iidSubCampanhaHistorico;
			short idsScriptSubCampanha;
			short iinClienteTelefonica;
			short iqtMaximaAgenda;
			short idtInicio;
			short idtTermino;
			short isqVersao;
			short iinReincidente;
			short iidTipoCampanha;
			short iidSubCampanhaFixa;
			short iisqApresentacao;
			short idsNmSubCampanha;
		} stSubCampanhaHistoricoIndicator;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaHistorico();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	sqlca.sqlcode=0;

   	EXEC SQL 
   		DECLARE 
   			CursorSubCampanhaHistoricoId CURSOR FOR
		SELECT 
			IDSUBCAMPANHAHISTORICO, 
		    DSSCRIPTSUBCAMPANHA, 
		    INCLIENTETELEFONICA, 
		    QTMAXIMAAGENDA, 
		    DTINICIO, 
		    DTTERMINO, 
		    SQVERSAO, 
		    INREINCIDENTE, 
		    IDTIPOCAMPANHA, 
		    IDSUBCAMPANHAFIXA,
			SQAPRESENTACAO,
			NMSUBCAMPANHA
		 FROM 
		 	CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO
		 WHERE 
		 	IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaHistorico
			AND INATIVO = 1;

	EXEC SQL OPEN CursorSubCampanhaHistoricoId;

	if(sqlca.sqlcode)
		return 0;
	else
	{
		for(;;)
		{
			memset( &stSubCampanhaHistoricoRegistro, 0, sizeof(stSubCampanhaHistoricoRegistro) );
			EXEC SQL FETCH CursorSubCampanhaHistoricoId INTO :stSubCampanhaHistoricoRegistro:stSubCampanhaHistoricoIndicator;

			Add( (char*)stSubCampanhaHistoricoRegistro.stidSubCampanhaHistorico.arr, 
			     (char*)stSubCampanhaHistoricoRegistro.stidSubCampanhaFixa.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdsScriptSubCampanha.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stinClienteTelefonica.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stqtMaximaAgenda.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdtInicio.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdtTermino.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stsqVersao.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stinReincidente.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stidTipoCampanha.arr,
				 (char*)stSubCampanhaHistoricoRegistro.stsqApresentacao.arr,
				 (char*)stSubCampanhaHistoricoRegistro.stdsNmSubCampanha.arr
			);

			iCont++;

		}
		EXEC SQL CLOSE CursorSubCampanhaHistoricoId;
	}

	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CSubCampanhaHistorico::ListAll( void )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidSubCampanhaHistorico[21+1];
			VARCHAR stdsScriptSubCampanha[256+1];
			VARCHAR stinClienteTelefonica[21+1];
			VARCHAR stqtMaximaAgenda[21+1];
			VARCHAR stdtInicio[12+1];
			VARCHAR stdtTermino[2+1];
			VARCHAR stsqVersao[21+1];
			VARCHAR stinReincidente[21+1];
			VARCHAR stidTipoCampanha[21+1];
			VARCHAR stidSubCampanhaFixa[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stdsNmSubCampanha[255+1];
		} stSubCampanhaHistoricoRegistro;
		struct
		{
			short iidSubCampanhaHistorico;
			short idsScriptSubCampanha;
			short iinClienteTelefonica;
			short iqtMaximaAgenda;
			short idtInicio;
			short idtTermino;
			short isqVersao;
			short iinReincidente;
			short iidTipoCampanha;
			short iidSubCampanhaFixa;
			short idsNmSubCampanha;
		} stSubCampanhaHistoricoIndicator;

	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaHistorico();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
	sqlca.sqlcode=0;

   	EXEC SQL DECLARE CursorSubCampanhaHistoricoAll CURSOR FOR
		SELECT IDSUBCAMPANHAHISTORICO, 
		       DSSCRIPTSUBCAMPANHA, 
		       INCLIENTETELEFONICA, 
		       QTMAXIMAAGENDA, 
		       DTINICIO, 
		       DTTERMINO, 
		       SQVERSAO, 
		       INREINCIDENTE, 
		       IDTIPOCAMPANHA, 
		       IDSUBCAMPANHAFIXA ,
			   NMSUBCAMPANHA
		  FROM CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO
		 WHERE SUBCAMPANHAHISTORICO.INATIVO = 1;

	EXEC SQL OPEN CursorSubCampanhaHistoricoAll;

	if(sqlca.sqlcode)
		return 0;
	else
	{
		for(;;)
		{
			memset( &stSubCampanhaHistoricoRegistro, 0, sizeof(stSubCampanhaHistoricoRegistro) );
			EXEC SQL FETCH CursorSubCampanhaHistoricoAll INTO :stSubCampanhaHistoricoRegistro:stSubCampanhaHistoricoIndicator;

			Add( (char*)stSubCampanhaHistoricoRegistro.stidSubCampanhaHistorico.arr, 
			     (char*)stSubCampanhaHistoricoRegistro.stidSubCampanhaFixa.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdsScriptSubCampanha.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stinClienteTelefonica.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stqtMaximaAgenda.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdtInicio.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stdtTermino.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stsqVersao.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stinReincidente.arr,
			     (char*)stSubCampanhaHistoricoRegistro.stidTipoCampanha.arr,
				 (char*)stSubCampanhaHistoricoRegistro.stsqApresentacao.arr,
				 (char*)stSubCampanhaHistoricoRegistro.stdsNmSubCampanha.arr);

			iCont++;

		}
		EXEC SQL CLOSE CursorSubCampanhaHistoricoAll;
	}

	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}


int CSubCampanhaHistorico::ListNomeSubCampanha( char* cnmSubCampanha )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxnmSubCampanha = cnmSubCampanha;
		int nCount = 0;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListNomeSubCampanha;
	sqlca.sqlcode=0;

   	EXEC SQL 
		SELECT 
			COUNT(1)
		INTO
			:nCount
		FROM 
			CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO
		WHERE 
		 	UPPER(NMSUBCAMPANHA) = UPPER(:cAuxnmSubCampanha)
			AND INATIVO = 1;

	return nCount;

GotoListNomeSubCampanha:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CSubCampanhaHistorico::GetXml( char* cNomeTag, XMLGen*xml )
{
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp( "xmlns", "campanha.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idSubCampanhaHistorico" , Registro(x)->cidSubCampanhaHistorico );
				xml->addItem("idSubCampanhaFixa" , Registro(x)->cidSubCampanhaFixa );
				xml->addItem("dsScriptSubCampanha" , Registro(x)->cdsScriptSubCampanha );
				xml->addItem("dtInicio" , Registro(x)->cdtInicio );
				xml->addItem("dtTermino" , Registro(x)->cdtTermino );
				xml->addItem("inClienteTelefonica" , Registro(x)->cinClienteTelefonica );
				xml->addItem("qtMaximaAgenda" , Registro(x)->cqtMaximaAgenda );
				xml->addItem("sqVersao" , Registro(x)->csqVersao );
				xml->addItem("inReincidente" , Registro(x)->cinReincidente );
				xml->addItem("idTipoCampanha" , Registro(x)->cidTipoCampanha );
				xml->addItem("nmSubCampanha",Registro(x)->cdsNmSubCampanha);
			}
			xml->closeTag();
		}
	}
}



int CSubCampanhaHistorico::Update(	char* cidSubCampanhaHistorico,
									char* sqApresentacao,
									char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaHistorico  = cidSubCampanhaHistorico;
		char* cAuxidUser = cidUser;
		char* cAuxsqApresentacao = sqApresentacao;
	EXEC SQL END DECLARE SECTION;

	ZeraSubCampanhaHistorico();
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
	sqlca.sqlcode=0;
	
	EXEC SQL 
		UPDATE CAMPANHA.SUBCAMPANHAHISTORICO
		   SET	IDUSUARIOALTERACAO = :cAuxidUser,
				DTULTIMAALTERACAO =	sysdate,
				sqApresentacao = :cAuxsqApresentacao,
				INATIVO = 1
		 WHERE IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaHistorico;  
	
	if( sqlca.sqlcode == 0 )
		return 1;
	else
		return 0;

GotoUpdate:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}


void CSubCampanhaHistorico::AtualizaSubCampanhaAtual( char* cidSubCampanhaFixa, 
			                                          char* cidSubCampanhaHistorico,
									                  char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cauxidSubCampanhaFixa  = cidSubCampanhaFixa;
		char* cAuxidSubCampanhaHistorico  = cidSubCampanhaHistorico;
		char* cAuxidUser = cidUser;
	EXEC SQL END DECLARE SECTION;

	memset( &sqlca, 0, sizeof( sqlca ) );
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoAtualizaSubCampanhaAtual;
	
	EXEC SQL
	INSERT INTO CAMPANHA.SUBCAMPANHAATUAL
	(	
		IDSUBCAMPANHAHISTORICO, 
		IDSUBCAMPANHAFIXA,			
		IDUSUARIOALTERACAO, 
		DTULTIMAALTERACAO
	)
	VALUES
	(
		:cAuxidSubCampanhaHistorico, 
		:cauxidSubCampanhaFixa,
		:cAuxidUser,
		SYSDATE
	);
	return;

GotoAtualizaSubCampanhaAtual:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}


void CSubCampanhaHistorico::AtualizaSubCampanhaFidelizacao( char* cidSubCampanhaHistorico,
									                        char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaHistorico  = cidSubCampanhaHistorico;
		char* cAuxidUser = cidUser;
	EXEC SQL END DECLARE SECTION;

	memset( &sqlca, 0, sizeof( sqlca ) );
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoAtualizaSubCampanhaFidelizacao;
	
	EXEC SQL
	INSERT INTO CAMPANHA.SUBCAMPANHAFIDELIZACAO
	(	
		IDSUBCAMPANHAHISTORICO
	)
	VALUES
	(
		:cAuxidSubCampanhaHistorico
	);
//	INSERT INTO CAMPANHA.SUBCAMPANHAATUAL
//	(	
//		IDSUBCAMPANHAHISTORICO, 
//		IDUSUARIOALTERACAO, 
//		DTULTIMAALTERACAO
//	)
//	VALUES
//	(
//		:cAuxidSubCampanhaHistorico, 
//		:cAuxidUser,
//		SYSDATE
//	);
	return;

GotoAtualizaSubCampanhaFidelizacao:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}
