//////////////////////////////////////////////////////////////////////
// CRelatorioRespostas.cpp: CRelatorioRespostas class.
//////////////////////////////////////////////////////////////////////

#undef SQLCA
#define SQLCA_NONE

#include<sqlca.h>
#include<sqlda.h>

#include <SRelatorioCampanha.h>
#include <SRelatorioRespostas.h>
#include <CRelatorioRespostas.h>
#include <CGetHeader.h>
#define endOraStr(varstr)      varstr.arr[varstr.len]= '\0'

void CRelatorioRespostas::montaRelatorio(struct SRelatorioCampanha* sRelatorioCampanha, XMLGen* xml_g) {
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
		char    cszPergunta				[2000+1];
		varchar oszPergunta				[2000+1];
		varchar oszResposta				[2000+1];
		varchar datain					[255+1];
		varchar datafim					[255+1];
		varchar idpessoa				[255+1];
		varchar idcanalCampanha			[255+1];
		varchar	idgrupo					[255+1];
		varchar idsubcampanhahistorico	[255+1];
		varchar idarearegistro			[255+1];
		int stotal = 0;
		int stotal2 = 0;
		int iQtde = 0;
		varchar idPergunta				[255+1];
		varchar idufoperadora			[100+1];
		short iszPergunta;
		short iszResposta;
		short iszNumeroAtendimento;
		short iszPercentual;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR GOTO ORAEXCP;

	CGetHeader Header(sRelatorioCampanha, xml_g);

	ULOGI("** CRelatorioRespostas::montaRelatorio ***** INICIO " ); 

	struct RelatorioRespostasLista *pstRel = NULL;
	pstRel=(RelatorioRespostasLista*)malloc((sizeof(RelatorioRespostasLista)));
	
	int iQtdReg=0;
	int iSeq=0;
	int i=0;
	int index=0;
	int *pTotais = NULL;

	char szValor[256];			szValor[0] = '\0';
	char oldPergunta[2000+1];	oldPergunta[0] = '\0';

	bool  tagGraficoAberta = false;

	STRCPY_TO_ORA (idpessoa,				sRelatorioCampanha->pcidOperador);
	STRCPY_TO_ORA (idcanalCampanha,			sRelatorioCampanha->pcidCanalCampanha);
	STRCPY_TO_ORA (idsubcampanhahistorico,	sRelatorioCampanha->pcidSubCampanha);
	STRCPY_TO_ORA (datain,					sRelatorioCampanha->pcdtInicio);
	STRCPY_TO_ORA (datafim,					sRelatorioCampanha->pcdtFim);
	STRCPY_TO_ORA (idsubcampanhahistorico,	sRelatorioCampanha->pcidSubCampanha);
	STRCPY_TO_ORA (idPergunta,				sRelatorioCampanha->pcidPergunta);
	STRCPY_TO_ORA (idgrupo,					sRelatorioCampanha->pcidGrupo);
	STRCPY_TO_ORA (idufoperadora,			sRelatorioCampanha->pcidRegional);

	// Verifica se o idAreaRegistro foi preenchido
	if( strlen(sRelatorioCampanha->pcidAreaRegistro) > 0 ) 	{
		STRCPY_TO_ORA (idarearegistro,			sRelatorioCampanha->pcidAreaRegistro); 
	} else {
			STRCPY_TO_ORA (idarearegistro,			"-1"); 	
	}

	EXEC SQL WHENEVER SQLERROR GOTO ORAEXCP;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	// Verifica se o idgrupo foi passado e se esta na lista de grupos para esta campanha
	if( atoi(sRelatorioCampanha->pcidGrupo) > -1 ) {

		EXEC SQL 
		SELECT
			COUNT(CG.IDGRUPO)
		INTO
			:iQtde
		FROM 
			CONTATOADM.SUBCAMPANHAGRUPOUSUARIO CG,
			CAMPANHA.SUBCAMPANHAHISTORICO	   SUB
		WHERE
			SUB.IDSUBCAMPANHAHISTORICO = :idsubcampanhahistorico
			AND SUB.IDSUBCAMPANHAFIXA = CG.IDSUBCAMPANHAFIXA
			AND CG.IDGRUPO = :idgrupo
			AND CG.INATIVO = 1;

		// Se este grupo não está na lista, então retorne como nenhum registro encontrado
		if( iQtde == 0 ) {

			xml_g->createTag("RelatorioRespostasVO");
			xml_g->addProp("xmlns","campanha.fo.vivo.com.br/vo");
			Header.Executar();

				xml_g->createTag("Perguntas");
					xml_g->createTag("numerico");
						xml_g->addItem( "dsPergunta","");
						xml_g->addItem( "dsResposta","");
						xml_g->addItem( "nroAtendimento","");
						xml_g->addItem( "porcent","");
					xml_g->closeTag();

					xml_g->createTag("grafico");
						 xml_g->addItem( "dsPergunta", "");
						 xml_g->createTag("ParametrosGraficoVO");
							xml_g->addItem( "descricao","" );
							xml_g->addItem( "valor","");
						 xml_g->closeTag();
					xml_g->closeTag();
				xml_g->closeTag();

			xml_g->addItem("total","0"); 
			xml_g->closeTag();
			return;
		}
	}

	ULOGI("--> Calculando Total.. ");

	EXEC SQL 
	SELECT nvl(sum(qtde), 0) 
	INTO :stotal
	FROM (
			SELECT
				  SUBSTR (p.dsscriptpergunta, 1, 50) as pergunta,
				  SUBSTR (r.dsscriptresposta, 1, 50) as resposta,
				  COUNT( DISTINCT( ac.idatendimentocampanha )  ) AS qtde
			  FROM campanha.subcampanhahistorico sch,
				   campanha.canalcampanha cc,
				   campanha.canalufoperadora co,
				   campanha.atendimentocampanha ac,
				   questionario.pergunta p,
				   questionario.resposta r,
				   campanha.andamentopergunta ap,
				   campanha.andamentoresposta ar,
				   acesso.usuario u,
				   acesso.usuariogrupo ug,
				   acesso.grupo g,
				   apoio.arearegistro aa,
				   campanha.listaconteudo clc
			 WHERE sch.idsubcampanhahistorico = :idsubcampanhahistorico
			   AND sch.idsubcampanhahistorico = cc.idsubcampanhahistorico
			   AND cc.idcanalufoperadora = co.idcanalufoperadora
			   AND cc.IDCANALCAMPANHA = :idcanalCampanha
			   AND cc.idcanalufoperadora = co.idcanalufoperadora
			   AND ( co.IDUFOPERADORA = :idufoperadora OR -1 = :idufoperadora )
			   AND ac.idcanalcampanha = cc.idcanalcampanha
			   AND ac.dtatendimento >= TO_DATE (:datain || ' 00:00:00', 'DD/MM/YYYY HH24:MI:SS' )
			   AND ac.dtatendimento <= TO_DATE (:datafim || ' 23:59:59', 'DD/MM/YYYY HH24:MI:SS' )
			   AND ( p.idpergunta = :idPergunta OR -1 = :idPergunta )
			   AND r.idpergunta = p.idpergunta
			   AND ap.idpergunta = p.idpergunta
			   AND ar.idandamentopergunta = ap.idandamentopergunta
			   AND ar.idresposta = r.idresposta
			   AND ac.idatendimentocampanha = ap.idatendimentocampanha
			   AND ac.idpessoausuario = u.idpessoausuario
			   AND u.idpessoausuario = ug.idpessoausuario
			   AND ug.idgrupo = g.idgrupo
			   AND ( g.idgrupo = :idgrupo OR -1 = :idgrupo )
			   AND aa.idufoperadora = co.idufoperadora
			   AND ( aa.idarearegistro = :idarearegistro OR -1 = :idarearegistro )
			   AND clc.IDLISTACONTEUDO = ac.IDLISTACONTEUDO
			   AND substr( to_char(clc.NRTELEFONE), 1, 2 ) = aa.CDAREAREGISTRO
			 GROUP BY p.dsscriptpergunta, r.dsscriptresposta
			 ORDER BY UPPER(TRIM(p.dsscriptpergunta)), UPPER(TRIM(r.dsscriptresposta)) );

	EXEC SQL 
	SELECT nvl(sum(qtde), 0) 
	INTO :stotal2
	FROM (
		  SELECT 	
				   SUBSTR (p.DSSCRIPTPERGUNTA, 1, 50)		  	 AS pergunta,
				   SUBSTR (ar1.DSTEXTOLIVRE, 1, 50) 	  	  	 AS resposta,
				   COUNT( DISTINCT( ar1.IDANDAMENTOPERGUNTA ) )  AS qtde
			  FROM campanha.subcampanhahistorico sch,
				   campanha.canalcampanha cc,
				   campanha.canalufoperadora co,
				   campanha.atendimentocampanha ac,
				   questionario.pergunta p,
				   campanha.andamentopergunta ap,
				   acesso.usuario u,
				   acesso.usuariogrupo ug,
				   acesso.grupo g,
				   campanha.andamentorespostatextolivre ar1,
				   apoio.arearegistro aa,
				   campanha.listaconteudo clc
			 WHERE sch.idsubcampanhahistorico = :idsubcampanhahistorico
			   AND sch.idsubcampanhahistorico = cc.idsubcampanhahistorico
			   AND cc.IDCANALCAMPANHA = :idcanalCampanha
			   AND cc.idcanalufoperadora = co.idcanalufoperadora
			   AND ( co.IDUFOPERADORA = :idufoperadora OR -1 = :idufoperadora )
			   AND ac.idcanalcampanha = cc.idcanalcampanha
			   AND ac.dtatendimento >= TO_DATE (:datain || ' 00:00:00', 'DD/MM/YYYY HH24:MI:SS')
			   AND ac.dtatendimento <= TO_DATE (:datafim || ' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
			   AND ac.idatendimentocampanha = ap.idatendimentocampanha
			   AND ap.idpergunta = p.idpergunta
			   AND (p.idpergunta = :idPergunta OR -1 = :idPergunta)
			   AND ac.IDUSUARIOALTERACAO = u.idpessoausuario
			   AND u.idpessoausuario = ug.idpessoausuario
			   AND ug.idgrupo = g.idgrupo
			   AND ( g.idgrupo = :idgrupo OR -1 = :idgrupo )
			   AND ap.idandamentopergunta = ar1.idandamentopergunta 
			   AND aa.idufoperadora = co.idufoperadora
			   AND ( aa.idarearegistro = :idarearegistro OR -1 = :idarearegistro )
			   AND clc.IDLISTACONTEUDO = ac.IDLISTACONTEUDO
			   AND substr( to_char(clc.NRTELEFONE), 1, 2 ) = aa.CDAREAREGISTRO
		     GROUP BY ar1.IDANDAMENTOPERGUNTA, p.DSSCRIPTPERGUNTA, ar1.DSTEXTOLIVRE
		     ORDER BY UPPER(TRIM(p.DSSCRIPTPERGUNTA)), UPPER(TRIM(ar1.DSTEXTOLIVRE)) );

	// Total geral
	stotal = stotal + stotal2;

	ULOGI("	--> DECLARE crRelPergunta CURSOR" );

	if( stotal > 0 )
	{
		pTotais = new int[stotal+1];
		
		EXEC SQL DECLARE crRelPergunta CURSOR for
		SELECT   pergunta, 
				 resposta,
				 qtde
		FROM		
		(
				SELECT
					  p.dsscriptpergunta as pergunta,
					  r.dsscriptresposta as resposta,
					  COUNT( DISTINCT( ac.idatendimentocampanha )  ) AS qtde
				  FROM campanha.subcampanhahistorico sch,
					   campanha.canalcampanha cc,
					   campanha.canalufoperadora co,
					   campanha.atendimentocampanha ac,
					   questionario.pergunta p,
					   questionario.resposta r,
					   campanha.andamentopergunta ap,
					   campanha.andamentoresposta ar,
					   acesso.usuario u,
					   acesso.usuariogrupo ug,
					   acesso.grupo g,
					   apoio.arearegistro aa,
					   campanha.listaconteudo clc					   
				 WHERE sch.idsubcampanhahistorico = :idsubcampanhahistorico
				   AND sch.idsubcampanhahistorico = cc.idsubcampanhahistorico
				   AND cc.idcanalufoperadora = co.idcanalufoperadora
				   AND cc.IDCANALCAMPANHA = :idcanalCampanha
				   AND cc.idcanalufoperadora = co.idcanalufoperadora
				   AND ( co.IDUFOPERADORA = :idufoperadora OR -1 = :idufoperadora )
				   AND ac.idcanalcampanha = cc.idcanalcampanha
				   AND ac.dtatendimento >= TO_DATE (:datain || ' 00:00:00', 'DD/MM/YYYY HH24:MI:SS')
				   AND ac.dtatendimento <= TO_DATE (:datafim || ' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
				   AND ( p.idpergunta = :idPergunta OR -1 = :idPergunta )
				   AND r.idpergunta = p.idpergunta
				   AND ap.idpergunta = p.idpergunta
				   AND ar.idandamentopergunta = ap.idandamentopergunta
				   AND ar.idresposta = r.idresposta
				   AND ac.idatendimentocampanha = ap.idatendimentocampanha
				   AND ac.idpessoausuario = u.idpessoausuario
				   AND u.idpessoausuario = ug.idpessoausuario
				   AND ug.idgrupo = g.idgrupo
				   AND ( g.idgrupo = :idgrupo OR -1 = :idgrupo )
				   AND aa.idufoperadora = co.idufoperadora
				   AND ( aa.idarearegistro = :idarearegistro OR -1 = :idarearegistro )
				   AND clc.IDLISTACONTEUDO = ac.IDLISTACONTEUDO
				   AND substr( to_char(clc.NRTELEFONE), 1, 2 ) = aa.CDAREAREGISTRO
			     GROUP BY p.dsscriptpergunta, r.dsscriptresposta
			     ORDER BY UPPER(TRIM(p.dsscriptpergunta)), UPPER(TRIM(r.dsscriptresposta))  );

		EXEC SQL OPEN crRelPergunta;
		EXEC SQL WHENEVER NOT FOUND do break;
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta INTO
				:oszPergunta:iszPergunta,
				:oszResposta:iszResposta,
				:iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					pTotais[++index] = 0;
				}

				pTotais[index] += iszNumeroAtendimento;
				strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
		}
		EXEC SQL CLOSE crRelPergunta;

		EXEC SQL OPEN crRelPergunta;
		EXEC SQL WHENEVER NOT FOUND do break;

		xml_g->createTag("RelatorioRespostasVO");
		xml_g->addProp("xmlns","campanha.fo.vivo.com.br/vo");

		Header.Executar();
		xml_g->createTag("Perguntas");
		index = 0;
		oldPergunta[0] = '\0';
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta INTO
				:oszPergunta:iszPergunta,
				:oszResposta:iszResposta,
				:iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				ULOGI("  ---> Nova Pergunta %d - [%s][%s][%d] ", 
												iQtdReg,
												(char*)oszPergunta.arr,
												(char*)oszResposta.arr,
												iszNumeroAtendimento);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					index++;
				}

				xml_g->createTag("numerico");
					xml_g->addItem( "dsPergunta", (char*)oszPergunta.arr);
					xml_g->addItem( "dsResposta", (char*)oszResposta.arr);

					sprintf(szValor, "%d", iszNumeroAtendimento);
					xml_g->addItem( "nroAtendimento", szValor);

					sprintf(szValor, "%.2f", (float)iszNumeroAtendimento / (float)pTotais[index] * 100.00 );
					xml_g->addItem( "porcent", szValor);
				xml_g->closeTag();

				strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
			iQtdReg++;
		}
		EXEC SQL CLOSE crRelPergunta;

		EXEC SQL OPEN crRelPergunta;
		EXEC SQL WHENEVER NOT FOUND do break;
		index = 0;
		oldPergunta[0] = '\0';
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta INTO
				:oszPergunta:iszPergunta,
				:oszResposta:iszResposta,
				:iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 && tagGraficoAberta ){
					xml_g->closeTag();
				}

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					index++;
				}

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					xml_g->createTag("grafico");
						 xml_g->addItem( "dsPergunta", (char*)oszPergunta.arr);
					tagGraficoAberta = true;
				}

				sprintf(szValor, "%.2f", (float)iszNumeroAtendimento / (float)pTotais[index] * 100.00 );

				xml_g->createTag("ParametrosGraficoVO");
				  xml_g->addItem( "descricao", (char*)oszResposta.arr );
				  xml_g->addItem( "valor", szValor);
				xml_g->closeTag();

				strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
		}
		EXEC SQL CLOSE crRelPergunta;

		if( tagGraficoAberta ){
			xml_g->closeTag();
			tagGraficoAberta = false;
		}

		/*** Respostas tipo texto ***/
		EXEC SQL DECLARE crRelPergunta2 CURSOR for
		SELECT   pergunta, 
				 resposta,
				 qtde
		FROM
		(
		  SELECT
				   p.DSSCRIPTPERGUNTA		  	 AS pergunta,
				   ar1.DSTEXTOLIVRE 	  	  	 AS resposta,
				   COUNT( DISTINCT( ar1.IDANDAMENTOPERGUNTA ) )  AS qtde
			  FROM campanha.subcampanhahistorico sch,
				   campanha.canalcampanha cc,
				   campanha.canalufoperadora co,
				   campanha.atendimentocampanha ac,
				   questionario.pergunta p,
				   campanha.andamentopergunta ap,
				   acesso.usuario u,
				   acesso.usuariogrupo ug,
				   acesso.grupo g,
				   campanha.andamentorespostatextolivre ar1,
				   apoio.arearegistro aa,
				   campanha.listaconteudo clc
			 WHERE sch.idsubcampanhahistorico = :idsubcampanhahistorico
					   AND sch.idsubcampanhahistorico = cc.idsubcampanhahistorico
					   AND cc.IDCANALCAMPANHA = :idcanalCampanha
					   AND cc.idcanalufoperadora = co.idcanalufoperadora
					   AND ( co.IDUFOPERADORA = :idufoperadora OR -1 = :idufoperadora )
					   AND ac.idcanalcampanha = cc.idcanalcampanha
					   AND ac.dtatendimento >= TO_DATE ( :datain || ' 00:00:00', 'DD/MM/YYYY HH24:MI:SS' )
					   AND ac.dtatendimento <= TO_DATE ( :datafim || ' 23:59:59', 'DD/MM/YYYY HH24:MI:SS' )
					   AND ac.idatendimentocampanha = ap.idatendimentocampanha
					   AND ap.idpergunta = p.idpergunta
					   AND ( p.idpergunta = :idPergunta OR -1 = :idPergunta ) 
					   AND ac.IDUSUARIOALTERACAO = u.idpessoausuario
					   AND u.idpessoausuario = ug.idpessoausuario
					   AND ug.idgrupo = g.idgrupo
					   AND ( g.idgrupo = :idgrupo OR -1 = :idgrupo )
					   AND ap.idandamentopergunta = ar1.idandamentopergunta 
					   AND aa.idufoperadora = co.idufoperadora
					   AND ( aa.idarearegistro = :idarearegistro OR -1 = :idarearegistro )
					   AND clc.IDLISTACONTEUDO = ac.IDLISTACONTEUDO
					   AND substr( to_char(clc.NRTELEFONE), 1, 2 ) = aa.CDAREAREGISTRO
		     GROUP BY p.DSSCRIPTPERGUNTA, ar1.DSTEXTOLIVRE 
		     ORDER BY UPPER(TRIM(p.DSSCRIPTPERGUNTA)), UPPER(TRIM(ar1.DSTEXTOLIVRE)) );

		EXEC SQL OPEN crRelPergunta2;
		EXEC SQL WHENEVER NOT FOUND do break;
		oldPergunta[0] = '\0';
		index = 0;
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta2 INTO
				:oszPergunta:iszPergunta,
				:oszResposta:iszResposta,
				:iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					pTotais[++index] = 0;
				}

				pTotais[index] += iszNumeroAtendimento;
				strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
		}
		EXEC SQL CLOSE crRelPergunta2;

		EXEC SQL OPEN crRelPergunta2;
		EXEC SQL WHENEVER NOT FOUND do break;
		index = 0;
		oldPergunta[0] = '\0';
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta2 INTO
						   :oszPergunta:iszPergunta,
						   :oszResposta:iszResposta,
						   :iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				ULOGI("  ---> Nova Pergunta %d - [%s][%s][%d] ", 
												iQtdReg,
												(char*)oszPergunta.arr,
												(char*)oszResposta.arr,
												iszNumeroAtendimento);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					index++;
				}

				xml_g->createTag("numerico"); 
					xml_g->addItem( "dsPergunta", (char*)oszPergunta.arr);
					xml_g->addItem( "dsResposta", (char*)oszResposta.arr); 

					sprintf(szValor, "%d", iszNumeroAtendimento);
					xml_g->addItem( "nroAtendimento", szValor); 

					sprintf(szValor, "%.2f", (float)iszNumeroAtendimento / (float)pTotais[index] * 100.00 );
					xml_g->addItem( "porcent", szValor); 
				xml_g->closeTag(); 

			  strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
			iQtdReg++;
		}
		EXEC SQL CLOSE crRelPergunta2;

		EXEC SQL OPEN crRelPergunta2;
		EXEC SQL WHENEVER NOT FOUND do break;
		index = 0;
		oldPergunta[0] = '\0';
		for(;;)
		{
			EXEC SQL FETCH crRelPergunta2 INTO
						   :oszPergunta:iszPergunta,
						   :oszResposta:iszResposta,
						   :iszNumeroAtendimento;

				endOraStr(oszPergunta);
				endOraStr(oszResposta);

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 && tagGraficoAberta){
					xml_g->closeTag();
				}

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					index++;
				}

				if( strcmp( (char*)oldPergunta, (char*)oszPergunta.arr) != 0 ){
					xml_g->createTag("grafico");
						 xml_g->addItem( "dsPergunta", (char*)oszPergunta.arr);
					tagGraficoAberta = true;
				}

				sprintf(szValor, "%.2f", (float)iszNumeroAtendimento / (float)pTotais[index] * 100.00 );

				xml_g->createTag("ParametrosGraficoVO");
					xml_g->addItem( "descricao", (char*)oszResposta.arr);
					xml_g->addItem( "valor", szValor);
				xml_g->closeTag();

				strcpy((char*)oldPergunta, (char*)oszPergunta.arr);
		}
		EXEC SQL CLOSE crRelPergunta2;

		if( tagGraficoAberta ){
			xml_g->closeTag();
			tagGraficoAberta = false;
		}

		xml_g->closeTag();
		char stTotal[256]; 
		sprintf( stTotal, "%d", iQtdReg ); 
		xml_g->addItem("total", stTotal); 
		xml_g->closeTag();

		delete[] pTotais;

	} else {
				xml_g->createTag("RelatorioRespostasVO");
				xml_g->addProp("xmlns","campanha.fo.vivo.com.br/vo");
				Header.Executar();

					xml_g->createTag("Perguntas");
						xml_g->createTag("numerico");
							xml_g->addItem( "dsPergunta", "");
							xml_g->addItem( "dsResposta","");
							xml_g->addItem( "nroAtendimento","");
							xml_g->addItem( "porcent","");
						xml_g->closeTag();

						xml_g->createTag("grafico");
							 xml_g->addItem( "dsPergunta", "");
							 xml_g->createTag("ParametrosGraficoVO");
								xml_g->addItem( "descricao","" );
								xml_g->addItem( "valor","");
							 xml_g->closeTag();
						xml_g->closeTag();
					xml_g->closeTag();

				xml_g->addItem("total","0");
				xml_g->closeTag();
	}

	free (pstRel);
	return;

ORAEXCP:
 ULOGI("** CRelatorioRespostas::montaRelatorio ***** Free pstRel" );
 free (pstRel);
 ULOGI("** CRelatorioRespostas::montaRelatorio ***** Delete pTotais" );
 delete[] pTotais;
 ULOGI("** CRelatorioRespostas::montaRelatorio ***** FIM erros: [%s] [%s]",  sqlca.sqlerrm.sqlerrml-1, sqlca.sqlerrm.sqlerrmc );
 return;
}