#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CCanalCampanha.h>

CCanalCampanha::CCanalCampanha()
{
}

CCanalCampanha::~CCanalCampanha()
{
}

int CCanalCampanha::Insert( char* cidSubCampanhaHistorico,
	                        char* cidCanalUFOperadora,
	                        char* csqApresentacao,
	                        char* cinDisponibilidade,
	                        char* cinAtivo,
	                        char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR stidCanalCampanha[21+1];
		char* cAuxidSubCampanhaHistorico  = cidSubCampanhaHistorico;
		char* cAuxidCanalUFOperadora  = cidCanalUFOperadora;
		char* cAuxsqApresentacao  = csqApresentacao;
		char* cAuxinDisponibilidade  = cinDisponibilidade;
		char* cAuxinAtivo  = cinAtivo;
		char* cAuxidUser  = cidUser;
	EXEC SQL END DECLARE SECTION;
	
	memset( &stidCanalCampanha, 0, sizeof(stidCanalCampanha) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
	sqlca.sqlcode=0;
	
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT 
			CAMPANHA.CANALCAMPANHASQ.NEXTVAL
		INTO 
			:stidCanalCampanha
		FROM DUAL;

	EXEC SQL 
		INSERT INTO CAMPANHA.CANALCAMPANHA
		(   
			IDCANALCAMPANHA,
			SQAPRESENTACAO,
			INDISPONIBILIDADE,
			IDSUBCAMPANHAHISTORICO,
			IDCANALUFOPERADORA,
			INATIVO,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO
		)
		VALUES
		(
			:stidCanalCampanha, 
		   	:cAuxsqApresentacao, 
		   	:cAuxinDisponibilidade, 
		   	:cAuxidSubCampanhaHistorico, 
		   	:cAuxidCanalUFOperadora, 
		   	:cAuxinAtivo, 
		   	:cAuxidUser,
		   	SYSDATE
		);
		
	//Apos a insercao salva os dados na estrutura interna
	Add( (char*)stidCanalCampanha.arr,
	     cAuxidSubCampanhaHistorico,
	     cAuxidCanalUFOperadora,
	     cAuxsqApresentacao,
	     cAuxinDisponibilidade,
	     cAuxinAtivo 
	);		
	
	return 1;

GotoInsert:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CCanalCampanha::ListId( char* cidSubCampanhaHistorico )
{
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidSubCampanhaHistorico = cidSubCampanhaHistorico;
		struct
		{
			VARCHAR stidCanalCampanha[21+1];
			VARCHAR stidSubCampanhaHistorico[21+1];
			VARCHAR stidCanalUFOperadora[21+1];
			VARCHAR stsqApresentacao[21+1];
			VARCHAR stinDisponibilidade[21+1];
			VARCHAR stinAtivo[21+1];
		} stRegistro;
		struct
		{
			short iidCanalCampanha;
			short iidSubCampanhaHistorico;
			short iidCanalUFOperadora;
			short isqApresentacao;
			short iinDisponibilidade;
			short iinAtivo;
		} stIndicator;
	EXEC SQL END DECLARE SECTION;

	ZeraCanalCampanha();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	sqlca.sqlcode=0;

   	EXEC SQL 
   		DECLARE 
   			CursorListId CURSOR FOR
		SELECT 
			IDCANALCAMPANHA,
			IDSUBCAMPANHAHISTORICO,
			IDCANALUFOPERADORA,
			SQAPRESENTACAO,
			INDISPONIBILIDADE,
			INATIVO
		FROM 
			CAMPANHA.CANALCAMPANHA CANALCAMPANHA
		WHERE 
			IDSUBCAMPANHAHISTORICO = :cAuxidSubCampanhaHistorico;

	EXEC SQL OPEN CursorListId;

	for(;;)
	{
		memset( &stRegistro, 0, sizeof(stRegistro) );
		EXEC SQL FETCH CursorListId INTO :stRegistro:stIndicator;

		Add( (char*)stRegistro.stidCanalCampanha.arr,
		     (char*)stRegistro.stidSubCampanhaHistorico.arr,
		     (char*)stRegistro.stidCanalUFOperadora.arr,
		     (char*)stRegistro.stsqApresentacao.arr,
		     (char*)stRegistro.stinDisponibilidade.arr,
		     (char*)stRegistro.stinAtivo.arr 
		);		

		iCont++;
	}
	EXEC SQL CLOSE CursorListId;

	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}


int CCanalCampanha::CopiaParametrizacao( char* cidCanalCampanhaOld,
										 char* cidCanalCampanhaNew,
	                                     char* cidUser )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidCanalCampanhaOld  = cidCanalCampanhaOld;
		char* cAuxidCanalCampanhaNew  = cidCanalCampanhaNew;
		char* cAuxidUser  = cidUser;
		struct
		{
			VARCHAR stidCanalCampanha[21+1];
			VARCHAR stnrTempoMediocontato[21+1];
			VARCHAR stnrMetaDiariaCampanha[21+1];
			VARCHAR stnrMetaDiariaOperador[21+1];
			VARCHAR stnrContatoEfetivoOperador[21+1];
			VARCHAR stnrContatoEfetivoCampanha[21+1];
			VARCHAR stnrContatoSucessoOperador[21+1];
			VARCHAR stnrContatoSucessoCampanha[21+1];
			VARCHAR stnrPublicoTotal[21+1];
			VARCHAR stnrAderiuOperador[21+1];
			VARCHAR stnrAderiuCampanha[21+1];
			VARCHAR stnrNaoAderiuOperador[21+1];
			VARCHAR stnrNaoAderiuCampanha[21+1];
		}stRegistro;
		struct
		{
			short iidCanalCampanha;
			short inrTempoMediocontato;
			short inrMetaDiariaCampanha;
			short inrMetaDiariaOperador;
			short inrContatoEfetivoOperador;
			short inrContatoEfetivoCampanha;
			short inrContatoSucessoOperador;
			short inrContatoSucessoCampanha;
			short inrPublicoTotal;
			short inrAderiuOperador;
			short inrAderiuCampanha;
			short inrNaoAderiuOperador;
			short inrNaoAderiuCampanha;
		}stIndicator;
	EXEC SQL END DECLARE SECTION;
	
	memset( &stRegistro, 0, sizeof(stRegistro) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
	sqlca.sqlcode=0;
	
	//Recupera a parametrizacao do antigo
	EXEC SQL
		SELECT
			IDCANALCAMPANHA,
			NRTEMPOMEDIOCONTATO,
			NRMETADIARIACAMPANHA,
			NRMETADIARIAOPERADOR,
			NRCONTATOEFETIVOOPERADOR,
			NRCONTATOEFETIVOCAMPANHA,
			NRCONTATOSUCESSOOPERADOR,
			NRCONTATOSUCESSOCAMPANHA,
			NRPUBLICOTOTAL,
			NRADERIUOPERADOR,
			NRADERIUCAMPANHA,
			NRNAOADERIUOPERADOR,
			NRNAOADERIUCAMPANHA
		INTO
			:stRegistro:stIndicator
		FROM
			CAMPANHA.PARAMETRIZACAOCAMPANHA
		WHERE
			IDCANALCAMPANHA = :cAuxidCanalCampanhaOld;

	//Se tem parametrizacao, entao grava a mesma coisa para o novo
	if( stRegistro.stidCanalCampanha.len > 0 )
	{
		EXEC SQL 
			INSERT INTO CAMPANHA.PARAMETRIZACAOCAMPANHA
			(   
				NRTEMPOMEDIOCONTATO,
				NRMETADIARIACAMPANHA,
				NRMETADIARIAOPERADOR,
				NRCONTATOEFETIVOOPERADOR,
				NRCONTATOEFETIVOCAMPANHA,
				NRCONTATOSUCESSOOPERADOR,
				NRCONTATOSUCESSOCAMPANHA,
				NRPUBLICOTOTAL,
				NRADERIUOPERADOR,
				NRADERIUCAMPANHA,
				NRNAOADERIUOPERADOR,
				NRNAOADERIUCAMPANHA,
				IDCANALCAMPANHA,
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO
			)
			VALUES
			(
				:stRegistro.stnrTempoMediocontato,
				:stRegistro.stnrMetaDiariaCampanha,
				:stRegistro.stnrMetaDiariaOperador,
				:stRegistro.stnrContatoEfetivoOperador,
				:stRegistro.stnrContatoEfetivoCampanha,
				:stRegistro.stnrContatoSucessoOperador,
				:stRegistro.stnrContatoSucessoCampanha,
				:stRegistro.stnrPublicoTotal,
				:stRegistro.stnrAderiuOperador,
				:stRegistro.stnrAderiuCampanha,
				:stRegistro.stnrNaoAderiuOperador,
				:stRegistro.stnrNaoAderiuCampanha,
				:cAuxidCanalCampanhaNew,
			   	:cAuxidUser,
			   	SYSDATE
			);
	}//if( stRegistro.stidCanalCampanha.len > 0 )
		
	return 1;

GotoInsert:
	throw TuxBasicOraException(sqlca.sqlcode);

}