//
// $Id: upd_motivo.pcpp,v 1.1 2009/07/31 15:34:31 a5110702 Exp $
//

#include "../../negocio/cmputil/include/campanha.hpp"

int upd_motivo(char * usuario, DOMNode*dnode, XMLGen*xml)
{
	char parm[256];

	EXEC SQL BEGIN DECLARE SECTION;
		int	idMotivo = 0;
		int	idMotivocampanha = 0;
		VARCHAR sgMotivo[256];
		VARCHAR nmMotivo[256];
		int     idPessoaUsuarioAlteracao;
        int     inAtivo = 0;
        int     inAderiu;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    //  Obtendo dados do xml

	get_tag(parm, dnode, "idMotivo", 0, 0);
	idMotivo = atoi(parm);

    //  Obtendo dados do xml

	get_tag(parm, dnode, "sgMotivo", 0, 0);
	strToOra(sgMotivo,parm);

    //  Obtendo dados do xml

	get_tag(parm, dnode, "nmMotivo", 0, 0);
	strToOra(nmMotivo,parm);

    //  Obtendo dados do xml

	get_tag(parm, dnode, "inAderiu", 0, 0);
	inAderiu = atoi(parm);

	// Pegando id do usuario
	idPessoaUsuarioAlteracao = get_idUsuario(usuario);

	// Exibe no log os parâmetros
	//ulog("Parametros: idMotivo=[%d], sgMotivo=[%s], nmMotivo=[%s], inAderiu=[%d] \n", idMotivo, sgMotivo.arr, nmMotivo.arr, inAderiu);

	// Pegando id do usuario
	idPessoaUsuarioAlteracao = get_idUsuario(usuario);


    /* Verifica se existe o item a adicionar */
/*    EXEC SQL DECLARE crsUpdMotivo CURSOR FOR
            SELECT MOTIVO.idtipomotivocampanha
            FROM apoio.tipomotivocampanha MOTIVO
            WHERE  (MOTIVO.sgtipomotivocampanha = :sgMotivo
            OR     MOTIVO.dstipomotivocampanha = :nmMotivo) 
			and inativo=1;
    EXEC SQL OPEN crsUpdMotivo;

    for(;;)
    {
            EXEC SQL FETCH crsUpdMotivo INTO :idMotivocampanha;
            break;
    }

    EXEC SQL CLOSE crsUpdMotivo;
*/

	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	// Vamos verificar se já existe um motivo com o mesmo nome
    EXEC SQL 
    SELECT 
		idtipomotivocampanha, nvl(inAtivo, 0)
	INTO 
		:idMotivocampanha, :inAtivo
    FROM 
		apoio.tipomotivocampanha MOTIVO
    WHERE  
		(MOTIVO.sgtipomotivocampanha = :sgMotivo
		OR MOTIVO.dstipomotivocampanha = :nmMotivo)
		AND idtipomotivocampanha <> :idMotivo
		AND ROWNUM <= 1;
  
	
	ULOG(" MOTIVO.idtipomotivocampanha : [%d] \n", idMotivocampanha);
	ULOG(" inAtivo : [%d] \n", inAtivo);


    if(idMotivocampanha > 0) // Este motivo já existe
	{
		// Se o motivo está DESATIVADO(deleção lógica), então troque o nome e permita o update
		// do novo motivo
		if( inAtivo == 0 ) {
			EXEC SQL UPDATE apoio.tipomotivocampanha 
			SET		dstipomotivocampanha = SUBSTR(:nmMotivo, 1, 200) || '_' || SYSDATE || '_' || :idMotivocampanha,
					sgtipomotivocampanha = SUBSTR(:sgMotivo, 1, 200) || '_' || SYSDATE || '_' || :idMotivocampanha,
					idpessoausuarioalteracao = :idPessoaUsuarioAlteracao,
					dtalteracao = sysdate,
					IDUSUARIOALTERACAO=:idPessoaUsuarioAlteracao,
					DTULTIMAALTERACAO=SYSDATE
			WHERE idtipomotivocampanha = :idMotivocampanha;

			ULOG(" Alterou nmMotivo e sgMotivo \n");
		}
		else // O motivo está ATIVO, então retorme mensagem indicando que já existe um motivo com o mesmo nome
		{
			ULOG(" Este nome já existe. \n");

			xml->createTag("MOTIVO");
				xml->addItem("UPDATE", "0");
			xml->closeTag();
  
			return 1;
		}
	}
       

	
    //###################################################
	//#				PROCESSO NORMAL						#
	//###################################################
	EXEC SQL UPDATE apoio.tipomotivocampanha 
	    SET		dstipomotivocampanha = :nmMotivo,
				sgtipomotivocampanha = :sgMotivo,
				INADERIU			 = :inAderiu,
				INATIVO				 = 1,
				IDUSUARIOALTERACAO=:idPessoaUsuarioAlteracao,
				DTULTIMAALTERACAO=SYSDATE
	    WHERE idtipomotivocampanha = :idMotivo;

		
  
	
	/* update OK */
	/* update OK */
	xml->createTag("MOTIVO");
		xml->addItem("UPDATE",sqlca.sqlerrd[2]);
	xml->closeTag();
  
	return 1;
}
