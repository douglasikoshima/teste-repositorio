//
// $Id: get_pergunta.pcpp,v 1.1 2009/07/31 15:33:54 a5110702 Exp $
//

#include "../../negocio/cmputil/include/campanha.hpp"

int get_pergunta(char * usuario,DOMNode*dnode,XMLGen*xml)
{
    char parm[2000];  
    try
    {
    EXEC SQL BEGIN DECLARE SECTION;
        int     idPergunta = 0;
        VARCHAR dsScriptPergunta[2000];
        int     sqApresentacao = 0;
        int     idTipoApresentacaoPergunta = 0;
        VARCHAR dsPergunta[2000];
        int     inDisponibilidade = 0;
        int     inEncerramento = 0;
        int     inObrigatoria = 0;
        int     idCanalCampanha = 0;
        VARCHAR cdCanal[255];
        VARCHAR nmCanal[255];
        int     inAtivo = 0;
        int     idPessoaUsuarioAlteracao = 0;
    EXEC SQL END DECLARE SECTION;
    EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
    EXEC SQL WHENEVER NOT FOUND DO break;

    //  Obtendo dados do xml
    get_tag(parm, dnode, "idPergunta", 0, 0);
    idPergunta = atoi(parm);

    //  Obtendo dados do xml
    get_tag(parm, dnode, "idCanalCampanha", 0, 0);
    idCanalCampanha = atoi(parm);

    // Pegando id do usuario
    idPessoaUsuarioAlteracao = get_idUsuario(usuario);

    inAtivo = 1;

    EXEC SQL DECLARE crsPergunta CURSOR FOR
       SELECT PERGUNTA.idpergunta,
          PERGUNTA.idtipoapresentacaopergunta,
          PERGUNTA.dspergunta,
          PERGUNTA.dsscriptpergunta,
          PERGUNTA.sqapresentacao,
          PERGUNTA.inencerramento,
          PERGUNTA.indisponibilidade,
	  PERGUNTA.inobrigatoria
       FROM questionario.Pergunta PERGUNTA
       WHERE PERGUNTA.idpergunta = :idPergunta;
    EXEC SQL OPEN crsPergunta;
            
    for(;;) 
    {

        EXEC SQL FETCH crsPergunta INTO :idPergunta, :idTipoApresentacaoPergunta, :dsPergunta, :dsScriptPergunta, :sqApresentacao, :inEncerramento, :inDisponibilidade, :inObrigatoria;

        endOraStr(dsScriptPergunta);  
        endOraStr(dsPergunta);  

            xml->addItem("idPergunta",idPergunta);
            xml->addItem("idTipoApresentacao",idTipoApresentacaoPergunta);
            xml->addItem("dsPergunta",(char *)dsPergunta.arr);
            xml->addItem("dsScriptPergunta",(char *)dsScriptPergunta.arr);
            xml->addItem("sqApresentacao",sqApresentacao);
            xml->addItem("inEncerramento",inEncerramento);
            xml->addItem("inDisponibilidade",inDisponibilidade);
            xml->addItem("inObrigatoria",inObrigatoria);
    }  
    EXEC SQL CLOSE crsPergunta;
  
    EXEC SQL DECLARE crsCanalCamp CURSOR FOR
         SELECT    CANALCAMPANHA.idcanalcampanha,
                   CANALCAMPANHA.sqapresentacao,
                   CANAL.cdcanal,
                   CANAL.nmcanal
         FROM      campanha.CanalCampanha CANALCAMPANHA,
                   apoio.Canal CANAL,
                   campanha.CanalUFOperadora CANALUFOPERADORA
         WHERE     CANALCAMPANHA.inativo = :inAtivo
         AND       CANALCAMPANHA.idcanalcampanha = :idCanalCampanha
         AND       CANALUFOPERADORA.idcanalufoperadora = CANALCAMPANHA.idcanalufoperadora 
         AND       CANAL.idcanal = CANALUFOPERADORA.idcanal
         ORDER BY CANALCAMPANHA.sqapresentacao;
    EXEC SQL OPEN crsCanalCamp;
            
    for(;;) 
    {
        EXEC SQL FETCH crsCanalCamp INTO :idCanalCampanha, :sqApresentacao, :cdCanal, :nmCanal;

        endOraStr(cdCanal);  
        endOraStr(nmCanal);  

        xml->createTag("CanalCampanha");
            xml->addItem("idCanalCampanha",idCanalCampanha);
            xml->addItem("nmCanal",(char *)nmCanal.arr);
            xml->addItem("inAtivo",inAtivo);
        xml->closeTag();
    }  
    EXEC SQL CLOSE crsCanalCamp;
    }
    catch( ... )
    {
        throw;
    }
    return 1;
}

