//
// $Id: get_questionario.pcpp,v 1.1 2009/07/31 15:33:51 a5110702 Exp $
//

#include "../../negocio/cmputil/include/campanha.hpp"

int get_questionario( char* usuario, DOMNode*dnode, XMLGen*xml )
{
  int existReg;
  EXEC SQL BEGIN DECLARE SECTION;
 	struct
  	{
	    VARCHAR idPergunta[21+1];
	    VARCHAR idCanalCampanha[21+1];
	    VARCHAR idCanalUfOperadora[21+1];
	    VARCHAR idTipoApresentacaoPergunta[21+1];
	    VARCHAR sgTipoApresentacaoPergunta[255+1];
	    VARCHAR dsPergunta[2000];
	    VARCHAR inObrigatoria[21+1];
	    VARCHAR inEncerramento[21+1];
	    VARCHAR inDisponibilidade[21+1];
	    VARCHAR sqApresentacao[21+1];
	    VARCHAR dsScriptPergunta[2000];
	    VARCHAR idResposta[21+1];
	    VARCHAR dsResposta[2000];
	    VARCHAR dsScriptResposta[2000];
	    VARCHAR idProximaPergunta[21+1];
	    short   dsScriptPerguntaInt;
	    short   dsScriptRespostaInt;
	}stRegistro;
    char idPergunta[21+1];
    char idCanalCampanha[21+1];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
  EXEC SQL WHENEVER NOT FOUND DO cl_flag(&existReg);

  try 
  {
  	memset( &stRegistro, 0, sizeof( stRegistro ) );
    //  Obtendo dados do xml
    get_tag(idPergunta,dnode,"idPergunta",0,0);
    get_tag(idCanalCampanha,dnode,"idCanalCampanha",0,0);

	strToOra(stRegistro.idPergunta,idPergunta); 
	strToOra(stRegistro.idCanalCampanha,idCanalCampanha); 

    //Cursor de QUESTIONARIO
	EXEC SQL DECLARE crsQuest CURSOR FOR
    SELECT 
    	IDCANALUFOPERADORA,
		IDPERGUNTA, 
		IDTIPOAPRESENTACAOPERGUNTA, 
		SGTIPOAPRESENTACAOPERGUNTA, 
		DSPERGUNTA, 
		INOBRIGATORIA, 
		INENCERRAMENTO, 
		INDISPONIBILIDADE, 
		SQAPRESENTACAO, 
		DSSCRIPTPERGUNTA
	FROM
		CAMPANHA.CAMPANHAQUESTIONARIOV01 CAMPANHAQUESTIONARIO
	WHERE
		IDCANALCAMPANHA = :stRegistro.idCanalCampanha
	AND
		IDPERGUNTA >= :stRegistro.idPergunta
	AND
		INDISPONIBILIDADE = 1
	AND
		IDTIPOAPRESENTACAOPERGUNTA  IN (2,4,5)
	AND
	(
		IDPERGUNTA IN 
		(
			SELECT  
				IDPERGUNTA    
		 	FROM
		 		QUESTIONARIO.RESPOSTA
			WHERE
				INDISPONIBILIDADE != 0
			AND
				IDPERGUNTA = CAMPANHAQUESTIONARIO.IDPERGUNTA
		)
		OR 
			IDTIPOAPRESENTACAOPERGUNTA = 5
	)
    ORDER BY SQAPRESENTACAO;

    //Cursor de RESPOSTA
    EXEC SQL DECLARE crsResp CURSOR FOR
	SELECT 
		IDRESPOSTA,
		DSRESPOSTA, 
		DSSCRIPTRESPOSTA, 
	    INENCERRAMENTO, 
	    INDISPONIBILIDADE, 
	    SQAPRESENTACAO
	FROM
		QUESTIONARIO.RESPOSTA
	WHERE
		INDISPONIBILIDADE != 0
	AND
		IDPERGUNTA = :stRegistro.idPergunta
	ORDER BY 
		SQAPRESENTACAO;

    EXEC SQL OPEN crsQuest;

    // Loop de criacao da arvore
    existReg = 1;
    while( existReg )
    {
    	//Esta variavel serah atualizado pela funcao cl_flag(&existReg)
    	existReg = 1;
      	stRegistro.dsScriptRespostaInt = 0;
      	EXEC SQL FETCH crsQuest 
		INTO 
			:stRegistro.idCanalUfOperadora, 
			:stRegistro.idPergunta, 
			:stRegistro.idTipoApresentacaoPergunta, 
			:stRegistro.sgTipoApresentacaoPergunta, 
			:stRegistro.dsPergunta,
            :stRegistro.inObrigatoria, 
            :stRegistro.inEncerramento, 
            :stRegistro.inDisponibilidade, 
            :stRegistro.sqApresentacao, 
            :stRegistro.dsScriptPergunta:stRegistro.dsScriptPerguntaInt;

    	//Esta variavel serah atualizado pela funcao cl_flag(&existReg)
		if ( existReg )
		{
			if( stRegistro.dsScriptRespostaInt < 0 ) 
			{ 
				strToOra(stRegistro.dsScriptPergunta,"null"); 
			}
			endOraStr(stRegistro.dsPergunta);
			endOraStr(stRegistro.dsScriptPergunta);
		
			xml->createTag("tns:PerguntaQuestionarioVO");
			xml->addItem("idPergunta",(char*)stRegistro.idPergunta.arr);
			xml->addItem("dsPergunta",(char*)stRegistro.dsPergunta.arr);
			xml->addItem("idTipoApresentacaoPergunta",(char*)stRegistro.idTipoApresentacaoPergunta.arr);
			xml->addItem("sgTipoApresentacaoPergunta",(char*)stRegistro.sgTipoApresentacaoPergunta.arr);
			xml->addItem("inObrigatoria",(char*)stRegistro.inObrigatoria.arr);
			xml->addItem("inEncerramento",(char*)stRegistro.inEncerramento.arr);
			xml->addItem("inDisponibilidade",(char*)stRegistro.inDisponibilidade.arr);
			xml->addItem("sqApresentacao",(char*)stRegistro.sqApresentacao.arr);
			xml->addItem("dsScriptPergunta",(char*)stRegistro.dsScriptPergunta.arr);
	
			// Pegando lista de respostas para esta pergunta
			EXEC SQL OPEN crsResp;    
			while( existReg )
			{
	  			stRegistro.dsScriptRespostaInt = 0;
	  			EXEC SQL FETCH crsResp 
	    		INTO 
	    			:stRegistro.idResposta, 
	    			:stRegistro.dsResposta, 
	    			:stRegistro.dsScriptResposta:stRegistro.dsScriptRespostaInt, 
                 	:stRegistro.inEncerramento,
                 	:stRegistro.inDisponibilidade,
                 	:stRegistro.sqApresentacao; 

    			//Esta variavel serah atualizado pela funcao cl_flag(&existReg)
	  			if ( existReg )
	  			{
	    			EXEC SQL 
		  			SELECT 
		  				IDPERGUNTA 
		  			INTO
		  				:stRegistro.idProximaPergunta
		  			FROM
		  				QUESTIONARIO.RESPOSTAPROXIMAPERGUNTA
	      			WHERE
	      				IDRESPOSTA = :stRegistro.idResposta
		  			AND 
		  				INATIVO = 1;
	    
    				//Esta variavel serah atualizado pela funcao cl_flag(&existReg)
					if(!existReg) 
					{
						strToOra(stRegistro.idProximaPergunta,"0"); 
						existReg = 1;
					}
	    			if( stRegistro.dsScriptRespostaInt < 0 )
	    			{ 
	    				strToOra(stRegistro.dsScriptResposta,"null"); 
	    			}

				    endOraStr(stRegistro.dsResposta);
				    endOraStr(stRegistro.dsScriptResposta);
				    
				    xml->createTag("tns:RespostasQuestionarioVO");
				    xml->addItem("idResposta",(char*)stRegistro.idResposta.arr);
				    xml->addItem("dsResposta",(char*)stRegistro.dsResposta.arr);
				    xml->addItem("dsScriptResposta",(char*)stRegistro.dsScriptResposta.arr);
				    xml->addItem("inEncerramento",(char*)stRegistro.inEncerramento.arr);
				    xml->addItem("inDisponibilidade",(char*)stRegistro.inDisponibilidade.arr);
				    xml->addItem("sqApresentacao",(char*)stRegistro.sqApresentacao.arr);
				    xml->addItem("idProximaPergunta",(char*)stRegistro.idProximaPergunta.arr);
				    xml->closeTag();  
	  			}//if ( existReg )
			}//while( existReg )
			EXEC SQL CLOSE crsResp;    
			existReg = 1;
			xml->closeTag();// Fechando pergunta
      	}//if ( existReg )
    }//while( existReg )
    
    EXEC SQL CLOSE crsQuest;
    
  }
  catch(...)
  {
    throw;
  }

  return 1;
}

