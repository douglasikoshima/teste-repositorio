#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <CListaCampanhaHistorico.h>

CListaCampanhaHistorico::CListaCampanhaHistorico()
{
}

CListaCampanhaHistorico::~CListaCampanhaHistorico()
{
}

int CListaCampanhaHistorico::ListId( char* cid, char* dtini, char* dtter )
{
  int    iCont = 0;
  struct sqlca sqlca;
  EXEC SQL BEGIN DECLARE SECTION;
  char* cidOra = cid;
  char* dtiniOra = dtini;
  char* dtterOra = dtter;
  struct
  {
    VARCHAR stidCampanha[21+1];
    VARCHAR stdsCampanha[256+1];
    VARCHAR stsgCampanha[256+1];
    VARCHAR stidSubCampanhaHistorico[12+1];
    VARCHAR stdsScriptSubCampanha[12+1];
    VARCHAR stidCanal[21+1];
    VARCHAR stcdCanal[21+1];
    VARCHAR stnmCanal[21+1];
    VARCHAR stidMotivoCampanha[256+1];
    VARCHAR stidAtendimentoCampanha[256+1];
    VARCHAR stdtAtendimento[256+1];
    VARCHAR stqtTempoAtendimento[256+1];
    VARCHAR stidUFOperadora[256+1];
    VARCHAR stidPessoaDeParaOperadora[256+1];
    VARCHAR stidTipoStatusCampanha[256+1];
    VARCHAR stidTipoMotivoCampanha[256+1];
    VARCHAR stidTipoSubMotivoCampanha[256+1];
    VARCHAR stidSubCampanhaFixa[256+1];
    VARCHAR stdsTipoSubMotivoCampanha[256+1];
    VARCHAR stsgTipoSubMotivoCampanha[256+1];
    VARCHAR stdsTipoStatusCampanha[256+1];
    VARCHAR stsgTipoStatusCampanha[256+1];
    VARCHAR stdsTipoMotivoCampanha[256+1];
    VARCHAR stsgTipoMotivoCampanha[256+1];
    VARCHAR stidListaConteudo[256+1];
    VARCHAR stidPessoaDePara[256+1];
    VARCHAR stidCanalCampanha[256+1];
    VARCHAR stidCanalUfOperadora[256+1];
	VARCHAR stsgUfOperadora[256+1];
	VARCHAR stnmSubCampanha[255+1];
  } stListaCampanhaHistoricoRegistro;
  struct
  {
    short iidCampanha;
    short idsCampanha;
    short isgCampanha;
    short iidSubCampanhaHistorico;
    short idsScriptSubCampanha;
    short iidCanal;
    short icdCanal;
    short inmCanal;
    short iidMotivoCampanha;
    short iidAtendimentoCampanha;
    short idtAtendimento;
    short iqtTempoAtendimento;
    short iidUFOperadora;
    short iidPessoaDeParaOperadora;
    short iidTipoStatusCampanha;
    short iidTipoMotivoCampanha;
    short iidTipoSubMotivoCampanha;
    short iidSubCampanhaFixa;
    short idsTipoSubMotivoCampanha;
    short isgTipoSubMotivoCampanha;
    short idsTipoStatusCampanha;
    short isgTipoStatusCampanha;
    short idsTipoMotivoCampanha;
    short isgTipoMotivoCampanha;
    short iidListaConteudo;
    short iidPessoaDePara;
    short iidCanalCampanha;
    short iidCanalUfOperadora;
	short isgUfOperadora;
	short inmSubCampanha;
  } stListaCampanhaHistoricoIndicator;
  EXEC SQL END DECLARE SECTION;

  ZeraListaCampanhaHistorico();

  EXEC SQL WHENEVER NOT FOUND DO break;
  EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
  sqlca.sqlcode=0;

  EXEC SQL DECLARE CursorListaCampanhaHistoricoId CURSOR FOR
  SELECT 
		CAMPANHA.IDCAMPANHA,
		CAMPANHA.DSCAMPANHA,
		CAMPANHA.SGCAMPANHA,
		SUBCAMPANHAHISTORICO.IDSUBCAMPANHAHISTORICO,
		SUBCAMPANHAHISTORICO.DSSCRIPTSUBCAMPANHA,
		CANAL.IDCANAL,
		CANAL.CDCANAL,
		CANAL.NMCANAL,
		MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA,
		ATENDIMENTOCAMPANHA.IDATENDIMENTOCAMPANHA,
		to_char(ATENDIMENTOCAMPANHA.DTATENDIMENTO,'DD/MM/YYYY'),
		ATENDIMENTOCAMPANHA.QTTEMPOATENDIMENTO,
		UFOPERADORA.IDUFOPERADORA,
		UFOPERADORA.IDPESSOADEPARAOPERADORA,
		MOTIVOCAMPANHA.IDTIPOSTATUSCAMPANHA,
		MOTIVOCAMPANHA.IDMOTIVOCAMPANHA,
		MOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA,
		SUBCAMPANHAFIXA.IDSUBCAMPANHAFIXA,
		TIPOSUBMOTIVOCAMPANHA.DSTIPOSUBMOTIVOCAMPANHA,
		TIPOSUBMOTIVOCAMPANHA.SGTIPOSUBMOTIVOCAMPANHA,
		TIPOSTATUSCAMPANHA.DSTIPOSTATUSCAMPANHA,
		TIPOSTATUSCAMPANHA.SGTIPOSTATUSCAMPANHA,
		TIPOMOTIVOCAMPANHA.DSTIPOMOTIVOCAMPANHA,
		TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA,
		LISTACONTEUDO.IDLISTACONTEUDO,
		PESSOALISTA.IDPESSOADEPARA,
		CANALCAMPANHA.IDCANALCAMPANHA,
		CANALUFOPERADORA.IDCANALUFOPERADORA,
		APOIO.UF.SGUF,
	    SUBCAMPANHAFIXA.NMSUBCAMPANHAFIXA
	FROM  
		APOIO.CANAL CANAL,
		CAMPANHA.CANALUFOPERADORA CANALUFOPERADORA,
		CUSTOMER.UFOPERADORA UFOPERADORA,
		CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
		CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
		CAMPANHA.LISTACONTEUDO LISTACONTEUDO,
		CAMPANHA.PESSOALISTA PESSOALISTA,
		CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO,
		CAMPANHA.SUBCAMPANHAFIXA SUBCAMPANHAFIXA,
		APOIO.CAMPANHA CAMPANHA,
		CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
		APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA,
		APOIO.TIPOSUBMOTIVOCAMPANHA TIPOSUBMOTIVOCAMPANHA,
		APOIO.TIPOSTATUSCAMPANHA TIPOSTATUSCAMPANHA,
		APOIO.UF
    WHERE 
			CANAL.IDCANAL = CANALUFOPERADORA.IDCANAL
		AND 
			UFOPERADORA.IDUFOPERADORA = CANALUFOPERADORA.IDUFOPERADORA
		AND 
			CANALUFOPERADORA.IDCANALUFOPERADORA = CANALCAMPANHA.IDCANALUFOPERADORA
		AND 
			CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND 
			LISTACONTEUDO.IDLISTACONTEUDO = ATENDIMENTOCAMPANHA.IDLISTACONTEUDO
		AND 
			LISTACONTEUDO.IDLISTACONTEUDO = PESSOALISTA.IDLISTACONTEUDO
		AND 
			SUBCAMPANHAHISTORICO.IDSUBCAMPANHAHISTORICO = CANALCAMPANHA.IDSUBCAMPANHAHISTORICO
		AND 
			SUBCAMPANHAFIXA.IDSUBCAMPANHAFIXA = SUBCAMPANHAHISTORICO.IDSUBCAMPANHAFIXA
		AND 
			CAMPANHA.IDCAMPANHA = SUBCAMPANHAFIXA.IDCAMPANHA
		AND 
			MOTIVOCAMPANHA.IDMOTIVOCAMPANHA = ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA
		AND 
			TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND 
			TIPOSUBMOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA
		AND 
			TIPOSTATUSCAMPANHA.IDTIPOSTATUSCAMPANHA = MOTIVOCAMPANHA.IDTIPOSTATUSCAMPANHA
		AND 
			PESSOALISTA.IDPESSOADEPARA = :cidOra
		AND 
			ATENDIMENTOCAMPANHA.DTATENDIMENTO >= TO_DATE(:dtiniOra || ' 00:00:00','DD/MM/YYYY HH24:MI:SS')
		AND 
			ATENDIMENTOCAMPANHA.DTATENDIMENTO <= TO_DATE(:dtterOra || ' 23:59:59','DD/MM/YYYY HH24:MI:SS')
		AND 
			UFOPERADORA.IDUFOPERADORA=APOIO.UF.IDUF;

  EXEC SQL OPEN CursorListaCampanhaHistoricoId;
        
  if(sqlca.sqlcode)
    return 0;
  else
    {
      for(;;)
	{
	  memset( &stListaCampanhaHistoricoRegistro, 0, sizeof(stListaCampanhaHistoricoRegistro) );
	  EXEC SQL FETCH CursorListaCampanhaHistoricoId INTO :stListaCampanhaHistoricoRegistro:stListaCampanhaHistoricoIndicator;

	  Add( (char*)stListaCampanhaHistoricoRegistro.stidCampanha.arr, 
	       (char*)stListaCampanhaHistoricoRegistro.stdsCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidSubCampanhaHistorico.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsScriptSubCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stcdCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stnmCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidAtendimentoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdtAtendimento.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stqtTempoAtendimento.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidUFOperadora.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidPessoaDeParaOperadora.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidSubCampanhaFixa.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidListaConteudo.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidPessoaDePara.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanalCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanalUfOperadora.arr,
		   (char*)stListaCampanhaHistoricoRegistro.stsgUfOperadora.arr,
		   (char*)stListaCampanhaHistoricoRegistro.stnmSubCampanha.arr);
	  iCont++;

	}
      EXEC SQL CLOSE CursorListaCampanhaHistoricoId;
    }

  return iCont;

 GotoListId:
  throw TuxBasicOraException(sqlca.sqlcode);

}

int CListaCampanhaHistorico::ListAll( void )
{
  int    iCont = 0;
  struct sqlca sqlca;
  EXEC SQL BEGIN DECLARE SECTION;
  struct
  {
    VARCHAR stidCampanha[21+1];
    VARCHAR stdsCampanha[256+1];
    VARCHAR stsgCampanha[256+1];
    VARCHAR stidSubCampanhaHistorico[12+1];
    VARCHAR stdsScriptSubCampanha[12+1];
    VARCHAR stidCanal[21+1];
    VARCHAR stcdCanal[21+1];
    VARCHAR stnmCanal[21+1];
    VARCHAR stidMotivoCampanha[256+1];
    VARCHAR stidAtendimentoCampanha[256+1];
    VARCHAR stdtAtendimento[256+1];
    VARCHAR stqtTempoAtendimento[256+1];
    VARCHAR stidUFOperadora[256+1];
    VARCHAR stidPessoaDeParaOperadora[256+1];
    VARCHAR stidTipoStatusCampanha[256+1];
    VARCHAR stidTipoMotivoCampanha[256+1];
    VARCHAR stidTipoSubMotivoCampanha[256+1];
    VARCHAR stidSubCampanhaFixa[256+1];
    VARCHAR stdsTipoSubMotivoCampanha[256+1];
    VARCHAR stsgTipoSubMotivoCampanha[256+1];
    VARCHAR stdsTipoStatusCampanha[256+1];
    VARCHAR stsgTipoStatusCampanha[256+1];
    VARCHAR stdsTipoMotivoCampanha[256+1];
    VARCHAR stsgTipoMotivoCampanha[256+1];
    VARCHAR stidListaConteudo[256+1];
    VARCHAR stidPessoaDePara[256+1];
    VARCHAR stidCanalCampanha[256+1];
    VARCHAR stidCanalUfOperadora[256+1];
	VARCHAR stsgUfOperadora[256+1];
	VARCHAR stnmSubCampanha[255+1];
  } stListaCampanhaHistoricoRegistro;
  struct
  {
    short iidCampanha;
    short idsCampanha;
    short isgCampanha;
    short iidSubCampanhaHistorico;
    short idsScriptSubCampanha;
    short iidCanal;
    short icdCanal;
    short inmCanal;
    short iidMotivoCampanha;
    short iidAtendimentoCampanha;
    short idtAtendimento;
    short iqtTempoAtendimento;
    short iidUFOperadora;
    short iidPessoaDeParaOperadora;
    short iidTipoStatusCampanha;
    short iidTipoMotivoCampanha;
    short iidTipoSubMotivoCampanha;
    short iidSubCampanhaFixa;
    short idsTipoSubMotivoCampanha;
    short isgTipoSubMotivoCampanha;
    short idsTipoStatusCampanha;
    short isgTipoStatusCampanha;
    short idsTipoMotivoCampanha;
    short isgTipoMotivoCampanha;
    short iidListaConteudo;
    short iidPessoaDePara;
    short iidCanalCampanha;
    short iidCanalUfOperadora;
	short isgUfOperadora;
	short inmSubCampanha;
  } stListaCampanhaHistoricoIndicator;
  EXEC SQL END DECLARE SECTION;

  ZeraListaCampanhaHistorico();

  EXEC SQL WHENEVER NOT FOUND DO break;
  EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
  sqlca.sqlcode=0;

  EXEC SQL DECLARE CursorListaCampanhaHistoricoAll CURSOR FOR
    SELECT CAMPANHA.IDCAMPANHA,
		CAMPANHA.DSCAMPANHA,
		CAMPANHA.SGCAMPANHA,
		SUBCAMPANHAHISTORICO.IDSUBCAMPANHAHISTORICO,
		SUBCAMPANHAHISTORICO.DSSCRIPTSUBCAMPANHA,
		CANAL.IDCANAL,
		CANAL.CDCANAL,
		CANAL.NMCANAL,
		MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA,
		ATENDIMENTOCAMPANHA.IDATENDIMENTOCAMPANHA,
		to_char(ATENDIMENTOCAMPANHA.DTATENDIMENTO,'DD/MM/YYYY'),
		ATENDIMENTOCAMPANHA.QTTEMPOATENDIMENTO,
		UFOPERADORA.IDUFOPERADORA,
		UFOPERADORA.IDPESSOADEPARAOPERADORA,
		MOTIVOCAMPANHA.IDTIPOSTATUSCAMPANHA,
		MOTIVOCAMPANHA.IDMOTIVOCAMPANHA,
		MOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA,
		SUBCAMPANHAFIXA.IDSUBCAMPANHAFIXA,
		TIPOSUBMOTIVOCAMPANHA.DSTIPOSUBMOTIVOCAMPANHA,
		TIPOSUBMOTIVOCAMPANHA.SGTIPOSUBMOTIVOCAMPANHA,
		TIPOSTATUSCAMPANHA.DSTIPOSTATUSCAMPANHA,
		TIPOSTATUSCAMPANHA.SGTIPOSTATUSCAMPANHA,
		TIPOMOTIVOCAMPANHA.DSTIPOMOTIVOCAMPANHA,
		TIPOMOTIVOCAMPANHA.SGTIPOMOTIVOCAMPANHA,
		LISTACONTEUDO.IDLISTACONTEUDO,
		PESSOALISTA.IDPESSOADEPARA,
		CANALCAMPANHA.IDCANALCAMPANHA,
		CANALUFOPERADORA.IDCANALUFOPERADORA,
		APOIO.UF.SGUF,
	    SUBCAMPANHAHISTORICO.nmSubCampanha
    FROM APOIO.CANAL CANAL,
		CAMPANHA.CANALUFOPERADORA CANALUFOPERADORA,
		CUSTOMER.UFOPERADORA UFOPERADORA,
		CAMPANHA.CANALCAMPANHA CANALCAMPANHA,
		CAMPANHA.ATENDIMENTOCAMPANHA ATENDIMENTOCAMPANHA,
		CAMPANHA.LISTACONTEUDO LISTACONTEUDO,
		CAMPANHA.PESSOALISTA PESSOALISTA,
		CAMPANHA.SUBCAMPANHAHISTORICO SUBCAMPANHAHISTORICO,
		CAMPANHA.SUBCAMPANHAFIXA SUBCAMPANHAFIXA,
		APOIO.CAMPANHA CAMPANHA,
		CAMPANHA.MOTIVOCAMPANHA MOTIVOCAMPANHA,
		APOIO.TIPOMOTIVOCAMPANHA TIPOMOTIVOCAMPANHA,
		APOIO.TIPOSUBMOTIVOCAMPANHA TIPOSUBMOTIVOCAMPANHA,
		APOIO.TIPOSTATUSCAMPANHA TIPOSTATUSCAMPANHA,
		APOIO.UF
    WHERE CANAL.IDCANAL = CANALUFOPERADORA.IDCANAL
		AND UFOPERADORA.IDUFOPERADORA = CANALUFOPERADORA.IDUFOPERADORA
		AND CANALUFOPERADORA.IDCANALUFOPERADORA = CANALCAMPANHA.IDCANALUFOPERADORA
		AND CANALCAMPANHA.IDCANALCAMPANHA = ATENDIMENTOCAMPANHA.IDCANALCAMPANHA
		AND LISTACONTEUDO.IDLISTACONTEUDO = ATENDIMENTOCAMPANHA.IDLISTACONTEUDO
		AND LISTACONTEUDO.IDLISTACONTEUDO = PESSOALISTA.IDLISTACONTEUDO
		AND SUBCAMPANHAHISTORICO.IDSUBCAMPANHAHISTORICO = CANALCAMPANHA.IDSUBCAMPANHAHISTORICO
		AND SUBCAMPANHAFIXA.IDSUBCAMPANHAFIXA = SUBCAMPANHAHISTORICO.IDSUBCAMPANHAFIXA
		AND CAMPANHA.IDCAMPANHA = SUBCAMPANHAFIXA.IDCAMPANHA
		AND MOTIVOCAMPANHA.IDMOTIVOCAMPANHA = ATENDIMENTOCAMPANHA.IDMOTIVOCAMPANHA
		AND TIPOMOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDTIPOMOTIVOCAMPANHA
		AND TIPOSUBMOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA = MOTIVOCAMPANHA.IDTIPOSUBMOTIVOCAMPANHA
		AND TIPOSTATUSCAMPANHA.IDTIPOSTATUSCAMPANHA = MOTIVOCAMPANHA.IDTIPOSTATUSCAMPANHA
	  	AND UFOPERADORA.IDUFOPERADORA=APOIO.UF.IDUF
		and rownum <=20;

  EXEC SQL OPEN CursorListaCampanhaHistoricoAll;

  /*if(sqlca.sqlcode)
    return 0;
  else
    {*/
      for(;;)
	{
	  memset( &stListaCampanhaHistoricoRegistro, 0, sizeof(stListaCampanhaHistoricoRegistro) );
	  EXEC SQL FETCH CursorListaCampanhaHistoricoAll INTO :stListaCampanhaHistoricoRegistro:stListaCampanhaHistoricoIndicator;

	  Add( (char*)stListaCampanhaHistoricoRegistro.stidCampanha.arr, 
	       (char*)stListaCampanhaHistoricoRegistro.stdsCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidSubCampanhaHistorico.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsScriptSubCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stcdCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stnmCanal.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidAtendimentoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdtAtendimento.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stqtTempoAtendimento.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidUFOperadora.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidPessoaDeParaOperadora.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidSubCampanhaFixa.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoSubMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoStatusCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stdsTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgTipoMotivoCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidListaConteudo.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidPessoaDePara.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanalCampanha.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stidCanalUfOperadora.arr,
	       (char*)stListaCampanhaHistoricoRegistro.stsgUfOperadora.arr,
		   (char*)stListaCampanhaHistoricoRegistro.stnmSubCampanha.arr);
	  iCont++;

	}
      EXEC SQL CLOSE CursorListaCampanhaHistoricoAll;
    //}

  return iCont;

 GotoListAll:
  throw TuxBasicOraException(sqlca.sqlcode);

}

void CListaCampanhaHistorico::GetXml( char* cNomeTag, XMLGen*xml )
{
  if( Quantidade() > 0 )
    {
      for( int x = 0; x < Quantidade(); x++ )
	{
	  if( cNomeTag != NULL )
	    {
	      xml->createTag(cNomeTag);
	    }
	  if( Registro( x ) != NULL )
	    {
	      xml->createTag("tns:CampanhaHistorico");
	      xml->addItem("idCampanha", Registro(x)->cidCampanha );
	       //xml->addItem("dsCampanha", Registro(x)->cdsCampanha );
	      xml->addItem("sgCampanha", Registro(x)->csgCampanha );
	      xml->addItem("idSubCampanha", Registro(x)->cidSubCampanhaHistorico );
	      xml->addItem("sgSubCampanha", Registro(x)->cnmSubCampanha);
	       //xml->addItem("dsScriptSubCampanha", Registro(x)->cdsScriptSubCampanha );
	      xml->addItem("idCanal", Registro(x)->cidCanal );
	       ///xml->addItem("cdCanal", Registro(x)->ccdCanal );
	      xml->addItem("sgCanal", Registro(x)->cnmCanal );
	       //xml->addItem("nmCanal", Registro(x)->cnmCanal );
	       //xml->addItem("idMotivoCampanha", Registro(x)->cidMotivoCampanha );
	      xml->addItem("dtAtendimento", Registro(x)->cdtAtendimento );
	       //xml->addItem("qtTempoAtendimento", Registro(x)->cqtTempoAtendimento );
	       //xml->addItem("idUFOperadora", Registro(x)->cidUFOperadora );
	      xml->addItem("idOperadora", Registro(x)->cidUFOperadora );
	      xml->addItem("sgOperadora", Registro(x)->csgUfOperadora );
	      xml->addItem("idMotivo", Registro(x)->cidMotivoCampanha );
	      xml->addItem("sgMotivo", Registro(x)->csgTipoMotivoCampanha );
	      xml->addItem("idSubMotivo", Registro(x)->cidTipoSubMotivoCampanha );
	      xml->addItem("sgSubMotivo", Registro(x)->csgTipoSubMotivoCampanha );
	      xml->addItem("idStatus", Registro(x)->cidTipoStatusCampanha );
	      xml->addItem("sgStatus", Registro(x)->cdsTipoStatusCampanha );
		  xml->addItem("vlTempoMedio", Registro(x)->cqtTempoAtendimento );
	       //xml->addItem("idPessoaDeParaOperadora", Registro(x)->cidPessoaDeParaOperadora );
	       //xml->addItem("idTipoStatusCampanha", Registro(x)->cidTipoStatusCampanha );
	       //xml->addItem("idTipoMotivoCampanha", Registro(x)->cidTipoMotivoCampanha );
	       //xml->addItem("idSubCampanhaFixa", Registro(x)->cidSubCampanhaFixa );
	       //xml->addItem("dsTipoSubMotivoCampanha", Registro(x)->cdsTipoSubMotivoCampanha );
	       //xml->addItem("sgTipoSubMotivoCampanha", Registro(x)->csgTipoSubMotivoCampanha );
	       //xml->addItem("dsTipoStatusCampanha", Registro(x)->cdsTipoStatusCampanha );
	       //xml->addItem("sgTipoStatusCampanha", Registro(x)->csgTipoStatusCampanha );
	       //xml->addItem("dsTipoMotivoCampanha", Registro(x)->cdsTipoMotivoCampanha );   
	       //xml->addItem("sgTipoMotivoCampanha", Registro(x)->csgTipoMotivoCampanha );
	       //xml->addItem("idListaConteudo", Registro(x)->cidListaConteudo );
	       //xml->addItem("idPessoaDePara", Registro(x)->cidPessoaDePara );
	       //xml->addItem("idCanalCampanha", Registro(x)->cidCanalCampanha );
	       //xml->addItem("idCanalUfOperadora", Registro(x)->cidCanalUfOperadora );
		xml->addItem("idAtendimentoCampanha", Registro(x)->cidAtendimentoCampanha );
	      xml->closeTag();
	    }
	  if( cNomeTag != NULL )
	    xml->closeTag();
	}
    }
}
