//
// $Id: del_motivocampanha.pcpp,v 1.1 2009/07/31 15:35:04 a5110702 Exp $
//

#include "../../negocio/cmputil/include/campanha.hpp"


int iValidaDependencias(int iIdMotivoCampanha, XMLGen*xml);
void ItemNaoApagado(XMLGen*xml);
void ItemApagado(XMLGen*xml);
int iValidaExistencia(XMLGen*xml,int iIdSubCampanhaHistorico, int iIdTipoStatusCampanha);


int del_motivoCampanha(char * usuario, DOMNode*dnode,XMLGen*xml)
{
	char	parm[256];
	int		iDependencias = 0;
	int		iExistenciaReg = 0;
	int		iItemApagado = 0;
	int		iItemNaoApagado = 0;
	EXEC SQL BEGIN DECLARE SECTION;

	int	idSubCampanhaHistorico = 0;
	int	idTipoStatusCampanha = 0;

		int		idMotivoCampanha = 0;
		int		inAtivo = 0;
		int     idUsuarioAlteracao = 0;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);

    //  Obtendo dados do xml
	get_tag(parm, dnode, "idSubCampanhaHistorico", 0, 0);
	idSubCampanhaHistorico = atoi(parm);

	get_tag(parm, dnode, "idTipoStatusCampanha", 0, 0);
	idTipoStatusCampanha = atoi(parm);

	// Pegando id do usuario
	idUsuarioAlteracao = get_idUsuario(usuario);
	
	inAtivo = 0;

	iExistenciaReg = iValidaExistencia (xml, idSubCampanhaHistorico, idTipoStatusCampanha) ;
	
	if (iExistenciaReg == 0)
	{
		ULOG(" Existen registros %d", iExistenciaReg);
		
		EXEC SQL DECLARE crsMotivoCampanha CURSOR FOR
		SELECT	mc.idMotivoCampanha
		FROM	Campanha.MotivoCampanha mc
		WHERE	mc.inativo = 1 AND 
				mc.idSubCampanhaHistorico = :idSubCampanhaHistorico AND
				mc.idTipoStatusCampanha = :idTipoStatusCampanha;
		
		EXEC SQL OPEN crsMotivoCampanha;
		
		for(;;)
		{
			
			EXEC SQL FETCH crsMotivoCampanha INTO :idMotivoCampanha;

			/*Valida dependencias. CVA 26/08/2004 */
			iDependencias = iValidaDependencias(idMotivoCampanha,xml);

			if (iDependencias == 0)
			{
				
				// Update linha 
				EXEC SQL UPDATE Campanha.MotivoCampanha
					SET inativo = :inAtivo,
						idUsuarioAlteracao = :idUsuarioAlteracao,
						dtUltimaAlteracao = sysdate
					WHERE idmotivocampanha = :idMotivoCampanha;
				
				ULOG("ACTUALIZANDO ITEMS");
				if (iItemApagado == 0)	
				{
					ULOG("----- APAGO EL ITEM ---- ");
					ItemApagado(xml);
					iItemApagado =1;
				}
			}
			else
			{
				if (iItemNaoApagado == 0)
				{
					ItemNaoApagado(xml);
					iItemNaoApagado = 1;
				}
			}
  
			if (sqlca.sqlcode)
			{
				throw new TuxBasicSvcException("00E1000","UPDATE Campanha.MotivoCampanha ");
			}
		}
  
		EXEC SQL CLOSE crsMotivoCampanha;  
	}
	else
	{
		ItemNaoApagado(xml);
	}

	return 1;
}

int iValidaExistencia(XMLGen*xml,int iIdSubCampanhaHistorico, int iIdTipoStatusCampanha)
{
	EXEC SQL BEGIN DECLARE SECTION;
		int idSubCampanhaHistorico = 0; 
		int idTipoStatusCampanha = 0; 
		int	idMotivoCampanha = 0;
	EXEC SQL END DECLARE SECTION;
	int		iDependencias = 0;


	idSubCampanhaHistorico = iIdSubCampanhaHistorico;
	idTipoStatusCampanha = iIdTipoStatusCampanha;

	EXEC SQL DECLARE crsMotivoCampanhaExistentes CURSOR FOR
		SELECT idAtendimentoCampanha
		FROM   campanha.AtendimentoCampanha
		
		WHERE  (idMotivoCampanha in 
			(
			SELECT	mc.idMotivoCampanha
			FROM	Campanha.MotivoCampanha mc
			WHERE	mc.inativo = 1 AND 
					mc.idSubCampanhaHistorico = :idSubCampanhaHistorico AND
					mc.idTipoStatusCampanha = :idTipoStatusCampanha
			)
		);

	EXEC SQL OPEN crsMotivoCampanhaExistentes;
	
	for(;;)
	{
		
		EXEC SQL FETCH crsMotivoCampanhaExistentes INTO :idMotivoCampanha;
		if (idMotivoCampanha > 0)
		{
			EXEC SQL CLOSE crsMotivoCampanhaExistentes;
			return 1;
		}
		
	}
	

	EXEC SQL CLOSE crsMotivoCampanhaExistentes;

	return 0;

}

int iValidaDependencias(int iIdMotivoCampanha, XMLGen*xml)
{
	EXEC SQL BEGIN DECLARE SECTION;
		int     idMotivoCampanha = 0;
		int		idAtendimentoCampanha = 0;
		
	EXEC SQL END DECLARE SECTION;

  
	try{
		idMotivoCampanha = iIdMotivoCampanha;

/*================================================================================*/	
/*======================= Valida Dependencias CanalCampanha ======================*/
/*================================================================================*/
	
		EXEC SQL DECLARE crsAtendimentoCampanha CURSOR FOR
                SELECT idAtendimentoCampanha
                FROM   campanha.AtendimentoCampanha
                WHERE  (idMotivoCampanha = :idMotivoCampanha );

		EXEC SQL OPEN crsAtendimentoCampanha;

		for(;;) 
		{
			EXEC SQL FETCH crsAtendimentoCampanha INTO :idAtendimentoCampanha;
			break;
		}
  
		EXEC SQL CLOSE crsAtendimentoCampanha;	

		if(idAtendimentoCampanha > 0)
		{
			ULOG("% Tiene atendimentos dependendientes", idMotivoCampanha);
			return 1;
		}
		else
			ULOG("% NO tiene atendimentos dependendientes", idMotivoCampanha);

	return 0;
	

  }catch(...){throw;}

  return 0;
}


void ItemNaoApagado(XMLGen*xml)
{
	xml->createTag("tns:retornoVO");
	xml->addProp("xmlns:tns","retornotux.fo.vivo.com.br/vo");    
	xml->addProp("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	xml->addItem("descricao","Item não apagado");
	xml->addItem("valor","0");
	xml->closeTag();
}



void ItemApagado(XMLGen*xml)
{
	ULOG("Item Apagado... ");
	xml->createTag("tns:retornoVO");
	xml->addProp("xmlns:tns","retornotux.fo.vivo.com.br/vo");    
	xml->addProp("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	xml->addItem("descricao","Item apagado");
	xml->addItem("valor","1");
	xml->closeTag();
	
}
