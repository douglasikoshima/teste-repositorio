//
// $Id: start_campanha.pcpp,v 1.1 2009/07/31 15:33:42 a5110702 Exp $
//

#include "../../negocio/cmputil/include/campanha.hpp"
#define STRLENNULL( y ) ( y == NULL ? 0 : strlen( y )  )

int start_campanha(char* usuario, DOMNode*dnode, XMLGen*xml)
{
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			char  cidCanalCampanha[21+1];
			char  cidPessoaUsuario[21+1];
			char  cidListaConteudo[21+1];
			char  cidSubCampanhaHistorico[21+1];
			char  cidTipoStatusCampanha[21+1];
			char  cidTipoMotivoCampanha[21+1];
			char  cidTipoSubMotivoCampanha[21+1];
			char  cidAtendimentoCampanha[21+1];
			char  cidMotivoCampanha[21+1];
		} stRegistro;
		short iidMotivoCampanha;
        char*  cidPessoaUsuarioInclusao = usuario;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error(NULL);
	memset( &stRegistro, 0, sizeof( stRegistro ) );
	
	try
	{
		//  Obtendo dados do xml
		get_tag(stRegistro.cidCanalCampanha,dnode,"idCanalCampanha",0,0);
		get_tag(stRegistro.cidPessoaUsuario,dnode,"idPessoaUsuario",0,0);
		get_tag(stRegistro.cidListaConteudo,dnode,"idListaConteudo",0,0);
		get_tag(stRegistro.cidMotivoCampanha,dnode,"idMotivoCampanha",0,-1);
		
		// Se motivo campanha e nulo tenho que pega-lo da tabela
		if( STRLENNULL( stRegistro.cidMotivoCampanha ) <= 0 )
		{
			get_tag(stRegistro.cidSubCampanhaHistorico,dnode,"idSubCampanhaHistorico",0,0);
			get_tag(stRegistro.cidTipoStatusCampanha,dnode,"idTipoStatusCampanha",0,0);
			get_tag(stRegistro.cidTipoMotivoCampanha,dnode,"idTipoMotivoCampanha",0,0);
			get_tag(stRegistro.cidTipoSubMotivoCampanha,dnode,"idTipoSubMotivoCampanha",0,0);
			
			//pegar id motivoCampanha
			EXEC SQL WHENEVER NOT FOUND DO sql_notfound("Motivo inexistente !");
			EXEC SQL
			SELECT 
				IDMOTIVOCAMPANHA
			INTO
				:stRegistro.cidMotivoCampanha:iidMotivoCampanha
			FROM
				CAMPANHA.MOTIVOCAMPANHA 
			WHERE
				INATIVO != 0
			AND
				IDSUBCAMPANHAHISTORICO = :stRegistro.cidSubCampanhaHistorico
			AND
				IDTIPOSTATUSCAMPANHA = :stRegistro.cidTipoStatusCampanha
			AND
				IDTIPOMOTIVOCAMPANHA = :stRegistro.cidTipoMotivoCampanha
			AND
				IDTIPOSUBMOTIVOCAMPANHA = :stRegistro.cidTipoSubMotivoCampanha;
	    }
	    
	    // Pegar idAtendimento -- serah usado fora do sql
	    EXEC SQL
	    SELECT 
	    	CAMPANHA.ATENDIMENTOCAMPANHASQ.NEXTVAL 
	    INTO
	    	:stRegistro.cidAtendimentoCampanha
	    FROM DUAL;
	    
	    // Inserindo dados
	    EXEC SQL
		INSERT INTO CAMPANHA.ATENDIMENTOCAMPANHA 
		(
			IDATENDIMENTOCAMPANHA,
			IDCANALCAMPANHA,
			IDPESSOAUSUARIO,
			IDLISTACONTEUDO,
			IDMOTIVOCAMPANHA,
			QTTEMPOATENDIMENTO,
			DTATENDIMENTO,
			IDUSUARIOALTERACAO,
			DTULTIMAALTERACAO 
		)
	    VALUES 
	    ( 
	    	:stRegistro.cidAtendimentoCampanha,
			:stRegistro.cidCanalCampanha,
			:stRegistro.cidPessoaUsuario,
			:stRegistro.cidListaConteudo,
			:stRegistro.cidMotivoCampanha,
			0,
			SYSDATE,
			:cidPessoaUsuarioInclusao,
			SYSDATE 
		);
	    // Retornando idAtendimento, serah usado na insercao do andamento.
	    ULOG_INT(stRegistro.cidAtendimentoCampanha);
	    xml->addItem("idAtendimentoCampanha",stRegistro.cidAtendimentoCampanha);
	}
	catch(...)
	{
		throw;
	}
	return 1;
}