#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "CNvlHie.h"

CNvlHie::CNvlHie()
{
}

CNvlHie::~CNvlHie()
{
}

char* CNvlHie::RTrim(char *pszString)
{
    ULOG_START("CNvlHie::RTrim()");
    
    int iLen;

    iLen=strlen(pszString);

    for(;;)
    {
        if(pszString[iLen-1] != ' ')
            break;

        iLen--;

        if(iLen == 0)
            break;
    }
    pszString[iLen] = 0x00;
    
    ULOG_END("CNvlHie::RTrim()");
	return pszString;
}

int CNvlHie::Insert( char* cidNivelPai,
		             char* cidNivel,
		             char* cidCargo,
				     char* cLogUser )
{
	ULOG_START("CNvlHie::Insert( )");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR cAuxidNivelHierarquia[21+1];
		char* cAuxidNivelPai = cidNivelPai;
		char* cAuxididNivel  = cidNivel;
		char* cAuxididCargo  = cidCargo;
	EXEC SQL END DECLARE SECTION;
	
	ZeraNivelHierarquia();
	
	memset( &cAuxidNivelHierarquia, 0, sizeof(cAuxidNivelHierarquia) );
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoInsert;
	sqlca.sqlcode=0;
	
	//Pega um id unico e sequencia para a insercao
	EXEC SQL
		SELECT C_EMARINS.NIVELHIERARQUIASQ.NEXTVAL
		INTO :cAuxidNivelHierarquia
		FROM DUAL;

	EXEC SQL 
		INSERT INTO C_EMARINS.NIVELHIERARQUIA
		  (IDNIVELHIERARQUIA, 
		   IDNIVELPAI,
		   IDNIVEL,
		   IDCARGO )
		VALUES
		  (:cAuxidNivelHierarquia, 
		   :cAuxidNivelPai,
		   :cAuxididNivel,
		   :cAuxididCargo );
	
	if( sqlca.sqlcode == 0 )
	{
	    ULOG_END("CNvlHie::Insert()");
		return 1;
	}
	else
	{
		ULOG_END("CNvlHie::Insert )");
		return 0;
	}

GotoInsert:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNvlHie::Update( char* cidNivelHierarquia, 
				     char* cidNivelPai,
		             char* cidNivel,
		             char* cidCargo,
				     char* cLogUser )
{
	ULOG_START("CNvlHie::Update( )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidNivelHierarquia  = cidNivelHierarquia;
		char* cAuxidNivelPai  = cidNivelPai;
		char* cAuxididNivel  = cidNivel;
		char* cAuxididCargo  = cidCargo;
	EXEC SQL END DECLARE SECTION;
	
	ZeraNivelHierarquia();
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO GotoUpdate;
	sqlca.sqlcode=0;
	
	EXEC SQL 
		UPDATE C_EMARINS.NIVELHIERARQUIA
		   SET IDNIVELPAI = :cAuxidNivelPai
		   SET IDNIVEL = :cAuxididNivel
		   SET IDCARGO = :cAuxididCargo
		 WHERE IDNIVELHIERARQUIA = :cAuxidNivelHierarquia;  
		
	ULOG_END("CNvlHie::Update()");
	if( sqlca.sqlcode == 0 )
		return 1;
	else
		return 0;

GotoUpdate:
	throw TuxBasicOraException(sqlca.sqlcode);
	
}

int CNvlHie::ListId( char* cid )
{
	ULOG_START("CNvlHie::ListId( )");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidOra = cid;
		struct
		{
			VARCHAR stidNivelHierarquia[21+1];
			VARCHAR stidNivelPai[255+1];
			VARCHAR stidNivel[255+1];
			VARCHAR stidCargo[255+1];
		} stNivelHierarquia;
		struct
		{
			short iidNivelHierarquia;
			short iidNivelPai;
			short iidNivel;
			short iidCargo;
		} stNivelHierarquiaInd;
	EXEC SQL END DECLARE SECTION;

	ZeraNivelHierarquia();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	sqlca.sqlcode=0;

   	EXEC SQL DECLARE CursorNivelHierarquiaListId CURSOR FOR
		SELECT IDNIVELHIERARQUIA, 
		       IDNIVELPAI,
		       IDNIVEL,
		       IDCARGO 
		  FROM C_EMARINS.NIVELHIERARQUIA
		 WHERE IDNIVELHIERARQUIA = :cidOra;

	EXEC SQL OPEN CursorNivelHierarquiaListId;

	if(sqlca.sqlcode)
	{
	    ULOG_END("CNvlHie::ListId()");
		return 0;
	}
	else
	{
		for(;;)
		{
			memset( &stNivelHierarquia, 0, sizeof(stNivelHierarquia) );
			EXEC SQL FETCH CursorNivelHierarquiaListId INTO :stNivelHierarquia:stNivelHierarquiaInd;

			Add( (char*)stNivelHierarquia.stidNivelHierarquia.arr, 
			     (char*)stNivelHierarquia.stidNivelPai.arr,
			     (char*)stNivelHierarquia.stidNivel.arr,
			     (char*)stNivelHierarquia.stidCargo.arr );

			iCont++;

		}
		EXEC SQL CLOSE CursorNivelHierarquiaListId;
	}

	ULOG_END("CNvlHie::ListId()");
	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CNvlHie::ListAll( void )
{
	ULOG_START("CNvlHie::ListAll()");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidNivelHierarquia[21+1];
			VARCHAR stidNivelPai[255+1];
			VARCHAR stidNivel[255+1];
			VARCHAR stidCargo[255+1];
		} stNivelHierarquia;
		struct
		{
			short iidNivelHierarquia;
			short iidNivelPai;
			short iidNivel;
			short iidCargo;
		} stNivelHierarquiaInd;
	EXEC SQL END DECLARE SECTION;

	ZeraNivelHierarquia();

	EXEC SQL WHENEVER NOT FOUND DO break;
	EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
	sqlca.sqlcode=0;

   	EXEC SQL DECLARE CursorNivelHierarquiaListAll CURSOR FOR
		SELECT IDNIVELHIERARQUIA, 
		       IDNIVELPAI,
		       IDNIVEL,
		       IDCARGO 
		  FROM C_EMARINS.NIVELHIERARQUIA;

	EXEC SQL OPEN CursorNivelHierarquiaListAll;

	if(sqlca.sqlcode)
	{
	    ULOG_END("CNvlHie::ListAll( )");
		return 0;
	}
	else
	{
		for(;;)
		{
			memset( &stNivelHierarquia, 0, sizeof(stNivelHierarquia) );
			EXEC SQL FETCH CursorNivelHierarquiaListAll INTO :stNivelHierarquia:stNivelHierarquiaInd;

			Add( (char*)stNivelHierarquia.stidNivelHierarquia.arr, 
			     (char*)stNivelHierarquia.stidNivelPai.arr,
			     (char*)stNivelHierarquia.stidNivel.arr,
			     (char*)stNivelHierarquia.stidCargo.arr );

			iCont++;

		}
		EXEC SQL CLOSE CursorNivelHierarquiaListAll;
	}
    ULOG_END("CNvlHie::ListAll( )");
	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CNvlHie::GetXml( char* cNomeTag, XMLGen*xml )
{
	ULOG_START("CNvlHie::GetXml()");
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp(	"xmlns", "usuario.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idNivelHierarquia", Registro(x)->cidNivelHierarquia );
				xml->addItem("idNivelPai", Registro(x)->cidNivelPai );
				xml->addItem("idNivel", Registro(x)->cidNivel );
				xml->addItem("idCargo", Registro(x)->cidCargo );
			}
			xml->closeTag();
		}
	}
	ULOG_END("CNvlHie::GetXml( )");
}
