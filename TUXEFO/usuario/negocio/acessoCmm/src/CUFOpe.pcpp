#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "CUFOpe.h"

CUFOperadora::CUFOperadora()
{
}

CUFOperadora::~CUFOperadora()
{
}

int CUFOperadora::ListIdUser( char* cidUsuario )
{
	ULOG_START("CUFOperadora::ListIdUser()");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidUsuario = cidUsuario;
		struct
		{
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[255+1];
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
		} stUFOperadoraRegistro;
		struct
		{
			short iidUFOperadora;
			short idsUFOperadora;
			short iidUF;
			short isgUF;
			short inmUF;
		} stUFOperadoraIndicator;
	EXEC SQL END DECLARE SECTION;
	try
	{

		ZeraUFOperadora();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListIdUser;
		sqlca.sqlcode=0;
	
	   	EXEC SQL 
		   	DECLARE 
		   		CursorUFOperadoraIdUser CURSOR FOR
			SELECT 
			     USUARIOUFOPERADORA.IDUFOPERADORA
			    ,USUARIOUFOPERADORA.NMPESSOAOPERADORA
			    ,USUARIOUFOPERADORA.IDUF
			    ,USUARIOUFOPERADORA.SGUF
			    ,USUARIOUFOPERADORA.NMUF
			FROM
			    ACESSO.USUARIOUFOPERADORAV01 USUARIOUFOPERADORA
			WHERE
			    USUARIOUFOPERADORA.IDPESSOA = :cAuxidUsuario;
	
		EXEC SQL OPEN CursorUFOperadoraIdUser;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUFOperadora::ListIdUser()");
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFOperadoraRegistro, 0, sizeof(stUFOperadoraRegistro) );
				EXEC SQL FETCH CursorUFOperadoraIdUser INTO :stUFOperadoraRegistro:stUFOperadoraIndicator;
	
				Add( (char*)stUFOperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stidUF.arr
				    ,(char*)stUFOperadoraRegistro.stsgUF.arr
				    ,(char*)stUFOperadoraRegistro.stnmUF.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorUFOperadoraIdUser;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUFOperadora::ListIdUser()");
	return iCont;

GotoListIdUser:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CUFOperadora::ListId( char* cidUFOperadora )
{
	ULOG_START("CUFOperadora::ListId()");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxidUFOperadora = cidUFOperadora;
		struct
		{
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[255+1];
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
		} stUFOperadoraRegistro;
		struct
		{
			short iidUFOperadora;
			short idsUFOperadora;
			short iidUF;
			short isgUF;
			short inmUF;
		} stUFOperadoraIndicator;
	EXEC SQL END DECLARE SECTION;
	try
	{

		ZeraUFOperadora();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;
	
	   	EXEC SQL 
		   	DECLARE 
		   		CursorUFOperadoraId CURSOR FOR
			SELECT 
			    UFOPERADORA.IDUFOPERADORA,
			    PESSOA.NMPESSOA,
			    UF.IDUF,
			    UF.SGUF,
			    UF.NMUF
			FROM 
			    CUSTOMER.UFOPERADORA UFOPERADORA,
			    CUSTOMER.OPERADORA OPERADORA,
			    CUSTOMER.PESSOA PESSOA,
			    APOIO.UF UF,
			    CUSTOMER.PESSOADEPARA PESSOADEPARA
			WHERE 
			    UFOPERADORA.IDUF = UF.IDUF
			AND UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
			AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
			AND PESSOADEPARA.IDPESSOADEPARA = OPERADORA.IDPESSOADEPARAOPERADORA
			AND UFOPERADORA.IDUFOPERADORA = :cAuxidUFOperadora;          
    
	
		EXEC SQL OPEN CursorUFOperadoraId;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUFOperadora::ListId()");			
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFOperadoraRegistro, 0, sizeof(stUFOperadoraRegistro) );
				EXEC SQL FETCH CursorUFOperadoraId INTO :stUFOperadoraRegistro:stUFOperadoraIndicator;
	
				Add( (char*)stUFOperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stidUF.arr
				    ,(char*)stUFOperadoraRegistro.stsgUF.arr
				    ,(char*)stUFOperadoraRegistro.stnmUF.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorUFOperadoraId;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUFOperadora::ListId()");	
	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CUFOperadora::ListAll( void )
{
	ULOG_START("CUFOperadora::ListAll()");	
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stidUFOperadora[21+1];
			VARCHAR stdsUFOperadora[255+1];
			VARCHAR stidUF[21+1];
			VARCHAR stsgUF[255+1];
			VARCHAR stnmUF[255+1];
		} stUFOperadoraRegistro;
		struct
		{
			short iidUFOperadora;
			short idsUFOperadora;
			short iidUF;
			short isgUF;
			short inmUF;
		} stUFOperadoraIndicator;
	EXEC SQL END DECLARE SECTION;
	try
	{

		ZeraUFOperadora();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;
	
	   	EXEC SQL 
		   	DECLARE 
		   		CursorUFOperadoraListAll CURSOR FOR
			SELECT 
				UFOPERADORA.IDUFOPERADORA,
				PESSOA.NMPESSOA,
				UF.IDUF,
				UF.SGUF,
				UF.NMUF
			FROM 
				CUSTOMER.UFOPERADORA UFOPERADORA,
				CUSTOMER.OPERADORA OPERADORA,
				CUSTOMER.PESSOA PESSOA,
				APOIO.UF UF,
				CUSTOMER.PESSOADEPARA PESSOADEPARA
			WHERE 
				UFOPERADORA.IDUF = UF.IDUF
				AND UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
				AND PESSOA.IDPESSOA = PESSOADEPARA.IDPESSOA
				AND PESSOADEPARA.IDPESSOADEPARA = OPERADORA.IDPESSOADEPARAOPERADORA
			ORDER BY
				UF.NMUF, UF.SGUF;					
				
	
		EXEC SQL OPEN CursorUFOperadoraListAll;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUFOperadora::ListAll()");	
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFOperadoraRegistro, 0, sizeof(stUFOperadoraRegistro) );
				EXEC SQL FETCH CursorUFOperadoraListAll INTO :stUFOperadoraRegistro:stUFOperadoraIndicator;
	
				Add( (char*)stUFOperadoraRegistro.stidUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stdsUFOperadora.arr
				    ,(char*)stUFOperadoraRegistro.stidUF.arr
				    ,(char*)stUFOperadoraRegistro.stsgUF.arr
				    ,(char*)stUFOperadoraRegistro.stnmUF.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorUFOperadoraListAll;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUFOperadora::ListAll()");	
	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);
}


void CUFOperadora::GetXml( char* cNomeTag, XMLGen*xml )
{
	ULOG_START("CUFOperadora::GetXml()");	
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp(	"xmlns", "usuario.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idUFOperadora"  , Registro(x)->cidUFOperadora   );
				xml->addItem("dsUFOperadora"  , Registro(x)->cdsUFOperadora   );
				xml->addItem("idUF", Registro(x)->cidUF );
				xml->addItem("sgUF", Registro(x)->csgUF );
				xml->addItem("nmUF", Registro(x)->cnmUF );
			}
			xml->closeTag();
		}
	}
	ULOG_END("CUFOperadora::GetXml()");	
}