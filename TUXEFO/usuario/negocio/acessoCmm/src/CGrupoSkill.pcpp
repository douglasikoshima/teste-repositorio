#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "CGrupoSkill.h"

CGrupoSkill::CGrupoSkill() {
    ULOG_START("CGrupoSkill::CGrupoSkill()");
        memset(_szIdUsuarioAlteracao, 0x00, sizeof(_szIdUsuarioAlteracao));
    ULOG_END("CGrupoSkill::CGrupoSkill()");
}

/******************************************************************************************************/
CGrupoSkill::CGrupoSkill(char *pszIdUsuarioAlteracao) {

    ULOG_START("CGrupoSkill::CGrupoSkill(char *pszIdUsuarioAlteracao)");
    
    ULOG("pszIdUsuarioAlteracao[%s]", pszIdUsuarioAlteracao);

    strcpy(_szIdUsuarioAlteracao, pszIdUsuarioAlteracao);

    ULOG_END("CGrupoSkill::CGrupoSkill(char *pszIdUsuarioAlteracao)");
}

/******************************************************************************************************/
CGrupoSkill::~CGrupoSkill() {
}

/*******************************************************************************************************/
char *CGrupoSkill::getIdUsuarioAlteracao(void)
{
    ULOG_START("char *CGrupoSkill::getIdUsuarioAlteracao(void)");
    ULOG_END("char *CGrupoSkill::getIdUsuarioAlteracao(void)");
    return _szIdUsuarioAlteracao;    
}

/*******************************************************************************************************/
void CGrupoSkill::retornoVazio(XMLGen *xml_g)
{
    ULOG_START("void CGrupoSkill::retornoVazio(XMLGen *xml_g)");
    
    xml_g->createTag("ManterSkillVO");
    xml_g->addProp("xmlns", "usuario.fo.vivo.com.br/vo");
    xml_g->closeTag();

    ULOG_END("void CGrupoSkill::retornoVazio(XMLGen *xml_g)");
}

/******************************************************************************************************/
void CGrupoSkill::inserirSkill(char *pszIdGrupoSkill, char *pszIdGrupo, char *pszDsGrupoSkill)
{
	ULOG_START("void CGrupoSkill::inserirSkill(char *pszIdGrupoSkill, char *pszIdGrupo, char *pszDsGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        char *poszIdGrupo = pszIdGrupo;
        char *poszDsGrupoSkill = pszDsGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupo[%s]", pszIdGrupo);
        ULOG("pszDsGrupoSkill[%s]", pszDsGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
        
        EXEC SQL SELECT acesso.gruposkillsq.nextval INTO :oszIdGrupoSkill FROM DUAL;
        ULOG("oszIdGrupoSkill.arr[%.*s]", oszIdGrupoSkill.len, oszIdGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.gruposkill
                (   idgruposkill,
                    idgrupo,
                    dsgruposkill
                )
            VALUES
                (   TO_NUMBER(:oszIdGrupoSkill),
                    TO_NUMBER(:poszIdGrupo),
                    :poszDsGrupoSkill
                );

        STRCPY_FROM_ORA(pszIdGrupoSkill, oszIdGrupoSkill);

        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG_END("void CGrupoSkill::inserirSkill(char *pszIdGrupoSkill, char *pszIdGrupo, char *pszDsGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
bool CGrupoSkill::existeSkill(char *pszDsGrupoSkill)
{
	ULOG_START("bool CGrupoSkill::existeSkill(char *pszDsGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszDsGrupoSkill[255];
        long oiCount;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszDsGrupoSkill[%s]", pszDsGrupoSkill);

        STRCPY_TO_ORA(oszDsGrupoSkill, pszDsGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	
	   	EXEC SQL 
            SELECT
                COUNT(1)
            INTO
                :oiCount
            FROM
                acesso.gruposkill gruposkill
            WHERE
                gruposkill.dsgruposkill = :oszDsGrupoSkill;
	
        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG("oiCount(%ld)", oiCount);

        if(oiCount > 0) {
            ULOG("FOUND");
            ULOG_END("bool CGrupoSkill::existeSkill(char *pszDsGrupoSkill)");
            return true;
        }
        else {
            ULOG("NOT FOUND");
            ULOG_END("bool CGrupoSkill::existeSkill(char *pszDsGrupoSkill)");
            return false;
        }
        
        ULOG_END("bool CGrupoSkill::existeSkill(char *pszDsGrupoSkill)");            
	}
	catch(...)
	{
		throw;
	}
    
GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaContatoFolhaUsuario(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaContatoFolhaUsuario(char *pszIdGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
        DELETE FROM ACESSO.CONTATOGRUPOSKILL
        WHERE IDGRUPOSKILL = TO_NUMBER(:poszIdGrupoSkill);

	   	EXEC SQL
        DELETE FROM ACESSO.USUARIOGRUPOSKILL
        WHERE IDGRUPOSKILL = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaContatoFolhaUsuario(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.tprelacionamentogruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaTipoPessoaGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaTipoPessoaGrupoSkill(char *pszIdGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.tipopessoagruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaTipoPessoaGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaSegmentacaoGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaSegmentacaoGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.segmentacaogruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaSegmentacaoGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaUfOperadoraGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaUfOperadoraGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.ufoperadoragruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaUfOperadoraGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaProcedenciaGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaProcedenciaGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.procedenciagruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaProcedenciaGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.grupoaberturagruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.tipocarteiragruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaTipoLinhaGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaTipoLinhaGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.tipolinhagruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaTipoLinhaGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::apagaCanalGrupoSkill(char *pszIdGrupoSkill)

{
	ULOG_START("void CGrupoSkill::apagaCanalGrupoSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        tuxfw_getlogger()->debug("Inicio CGrupoSkill::apagaCanalGrupoSkill");
        tuxfw_getlogger()->debug("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

	   	EXEC SQL
            DELETE FROM acesso.canalgruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);
        ULOG_END("void CGrupoSkill::apagaCanalGrupoSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}


/******************************************************************************************************/
/******************************************************************************************************/
void CGrupoSkill::gravaTipoPessoaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoRelacionamento)
{
	ULOG_START("void CGrupoSkill::gravaTipoPessoaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoRelacionamento)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdTipoRelacionamento[21];
        VARCHAR oszIdTpRelacionamentoGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdTipoRelacionamento[%s]", pszIdTipoRelacionamento);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdTipoRelacionamento, pszIdTipoRelacionamento);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.tprelacionamentogruposkillsq.nextval INTO :oszIdTpRelacionamentoGrupoSkill FROM DUAL;
        ULOG("oszIdTpRelacionamentoGrupoSkill.arr[%.*s]", oszIdTpRelacionamentoGrupoSkill.len, oszIdTpRelacionamentoGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.tprelacionamentogruposkill
            (
                idtprelacionamentogruposkill,
                idgruposkill,
                idtiporelacionamento,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdTpRelacionamentoGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdTipoRelacionamento),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaTipoPessoaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoRelacionamento)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoPessoa)
{
	ULOG_START("void CGrupoSkill::gravaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoPessoa)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdTipoPessoa[21];
        VARCHAR oszIdTipoPessoaGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdTipoPessoa[%s]", pszIdTipoPessoa);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdTipoPessoa, pszIdTipoPessoa);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.tipopessoagruposkillsq.nextval INTO :oszIdTipoPessoaGrupoSkill FROM DUAL;
        ULOG("oszIdTipoPessoaGrupoSkill.arr[%.*s]", oszIdTipoPessoaGrupoSkill.len, oszIdTipoPessoaGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.tipopessoagruposkill
            (
                idtipopessoagruposkill,
                idgruposkill,
                idtipopessoa,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdTipoPessoaGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdTipoPessoa),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaTpRelacionamentoGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoPessoa)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaSegmentacaoGrupoSkill(char *pszIdGrupoSkill, char *pszIdSegmentacao)
{
	ULOG_START("void CGrupoSkill::gravaSegmentacaoGrupoSkill(char *pszIdGrupoSkill, char *pszIdSegmentacao)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdSegmentacao[21];
        VARCHAR oszIdSegmentacaoGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdSegmentacao[%s]", pszIdSegmentacao);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdSegmentacao, pszIdSegmentacao);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.segmentacaogruposkillsq.nextval INTO :oszIdSegmentacaoGrupoSkill FROM DUAL;
        ULOG("oszIdSegmentacaoGrupoSkill.arr[%.*s]", oszIdSegmentacaoGrupoSkill.len, oszIdSegmentacaoGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.segmentacaogruposkill
            (
                idsegmentacaogruposkill,
                idgruposkill,
                idsegmentacao,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdSegmentacaoGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdSegmentacao),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaSegmentacaoGrupoSkill(char *pszIdGrupoSkill, char *pszIdSegmentacao)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaUfOperadoraGrupoSkill(char *pszIdGrupoSkill, char *pszIdUfOperadora)
{
	ULOG_START("void CGrupoSkill::gravaUfOperadoraGrupoSkill(char *pszIdGrupoSkill, char *pszIdUfOperadora)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdUfOperadora[21];
        VARCHAR oszIdUfoOperadoraGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
    
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdUfOperadora[%s]", pszIdUfOperadora);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdUfOperadora, pszIdUfOperadora);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.ufoperadoragruposkillsq.nextval INTO :oszIdUfoOperadoraGrupoSkill FROM DUAL;
        ULOG("oszIdUfoOperadoraGrupoSkill.arr[%.*s]", oszIdUfoOperadoraGrupoSkill.len, oszIdUfoOperadoraGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.ufoperadoragruposkill
            (
                idufoperadoragruposkill,
                idgruposkill,
                idufoperadora,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdUfoOperadoraGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdUfOperadora),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaUfOperadoraGrupoSkill(char *pszIdGrupoSkill, char *pszIdUfOperadora)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaProcedenciaGrupoSkill(char *pszIdGrupoSkill, char *pszIdProcedencia)
{
	ULOG_START("void CGrupoSkill::gravaProcedenciaGrupoSkill(char *pszIdGrupoSkill, char *pszIdProcedencia)");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdProcedencia[21];
        VARCHAR oszIdProcedenciaGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        tuxfw_getlogger()->debug("Inicio CGrupoSkill::gravaProcedenciaGrupoSkill");
        tuxfw_getlogger()->debug("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        tuxfw_getlogger()->debug("pszIdProcedencia[%s]", pszIdProcedencia);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdProcedencia, pszIdProcedencia);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.procedenciagruposkillsq.nextval INTO :oszIdProcedenciaGrupoSkill FROM DUAL;
        ULOG("oszIdProcedenciaGrupoSkill.arr[%.*s]", oszIdProcedenciaGrupoSkill.len, oszIdProcedenciaGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.procedenciagruposkill
            (
                idprocedenciagruposkill,
                idgruposkill,
                idprocedencia,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdProcedenciaGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdProcedencia),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaProcedenciaGrupoSkill(char *pszIdGrupoSkill, char *pszIdProcedencia)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill, char *pszIdGrupo)
{
	ULOG_START("void CGrupoSkill::gravaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill, char *pszIdGrupo)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdGrupo[21];
        VARCHAR oszIdGrupoAberturaGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdGrupo[%s]", pszIdGrupo);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdGrupo, pszIdGrupo);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.grupoaberturagruposkillsq.nextval INTO :oszIdGrupoAberturaGrupoSkill FROM DUAL;
        ULOG("oszIdGrupoAberturaGrupoSkill.arr[%.*s]", oszIdGrupoAberturaGrupoSkill.len, oszIdGrupoAberturaGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.grupoaberturagruposkill
            (
                idgrupoaberturagruposkill,
                idgruposkill,
                idgrupo,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdGrupoAberturaGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdGrupo),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaGrupoAberturaGrupoSkill(char *pszIdGrupoSkill, char *pszIdGrupo)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoCarteira)
{
    ULOG_START("void CGrupoSkill::gravaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoCarteira)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdTipoCarteira[21];
        VARCHAR oszIdTipoCarteiraGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdTipoCarteira[%s]", pszIdTipoCarteira);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdTipoCarteira, pszIdTipoCarteira);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.tipocarteiragruposkillsq.nextval INTO :oszIdTipoCarteiraGrupoSkill FROM DUAL;
        ULOG("oszIdTipoCarteiraGrupoSkill.arr[%.*s]", oszIdTipoCarteiraGrupoSkill.len, oszIdTipoCarteiraGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.tipocarteiragruposkill
            (
                idtipocarteiragruposkill,
                idgruposkill,
                idtipocarteira,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdTipoCarteiraGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdTipoCarteira),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaTipoCarteiraGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoCarteira)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaCanalGrupoSkill(char *pszIdGrupoSkill, char *pszIdCanal)
{
	ULOG_START("void CGrupoSkill::gravaCanalGrupoSkill(char *pszIdGrupoSkill, char *pszIdCanal)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdCanal[21];
        VARCHAR oszIdCanalGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdCanal[%s]", pszIdCanal);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdCanal, pszIdCanal);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.canalgruposkillsq.nextval INTO :oszIdCanalGrupoSkill FROM DUAL;
        ULOG("oszIdCanalGrupoSkill.arr[%.*s]", oszIdCanalGrupoSkill.len, oszIdCanalGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.canalgruposkill
            (
                idcanalgruposkill,
                idgruposkill,
                idcanal,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdCanalGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdCanal),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaCanalGrupoSkill(char *pszIdGrupoSkill, char *pszIdCanal)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::gravaTipoLinhaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoLinha)
{
	ULOG_START("void CGrupoSkill::gravaTipoLinhaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoLinha)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdGrupoSkill[21];
        VARCHAR oszIdTipoLinha[21];
        VARCHAR oszIdTipoLinhaGrupoSkill[21];
        VARCHAR oszIdUsuarioAlteracao[21];
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszIdTipoLinha[%s]", pszIdTipoLinha);

        STRCPY_TO_ORA(oszIdGrupoSkill, pszIdGrupoSkill);
        STRCPY_TO_ORA(oszIdTipoLinha, pszIdTipoLinha);
        STRCPY_TO_ORA(oszIdUsuarioAlteracao, this->getIdUsuarioAlteracao());

		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        EXEC SQL SELECT acesso.tipolinhagruposkillsq.nextval INTO :oszIdTipoLinhaGrupoSkill FROM DUAL;
        ULOG("oszIdTipoLinhaGrupoSkill.arr[%.*s]", oszIdTipoLinhaGrupoSkill.len, oszIdTipoLinhaGrupoSkill.arr);

	   	EXEC SQL
            INSERT INTO acesso.tipolinhagruposkill
            (
                idtipolinhagruposkill,
                idgruposkill,
                idtipolinha,
                idusuarioalteracao,
                dtultimaalteracao
            )
            VALUES
            (
                TO_NUMBER(:oszIdTipoLinhaGrupoSkill),
                TO_NUMBER(:oszIdGrupoSkill),
                TO_NUMBER(:oszIdTipoLinha),
                TO_NUMBER(:oszIdUsuarioAlteracao),
                SYSDATE
            );


        ULOG_END("void CGrupoSkill::gravaTipoLinhaGrupoSkill(char *pszIdGrupoSkill, char *pszIdTipoLinha)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
/******************************************************************************************************/
void CGrupoSkill::alterarSkill(char *pszIdGrupoSkill, char *pszDsGrupoSkill)
{
    ULOG_START("void CGrupoSkill::alterarSkill(char *pszIdGrupoSkill, char *pszDsGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
        char *poszDsGrupoSkill = pszDsGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);
        ULOG("pszDsGrupoSkill[%s]", pszDsGrupoSkill);

		EXEC SQL WHENEVER NOT FOUND goto notFound;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	
	   	EXEC SQL
            UPDATE acesso.gruposkill
                SET   dsgruposkill = :poszDsGrupoSkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG_END("void CGrupoSkill::alterarSkill(char *pszIdGrupoSkill, char *pszDsGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

notFound:
    ULOG("Nenhum registro atualizado!");
    ULOG_END("void CGrupoSkill::alterarSkill(char *pszIdGrupoSkill, char *pszDsGrupoSkill)");
    return;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::excluirSkill(char *pszIdGrupoSkill)
{
	ULOG_START("void CGrupoSkill::excluirSkill(char *pszIdGrupoSkill)");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupoSkill = pszIdGrupoSkill;
	EXEC SQL END DECLARE SECTION;

	try
	{
        
        ULOG("pszIdGrupoSkill[%s]", pszIdGrupoSkill);

		EXEC SQL WHENEVER NOT FOUND goto notFound;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	
	   	EXEC SQL
            DELETE FROM acesso.gruposkill
                WHERE idgruposkill = TO_NUMBER(:poszIdGrupoSkill);

        ULOG("Registro deletado com sucesso!");
        ULOG_END("void CGrupoSkill::excluirSkill(char *pszIdGrupoSkill)");
        return;
	}
	catch(...)
	{
		throw;
	}

notFound:
    ULOG("Nenhum registro deletado!");
    ULOG_END("void CGrupoSkill::excluirSkill(char *pszIdGrupoSkill)");
    return;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
void CGrupoSkill::listarSkill(char *pszIdGrupo, char *pszDsGrupoSkill, XMLGen* xml_g)
{
    ULOG_START("void CGrupoSkill::listarSkill(char *pszIdGrupo, char *pszDsGrupoSkill, XMLGen* xml_g)");
    bool bFlagRegFound = false;
	struct sqlca sqlca;
    char szDsGrupoSkill[255];
	EXEC SQL BEGIN DECLARE SECTION;
        char *poszIdGrupo = pszIdGrupo;
        char *poszDsGrupoSkill;
		struct
		{
    		VARCHAR stIdGrupoSkill[21];
    		VARCHAR stIdGrupo[21];
    		VARCHAR stDsGrupoSkill[255];
		} stGrupoSkill;
		struct
		{
    		short iIdGrupoSkill;
    		short iIdGrupo;
    		short iDsGrupoSkill;
		} stGrupoSkillIndicator;
	EXEC SQL END DECLARE SECTION;
	try
	{
        
        ULOG("pszIdGrupo[%s]", pszIdGrupo);
        ULOG("pszDsGrupoSkill[%s]", pszDsGrupoSkill);

        strcpy(szDsGrupoSkill, pszDsGrupoSkill);
        strcat(szDsGrupoSkill, "%");
        ULOG("szDsGrupoSkill[%s]", szDsGrupoSkill);

        poszDsGrupoSkill=szDsGrupoSkill;

		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
	
	   	EXEC SQL DECLARE CursorGrupoSkill CURSOR FOR
            SELECT
                gruposkill.idgruposkill,
                gruposkill.idgrupo,
                gruposkill.dsgruposkill
            FROM
                acesso.gruposkill gruposkill
            WHERE
                gruposkill.idgrupo = TO_NUMBER(:poszIdGrupo)
            AND
                UPPER(gruposkill.dsgruposkill) LIKE UPPER(:poszDsGrupoSkill);

	
		EXEC SQL OPEN CursorGrupoSkill;
	
		for(;;)
		{
			memset( &stGrupoSkill, 0x00, sizeof(stGrupoSkill));
			EXEC SQL FETCH CursorGrupoSkill INTO :stGrupoSkill:stGrupoSkillIndicator;
            ULOG("sqlca.sqlcode(%d)", sqlca.sqlcode);

            ULOG("(char *)&stGrupoSkill.stIdGrupoSkill.arr[%s] stGrupoSkillIndicator.iIdGrupoSkill(%d)", (char *)&stGrupoSkill.stIdGrupoSkill.arr, stGrupoSkillIndicator.iIdGrupoSkill);
            ULOG("(char *)&stGrupoSkill.stIdGrupo.arr[%s] stGrupoSkillIndicator.iIdGrupo(%d)", (char *)&stGrupoSkill.stIdGrupo.arr, stGrupoSkillIndicator.iIdGrupo);
            ULOG("(char *)&stGrupoSkill.stDsGrupoSkill.arr[%s] stGrupoSkillIndicator.iDsGrupoSkill(%d)", (char *)&stGrupoSkill.stDsGrupoSkill.arr, stGrupoSkillIndicator.iDsGrupoSkill);

            if(bFlagRegFound == false) {
                xml_g->createTag("ManterSkillVO");
                xml_g->addProp("xmlns", "usuario.fo.vivo.com.br/vo");
                bFlagRegFound = true;
            }

            xml_g->createTag("Skill");
                xml_g->addItem("idSkill", (char *)&stGrupoSkill.stIdGrupoSkill.arr);
                xml_g->addItem("dsSkill", (char *)&stGrupoSkill.stDsGrupoSkill.arr);
            xml_g->closeTag();
		}

        if(bFlagRegFound == true) {
            xml_g->closeTag();
            bFlagRegFound = false;
        }
        else
            this->retornoVazio(xml_g);

		EXEC SQL CLOSE CursorGrupoSkill;

        ULOG_END("void CGrupoSkill::listarSkill(char *pszIdGrupo, char *pszDsGrupoSkill, XMLGen* xml_g)");
        return;
	}
	catch(...)
	{
		throw;
	}

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);
}

/******************************************************************************************************/
/******************************************************************************************************/
int CGrupoSkill::ConsultaRegionalSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaRegionalSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsRegionalSkill[280];
		VARCHAR ORA_idRegionalSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaRegionalSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadRegionalSkill CURSOR FOR 
	SELECT 
        UF.SGUF || ' - ' || PESSOA.NMPESSOA,
        UFOPERADORA.IDUFOPERADORA
    FROM 
        CUSTOMER.UFOPERADORA UFOPERADORA,
        CUSTOMER.OPERADORA OPERADORA,
        CUSTOMER.PESSOADEPARA PESSOADEPARA,
        CUSTOMER.PESSOA PESSOA,
        APOIO.UF UF,
        CONTATOADM.UFOPERADORAGRUPO UFOPERADORAGRUPO
    WHERE 
        UFOPERADORA.IDUFOPERADORA
    NOT IN(
              SELECT 
                 IDUFOPERADORA 
              FROM 
                 ACESSO.UFOPERADORAGRUPOSKILL
              WHERE 
                 IDGRUPOSKILL = :pzcidGrupoSkillAux
          )
    AND
    	UFOPERADORAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	UFOPERADORAGRUPO.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
   	AND
        UFOPERADORA.IDUFOPERADORA > 0
    AND
        UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
    AND
        OPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
    AND
        PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
    AND
        UFOPERADORA.IDUF = UF.IDUF
    ORDER BY
        UF.SGUF, PESSOA.NMPESSOA;

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;

	EXEC SQL OPEN ReadRegionalSkill;
   
	for( ;; )
	{
		memset( &ORA_dsRegionalSkill, 0, sizeof(ORA_dsRegionalSkill) );
		memset( &ORA_idRegionalSkill, 0, sizeof(ORA_idRegionalSkill) );
		EXEC SQL 
		FETCH 
			ReadRegionalSkill 
		INTO 
			:ORA_dsRegionalSkill, 
			:ORA_idRegionalSkill;

		Saida->createTag( "RegionalVO" );
		Saida->addItem( "idRegional",(char*)ORA_idRegionalSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsRegionalSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadRegionalSkill;
	ULOG_END("int CGrupoSkill::ConsultaRegionalSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaRegionalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaRegionalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsRegionalSkillSelecionado[280];
		VARCHAR ORA_idRegionalSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaRegionalSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadRegionalSkillSelecionado CURSOR FOR 
	SELECT 
        UF.SGUF || ' - ' || PESSOA.NMPESSOA,
        UFOPERADORA.IDUFOPERADORA
    FROM 
        CUSTOMER.UFOPERADORA UFOPERADORA,
        CUSTOMER.OPERADORA OPERADORA,
        CUSTOMER.PESSOADEPARA PESSOADEPARA,
        CUSTOMER.PESSOA PESSOA,
        APOIO.UF UF,
        ACESSO.UFOPERADORAGRUPOSKILL UFOPERADORAGRUPOSKILL
    WHERE
    	UFOPERADORAGRUPOSKILL.IDUFOPERADORA = UFOPERADORA.IDUFOPERADORA
    AND
    	UFOPERADORAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    AND
        UFOPERADORA.IDUFOPERADORA > 0
    AND
        UFOPERADORA.IDPESSOADEPARAOPERADORA = OPERADORA.IDPESSOADEPARAOPERADORA
    AND
        OPERADORA.IDPESSOADEPARAOPERADORA = PESSOADEPARA.IDPESSOADEPARA
    AND
        PESSOADEPARA.IDPESSOA = PESSOA.IDPESSOA
    AND
        UFOPERADORA.IDUF = UF.IDUF
    ORDER BY
        UF.SGUF, PESSOA.NMPESSOA;

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadRegionalSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsRegionalSkillSelecionado, 0, sizeof(ORA_dsRegionalSkillSelecionado) );
		memset( &ORA_idRegionalSkillSelecionado, 0, sizeof(ORA_idRegionalSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadRegionalSkillSelecionado 
		INTO 
			:ORA_dsRegionalSkillSelecionado, 
			:ORA_idRegionalSkillSelecionado;

		Saida->createTag( "RegionalVO" );
		Saida->addItem( "idRegional",(char*)ORA_idRegionalSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsRegionalSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadRegionalSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaRegionalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaCanalSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaCanalSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsCanalSkill[280];
		VARCHAR ORA_idCanalSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaCanalSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadCanalSkill CURSOR FOR 
	SELECT 
        CANAL.NMCANAL,
        CANAL.IDCANAL
    FROM 
        APOIO.CANAL CANAL,
        CONTATOADM.CANALGRUPO CANALGRUPO
    WHERE 
        CANAL.IDCANAL NOT IN ( SELECT IDCANAL FROM ACESSO.CANALGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	CANALGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	CANALGRUPO.IDCANAL = CANAL.IDCANAL
    ORDER BY
        UPPER(CANAL.NMCANAL);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadCanalSkill;

	for( ;; )
	{
		memset( &ORA_dsCanalSkill, 0, sizeof(ORA_dsCanalSkill) );
		memset( &ORA_idCanalSkill, 0, sizeof(ORA_idCanalSkill) );
		EXEC SQL 
		FETCH 
			ReadCanalSkill 
		INTO 
			:ORA_dsCanalSkill, 
			:ORA_idCanalSkill;

		Saida->createTag( "CanalVO" );
        Saida->addProp( "xmlns","workflow.fo.vivo.com.br/vo" );
		Saida->addItem( "idCanal"   ,(char*)ORA_idCanalSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsCanalSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadCanalSkill;
	ULOG_END("int CGrupoSkill::ConsultaCanalSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaCanalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaCanalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsCanalSkillSelecionado[280];
		VARCHAR ORA_idCanalSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaCanalSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadCanalSkillSelecionado CURSOR FOR 
	SELECT 
        CANAL.NMCANAL,
        CANAL.IDCANAL
    FROM 
        APOIO.CANAL CANAL,
        ACESSO.CANALGRUPOSKILL CANALGRUPOSKILL
    WHERE 
    	CANALGRUPOSKILL.IDCANAL = CANAL.IDCANAL
    AND
    	CANALGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(CANAL.NMCANAL);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadCanalSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsCanalSkillSelecionado, 0, sizeof(ORA_dsCanalSkillSelecionado) );
		memset( &ORA_idCanalSkillSelecionado, 0, sizeof(ORA_idCanalSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadCanalSkillSelecionado 
		INTO 
			:ORA_dsCanalSkillSelecionado, 
			:ORA_idCanalSkillSelecionado;

		Saida->createTag( "CanalVO" );
        Saida->addProp( "xmlns","workflow.fo.vivo.com.br/vo" );
		Saida->addItem( "idCanal"   ,(char*)ORA_idCanalSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsCanalSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadCanalSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaCanalSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoCarteiraSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoCarteiraSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoCarteiraSkill[280];
		VARCHAR ORA_idTipoCarteiraSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoCarteiraSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoCarteiraSkill CURSOR FOR 
	SELECT 
        TIPOCARTEIRA.DSTIPOCARTEIRA,
        TIPOCARTEIRA.IDTIPOCARTEIRA
    FROM 
        APOIO.TIPOCARTEIRA TIPOCARTEIRA,
        CONTATOADM.TIPOCARTEIRAGRUPO TIPOCARTEIRAGRUPO
    WHERE 
        TIPOCARTEIRA.IDTIPOCARTEIRA NOT IN ( SELECT IDTIPOCARTEIRA FROM ACESSO.TIPOCARTEIRAGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOCARTEIRAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOCARTEIRAGRUPO.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
    ORDER BY
        UPPER(TIPOCARTEIRA.DSTIPOCARTEIRA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoCarteiraSkill;

	for( ;; )
	{
		memset( &ORA_dsTipoCarteiraSkill, 0, sizeof(ORA_dsTipoCarteiraSkill) );
		memset( &ORA_idTipoCarteiraSkill, 0, sizeof(ORA_idTipoCarteiraSkill) );
		EXEC SQL 
		FETCH 
			ReadTipoCarteiraSkill 
		INTO 
			:ORA_dsTipoCarteiraSkill, 
			:ORA_idTipoCarteiraSkill;

		Saida->createTag( "CarterizacaoVO" );
		Saida->addItem( "codigo",(char*)ORA_idTipoCarteiraSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoCarteiraSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoCarteiraSkill;
	ULOG_END("int CGrupoSkill::ConsultaTipoCarteiraSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoCarteiraSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoCarteiraSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoCarteiraSkillSelecionado[280];
		VARCHAR ORA_idTipoCarteiraSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoCarteiraSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoCarteiraSkillSelecionado CURSOR FOR 
	SELECT 
        TIPOCARTEIRA.DSTIPOCARTEIRA,
        TIPOCARTEIRA.IDTIPOCARTEIRA
    FROM 
        APOIO.TIPOCARTEIRA TIPOCARTEIRA,
        ACESSO.TIPOCARTEIRAGRUPOSKILL TIPOCARTEIRAGRUPOSKILL
    WHERE 
    	TIPOCARTEIRAGRUPOSKILL.IDTIPOCARTEIRA = TIPOCARTEIRA.IDTIPOCARTEIRA
    AND
    	TIPOCARTEIRAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(TIPOCARTEIRA.DSTIPOCARTEIRA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoCarteiraSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsTipoCarteiraSkillSelecionado, 0, sizeof(ORA_dsTipoCarteiraSkillSelecionado) );
		memset( &ORA_idTipoCarteiraSkillSelecionado, 0, sizeof(ORA_idTipoCarteiraSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadTipoCarteiraSkillSelecionado 
		INTO 
			:ORA_dsTipoCarteiraSkillSelecionado, 
			:ORA_idTipoCarteiraSkillSelecionado;

		Saida->createTag( "CarterizacaoVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idTipoCarteiraSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoCarteiraSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoCarteiraSkillSelecionado;
    
    ULOG_END("int CGrupoSkill::ConsultaTipoCarteiraSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");	
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaGrupoSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaGrupoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsGrupoSkill[280];
		VARCHAR ORA_idGrupoSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaGrupoSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadGrupoSkill CURSOR FOR 
	SELECT 
        GRUPO.NMGRUPO,
        GRUPO.IDGRUPO
    FROM 
        ACESSO.GRUPO GRUPO,
        CONTATOADM.GRUPOABERTURAGRUPO GRUPOABERTURAGRUPO
    WHERE 
        GRUPO.IDGRUPO NOT IN ( SELECT IDGRUPO FROM ACESSO.GRUPOABERTURAGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	GRUPOABERTURAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	GRUPOABERTURAGRUPO.IDGRUPOPAI = GRUPO.IDGRUPO
    ORDER BY
        UPPER(GRUPO.NMGRUPO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadGrupoSkill;

	for( ;; )
	{
		memset( &ORA_dsGrupoSkill, 0, sizeof(ORA_dsGrupoSkill) );
		memset( &ORA_idGrupoSkill, 0, sizeof(ORA_idGrupoSkill) );
		EXEC SQL 
		FETCH 
			ReadGrupoSkill 
		INTO 
			:ORA_dsGrupoSkill, 
			:ORA_idGrupoSkill;

		Saida->createTag( "GrupoVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idGrupoSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsGrupoSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadGrupoSkill;
	ULOG_END("int CGrupoSkill::ConsultaGrupoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaGrupoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
    ULOG_START("int CGrupoSkill::ConsultaGrupoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsGrupoSkillSelecionado[280];
		VARCHAR ORA_idGrupoSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaGrupoSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadGrupoSkillSelecionado CURSOR FOR 
	SELECT 
        GRUPO.NMGRUPO,
        GRUPO.IDGRUPO
    FROM 
        ACESSO.GRUPO GRUPO,
        ACESSO.GRUPOABERTURAGRUPOSKILL GRUPOABERTURAGRUPOSKILL
    WHERE 
    	GRUPOABERTURAGRUPOSKILL.IDGRUPO = GRUPO.IDGRUPO
    AND
    	GRUPOABERTURAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(GRUPO.NMGRUPO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadGrupoSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsGrupoSkillSelecionado, 0, sizeof(ORA_dsGrupoSkillSelecionado) );
		memset( &ORA_idGrupoSkillSelecionado, 0, sizeof(ORA_idGrupoSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadGrupoSkillSelecionado 
		INTO 
			:ORA_dsGrupoSkillSelecionado, 
			:ORA_idGrupoSkillSelecionado;

		Saida->createTag( "GrupoVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idGrupoSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsGrupoSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadGrupoSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaGrupoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaProcedenciaSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaProcedenciaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsProcedenciaSkill[280];
		VARCHAR ORA_idProcedenciaSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaProcedenciaSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadProcedenciaSkill CURSOR FOR 
	SELECT 
        PROCEDENCIA.DSPROCEDENCIA,
        PROCEDENCIA.IDPROCEDENCIA
    FROM 
        APOIO.PROCEDENCIA PROCEDENCIA,
        CONTATOADM.PROCEDENCIAGRUPO PROCEDENCIAGRUPO
    WHERE 
        PROCEDENCIA.IDPROCEDENCIA NOT IN ( SELECT IDPROCEDENCIA FROM ACESSO.PROCEDENCIAGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	PROCEDENCIAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	PROCEDENCIAGRUPO.IDPROCEDENCIA = PROCEDENCIA.IDPROCEDENCIA
    ORDER BY
        UPPER(PROCEDENCIA.DSPROCEDENCIA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadProcedenciaSkill;

	for( ;; )
	{
		memset( &ORA_dsProcedenciaSkill, 0, sizeof(ORA_dsProcedenciaSkill) );
		memset( &ORA_idProcedenciaSkill, 0, sizeof(ORA_idProcedenciaSkill) );
		EXEC SQL 
		FETCH 
			ReadProcedenciaSkill 
		INTO 
			:ORA_dsProcedenciaSkill, 
			:ORA_idProcedenciaSkill;

		Saida->createTag( "ProcedenciaVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idProcedenciaSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsProcedenciaSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadProcedenciaSkill;
	ULOG_END("int CGrupoSkill::ConsultaProcedenciaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaProcedenciaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaProcedenciaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsProcedenciaSkillSelecionado[280];
		VARCHAR ORA_idProcedenciaSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaProcedenciaSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadProcedenciaSkillSelecionado CURSOR FOR 
	SELECT 
        PROCEDENCIA.DSPROCEDENCIA,
        PROCEDENCIA.IDPROCEDENCIA
    FROM 
        APOIO.PROCEDENCIA PROCEDENCIA,
        ACESSO.PROCEDENCIAGRUPOSKILL PROCEDENCIAGRUPOSKILL
    WHERE 
    	PROCEDENCIAGRUPOSKILL.IDPROCEDENCIA = PROCEDENCIA.IDPROCEDENCIA
    AND
    	PROCEDENCIAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(PROCEDENCIA.DSPROCEDENCIA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadProcedenciaSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsProcedenciaSkillSelecionado, 0, sizeof(ORA_dsProcedenciaSkillSelecionado) );
		memset( &ORA_idProcedenciaSkillSelecionado, 0, sizeof(ORA_idProcedenciaSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadProcedenciaSkillSelecionado 
		INTO 
			:ORA_dsProcedenciaSkillSelecionado, 
			:ORA_idProcedenciaSkillSelecionado;

		Saida->createTag( "ProcedenciaVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idProcedenciaSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsProcedenciaSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadProcedenciaSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaProcedenciaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaSegmentacaoSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaSegmentacaoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsSegmentacaoSkill[280];
		VARCHAR ORA_idSegmentacaoSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaSegmentacaoSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadSegmentacaoSkill CURSOR FOR 
	SELECT 
        SEGMENTACAO.DSSEGMENTACAO,
        SEGMENTACAO.IDSEGMENTACAO
    FROM 
        APOIO.SEGMENTACAO SEGMENTACAO,
        CONTATOADM.SEGMENTACAOGRUPO SEGMENTACAOGRUPO
    WHERE 
        SEGMENTACAO.IDSEGMENTACAO NOT IN ( SELECT IDSEGMENTACAO FROM ACESSO.SEGMENTACAOGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	SEGMENTACAOGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	SEGMENTACAOGRUPO.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
    ORDER BY
        UPPER(SEGMENTACAO.DSSEGMENTACAO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadSegmentacaoSkill;

	for( ;; )
	{
		memset( &ORA_dsSegmentacaoSkill, 0, sizeof(ORA_dsSegmentacaoSkill) );
		memset( &ORA_idSegmentacaoSkill, 0, sizeof(ORA_idSegmentacaoSkill) );
		EXEC SQL 
		FETCH 
			ReadSegmentacaoSkill 
		INTO 
			:ORA_dsSegmentacaoSkill, 
			:ORA_idSegmentacaoSkill;

		Saida->createTag( "SegmentacaoVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idSegmentacaoSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsSegmentacaoSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadSegmentacaoSkill;
	ULOG_END("int CGrupoSkill::ConsultaSegmentacaoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaSegmentacaoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaSegmentacaoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsSegmentacaoSkillSelecionado[280];
		VARCHAR ORA_idSegmentacaoSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaSegmentacaoSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadSegmentacaoSkillSelecionado CURSOR FOR 
	SELECT 
        SEGMENTACAO.DSSEGMENTACAO,
        SEGMENTACAO.IDSEGMENTACAO
    FROM 
        APOIO.SEGMENTACAO SEGMENTACAO,
        ACESSO.SEGMENTACAOGRUPOSKILL SEGMENTACAOGRUPOSKILL
    WHERE 
    	SEGMENTACAOGRUPOSKILL.IDSEGMENTACAO = SEGMENTACAO.IDSEGMENTACAO
    AND
    	SEGMENTACAOGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(SEGMENTACAO.DSSEGMENTACAO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadSegmentacaoSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsSegmentacaoSkillSelecionado, 0, sizeof(ORA_dsSegmentacaoSkillSelecionado) );
		memset( &ORA_idSegmentacaoSkillSelecionado, 0, sizeof(ORA_idSegmentacaoSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadSegmentacaoSkillSelecionado 
		INTO 
			:ORA_dsSegmentacaoSkillSelecionado, 
			:ORA_idSegmentacaoSkillSelecionado;

		Saida->createTag( "SegmentacaoVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idSegmentacaoSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsSegmentacaoSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadSegmentacaoSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaSegmentacaoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoPessoaSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
    ULOG_START("int CGrupoSkill::ConsultaTipoPessoaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoPessoaSkill[280];
		VARCHAR ORA_idTipoPessoaSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoPessoaSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoPessoaSkill CURSOR FOR 
	SELECT 
        TIPOPESSOA.DSTIPOPESSOA,
        TIPOPESSOA.IDTIPOPESSOA
    FROM 
        APOIO.TIPOPESSOA TIPOPESSOA,
        CONTATOADM.TIPOPESSOAGRUPO TIPOPESSOAGRUPO
    WHERE 
        TIPOPESSOA.IDTIPOPESSOA NOT IN ( SELECT IDTIPOPESSOA FROM ACESSO.TIPOPESSOAGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOPESSOAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOPESSOAGRUPO.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA
    ORDER BY
        UPPER(TIPOPESSOA.DSTIPOPESSOA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoPessoaSkill;

	for( ;; )
	{
		memset( &ORA_dsTipoPessoaSkill, 0, sizeof(ORA_dsTipoPessoaSkill) );
		memset( &ORA_idTipoPessoaSkill, 0, sizeof(ORA_idTipoPessoaSkill) );
		EXEC SQL 
		FETCH 
			ReadTipoPessoaSkill 
		INTO 
			:ORA_dsTipoPessoaSkill, 
			:ORA_idTipoPessoaSkill;

		Saida->createTag( "TipoClienteVO" );
		Saida->addItem( "codigo"    ,(char*)ORA_idTipoPessoaSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoPessoaSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoPessoaSkill;
	ULOG_END("int CGrupoSkill::ConsultaTipoPessoaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoPessoaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoPessoaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoPessoaSkillSelecionado[280];
		VARCHAR ORA_idTipoPessoaSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoPessoaSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoPessoaSkillSelecionado CURSOR FOR 
	SELECT 
        TIPOPESSOA.DSTIPOPESSOA,
        TIPOPESSOA.IDTIPOPESSOA
    FROM 
        APOIO.TIPOPESSOA TIPOPESSOA,
        ACESSO.TIPOPESSOAGRUPOSKILL TIPOPESSOAGRUPOSKILL
    WHERE 
    	TIPOPESSOAGRUPOSKILL.IDTIPOPESSOA = TIPOPESSOA.IDTIPOPESSOA
    AND
    	TIPOPESSOAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(TIPOPESSOA.DSTIPOPESSOA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoPessoaSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsTipoPessoaSkillSelecionado, 0, sizeof(ORA_dsTipoPessoaSkillSelecionado) );
		memset( &ORA_idTipoPessoaSkillSelecionado, 0, sizeof(ORA_idTipoPessoaSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadTipoPessoaSkillSelecionado 
		INTO 
			:ORA_dsTipoPessoaSkillSelecionado, 
			:ORA_idTipoPessoaSkillSelecionado;

		Saida->createTag( "TipoClienteVO" );
		Saida->addItem( "codigo",(char*)ORA_idTipoPessoaSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoPessoaSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoPessoaSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaTipoPessoaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoRelacionamentoSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoRelacionamentoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoRelacionamentoSkill[280];
		VARCHAR ORA_idTipoRelacionamentoSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoRelacionamentoSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoRelacionamentoSkill CURSOR FOR 
	SELECT 
        TIPORELACIONAMENTO.NMTIPORELACIONAMENTO,
        TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
    FROM 
        CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
        CONTATOADM.TIPORELACIONAMENTOGRUPO TIPORELACIONAMENTOGRUPO
    WHERE 
        TIPORELACIONAMENTO.IDTIPORELACIONAMENTO NOT IN ( SELECT IDTIPORELACIONAMENTO FROM ACESSO.TPRELACIONAMENTOGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPORELACIONAMENTOGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPORELACIONAMENTOGRUPO.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
    ORDER BY
        UPPER(TIPORELACIONAMENTO.NMTIPORELACIONAMENTO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoRelacionamentoSkill;

	for( ;; )
	{
		memset( &ORA_dsTipoRelacionamentoSkill, 0, sizeof(ORA_dsTipoRelacionamentoSkill) );
		memset( &ORA_idTipoRelacionamentoSkill, 0, sizeof(ORA_idTipoRelacionamentoSkill) );
		EXEC SQL 
		FETCH 
			ReadTipoRelacionamentoSkill 
		INTO 
			:ORA_dsTipoRelacionamentoSkill, 
			:ORA_idTipoRelacionamentoSkill;

		Saida->createTag( "TipoPessoaVO" );
        Saida->addProp( "xmlns","http://fidelizacao.fo.vivo.com.br/vo" );
		Saida->addItem( "idtipopessoa" ,(char*)ORA_idTipoRelacionamentoSkill.arr );
		Saida->addItem( "dstipopessoa" ,(char*)ORA_dsTipoRelacionamentoSkill.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoRelacionamentoSkill;
	ULOG_END("int CGrupoSkill::ConsultaTipoRelacionamentoSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoRelacionamentoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoRelacionamentoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoRelacionamentoSkillSelecionado[280];
		VARCHAR ORA_idTipoRelacionamentoSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoRelacionamentoSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoRelacionamentoSkillSelecionado CURSOR FOR 
	SELECT 
        TIPORELACIONAMENTO.NMTIPORELACIONAMENTO,
        TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
    FROM 
        CUSTOMER.TIPORELACIONAMENTO TIPORELACIONAMENTO,
        ACESSO.TPRELACIONAMENTOGRUPOSKILL TPRELACIONAMENTOGRUPOSKILL
    WHERE 
    	TPRELACIONAMENTOGRUPOSKILL.IDTIPORELACIONAMENTO = TIPORELACIONAMENTO.IDTIPORELACIONAMENTO
    AND
    	TPRELACIONAMENTOGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(TIPORELACIONAMENTO.NMTIPORELACIONAMENTO);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoRelacionamentoSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsTipoRelacionamentoSkillSelecionado, 0, sizeof(ORA_dsTipoRelacionamentoSkillSelecionado) );
		memset( &ORA_idTipoRelacionamentoSkillSelecionado, 0, sizeof(ORA_idTipoRelacionamentoSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadTipoRelacionamentoSkillSelecionado 
		INTO 
			:ORA_dsTipoRelacionamentoSkillSelecionado, 
			:ORA_idTipoRelacionamentoSkillSelecionado;

		Saida->createTag( "TipoPessoaVO" );
        Saida->addProp( "xmlns","http://fidelizacao.fo.vivo.com.br/vo" );
		Saida->addItem( "idtipopessoa" ,(char*)ORA_idTipoRelacionamentoSkillSelecionado.arr );
		Saida->addItem( "dstipopessoa" ,(char*)ORA_dsTipoRelacionamentoSkillSelecionado.arr );
		Saida->closeTag();
	}
	EXEC SQL CLOSE ReadTipoRelacionamentoSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaTipoRelacionamentoSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoLinhaSkill( char *pzcidGrupoSkill, XMLGen* Saida )
{
	ULOG_START("int CGrupoSkill::ConsultaTipoLinhaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoLinhaSkill[280];
		VARCHAR ORA_idTipoLinhaSkill[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoLinhaSkill");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoLinhaSkill CURSOR FOR 
	SELECT 
        TIPOLINHA.DSTIPOLINHA,
        TIPOLINHA.IDTIPOLINHA
    FROM 
        APOIO.TIPOLINHA TIPOLINHA,
        CONTATOADM.TIPOLINHAGRUPO TIPOLINHAGRUPO
    WHERE 
        TIPOLINHA.IDTIPOLINHA NOT IN ( SELECT IDTIPOLINHA FROM ACESSO.TIPOLINHAGRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOLINHAGRUPO.IDGRUPO = ( SELECT IDGRUPO FROM ACESSO.GRUPOSKILL WHERE IDGRUPOSKILL = :pzcidGrupoSkillAux )
    AND
    	TIPOLINHAGRUPO.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA
    ORDER BY
        UPPER(TIPOLINHA.DSTIPOLINHA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoLinhaSkill;

	for( ;; )
	{
		memset( &ORA_dsTipoLinhaSkill, 0, sizeof(ORA_dsTipoLinhaSkill) );
		memset( &ORA_idTipoLinhaSkill, 0, sizeof(ORA_idTipoLinhaSkill) );
		EXEC SQL 
		FETCH 
			ReadTipoLinhaSkill 
		INTO 
			:ORA_dsTipoLinhaSkill, 
			:ORA_idTipoLinhaSkill;

		Saida->createTag( "TipoLinhaVO" );
		Saida->addProp( "xmlns","cliente.fo.vivo.com.br/vo" );
		Saida->addItem( "id"        ,(char*)ORA_idTipoLinhaSkill.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoLinhaSkill.arr );
		Saida->closeTag();

		memset( &ORA_dsTipoLinhaSkill, 0, sizeof(ORA_dsTipoLinhaSkill) );
		memset( &ORA_idTipoLinhaSkill, 0, sizeof(ORA_idTipoLinhaSkill) );
	}
	EXEC SQL CLOSE ReadTipoLinhaSkill;
	ULOG_END("int CGrupoSkill::ConsultaTipoLinhaSkill( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}

/******************************************************************************************************/
int CGrupoSkill::ConsultaTipoLinhaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )
{
    ULOG_START("int CGrupoSkill::ConsultaTipoLinhaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR ORA_dsTipoLinhaSkillSelecionado[280];
		VARCHAR ORA_idTipoLinhaSkillSelecionado[21+1];
		const char*   pzcidGrupoSkillAux;
	EXEC SQL END DECLARE SECTION;

    ULOG( "==================================================================");
    ULOG( "Inicio do processamento de CGrupoSkill::ConsultaTipoLinhaSkillSelecionado");
    ULOG( "$Revision: 1.1 $");
    ULOG( "$Date: 2009/07/31 15:33:21 $");
    ULOG( "==================================================================");

	sqlca.sqlcode=0;
	pzcidGrupoSkillAux = pzcidGrupoSkill;

	EXEC SQL 
	DECLARE 
		ReadTipoLinhaSkillSelecionado CURSOR FOR 
	SELECT 
        TIPOLINHA.DSTIPOLINHA,
        TIPOLINHA.IDTIPOLINHA
    FROM 
        APOIO.TIPOLINHA TIPOLINHA,
        ACESSO.TIPOLINHAGRUPOSKILL TIPOLINHAGRUPOSKILL
    WHERE 
    	TIPOLINHAGRUPOSKILL.IDTIPOLINHA = TIPOLINHA.IDTIPOLINHA
    AND
    	TIPOLINHAGRUPOSKILL.IDGRUPOSKILL = :pzcidGrupoSkillAux
    ORDER BY
        UPPER(TIPOLINHA.DSTIPOLINHA);

	EXEC SQL WHENEVER SQLERROR GOTO UndefinedError;
	EXEC SQL WHENEVER NOT FOUND DO break;
   
	EXEC SQL OPEN ReadTipoLinhaSkillSelecionado;

	for( ;; )
	{
		memset( &ORA_dsTipoLinhaSkillSelecionado, 0, sizeof(ORA_dsTipoLinhaSkillSelecionado) );
		memset( &ORA_idTipoLinhaSkillSelecionado, 0, sizeof(ORA_idTipoLinhaSkillSelecionado) );
		EXEC SQL 
		FETCH 
			ReadTipoLinhaSkillSelecionado 
		INTO 
			:ORA_dsTipoLinhaSkillSelecionado, 
			:ORA_idTipoLinhaSkillSelecionado;

		Saida->createTag( "TipoLinhaVO" );
		Saida->addProp( "xmlns","cliente.fo.vivo.com.br/vo" );
		Saida->addItem( "id"        ,(char*)ORA_idTipoLinhaSkillSelecionado.arr );
		Saida->addItem( "descricao" ,(char*)ORA_dsTipoLinhaSkillSelecionado.arr );
		Saida->closeTag();

		memset( &ORA_dsTipoLinhaSkillSelecionado, 0, sizeof(ORA_dsTipoLinhaSkillSelecionado) );
		memset( &ORA_idTipoLinhaSkillSelecionado, 0, sizeof(ORA_idTipoLinhaSkillSelecionado) );
	}
	EXEC SQL CLOSE ReadTipoLinhaSkillSelecionado;
	ULOG_END("int CGrupoSkill::ConsultaTipoLinhaSkillSelecionado( char *pzcidGrupoSkill, XMLGen* Saida )");
	return 1;

UndefinedError:
        throw new TuxBasicOraException(sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc,sqlca.sqlerrm.sqlerrml);
}
