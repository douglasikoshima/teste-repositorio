#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CSiteConsultorAtd.h"

CSiteConsultorAtd::CSiteConsultorAtd() {}

CSiteConsultorAtd::~CSiteConsultorAtd() {}

int CSiteConsultorAtd::ListId( const char *cidSiteConsultorAtd )
{
    ULOG_START("CSiteConsultorAtd::ListId()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *cAuxidSiteConsultorAtd = cidSiteConsultorAtd;

        struct
        {
            VARCHAR stidSiteConsultorAtd[10+1];
            VARCHAR stdsSiteConsultorAtd[255+1];
        } stSiteConsultorAtdRegistro;

        struct
        {
            short iidSiteConsultorAtd;
            short idsSiteConsultorAtd;
        } stSiteConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraSiteConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorSiteConsultorAtdId CURSOR FOR
            SELECT
                idSiteConsultorAtd,
                dsSiteConsultorAtd
            FROM
                APOIO.SITECONSULTORATD
            WHERE
                idSiteConsultorAtd = :cAuxidSiteConsultorAtd;

        EXEC SQL OPEN CursorSiteConsultorAtdId;

        while(true)
        {
            memset( &stSiteConsultorAtdRegistro, 0, sizeof(stSiteConsultorAtdRegistro) );
            memset( &stSiteConsultorAtdIndicator, 0, sizeof(stSiteConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorSiteConsultorAtdId
                INTO :stSiteConsultorAtdRegistro:stSiteConsultorAtdIndicator;

            Add( (char*)stSiteConsultorAtdRegistro.stidSiteConsultorAtd.arr,
                 (char*)stSiteConsultorAtdRegistro.stdsSiteConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorSiteConsultorAtdId;

        ULOG_END("CSiteConsultorAtd::ListId()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

int CSiteConsultorAtd::ListAll(void)
{
    ULOG_START("CSiteConsultorAtd::ListAll()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR stidSiteConsultorAtd[10+1];
            VARCHAR stdsSiteConsultorAtd[255+1];
        } stSiteConsultorAtdRegistro;

        struct
        {
            short iidSiteConsultorAtd;
            short idsSiteConsultorAtd;
        } stSiteConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraSiteConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorSiteConsultorAtdAll CURSOR FOR
            SELECT
                idSiteConsultorAtd,
                dsSiteConsultorAtd
            FROM
                APOIO.SITECONSULTORATD
            ORDER BY
                UPPER(dsSiteConsultorAtd);

        EXEC SQL OPEN CursorSiteConsultorAtdAll;

        while(true)
        {
            memset( &stSiteConsultorAtdRegistro, 0, sizeof(stSiteConsultorAtdRegistro) );
            memset( &stSiteConsultorAtdIndicator, 0, sizeof(stSiteConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorSiteConsultorAtdAll
                INTO :stSiteConsultorAtdRegistro:stSiteConsultorAtdIndicator;

            Add( (char*)stSiteConsultorAtdRegistro.stidSiteConsultorAtd.arr,
                 (char*)stSiteConsultorAtdRegistro.stdsSiteConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorSiteConsultorAtdAll;

        ULOG_END("CSiteConsultorAtd::ListAll()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

void CSiteConsultorAtd::GetXml( char* cNomeTag, XMLGen*xml )
{
    if( Quantidade() > 0 )
    {
        for( int x = 0; x < Quantidade(); x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) != NULL )
            {
                xml->addItem("idSiteConsultorAtd", Registro(x)->cidSiteConsultorAtd );
                xml->addItem("dsSiteConsultorAtd", Registro(x)->cdsSiteConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CSiteConsultorAtd::GetXmlFrm( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp("xmlns:ns1", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) )
            {
                xml->addItem("ns1:idSiteConsultorAtd", Registro(x)->cidSiteConsultorAtd );
                xml->addItem("ns1:dsSiteConsultorAtd", Registro(x)->cdsSiteConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CSiteConsultorAtd::GetXmlPadrao( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            if( strlennull( cNomeTag ) > 0 )
                xml->createTag(cNomeTag);
            if( Registro( x ) != NULL )
            {
                xml->addItem("idSiteConsultorAtd", Registro(x)->cidSiteConsultorAtd );
                xml->addItem("dsSiteConsultorAtd", Registro(x)->cdsSiteConsultorAtd );
            }
            if( strlennull( cNomeTag ) > 0 )
                xml->closeTag();
        }
    }
}
