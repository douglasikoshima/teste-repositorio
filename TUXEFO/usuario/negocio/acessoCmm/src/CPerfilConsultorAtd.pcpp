#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CPerfilConsultorAtd.h"

CPerfilConsultorAtd::CPerfilConsultorAtd() {}

CPerfilConsultorAtd::~CPerfilConsultorAtd() {}

int CPerfilConsultorAtd::ListId( const char *cidPerfilConsultorAtd )
{
    ULOG_START("CPerfilConsultorAtd::ListId()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *cAuxidPerfilConsultorAtd = cidPerfilConsultorAtd;

        struct
        {
            VARCHAR stidPerfilConsultorAtd[10+1];
            VARCHAR stdsPerfilConsultorAtd[255+1];
        } stPerfilConsultorAtdRegistro;

        struct
        {
            short iidPerfilConsultorAtd;
            short idsPerfilConsultorAtd;
        } stPerfilConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraPerfilConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorPerfilConsultorAtdId CURSOR FOR
            SELECT
                idPerfilConsultorAtd,
                dsPerfilConsultorAtd
            FROM
                APOIO.PERFILCONSULTORATD
            WHERE
                idPerfilConsultorAtd = :cAuxidPerfilConsultorAtd;

        EXEC SQL OPEN CursorPerfilConsultorAtdId;

        while(true)
        {
            memset( &stPerfilConsultorAtdRegistro, 0, sizeof(stPerfilConsultorAtdRegistro) );
            memset( &stPerfilConsultorAtdIndicator, 0, sizeof(stPerfilConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorPerfilConsultorAtdId
                INTO :stPerfilConsultorAtdRegistro:stPerfilConsultorAtdIndicator;

            Add( (char*)stPerfilConsultorAtdRegistro.stidPerfilConsultorAtd.arr,
                 (char*)stPerfilConsultorAtdRegistro.stdsPerfilConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorPerfilConsultorAtdId;

        ULOG_END("CPerfilConsultorAtd::ListId()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

int CPerfilConsultorAtd::ListAll(void)
{
    ULOG_START("CPerfilConsultorAtd::ListAll()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR stidPerfilConsultorAtd[10+1];
            VARCHAR stdsPerfilConsultorAtd[255+1];
        } stPerfilConsultorAtdRegistro;

        struct
        {
            short iidPerfilConsultorAtd;
            short idsPerfilConsultorAtd;
        } stPerfilConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraPerfilConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorPerfilConsultorAtdAll CURSOR FOR
            SELECT
                idPerfilConsultorAtd,
                dsPerfilConsultorAtd
            FROM
                APOIO.PERFILCONSULTORATD
            ORDER BY
                NRPESOHIERARQUIA;

        EXEC SQL OPEN CursorPerfilConsultorAtdAll;

        while(true)
        {
            memset( &stPerfilConsultorAtdRegistro, 0, sizeof(stPerfilConsultorAtdRegistro) );
            memset( &stPerfilConsultorAtdIndicator, 0, sizeof(stPerfilConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorPerfilConsultorAtdAll
                INTO :stPerfilConsultorAtdRegistro:stPerfilConsultorAtdIndicator;

            Add( (char*)stPerfilConsultorAtdRegistro.stidPerfilConsultorAtd.arr,
                 (char*)stPerfilConsultorAtdRegistro.stdsPerfilConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorPerfilConsultorAtdAll;

        ULOG_END("CPerfilConsultorAtd::ListAll()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

void CPerfilConsultorAtd::GetXml( char* cNomeTag, XMLGen*xml )
{
    if( Quantidade() > 0 )
    {
        for( int x = 0; x < Quantidade(); x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) != NULL )
            {
                xml->addItem("idPerfilConsultorAtd", Registro(x)->cidPerfilConsultorAtd );
                xml->addItem("dsPerfilConsultorAtd", Registro(x)->cdsPerfilConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CPerfilConsultorAtd::GetXmlFrm( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp("xmlns:ns1", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) )
            {
                xml->addItem("ns1:idPerfilConsultorAtd", Registro(x)->cidPerfilConsultorAtd );
                xml->addItem("ns1:dsPerfilConsultorAtd", Registro(x)->cdsPerfilConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CPerfilConsultorAtd::GetXmlPadrao( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            if( strlennull( cNomeTag ) > 0 )
                xml->createTag(cNomeTag);
            if( Registro( x ) != NULL )
            {
                xml->addItem("idPerfilConsultorAtd", Registro(x)->cidPerfilConsultorAtd );
                xml->addItem("dsPerfilConsultorAtd", Registro(x)->cdsPerfilConsultorAtd );
            }
            if( strlennull( cNomeTag ) > 0 )
                xml->closeTag();
        }
    }
}
