#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "CUF.h"

CUF::CUF()
{
}

CUF::~CUF()
{
}

int CUF::ListId( char* cid )
{
	ULOG_START("CUF::ListId( char* cid )");	
	
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidOra = cid;
		struct
		{
			VARCHAR stId[21+1];
			VARCHAR stSigla[255+1];
			VARCHAR stNome[255+1];
		} stUFRegistro;
		struct
		{
			short iId;
			short iSigla;
			short iNome;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	try
	{
		ZeraUF();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;
	
	   	EXEC SQL DECLARE CursorUFId CURSOR FOR
			SELECT IDUF, 
			       SGUF, 
			       NMUF
			  FROM APOIO.UF
			 WHERE IDUF = :cidOra;
	
		EXEC SQL OPEN CursorUFId;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUF::ListId( char* cid )");	
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				EXEC SQL FETCH CursorUFId INTO :stUFRegistro:stUFIndicator;
	
				Add( (char*)stUFRegistro.stId.arr, (char*)stUFRegistro.stSigla.arr, (char*)stUFRegistro.stNome.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorUFId;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUF::ListId( char* cid )");	
	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CUF::ListAll( void )
{
	ULOG_START("CUF::ListAll()");	
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stId[21+1];
			VARCHAR stSigla[255+1];
			VARCHAR stNome[255+1];
		} stUFRegistro;
		struct
		{
			short iId;
			short iSigla;
			short iNome;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	try
	{
		ZeraUF();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;
	
	   	EXEC SQL 
			DECLARE 
				CursorUFAll CURSOR FOR
			SELECT 
				IDUF, 
			    SGUF, 
			    NMUF
			FROM 
				APOIO.UF
			WHERE
				INPREENCHELISTA = 1
			ORDER BY
				UPPER(NMUF);
	
		EXEC SQL OPEN CursorUFAll;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUF::ListAll()");	
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				EXEC SQL FETCH CursorUFAll INTO :stUFRegistro:stUFIndicator;
	
				Add( (char*)stUFRegistro.stId.arr, (char*)stUFRegistro.stSigla.arr, (char*)stUFRegistro.stNome.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorUFAll;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUF::ListAll()");	
	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}


int CUF::ListSigla( char* csgUF )
{
	ULOG_START("CUF::ListSigla()");	
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cAuxsgUF = csgUF;
		struct
		{
			VARCHAR stId[21+1];
			VARCHAR stSigla[255+1];
			VARCHAR stNome[255+1];
		} stUFRegistro;
		struct
		{
			short iId;
			short iSigla;
			short iNome;
		} stUFIndicator;
	EXEC SQL END DECLARE SECTION;

	try
	{
		ZeraUF();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListSigla;
		sqlca.sqlcode=0;
	
	   	EXEC SQL DECLARE CursorListSigla CURSOR FOR
			SELECT UF.IDUF, 
			       UF.SGUF, 
			       UF.NMUF
			  FROM APOIO.UF UF
			 WHERE UF.SGUF = :cAuxsgUF;
	
		EXEC SQL OPEN CursorListSigla;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CUF::ListSigla()");	
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stUFRegistro, 0, sizeof(stUFRegistro) );
				EXEC SQL FETCH CursorListSigla INTO :stUFRegistro:stUFIndicator;
	
				Add( (char*)stUFRegistro.stId.arr
				    ,(char*)stUFRegistro.stSigla.arr
				    ,(char*)stUFRegistro.stNome.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorListSigla;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CUF::ListSigla()");	
	return iCont;

GotoListSigla:
	throw TuxBasicOraException(sqlca.sqlcode);
}

void CUF::GetXml( char* cNomeTag, XMLGen*xml )
{
	ULOG_START("CUF::GetXml()");	
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp(	"xmlns", "usuario.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idUF"  , Registro(x)->cidUF   );
				xml->addItem("sgUF"  , Registro(x)->csgUF   );
				xml->addItem("nmUF"  , Registro(x)->cnmUF   );
			}
			xml->closeTag();
		}
	}
	ULOG_END("CUF::GetXml()");	
}