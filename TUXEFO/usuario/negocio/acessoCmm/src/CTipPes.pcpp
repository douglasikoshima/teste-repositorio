#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "CTipPes.h"

CTipPes::CTipPes()
{
}

CTipPes::~CTipPes()
{
}

int CTipPes::ListId( char* cid )
{
	ULOG_START("CTipPes::ListId()");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		char* cidOra = cid;
		struct
		{
			VARCHAR stId[21+1];
			VARCHAR stSigla[255+1];
			VARCHAR stDescricao[255+1];
		} stTipoPessoaRegistro;
		struct
		{
			short iId;
			short iSigla;
			short iDescricao;
		} stTipoPessoaIndicator;
	EXEC SQL END DECLARE SECTION;
	
	try
	{
		ZeraTipoPessoa();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListId;
		sqlca.sqlcode=0;
	
	   	EXEC SQL DECLARE CursorTipoPessoaId CURSOR FOR
			SELECT IDTIPOPESSOA, 
			       SGTIPOPESSOA, 
			       DSTIPOPESSOA 
			  FROM APOIO.TIPOPESSOA
			 WHERE IDTIPOPESSOA = :cidOra;
	
		EXEC SQL OPEN CursorTipoPessoaId;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CTipPes::ListId()");
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stTipoPessoaRegistro, 0, sizeof(stTipoPessoaRegistro) );
				EXEC SQL FETCH CursorTipoPessoaId INTO :stTipoPessoaRegistro:stTipoPessoaIndicator;
	
				Add( (char*)stTipoPessoaRegistro.stId.arr, (char*)stTipoPessoaRegistro.stSigla.arr, (char*)stTipoPessoaRegistro.stDescricao.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorTipoPessoaId;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CTipPes::ListId()");
	return iCont;

GotoListId:
	throw TuxBasicOraException(sqlca.sqlcode);

}

int CTipPes::ListAll( void )
{
	ULOG_START("CTipPes::ListAll()");
	int    iCont = 0;
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		struct
		{
			VARCHAR stId[21+1];
			VARCHAR stSigla[255+1];
			VARCHAR stDescricao[255+1];
		} stTipoPessoaRegistro;
		struct
		{
			short iId;
			short iSigla;
			short iDescricao;
		} stTipoPessoaIndicator;
	EXEC SQL END DECLARE SECTION;
	try
	{
		ZeraTipoPessoa();
	
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;
		sqlca.sqlcode=0;
	
	   	EXEC SQL DECLARE CursorTipoPessoaAll CURSOR FOR
			SELECT IDTIPOPESSOA, 
			       SGTIPOPESSOA, 
			       DSTIPOPESSOA 
			  FROM APOIO.TIPOPESSOA;
	
		EXEC SQL OPEN CursorTipoPessoaAll;
	
		if(sqlca.sqlcode)
		{
			ULOG_END("CTipPes::ListAll()");
			return 0;
		}
		else
		{
			for(;;)
			{
				memset( &stTipoPessoaRegistro, 0, sizeof(stTipoPessoaRegistro) );
				EXEC SQL FETCH CursorTipoPessoaAll INTO :stTipoPessoaRegistro:stTipoPessoaIndicator;
	
				Add( (char*)stTipoPessoaRegistro.stId.arr, (char*)stTipoPessoaRegistro.stSigla.arr, (char*)stTipoPessoaRegistro.stDescricao.arr );
	
				iCont++;
	
			}
			EXEC SQL CLOSE CursorTipoPessoaAll;
		}
	}
	catch(...)
	{
		throw;
	}
	ULOG_END("CTipPes::ListAll()");
	return iCont;

GotoListAll:
	throw TuxBasicOraException(sqlca.sqlcode);

}

void CTipPes::GetXml( char* cNomeTag, XMLGen*xml )
{
	ULOG_START("CTipPes::GetXml()");
	if( Quantidade() > 0 )
	{
		for( int x = 0; x < Quantidade(); x++ )
		{
			xml->createTag(cNomeTag);
			xml->addProp(	"xmlns", "usuario.fo.vivo.com.br/vo" );
			if( Registro( x ) != NULL )
			{
				xml->addItem("idTipoPessoa"  , Registro(x)->cidTipoPessoa   );
				xml->addItem("sgTipoPessoa"  , Registro(x)->csgTipoPessoa   );
				xml->addItem("dsTipoPessoa"  , Registro(x)->cdsTipoPessoa   );
			}
			xml->closeTag();
		}
	}
	ULOG_END("CTipPes::GetXml()");
}