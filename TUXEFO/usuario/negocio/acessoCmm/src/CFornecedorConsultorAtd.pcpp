#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include "../include/CFornecedorConsultorAtd.h"

CFornecedorConsultorAtd::CFornecedorConsultorAtd() {}

CFornecedorConsultorAtd::~CFornecedorConsultorAtd() {}

int CFornecedorConsultorAtd::ListId( const char *cidFornecedorConsultorAtd )
{
    ULOG_START("CFornecedorConsultorAtd::ListId()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        const char *cAuxidFornecedorConsultorAtd = cidFornecedorConsultorAtd;

        struct
        {
            VARCHAR stidFornecedorConsultorAtd[10+1];
            VARCHAR stdsFornecedorConsultorAtd[255+1];
        } stFornecedorConsultorAtdRegistro;

        struct
        {
            short iidFornecedorConsultorAtd;
            short idsFornecedorConsultorAtd;
        } stFornecedorConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraFornecedorConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListId;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorFornecedorConsultorAtdId CURSOR FOR
            SELECT
                idFornecedorConsultorAtd,
                dsFornecedorConsultorAtd
            FROM
                APOIO.FORNECEDORCONSULTORATD
            WHERE
                idFornecedorConsultorAtd = :cAuxidFornecedorConsultorAtd;

        EXEC SQL OPEN CursorFornecedorConsultorAtdId;

        while(true)
        {
            memset( &stFornecedorConsultorAtdRegistro, 0, sizeof(stFornecedorConsultorAtdRegistro) );
            memset( &stFornecedorConsultorAtdIndicator, 0, sizeof(stFornecedorConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorFornecedorConsultorAtdId
                INTO :stFornecedorConsultorAtdRegistro:stFornecedorConsultorAtdIndicator;

            Add( (char*)stFornecedorConsultorAtdRegistro.stidFornecedorConsultorAtd.arr,
                 (char*)stFornecedorConsultorAtdRegistro.stdsFornecedorConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorFornecedorConsultorAtdId;

        ULOG_END("CFornecedorConsultorAtd::ListId()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListId:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

int CFornecedorConsultorAtd::ListAll(void)
{
    ULOG_START("CFornecedorConsultorAtd::ListAll()");

    //int iCont = 0;
    struct sqlca sqlca;

    EXEC SQL BEGIN DECLARE SECTION;
        struct
        {
            VARCHAR stidFornecedorConsultorAtd[10+1];
            VARCHAR stdsFornecedorConsultorAtd[255+1];
        } stFornecedorConsultorAtdRegistro;

        struct
        {
            short iidFornecedorConsultorAtd;
            short idsFornecedorConsultorAtd;
        } stFornecedorConsultorAtdIndicator;
    EXEC SQL END DECLARE SECTION;

    try
    {
        ZeraFornecedorConsultorAtd();

        EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL WHENEVER SQLERROR GOTO GotoListAll;

        sqlca.sqlcode=0;

        EXEC SQL DECLARE CursorFornecedorConsultorAtdAll CURSOR FOR
            SELECT
                idFornecedorConsultorAtd,
                dsFornecedorConsultorAtd
            FROM
                APOIO.FORNECEDORCONSULTORATD
            ORDER BY
                UPPER(dsFornecedorConsultorAtd);

        EXEC SQL OPEN CursorFornecedorConsultorAtdAll;

        while(true)
        {
            memset( &stFornecedorConsultorAtdRegistro, 0, sizeof(stFornecedorConsultorAtdRegistro) );
            memset( &stFornecedorConsultorAtdIndicator, 0, sizeof(stFornecedorConsultorAtdIndicator) );

            EXEC SQL
                FETCH CursorFornecedorConsultorAtdAll
                INTO :stFornecedorConsultorAtdRegistro:stFornecedorConsultorAtdIndicator;

            Add( (char*)stFornecedorConsultorAtdRegistro.stidFornecedorConsultorAtd.arr,
                 (char*)stFornecedorConsultorAtdRegistro.stdsFornecedorConsultorAtd.arr );

            //iCont++;
        }

        EXEC SQL CLOSE CursorFornecedorConsultorAtdAll;

        ULOG_END("CFornecedorConsultorAtd::ListAll()");

        return Quantidade();
    }
    catch(...)
    {
        throw;
    }

GotoListAll:
    ULOGE( "ERRO ORACLE:sqlcode = [%d],sqlerrmc = [%.70s]",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    throw TuxBasicOraException(sqlca.sqlcode);
}

void CFornecedorConsultorAtd::GetXml( char* cNomeTag, XMLGen*xml )
{
    if( Quantidade() > 0 )
    {
        for( int x = 0; x < Quantidade(); x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp( "xmlns", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) != NULL )
            {
                xml->addItem("idFornecedorConsultorAtd", Registro(x)->cidFornecedorConsultorAtd );
                xml->addItem("dsFornecedorConsultorAtd", Registro(x)->cdsFornecedorConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CFornecedorConsultorAtd::GetXmlFrm( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            xml->createTag(cNomeTag);
            xml->addProp("xmlns:ns1", "usuario.fo.vivo.com.br/vo" );
            if( Registro( x ) )
            {
                xml->addItem("ns1:idFornecedorConsultorAtd", Registro(x)->cidFornecedorConsultorAtd );
                xml->addItem("ns1:dsFornecedorConsultorAtd", Registro(x)->cdsFornecedorConsultorAtd );
            }
            xml->closeTag();
        }
    }
}

void CFornecedorConsultorAtd::GetXmlPadrao( char* cNomeTag, XMLGen*xml )
{
    int quantidade = Quantidade();

    if( quantidade > 0 )
    {
        for( int x = 0; x < quantidade; x++ )
        {
            if( strlennull( cNomeTag ) > 0 )
                xml->createTag(cNomeTag);
            if( Registro( x ) != NULL )
            {
                xml->addItem("idFornecedorConsultorAtd", Registro(x)->cidFornecedorConsultorAtd );
                xml->addItem("dsFornecedorConsultorAtd", Registro(x)->cdsFornecedorConsultorAtd );
            }
            if( strlennull( cNomeTag ) > 0 )
                xml->closeTag();
        }
    }
}
