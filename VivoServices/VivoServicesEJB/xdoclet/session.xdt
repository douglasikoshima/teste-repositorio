/*
 * <XDtI18n:getString bundle="xdoclet.modules.ejb.XDocletModulesEjbMessages" resource="do_not_edit"/>
 */
<XDtPackage:packageDeclarationOf><XDtEjbSession:sessionClass/></XDtPackage:packageDeclarationOf>

import javax.ejb.EJBException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * <XDtI18n:getString bundle="xdoclet.modules.ejb.XDocletModulesEjbMessages" resource="session_layer_for" arguments="<XDtEjb:ejbName/>"/>
<XDtClass:classCommentTags indent="0"/> */
public class <XDtClass:classOf><XDtEjbSession:sessionClass/></XDtClass:classOf>
   extends <XDtClass:fullClassName/>
   implements javax.ejb.SessionBean<XDtClass:ifHasClassTag tagName="ejb:bean" paramName="remote-business-interface">, <XDtClass:classTagValue tagName="ejb:bean" paramName="remote-business-interface" /></XDtClass:ifHasClassTag><XDtClass:ifHasClassTag tagName="ejb:bean" paramName="local-business-interface">, <XDtClass:classTagValue tagName="ejb:bean" paramName="local-business-interface" /></XDtClass:ifHasClassTag>
{
   private static final long serialVersionUID = 1L;

   private static final Log logger = LogFactory.getLog(<XDtClass:classOf><XDtEjbSession:sessionClass/></XDtClass:classOf>.class);

   public void ejbActivate() <XDtMethod:exceptionList method="ejbActivate"/>
   {

   <XDtEjbSession:ifStatefulSession>
    <XDtEjbEnv:ifHasTag tagName="ejb.resource-ref,ejb.resource-env-ref,ejb.destination-ref,ejb.ejb-service-ref">      
      javax.naming.Context namingCtx = null;
      try 
      {
         namingCtx = new javax.naming.InitialContext();
      <XDtEjbEnv:forAllMemberTags tagName="ejb.resource-env-ref,ejb.destination-ref,ejb.ejb-service-ref">
         <XDtEjbEnv:memberName/> = (<XDtEjbEnv:type/>) namingCtx.lookup("java:comp/env/<XDtEjbEnv:name paramName="name"/>");       
      </XDtEjbEnv:forAllMemberTags>
      <XDtEjbEnv:forAllMemberTags tagName="ejb.resource-ref">
         <XDtEjbEnv:memberName/> = (<XDtEjbEnv:type/>) namingCtx.lookup("java:comp/env/<XDtEjbEnv:name paramName="res-name,res-ref-name"/>");       
      </XDtEjbEnv:forAllMemberTags>
      } 
      catch(javax.naming.NamingException e) 
      {
	     throw new javax.ejb.EJBException("lookup failed", e);
      }
      finally {
         if (namingCtx != null) 
         {
            try 
            {
               namingCtx.close(); 
            }
            catch(javax.naming.NamingException e) 
            {
               e.printStackTrace();
            }			
         }
      }
    </XDtEjbEnv:ifHasTag>      
   </XDtEjbSession:ifStatefulSession>
         
     <XDtMethod:ifHasMethod name="ejbActivate">
      super.ejbActivate();
     </XDtMethod:ifHasMethod>
   }

   public void ejbPassivate() <XDtMethod:exceptionList method="ejbPassivate"/>
   {
     <XDtMethod:ifHasMethod name="ejbPassivate">
      super.ejbPassivate();
     </XDtMethod:ifHasMethod>
     <XDtEjbSession:ifStatefulSession>
      <XDtEjbEnv:forAllMemberTags tagName="ejb.resource-ref,ejb.resource-env-ref,ejb.destination-ref,ejb.ejb-service-ref,">      
      <XDtEjbEnv:memberName/> = null;
      </XDtEjbEnv:forAllMemberTags>
     </XDtEjbSession:ifStatefulSession>
   }

   public void setSessionContext(javax.ejb.SessionContext ctx) <XDtMethod:exceptionList method="setSessionContext"/>
   {
     <XDtMerge:merge file="xdoclet/modules/ejb/env/resources/env-lookups.xdt">
     </XDtMerge:merge>
     <XDtMethod:ifHasMethod name="setSessionContext" parameters="javax.ejb.SessionContext">
      super.setSessionContext(ctx);
     </XDtMethod:ifHasMethod>
   }

   public void unsetSessionContext() <XDtMethod:exceptionList method="unsetSessionContext"/>
   {
     <XDtMethod:ifHasMethod name="unsetSessionContext">
      super.unsetSessionContext();
     </XDtMethod:ifHasMethod>
   }

   public void ejbRemove() <XDtMethod:exceptionList method="ejbRemove"/>
   {
     <XDtMethod:ifHasMethod name="ejbRemove">
      super.ejbRemove();
     </XDtMethod:ifHasMethod>
   }

 <XDtEjbSession:ifStatelessSession>
  <XDtMethod:ifDoesntHaveMethod name="ejbCreate">
   public void ejbCreate() throws javax.ejb.CreateException
   {
   }
  </XDtMethod:ifDoesntHaveMethod>
 </XDtEjbSession:ifStatelessSession>

<XDtEjbDao:ifUsingDao>
   <XDtMerge:merge file="xdoclet/modules/ejb/dao/resources/dao-methods.xdt">
   </XDtMerge:merge>
</XDtEjbDao:ifUsingDao>

<XDtMerge:merge file="xdoclet/modules/ejb/env/resources/env-methods.xdt">
</XDtMerge:merge>

   <XDtMerge:merge file="session-custom.xdt">
   </XDtMerge:merge>


  <XDtClass:ifDoesntHaveClassTag tagName="ejb:bean" paramName="local-business-interface">
   <XDtMethod:forAllMethods>
    <XDtEjbIntf:ifIsInterfaceMethod superclasses="false" interface="local">
	<XDtMethod:ifIsOfType type="void">	
<XDtMethod:methodComment indent="3"/>
   public <XDtMethod:methodType/> <XDtMethod:methodName/>( <XDtParameter:parameterList/> ) <XDtMethod:exceptionList/>	{
   
      //Verificação do parâmetro RequestInfoTO
      if(requestInfo == null)	{
        String errMsg = "O parâmetro requestInfo não pode ser nulo. O método <XDtMethod:methodName/> não pode ser executado.";
        logger.error(errMsg);
      	throw new NullPointerException(errMsg);
      }
      
      //Verificação do parâmetro RequestInfoTO.userName
      if(requestInfo.getUserName() == null)	{
        String errMsg = "O parâmetro RequestInfoTO.userName não pode ser nulo. O método <XDtMethod:methodName/> não pode ser executado.";
        logger.error(errMsg);
      	throw new NullPointerException(errMsg);
      }
   
   	  //Registro da app na base de dados
      br.com.indrasistemas.framework.foundation.database.AppRegisterManager appRegister = new br.com.indrasistemas.framework.foundation.database.AppRegisterManager();
      appRegister.register("<XDtClass:fullClassName/>", "<XDtMethod:methodName/>");
      
      //Se nulo é a primeira interação da cadeia de chamadas.
      if(requestInfo.getServiceName() == null)	{
        requestInfo.setServiceName("<XDtClass:fullClassName/>.<XDtMethod:methodName/>");
      }
      
      //Início token audit.
      br.com.indrasistemas.framework.foundation.audit.TokenAudit tokenAudit = new br.com.indrasistemas.framework.foundation.audit.TokenAudit();
      if(tokenAudit.isEnabled())  {
          tokenAudit.setServiceName("<XDtEjb:ejbName/>.<XDtMethod:methodName/>");
          tokenAudit.setRequestInfo(requestInfo);
          tokenAudit.sendStartToken();
      }

      //Standard audit
      br.com.indrasistemas.framework.foundation.audit.StandardAudit standardAudit = new br.com.indrasistemas.framework.foundation.audit.StandardAudit();
      if(standardAudit.isEnabled())  {
          standardAudit.setServiceName("<XDtEjb:ejbName/>.<XDtMethod:methodName/>");
          <XDtParameter:forAllMethodParams>
          standardAudit.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
      }      

      //Call
      try	{
	      super.<XDtMethod:methodName/>( <XDtParameter:parameterList includeDefinition="false"/> );
	  } catch (br.com.indrasistemas.framework.service.BusinessException e)	{
	  	  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }     
	      throw e;
	  } catch (EJBException e)	{
		  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }  
	  	  	
	  	  //Log de erro.
	      br.com.indrasistemas.framework.foundation.exception.MessageBuilder msgBuilder = new br.com.indrasistemas.framework.foundation.exception.MessageBuilder();
          <XDtParameter:forAllMethodParams>
          msgBuilder.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
	  	  logger.error(msgBuilder.buildMessage(), e);
	  	  throw e;		      
	  } catch (RuntimeException e)	{
	  	  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }  
	  	  	
	  	  //Log de erro.
	      br.com.indrasistemas.framework.foundation.exception.MessageBuilder msgBuilder = new br.com.indrasistemas.framework.foundation.exception.MessageBuilder();
          <XDtParameter:forAllMethodParams>
          msgBuilder.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
	  	  logger.error(msgBuilder.buildMessage(), e);
	  	  throw new EJBException(e);	
	  } finally {
	      
	      //Token audit -- final.
	      if(tokenAudit.isEnabled())  {
	          tokenAudit.sendReleaseToken();
	      }

	      //Standard audit -- final.
	      if(standardAudit.isEnabled())  {
	          standardAudit.sendAuditInformation();
	      }
	  }
   }
    	</XDtMethod:ifIsOfType>
    </XDtEjbIntf:ifIsInterfaceMethod>
   </XDtMethod:forAllMethods>
  </XDtClass:ifDoesntHaveClassTag>

  <XDtClass:ifDoesntHaveClassTag tagName="ejb:bean" paramName="local-business-interface">
   <XDtMethod:forAllMethods>
    <XDtEjbIntf:ifIsInterfaceMethod superclasses="false" interface="local">
	<XDtMethod:ifIsNotOfType type="void">	
<XDtMethod:methodComment indent="3"/>
   public <XDtMethod:methodType/> <XDtMethod:methodName/>( <XDtParameter:parameterList/> ) <XDtMethod:exceptionList/>	{
   
      //Verificação do parâmetro RequestInfoTO
      if(requestInfo == null)	{
        String errMsg = "O parâmetro requestInfo não pode ser nulo. O método <XDtMethod:methodName/> não pode ser executado.";
        logger.error(errMsg);
      	throw new NullPointerException(errMsg);
      }
      
      //Verificação do parâmetro RequestInfoTO.userName
      if(requestInfo.getUserName() == null)	{
        String errMsg = "O parâmetro RequestInfoTO.userName não pode ser nulo. O método <XDtMethod:methodName/> não pode ser executado.";
        logger.error(errMsg);
      	throw new NullPointerException(errMsg);
      }
   
      //Registro da app na base de dados
      br.com.indrasistemas.framework.foundation.database.AppRegisterManager appRegister = new br.com.indrasistemas.framework.foundation.database.AppRegisterManager();
      appRegister.register("<XDtClass:fullClassName/>", "<XDtMethod:methodName/>");
      
      
      //Se nulo é a primeira interação da cadeia de chamadas.
      if(requestInfo.getServiceName() == null)	{
        requestInfo.setServiceName("<XDtClass:fullClassName/>.<XDtMethod:methodName/>");
      }
            
      //Início token audit.
      br.com.indrasistemas.framework.foundation.audit.TokenAudit tokenAudit = new br.com.indrasistemas.framework.foundation.audit.TokenAudit();
      if(tokenAudit.isEnabled())  {
          tokenAudit.setServiceName("<XDtEjb:ejbName/>.<XDtMethod:methodName/>");
          tokenAudit.setRequestInfo(requestInfo);
          tokenAudit.sendStartToken();
      }

      //Standard audit
      br.com.indrasistemas.framework.foundation.audit.StandardAudit standardAudit = new br.com.indrasistemas.framework.foundation.audit.StandardAudit();
      if(standardAudit.isEnabled())  {
          standardAudit.setServiceName("<XDtEjb:ejbName/>.<XDtMethod:methodName/>");
          <XDtParameter:forAllMethodParams>
          standardAudit.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
      }      

      //Call
      <XDtMethod:methodType/> result = null;
      try	{
	      result = super.<XDtMethod:methodName/>( <XDtParameter:parameterList includeDefinition="false"/> );
	  } catch (br.com.indrasistemas.framework.service.BusinessException e)	{
	  	  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }     
	      throw e;
	  } catch (EJBException e)	{
		  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }  
	  	  	
	  	  //Log de erro.
	      br.com.indrasistemas.framework.foundation.exception.MessageBuilder msgBuilder = new br.com.indrasistemas.framework.foundation.exception.MessageBuilder();
          <XDtParameter:forAllMethodParams>
          msgBuilder.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
	  	  logger.error(msgBuilder.buildMessage(), e);
	  	  throw e;		      
	  } catch (RuntimeException e)	{
	  	  //Standard audit -- set exception.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setException(e);
	      }  
	  	  	
	  	  //Log de erro.
	      br.com.indrasistemas.framework.foundation.exception.MessageBuilder msgBuilder = new br.com.indrasistemas.framework.foundation.exception.MessageBuilder();
          <XDtParameter:forAllMethodParams>
          msgBuilder.putParameter(<XDtParameter:methodParamName/>);
          </XDtParameter:forAllMethodParams>
	  	  logger.error(msgBuilder.buildMessage(), e);
	  	  throw new EJBException(e);	
	  } finally {
	      
	      //Token audit -- final.
	      if(tokenAudit.isEnabled())  {
	          tokenAudit.sendReleaseToken();
	      }

	      //Standard audit -- final.
	      if(standardAudit.isEnabled())  {
	          standardAudit.setResult(result);
	          standardAudit.sendAuditInformation();
	      }
	  }

      return result;
   }
    	</XDtMethod:ifIsNotOfType>
    </XDtEjbIntf:ifIsInterfaceMethod>
   </XDtMethod:forAllMethods>
  </XDtClass:ifDoesntHaveClassTag>



}
