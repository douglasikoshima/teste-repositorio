
#include "../include/AtualizaPriorizacaoPC.h"

void cAtualizaPriorizacaoPC::processaAtualizacao()
{

	Log log;
	char linha[2048];

	struct sqlca sqlca;

	int iConfig=0;
	
	char* szPws;
	char* szUsr;
	char* szPath;
	char* szInst;
	int  vlLog = ERROR;

	Propriedade prop("priorizacao.cfg");

	EXEC SQL BEGIN DECLARE SECTION;
		char szConnStr[512];
	EXEC SQL END DECLARE SECTION;

	szPws = prop.getParametro("pwd");
	szUsr = prop.getParametro("usr");
	szPath= prop.getParametro("pth");
	szInst= prop.getParametro("inst");
	vlLog = atoi( prop.getParametro("log") );

	/* Verifica se todos os dados foram recuperados do arquivo de configuração. */
	if (!szPws || !szUsr || !szPath || !szInst || vlLog == 0)
    {
		log.logError("Dados incompletos!\n");
	}

	log.setNivel( vlLog );

	/* Conecta no banco de dados. */
	sprintf(szConnStr, "%s/%s@%s", szUsr, szPws, szInst);
	EXEC SQL CONNECT :szConnStr;
	if (sqlca.sqlcode)
    {
		sprintf( linha, "Erro ao conectar ao Banco de Dados - Erro Oracle [%d] - Mensagem [%s].\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
		log.logError(linha);
		return;
	}

	// Para printar o log com parametros é necessário concatenar na versao inicial do log.
	linha[0] = 0;

	EXEC SQL BEGIN DECLARE SECTION;
		int		idAtendimento;
		int		idAlerta;
		double	nrCriticidade;
		VARCHAR nmCor[256];

		short i_idAtendimento;
		short i_nrCriticidade;
		short i_idAlerta;
		short i_nmCor;

		int		idAtendimentoArray[500];
		int		idAlertaArray[500];
		double	nrCriticidadeArray[500];
		char    nmCorArray[500][256];

	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE listaAtendimentos CURSOR FOR
	    SELECT idAtendimento,
	           nrCriticidade,
	           idAlerta,
	           nmCor
	    FROM
	           atendimento.AtendimentoNovasPrioridadesV01;

	EXEC SQL OPEN listaAtendimentos;

	int itens = 0;
	int i = 0;
	int posicao = 0;

	while (true)
	{
		i++;

		EXEC SQL FETCH listaAtendimentos INTO
		 :idAtendimento:i_idAtendimento,
		 :nrCriticidade:i_nrCriticidade,
		 :idAlerta:i_idAlerta,
		 :nmCor:i_nmCor;

		// 1403 - Registro não encontrado, um warning do oracle.
		if (sqlca.sqlcode == 1403)
		{
			strcpy(linha, "FIM DO PROCESSAMENTO.");
			log.logError(linha);
			break;
		}

		// Trata erros críticos do sistema, como view com problemas, erro de cálculos, erros no ORACLE são negativos.
		if (sqlca.sqlcode < 0)
		{
			sprintf(linha, "ERRO CRITICO no processamento - Erro Oracle [%d] - Mensagem [%s].\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
			log.logError(linha);
			break;
		}

		CONVIND(nmCor, i_nmCor)

		idAtendimentoArray[posicao] = idAtendimento; 
		idAlertaArray[posicao] = idAlerta; 
		nrCriticidadeArray[posicao] = nrCriticidade;
		strcpy(nmCorArray[posicao], (char*)nmCor.arr);

		// Posicao no array.
		posicao++;

		if ( (i % 500) == 0 )
		{
			posicao = 0;

			EXEC SQL
				UPDATE
					atendimento.AtendimentoPriorizacao
				SET
					nrCriticidade = :nrCriticidadeArray,
					nmCor = :nmCorArray,
					idAlerta = :idAlertaArray,
					dtAtualizacao = SYSDATE
				WHERE
					idAtendimento = :idAtendimentoArray;

			EXEC SQL COMMIT;
		}
	} // while (true)

    if ( posicao )
    {
		if ( (i % 500) )
		{
			for (; (i % 500) != 0; i++)
			{
				idAtendimentoArray[posicao] = -1;
				idAlertaArray[posicao] = 0;
				nrCriticidadeArray[posicao] = 0;
				nmCorArray[posicao][0] = 0;
				posicao++;
			}
		}

		EXEC SQL
			UPDATE
				atendimento.AtendimentoPriorizacao
			SET
				nrCriticidade = :nrCriticidadeArray,
				nmCor = :nmCorArray,
				idAlerta = :idAlertaArray,
				dtAtualizacao = SYSDATE,
				// dtUltimaAlteracao = SYSDATE,
				idUsuarioAlteracao = 1 // assume adm do sistema
			WHERE
				idAtendimento = :idAtendimentoArray;

    	EXEC SQL COMMIT;
    }


	EXEC SQL CLOSE listaAtendimentos;
	EXEC SQL COMMIT;

	/* Desconecta do banco de dados. */
	EXEC SQL COMMIT WORK RELEASE;
	if (sqlca.sqlcode)
    {
		log.logError("Erro desconectando no banco de dados! Erro oracle...\n");
	}

}
