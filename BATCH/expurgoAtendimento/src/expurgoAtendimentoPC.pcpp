/**
 * 
 * @modulo  BATCH
 * @usecase Expurgos e encerramento de processos de porout vencidos não tratados pelo SPN
 * @author  Cassio M Garcia
 * @version $Revision: 1.1.8.7.68.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2012/02/01 19:15:51 $
 **/

#include "../include/expurgoAtendimentoPC.h"

EXEC SQL BEGIN DECLARE SECTION;
const TAM_MAX_BLOCO = 5000;
EXEC SQL END DECLARE SECTION;

bool cExpurgoAtendimentoPC::processaExpurgo()
{
    bool retorno = true;
    Log log;
    struct sqlca sqlca;

    char* szPws;
    char* szUsr;
    char* szInst;
    char linLog[2048];

    int ctAuxAtdPalitagem=0;
    int ctAuxAtdProdRepr=0;
    int ctAuxAtdEncaminhadoIncorreto=0;
    int ctAuxAtdRelQtMotRepreBKO=0;
    int ctAtendimentoPriorizacao=0;

    int vlLog = ERROR;
    //int it;

    Propriedade prop("expurgoAtendimento.cfg");

    EXEC SQL BEGIN DECLARE SECTION;
        char szConnStr[512];

        //VARCHAR varOraIdAtividade[39];
        //short statOraIdAtividade = -1;

        //VARCHAR varOraIdAndamento[39];
        //short statOraIdAndamento = -1;

        //VARCHAR varOraIdAgrupamentoEstadoTpProc[39];
        //short statOraIdAgrupamentoEstadoTpProc = -1;

        //VARCHAR varOraIdFaseRetorno[39];
        //short statOraIdFaseRetorno = -1;

        //VARCHAR lstVarOraIdAtendimento[TAM_MAX_BLOCO][39];
        //short lstStatOraIdAtendimento[TAM_MAX_BLOCO];

        //VARCHAR lstVarOraIdAtendimentoProtocolo[TAM_MAX_BLOCO][39];
        //short lstStatOraIdAtendimentoProtocolo[TAM_MAX_BLOCO];

        //VARCHAR lstVarOraIdGrupoAtual[TAM_MAX_BLOCO][39];
        //short lstStatOraIdGrupoAtual[TAM_MAX_BLOCO];

        //int rows_fetched;
        //int varOraDiasLimite;
        //int varOraSinal;

    EXEC SQL END DECLARE SECTION;
    //
    // ===============================================================================
    // CARREGA PARÂMETROS
    // ===============================================================================
    szPws = prop.getParametro("pwd_db");
    szUsr = prop.getParametro("usr_db");
    szInst= prop.getParametro("inst_db");

    // Verifica se todos os dados foram recuperados do arquivo de configuração
    if (!szPws || !szUsr || !szInst)
    {
        log.logError("Dados para conexão estão incompletos!\n");
        return false;
    }

    const char *strLog = prop.getParametro("log");
    vlLog = strLog ? atoi(strLog):2;
    log.setNivel( vlLog );
    //
    // ===============================================================================
    // CONECTA AO BANCO DE DADOS
    // ===============================================================================
    sprintf(szConnStr, "%s/%s@%s", szUsr, szPws, szInst);
    EXEC SQL CONNECT :szConnStr;
    if (sqlca.sqlcode)
    {
        sprintf(linLog,"Erro ao conectar ao Banco de Dados - "
                      "Erro Oracle [%d] - Mensagem [%s].\n"
                      ,sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        log.logError(linLog);
        return false;
    }
    //
    // ===============================================================================
    // PROCESSA
    // ===============================================================================
    //
/*
    EXPURGO DE PROCESSOS DE PORTOUT AINDA NÃO FOI LIBERADO PELA ÁREA FUNCIONAL
    FEV/2009 -- CASSIO
    log.logDebug("Vai obter constantes de processamento.\n");
    EXEC SQL
        SELECT
            IDFASE
        INTO
            :varOraIdFaseRetorno:statOraIdFaseRetorno
        FROM
            WORKFLOW.FASE
        WHERE
            DSFASE = 'RETORNO';

    EXEC SQL
        SELECT 
            IDATIVIDADE
        INTO
            :varOraIdAtividade:statOraIdAtividade
        FROM 
            WORKFLOW.ATIVIDADE
        WHERE
            SGATIVIDADE = 'EAPO'; // 'ENCERRAR AUTOMATICO PORTOUT'

    EXEC SQL
        SELECT 
            AGRUPAMENTODESTINO
        INTO
            :varOraIdAgrupamentoEstadoTpProc:statOraIdAgrupamentoEstadoTpProc
        FROM 
            WORKFLOW.PROXIMOESTADOV01
        WHERE
            IDATIVIDADE = :varOraIdAtividade:statOraIdAtividade;
*/
    //
    // ===============================================================================
    // EXPURGA DADOS PRÉ-PROCESSADOS DO RELATÓRIO DE PALITAGEM
    // ===============================================================================
    log.logDebug("Vai expurgar dados de ATENDIMENTO.AUXATDPALITAGEM.\n");
    do
    {
        EXEC SQL
            DELETE 
                ATENDIMENTO.AUXATDPALITAGEM
            WHERE
                TRUNC(DTABERTURA) < (SELECT TRUNC(SYSDATE-7) FROM DUAL)
            AND ROWNUM <= :TAM_MAX_BLOCO;

        if ( sqlca.sqlcode == -1012 || sqlca.sqlcode == -3114 )
        {
            sprintf(linLog,"ERRO ORACLE (DELETE) %d - Vai tentar reconectar!\n",sqlca.sqlcode);
            log.logError(linLog);

            EXEC SQL CONNECT :szConnStr;
            if (sqlca.sqlcode)
            {
                retorno=false;
                sprintf(linLog,"Erro ao conectar ao Banco de Dados - "
                              "Erro Oracle [%d] - Mensagem [%s].\n"
                              ,sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
                log.logError(linLog);
            }
            else
            {
                sprintf(linLog,"Reconectou com sucesso.\n",sqlca.sqlcode);
                log.logError(linLog);
                sqlca.sqlerrd[2] = 1;
            }
        }
        else if ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode )
        {
            ctAuxAtdPalitagem += sqlca.sqlerrd[2];

            EXEC SQL COMMIT;

            if ( sqlca.sqlcode )
            {
                sprintf(linLog,"ERRO ORACLE (COMMIT) %d\n",sqlca.sqlcode);
                log.logError(linLog);
            }
        }

    } while ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode );

    //
    // ===============================================================================
    // EXPURGA DADOS PRÉ-PROCESSADOS DO RELATÓRIO DE PRODUTIVIDADE POR REPRESENTANTE
    // ===============================================================================

    if ( 0 == sqlca.sqlcode || 1403 == sqlca.sqlcode)
    {
        do
        {
        log.logDebug("Vai expurgar dados de ATENDIMENTO.AUXATDPRODREPR.\n");
            EXEC SQL
                DELETE 
                    ATENDIMENTO.AUXATDPRODREPR
                WHERE
                    TRUNC(DTABERTURA) < (SELECT TRUNC(SYSDATE-365) FROM DUAL)
                AND ROWNUM <= :TAM_MAX_BLOCO;

            if ( sqlca.sqlcode == -1012 || sqlca.sqlcode == -3114 )
            {
                sprintf(linLog,"ERRO ORACLE (DELETE) %d - Vai tentar reconectar!\n",sqlca.sqlcode);
                log.logError(linLog);

                EXEC SQL CONNECT :szConnStr;
                if (sqlca.sqlcode)
                {
                    retorno=false;
                    sprintf(linLog,"Erro ao conectar ao Banco de Dados - "
                                  "Erro Oracle [%d] - Mensagem [%s].\n"
                                  ,sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                }
                else
                {
                    sprintf(linLog,"Reconectou com sucesso.\n",sqlca.sqlcode);
                    log.logError(linLog);
                    sqlca.sqlerrd[2] = 1;
                }
            }
            else if ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode )
            {
                ctAuxAtdProdRepr += sqlca.sqlerrd[2];

                EXEC SQL COMMIT;

                if ( sqlca.sqlcode )
                {
                    sprintf(linLog,"ERRO ORACLE (COMMIT) %d\n",sqlca.sqlcode);
                    log.logError(linLog);
                }
            }
        } while ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode );
    }
    else
    {
        retorno = false;
        log.logDebug("Não foi possível expurgar dados de ATENDIMENTO.AUXATDPRODREPR por falha no passo anterior.\n");
    }
    //
    // ===============================================================================
    // EXPURGA DADOS PRÉ-PROCESSADOS DO RELATÓRIO DE PROCESSOS ENCAMINHADOS INCORRETOS
    // ===============================================================================
    if ( 0 == sqlca.sqlcode || 1403 == sqlca.sqlcode)
    {
        log.logDebug("Vai expurgar dados de ATENDIMENTO.ATDENCAMINHADOINCORRETO.\n");
        do
        {
            EXEC SQL
                DELETE 
                    ATENDIMENTO.ATDENCAMINHADOINCORRETO
                WHERE
                    TRUNC(DTABERTURA) < (SELECT TRUNC(SYSDATE-365) FROM DUAL)
                AND ROWNUM <= :TAM_MAX_BLOCO;

            if ( sqlca.sqlcode == -1012 || sqlca.sqlcode == -3114 )
            {
                sprintf(linLog,"ERRO ORACLE (DELETE) %d - Vai tentar reconectar!\n",sqlca.sqlcode);
                log.logError(linLog);

                EXEC SQL CONNECT :szConnStr;
                if (sqlca.sqlcode)
                {
                    retorno=false;
                    sprintf(linLog,"Erro ao conectar ao Banco de Dados - "
                                  "Erro Oracle [%d] - Mensagem [%s].\n"
                                  ,sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                }
                else
                {
                    sprintf(linLog,"Reconectou com sucesso.\n",sqlca.sqlcode);
                    log.logError(linLog);
                    sqlca.sqlerrd[2] = 1;
                }
            }
            else if ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode )
            {
                ctAuxAtdEncaminhadoIncorreto += sqlca.sqlerrd[2];

                EXEC SQL COMMIT;

                if ( sqlca.sqlcode )
                {
                    sprintf(linLog,"ERRO ORACLE (COMMIT) %d\n",sqlca.sqlcode);
                    log.logError(linLog);
                }
            }
        } while ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode );
    }
    else
    {
        retorno = false;
        log.logDebug("Não foi possível expurgar dados de ATENDIMENTO.ATDENCAMINHADOINCORRETO por falha no passo anterior.\n");
    }
    //
    // ===============================================================================
    // EXPURGA DADOS PRÉ-PROCESSADOS DO RELATÓRIO QTDE E MOTIVOS POR REPRES.BKO
    // ===============================================================================
    if ( 0 == sqlca.sqlcode || 1403 == sqlca.sqlcode)
    {
        log.logDebug("Vai expurgar dados de ATENDIMENTO.ATDRELQTMOTREPREBKO.\n");
        do
        {
            EXEC SQL
                DELETE 
                    ATENDIMENTO.ATDRELQTMOTREPREBKO
                WHERE
                    TRUNC(DTABERTURA) < (SELECT TRUNC(SYSDATE-180) FROM DUAL)
                AND ROWNUM <= :TAM_MAX_BLOCO;

            if ( sqlca.sqlcode == -1012 || sqlca.sqlcode == -3114 )
            {
                sprintf(linLog,"ERRO ORACLE (DELETE) %d - Vai tentar reconectar!\n",sqlca.sqlcode);
                log.logError(linLog);

                EXEC SQL CONNECT :szConnStr;
                if (sqlca.sqlcode)
                {
                    retorno=false;
                    sprintf(linLog,"Erro ao conectar ao Banco de Dados - "
                                  "Erro Oracle [%d] - Mensagem [%s].\n"
                                  ,sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                }
                else
                {
                    sprintf(linLog,"Reconectou com sucesso.\n",sqlca.sqlcode);
                    log.logError(linLog);
                    sqlca.sqlerrd[2] = 1;
                }
            }
            else if ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode )
            {
                ctAuxAtdRelQtMotRepreBKO += sqlca.sqlerrd[2];

                EXEC SQL COMMIT;

                if ( sqlca.sqlcode )
                {
                    sprintf(linLog,"ERRO ORACLE (COMMIT) %d\n",sqlca.sqlcode);
                    log.logError(linLog);
                }
            }
        } while ( sqlca.sqlerrd[2] > 0 && 0 == sqlca.sqlcode );
    }
    else
    {
        retorno = false;
        log.logDebug("Não foi possível expurgar dados de ATENDIMENTO.ATDRELQTMOTREPREBKO por falha no passo anterior.\n");
    }

    // Garante o commit dos expurgos das tabelas auxiliares
    EXEC SQL COMMIT;

    if ( sqlca.sqlcode )
    {
        sprintf(linLog,"COMMIT ERROR: %d no banco de dados!\n",sqlca.sqlcode);
        log.logError(linLog);
    }

/*
    //
    // ===============================================================================
    // ENCERRAMENTO DE PROCESSOS DE PORTOUT
    // ===============================================================================
    EXPURGO DE PROCESSOS DE PORTOUT AINDA NÃO FOI LIBERADO PELA ÁREA FUNCIONAL
    FEV/2009 -- CASSIO

    if ( -1 == statOraIdFaseRetorno || -1 == statOraIdAgrupamentoEstadoTpProc )
    {
        if ( -1 == statOraIdFaseRetorno  )
        {
            log.logError("Fase RETORNO não encontrada.\n");
        }
        else
        {
            log.logError("Próximo estado não encontrado para atividade 'ENCERRAR AUTOMATICO PORTOUT'.\n");
        }
        log.logError("Encerramento de processos de PORTOUT não pode ser executado.\n");
    }
    else
    {
        //
        // ===============================================================================
        // FECHA PROCESSOS DE PORTOUT NÃO PROCESSADOS POR ANALISTAS
        // ===============================================================================
        log.logDebug("Vai determinar prazo de expurgo (mínimo 6 meses).\n");

        varOraDiasLimite = 150;
        do
        {
            varOraDiasLimite += 30;
            EXEC SQL
                SELECT
                    SIGN(:varOraDiasLimite-TO_NUMBER(DSVALORPARAMETRO)/24) AS LIMITROFE 
                INTO
                    :varOraSinal
                FROM
                    APOIO.PARAMETRO 
                WHERE
                    CDPARAMETRO='PORTABILIDADE_TPEXCLUSAOFILA'
        } while (varOraSinal < 0);

        sprintf(linLog,"Vai encerrar processos de PORTOUT vencidos a %d dias.\n",varOraDiasLimite);
        log.logDebug(linLog);

        do
        {
            memset(&lstVarOraIdAtendimento,0,sizeof(lstVarOraIdAtendimento));
            memset(&lstStatOraIdAtendimento,-1,sizeof(lstStatOraIdAtendimento));

            memset(&lstVarOraIdAtendimentoProtocolo,0,sizeof(lstVarOraIdAtendimentoProtocolo));
            memset(&lstStatOraIdAtendimentoProtocolo,-1,sizeof(lstStatOraIdAtendimentoProtocolo));

            memset(&lstVarOraIdGrupoAtual,0,sizeof(lstVarOraIdGrupoAtual));
            memset(&lstStatOraIdGrupoAtual,-1,sizeof(lstStatOraIdGrupoAtual));

            // Fetch dos processos para serem fechados
            EXEC SQL
                SELECT
                    IDATENDIMENTO,IDATENDIMENTOPROTOCOLO,IDGRUPOATUAL
                INTO
                    :lstVarOraIdAtendimento:lstStatOraIdAtendimento,
                    :lstVarOraIdAtendimentoProtocolo:lstStatOraIdAtendimentoProtocolo,
                    :lstVarOraIdGrupoAtual:lstStatOraIdGrupoAtual
                FROM
                    ATENDIMENTO.ATENDIMENTOPRIORIZACAO
                WHERE
                    SGTIPOPORTABILIDADE = 'PORTOUT'
                AND TRUNC(DTJANELAPORTOUT) < (SELECT TRUNC(SYSDATE-:varOraDiasLimite) FROM DUAL)
                AND ROWNUM <= :TAM_MAX_BLOCO;

            rows_fetched = sqlca.sqlerrd[2];

            //sprintf(linLog,"(1): sqlcode=%d, rows_fetched=%d\n",sqlca.sqlcode,rows_fetched);log.logError(linLog); //@cassio

            if ( rows_fetched > 0 )
            {
                ctAtendimentoPriorizacao += sqlca.sqlerrd[2];

                for (it=0;it<rows_fetched;it++)
                {
                    CONVIND(lstVarOraIdAtendimento[it],lstStatOraIdAtendimento[it]);
                    CONVIND(lstVarOraIdGrupoAtual[it],lstStatOraIdGrupoAtual[it]);
                }

                bool falhaAtualizacao = false;

                for (it=0; it<rows_fetched; it++)
                {
                    //------------------------------------------------------------------
                    // Obtém valor do próximo IDANDAMENTO
                    EXEC SQL
                        SELECT
                            ANDAMENTO.ANDAMENTOSQ.NEXTVAL
                        INTO
                            :varOraIdAndamento:statOraIdAndamento
                        FROM DUAL;

                    if ( sqlca.sqlcode )
                    {
                        EXEC SQL ROLLBACK;
                        sprintf(linLog,"FALHA NA OBTENÇÃO DA SEQUENCE ANDAMENTOSQ:%s\n",sqlca.sqlerrm.sqlerrmc);
                        log.logError(linLog);
                        falhaAtualizacao = true;
                        break;
                    }

                    //------------------------------------------------------------------
                    // insere em ANDAMENTO
                    EXEC SQL
                        INSERT INTO
                            ANDAMENTO.ANDAMENTO
                            (
                                IDANDAMENTO,
                                IDATIVIDADE,
                                IDAGRUPAMENTOESTADOTPPROC,
                                IDATENDIMENTO,
                                IDPESSOAUSUARIO,
                                IDGRUPO,
                                DTANDAMENTO,
                                IDUSUARIOALTERACAO,
                                DTULTIMAALTERACAO
                            )
                            VALUES
                            (
                                :varOraIdAndamento:statOraIdAndamento,
                                :varOraIdAtividade:statOraIdAtividade,
                                :varOraIdAgrupamentoEstadoTpProc:statOraIdAgrupamentoEstadoTpProc,
                                :lstVarOraIdAtendimento[it]:lstStatOraIdAtendimento[it],
                                1,
                                :lstVarOraIdGrupoAtual[it]:lstStatOraIdGrupoAtual[it],
                                SYSDATE,
                                1,
                                SYSDATE
                            );


                    if ( sqlca.sqlcode )
                    {
                        EXEC SQL ROLLBACK;
                        sprintf(linLog,"FALHA NA INSERÇÃO EM ANDAMENTO.ANDAMENTO:%s\n",sqlca.sqlerrm.sqlerrmc);
                        log.logError(linLog);
                        falhaAtualizacao = true;
                        break;
                    }

                    //------------------------------------------------------------------
                    // Atualiza ATENDIMENTO
                    EXEC SQL
                        UPDATE
                            ATENDIMENTO.ATENDIMENTO
                        SET
                            IDAGRUPAMENTOESTADOTPPROC = 
                                :varOraIdAgrupamentoEstadoTpProc:statOraIdAgrupamentoEstadoTpProc,
                            IDANDAMENTOATUAL = :varOraIdAndamento:statOraIdAndamento,
                            DTFECHAMENTO = SYSDATE,
                            DTULTIMAALTERACAO = SYSDATE,
                            IDFASE = :varOraIdFaseRetorno,
                            //IDPESSOAUSUARIOATUAL = NULL, //FECHTO NÃO REMOVE O ULT.RESP.PELO PROCESSO
                            //IDGRUPOATUAL = NULL, //FECHTO NÃO REMOVE O ULT.GRUPO RESP.PELO PROCESSO
                            IDUSUARIOALTERACAO = 1
                        WHERE
                            IDATENDIMENTO IN (:lstVarOraIdAtendimento[it]:lstStatOraIdAtendimento[it]);

                    if ( sqlca.sqlcode )
                    {
                        EXEC SQL ROLLBACK;
                        sprintf(linLog,"FALHA NA ATUALIZAÇÃO EM ATENDIMENTO.ATENDIMENTO:%s\n",sqlca.sqlerrm.sqlerrmc);
                        log.logError(linLog);
                        falhaAtualizacao = true;
                        break;
                    }
                } // for (int it=0; it<rows_fetched; it++)

                if ( falhaAtualizacao ) { break; }

                //------------------------------------------------------------------
                // Apaga ATENDIMENTOAGRUPADO
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.ATENDIMENTOAGRUPADO
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    //sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.ATENDIMENTOAGRUPADO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga ATENDIMENTOPRIORIZACAO
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.ATENDIMENTOPRIORIZACAO
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.ATENDIMENTOPRIORIZACAO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga ANDAMENTOTRANS
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ANDAMENTO.ANDAMENTOTRANS
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ANDAMENTO.ANDAMENTOTRANS:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga CANCELAMENTOSOLICITADO
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.CANCELAMENTOSOLICITADO
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.CANCELAMENTOSOLICITADO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga ATENDIMENTOSUSPEITO
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.ATENDIMENTOSUSPEITO
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.ATENDIMENTOSUSPEITO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga ATENDIMENTOPAUSA
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.ATENDIMENTOPAUSA
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.ATENDIMENTOPAUSA:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Apaga ATENDIMENTOAGENDAMENTO
                EXEC SQL FOR :rows_fetched 
                    DELETE
                        ATENDIMENTO.ATENDIMENTOAGENDAMENTO
                    WHERE
                        IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA DELEÇÃO EM ATENDIMENTO.ATENDIMENTOAGENDAMENTO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Atualiza ANDAMENTOTRANSFERENCIA
                EXEC SQL FOR :rows_fetched 
                    UPDATE 
                        ATENDIMENTO.ANDAMENTOTRANSFERENCIA
                    SET
                        DTFIMTRANSFERENCIA = SYSDATE,
                        IDUSUARIOALTERACAO = 1,
                        DTULTIMAALTERACAO  = SYSDATE
                    WHERE 
                        IDANDAMENTO IN 
                        (
                            SELECT
                                IDANDAMENTO
                            FROM
                                ATENDIMENTO.OBTEMATDTRANSFERENCIAV01 
                            WHERE 
                                DTFINTRANSFERENCIA IS NULL
                            AND
                                IDATENDIMENTO IN (:lstVarOraIdAtendimento:lstStatOraIdAtendimento)
                        );

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA ATUALIZAÇÃO EM ATENDIMENTO.ANDAMENTOTRANSFERENCIA:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                //------------------------------------------------------------------
                // Atualiza ATENDIMENTOPROTOCOLO
                EXEC SQL FOR :rows_fetched 
                    UPDATE
                        ATENDIMENTO.ATENDIMENTOPROTOCOLO
                    SET
                        QTPROCESSOPENDENTE = DECODE(SIGN(QTPROCESSOPENDENTE-1),-1,0,QTPROCESSOPENDENTE-1),
                        IDUSUARIOALTERACAO = 1,
                        DTULTIMAALTERACAO = SYSDATE
                    WHERE
                        IDATENDIMENTOPROTOCOLO IN (:lstVarOraIdAtendimentoProtocolo:lstStatOraIdAtendimentoProtocolo);

                if ( sqlca.sqlcode != 1403 && sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    sprintf(linLog,"FALHA NA ATUALIZAÇÃO EM ATENDIMENTO.ATENDIMENTOPROTOCOLO:%s\n",sqlca.sqlerrm.sqlerrmc);
                    log.logError(linLog);
                    break;
                }

                EXEC SQL COMMIT;

                if ( sqlca.sqlcode )
                {
                    sprintf(linLog,"COMMIT ERROR: %d no banco de dados!\n",sqlca.sqlcode);
                    log.logError(linLog);
                }

            } // if ( rows_fetched > 0 )

        } while ( rows_fetched > 0 && 0==sqlca.sqlcode);

    } // if ( -1 != statOraIdFaseRetorno && -1 != statOraIdAgrupamentoEstadoTpProc )
*/

      EXEC SQL
      DELETE FROM CUSTOMER.HISTORICOSENHA WHERE IDSENHA IN
      (
         SELECT
            hsen.idsenha  
         FROM     
            APOIO.AREAREGISTRO AR,
            LINHA.LINHABASE LB,
            linha.linhatelefonica lt,
            customer.pessoadepara pdp,
            CUSTOMER.SENHA SEN,
            CUSTOMER.PESSOALINHA PL,
            CUSTOMER.HISTORICOSENHA HSEN
         WHERE 
            LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
         AND lt.IDLINHABASE=lb.IDLINHABASE
         AND lt.IDLINHATELEFONICA=pl.IDLINHATELEFONICA
         AND pl.IDPESSOADEPARA=pdp.idpessoadepara
         AND pdp.IDPESSOA=sen.IDPESSOA
         AND pl.IDTIPORELACIONAMENTO=2
         AND (HSEN.IDSENHA = SEN.IDSENHA)
         AND (HSEN.IDTIPOHISTORICOSENHA = 2)
         AND HSEN.idcanal    IN( 13, 15 )
         AND AR.CDAREAREGISTRO IN (11,21)
         AND LB.NRLINHA IN( 64894085,75300053,96903607,99812666 )
      );    
      
    //
    // ===============================================================================
    // FIM DE PROCESSAMENTO
    // ===============================================================================
    log.logDebug("Expurgo finalizado.");
    log.logDebug("===============================================================================");
    sprintf(linLog,"        ATENDIMENTO.AUXATDPALITAGEM. Processados=%d\n",ctAuxAtdPalitagem);log.logDebug(linLog);
    sprintf(linLog,"         ATENDIMENTO.AUXATDPRODREPR. Processados=%d\n",ctAuxAtdProdRepr);log.logDebug(linLog);
    sprintf(linLog,"ATENDIMENTO.ATDENCAMINHADOINCORRETO. Processados=%d\n",ctAuxAtdEncaminhadoIncorreto);log.logDebug(linLog);
    sprintf(linLog,"    ATENDIMENTO.ATDRELQTMOTREPREBKO. Processados=%d\n",ctAuxAtdRelQtMotRepreBKO);log.logDebug(linLog);
    //sprintf(linLog," ATENDIMENTO.ATENDIMENTOPRIORIZACAO. Processados=%d\n",ctAtendimentoPriorizacao);log.logDebug(linLog);
    log.logDebug("===============================================================================");

    // Desconecta do banco de dados
    EXEC SQL COMMIT WORK RELEASE;
    if (sqlca.sqlcode)
    {
        sprintf(linLog,"Erro %d no banco de dados!\n",sqlca.sqlcode);
        log.logError(linLog);
    }

    return retorno;
}
