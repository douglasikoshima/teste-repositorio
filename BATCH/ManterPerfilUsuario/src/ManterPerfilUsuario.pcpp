#include <unistd.h>
#include <dirent.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/ManterPerfilUsuario.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"
#include "../../commons/CLeitorArquivo/CLeitorArquivo.h"

//#define LOG_DE_ERRO 1

EXEC SQL INCLUDE SQLCA;

char szAux[1024];
char szTemp[1024];
char szTempTrace[2048];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 2048

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#ifdef WIN32
#define MKDIR _mkdir
#define ACCESS _access
#else
#define MKDIR mkdir
#define ACCESS access
#endif

void NomeRelatorio( char * sNmRelatorio );
void ObterHora(char *pszData);
int ManterRegistros(CLeitorArquivo &leitorArq, int iIndex, string &sStatusRegistro);
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino);
int OpenDir(char *pszDiretorio,char*pfile);
char* trim(char *pStr);

//void sqlTratamentoErro(sqlca*sqlca);

int main(void)
{
    TParamConf tParamConf;
    int retorno = 0;
    char sNmRelatorio[256];
	char szNome_Arquivo[1024];
	

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[512];
        VARCHAR strOraDataProcessamento[12];
        VARCHAR strOraHoraProcessamento[12];

        short ostLinha;
        short ostrOraDataProcessamento = -1;
        short ostrOraHoraProcessamento = -1;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>ManterPerfilUsuario");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<ManterPerfilUsuario");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<ManterPerfilUsuario");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

	char szData[256];	memset(szData,'\0',sizeof(szData));
	char szHora[256];	memset(szHora,'\0',sizeof(szHora));
	ObterData(0,szData);
	ObterHora(szHora);
	
#ifdef LOG_DE_ERRO	
	FILE *pFileRegErros=0;
	string sArquivoRegErros;
	sArquivoRegErros = tParamConf.szPathLogErros;
	sArquivoRegErros += "/";	
	sArquivoRegErros += szData;
	sArquivoRegErros += "-";
	sArquivoRegErros += szHora;
	sArquivoRegErros += "-ManterPerfilUsuario_reg_erros.txt";
	
    if( !(pFileRegErros = fopen(sArquivoRegErros.data(), "w")))
    {
        sprintf(szTempTrace, "Erro criando arquivo[%s]", sArquivoRegErros.data()); oLog.logDebug(szTempTrace);
        return -1;
    }
#endif

	sprintf(szTempTrace, "Inicio do processo de ManterPerfilUsuario..."); oLog.logDebug(szTempTrace);
	
	// 1 - CRIA UM VETOR COM O NOME DAS COLUNAS:
	VEC_STRING vecString;
	vecString.push_back(string("LOGIN"));
	vecString.push_back(string("NOME_GRUPO"));
	vecString.push_back(string("NOME_PERFIL"));
	vecString.push_back(string("ACAO"));
	
	// 2 - DEFINE O CAMINHO EM QUE ESTA O ARQUIVO A SER LIDO
	string sCaminho;
	sCaminho = tParamConf.szPath;
					   
	// 3 - DEFINE O NOME DO ARQUIVO A SER LIDO
	int iCountLine=0;
	int iInseridosSucesso = 0;
	int iErrosOcorridos = 0;
	memset(&szNome_Arquivo,0,sizeof(szNome_Arquivo));
	while(OpenDir(tParamConf.szPath,szNome_Arquivo) != 0)
	{
		sprintf(szTempTrace, "Identificado um arquivo [%s] para realizar a carga...\n",szNome_Arquivo ); oLog.logDebug(szTempTrace);
		
		string sArquivo;
		sArquivo = "/";
		sArquivo += szNome_Arquivo;
		
		// 4 - DEFINE QUAL O TIPO DE SEPARADOR DE DADOS ESPERADO
		string sSeparador = "|";

		
		sprintf(szTempTrace, "Caminho[%s] e nome de arquivo[%s] utilizados para o ler as informaçoes de carga.",sCaminho.data() ,sArquivo.data()  ); oLog.logDebug(szTempTrace);
		// 5 - INSTANCIA O OBJETO CLEITORARQUIVO
		CLeitorArquivo leitorArq(vecString,sCaminho,sArquivo,sSeparador);

		
		int iNumeroLinhasLido = 0;
		// 6 - DEFINE UM TAMANHO DO BLOCO DE LINHAS QUE DEVE SER LIDO POR VEZ.
		int iTamanhoDoBloco = 500;


		

		string sStatusRegistro;
		// 6 - DEFINE UM LOOP DE TAMANHO J, ONDE J REPRESENTA QUANTAS VEZES SERA LIDO UM BLOCO DE TAMANHO 'iTAMANHODOBLOCO'
		for( int j=0;; ++j)
		{
			ErrosLeitorArquivo eErrorLeitor;
			eErrorLeitor = leitorArq.LerArquivo(iNumeroLinhasLido, iTamanhoDoBloco);
			
			switch(eErrorLeitor)
			{/*
				case ERRO_ABRIR_ARQUIVO:
				{
					oLog.logDebug("Retorno[ERRO_ABRIR_ARQUIVO] ao ler o arquivo.");					
					break;
				}
				case ERRO_QTD_DE_COLUNAS_INCOMPATIVEL:
				{
					oLog.logDebug("Retorno[ERRO_QTD_DE_COLUNAS_INCOMPATIVEL] ao ler o arquivo.");					
					break;
				}
				case OK_SUCESSO:
				{
					oLog.logDebug("Retorno[OK_SUCESSO] ao ler o arquivo.");					
					break;
				}
				default:
					break;*/
			}
			if( iNumeroLinhasLido > 0)
			{
				sprintf(szTempTrace, "Quantidade de registros lidos[%d] do arquivo[%s].",iNumeroLinhasLido,sArquivo.data()  ); oLog.logDebug(szTempTrace);
				// 7 - EXIBE O CONTEUDO DE CADA LINHA LIDO NO BLOCO CORRENTE
				for( int iIndex=0; iIndex< iNumeroLinhasLido ; ++iIndex)
				{
					int iReturn = 0;
					if ( iReturn = ManterRegistros(leitorArq, iIndex, sStatusRegistro) == 0 )
					{
						iInseridosSucesso++;
						// Registro inserido com sucesso.
						
					}
					else
					{
						iErrosOcorridos++;
						// Ocorreu algum problema e o Registro nao foi inserido. Gravar no arquivo de log de erros.
						#ifdef LOG_DE_ERRO
							string sRegistroError;
							sRegistroError = leitorArq.ObterLinha(iIndex) + ";" + sStatusRegistro;
							gravarRegistro( pFileRegErros, sRegistroError.data());
						#endif
					}
					
					/*cout<<leitorArq["Telefone"][i]<<"|";
					cout<<leitorArq["CodigoA"][i]<<"|";
					cout<<leitorArq["Data"][i]<<"|";
					cout<<leitorArq["CodigoB"][i];*/
				}
			}
			else
			{
				if( iCountLine == 0 )
				{
					sprintf(szTempTrace, "Nenhum registro lido do arquivo[%s].",sArquivo.data()  ); oLog.logDebug(szTempTrace);					
				}
				break;
			}
			iCountLine +=iNumeroLinhasLido;
		}
		//cout<<"\n Numero de Linhas Lidas = "<<iCountLine<<"\n";
		//system("pause");
		
		string strArquivoOrigem;
		string strArquivoDestino;
		
		strArquivoOrigem = szNome_Arquivo;
		strArquivoDestino = szNome_Arquivo;
		strArquivoDestino += ".out";
		moverArquivo(strArquivoOrigem.c_str(), strArquivoDestino.c_str());

	#ifdef LOG_DE_ERRO
		fclose(pFileRegErros);
	#endif
	}
	
	// 8 - QUANDO TERMINAR O ESCOPO O OBJETO 'CLEITORARQUIVO' CHAMA O DESTRUTOR QUE FECHA O ARQUIVO LIDO.

	sprintf(szTempTrace, "Foram inseridos [%d] registros com sucesso.", iInseridosSucesso ); oLog.logDebug(szTempTrace);
	sprintf(szTempTrace, "Foram identificados [%d] registros com erro.", iErrosOcorridos ); oLog.logDebug(szTempTrace);
	sprintf(szTempTrace, "Fim do processo de ManterPerfilUsuario..."); oLog.logDebug(szTempTrace);

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<ManterPerfilUsuario");

    return retorno;

    sqlError:
        sprintf(szTempTrace, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -1;
}

void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];
    char szAux[1024];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int ManterRegistros(CLeitorArquivo &leitorArq, int iIndex, string &sStatusRegistro)
{
    int iQtdRegistros=0;
	int retorno = 0;
	char szNomeArquivo[_MAX_PATH+9];
	char szNRDOCUMENTO[TAM_BUFFER+1];

	string strAcao = leitorArq["ACAO"][iIndex];
	strAcao.erase((int)(strAcao.length()-1),  (int)(strAcao.length()-1));
	
	EXEC SQL BEGIN DECLARE SECTION;
		const char* ccOraLogin = leitorArq["LOGIN"][iIndex].data();
		const char* ccOraNomeGrupo = leitorArq["NOME_GRUPO"][iIndex].data();
		const char* ccOraNomePerfil = leitorArq["NOME_PERFIL"][iIndex].data();
		const char* ccOraAcao = strAcao.data();
		VARCHAR szCONTA[20];
		short iszCONTA=-1;
        VARCHAR ostrIDPessoa[21+1];
		
		int iOraExisteRegistro;
		int iOraIdPessoaUsr;
		int iOraIdGrupo;
		int iOraIdRole;
		
		int iOraExisteGrupo;
		int iOraExistePerfil;
		
	EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	//EXEC SQL WHENEVER SQLERROR  DO sqlTratamentoErro(&sqlca);	
	

	
	sprintf(szTempTrace, "...%s...", (char *)strAcao.data()); oLog.logDebug(szTempTrace);	
	
	string sTemp;
	sTemp = "Parametro de entrada LOGIN [";
	sTemp += leitorArq["LOGIN"][iIndex].data();
	sTemp += "], NOME_GRUPO [";
	sTemp += leitorArq["NOME_GRUPO"][iIndex].data();
	sTemp += "], NOME_PERFIL [";
	sTemp += leitorArq["NOME_PERFIL"][iIndex].data();
	sTemp += "], ACAO [";
	sTemp += strAcao.data();
	sTemp += "]";
	
	//sprintf(szTempTrace, "...%s...", (char *)sTemp.data()); oLog.logDebug(szTempTrace);	
	//oLog.logDebug(szTempTrace);
	
	oLog.logDebug((char *)sTemp.data());
	
/*	EXEC SQL
	SELECT 
		USR.NMLOGINUSUARIO, GRP.NMGRUPO, PERF.NMPERFIL 
	FROM 
		ACESSO.USUARIO USR,
		ACESSO.USUARIOGRUPO USRG,
		ACESSO.GRUPO GRP,
		CONTATOADM.PERFIL PERF
	WHERE
		USR.IDPESSOAUSUARIO = USRG.IDPESSOAUSUARIO AND
		USRG.IDGRUPO = GRP.IDGRUPO AND
		GRP.NMGRUPO = 'ADMINISTRADOR' AND
		PERF.NMPERFIL = 'TODAS VARIAVEIS' AND
		USR.NMLOGINUSUARIO = 'A_AMARQUES' AND
		(SELECT COUNT(1) FROM CONTATOADM.GRUPOPERFIL GRPPERF WHERE GRP.IDGRUPO = GRPPERF.IDGRUPO AND GRPPERF.IDPERFIL = PERF.IDPERFIL) >= 1;
*/

	char szGrupo [1024];
	char szPerfil [1024];
	memset(szGrupo, 0, sizeof(szGrupo));
	memset(szPerfil, 0, sizeof(szPerfil));
	sprintf(szGrupo,"%s",(char *)leitorArq["NOME_GRUPO"][iIndex].data());
	sprintf(szPerfil,"%s",(char *)leitorArq["NOME_PERFIL"][iIndex].data());
	
	trim(szGrupo);
	trim(szPerfil);
	
	
		
	if(strAcao.compare("1 - EXCLUIR") == 0)
	{
		sprintf(szTempTrace, "Identificado a Ação EXCLUIR..."); oLog.logDebug(szTempTrace);	
		
		EXEC SQL
			SELECT USR.IDPESSOAUSUARIO INTO :iOraIdPessoaUsr FROM ACESSO.USUARIO USR WHERE USR.NMLOGINUSUARIO = :ccOraLogin AND ROWNUM < 2;
		
		if (strlen(szGrupo) != 0)
		{
			EXEC SQL
				SELECT COUNT(1) INTO :iOraExisteRegistro FROM 
					ACESSO.USUARIO USR,
					ACESSO.USUARIOGRUPO USRG,
					ACESSO.GRUPO GRP
				WHERE
					USR.IDPESSOAUSUARIO = USRG.IDPESSOAUSUARIO AND
					USRG.IDGRUPO = GRP.IDGRUPO AND
					GRP.NMGRUPO = :ccOraNomeGrupo AND
					USR.NMLOGINUSUARIO = :ccOraLogin;

			if( iOraExisteRegistro <= 0 )
			{
				sprintf(szTempTrace, "Registro desse Grupo com esse Usuario nao encontrado no DB. Ação de excluir nao realizada..."); oLog.logDebug(szTempTrace);	
				return -1;
			}
			else
			{
				EXEC SQL
					SELECT GRP.IDGRUPO INTO :iOraIdGrupo FROM ACESSO.GRUPO GRP WHERE GRP.NMGRUPO = :ccOraNomeGrupo AND ROWNUM < 2;
				EXEC SQL
					DELETE FROM ACESSO.USUARIOGRUPO USRG WHERE USRG.IDGRUPO = :iOraIdGrupo AND USRG.IDPESSOAUSUARIO = :iOraIdPessoaUsr;
			}
		}
		
		if (strlen(szPerfil) != 0)
		{
		
			EXEC SQL
				SELECT COUNT(1) INTO :iOraExisteRegistro FROM 
					ACESSO.USUARIO USR,
					ACESSO.USUARIOROLE USRRL,
					ACESSO.ROLE RL
				WHERE
					USR.IDPESSOAUSUARIO = USRRL.IDPESSOAUSUARIO AND
					USRRL.IDROLE = RL.IDROLE AND
					RL.NMROLE = :ccOraNomePerfil AND
					USR.NMLOGINUSUARIO = :ccOraLogin;
			
			if( iOraExisteRegistro <= 0 )
			{
				sprintf(szTempTrace, "Registro desse Perfil com esse Usuario nao encontrado no DB. Ação de excluir nao realizada..."); oLog.logDebug(szTempTrace);	
				return -1;
			}
			else
			{
				EXEC SQL
					SELECT RL.IDROLE INTO :iOraIdRole FROM ACESSO.ROLE RL WHERE RL.NMROLE = :ccOraNomePerfil AND ROWNUM < 2;
				EXEC SQL
					DELETE FROM ACESSO.USUARIOROLE USRRL WHERE USRRL.IDROLE = :iOraIdRole AND USRRL.IDPESSOAUSUARIO = :iOraIdPessoaUsr;
			}
		}
		
		EXEC SQL COMMIT;
		sprintf(szTempTrace, "Registro Excluido com sucesso..."); oLog.logDebug(szTempTrace);
	}
	else if(strAcao.compare("2 - INCLUIR") == 0)
	{
		sprintf(szTempTrace, "Identificado a Ação INCLUIR..."); oLog.logDebug(szTempTrace);	
		
		EXEC SQL
			SELECT USR.IDPESSOAUSUARIO INTO :iOraIdPessoaUsr FROM ACESSO.USUARIO USR WHERE USR.NMLOGINUSUARIO = :ccOraLogin AND ROWNUM < 2;
		
		bool bAtualizado = false;
		if (strlen(szGrupo) != 0)
		{
			EXEC SQL
				SELECT COUNT(1) INTO :iOraExisteRegistro FROM 
					ACESSO.USUARIO USR,
					ACESSO.USUARIOGRUPO USRG,
					ACESSO.GRUPO GRP
				WHERE
					USR.IDPESSOAUSUARIO = USRG.IDPESSOAUSUARIO AND
					USRG.IDGRUPO = GRP.IDGRUPO AND
					GRP.NMGRUPO = :ccOraNomeGrupo AND
					USR.NMLOGINUSUARIO = :ccOraLogin;

			if( iOraExisteRegistro >= 1 )
			{
				sprintf(szTempTrace, "Registro desse Grupo com esse Usuario ja existe no DB. Ação de incluir nao realizada..."); oLog.logDebug(szTempTrace);
			}
			else
			{
				EXEC SQL
					SELECT GRP.IDGRUPO INTO :iOraIdGrupo FROM ACESSO.GRUPO GRP WHERE GRP.NMGRUPO = :ccOraNomeGrupo AND ROWNUM < 2;
					
				EXEC SQL
				  INSERT INTO ACESSO.USUARIOGRUPO (IDUSUARIOGRUPO, IDPESSOAUSUARIO, IDGRUPO, IDUSUARIOALTERACAO, DTULTIMAALTERACAO)
					VALUES(ACESSO.USUARIOGRUPOSQ.NEXTVAL, :iOraIdPessoaUsr, :iOraIdGrupo, 1, SYSDATE);
				
				bAtualizado = true;
			}
		}
		
		if (strlen(szPerfil) != 0)
		{
		
			EXEC SQL
				SELECT COUNT(1) INTO :iOraExisteRegistro FROM 
					ACESSO.USUARIO USR,
					ACESSO.USUARIOROLE USRRL,
					ACESSO.ROLE RL
				WHERE
					USR.IDPESSOAUSUARIO = USRRL.IDPESSOAUSUARIO AND
					USRRL.IDROLE = RL.IDROLE AND
					RL.NMROLE = :ccOraNomePerfil AND
					USR.NMLOGINUSUARIO = :ccOraLogin;
			
			if( iOraExisteRegistro >= 1 )
			{
				sprintf(szTempTrace, "Registro desse Perfil com esse Usuario ja existe no DB. Ação de incluir nao realizada..."); oLog.logDebug(szTempTrace);	
			}
			else
			{
				EXEC SQL
					SELECT RL.IDROLE INTO :iOraIdRole FROM ACESSO.ROLE RL WHERE RL.NMROLE = :ccOraNomePerfil AND ROWNUM < 2;
					
				EXEC SQL
					INSERT INTO ACESSO.USUARIOROLE (IDUSUARIOROLE, IDPESSOAUSUARIO, IDROLE, IDUSUARIOALTERACAO, DTULTIMAALTERACAO)
						VALUES(ACESSO.USUARIOROLESQ.NEXTVAL, :iOraIdPessoaUsr, :iOraIdRole, 1, SYSDATE);
					
				bAtualizado = true;
			}
		}		
		
		
		if( bAtualizado == true)
		{
			EXEC SQL COMMIT;
			sprintf(szTempTrace, "Registro Incluido com sucesso..."); oLog.logDebug(szTempTrace);
		}
		else
		{
			sprintf(szTempTrace, "WARNING. Não houve atualização de Registro..."); oLog.logDebug(szTempTrace);
		}
	}
	else
	{
		sprintf(szTempTrace, "Registro nao atualizado. Ação desconhecida..."); oLog.logDebug(szTempTrace);	
	}
	
	return 0;

sqlError:
		string sRegistroError;
		sRegistroError = "Erro no processamento do registro: " + leitorArq.ObterLinha(iIndex) + ";" + sStatusRegistro;
		oLog.logDebug((char *)sRegistroError.data());
		
	    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);		
		sStatusRegistro = szTempTrace;
        return -2;	

/*sqlInsertPG:
		sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
        sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTOR. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -2;	
		
sqlInsertPGC:
		sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
        sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTORCONTA. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -3;	
		
sqlInsertPGM:
        sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
		sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTORMASTER. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -4;	
		*/
}


int OpenDir(char *pszDiretorio,char*pfile)
{
    static DIR *pDir;
    static struct dirent *pDirent;
    static char szArq[512 + 1];
    static int iFlag=1;

	char szAux[1024];

    oLog.logDebug(">>> OpenDir");
    sprintf(szAux, "pszDiretorio[%s]", pszDiretorio); oLog.logDebug(szAux);

    if(iFlag == 1)
    {
        /* Abre diretorio e verifica sucesso */
        if( (pDir = opendir(pszDiretorio)) == NULL)
        {
            sprintf(szAux, "Erro abrindo diretorio [%s]. errno(%d) strerror[%s]", pszDiretorio, errno, strerror(errno)); oLog.logError(szAux);
            exit(-1);
        }

        iFlag=0;
    }
	
	try
	{
		/* Efetua a leitura dos nomes dos arquivos do diretorio */
		while((pDirent = readdir(pDir)) != NULL )
		{
			sprintf(szAux, "Arquivo obtido[%s]", pDirent->d_name); oLog.logDebug(szAux);

			/* valida arquivo */
			if((!memcmp(pDirent->d_name+strlen(pDirent->d_name)-4, ".txt", 4)))
			{
				/* Monta path + nome do arquivo a ser processado */
				strcpy(szArq, pDirent->d_name);
				sprintf(szAux, "Arquivo validado [%s]", szArq); oLog.logDebug(szAux);

				oLog.logDebug("<<< OpenDir <NOT NULL>");
				strcpy(pfile,szArq);
				return 1;
			}
		}
	}
	catch(...)
	{
		oLog.logDebug("<<< OpenDir (exception).");
	}

    closedir(pDir);
    iFlag=1;
    oLog.logDebug("<<< OpenDir <NULL>");
    return 0;
}




/************************************************************************************************************/
void ObterData(int iDiasAnteriores, char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
		short ostrDiasAnteriores = iDiasAnteriores;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE -:ostrDiasAnteriores,'DDMMYYYY')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[8] = '\0';
	
    return;
	
sqlError:
        return;		
}

void ObterHora(char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE,'HH24MISS')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[6] = '\0';
    return;
sqlError:
        return;		
	
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile, const char *spzRegistro)
{
    char szPog[1000];
 
    if( spzRegistro )
    {
        if(fputs(spzRegistro, pFile) <= 0)
        {
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/

/*void sqlTratamentoErro(sqlca*sqlca)
{

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("sql_error_WFAtendimento:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
	return 0;
}
*/

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szTempTrace, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szTempTrace);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szTempTrace, "iSig(%d)", iSig); oLog.logInformation(szTempTrace);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("ManterPerfilUsuario.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_log_erros"))
        {
            strncpy(ptParamConf->szPathLogErros, szDivArq, _MAX_PATH);
        }
		
        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szTempTrace, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPathLogErros[%s]", ptParamConf->szPathLogErros); oLog.logDebug(szTempTrace);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szCltTux) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szPathLogErros) == 0 )
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}


/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);
}

void NomeRelatorio( char * sNmRelatorio )
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oraNmRelatorio[256];
        short   i_oraNmRelatorio = -1;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorNomeRelatorio;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       DSVALORPARAMETRO
    INTO
       :oraNmRelatorio:i_oraNmRelatorio
    FROM
       APOIO.PARAMETRO
    WHERE
       CDPARAMETRO = 'RELATDVOL';   // Constante para busca no banco do nome do relatorio a ser gerado
    
    CONVIND( oraNmRelatorio, i_oraNmRelatorio );
    
    if ( i_oraNmRelatorio != -1 )
    {
        sprintf( sNmRelatorio,"%.*s", oraNmRelatorio.len,(char*)oraNmRelatorio.arr );
    }
    
    return;
    
sqlErrorNomeRelatorio:
    sNmRelatorio[0] = 0x0;
}

char* rtrim(char *pStr)
{
    int rInd;

    if (pStr == NULL)
            return NULL;

    rInd = strlen(pStr) - 1;
    while ( isspace(pStr[rInd]) && rInd >= 0)
    {
      rInd--;
    }

    pStr[rInd + 1] = '\0';
   
    return pStr;
}

char* ltrim(char *pStr)
{
    int lInd = 0;

    if (pStr == NULL)
            return NULL;

    //rInd = strlen(pStr) - 1;

    while (isspace(pStr[lInd])){
        lInd++;
    }

    pStr = pStr + lInd;
     
    return pStr;
}

char* trim(char *pStr){
    return ltrim(rtrim(pStr));      
}
