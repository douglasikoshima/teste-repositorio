
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/relatorioGestor.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 1024
#define EXTENSAO_ARQUIVO_SAIDA "txt"

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

void NomeRelatorio( char * sNmRelatorio );

int main(void)
{
    TParamConf tParamConf;

    int iQtdRegistros=0;
    int retorno = 0;

    char szNomeArquivo[_MAX_PATH+9];
    char szRegistro[TAM_BUFFER+2];
    char sNmRelatorio[256];


    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[1024+2];
        VARCHAR strOraDataProcessamento[12];
        VARCHAR strOraHoraProcessamento[12];

        short ostLinha;
        short ostrOraDataProcessamento = -1;
        short ostrOraHoraProcessamento = -1;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>relatorioGestor");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<relatorioGestor");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<relatorioGestor");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE,'DDMMYYYY')||TO_CHAR(SYSDATE,'HH24MI')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

    sNmRelatorio[0] = 0x0;
    // NomeRelatorio( sNmRelatorio );
    sprintf( sNmRelatorio, "RelGestores" );
    if( sNmRelatorio[0] == NULL )
    {
        oLog.logDebug( "*** NAO OBTEVE NOME DO RELATORIO, VERIFIQUE TABELA DE PARAMETRIZACAO ***" );
        oLog.logDebug( "<<<relatorioGestor" );
        return -1;
    }
    sprintf( szNomeArquivo,"%s%s.txt", sNmRelatorio, (char*)strOraDataProcessamento.arr );

    FILE *pFile=0;
    if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
    {
        oLog.logDebug("<<<relatorioGestor");
        return -1;
    }

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    // declara cursor para busca dos xml´s a serem reprocessados
    sprintf(szAux, "Declarando cursor..."); oLog.logDebug(szAux);

    EXEC SQL DECLARE Cursor CURSOR FOR
    SELECT 
        registro
    from
        customer.relatoriogestorv02;
    
    oLog.logDebug("Vai abrir o cursor");

    EXEC SQL OPEN Cursor;

    oLog.logDebug("Abriu o cursor");

	//Gravando Cabecalho
	gravarRegistro(pFile,"CNPJ|RAZAO SOCIAL|CONTA|STATUS CONTA|UF|CPF GESTOR|NOME GESTOR|CELULAR GESTOR|TELEFONE GESTOR|E-MAIL GESTOR|Login Sistema Origem|dtultimaatualizacao|usuarioatutalizacao|CPF GestorMaster|Nome GestorMaster|Tel Gestor Master PJ|Tel 2 GESTORMARSTER|E-mail GestorMaster|dtultimaaltualizacao|loginultimaatualizacao|LOGIN CONSULTOR1|NOME CONSULTOR1|SITE CONSULTOR1|EMAIL CONSULTOR1|LOGIN CONSULTOR2|NOME CONSULTOR2|SITE CONSULTOR2|EMAIL CONSULTOR2\n");
    for ( ;; )
    {
        /* tratamento para interromper o processamento via sinal (complemento da saida acima) */
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }

        ostLinha = -1;

        EXEC SQL
            FETCH
                Cursor
            INTO
                :oszLinha:ostLinha;

        iQtdRegistros++;

        CONVIND(oszLinha,ostLinha);

        sprintf( szRegistro, "%.*s\n", oszLinha.len, (char*)oszLinha.arr );
        if(retorno = gravarRegistro(pFile,szRegistro),retorno)
        {
            oLog.logDebug("Erro de gravação (1)");
            break;
        }

    }// while (1)

    sprintf(szAux,"Gerou %d registro(s)",iQtdRegistros);oLog.logDebug(szAux);

    fecharArquivo(pFile); // Fecha o Arquivo

    // finaliza
    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE Cursor;

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<relatorioGestor");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}

/************************************************************************************************************/
int abrirArquivo(FILE **pFile,const char *pszNomeArquivo)
{
    sprintf(szAux, "Vai criar e abrir o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);

    *pFile = fopen(pszNomeArquivo, "w");

    if( pFile == NULL )
    {
        sprintf(szAux, "Erro criando arquivo[%s]", pszNomeArquivo); oLog.logDebug(szAux);
        return -1;
    }

    sprintf(szAux, "Arquivo [%s] disponível", pszNomeArquivo); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{

    if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
void fecharArquivo(FILE *pFile)
{
    fclose(pFile);
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("relatorioGestor.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}


/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}



void NomeRelatorio( char * sNmRelatorio )
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oraNmRelatorio[256];
        short   i_oraNmRelatorio = -1;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorNomeRelatorio;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       DSVALORPARAMETRO
    INTO
       :oraNmRelatorio:i_oraNmRelatorio
    FROM
       APOIO.PARAMETRO
    WHERE
       CDPARAMETRO = 'RELGESTOR';   // Constante para busca no banco do nome do relatorio a ser gerado
    
    CONVIND( oraNmRelatorio, i_oraNmRelatorio );
    
    if ( i_oraNmRelatorio != -1 )
    {
        sprintf( sNmRelatorio,"%.*s", oraNmRelatorio.len,(char*)oraNmRelatorio.arr );
    }
    
    return;
    
sqlErrorNomeRelatorio:
    sNmRelatorio[0] = 0x0;
}
