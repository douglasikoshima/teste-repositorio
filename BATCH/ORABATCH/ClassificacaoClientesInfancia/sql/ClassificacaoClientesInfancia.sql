SET TERMOUT ON;
SET SQLPROMPT '';
SET FEEDBACK OFF;
SET ECHO OFF;
SET AUTOTRACE OFF;
SET FLUSH ON;
SET HEADING OFF;
SET SERVEROUTPUT ON SIZE 1000000;
SET TIME OFF;
SET TRIMOUT ON;
SET TRIMSPOOL ON;
SET PAUSE OFF;
SET SHOWMODE OFF;
SET SQLBLANKLINES OFF;
SET SQLNUMBER OFF;
SET TAB OFF;
SET VERIFY OFF;
SET WRAP OFF;
SET FEED OFF;
SET NEWPAGE NONE;
SET LINESIZE 32767;
SET TIMING OFF;

WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE 

VARIABLE VO_CDERRO NUMBER
VARIABLE VO_DSERRO VARCHAR2(512)

EXEC LOAD.PRC_CLASSIFICACAOINFANCIAERRO('INICIO DO PROCESSAMENTO - ClassificacaoClientesInfancia');

declare
  VI_IDUSUARIOALTERACAO NUMBER := &1;
  VI_NUMREGCOMMIT NUMBER := &2;

  v_UltimoProcessadoInfancia APOIO.PARAMETRO.DSVALORPARAMETRO%TYPE;
  v_UltimoProcessadoInfanciaDT DATE;
  v_LimiteDataAte DATE;
  v_DiasProcessar NUMBER;
  V_DTULTIMAALTERACAO NUMBER := 0;
  V_SGSUBSEGMENTO_31 APOIO.SUBSEGMENTO.IDSUBSEGMENTO%TYPE;
 
  V_UPDTREGCOUNT PLS_INTEGER := 0;
  DATA_INICIAL TIMESTAMP;
  
  TYPE T_PLANOSERVICOLINHA IS RECORD
   (
      dtultimaalteracaoplano   linha.planoservlinhapessoasubseg.dtultimaalteracaoplano%TYPE,
      idlinhatelefonica        linha.planoservlinhapessoasubseg.idlinhatelefonica%TYPE,
      idservico                linha.planoservlinhapessoasubseg.idservico%TYPE,
      idpessoa                 linha.planoservlinhapessoasubseg.idpessoa%TYPE,
      idtipopessoa             linha.planoservlinhapessoasubseg.idtipopessoa%TYPE
   );
   
   TYPE T_c_pessoasubsegmento IS RECORD 
   (   
    rid           ROWID, 
    sgsubsegmento apoio.subsegmento.sgsubsegmento%TYPE,
    ininfancia    apoio.subsegmento.ininfancia%TYPE,
    cdprioridade  apoio.subsegmento.cdprioridade%TYPE   
   );
   
   TYPE T_PLANOSERVICOSUBSEGMENTO IS RECORD
   (
    SGSUBSEGMENTO APOIO.subsegmento.SGSUBSEGMENTO%TYPE,
    CDPRIORIDADE  APOIO.subsegmento.CDPRIORIDADE%TYPE
   );
   
   TYPE T_PLANSERVSUBSEGIDSUBSEG IS RECORD
   (
    idsubsegmento APOIO.subsegmento.idsubsegmento%TYPE
   );

  TYPE TB_SUBSEGMENTOINFANCIA IS
  TABLE OF APOIO.SUBSEGMENTO.IDSUBSEGMENTO%TYPE
  INDEX BY APOIO.SUBSEGMENTO.SGSUBSEGMENTO%TYPE;
  R_SUBSEGMENTOINFANCIA TB_SUBSEGMENTOINFANCIA;

  TYPE PLANOSERVICOLINHA       IS TABLE OF T_PLANOSERVICOLINHA INDEX BY BINARY_INTEGER;
  TYPE C_PESSOASUBSEGMENTO     IS TABLE OF T_C_PESSOASUBSEGMENTO INDEX BY BINARY_INTEGER;
  TYPE PLANOSERVICOSUBSEGMENTO IS TABLE OF T_PLANOSERVICOSUBSEGMENTO INDEX BY BINARY_INTEGER;
  TYPE PLANSERVSUBSEGIDSUBSEG  IS TABLE OF T_PLANSERVSUBSEGIDSUBSEG INDEX BY BINARY_INTEGER;

  
  TB_PLANOSERVICOLINHA       PLANOSERVICOLINHA;
  TB_C_PESSOASUBSEGMENTO     C_PESSOASUBSEGMENTO;
  TB_PLANOSERVICOSUBSEGMENTO PLANOSERVICOSUBSEGMENTO; 
  TB_PLANSERVSUBSEGIDSUBSEG  PLANSERVSUBSEGIDSUBSEG;
  
begin
  DBMS_APPLICATION_INFO.SET_MODULE('ClassificacaoClientesInfancia', 'INICIO PROCESSAMENTO'); 
	
  DATA_INICIAL := SYSDATE;	  
    
	SELECT DSVALORPARAMETRO
      INTO v_UltimoProcessadoInfancia
	  FROM APOIO.PARAMETRO
	 WHERE CDPARAMETRO = 'UltimoProcessadoInfancia';
	 
    SELECT DSVALORPARAMETRO
      INTO v_DiasProcessar
      FROM APOIO.PARAMETRO
     WHERE CDPARAMETRO = 'DIASPROCESSARINFANCIA';
	 
  --INSERT INTO load.param VALUES('INICIO', '&3', v_UltimoProcessadoInfancia, SYSDATE);	 
                
  v_UltimoProcessadoInfanciaDT := TO_DATE(v_UltimoProcessadoInfancia, 'YYYYMMDDHH24MISS');
  v_LimiteDataAte := v_UltimoProcessadoInfanciaDT + v_DiasProcessar;

  -- Recupera idsubsegmento referente a INFANCIA ALTO VALOR
  SELECT IDSUBSEGMENTO
    INTO V_SGSUBSEGMENTO_31
    FROM APOIO.SUBSEGMENTO
   WHERE SGSUBSEGMENTO = '31';

  -- Recupera subsegmento infancia para realizar de-para
  FOR R IN (
    select IDSUBSEGMENTO, NVL(SGSUBSEGMENTO, '0') AS SGSUBSEGMENTO
      from APOIO.SUBSEGMENTO
  )
  LOOP
    R_SUBSEGMENTOINFANCIA(R.SGSUBSEGMENTO) := R.IDSUBSEGMENTO;
  END LOOP;

  -- Busca registros da tabela LINHA.PLANOSERVICOLINHA
  SELECT /*+ PARALLEL(12) */
         planoservicolinha.dtultimaalteracaoplano
       , PLANOSERVICOLINHA.IDLINHATELEFONICA
       , PLANOSERVICOLINHA.IDSERVICO
       , PLANOSERVICOLINHA.IDPESSOA
	   , PLANOSERVICOLINHA.IDTIPOPESSOA
    BULK COLLECT INTO TB_PLANOSERVICOLINHA
    FROM LINHA.PLANOSERVLINHAPESSOASUBSEG PARTITION(&3) PLANOSERVICOLINHA
    WHERE PLANOSERVICOLINHA.DTULTIMAALTERACAOPLANO >= v_UltimoProcessadoInfanciaDT
     AND planoservicolinha.dtultimaalteracaoplano < v_limitedataate;
	      
  -- Busca registros da tabela LINHA.PLANOSERVICOLINHA
  FOR r_pessoa IN 1 .. TB_PLANOSERVICOLINHA.COUNT
  LOOP
    -- armazena maior data de alteracao
    IF TO_NUMBER (TO_CHAR (tb_planoservicolinha(r_pessoa).dtultimaalteracaoplano, 'YYYYMMDDHH24MISS')) > v_dtultimaalteracao
    THEN
         v_dtultimaalteracao := TO_NUMBER (TO_CHAR (tb_planoservicolinha(r_pessoa).dtultimaalteracaoplano, 'YYYYMMDDHH24MISS'));
    END IF;

    DECLARE
	
      V_PESSOASUBSEGMENTO_COUNT PLS_INTEGER := 0;
      V_COUNT NUMBER := 0;
                  
    BEGIN
		
	select /*+ PARALLEL(8) */
           PESSOASUBSEGMENTO.ROWID as RID
         , SUBSEGMENTO.SGSUBSEGMENTO
         , SUBSEGMENTO.ININFANCIA
         , SUBSEGMENTO.CDPRIORIDADE
		  BULK COLLECT INTO TB_C_PESSOASUBSEGMENTO 
      from CUSTOMER.PESSOASUBSEGMENTO PESSOASUBSEGMENTO
         , APOIO.SUBSEGMENTO SUBSEGMENTO
     where PESSOASUBSEGMENTO.IDSUBSEGMENTO = SUBSEGMENTO.IDSUBSEGMENTO
		   AND PESSOASUBSEGMENTO.IDPESSOA = TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA;   	
	  
	  FOR R_PESSOASUBSEGMENTO IN 1 .. TB_C_PESSOASUBSEGMENTO.COUNT
      LOOP
	    V_PESSOASUBSEGMENTO_COUNT := TB_C_PESSOASUBSEGMENTO.COUNT;

        -- Sistema verifica pelo tipo de documento que cliente e PJ
        IF TB_PLANOSERVICOLINHA(R_PESSOA).IDTIPOPESSOA = 2
        THEN
          -- Busca registro da tabela LINHA.PLANOSERVICOSUBSEGMENTO
	    SELECT COUNT(1)
          INTO V_COUNT
          FROM LINHA.PLANOSERVICOSUBSEGMENTO PLANOSERVICOSUBSEGMENTO
         WHERE PLANOSERVICOSUBSEGMENTO.IDSERVICO = TB_PLANOSERVICOLINHA(R_PESSOA).IDSERVICO
           AND PLANOSERVICOSUBSEGMENTO.ININFANCIA = 1;

          IF V_COUNT > 0
          THEN
            -- Sistema atualiza o registro
            UPDATE CUSTOMER.PESSOASUBSEGMENTO
               SET IDSISTEMAORIGEMSUBSEGMENTO = '7'
			     , IDSUBSEGMENTO = V_SGSUBSEGMENTO_31
				 , DTULTIMAALTERACAO = SYSDATE
				 , IDUSUARIOALTERACAO = VI_IDUSUARIOALTERACAO
             WHERE ROWID = TB_C_PESSOASUBSEGMENTO(R_PESSOASUBSEGMENTO).RID;

            V_UPDTREGCOUNT := V_UPDTREGCOUNT + 1;
          END IF;

        -- Sistema verifica pelo tipo de documento que cliente e PF
        ELSIF TB_PLANOSERVICOLINHA(R_PESSOA).IDTIPOPESSOA = 1
        THEN
			
          -- Busca registro da tabela LINHA.PLANOSERVICOSUBSEGMENTO
			  SELECT  SUBSEGMENTOINFANCIA.SGSUBSEGMENTO
					  ,SUBSEGMENTOINFANCIA.CDPRIORIDADE
			BULK COLLECT INTO TB_PLANOSERVICOSUBSEGMENTO
				 FROM  LINHA.PLANOSERVICOSUBSEGMENTO SUBSEGMENTOCATALOGO
					   ,APOIO.SUBSEGMENTO SUBSEGMENTO
					   ,APOIO.SUBSEGMENTO SUBSEGMENTOINFANCIA
		   WHERE subsegmentocatalogo.idservico = TB_PLANOSERVICOLINHA(r_pessoa).idservico
						AND SUBSEGMENTOCATALOGO.IDSUBSEGMENTO = SUBSEGMENTO.IDSUBSEGMENTO
						AND SUBSEGMENTO.SGSUBSEGMENTO = SUBSEGMENTOINFANCIA.SGSUBSEGMENTOINFANCIA
						AND SUBSEGMENTOCATALOGO.ININFANCIA = 1
			 AND subsegmentoinfancia.ininfancia = 1;
			
          -- Busca registro da tabela LINHA.PLANOSERVICOSUBSEGMENTO
          FOR r_planoservicosubsegmento IN 1 .. TB_PLANOSERVICOSUBSEGMENTO.COUNT                                
          LOOP
            -- Verifica que o subsegmento nao se trata de um subsegmento infancia
            IF TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).ININFANCIA = 0
            THEN
              --LOAD.PRC_LOGCLASSIFCLIENTESINF('ININFANCIA = ' || R_PESSOASUBSEGMENTO.ININFANCIA);	
			  -- Atualiza o cliente como infância
			 
              UPDATE CUSTOMER.PESSOASUBSEGMENTO
                 SET IDSISTEMAORIGEMSUBSEGMENTO = '7'
				   , IDSUBSEGMENTO = R_SUBSEGMENTOINFANCIA(TB_PLANOSERVICOSUBSEGMENTO(R_PLANOSERVICOSUBSEGMENTO).SGSUBSEGMENTO)
				   , DTULTIMAALTERACAO = SYSDATE
				   , IDUSUARIOALTERACAO = VI_IDUSUARIOALTERACAO
               WHERE ROWID = TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).RID;

              V_UPDTREGCOUNT := V_UPDTREGCOUNT + 1;

            -- Verifica que o cliente já está classificado com subsegmento ?Infância
            ELSIF TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).ININFANCIA = 1
            THEN
                
              -- Atualiza o cliente como infancia
              UPDATE CUSTOMER.PESSOASUBSEGMENTO
                 SET IDSISTEMAORIGEMSUBSEGMENTO = '7'
				   , IDSUBSEGMENTO = (
                  CASE
						WHEN TB_PLANOSERVICOSUBSEGMENTO(R_PLANOSERVICOSUBSEGMENTO).CDPRIORIDADE > TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).CDPRIORIDADE THEN
						  R_SUBSEGMENTOINFANCIA(TB_PLANOSERVICOSUBSEGMENTO(R_PLANOSERVICOSUBSEGMENTO).SGSUBSEGMENTO)
                    ELSE
						  R_SUBSEGMENTOINFANCIA(TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).SGSUBSEGMENTO)
                  END
                )
                , DTULTIMAALTERACAO = SYSDATE
                , IDUSUARIOALTERACAO = VI_IDUSUARIOALTERACAO
               WHERE ROWID = TB_c_pessoasubsegmento(R_PESSOASUBSEGMENTO).RID;

              V_UPDTREGCOUNT := V_UPDTREGCOUNT + 1;
            END IF;
          END LOOP;
        END IF;
      END LOOP;

      -- Sistema nao encontra registros
      IF V_PESSOASUBSEGMENTO_COUNT = 0
      THEN
        -- Sistema verifica pelo tipo de documento que se trata de um cliente PF
        IF TB_PLANOSERVICOLINHA(R_PESSOA).IDTIPOPESSOA = 1
        THEN
			
          -- Busca registro da tabela LINHA.PLANOSERVICOSUBSEGMENTACAO
		  SELECT  SUBSEGMENTOINFANCIA.IDSUBSEGMENTO
            BULK COLLECT INTO TB_PLANSERVSUBSEGIDSUBSEG
			 FROM  LINHA.PLANOSERVICOSUBSEGMENTO SUBSEGMENTOCATALOGO
				   ,APOIO.SUBSEGMENTO SUBSEGMENTO
				   ,APOIO.SUBSEGMENTO SUBSEGMENTOINFANCIA
           WHERE subsegmentocatalogo.idservico = TB_PLANOSERVICOLINHA(r_pessoa).idservico
              		AND SUBSEGMENTOCATALOGO.IDSUBSEGMENTO = SUBSEGMENTO.IDSUBSEGMENTO
					AND SUBSEGMENTO.SGSUBSEGMENTO = SUBSEGMENTOINFANCIA.SGSUBSEGMENTOINFANCIA
					AND SUBSEGMENTOCATALOGO.ININFANCIA = 1
             AND subsegmentoinfancia.ininfancia = 1;	
            
		  FOR r_planoservicosubsegmento IN 1 .. TB_PLANSERVSUBSEGIDSUBSEG.COUNT
          LOOP
            -- Sistema grava na tabela
            BEGIN
            INSERT INTO /*+ APPEND */ CUSTOMER.PESSOASUBSEGMENTO (
              IDPESSOA
              ,IDUSUARIOALTERACAO
              ,DTULTIMAALTERACAO
              ,IDSISTEMAORIGEMSUBSEGMENTO
              ,IDSUBSEGMENTO
            ) VALUES (
              TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA
              ,VI_IDUSUARIOALTERACAO
              ,SYSDATE
              ,'7'
              ,TB_PLANSERVSUBSEGIDSUBSEG(R_PLANOSERVICOSUBSEGMENTO).IDSUBSEGMENTO
            );
						
            EXCEPTION
              WHEN DUP_VAL_ON_INDEX THEN
                LOAD.PRC_CLASSIFICACAOINFANCIAERRO('DUP_VAL_ON_INDEX = ' || TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA || ' IDSERVICO ' ||  TB_PLANOSERVICOLINHA(R_PESSOA).IDSERVICO || ' IDSUBSEGMENTO ' || TB_PLANSERVSUBSEGIDSUBSEG(R_PLANOSERVICOSUBSEGMENTO).IDSUBSEGMENTO );              
                UPDATE CUSTOMER.PESSOASUBSEGMENTO
                SET IDUSUARIOALTERACAO = VI_IDUSUARIOALTERACAO
                    ,DTULTIMAALTERACAO = SYSDATE
                    ,IDSISTEMAORIGEMSUBSEGMENTO = 7
                     , IDSUBSEGMENTO = TB_PLANSERVSUBSEGIDSUBSEG(R_PLANOSERVICOSUBSEGMENTO).IDSUBSEGMENTO
                 WHERE IDPESSOA = TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA;
				
            END;
            
            V_UPDTREGCOUNT := V_UPDTREGCOUNT + 1;
          END LOOP;

        -- Sistema verifica pelo tipo de documento que o cliente se trata de PJ
        ELSIF TB_PLANOSERVICOLINHA(R_PESSOA).IDTIPOPESSOA = 2
        THEN
          -- Busca registro da tabela LINHA.PLANOSERVICOSUBSEGMENTACAO
			
	        select COUNT(1)
			  INTO V_COUNT
              from LINHA.PLANOSERVICOSUBSEGMENTO PLANOSERVICOSUBSEGMENTO
             where PLANOSERVICOSUBSEGMENTO.IDSERVICO = TB_PLANOSERVICOLINHA(R_PESSOA).IDSERVICO
               and PLANOSERVICOSUBSEGMENTO.ININFANCIA = 1;

          IF V_COUNT > 0
          THEN
            BEGIN
			
            INSERT INTO /*+ APPEND */ CUSTOMER.PESSOASUBSEGMENTO (
               IDPESSOA
              ,IDUSUARIOALTERACAO
              ,DTULTIMAALTERACAO
              ,IDSISTEMAORIGEMSUBSEGMENTO
              ,IDSUBSEGMENTO
            ) VALUES (
              TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA
              ,VI_IDUSUARIOALTERACAO
              ,SYSDATE
              ,'7'
              ,V_SGSUBSEGMENTO_31
            );
            EXCEPTION
              WHEN DUP_VAL_ON_INDEX THEN
               LOAD.PRC_CLASSIFICACAOINFANCIAERRO('DUP_VAL_ON_INDEX = ' || TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA || ' IDSERVICO ' ||  TB_PLANOSERVICOLINHA(R_PESSOA).IDSERVICO || ' IDSUBSEGMENTO ' || V_SGSUBSEGMENTO_31 );   
			   
               UPDATE CUSTOMER.PESSOASUBSEGMENTO
               SET IDUSUARIOALTERACAO = VI_IDUSUARIOALTERACAO
                   ,DTULTIMAALTERACAO = SYSDATE
                   ,IDSISTEMAORIGEMSUBSEGMENTO = 7
                   ,IDSUBSEGMENTO = V_SGSUBSEGMENTO_31
                WHERE IDPESSOA = TB_PLANOSERVICOLINHA(R_PESSOA).IDPESSOA;
				
            END;
            
            V_UPDTREGCOUNT := V_UPDTREGCOUNT + 1;
          END IF;
        END IF;
      END IF;
END;

    -- Realiza commit a cada VI_NUMREGCOMMIT
	LOAD.PRC_CLASSIFICACAOINFANCIAERRO('ClassificacaoClientesInfancia: Data Corte ' || to_char(v_UltimoProcessadoInfanciaDT, 'DD/MM/YYYY HH24:MI:SS') ||' Total Incluido= ' || V_UPDTREGCOUNT);
	
    IF V_UPDTREGCOUNT >= VI_NUMREGCOMMIT
    THEN
      DBMS_APPLICATION_INFO.SET_ACTION('COMMIT:'||V_UPDTREGCOUNT); 
      LOAD.PRC_CLASSIFICACAOINFANCIAERRO('COMMIT:'||V_UPDTREGCOUNT);
      V_UPDTREGCOUNT := 0;
      COMMIT;
    END IF;
  END LOOP;

  IF V_DTULTIMAALTERACAO > 0
  THEN
		UPDATE APOIO.PARAMETRO
		   SET DSVALORPARAMETRO = TO_CHAR(V_DTULTIMAALTERACAO)
		 WHERE CDPARAMETRO = 'UltimoProcessadoInfancia';
  END IF;

  --INSERT INTO load.param VALUES('FIM', '&3', (DATA_INICIAL-SYSDATE), SYSDATE); 
  COMMIT;
  :VO_CDERRO := 0;
  :VO_DSERRO := 'Sucesso';
  
  DBMS_APPLICATION_INFO.SET_MODULE(NULL, NULL); 
EXCEPTION
	WHEN OTHERS THEN
		:VO_CDERRO := 99;
		:VO_DSERRO := 'ERRO NR.: ' || SQLCODE || ' - DESCRIÇÃO DO ERRO: ' || SQLERRM;
    ROLLBACK;

end;
/

EXEC LOAD.PRC_CLASSIFICACAOINFANCIAERRO('FIM DO PROCESSAMENTO');

select CHR(10) from dual;
select 'VO_CDERRO', :VO_CDERRO from dual;
select 'VO_DSERRO', :VO_DSERRO from dual;

exit 0
