SET SQLPROMPT ''
SET FEEDBACK OFF
SET ECHO OFF
SET AUTOTRACE OFF
SET FLUSH ON
SET HEADING OFF
SET SERVEROUTPUT ON
SET TIME OFF
SET TIMING OFF
SET TRIMOUT ON
SET TERMOUT ON
SET TRIMSPOOL ON
SET PAUSE OFF
SET SHOWMODE OFF
SET SQLBLANKLINES OFF
SET SQLNUMBER OFF
SET TAB OFF
SET VERIFY OFF
SET WRAP OFF
SET FEED OFF
SET NEWPAGE NONE
SET LINESIZE 1024
SPOOL '&1' APPEND

VARIABLE VO_CDERRO NUMBER
VARIABLE VO_DSERRO VARCHAR2(512)

DECLARE

	V_PARAM_COMMIT NUMBER := &2;
	V_COUNT NUMBER := 0;

	CURSOR cDOCUMENTO IS
		SELECT /*+ PARALLEL(D, 16) PARALLEL(SS, 16) */
			D.NRDOCUMENTO,
			D.IDDOCUMENTO,
			DECODE(SS.CDSISTEMAORIGEMSUBSEGMENTACAO, 1, 91, 2, 91, 3, 92, 4, 93, 5, 7, 0) AS IDSISTEMAORIGEMSUBSEGMENTO,
			S.SGSUBSEGMENTO,
			S.IDSUBSEGMENTO,
			SS.ROWID AS RID
		FROM
			LOAD.CARGASUBSEGMENTACAO SS
            LEFT JOIN CUSTOMER.DOCUMENTO D
                ON (D. NRDOCUMENTO = SS.NRDOCUMENTO
                    AND DECODE(D.IDTIPODOCUMENTO,1 ,1, 3,1 ,25, 1,27 ,1, 28,1 ,2, 2,15 ,2, 26,2 ,0) = SS.TIPODOCUMENTO
                    AND D. IDTIPODOCUMENTO IN (1, 3,25 ,27, 28, 2,15 ,26))
            LEFT JOIN APOIO.SUBSEGMENTO S ON (S.SGSUBSEGMENTO = SS.SGSUBSEGMENTO)
        WHERE
        	SS.INPROCESSADO = 0;

     CURSOR cPESSOA(P_IDDOCUMENTO NUMBER, P_IDSUBSEGMENTO NUMBER) IS
     	SELECT /*+ PARALLEL(PD, 16) PARALLEL(PS, 16) */
            PD.IDPESSOA AS IDPESSOA
        FROM
            CUSTOMER.PESSOADOCUMENTO PD
            LEFT JOIN CUSTOMER.PESSOASUBSEGMENTO PS ON (PS.IDPESSOA = PD.IDPESSOA AND PS.IDSUBSEGMENTO = P_IDSUBSEGMENTO)
        WHERE
            PS.IDPESSOA IS NULL
            AND PD.IDDOCUMENTO = P_IDDOCUMENTO;

        V_HORA_LIMITE VARCHAR2(10);

BEGIN

	SELECT LPAD(TRIM(REPLACE(DSVALORPARAMETRO,':','')),4,'0') INTO V_HORA_LIMITE
	FROM APOIO.PARAMETRO
	WHERE CDPARAMETRO='LIMITE_CARGASUBSEG';

	--DBMS_OUTPUT.PUT_LINE('Atualizando tabela CUSTOMER.PESSOAGESTOR');
	MERGE
	/*+ PARALLEL(16) */
	INTO CUSTOMER.PESSOAGESTOR PG 
	USING (
	  SELECT /*+ PARALLEL(C, 8)  PARALLEL(S, 8) */
	    C.NRDOCUMENTO, 
	    C.TIPODOCUMENTO,
	    S.IDSUBSEGMENTO
	  FROM 
	    LOAD.CARGASUBSEGMENTACAO C,
	    APOIO.SUBSEGMENTO S
	  WHERE
	    C.SGSUBSEGMENTO  = S.SGSUBSEGMENTO
	  AND
	  	C.INPROCESSADO = 0
	) CS 
	ON (PG.NRDOCUMENTO = CS.NRDOCUMENTO AND PG.IDTIPODOCUMENTO = CS.TIPODOCUMENTO)
	WHEN MATCHED THEN 
	  UPDATE
	  SET PG.IDSUBSEGMENTOGESTOR = CS.IDSUBSEGMENTO
	;
	COMMIT;
	
	--DBMS_OUTPUT.PUT_LINE('Identificando os documentos a serem atualizados');
    FOR I IN cDOCUMENTO LOOP
    	EXIT WHEN TO_CHAR(SYSDATE,'HH24MI') > V_HORA_LIMITE;

    	IF I.IDDOCUMENTO IS NULL OR I.IDDOCUMENTO = 0 THEN

    		-- MARCO COMO DOCUMENTO NAO ENCONTRADO
    		UPDATE LOAD.CARGASUBSEGMENTACAO SET INPROCESSADO = 2 WHERE ROWID = I.RID;

    	ELSE
	
	  		FOR J IN cPESSOA(I.IDDOCUMENTO,I.IDSUBSEGMENTO) LOOP

	  			SAVEPOINT S;
	  			BEGIN

			    	BEGIN

			    		--DBMS_OUTPUT.PUT_LINE('Inserindo PESSOASUBSEGMENTO IDDOCUMENTO='||I.IDDOCUMENTO||' - IDSUBSEGMENTO='||I.IDSUBSEGMENTO);

			            INSERT INTO CUSTOMER.PESSOASUBSEGMENTO
			                (IDPESSOA, IDSUBSEGMENTO, IDSISTEMAORIGEMSUBSEGMENTO, IDUSUARIOALTERACAO, DTULTIMAALTERACAO)
			            VALUES
			                (J.IDPESSOA, I.IDSUBSEGMENTO, I.IDSISTEMAORIGEMSUBSEGMENTO, 666, SYSDATE);

			        EXCEPTION
			            WHEN DUP_VAL_ON_INDEX THEN

			            --DBMS_OUTPUT.PUT_LINE('Atualizando PESSOASUBSEGMENTO IDDOCUMENTO='||I.IDDOCUMENTO||' - IDSUBSEGMENTO='||I.IDSUBSEGMENTO);

			            UPDATE CUSTOMER.PESSOASUBSEGMENTO
			               SET IDSUBSEGMENTO = I.IDSUBSEGMENTO,
			                   IDSISTEMAORIGEMSUBSEGMENTO = I.IDSISTEMAORIGEMSUBSEGMENTO,
			                   IDUSUARIOALTERACAO = 666,
			                   DTULTIMAALTERACAO = SYSDATE
			             WHERE IDPESSOA = J.IDPESSOA;

			        END;
			        
			    EXCEPTION
	                WHEN OTHERS THEN
	                ROLLBACK TO SAVEPOINT S;
	            END;

			END LOOP;

			UPDATE LOAD.CARGASUBSEGMENTACAO SET INPROCESSADO = 1 WHERE ROWID = I.RID;
		

		END IF;

		V_COUNT := V_COUNT + 1;

    	IF V_COUNT >= V_PARAM_COMMIT
    	THEN
    		COMMIT;
    		V_COUNT := 0;
    	END IF;
    END LOOP;

	COMMIT;
	:VO_CDERRO := 0;
	:VO_DSERRO := 'Sucesso';
EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		:VO_CDERRO := 99;
		:VO_DSERRO := 'ERRO NR.: ' || SQLCODE || ' - DESCRIÇÃO DO ERRO: ' || SQLERRM;
END;
/

select CHR(10) from dual;
select 'VO_CDERRO', :VO_CDERRO from dual;
select 'VO_DSERRO', :VO_DSERRO from dual;

SPOOL OFF

exit
