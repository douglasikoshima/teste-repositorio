BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER.TMPRELATORIOROAMING';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

CREATE TABLE CUSTOMER.TMPRELATORIOROAMING (
    RNUM        NUMBER,
    REGISTRO    VARCHAR2(4000)
)tablespace TBS_DADOS;

COMMENT ON TABLE CUSTOMER.TMPRELATORIOROAMING IS 'Tabela para armazernar as linhas que servirao como base para geracao do relatorio de alteracoes para o roaming';
COMMENT ON COLUMN CUSTOMER.TMPRELATORIOROAMING.RNUM IS 'Numero da linha, usado para gerar arquivos segmentados';
COMMENT ON COLUMN CUSTOMER.TMPRELATORIOROAMING.REGISTRO IS 'Registro com as informcos ja formatadas para envio ao roaming';

CREATE INDEX CUSTOMER.TMPRELATORIOROAMINGIDX ON CUSTOMER.TMPRELATORIOROAMING(RNUM);

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER.TMPATUALIZACAOROAMING';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

CREATE TABLE CUSTOMER.TMPATUALIZACAOROAMING
(
    RID     ROWID
)tablespace TBS_DADOS;

COMMENT ON TABLE CUSTOMER.TMPATUALIZACAOROAMING IS 'Tabela de controle usada para identificar as linhas que foram alteradas para envio ao roaming';
COMMENT ON COLUMN CUSTOMER.TMPATUALIZACAOROAMING.RID IS 'Rowid da tabela linha.linhatelefonica usado para otimizar a extracao das linhas identificadas para envio ao roaming';

CREATE INDEX CUSTOMER.TMPATUALIZACAOROAMINGIDX ON CUSTOMER.TMPATUALIZACAOROAMING(RID);

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER.TMPRELATUALIZACAOROAMING';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;    
/

CREATE TABLE CUSTOMER.TMPRELATUALIZACAOROAMING (
    DTGERACAORELATORIO DATE,
    QTLINHASGERADAS    NUMBER
)tablespace TBS_DADOS;

COMMENT ON TABLE CUSTOMER.TMPRELATUALIZACAOROAMING IS 'Tabela de controle identificar quantas atualizacoes foram enviadas em um dia. Eh usada pra identificar se a base de D-1 estava desatualizada. Caso a quantidade de registro seja pequena podemos assumir que D-1 esta desatualizada, tomando uma acao como reprocessar dias anteriores';
COMMENT ON COLUMN CUSTOMER.TMPRELATUALIZACAOROAMING.DTGERACAORELATORIO IS 'Data de processamento do relatorio';
COMMENT ON COLUMN CUSTOMER.TMPRELATUALIZACAOROAMING.QTLINHASGERADAS IS 'Quantidade de linhas processadas';

CREATE OR REPLACE PACKAGE CUSTOMER.PKG_RELATORIOROAMING
IS
    PROCEDURE TRUNCAR_TEMPORARIAS;
    PROCEDURE TRUNCAR_RELATORIO_ATUALIZACAO;
    PROCEDURE VERIFICA_DIAS_RETROATIVOS (
                        I_MIN_ATUALIZACAO   IN  NUMBER,
                        O_DIAS_RETROATIVOS  OUT NUMBER
                    );
    PROCEDURE GERA_RELATORIO_FULL;
    PROCEDURE IDENTIFICA_ATUALIZACOES(
                        I_DIA_RETROATIVO_DE  IN  NUMBER DEFAULT -1,
                        I_DIA_RETROATIVO_ATE IN  NUMBER DEFAULT  0,
                        I_MIN_ATUALIZACAO    IN  NUMBER DEFAULT  0,
                        I_MAX_RETROATIVO     IN  NUMBER DEFAULT  0
                    );
    PROCEDURE GERA_RELATORIO_ATUALIZACOES;

END PKG_RELATORIOROAMING;
/

CREATE OR REPLACE PACKAGE BODY CUSTOMER.PKG_RELATORIOROAMING
IS
    PROCEDURE TRUNCAR_TEMPORARIAS
    IS
    BEGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE CUSTOMER.TMPRELATORIOROAMING';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE CUSTOMER.TMPATUALIZACAOROAMING';
    END TRUNCAR_TEMPORARIAS;

    PROCEDURE TRUNCAR_RELATORIO_ATUALIZACAO
    IS
    BEGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE CUSTOMER.TMPRELATUALIZACAOROAMING';
    END TRUNCAR_RELATORIO_ATUALIZACAO;

    PROCEDURE VERIFICA_DIAS_RETROATIVOS (
                        I_MIN_ATUALIZACAO   IN  NUMBER,
                        O_DIAS_RETROATIVOS  OUT NUMBER
    )
    IS
    BEGIN
        SELECT
            NVL(TRUNC(MAX(DTGERACAORELATORIO) - SYSDATE),-1)
        INTO
            O_DIAS_RETROATIVOS
        FROM
            CUSTOMER.TMPRELATUALIZACAOROAMING
        WHERE
            QTLINHASGERADAS > I_MIN_ATUALIZACAO;
    EXCEPTION
        WHEN OTHERS THEN
            O_DIAS_RETROATIVOS := -1;
    END VERIFICA_DIAS_RETROATIVOS;

    PROCEDURE GERA_RELATORIO_FULL
    IS
    BEGIN
        INSERT  /*+ APPEND */ INTO CUSTOMER.TMPRELATORIOROAMING (RNUM,REGISTRO)
        SELECT /*+ PARALLEL(LT) PARALLEL(LB) PARALLEL(PL) PARALLEL(PDP) PARALLEL(P) */
            ROWNUM AS RNUM,
            AR.CDAREAREGISTRO || LB .NRLINHA || ';' ||
            TO_CHAR(LT.DTHABILITACAO, 'YYYY-MM-DD') || ';' ||
            TO_CHAR(LT.DTEXPIRACAO, 'YYYY-MM-DD') || ';' ||
            TL.IDCLASSIFICACAOTIPOLINHA || ';' ||
            TP.SGTIPOPESSOA AS REGISTRO
        FROM
            LINHA.LINHATELEFONICA LT
            JOIN APOIO.SISTEMAORIGEM SO ON (LT.IDSISTEMAORIGEM = SO.IDSISTEMAORIGEM)
            JOIN APOIO.TIPOLINHA TL USING (IDTIPOLINHA)
            JOIN LINHA.LINHABASE LB USING (IDLINHABASE)
            JOIN APOIO.AREAREGISTRO AR USING (IDAREAREGISTRO)
            JOIN CUSTOMER.PESSOALINHA PL USING (IDLINHATELEFONICA)
            JOIN CUSTOMER.PESSOADEPARA PDP USING (IDPESSOADEPARA)
            JOIN CUSTOMER.PESSOA P USING (IDPESSOA)
            JOIN APOIO.TIPOPESSOA TP USING (IDTIPOPESSOA)
        WHERE
            PL.IDTIPORELACIONAMENTO = 2
            AND SO.CDORIGEM = 'MOVEL'
            AND LT.DTHABILITACAO IS NOT NULL
            AND TP.SGTIPOPESSOA IN ('PF','PJ')
            AND TL.IDCLASSIFICACAOTIPOLINHA IN ('POS','PRE','CTR');

    END GERA_RELATORIO_FULL;

    PROCEDURE IDENTIFICA_ATUALIZACOES (
                        I_DIA_RETROATIVO_DE  IN  NUMBER DEFAULT -1,
                        I_DIA_RETROATIVO_ATE IN  NUMBER DEFAULT  0,
                        I_MIN_ATUALIZACAO    IN  NUMBER DEFAULT  0,
                        I_MAX_RETROATIVO     IN  NUMBER DEFAULT  0
    )
    IS
        V_DIA_RETROATIVO_DE NUMBER;
        V_DTDE DATE := TRUNC(SYSDATE+I_DIA_RETROATIVO_DE);
        V_DTATE DATE := TRUNC(SYSDATE+I_DIA_RETROATIVO_ATE);

    BEGIN

        -- CASO O I_MIN_ATUALIZACAO SEJA DEFAULT A VERIFICACAO DE EXECUCAO RETROATIVA EH IGNORADA
        IF I_MIN_ATUALIZACAO != 0 THEN
            VERIFICA_DIAS_RETROATIVOS(I_MIN_ATUALIZACAO,V_DIA_RETROATIVO_DE);
            V_DTDE := TRUNC(SYSDATE+V_DIA_RETROATIVO_DE);

            IF I_MAX_RETROATIVO != 0 AND ABS(V_DIA_RETROATIVO_DE) > I_MAX_RETROATIVO THEN
                RAISE_APPLICATION_ERROR(-20001,'A quantidade de dias processados excede o limite parametrizado');
            END IF;

        END IF;

        INSERT INTO CUSTOMER.TMPATUALIZACAOROAMING(RID)
        SELECT /*+ PARALLEL(LT,8) */
               LT.ROWID AS RID
          FROM LINHA.LINHATELEFONICA LT
               JOIN APOIO.SISTEMAORIGEM SO USING (IDSISTEMAORIGEM)
         WHERE LT.DTULTIMAALTERACAO >= V_DTDE
           AND LT.DTULTIMAALTERACAO < V_DTATE
           AND SO.CDORIGEM = 'MOVEL'
        UNION
        SELECT /*+ PARALLEL(LT,8) PARALLEL(LB,8) */
               LT.ROWID AS RID
          FROM LINHA.LINHATELEFONICA LT
               JOIN LINHA.LINHABASE LB USING (IDLINHABASE,IDSISTEMAORIGEM)
               JOIN APOIO.SISTEMAORIGEM SO USING (IDSISTEMAORIGEM)
         WHERE LB.DTULTIMAALTERACAO >= V_DTDE
           AND LB.DTULTIMAALTERACAO < V_DTATE
           AND SO.CDORIGEM = 'MOVEL';
    END IDENTIFICA_ATUALIZACOES;

    PROCEDURE GERA_RELATORIO_ATUALIZACOES
    IS
    BEGIN
        INSERT /*+ APPEND */ INTO  CUSTOMER.TMPRELATORIOROAMING (RNUM,REGISTRO)
        SELECT /*+ PARALLEL(LT) PARALLEL(LB) PARALLEL(PL) PARALLEL(PDP) PARALLEL(P) */
            ROWNUM AS RNUM,
            AR.CDAREAREGISTRO || LB .NRLINHA || ';' ||
            TO_CHAR(LT.DTHABILITACAO, 'YYYY-MM-DD') || ';' ||
            TO_CHAR(LT.DTEXPIRACAO, 'YYYY-MM-DD') || ';' ||
            TL.IDCLASSIFICACAOTIPOLINHA || ';' ||
            TP.SGTIPOPESSOA AS REGISTRO
        FROM
            LINHA.LINHATELEFONICA LT
            JOIN CUSTOMER.TMPATUALIZACAOROAMING RO ON (RO.RID = LT.ROWID)
            JOIN APOIO.TIPOLINHA TL USING (IDTIPOLINHA)
            JOIN LINHA.LINHABASE LB USING (IDLINHABASE)
            JOIN APOIO.AREAREGISTRO AR USING (IDAREAREGISTRO)
            JOIN CUSTOMER.PESSOALINHA PL USING (IDLINHATELEFONICA)
            JOIN CUSTOMER.PESSOADEPARA PDP USING (IDPESSOADEPARA)
            JOIN CUSTOMER.PESSOA P USING (IDPESSOA)
            JOIN APOIO.TIPOPESSOA TP USING (IDTIPOPESSOA)
        WHERE
            PL.IDTIPORELACIONAMENTO = 2
            AND LT.DTHABILITACAO IS NOT NULL
            AND TP.SGTIPOPESSOA IN ('PF','PJ')
            AND TL.IDCLASSIFICACAOTIPOLINHA IN ('POS','PRE','CTR');
    END GERA_RELATORIO_ATUALIZACOES;

END PKG_RELATORIOROAMING;
/


------------------------------------------------------
-- GRANT PARA O USUARIO DE EXECUCAO
------------------------------------------------------

BEGIN
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATORIOROAMING TO BATCHPRO';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPATUALIZACAOROAMING TO BATCHPRO';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATUALIZACAOROAMING TO BATCHPRO';
    EXECUTE IMMEDIATE 'GRANT EXECUTE ON CUSTOMER.PKG_RELATORIOROAMING TO BATCHPRO';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATORIOROAMING TO BATCHHV';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPATUALIZACAOROAMING TO BATCHHV';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATUALIZACAOROAMING TO BATCHHV';
    EXECUTE IMMEDIATE 'GRANT EXECUTE ON CUSTOMER.PKG_RELATORIOROAMING TO BATCHHV';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATORIOROAMING TO BATCHDES';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPATUALIZACAOROAMING TO BATCHDES';
    EXECUTE IMMEDIATE 'GRANT ALL ON CUSTOMER.TMPRELATUALIZACAOROAMING TO BATCHDES';
    EXECUTE IMMEDIATE 'GRANT EXECUTE ON CUSTOMER.PKG_RELATORIOROAMING TO BATCHDES';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
/

