/***********************************************************
  BATCH......: relressarcimprocedente
  Criado por.: Eder Jani Martins (06/05/2015)
  Funcional..: Erika Brum
***********************************************************/
SET SQLPROMPT '';
SET TERMOUT OFF;
SET FEEDBACK OFF;
SET ECHO OFF;
SET AUTOTRACE OFF;
SET FLUSH ON;
SET HEADING OFF;
SET SERVEROUTPUT ON SIZE UNLIMITED;
SET TIME OFF;
SET TIMING OFF;
SET TRIMOUT ON;
SET TRIMSPOOL ON;
SET PAUSE OFF;
SET SHOWMODE OFF;
SET SQLBLANKLINES OFF;
SET SQLNUMBER OFF;
SET TAB OFF;
SET VERIFY OFF;
SET WRAP OFF;
SET FEED OFF;
SET NEWPAGE NONE;
SET LINESIZE 32767;
SPOOL &1;

WHENEVER OSERROR EXIT 9
WHENEVER SQLERROR EXIT SQL.SQLCODE

ALTER SESSION SET COMMIT_LOGGING = 'IMMEDIATE'
ALTER SESSION SET COMMIT_WAIT = NOWAIT

DECLARE
    V_LINHA           VARCHAR2(2000) DEFAULT NULL;
    V_IDSISTEMAORIGEM NUMBER DEFAULT 0;
    V_SYSDATE         DATE DEFAULT SYSDATE;
    V_DATA_PROCESSAMENTO VARCHAR2(20) DEFAULT NULL;
    V_DATA_PROCESSAMENTO_S VARCHAR2(10) DEFAULT NULL;
    
    TYPE R_RESSARCIMENTOBILLING IS RECORD 
    (    
        DSSTATUS              LOAD.RESSARCIMENTOBILLING.DSSTATUS%TYPE
      , IDPEDIDORESSARCIMENTO ATENDIMENTO.PEDIDORESSARCIMENTO.IDPEDIDORESSARCIMENTO%TYPE    
    );
    
    TYPE TP_RESSARCIMENTOBILLING IS TABLE OF R_RESSARCIMENTOBILLING;
    V_RESSARCIMENTOBILLING TP_RESSARCIMENTOBILLING;

    --Cursor que verifica PROCEDENTES NAO ENCONTRADOS
    CURSOR CURSOR_PROCEDENTEFWT IS 
    SELECT DSTIPORESSARCIMENTO      || ', '||
           CDLINHADW                || ', '||
           NRLINHA                  || ', '||
           DTINICIOINTERRUPCAO      || ', '||
           DTFIMINTERRUPCAO         || ', '||
           HRINICIOINTERRUPCAO      || ', '||
           HRFIMINTERRUPCAO         || ', '||
           VLRESSARCIMENTO          || ', '||
           DSSTATUS                 || ', '||
           NRCICLO                  || ', '||
           DTFATURA                 || ', '||
           DTPROCESSAMENTO
           AS LINHA
      FROM LOAD.RESSARCIMENTOBILLING LRB
     WHERE NOT EXISTS 
     (
        SELECT 1
          FROM ATENDIMENTO.PEDIDORESSARCIMENTO APR
         WHERE APR.CDAREAREGISTRO      = LRB.CDLINHADW
           AND APR.NRLINHA             = LRB.NRLINHA
           AND APR.DTINICIOINTERRUPCAO = TO_DATE(TO_CHAR(TO_DATE(LRB.DTINICIOINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRINICIOINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
           AND APR.DTFIMINTERRUPCAO    = TO_DATE(TO_CHAR(TO_DATE(LRB.DTFIMINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRFIMINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
      );


BEGIN
    DBMS_OUTPUT.ENABLE (buffer_size => NULL);

    V_DATA_PROCESSAMENTO_S := LPAD(&2,4,'0');
    V_DATA_PROCESSAMENTO := SUBSTR(V_DATA_PROCESSAMENTO_S,3,4) || '/' || SUBSTR(V_DATA_PROCESSAMENTO_S,1,2) || '/';

    SELECT IDSISTEMAORIGEM 
      INTO V_IDSISTEMAORIGEM
      FROM APOIO.SISTEMAORIGEM 
     WHERE UPPER(SGSISTEMAORIGEM) = 'SGS';

    -- INSERE OS RESSACIMENTOS EM ATENDIMENTO.RESSARCIMENTOBILLING OU ATUALIZA QUANDO JA EXISTE
    MERGE /*+ FIRST_ROWS */ INTO ATENDIMENTO.RESSARCIMENTOBILLING ARB
    USING 
    ( 
        SELECT APR.IDPEDIDORESSARCIMENTO,
               APR.DSSTATUSRESSARCIMENTO,
               APR.CDUSUARIOALTERACAO,
               APR.DTULTIMAALTERACAO,
               LRB.VLRESSARCIMENTO AS VALOR_RESSARCIMENTO,
               LRB.NRCICLO AS CICLO_FATURAMENTO,
               LRB.DTFATURA AS MES_ANO_FATURA
          FROM LOAD.RESSARCIMENTOBILLING LRB,
               ATENDIMENTO.PEDIDORESSARCIMENTO APR
         WHERE APR.CDAREAREGISTRO      = LRB.CDLINHADW
           AND APR.NRLINHA             = LRB.NRLINHA
           AND APR.DTINICIOINTERRUPCAO = TO_DATE(TO_CHAR(TO_DATE(LRB.DTINICIOINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRINICIOINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
           AND APR.DTFIMINTERRUPCAO    = TO_DATE(TO_CHAR(TO_DATE(LRB.DTFIMINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRFIMINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
    ) RESS
    ON 
    (
        ARB.IDPEDIDORESSARCIMENTO = RESS.IDPEDIDORESSARCIMENTO
    )
    WHEN MATCHED THEN UPDATE SET
        ARB.VLRESSARCIMENTO          = RESS.VALOR_RESSARCIMENTO,
        ARB.NRCICLO                  = RESS.CICLO_FATURAMENTO,
        ARB.DTFATURA                 = RESS.MES_ANO_FATURA,
        ARB.DTPROCESSAMENTO          = TO_DATE(TO_CHAR(V_DATA_PROCESSAMENTO || TO_CHAR(V_SYSDATE, 'YYYY') || ' 00:00:01'), 'DD/MM/YY HH24:MI:SS'),
        ARB.IDSISTEMAORIGEM          = V_IDSISTEMAORIGEM,
        ARB.CDUSUARIOALTERACAO       = 1,
        ARB.DTULTIMAALTERACAO        = V_SYSDATE
    WHEN NOT MATCHED THEN INSERT
    (
        IDPEDIDORESSARCIMENTO,
        VLRESSARCIMENTO,
        NRCICLO,
        DTFATURA,
        DTPROCESSAMENTO,
        IDSISTEMAORIGEM,
        CDUSUARIOALTERACAO,
        DTULTIMAALTERACAO    
    ) VALUES (
        RESS.IDPEDIDORESSARCIMENTO,
        RESS.VALOR_RESSARCIMENTO,
        RESS.CICLO_FATURAMENTO,
        RESS.MES_ANO_FATURA,
        TO_DATE(TO_CHAR(V_DATA_PROCESSAMENTO || TO_CHAR(V_SYSDATE, 'YYYY') || ' 00:00:01'), 'DD/MM/YY HH24:MI:SS'),
		V_IDSISTEMAORIGEM,
        1,
        V_SYSDATE
    );

    --ATUALIZA O STATUS E A DATA DO RESSACIMENTOS EM ATENDIMENTO.PEDIDORESSARCIMENTO
    SELECT LRB.DSSTATUS AS STATUS 
         , APR.IDPEDIDORESSARCIMENTO         
      BULK COLLECT INTO V_RESSARCIMENTOBILLING
      FROM LOAD.RESSARCIMENTOBILLING LRB
         , ATENDIMENTO.PEDIDORESSARCIMENTO APR
     WHERE APR.CDAREAREGISTRO      = LRB.CDLINHADW
           AND APR.NRLINHA             = LRB.NRLINHA
           AND APR.DTINICIOINTERRUPCAO = TO_DATE(TO_CHAR(TO_DATE(LRB.DTINICIOINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRINICIOINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
           AND APR.DTFIMINTERRUPCAO    = TO_DATE(TO_CHAR(TO_DATE(LRB.DTFIMINTERRUPCAO, 'YYYY-MM-DD'), 'DD/MM/YYYY') || ' ' || TO_CHAR(TO_DATE(LRB.HRFIMINTERRUPCAO, 'HH24.MI.SS'), 'HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS');
      
    FOR VAR IN 1..V_RESSARCIMENTOBILLING.COUNT 
    LOOP
    
        UPDATE ATENDIMENTO.PEDIDORESSARCIMENTO APR
           SET APR.DSSTATUSRESSARCIMENTO = V_RESSARCIMENTOBILLING(VAR).DSSTATUS
             , APR.CDUSUARIOALTERACAO    = 1
             , APR.DTULTIMAALTERACAO     = V_SYSDATE
         WHERE APR.IDPEDIDORESSARCIMENTO = V_RESSARCIMENTOBILLING(VAR).IDPEDIDORESSARCIMENTO;
    
    END LOOP;    
    COMMIT;

    --EXECUTA O CURSOR COM OS RESSACIMENTOS NAO ENCONTRADOS E GRAVA NUM ARQUIVO
    /*
        Descomentar linha abaixo quando o batch subir para producao
    */
    --DBMS_OUTPUT.PUT_LINE('DSTIPORESSARCIMENTO, CDLINHADW, NRASSINATURA, NRLINHA, DSPLANO, NREVENTOANATEL, DTINICIOINTERRUPCAO, DTFIMINTERRUPCAO, HRINICIOINTERRUPCAO, HRFIMINTERRUPCAO, NRTEMPOINTERRUPCAO, VLRESSARCIMENTO, DTCONCESSAORESSARCIMENTO, DSSTATUS, NRCICLO, DTFATURA, DTPROCESSAMENTO, SGUF, NMMUNICIPIO, VLARPU');
    OPEN CURSOR_PROCEDENTEFWT;
    LOOP
        FETCH CURSOR_PROCEDENTEFWT INTO V_LINHA;
        EXIT WHEN CURSOR_PROCEDENTEFWT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_LINHA);
    END LOOP;
    CLOSE CURSOR_PROCEDENTEFWT;
    DBMS_OUTPUT.PUT_LINE('== FIM LINHAS NAO ENCONTRADAS EM ATENDIMENTO.PEDIDORESSARCIMENTO ==');
END;
/

SPOOL OFF
SET ECHO OFF
SET TIMI OFF
SET TIME OFF
EXIT
