/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio
 * @version $Revision: 1.1.2.2 $
 * @CVS     $Author: a5110706 $ - $Date: 2010/03/22 19:40:04 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <ctype.h>

#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>
#include <dirent.h>

#include "../include/cargaGrupoContato.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

extern errno;

EXEC SQL INCLUDE SQLCA;

//char szAux[512];
Log oLog;
//int iSignalProcessa=1;
//bool ObterQtRegistro(char *pszFile,char* szQt);

int OpenDir(char *pszDiretorio,char*pfile);
//int obtemRegistro(char*pszLinha,int qtParam, char *pLinha, char* pdtCadastro,char *pstatus,char *dtstatus);

int obtemRegistro(char*pszLinha ,int qtParam, char *pnmgrupo, char *pidcontato, char* pszTipo);

int main(void)
{
    //variaveis para controle
	TParamConf tParamConf;
    int retorno = 0;
    FILE *arquivo;
    char szAux[1024];
	char szBuffer[521];
	char szNomeArquivoFull[255];

	struct sqlca sqlca;
	//variaveis oracle
    EXEC SQL BEGIN DECLARE SECTION;

         VARCHAR szNomeArquivo[101];
         VARCHAR szNomeArquivoBad[101];
         VARCHAR szDsObservacao[50];
         VARCHAR szDsStatus[50];
         VARCHAR szLoader[200];
         int     qtRegistros=0;
		 int	 qtlinhas=0;
		 int	 qtlinhasE=0;
		 VARCHAR idUsuarioAlteracao[21+1];
		 int	 qtdiasProcon=0;
		 int	 qtdiasOutros=0;
		 char    szMvfile[255];

		// estrutura do banco
		 VARCHAR szIdContato[21+1];
		 VARCHAR szGrupo[70];
		 VARCHAR szIDGrupo[21+1];
		 VARCHAR szTipo[4];

		
		 //estrutura do arquivo
		 char sIdContato[21+1];
		 char sGrupo[70];
		 char sTipo[4];
		 

    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>cargaGrupoContato");

    // parametros de configuração
    if ( ObtemParamConf( &tParamConf ) )
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<cargaGrupoContato");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<cargaGrupoContato");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");


    //EXEC SQL WHENEVER SQLERROR GOTO sqlError;

/**********************************************************************************/
/*					CODIGO DE NEGOCIO											  */
/**********************************************************************************/

	
	oLog.logDebug("Inicio da carga...\n");
		oLog.logDebug("Inicio da carga...\n");
	

	while(OpenDir(tParamConf.szPath,szNomeArquivoFull) != 0)
    {
        oLog.logDebug("Inicio da carga...\n");
		arquivo=fopen(szNomeArquivoFull,"r");
		
		//oLog.logDebug("Obtendo Parametros para o arquvio %s",szNomeArquivoFull);

			while(!feof(arquivo))
			{
				memset(&szBuffer,0,sizeof(szBuffer));
				fgets(szBuffer,500,arquivo);

				oLog.logDebug(szBuffer);

				if(strlen(szBuffer)==0) break;

				
				memset(&sIdContato,0,sizeof(sIdContato));
				memset(&sGrupo,0,sizeof(sGrupo));
				memset(&sTipo,0,sizeof(sTipo));


				memset(&szIdContato,0,sizeof(szIdContato));
				memset(&szGrupo,0,sizeof(szGrupo));
				memset(&szTipo,0,sizeof(szTipo));
				memset(&szIDGrupo,0,sizeof(szIDGrupo));


				obtemRegistro(szBuffer,3,sGrupo,sIdContato,sTipo);
				
				strToOra(szIdContato,sIdContato);
				strToOra(szGrupo,sGrupo);
				strToOra(szTipo,sTipo);
				
				oLog.logDebug("log varchars...");
				oLog.logDebug((char*)szIdContato.arr );
				oLog.logDebug((char*)szGrupo.arr );
				oLog.logDebug((char*)szTipo.arr );

			  qtlinhas++;	

			  // EXEC SQL WHENEVER SQLERROR GOTO sqlError;
			  oLog.logDebug("select grupo..");

			  EXEC SQL
				  SELECT IDGRUPO
				  INTO	 :szIDGrupo
				  from   acesso.grupo g
				  where  g.nmgrupo=trim(:szGrupo);

			  oLog.logDebug((char*)szIDGrupo.arr );
			  endOraStr(szIDGrupo);
			  oLog.logDebug((char*)szIDGrupo.arr );
			oLog.logDebug("insert1..");

			 EXEC SQL
				 Insert into CONTATOADM.CONTATOGRUPO
				 (IDCONTATOGRUPO, IDGRUPO, IDCONTATO, IDUSUARIOALTERACAO, DTULTIMAALTERACAO) 
				  values (CONTATOADM.CONTATOGRUPOSQ.NEXTVAL,
						   to_number(:szIDGrupo),
						   to_number(:szIdContato),
						   666,
						   SYSDATE);
				
				
				//código looser mas é pra ficar bonitinho...
				if(sqlca.sqlcode == 1403 ||sqlca.sqlcode < 0  )
				{
					qtlinhasE++;
					sprintf(szAux, "ERRO no processamento - [%s] - Mensagem [%s].", szBuffer, sqlca.sqlerrm.sqlerrmc);
					oLog.logDebug(szAux);
				}
				else if (sqlca.sqlcode==0)
				{
					oLog.logDebug("insert2..");
					EXEC SQL
						Insert into CONTATOADM.SEQUENCIA
						   (IDSEQUENCIA, 
						   IDCONTATOGRUPO, 
						   IDTIPOSEQUENCIA, 
						   SQORDEM, 
						   IDUSUARIOALTERACAO, 
						   DTULTIMAALTERACAO, 
						   DTEXCLUSAO)
							values
							(CONTATOADM.SEQUENCIASQ.NEXTVAL,
							CONTATOADM.CONTATOGRUPOSQ.CURRVAL,
							replace(trim(:szTipo),chr(10),null),
							0,
							-666,
							sysdate,
							null);
												
					
					EXEC SQL COMMIT;
					
					if (sqlca.sqlcode < 0)
					{
						qtlinhasE++;
						sprintf(szAux, "ERRO no processamento2 - [%s] - Mensagem [%s].\n", szBuffer, sqlca.sqlerrm.sqlerrmc);
						oLog.logDebug(szAux);
					}
				}
			}
		
		sprintf(szAux, "Arquivo Processado - qtlinhas [%d] - qterros [%d].\n", qtlinhas, qtlinhasE);
		oLog.logDebug(szAux);

		sprintf(szMvfile,"mv %s %s.PRC",szNomeArquivoFull,szNomeArquivoFull);
		system(szMvfile);
	}

			

	/*********************************************************************************/
    // finaliza
    oLog.logDebug( "Fechando conexao com o banco" );
    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<cargaGrupoContato");

    return retorno;

    sqlError1:
        sprintf(szAux, "*** ERRO: Processo FINALIZADO com erro ORACLE (%s)", sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return -1;
}


/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];
    char szAux[1024];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}



/************************************************************************************************************/
int ObtemParamConf( TParamConf * ptParamConf )
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];
    char szAux[1024];

    oLog.logDebug("Obtendo parametros de configuracao...");

    memset( ptParamConf, 0x00, sizeof(TParamConf) );
    memset( szLinha    , 0x00, sizeof(szLinha) );
    memset( szDivArq   , 0x00, sizeof(szDivArq) );
    memset( szDivPre   , 0x00, sizeof(szDivPre) );


    /* Define o arquivo de configuração */
    mfConfig.setPath("cargaGrupoContato.cfg");

    if( !mfConfig.abrir() )
    {
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv( '=' );
    while( mfConfig.getLine(szLinha) )
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }

    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}



/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    char szAux[1024];
    
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);
    oLog.logInformation(connString);

    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    //oLog.logInformation("<<<DBConnect [ERROR]");
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
    return -1;
}



/************************************************************************************************************/
void DBDisconnect( void )
{
    char szAux[1024];
    
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}

int OpenDir(char *pszDiretorio,char*pfile)
{
    static DIR *pDir;
    static struct dirent *pDirent;
    static char szArq[512 + 1];
    static int iFlag=1;

	char szAux[1024];

    oLog.logDebug(">>> OpenDir");
    sprintf(szAux, "pszDiretorio[%s]", pszDiretorio); oLog.logDebug(szAux);

    if(iFlag == 1)
    {
        /* Abre diretorio e verifica sucesso */
        if( (pDir = opendir(pszDiretorio)) == NULL)
        {
            sprintf(szAux, "Erro abrindo diretorio [%s]. errno(%d) strerror[%s]", pszDiretorio, errno, strerror(errno)); oLog.logError(szAux);
            exit(-1);
        }

        iFlag=0;
    }

    /* Efetua a leitura dos nomes dos arquivos do diretorio */
    while((pDirent = readdir(pDir)) != NULL )
    {
        sprintf(szAux, "Arquivo obtido[%s]", pDirent->d_name); oLog.logDebug(szAux);

        /* valida arquivo */
        if((!memcmp(pDirent->d_name+strlen(pDirent->d_name)-4, ".txt", 4)))
        {
            /* Monta path + nome do arquivo a ser processado */
            strcpy(szArq, pDirent->d_name);
            sprintf(szAux, "Arquivo validado [%s]", szArq); oLog.logDebug(szAux);

            oLog.logDebug("<<< OpenDir <NOT NULL>");
            strcpy(pfile,szArq);
			return 1;
        }
    }

    closedir(pDir);
    iFlag=1;
    oLog.logDebug("<<< OpenDir <NULL>");
    return 0;
}


int obtemRegistro(char*pszLinha ,int qtParam, char *pnmgrupo, char *pidcontato, char* pszTipo)
{
	int		iSeparador=0;
	//	printf("\n>>obtemRegistro");
	    oLog.logDebug(">>>obtemRegistro");
	while(iSeparador<qtParam &&strlen(pszLinha)>qtParam)
	{
		
			/*memset(&szLogin,0,sizeof(szLogin));
				memset(&szCNPJ,0,sizeof(szCNPJ));
				memset(&szTipo,0,sizeof(szTipo));*/
			
			//printf("\n while.. qtParam=>%d",qtParam);
			switch(iSeparador)
				{
					case 0:
						strcpy(pnmgrupo,strtok(pszLinha,"|"));
					printf("\n pnmgrupo=>%s",pnmgrupo);
					break;
					case 1:
						strcpy(pidcontato,strtok(NULL,"|"));
						printf("\n pidcontato=>%s",pidcontato);
					break;
					case 2:
						strcpy(pszTipo,strtok(NULL,"|"));
						printf("\n pszTipo=>%s",pszTipo);
					break;
					
				}
		iSeparador++;
	}
	oLog.logDebug("<<<obtemRegistro");
	return 1;

}