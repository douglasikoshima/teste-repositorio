#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <ctype.h>

#include <tuxfw.h>

#include <finalizaCadastroPortIn.h>

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[10000 + 1];
Log oLog;
int iSignalProcessa=1;
char szDataHoraGlobal[19 + 1];

// controle de alocacao de memoria
int giQtdElementosAlocados;
int giQtdElementosObtidos;
TDadosDocumento *gptDadosDocumento;

int main(int argc, char **argv)
{
    char szIdPessoaDePara[21 + 1];
    char szCdAreaRegistro[21 + 1];
    char szNrLinha[16];
    char szInSincronizado[2 + 1];
    char szXmlRender[10000 + 1];
    char szXmlTmp[10000 + 1];
    char szAuxNGIN[256 + 1];
    int iFlagIE=0;
    int iCountLogradouro=0;

    /* De para de tipo de logradouros para o NGIN */
    char *pszTipoLogNGIN[] = {
        "ACS", "AL", "AV", "BC", "ESTR", "GLR", "JD", "LAD", "LGO", "PAS","PCA",
        "PRA", "PQ", "PTE", "R", "ROD", "TRAV", "TRV", "V", "VD", "VIA", "VL"
    };
    char *pszTipoLogFO[] = {
        "ACESSO", "ALAMEDA", "AVENIDA", "BECO", "ESTRADA", "GALERIA", "JARDIM",
        "LADEIRA", "LARGO", "PASSAGEM", "PRACA", "PRAIA", "PARQUE", "PONTE",
        "RUA", "RODOVIA", "TRAVESSA", "TREVO", "VALE", "VIADUTO", "VIA", "VIELA", NULL
    };

    TParamConf tParamConf;
    TDadosPublicadosNGIN tDadosPublicadosNGIN;
    TPessoaLinha tPessoaLinha;
    TPessoaLinhaHistorico tPessoaLinhaHistorico;
    TPessoaConta tPessoaConta;
    TObtemDadosXml tObtemDadosXml;
    TDadosDocumento *ptDadosDocumento=NULL;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[21];
        VARCHAR oszCdAreaRegistro[21];
        VARCHAR oszNrLinha[16];
        VARCHAR oszInSincronizado[2];
    EXEC SQL END DECLARE SECTION;

    // Acertando o nivel de logs
    oLog.setNivel(2);
    oLog.logDebug(">>>finalizaCadastroPortIn\n");

    ArmaSinal(SIGTERM);

    /* Obtem a data e hora atual e armazena em variavel global */
    strcpy(szDataHoraGlobal, ObtemDataHora());

    if(ObtemParamConf(&tParamConf, argv[0])) {
        oLog.logError("Erro obtendo parametros de configuracao\n");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    /* Conecta no banco de dados */
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst)) {
        oLog.logError("Erro conectando no banco de dados\n");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...\n");


    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    /* Declara cursor */
    // EXEC SQL DECLARE cursorPortIn CURSOR FOR
        // SELECT DISTINCT
            // IDPESSOADEPARA,
            // CDAREAREGISTRO,
            // NRLINHA,
            // INSINCRONIZADO
        // FROM
        // (
            // SELECT
                // CPP.IDPESSOADEPARA,
                // CPP.CDAREAREGISTRO,
                // CPP.NRLINHA,
                // CPP.INSINCRONIZADO
            // FROM
                // CUSTOMER.PESSOAPORTABILIDADE CPP,
                // CUSTOMER.PESSOAPORTABILIDADEHIST CPPH,
                // APOIO.ACAOPORTABILIDADE AAP,
                // LINHA.LINHABASE LB,
                // LINHA.LINHATELEFONICA LT,
                // APOIO.AREAREGISTRO AR,
                // APOIO.TIPOLINHA TL
            // WHERE
                // CPPH.CDAREAREGISTRO = CPP.CDAREAREGISTRO
            // AND CPP.CDAREAREGISTRO = AR.CDAREAREGISTRO 
            // AND CPPH.NRLINHA = CPP.NRLINHA
            // AND CPPH.DSACAOPORTABILIDADE = AAP.DSACAOPORTABILIDADE
            // AND AAP.DSACAOPORTABILIDADE IN ('Aguardando Habilitação com Autorização'
                                           // ,'Aguardando Habilitação'
                                           // ,'Aguardando Habilitação com Autorização Negada'
										   // ,'Concluído')
            // AND CPP.INSINCRONIZADO IN (0,2) //0=inclusão, 2=Alteração de dados de linha já cadastrada
            // AND CPP.NRLINHA = LB.NRLINHA
            // AND AR.IDAREAREGISTRO = LB.IDAREAREGISTRO
            // AND LB.IDLINHABASE = LT.IDLINHABASE
            // AND NVL(LT.DTEXPIRACAO,SYSDATE+1) > SYSDATE
            // AND LT.IDTIPOLINHA = TL.IDTIPOLINHA
            // AND TL.SGTIPOLINHA IN ('PRÉ','PRÉCHIP')
            // ORDER BY
                // CPPH.DTULTIMAALTERACAO
        // );
    
    EXEC SQL DECLARE cursorPortIn CURSOR FOR
      select
          ABC.IDPESSOADEPARA,
          ABC.CDAREAREGISTRO,
          ABC.NRLINHA,
          ABC.INSINCRONIZADO
        FROM
        (
            SELECT
                CPP.IDPESSOADEPARA,
                CPP.CDAREAREGISTRO,
                CPP.NRLINHA,
                CPP.INSINCRONIZADO
            FROM
              CUSTOMER.PESSOAPORTABILIDADE CPP
          WHERE
              EXISTS
              (
                 SELECT 1 FROM CUSTOMER.PESSOAPORTABILIDADEHIST CPPH WHERE CPPH.DSACAOPORTABILIDADE IN 
                                         ('Aguardando Habilitação com Autorização'
                                         ,'Aguardando Habilitação'
                                         ,'Aguardando Habilitação com Autorização Negada'
                                         ,'Concluído')
                                         AND CPPH.CDAREAREGISTRO = CPP.CDAREAREGISTRO
                                         AND CPPH.NRLINHA = CPP.NRLINHA
              )
              AND CPP.INSINCRONIZADO IN (0,2)      /*   //0=inclusão, 2=Alteração de dados de linha já cadastrada   */
           ) ABC ,
                LINHA.LINHABASE LB,
                LINHA.LINHATELEFONICA LT,
                APOIO.AREAREGISTRO AR,
                APOIO.TIPOLINHA TL
            WHERE
                    ABC.NRLINHA = LB.NRLINHA
                AND AR.CDAREAREGISTRO = ABC.CDAREAREGISTRO
                AND AR.IDAREAREGISTRO = LB.IDAREAREGISTRO
                AND LB.IDLINHABASE = LB.IDLINHABASE
                AND LB.IDLINHABASE = LT.IDLINHABASE
                AND NVL(LT.DTEXPIRACAO,SYSDATE+1) > SYSDATE
                AND LT.IDTIPOLINHA = TL.IDTIPOLINHA
                AND TL.SGTIPOLINHA IN ('PRÉ','PRÉCHIP');
    

    oLog.logDebug("Abrindo cursor...\n");
    EXEC SQL OPEN cursorPortIn;

    memset(&tDadosPublicadosNGIN, 0, sizeof(TDadosPublicadosNGIN));
    memset(&tPessoaLinha, 0, sizeof(TPessoaLinha));
    memset(&tPessoaLinhaHistorico, 0, sizeof(TPessoaLinhaHistorico));
    memset(&tPessoaConta, 0, sizeof(TPessoaConta));

    while(iSignalProcessa == 1) {

        EXEC SQL FETCH cursorPortIn INTO
            :oszIdPessoaDePara,
            :oszCdAreaRegistro,
            :oszNrLinha,
            :oszInSincronizado;

        oLog.logDebug("-------------------------------------------------------------------------");
        sprintf(szAux, "FETCH ->sqlca.sqlcode(%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
        if(sqlca.sqlcode == 1403) {
            break;
        }

        oLog.logDebug(">> Cursor");
        STRCPY_FROM_ORA(szIdPessoaDePara, oszIdPessoaDePara); sprintf(szAux,"szIdPessoaDePara.........[%s]\n", szIdPessoaDePara); oLog.logDebug(szAux);
        STRCPY_FROM_ORA(szCdAreaRegistro, oszCdAreaRegistro); sprintf(szAux,"szCdAreaRegistro.........[%s]\n", szCdAreaRegistro); oLog.logDebug(szAux);
        STRCPY_FROM_ORA(szNrLinha,        oszNrLinha);        sprintf(szAux,"szNrLinha................[%s]\n", szNrLinha);        oLog.logDebug(szAux);
        STRCPY_FROM_ORA(szInSincronizado, oszInSincronizado); sprintf(szAux,"szInSincronizado.........[%s]\n", szInSincronizado); oLog.logDebug(szAux);
        oLog.logDebug("<< Cursor");

        if(buscaDadosPublicados(szCdAreaRegistro, szNrLinha, &tDadosPublicadosNGIN) == false) {
            Sumariza(1, 0, 0);
            continue;
        }

        if ( strcmp(szInSincronizado,"0") == 0 )
        {
            strcpy(tPessoaLinha.szIdTipoRelacionamento, "1"); // Usuário
            strcpy(tPessoaLinha.szIdPessoaDePara, szIdPessoaDePara);
            strcpy(tPessoaLinha.szIdLinhaTelefonica, tDadosPublicadosNGIN.szIdLinhaTelefonica);

            if(inserePessoaLinha(&tPessoaLinha) == false) {
                oLog.logDebug("Erro inserindo usuário em Customer.PessoaLinha");
                Sumariza(0, 0, 1);
                continue;
            }

            strcpy(tPessoaLinha.szIdTipoRelacionamento, "2"); // Cliente
            if(inserePessoaLinha(&tPessoaLinha) == false) {
                oLog.logDebug("Erro inserindo cliente em Customer.PessoaLinha");
                Sumariza(0, 0, 1);
                continue;
            }

            /* Referente a Customer.PessoaLinhaHistorico */
            strcpy(tPessoaLinhaHistorico.szCdAreaRegistro, szCdAreaRegistro);
            strcpy(tPessoaLinhaHistorico.szNrLinha, szNrLinha);
            strcpy(tPessoaLinhaHistorico.szIdTipoRelacionamento, "2"); // Cliente
            strcpy(tPessoaLinhaHistorico.szIdPessoaDePara, szIdPessoaDePara);
            strcpy(tPessoaLinhaHistorico.szIdLinhaTelefonica, tDadosPublicadosNGIN.szIdLinhaTelefonica);
            if(inserePessoaLinhaHistorico(&tPessoaLinhaHistorico) == false) {
                oLog.logDebug("Erro inserindo em Customer.PessoaLinhaHistorico");
                Sumariza(0, 0, 1);
                continue;
            }

            /* Referente a Customer.PessoaConta */
            strcpy(tPessoaConta.szIdTipoRelacionamento, "2"); // Cliente
            strcpy(tPessoaConta.szIdPessoaDePara, szIdPessoaDePara);
            strcpy(tPessoaConta.szIdConta, tDadosPublicadosNGIN.szIdConta);
            if(inserePessoaConta(&tPessoaConta) == false) {
                oLog.logDebug("Erro inserindo em Customer.PessoaConta");
                Sumariza(0, 0, 1);
                continue;
            }
        } // if ( strcmp(szInSincronizado,"0") == 0 )

        if(atualizaPessoaPortabilidade(szIdPessoaDePara) == false) {
            goto finalizaProcess;
        }

        //------------------------------------------
        // Envia XML de efetivação junto ao NGIN
        if(ObtemDadosXml(tDadosPublicadosNGIN.szIdLinhaTelefonica, &tObtemDadosXml) == false) {
            Sumariza(1, 0, 0);
            continue;
        }

        sprintf(szXmlRender, 
            "<msg>"
            "<ProxyOperacao>setCliente</ProxyOperacao>"
            "<usuario>FO</usuario>"
            "<ProxyLinha>%s%s</ProxyLinha>",
            szCdAreaRegistro,
            szNrLinha);

        /* esse sprintf cria a primeira parte do xml que serah concatenado */
        if(!memcmp(tObtemDadosXml.szIdTipoPessoa, "2", 1)) /* Pessoa Juridica */
        {
            sprintf(szXmlTmp,
                "<tipoCliente>%s</tipoCliente>"
                "<nome>%s</nome>",
                tObtemDadosXml.szTipoCliente,
                tObtemDadosXml.szNome);
        }
        else /* Pessoa Fisica ou nao classificada */
        {
            sprintf(szXmlTmp,
                "<tipoCliente>%s</tipoCliente>"
                "<nome>%s</nome>"
                "<confidencial>%s</confidencial>"
                "<dataNascimento>%s</dataNascimento>"
                "<estadoCivil>%s</estadoCivil>"
                "<codSexo>%s</codSexo>",
                tObtemDadosXml.szTipoCliente,
                tObtemDadosXml.szNome,
                tObtemDadosXml.szConfidencial,
                tObtemDadosXml.szDataNascimento,
                tObtemDadosXml.szEstadoCivil,
                tObtemDadosXml.szCodSexo);
        }

        strcat(szXmlRender, szXmlTmp);

        sprintf(szAux, "1.szXmlRender[%s]\n", szXmlRender); oLog.logDebug(szAux);
		int iIgnorada = 0;

        /* esse while cria a segunda parte do xml que serah concatenado */
        while((ptDadosDocumento = BuscaDocumentoPorIdPessoa((char *)&tObtemDadosXml.szIdPessoa)) != NULL)
        {
            // sprintf(szAux, "ptDadosDocumento->szSgTipoDocumento[%s]", ptDadosDocumento->szSgTipoDocumento); oLog.logDebug(szAux);
            // sprintf(szAux, "ptDadosDocumento->szNrDocumento[%s]", ptDadosDocumento->szNrDocumento); oLog.logDebug(szAux);
            // sprintf(szAux, "ptDadosDocumento->szSgOrgaoExpedidor[%s]", ptDadosDocumento->szSgOrgaoExpedidor); oLog.logDebug(szAux);

            if(!memcmp(tObtemDadosXml.szIdTipoPessoa, "1", 1)) /* Pessoa Fisica */
            {
                if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "CPF") ||
                   !strcmp(ptDadosDocumento->szSgTipoDocumento, "FCPF") ||
                   !strcmp(ptDadosDocumento->szSgTipoDocumento, "KLCPF"))
                {
                    sprintf(szXmlTmp,
                        "<CPF>%s</CPF>"
                        "<tipoCPF>D</tipoCPF>",
                        ptDadosDocumento->szNrDocumento);
                }
                else if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "RG"))
                {
                    sprintf(szXmlTmp,
                        "<RG>%s</RG>"
                        "<tipoRG>D</tipoRG>",
                        ptDadosDocumento->szNrDocumento);
                }
                else if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "PAS"))
                {
                    sprintf(szXmlTmp,
                        "<passaporte>%s</passaporte>"
                        "<tipoPassaporte>D</tipoPassaporte>",
                        ptDadosDocumento->szNrDocumento);
                }
                else
                {
                    sprintf(szAux, "PessoaFisica sigla ignorada[%s]", ptDadosDocumento->szSgTipoDocumento); oLog.logDebug(szAux);
                }
            }
            else if(!memcmp(tObtemDadosXml.szIdTipoPessoa, "2", 1)) /* Pessoa Juridica */
            {
                if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "CNPJ") ||
                   !strcmp(ptDadosDocumento->szSgTipoDocumento, "OCNPJ") ||
                   !strcmp(ptDadosDocumento->szSgTipoDocumento, "UCNPJ"))
                {
                    sprintf(szXmlTmp,
                        "<CNPJ>%s</CNPJ>",
                        ptDadosDocumento->szNrDocumento);
                }
                else if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "CNAE"))
                {
                    sprintf(szXmlTmp,
                        "<CNAE>%s</CNAE>",
                        ptDadosDocumento->szNrDocumento);
                }
                else if(!strcmp(ptDadosDocumento->szSgTipoDocumento, "IE"))
                {
                    sprintf(szXmlTmp,
                        "<IE>%s</IE>",
                        ptDadosDocumento->szNrDocumento);

                    iFlagIE=1;
                }
                else
                {
                    sprintf(szAux, "PessoaJuridica sigla ignorada[%s]", ptDadosDocumento->szSgTipoDocumento); oLog.logDebug(szAux);
					iIgnorada = 1;
                }
            }

            // sprintf(szAux, "szXmlTmp[%s]", szXmlTmp); oLog.logDebug(szAux);
			if( iIgnorada == 0)
			{
				strcat(szXmlRender, szXmlTmp);
			}
            sprintf(szAux, "2.szXmlRender[%s]", szXmlRender); oLog.logDebug(szAux);
			sprintf(szAux, "PASSOU 1"); oLog.logDebug(szAux);
			
        }// while((ptDadosDocumento = BuscaDocumentoPorIdPessoa((char *)&tObtemDadosXml.szIdPessoa)) != NULL)

		sprintf(szAux, "PASSOU 2"); oLog.logDebug(szAux);
        /* caso nao tenha IE e seja pessoa juridica */
        if(iFlagIE == 0 && !memcmp(tObtemDadosXml.szIdTipoPessoa, "2", 1)) 
		{
			sprintf(szAux, "PASSOU 3"); oLog.logDebug(szAux);
            strcat(szXmlRender, "<IE>ISENTO</IE>");
        }

		sprintf(szAux, "PASSOU 4"); oLog.logDebug(szAux);
		
        iFlagIE=0;

        
        sprintf(szAux, "tObtemDadosXml.szNmTipoLogradouro[%s]", tObtemDadosXml.szNmTipoLogradouro); oLog.logDebug(szAux);

		sprintf(szAux, "PASSOU 5"); oLog.logDebug(szAux);
		
        memset(szAuxNGIN, 0, sizeof(szAuxNGIN));
        for(iCountLogradouro=0; pszTipoLogFO[iCountLogradouro] != NULL; iCountLogradouro++) {
            if(!strcasecmp(pszTipoLogFO[iCountLogradouro], tObtemDadosXml.szNmTipoLogradouro)) {
                strcpy(szAuxNGIN, pszTipoLogNGIN[iCountLogradouro]);
                break;
            }
        }

        sprintf(szAux, "Logradouro szAuxNGIN[%s]", szAuxNGIN); oLog.logDebug(szAux);
        sprintf(szXmlTmp, "<logradouro>%s</logradouro>", szAuxNGIN);
        strcat(szXmlRender, szXmlTmp);

        /* parte referente a endereco */
        sprintf(szXmlTmp,
            "<endereco>%s</endereco>"
            "<complemento>%s</complemento>"
            "<bairro>%s</bairro>"
            "<CEP>%s</CEP>"
            "<cidade>%s</cidade>"
            "<estado>%s</estado>"
            "<pais>%s</pais>"
            "<numero>%s</numero>",
            tObtemDadosXml.szEndereco,
            tObtemDadosXml.szDsEnderecoComplemento,
            tObtemDadosXml.szNmBairro,
            tObtemDadosXml.szNrCep,
            tObtemDadosXml.szCidade,
            tObtemDadosXml.szEstado,
            tObtemDadosXml.szPais,
            tObtemDadosXml.szNumero);


        strcat(szXmlRender, szXmlTmp);
        /* recoloca a ultima tag retirada no inicio do processo */
        strcat(szXmlRender, "</msg>");
        sprintf(szAux, "3.szXmlRender[%s]", szXmlRender); oLog.logDebug(szAux);

        if(insereFilaSetClientInfo(tDadosPublicadosNGIN.szIdLinhaTelefonica, szXmlRender) == false) {
            oLog.logDebug("Erro no processo de insercao");
            Sumariza(1, 0, 0);
            continue;
        }

        oLog.logDebug("Efetuando commit na BD...");
        EXEC SQL COMMIT;
        oLog.logDebug("Commit efetuado com sucesso na BD...");

        Sumariza(0, 1, 0);
    } // while

    Sumariza(0, 0, 0); // exibe sumario

    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE cursorPortIn;

    oLog.logDebug("Finalizando conexao TUXEDO...\n");
    tpterm();

    oLog.logDebug("Desconectando da BD...\n");
    DBDesconect();

    oLog.logDebug("Processamento encerrado com sucesso...\n");
    oLog.logDebug("<<<finalizaCadastroPortIn\n");

    return 0;

    sqlError:
        EXEC SQL ROLLBACK;
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;

    /* Tratamento de erro de processamento */
    finalizaProcess:

        EXEC SQL ROLLBACK;

        oLog.logDebug("Finalizando processo...\n");
        oLog.logDebug("Fechando cursor...\n");
        EXEC SQL CLOSE cursorPortIn;

        oLog.logDebug("Finalizando conexao TUXEDO...\n");
        tpterm();

        oLog.logDebug("Desconectando da BD...\n");
        DBDesconect();

        oLog.logDebug("<<<finalizaCadastroPortIn\n");
        return -1;
}

/************************************************************************************************************/
void Sumariza(int iQtdTotalRegNaoPublicado, int iQtdTotalRegOK, int iQtdTotalRegErro)
{
    static int _iQtdTotalRegOK=0;
    static int _iQtdTotalRegErro=0;
    static int _iQtdTotalRegNaoPublicado=0;
    static int _iQtdTotalReg=0;
    static char szDataHoraAux[19 + 1];
    static int iFlag=1;

    if(!iQtdTotalRegOK && !iQtdTotalRegErro && !iQtdTotalRegNaoPublicado) {

        if(iFlag) {
            sprintf(szDataHoraAux, "%.2s/%.2s/%.4s %.2s:%.2s:%.2s",
                                    szDataHoraGlobal+6,
                                    szDataHoraGlobal+4,
                                    szDataHoraGlobal,
                                    szDataHoraGlobal+8,
                                    szDataHoraGlobal+10,
                                    szDataHoraGlobal+12);
            iFlag=0;
        }

        sprintf(szAux, "***************** START  %s  **********************\n", szDataHoraAux); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros nao publicados.................(%06d)\n", _iQtdTotalRegNaoPublicado); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados com sucesso........(%06d)\n", _iQtdTotalRegOK); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados com erro...........(%06d)\n", _iQtdTotalRegErro); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados....................(%06d)\n", _iQtdTotalReg); oLog.logDebug(szAux);
        sprintf(szAux, "********************************************************************\n"); oLog.logDebug(szAux);

        return;
    }

    _iQtdTotalReg++;
    if(iQtdTotalRegOK)              _iQtdTotalRegOK++;
    if(iQtdTotalRegErro)            _iQtdTotalRegErro++;
    if(iQtdTotalRegNaoPublicado)    _iQtdTotalRegNaoPublicado++;
}

/************************************************************************************************************/
char *ObtemDataHora(void)
{
    struct tm *ptTime;
    time_t tTimeNow;
    static char szDataHora[14 + 1];

    time(&tTimeNow);
    ptTime=localtime(&tTimeNow);
    sprintf(szDataHora, "%04d%02d%02d%02d%02d%02d",
                        ptTime->tm_year + 1900,
                        ptTime->tm_mon + 1,
                        ptTime->tm_mday,
                        ptTime->tm_hour,
                        ptTime->tm_min,
                        ptTime->tm_sec );

    return szDataHora;
}

/************************************************************************************************************/
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)\n", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR) {
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}

/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal\n");
    sprintf(szAux, "iSig(%d)\n", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM) {
        oLog.logInformation("Finalizando processamento via sinal....\n");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal\n");
}

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf, char *pszExecName)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[81];
    char szDivArq[256];
    char szDivPre[21];
    char szCfgName[256 + 1];

    oLog.logDebug("Obtendo parametros de configuracao...\n");

    /* Zera variáveis */
    memset(ptParamConf, 0, sizeof(TParamConf));
    memset(szLinha, 0, sizeof(szLinha));
    memset(szDivArq, 0, sizeof(szDivArq));
    memset(szDivPre, 0, sizeof(szDivPre));


    /* Monta o nome do arquivo cfg */
    sprintf(szCfgName, "%s.cfg", pszExecName);
    
    sprintf(szAux, "Arquivo de configuracao[%s]\n", szCfgName); oLog.logInformation(szAux);

    /* Define o arquivo de configuração */
    mfConfig.setPath(szCfgName);

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir()) {
        oLog.logError("Erro abrindo arquivo de configuração!\n");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, 20);
        }

        memset(szLinha,  0, sizeof(szLinha));
        memset(szDivPre, 0, sizeof(szDivPre));
        memset(szDivArq, 0, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]\n", ptParamConf->szPws); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]\n", ptParamConf->szUsr); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]\n", ptParamConf->szInst); oLog.logInformation(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0)
    {
        oLog.logError("Dados incompletos!\n");
        return -1;
    }

    oLog.logDebug("Parametros de configuracao obtidos com sucesso...\n");
    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect\n");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect\n");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]\n");
    return -1;
}

/************************************************************************************************************/
void DBDesconect(void)
{
    oLog.logInformation(">>>DBDesconect\n");

    EXEC SQL WHENEVER SQLERROR GOTO Error;
    // EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDesconect\n");
    return;

Error:
    sprintf(szAux, "Erro! sqlca.sqlcode = %i\n", sqlca.sqlcode); oLog.logError(szAux);
    return;
}

/****************************************************************************************/
bool inserePessoaLinha(TPessoaLinha *ptPessoaLinha)
{
    oLog.logDebug(">> inserePessoaLinha");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinha[21];
        VARCHAR oszIdTipoRelacionamento[21];
        VARCHAR oszIdPessoaDePara[21];
        VARCHAR oszIdLinhaTelefonica[21];
        VARCHAR oszIdUsuarioAlteracao[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdTipoRelacionamento,  ptPessoaLinha->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara,        ptPessoaLinha->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica,     ptPessoaLinha->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao,    ID_USUARIOALTERACAO);

    //EXEC SQL SELECT customer.pessoalinhasq.NEXTVAL INTO :oszIdPessoaLinha FROM DUAL;
    sprintf(szAux, "oszIdTipoRelacionamento..[%.*s]\n", oszIdTipoRelacionamento.len, oszIdTipoRelacionamento.arr); oLog.logDebug(szAux);
    sprintf(szAux, "oszIdPessoaDePara........[%.*s]\n", oszIdPessoaDePara.len,       oszIdPessoaDePara.arr);       oLog.logDebug(szAux);
    sprintf(szAux, "oszIdLinhaTelefonica.....[%.*s]\n", oszIdLinhaTelefonica.len,    oszIdLinhaTelefonica.arr);    oLog.logDebug(szAux);
    sprintf(szAux, "oszIdUsuarioAlteracao....[%.*s]\n", oszIdUsuarioAlteracao.len,   oszIdUsuarioAlteracao.arr);   oLog.logDebug(szAux);

    EXEC SQL
    UPDATE 
        CUSTOMER.PESSOALINHA
    SET 
        DTPESSOALINHA = SYSDATE ,
        IDPESSOADEPARA = :oszIdPessoaDePara ,
        IDUSUARIOALTERACAO = :oszIdUsuarioAlteracao ,
        DTULTIMAALTERACAO = SYSDATE
    WHERE
       IDTIPORELACIONAMENTO = :oszIdTipoRelacionamento
    AND
       IDLINHATELEFONICA = :oszIdLinhaTelefonica;
    
    if( sqlca.sqlerrd[2] == 0 )
    {
        oLog.logDebug("vai obter sequence...");
        EXEC SQL SELECT pessoalinhasq.NEXTVAL INTO :oszIdPessoaLinha FROM DUAL;
        oLog.logDebug("obteve sequence...");

        sprintf(szAux, "oszIdPessoaLinha.........[%.*s]\n", oszIdPessoaLinha.len,        oszIdPessoaLinha.arr);        oLog.logDebug(szAux);

        EXEC SQL 
        INSERT INTO CUSTOMER.PESSOALINHA
        ( 
            IDPESSOALINHA,
            DTPESSOALINHA,
            IDTIPORELACIONAMENTO,
            IDPESSOADEPARA,
            IDLINHATELEFONICA,
            IDUSUARIOALTERACAO,
            DTULTIMAALTERACAO
        )
        VALUES
        (
            :oszIdPessoaLinha,
            SYSDATE,
            :oszIdTipoRelacionamento,
            :oszIdPessoaDePara,
            :oszIdLinhaTelefonica,
            :oszIdUsuarioAlteracao,
            SYSDATE
        );
    }
    
    oLog.logDebug("<< inserePessoaLinha");
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;
}

/****************************************************************************************/
bool inserePessoaLinhaHistorico(TPessoaLinhaHistorico *ptPessoaLinhaHistorico)
{
    oLog.logDebug(">> inserePessoaLinhaHistorico");

    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaLinhaHistorico[21];
        VARCHAR oszCdAreaRegistro[21];
        VARCHAR oszNrLinha[21];
        VARCHAR oszIdTipoRelacionamento[21];
        VARCHAR oszIdPessoaDePara[21];
        VARCHAR oszIdLinhaTelefonica[21];
        VARCHAR oszIdUsuarioAlteracao[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszCdAreaRegistro,            ptPessoaLinhaHistorico->szCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha,                   ptPessoaLinhaHistorico->szNrLinha);
    STRCPY_TO_ORA(oszIdTipoRelacionamento,      ptPessoaLinhaHistorico->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara,            ptPessoaLinhaHistorico->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdLinhaTelefonica,         ptPessoaLinhaHistorico->szIdLinhaTelefonica);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao,        ID_USUARIOALTERACAO);

    oLog.logDebug("vai obter sequence...");
    //EXEC SQL SELECT customer.pessoalinhahistoricosq.NEXTVAL INTO :oszIdPessoaLinhaHistorico FROM DUAL;
    EXEC SQL SELECT pessoalinhahistoricosq.NEXTVAL INTO :oszIdPessoaLinhaHistorico FROM DUAL;
    oLog.logDebug("obteve sequence...");

    sprintf(szAux, "oszIdPessoaLinhaHistorico[%.*s]\n", oszIdPessoaLinhaHistorico.len,      oszIdPessoaLinhaHistorico.arr); oLog.logDebug(szAux);
    sprintf(szAux, "oszCdAreaRegistro........[%.*s]\n", oszCdAreaRegistro.len,              oszCdAreaRegistro.arr);         oLog.logDebug(szAux);
    sprintf(szAux, "oszNrLinha...............[%.*s]\n", oszNrLinha.len,                     oszNrLinha.arr);                oLog.logDebug(szAux);
    sprintf(szAux, "oszIdTipoRelacionamento..[%.*s]\n", oszIdTipoRelacionamento.len,        oszIdTipoRelacionamento.arr);   oLog.logDebug(szAux);
    sprintf(szAux, "oszIdPessoaDePara........[%.*s]\n", oszIdPessoaDePara.len,              oszIdPessoaDePara.arr);         oLog.logDebug(szAux);
    sprintf(szAux, "oszIdLinhaTelefonica.....[%.*s]\n", oszIdLinhaTelefonica.len,           oszIdLinhaTelefonica.arr);      oLog.logDebug(szAux);
    sprintf(szAux, "oszIdUsuarioAlteracao....[%.*s]\n", oszIdUsuarioAlteracao.len,          oszIdUsuarioAlteracao.arr);     oLog.logDebug(szAux);

    EXEC SQL INSERT INTO CUSTOMER.PESSOALINHAHISTORICO
        ( 
            IDPESSOALINHAHISTORICO,
            DTRELACIONAMENTO,
            CDAREAREGISTRO,
            NRLINHA,
            IDTIPORELACIONAMENTO,
            IDPESSOADEPARA,
            IDLINHATELEFONICA,
            IDUSUARIOALTERACAO,
            DTULTIMAALTERACAO
        )
        VALUES
        (
            :oszIdPessoaLinhaHistorico,
            SYSDATE,
            :oszCdAreaRegistro,
            :oszNrLinha,
            :oszIdTipoRelacionamento,
            :oszIdPessoaDePara,
            :oszIdLinhaTelefonica,
            :oszIdUsuarioAlteracao,
            SYSDATE
        );


    oLog.logDebug("<< inserePessoaLinhaHistorico");
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;
}

/****************************************************************************************/
bool inserePessoaConta(TPessoaConta *ptPessoaConta)
{
    oLog.logDebug(">> inserePessoaConta");

    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaConta[21];
        VARCHAR oszIdTipoRelacionamento[21];
        VARCHAR oszIdPessoaDePara[21];
        VARCHAR oszIdConta[21];
        VARCHAR oszIdUsuarioAlteracao[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;

    STRCPY_TO_ORA(oszIdTipoRelacionamento,      ptPessoaConta->szIdTipoRelacionamento);
    STRCPY_TO_ORA(oszIdPessoaDePara,            ptPessoaConta->szIdPessoaDePara);
    STRCPY_TO_ORA(oszIdConta,                   ptPessoaConta->szIdConta);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao,        ID_USUARIOALTERACAO);

    sprintf(szAux, "oszIdTipoRelacionamento..[%.*s]\n", oszIdTipoRelacionamento.len,    oszIdTipoRelacionamento.arr);   oLog.logDebug(szAux);
    sprintf(szAux, "oszIdPessoaDePara........[%.*s]\n", oszIdPessoaDePara.len,          oszIdPessoaDePara.arr);         oLog.logDebug(szAux);
    sprintf(szAux, "oszIdConta...............[%.*s]\n", oszIdConta.len,                 oszIdConta.arr);                oLog.logDebug(szAux);
    sprintf(szAux, "oszIdUsuarioAlteracao....[%.*s]\n", oszIdUsuarioAlteracao.len,      oszIdUsuarioAlteracao.arr);     oLog.logDebug(szAux);

    EXEC SQL
    UPDATE CUSTOMER.PESSOACONTA
    SET    
       DTPESSOACONTA = SYSDATE ,
       DTEXPIRACAO = NULL ,
       IDUSUARIOALTERACAO = :oszIdUsuarioAlteracao ,
       DTULTIMAALTERACAO = SYSDATE
    WHERE
       IDPESSOADEPARA = :oszIdPessoaDePara 
    AND
       IDCONTA = :oszIdConta
    AND
       IDTIPORELACIONAMENTO = :oszIdTipoRelacionamento ;

    if( sqlca.sqlerrd[2] == 0 )
    {
        oLog.logDebug("vai obter sequence...");
        //EXEC SQL SELECT customer.pessoacontasq.NEXTVAL INTO :oszIdPessoaConta FROM DUAL;
        EXEC SQL SELECT pessoacontasq.NEXTVAL INTO :oszIdPessoaConta FROM DUAL;
        oLog.logDebug("obteve sequence...");

        sprintf(szAux, "oszIdPessoaConta.........[%.*s]\n", oszIdPessoaConta.len,           oszIdPessoaConta.arr);          oLog.logDebug(szAux);

        EXEC SQL INSERT INTO CUSTOMER.PESSOACONTA
        ( 
            IDPESSOACONTA,
            IDTIPORELACIONAMENTO,
            IDPESSOADEPARA,
            IDCONTA,
            DTPESSOACONTA,
            DTEXPIRACAO,
            IDUSUARIOALTERACAO,
            DTULTIMAALTERACAO
        )
        VALUES
        (
            :oszIdPessoaConta,
            :oszIdTipoRelacionamento,
            :oszIdPessoaDePara,
            :oszIdConta,
            SYSDATE,
            NULL,
            :oszIdUsuarioAlteracao,
            SYSDATE
        );
    }


    oLog.logDebug("<< inserePessoaConta");
    return true;

    erro:
        EXEC SQL ROLLBACK;
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
bool buscaDadosPublicados(char *pszCdAreaRegistro, char *pszNrLinha, TDadosPublicadosNGIN *ptDadosPublicadosNGIN)
{
    oLog.logDebug(">> buscaDadosPublicados");
    
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[21];
        VARCHAR oszIdConta[21];
        
        VARCHAR oszCdAreaRegistro[21];
        VARCHAR oszNrLinha[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;


    STRCPY_TO_ORA(oszCdAreaRegistro, pszCdAreaRegistro);
    STRCPY_TO_ORA(oszNrLinha, pszNrLinha);

    sprintf(szAux, "oszCdAreaRegistro .......[%.*s]\n", oszCdAreaRegistro.len,  oszCdAreaRegistro.arr); oLog.logDebug(szAux);
    sprintf(szAux, "oszNrLinha ..............[%.*s]\n", oszNrLinha.len,         oszNrLinha.arr);        oLog.logDebug(szAux);


    EXEC SQL
        SELECT
            LLT.IDLINHATELEFONICA,
            CLC.IDCONTA
        INTO
            :oszIdLinhaTelefonica,
            :oszIdConta
        FROM
            LINHA.LINHABASE LLB,
            LINHA.LINHATELEFONICA LLT,
            CUSTOMER.LINHACONTA CLC,
            APOIO.AREAREGISTRO AAR
        WHERE
            AAR.IDAREAREGISTRO = LLB.IDAREAREGISTRO
        AND
            LLB.IDLINHABASE = LLT.IDLINHABASE
        AND
            LLT.IDLINHATELEFONICA = CLC.IDLINHATELEFONICA
        AND
            AAR.CDAREAREGISTRO = :oszCdAreaRegistro
        AND
            LLB.NRLINHA = :oszNrLinha;


    STRCPY_FROM_ORA(ptDadosPublicadosNGIN->szIdLinhaTelefonica, oszIdLinhaTelefonica);
    STRCPY_FROM_ORA(ptDadosPublicadosNGIN->szIdConta,           oszIdConta);

    sprintf(szAux, "oszIdLinhaTelefonica ....[%.*s]\n", oszIdLinhaTelefonica.len,    oszIdLinhaTelefonica.arr);  oLog.logDebug(szAux);
    sprintf(szAux, "oszIdConta ..............[%.*s]\n", oszIdConta.len,              oszIdConta.arr);            oLog.logDebug(szAux);
    
    oLog.logDebug("<< buscaDadosPublicados");
    return true;

    naoexiste:
        sprintf(szAux, "Chave pesquisada nao encontrada[%s %s]\n", pszCdAreaRegistro, pszNrLinha); oLog.logDebug(szAux);
        return false;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
bool atualizaPessoaPortabilidade(char *pszIdPessoaDePara)
{
    oLog.logDebug(">> atualizaPessoaPortabilidade");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoaDePara[21];
        VARCHAR oszIdUsuarioAlteracao[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdPessoaDePara, pszIdPessoaDePara);
    STRCPY_TO_ORA(oszIdUsuarioAlteracao, ID_USUARIOALTERACAO);

    sprintf(szAux, "oszIdPessoaDePara........[%.*s]\n", oszIdPessoaDePara.len,      oszIdPessoaDePara.arr);     oLog.logDebug(szAux);
    sprintf(szAux, "oszIdUsuarioAlteracao....[%.*s]\n", oszIdUsuarioAlteracao.len,  oszIdUsuarioAlteracao.arr); oLog.logDebug(szAux);

    EXEC SQL
        UPDATE
            CUSTOMER.PESSOAPORTABILIDADE
        SET
            INSINCRONIZADO = 1,
            DTULTIMAALTERACAO = SYSDATE,
            IDUSUARIOALTERACAO =:oszIdUsuarioAlteracao
        WHERE
            IDPESSOADEPARA = :oszIdPessoaDePara;

    oLog.logDebug("<< atualizaPessoaPortabilidade");
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;

    naoexiste:
        sprintf(szAux, "IdPessoaDePara nao encontrado[%s]\n", pszIdPessoaDePara); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
bool insereFilaSetClientInfo(char *pszIdLinhaTelefonica, char *pszXml)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdLinhaTelefonica[21];
        VARCHAR oszIdFilaSetClientInfo[21];
        VARCHAR oszXml[10000];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    sprintf(szAux, ">> insereFilaSetClientInfo\n"); oLog.logDebug(szAux);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR goto erro;
    
    STRCPY_TO_ORA(oszIdLinhaTelefonica, pszIdLinhaTelefonica);
    STRCPY_TO_ORA(oszXml, pszXml);

    EXEC SQL
    UPDATE INFRA.FILASETCLIENTINFO
    SET XML1 = :oszXml
    WHERE IDLINHATELEFONICA = :oszIdLinhaTelefonica ;
    if( sqlca.sqlerrd[2] == 0 )
    {
        oLog.logDebug("vai obter sequence...");
        //EXEC SQL SELECT infra.filasetclientinfosq.NEXTVAL INTO :oszIdFilaSetClientInfo FROM DUAL;
        EXEC SQL SELECT filasetclientinfosq.NEXTVAL INTO :oszIdFilaSetClientInfo FROM DUAL;
        oLog.logDebug("obteve sequence...");


        EXEC SQL
        INSERT INTO INFRA.FILASETCLIENTINFO
        (
            IDFILASETCLIENTINFO,
            IDLINHATELEFONICA,
            XML1
        )
        VALUES
        (
            :oszIdFilaSetClientInfo,
            :oszIdLinhaTelefonica,
            :oszXml
        );
    }

    sprintf(szAux, "<< insereFilaSetClientInfo <OK>\n", sqlca.sqlcode); oLog.logDebug(szAux);
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)[%.*s]\n", sqlca.sqlcode, (sqlca.sqlerrm.sqlerrml - 1), sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
bool ObtemDadosXml(char *pszIdLinhaTelefonica, TObtemDadosXml *ptObtemDadosXml)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char * pIdLinhaTelefonica = pszIdLinhaTelefonica;
        
        VARCHAR oszIdLinhaTelefonica[40];

        VARCHAR oszIdTipoPessoa[40];
        VARCHAR oszIdPessoa[40];
        VARCHAR oszTipoCliente[8];
        VARCHAR oszNome[255];
        VARCHAR oszConfidencial[8];
        VARCHAR oszDataNascimento[32];
        VARCHAR oszEstadoCivil[8];
        VARCHAR oszCodSexo[8];
        VARCHAR oszNmTipoLogradouro[255];
        VARCHAR oszEndereco[512];
        VARCHAR oszDsEnderecoComplemento[255];
        VARCHAR oszNmBairro[255];
        VARCHAR oszNrCep[255];
        VARCHAR oszCidade[255];
        VARCHAR oszEstado[32];
        VARCHAR oszPais[8];
        VARCHAR oszNumero[255];

        short oiIdTipoPessoa = 0;
        short oiIdPessoa = 0;
        short oiTipoCliente = 0;
        short oiNome = 0;
        short oiConfidencial = 0;
        short oiDataNascimento = 0;
        short oiEstadoCivil = 0;
        short oiCodSexo = 0;
        short oiNmTipoLogradouro = 0;
        short oiEndereco = 0;
        short oiDsEnderecoComplemento = 0;
        short oiNmBairro = 0;
        short oiNrCep = 0;
        short oiCidade = 0;
        short oiEstado = 0;
        short oiPais = 0;
        short oiNumero = 0;
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    sprintf(szAux, ">> ObtemDadosXml()\n"); oLog.logDebug(szAux);
    sprintf(szAux, "pszIdLinhaTelefonica[%s]\n", pszIdLinhaTelefonica); oLog.logDebug(szAux);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdLinhaTelefonica, pszIdLinhaTelefonica);
    
    
    sprintf(szAux, "pIdLinhaTelefonica [%s]\n", pIdLinhaTelefonica); oLog.logDebug(szAux);

    EXEC SQL
        SELECT
            IDTIPOPESSOA,
            IDPESSOA,
            TIPOCLIENTE,
            NOME,
            CONFIDENCIAL,
            DATANASCIMENTO,
            ESTADOCIVIL,
            CODSEXO,
            NMTIPOLOGRADOURO,
            ENDERECO,
            DSENDERECOCOMPLEMENTO,
            NMBAIRRO,
            NRCEP,
            CIDADE,
            ESTADO,
            PAIS,
            NUMERO
        INTO
            :oszIdTipoPessoa:oiIdTipoPessoa,
            :oszIdPessoa:oiIdPessoa,
            :oszTipoCliente:oiTipoCliente,
            :oszNome:oiNome,
            :oszConfidencial:oiConfidencial,
            :oszDataNascimento:oiDataNascimento,
            :oszEstadoCivil:oiEstadoCivil,
            :oszCodSexo:oiCodSexo,
            :oszNmTipoLogradouro:oiNmTipoLogradouro,
            :oszEndereco:oiEndereco,
            :oszDsEnderecoComplemento:oiDsEnderecoComplemento,
            :oszNmBairro:oiNmBairro,
            :oszNrCep:oiNrCep,
            :oszCidade:oiCidade,
            :oszEstado:oiEstado,
            :oszPais:oiPais,
            :oszNumero:oiNumero
        FROM
        (
                SELECT
                    CP.IDTIPOPESSOA,
                    CP.IDPESSOA,
                    DECODE(ATP.IDTIPOPESSOA, 1, 'P', DECODE(ATP.IDTIPOPESSOA, 2, 'E', '')) AS TIPOCLIENTE,
                    CP.NMPESSOA AS NOME,
                    'N' AS CONFIDENCIAL,
                    TO_CHAR(NVL(CPF.DTNASCIMENTO, ''), 'DD/MM/YYYY') AS DATANASCIMENTO,
                    DECODE(CPF.IDESTADOCIVIL, 1, 'S', DECODE(CPF.IDESTADOCIVIL, 2, 'C', DECODE(CPF.IDESTADOCIVIL, 4, 'V', DECODE(CPF.IDESTADOCIVIL, 5, 'D', '')))) AS ESTADOCIVIL,
                    DECODE(CPF.IDSEXO, 1, 'M', DECODE(CPF.IDSEXO, 2, 'F', '')) AS CODSEXO,
                    CPE.NMTIPOLOGRADOURO AS NMTIPOLOGRADOURO,
                    CPE.NMTIPOLOGRADOURO || ' ' || CPE.NMTITULOLOGRADOURO || ' ' || CPE.NMLOGRADOURO AS ENDERECO,
                    CPE.DSENDERECOCOMPLEMENTO AS DSENDERECOCOMPLEMENTO,
                    CPE.NMBAIRRO AS NMBAIRRO,
                    CPE.NRCEP AS NRCEP,
                    CPE.NMMUNICIPIO AS CIDADE,
                    CPE.IDUF AS ESTADO,
                    'BRA' AS PAIS,
                    CPE.NRENDERECO AS NUMERO
                FROM
                    CUSTOMER.PESSOA CP,
                    CUSTOMER.PESSOADEPARA CPDP,
                    CUSTOMER.PESSOALINHAHISTORICO CPLH,
                    LINHA.LINHATELEFONICA LLT,
                    CUSTOMER.PESSOAFISICA CPF,
                    CUSTOMER.PESSOAENDERECO CPE,
                    APOIO.TIPOPESSOA ATP,
                    APOIO.ESTADOCIVIL AEC,
                    APOIO.SEXO ASEX
                WHERE
                    LLT.IDLINHATELEFONICA = CPLH.IDLINHATELEFONICA
                AND
                    CPLH.IDPESSOADEPARA = CPDP.IDPESSOADEPARA
                AND
                    CPDP.IDPESSOA = CP.IDPESSOA
                AND
                    CP.IDPESSOA = CPE.IDPESSOA
                AND
                    CP.IDPESSOA = CPF.IDPESSOA (+)
                AND
                    CPF.IDESTADOCIVIL = AEC.IDESTADOCIVIL (+)
                AND
                    CPF.IDSEXO = ASEX.IDSEXO (+)
                AND
                    CP.IDTIPOPESSOA = ATP.IDTIPOPESSOA
                AND
                    CPLH.IDTIPORELACIONAMENTO = 2
                AND
                    LLT.IDLINHATELEFONICA = :pIdLinhaTelefonica
                ORDER BY
                    CPLH.DTULTIMAALTERACAO DESC
        )
        WHERE ROWNUM <= 1;


    memset(ptObtemDadosXml, 0, sizeof(TObtemDadosXml));
    if(oiIdTipoPessoa != -1)            
    { 
      sprintf(szAux, "*** oszIdTipoPessoa [%.*s]\n", oszIdTipoPessoa.len, (char*)oszIdTipoPessoa.arr ); oLog.logDebug(szAux);
      STRCPY_FROM_ORA(ptObtemDadosXml->szIdTipoPessoa, oszIdTipoPessoa); 
      sprintf(szAux, "ptObtemDadosXml->szIdTipoPessoa [%s]\n", (char*)ptObtemDadosXml->szIdTipoPessoa ); oLog.logDebug(szAux);
    }
    if(oiIdPessoa != -1)                
    { 
      sprintf(szAux, "*** oszIdPessoa [%.*s]\n", oszIdPessoa.len, (char*)oszIdPessoa.arr ); oLog.logDebug(szAux);
      STRCPY_FROM_ORA(ptObtemDadosXml->szIdPessoa, oszIdPessoa); 
      sprintf(szAux, "ptObtemDadosXml->szIdPessoa [%s]\n", (char*)ptObtemDadosXml->szIdPessoa ); oLog.logDebug(szAux);
    }
    if(oiTipoCliente != -1)             { STRCPY_FROM_ORA(ptObtemDadosXml->szTipoCliente, oszTipoCliente); }
    if(oiNome != -1)                    { STRCPY_FROM_ORA(ptObtemDadosXml->szNome, oszNome); }
    if(oiConfidencial != -1)            { STRCPY_FROM_ORA(ptObtemDadosXml->szConfidencial, oszConfidencial); }
    if(oiDataNascimento != -1)          { STRCPY_FROM_ORA(ptObtemDadosXml->szDataNascimento, oszDataNascimento); }
    if(oiEstadoCivil != -1)             { STRCPY_FROM_ORA(ptObtemDadosXml->szEstadoCivil, oszEstadoCivil); }
    if(oiCodSexo != -1)                 { STRCPY_FROM_ORA(ptObtemDadosXml->szCodSexo, oszCodSexo); }
    if(oiNmTipoLogradouro != -1)        { STRCPY_FROM_ORA(ptObtemDadosXml->szNmTipoLogradouro, oszNmTipoLogradouro); }
    if(oiEndereco != -1)                { STRCPY_FROM_ORA(ptObtemDadosXml->szEndereco, oszEndereco); }
    if(oiDsEnderecoComplemento != -1)   { STRCPY_FROM_ORA(ptObtemDadosXml->szDsEnderecoComplemento, oszDsEnderecoComplemento); }
    if(oiNmBairro != -1)                { STRCPY_FROM_ORA(ptObtemDadosXml->szNmBairro, oszNmBairro); }
    if(oiNrCep != -1)                   { STRCPY_FROM_ORA(ptObtemDadosXml->szNrCep, oszNrCep); }
    if(oiCidade != -1)                  { STRCPY_FROM_ORA(ptObtemDadosXml->szCidade, oszCidade); }
    if(oiEstado != -1)                  { STRCPY_FROM_ORA(ptObtemDadosXml->szEstado, oszEstado); }
    if(oiPais != -1)                    { STRCPY_FROM_ORA(ptObtemDadosXml->szPais, oszPais); }
    if(oiNumero != -1)                  { STRCPY_FROM_ORA(ptObtemDadosXml->szNumero, oszNumero); }

//    sprintf(szAux, "ptObtemDadosXml->szIdTipoPessoa[%s]\n", ptObtemDadosXml->szIdTipoPessoa); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szIdPessoa[%s]\n", ptObtemDadosXml->szIdPessoa); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szTipoCliente[%s]\n", ptObtemDadosXml->szTipoCliente); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szNome[%s]\n", ptObtemDadosXml->szNome); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szConfidencial[%s]\n", ptObtemDadosXml->szConfidencial); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szDataNascimento[%s]\n", ptObtemDadosXml->szDataNascimento); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szEstadoCivil[%s]\n", ptObtemDadosXml->szEstadoCivil); oLog.logDebug(szAux);
//    sprintf(szAux, "ptObtemDadosXml->szCodSexo[%s]\n", ptObtemDadosXml->szCodSexo); oLog.logDebug(szAux);

    sprintf(szAux, "<< ObtemDadosXml()\n"); oLog.logDebug(szAux);
    return true;

    erro:
        sprintf(szAux, "Finalizando ObtemDadosXml com erro\n"); oLog.logDebug(szAux);
        sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;

    naoexiste:
        sprintf(szAux, "IdLinhaTelefonica nao encontrado[%s]\n", pszIdLinhaTelefonica); oLog.logDebug(szAux);
        return false;
}

/*******************************************************************************************************/
void controleAlocacao(void)
{
    giQtdElementosAlocados=10;
    giQtdElementosObtidos=0;

//    sprintf(szAux, "giQtdElementosAlocados(%d)", giQtdElementosAlocados); oLog.logDebug(szAux);
//    sprintf(szAux, "sizeof(TDadosDocumento)(%d)", sizeof(TDadosDocumento)); oLog.logDebug(szAux);

    if((gptDadosDocumento = (TDadosDocumento *) malloc((sizeof(TDadosDocumento) * (giQtdElementosAlocados)))) == NULL ) {
        sprintf(szAux, "13E0001", "Erro alocando memoria!");
        exit(-1);
    }
//    sprintf(szAux, "Memoria alocada gptDadosDocumento (%p)", gptDadosDocumento); oLog.logDebug(szAux);
}

/*******************************************************************************************************/
TDadosDocumento *BuscaDocumentoPorIdPessoa(char *pszIdPessoa)
{
    static int iFlag=0;
    static TDadosDocumento tDadosDocumentoAux;
    static TDadosDocumento *ptDadosDocumentoAux;
    static int iCount=0;

    sprintf(szAux, "BuscaDocumentoPorIdPessoa()"); oLog.logDebug(szAux);
    sprintf(szAux, "pszIdPessoa[%s]", pszIdPessoa); oLog.logDebug(szAux);

    if(iFlag == 0) 
	{
		sprintf(szAux, "iFlag == 0"); oLog.logDebug(szAux);
        controleAlocacao();
        proCBuscaDocumentoPorIdPessoa(pszIdPessoa);
        ptDadosDocumentoAux=gptDadosDocumento;
        iFlag=1;
    }

//    sprintf(szAux, "gptDadosDocumento(%p)ptDadosDocumentoAux(%p)", gptDadosDocumento, ptDadosDocumentoAux); oLog.logDebug(szAux);
//    sprintf(szAux, "giQtdElementosAlocados(%d)giQtdElementosObtidos(%d)iCount(%d)", giQtdElementosAlocados, giQtdElementosObtidos, iCount); oLog.logDebug(szAux);

    if(iCount < giQtdElementosObtidos)
    {
        sprintf(szAux, "BuscaDocumentoPorIdPessoa() <NOT NULL>"); oLog.logDebug(szAux);
		
        memcpy(&tDadosDocumentoAux, ptDadosDocumentoAux, sizeof(TDadosDocumento));
        iCount++;
        ptDadosDocumentoAux++;

		sprintf(szAux, "iCount[%d]", iCount); oLog.logDebug(szAux);			
		sprintf(szAux, "giQtdElementosObtidos[%d]", giQtdElementosObtidos); oLog.logDebug(szAux);			
		
        return &tDadosDocumentoAux;
    }
    else
    {
        // sprintf(szAux, "Desalocando memoria ->gptDadosDocumento(%p)", gptDadosDocumento); oLog.logDebug(szAux);
        sprintf(szAux, "BuscaDocumentoPorIdPessoa() <NULL>"); oLog.logDebug(szAux);
		if( gptDadosDocumento != NULL )
		{
			sprintf(szAux, "gptDadosDocumento IS NOT NULL"); oLog.logDebug(szAux);
			free(gptDadosDocumento);
			gptDadosDocumento=NULL;
		}
		else
		{
			sprintf(szAux, "gptDadosDocumento IS NULL"); oLog.logDebug(szAux);
		}

        iFlag=0;
        iCount=0;
        giQtdElementosObtidos=0;
		
		sprintf(szAux, "iCount[%d]", iCount); oLog.logDebug(szAux);			
		sprintf(szAux, "giQtdElementosObtidos[%d]", giQtdElementosObtidos); oLog.logDebug(szAux);			

        return NULL;
    }
}

/*************************************************************************************/
bool proCBuscaDocumentoPorIdPessoa(char *pszIdPessoa)
{
    struct sqlca sqlca;
    int iCount2;
    TDadosDocumento *ptDadosDocumentoAux;


    sprintf(szAux, "proCBuscaDocumentoPorIdPessoa()"); oLog.logDebug(szAux);
    sprintf(szAux, "pszIdPessoa[%s]", pszIdPessoa); oLog.logDebug(szAux);

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdPessoa[25];

        VARCHAR oszSgTipoDocumento[255];
        VARCHAR oszNrDocumento[255];
        VARCHAR oszSgOrgaoExpedidor[255];

        short iSgTipoDocumento;
        short iNrDocumento;
        short iSgOrgaoExpedidor;
    EXEC SQL END DECLARE SECTION;


    STRCPY_TO_ORA(oszIdPessoa, pszIdPessoa);

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND DO break;

    EXEC SQL DECLARE
        CursorBuscaDocumentoPorIdPessoa CURSOR FOR
            SELECT
              DECODE(TIPODOCUMENTO.SGTIPODOCUMENTO,'IF','IE',DECODE(TIPODOCUMENTO.SGTIPODOCUMENTO,'IM','IE',TIPODOCUMENTO.SGTIPODOCUMENTO)) AS SGTIPODOCUMENTO,
              DOCUMENTO.NRDOCUMENTO,
              DOCUMENTO.SGORGAOEXPEDIDOR
            FROM
              CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
              CUSTOMER.DOCUMENTO DOCUMENTO,
              APOIO.TIPODOCUMENTO TIPODOCUMENTO
            WHERE
              DOCUMENTO.IDDOCUMENTO = PESSOADOCUMENTO.IDDOCUMENTO
            AND
              DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO
            AND
              TIPODOCUMENTO.INVISUALIZA = 1
            AND
              PESSOADOCUMENTO.IDPESSOA IN ( SELECT
                                              PESSOADEPARA.IDPESSOAORIGEM
                                            FROM
                                              CUSTOMER.PESSOADEPARA
                                            WHERE
                                              PESSOADEPARA.IDPESSOA = :oszIdPessoa
                                           );

    EXEC SQL OPEN CursorBuscaDocumentoPorIdPessoa;

    for(iCount2=0, ptDadosDocumentoAux=gptDadosDocumento;;iCount2++, ptDadosDocumentoAux++, giQtdElementosObtidos++)
    {
        EXEC SQL FETCH CursorBuscaDocumentoPorIdPessoa INTO
               :oszSgTipoDocumento:iSgTipoDocumento,
               :oszNrDocumento:iNrDocumento,
               :oszSgOrgaoExpedidor:iSgOrgaoExpedidor;

        /* Verifica se precisa realocar espaco */
        if(iCount2 >= giQtdElementosAlocados) {
            giQtdElementosAlocados++;

            // sprintf(szAux, "Realocando memoria [%p]", gptDadosDocumento); oLog.logDebug(szAux);
            gptDadosDocumento = (TDadosDocumento *) realloc(gptDadosDocumento, sizeof(TDadosDocumento) * (giQtdElementosAlocados));
            // sprintf(szAux, "Memoria realocada [%p] bloco(%d)", gptDadosDocumento, sizeof(TDadosDocumento) * (giQtdElementosAlocados)); oLog.logDebug(szAux);

            /* Atribui o novo endereco obtido e posiciona o ponteiro na posicao do ultimo registro obtido antes da realocacao */
            ptDadosDocumentoAux = gptDadosDocumento+iCount2;
        }

        /* copia as informacoes obtidas para o ponteiro */
        memset(ptDadosDocumentoAux, 0, sizeof(TDadosDocumento));

        if(iSgTipoDocumento != -1)   { STRCPY_FROM_ORA(ptDadosDocumentoAux->szSgTipoDocumento ,   oszSgTipoDocumento); }
        if(iNrDocumento != -1)       { STRCPY_FROM_ORA(ptDadosDocumentoAux->szNrDocumento ,       oszNrDocumento); }
        if(iSgOrgaoExpedidor != -1)  { STRCPY_FROM_ORA(ptDadosDocumentoAux->szSgOrgaoExpedidor ,  oszSgOrgaoExpedidor); }

    }

    EXEC SQL CLOSE CursorBuscaDocumentoPorIdPessoa;

    sprintf(szAux, "proCBuscaDocumentoPorIdPessoa() <FOUND>"); oLog.logDebug(szAux);

    return true;

    erro:
        sprintf(szAux, "proCBuscaDocumentoPorIdPessoa() <ERROR>"); oLog.logDebug(szAux);
        sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return false;

    naoexiste:
        sprintf(szAux, "proCBuscaDocumentoPorIdPessoa() <NOT FOUND>"); oLog.logDebug(szAux);
        return false;
}

