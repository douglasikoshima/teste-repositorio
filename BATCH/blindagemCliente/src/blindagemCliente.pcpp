/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio Meigo 2
 * @version $Revision: 1.1.2.5.86.2 $
 * @CVS     $Author: a5110706 $ - $Date: 2011/11/16 18:03:30 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/blindagemCliente.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;
bool ObterQtRegistro(char *pszFile,char* szQt);



int main(void)
{
    TParamConf tParamConf;


    int retorno = 0;

	char sznma[255];
	char tst[20];
	char szLInhaLog[42];
	char szValorLog[14];
	FILE *pini;

    EXEC SQL BEGIN DECLARE SECTION;
         VARCHAR szNomeArquivoFull[101];
		 varchar szNomeArquivo[101];
		 varchar szNomeArquivoBad[101];
		 varchar szDsObservacao[50];
		 varchar szDsStatus[50];
		 varchar szLoader[200];
		 char	 szlinha[50];
		 char	 szlinhaSeg[15];
		 char	 szTrunc[200];
		 char	 szMerge[2000];
		 int	 qtRegistrosProc=0;
		 int	 qtRegistrosCarr=0;
		 int	 qtRegistrosDisc=0;	
		 int	 icounter=0;

		 //controle de chamadas
		 int  iCtrLoader=0;
		 int  iCtrWc=0;
		 
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>blindagemCliente");


    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<blindagemCliente");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<blindagemCliente");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

   EXEC SQL WHENEVER SQLERROR GOTO sqlError;

   EXEC SQL WHENEVER NOT FOUND DO BREAK;

    EXEC SQL 
		DECLARE crsBlindagem CURSOR FOR
		SELECT 
		 NMARQUIVO,
		 SUBSTR(NMARQUIVO,1,INSTR(NMARQUIVO,'.',1)-1),
		 NMARQUIVO
	  FROM INFRA.ARQUIVOFUNCIONALIDADE Tbl
	  WHERE INCONTROLEPROCESSAMENTO=1
	  AND SGFUNCIONALIDADE='BLIND';

   
	EXEC SQL open crsBlindagem;

	while(true)
	{
	
	EXEC SQL FETCH crsBlindagem INTO :szNomeArquivoFull,
									 :szNomeArquivo,
									 :szNomeArquivoBad;

		
		endOraStr(szNomeArquivoFull);
		endOraStr(szNomeArquivo);
	
		//marcando o arquivo
		sprintf(szAux,"Procesando Arquivo:%s",(char*)szNomeArquivoFull.arr); oLog.logDebug(szAux);
		EXEC SQL
			UPDATE INFRA.ARQUIVOFUNCIONALIDADE
			SET INCONTROLEPROCESSAMENTO=2,
				DTPROCESSAMENTO=SYSDATE
			WHERE NMARQUIVO=:szNomeArquivoFull;

		//montando loader

		strcpy(szTrunc,"call load.sp_truncblindagem()");
		
		 oLog.logDebug( szTrunc );
		 
		 EXEC SQL EXECUTE IMMEDIATE :szTrunc;


		EXEC SQL
			SELECT REPLACE(dsvalorparametro,'B1',:szNomeArquivo)
			into :szLoader
			FROM apoio.parametro 
			WHERE CDPARAMETRO='BLINDAGEM_LOADER';

		oLog.logDebug("Executando...");

		endOraStr(szLoader);

		oLog.logDebug((char*)szLoader.arr);

		iCtrLoader=system((char*)szLoader.arr);

		sprintf(szAux,"iCtrLoader=%d",iCtrLoader);

		oLog.logDebug(szAux);

		//calculando estatisticas

				strcpy(szAux,"cat blind.log|grep \"Total logical records r\">relat.log");
				oLog.logDebug(szAux);

				iCtrWc=system(szAux);
					
					pini=fopen("relat.log","r");

					while(!feof(pini))
					{	
							fgets(szlinha,42,pini);

							sprintf(szlinhaSeg,"%.10s",&szlinha[31]);

						icounter++;
						if (icounter==1) 
						{
							qtRegistrosProc=atoi(szlinhaSeg);
						}
						else 
						{
							qtRegistrosDisc=atoi(szlinhaSeg);
						}
					
					}
					fclose (pini);

				sprintf(szAux,"qtRegistrosProc:%d qtRegistrosDisc:%d",qtRegistrosProc,qtRegistrosDisc);

				oLog.logDebug(szAux);

		if(!iCtrLoader)
		{
				//executando merge
				 sprintf( szMerge,  " MERGE INTO RETENCAO.CLIENTEBLINDAGEM a "
									" USING ( "
									" SELECT "
									" CDAREAREGISTRO , "
									" NRLINHA , "
									" DTVALIDADE "
									" FROM "
									" LOAD.CLIENTEBLINDAGEM "
									" ) b "
									" ON (a.CDAREAREGISTRO = b.CDAREAREGISTRO "
									" AND a.NRLINHA = b.NRLINHA) "
									" WHEN MATCHED THEN "
									" UPDATE SET "
									" a.DTVALIDADE = b.DTVALIDADE "
									" WHEN NOT MATCHED THEN "
									" INSERT (a.CDAREAREGISTRO,"
											" a.NRLINHA,"
											" a.DTVALIDADE)"
									" VALUES (b.CDAREAREGISTRO,"
											" b.NRLINHA,"
											" b.DTVALIDADE)");

				 oLog.logDebug( szMerge );
				 
				 EXEC SQL EXECUTE IMMEDIATE :szMerge;
				
				strToOra(szDsStatus," ");

			}
			else
			{
				oLog.logDebug("else");
				sprintf(szAux,"Erro=>%d",iCtrLoader);
				
				strToOra(szDsStatus,szAux);

				oLog.logDebug((char*)szDsStatus.arr);
			}

		//finalizando processamento
		if(qtRegistrosDisc>0)//-1 nao segue regra...
				{
					EXEC SQL
						SELECT SUBSTR(NMARQUIVO,1,INSTR(NMARQUIVO,'.',1)-1)||'.bad'
					into	:szNomeArquivoBad
					from INFRA.ARQUIVOFUNCIONALIDADE
					WHERE NMARQUIVO=:szNomeArquivoFull;
				}
				endOraStr(szNomeArquivoBad);

		EXEC SQL
		UPDATE INFRA.ARQUIVOFUNCIONALIDADE
			SET INCONTROLEPROCESSAMENTO=3,
				QTREGISTROSPROCESSADOS=:qtRegistrosProc,
				QTREGISTROSDESCARTADOS=:qtRegistrosDisc,
				DTPROCESSAMENTO=SYSDATE,
				DSERROPROCESSAMENTO=:szDsStatus,
				nmarquivo=:szNomeArquivoBad
			WHERE NMARQUIVO=:szNomeArquivoFull;

	}
    // declara cursor para busca dos xml´s a serem reprocessados


    EXEC SQL CLOSE crsBlindagem;


    // finaliza
    oLog.logDebug("Fechando cursor...");

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<blindagemCliente");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}

/************************************************************************************************************/

/************************************************************************************************************/
void montarNomeArquivo(char *pszNomeArquivo,char *pszNomeArquivoZip,const char *pszPath)
{
    strcpy(pszNomeArquivo, pszPath);
   /* strcat(pszNomeArquivo, "/"NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA);

    strcpy(pszNomeArquivoZip, pszPath);
    strcat(pszNomeArquivoZip, "/"NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA".gz");

    sprintf(szAux, "    Nome do arquivo = [%s]", pszNomeArquivo); oLog.logDebug(szAux);
    sprintf(szAux, "Nome do arquivo zip = [%s]", pszNomeArquivoZip); oLog.logDebug(szAux);*/
}

/************************************************************************************************************/
void compactarArquivo(const char *pszNomeArquivo)
{
   
	 
	 	/*printf("\nqt1=%d <=>qt2=%d ",qt1,qt2);
	

    strcpy(sComando,"gzip -9 ");
    strcat(sComando,pszNomeArquivo);

    sprintf(szAux,"Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);*/
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/

/************************************************************************************************************/
/************************************************************************************************************/


/************************************************************************************************************/

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("blindagemCliente.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}
/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

	 oLog.logInformation(connString);
    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    //oLog.logInformation("<<<DBConnect [ERROR]");
	sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}

/************************************************************************************************************/
bool ObterQtRegistro(char *pszFile,char* szQt)
{
    oLog.logDebug("Obtendo lista de endereços...");

    FILE *file = fopen(pszFile,"r");

    if( 0==file )
	{
        oLog.logError("Erro abrindo arquivo de endereços");
        return false;
    }

    fgets(szQt,20,file);

    fclose(file);

    oLog.logDebug("lista de endereços obtida com sucesso...");

    return true;
}