/*
 * CSoapException.cpp
 *
 *  Created on: 11/02/2014
 *      Author: Jones Randis
 */

#include "CSoapException.h"

namespace batch {

CSoapException::CSoapException() {
	mapXmlErr[XMLERR_OK] = "success return";
	mapXmlErr[XMLERR_NULL_PTR] = "NULL pointer";
	mapXmlErr[XMLERR_NO_MEMORY] = "out of memory";
	mapXmlErr[XMLERR_HASH_DUP] = "duplicate entry in hash table";
	mapXmlErr[XMLERR_INTERNAL] = "internal error";
	mapXmlErr[XMLERR_BUFFER_OVERFLOW] = "name/quoted string too long";
	mapXmlErr[XMLERR_BAD_CHILD] = "invalid child for parent";
	mapXmlErr[XMLERR_EOI] = "unexpected End Of Information";
	mapXmlErr[XMLERR_BAD_MEMCB] = "invalid memory callbacks";
	mapXmlErr[XMLERR_UNICODE_ALIGN] = "Unicode data misalignment";
	mapXmlErr[XMLERR_NODE_TYPE] = "wrong node type";
	mapXmlErr[XMLERR_UNCLEAN] = "context is not clean";
	mapXmlErr[XMLERR_NESTED_STRINGS] = "internal err: nested open strs";
	mapXmlErr[XMLERR_PROP_NOT_FOUND] = "property not found";
	mapXmlErr[XMLERR_SAVE_OVERFLOW] = "save output overflowed";
	mapXmlErr[XMLERR_NOT_IMP] = "feature not implemented";
	mapXmlErr[XMLERR_INTERNAL_SUB] = "internal error w/subcode";
	mapXmlErr[XMLERR_SHORT_WRITE] = "short write (not all bytes)";
	mapXmlErr[XMLERR_NLS_MISMATCH] = "specify both lxglo/lxd or neither";
	mapXmlErr[XMLERR_NLS_INIT] = "error during NLS initialization";
	mapXmlErr[XMLERR_LEH_INIT] = "error during LEH initialization";
	mapXmlErr[XMLERR_MEM_INIT] = "error during Mem initialization";
	mapXmlErr[XMLERR_URL_INIT] = "error during XmlUrl initialization";
	mapXmlErr[XMLERR_LOAD_NO_IO] = "no I/Os specified";
	mapXmlErr[XMLERR_LOAD_TOO_IO] = "too many I/Os specified";
	mapXmlErr[XMLERR_VC_ROOT_ELEM] = "root element mismatch";
	mapXmlErr[XMLERR_VC_DECL_PE_NEST] = "improper decl/pe nesting";
	mapXmlErr[XMLERR_VC_STDALONE_DOC] = "bogus standalone doc decl";
	mapXmlErr[XMLERR_VC_BAD_ELEM] = "invalid element (mismatch DTD)";
	mapXmlErr[XMLERR_VC_UNDEF_ELEM] = "element is not defined";
	mapXmlErr[XMLERR_VC_NOT_EMPTY] = "element should be empty";
	mapXmlErr[XMLERR_VC_UNDEF_ATTR] = "undefined attribute";
	mapXmlErr[XMLERR_VC_UNIQUE_ELEM] = "element multiply defined";
	mapXmlErr[XMLERR_VC_GROUP_PE_NEST] = "improper group/pe nesting";
	mapXmlErr[XMLERR_VC_DUP_TYPE] = "duplicate name in mixed decl";
	mapXmlErr[XMLERR_VC_BAD_NAME] = "bad Name";
	mapXmlErr[XMLERR_VC_BAD_NMTOKEN] = "bad Nmtoken";
	mapXmlErr[XMLERR_VC_ONE_ID] = "multiple ID attributes";
	mapXmlErr[XMLERR_VC_ID_ATTR_DEF] = "ID not IMPLIED or REQUIRED";
	mapXmlErr[XMLERR_VC_ENUM] = "attr val not in enumeration";
	mapXmlErr[XMLERR_VC_REQ_ATTR] = "missing required attribute";
	mapXmlErr[XMLERR_VC_FIXED_ATTR] = "wrong val for fixed attribute";
	mapXmlErr[XMLERR_VC_UNDEF_ENTITY] = "undefined entity";
	mapXmlErr[XMLERR_VC_ENTITY_PARSE] = "entity attribute not unparsed";
	mapXmlErr[XMLERR_VC_ENTITY_NDATA] = "undefined entity NDATA";
	mapXmlErr[XMLERR_VC_UNDEF_NOTE] = "undefined notation";
	mapXmlErr[XMLERR_VC_UNDEF_ID] = "undefined ID (in IDREF)";
	mapXmlErr[XMLERR_VC_DUP_ID] = "duplicate ID";
	mapXmlErr[XMLERR_VC_ATTR_REFS] = "attr value missing refs";
	mapXmlErr[XMLERR_DUP_ENTITY] = "duplicate entity";
	mapXmlErr[XMLERR_NO_DECL] = "asked for XMLDecl but no got";
	mapXmlErr[XMLERR_CONVERT] = "encoding conversion problem";
	mapXmlErr[XMLERR_BAD_ENCODING] = "invalid encoding";
	mapXmlErr[XMLERR_OPEN_INPUT] = "could not open input";
	mapXmlErr[XMLERR_READ_INPUT] = "could not read from input";
	mapXmlErr[XMLERR_SYNTAX] = "generic syntax error";
	mapXmlErr[XMLERR_COMMENT_SYNTAX] = "comment syntax error";
	mapXmlErr[XMLERR_CDATA_SYNTAX] = "CDATA syntax error";
	mapXmlErr[XMLERR_COND_SYNTAX] = "conditional section syntax error";
	mapXmlErr[XMLERR_DTD_KEYWORD] = "unknown keyword found in DTD";
	mapXmlErr[XMLERR_XML_RESERVED] = "XML cannot be used in a PI";
	mapXmlErr[XMLERR_NOT_EXPECTED] = "syntax error";
	mapXmlErr[XMLERR_DEF_DECL] = "error in default declaration";
	mapXmlErr[XMLERR_COMMENT_END] = "comment syntax error";
	mapXmlErr[XMLERR_COMMENT_NOEND] = "comment syntax error";
	mapXmlErr[XMLERR_CDATA_NOEND] = "CDATA syntax error";
	mapXmlErr[XMLERR_PIDATA_NOEND] = "PIDATA syntax error";
	mapXmlErr[XMLERR_BAD_WIDE_CHAR] = "Invalid lxwchar";
	mapXmlErr[XMLERR_BAD_UNICODE_CHAR] = "Invalid lxuchar";
	mapXmlErr[XMLERR_BAD_NATIVE_CHAR] = "Invalid ASCII/EBCDIC character";
	mapXmlErr[XMLERR_BAD_CHARREF] = "Invalid character";
	mapXmlErr[XMLERR_CHARDATA] = "Error while processing text";
	mapXmlErr[XMLERR_ATTR_VALUE] = "Invalid char in attribute value";
	mapXmlErr[XMLERR_SAX] = "Error from SAX callback";
	mapXmlErr[XMLERR_WFC_EXT_ENTITY] = "No external entity in attrib val";
	mapXmlErr[XMLERR_WFC_UNIQUE_ATTR] = "Attributes must be unique";
	mapXmlErr[XMLERR_WFC_ELEM_MATCH] = "Start tag and end tag of elem";
	mapXmlErr[XMLERR_WFC_ENTITY_DECL] = "Entity not declared";
	mapXmlErr[XMLERR_WFC_PARSED_ENT] = "Must be a parsed entity";
	mapXmlErr[XMLERR_WFC_RECUR] = "No recursion in entity refs";
	mapXmlErr[XMLERR_EMPTY_FILE] = "Empty file";
	mapXmlErr[XMLERR_BAD_NM_UNI_CHAR] = "Invalid character in NAME/NMTOKEN";
	mapXmlErr[XMLERR_BAD_NM_CHAR] = "Invalid character in NAME/NMTOKEN";
	mapXmlErr[XMLERR_WFC_BAD_PE] = "PE improperly used in internal DTD";
	mapXmlErr[XMLERR_NSC_LEADING_XML] = "Leading XML for namespace prefix";
	mapXmlErr[XMLERR_NSC_PREFIX_DECL] = "Namespace prefix not declared";
	mapXmlErr[XMLERR_BAD_VERSION] = "XML Version not supported";
	mapXmlErr[XMLERR_BAD_PUB_CHAR] = "Invalid pubid character";
	mapXmlErr[XMLERR_COND_KEYWORD] = "condition section keyword invalid";
	mapXmlErr[XMLERR_COND_UNFINISHED] = "condition is unfinished (open)";
	mapXmlErr[XMLERR_ATTR_TYPE] = "invalid attribute type";
	mapXmlErr[XMLERR_NWF_ELEM_START] = "element-start tag is NWF";
	mapXmlErr[XMLERR_NWF_ENTREF] = "entity reference is NWF";
	mapXmlErr[XMLERR_AMPERSAND] = "invalid use of ampersand char";
	mapXmlErr[XMLERR_ATTR_QUOTE] = "elem attr value not in quotes";
	mapXmlErr[XMLERR_LESSTHAN] = "invalid use of '<' character";
	mapXmlErr[XMLERR_EXTRA_DATA] = "extra data at end of document";
	mapXmlErr[XMLERR_NO_SYSID] = "missing SYSID after PUBID";
	mapXmlErr[XMLERR_BAD_DTD] = "bad DTD declaration";
	mapXmlErr[XMLERR_BAD_ENTITY_DECL] = "bad entity declaration";
	mapXmlErr[XMLERR_BAD_EXTID] = "bad external ID declaration";
	mapXmlErr[XMLERR_BAD_ATTR_DECL] = "bad attribute declaration";
	mapXmlErr[XMLERR_INT_COND] = "no conditionals in internal DTD";
	mapXmlErr[XMLERR_ENTITY_NESTING] = "improper entity nesting";
	mapXmlErr[XMLERR_NO_VERSION] = "missing required version#";
	mapXmlErr[XMLERR_BAD_XML_DECL] = "bad XML declaration";
	mapXmlErr[XMLERR_STANDALONE_YN] = "invalid standalone yes/no";
	mapXmlErr[XMLERR_ELEMENT_DECL] = "invalid element declaration";
	mapXmlErr[XMLERR_CHILDREN_DECL] = "invalid children declaration";
	mapXmlErr[XMLERR_MIXED_DECL] = "invalid mixed declaration";
	mapXmlErr[XMLERR_NOTATION_DECL] = "invalid notation declaration";
	mapXmlErr[XMLERR_XMLSPACE_DECL] = "invalid xml:space declaration";
	mapXmlErr[XMLERR_BAD_URL] = "invalid URL";
	mapXmlErr[XMLERR_BAD_LANG] = "invalid language specification";
	mapXmlErr[XMLERR_RESOLVE_URL] = "couldn't resolve relative URL";
	mapXmlErr[XMLERR_BAD_ACCESS] = "invalid access method";
	mapXmlErr[XMLERR_ACCESS_FUNCS] = "all access funcs must be provided";
	mapXmlErr[XMLERR_CANT_IMPORT] = "can't import that node type";
	mapXmlErr[XMLERR_CANT_SET_ENC] = "can't set output encoding";
	mapXmlErr[XMLERR_END_QUOTE] = "No ending quote was seen";
	mapXmlErr[XMLERR_UNSUP_ENCODING] = "unsupported encoding";
	mapXmlErr[XMLERR_SHARED_DTD_MIX] = "doc can't have DTD if set shared";
	mapXmlErr[XMLERR_WRONG_ENCODING] = "input document in wrong encoding";
	mapXmlErr[XMLERR_NULL_URI] = "NULL URI in namespace pfx decl";
	mapXmlErr[XMLERR_MAXDEPTH] = "Exceeded max depth for recursion";
	mapXmlErr[XMLERR_NONAMEINATTRSET] = "no name in attribute set";
	mapXmlErr[XMLERR_ERROR_IN_XPATH] = "XPATH function returns an error";
	mapXmlErr[XMLERR_CANNOT_TRANSFORM] = "child node has invalid type/name";
	mapXmlErr[XMLERR_ATTRIBUTE_NOT_EXPECTED] = "Attr found but wrong value";
	mapXmlErr[XMLERR_NULL_INPUT_STRING] = "input string null";
	mapXmlErr[XMLERR_MISSING_TOKEN] = "expected token missing";
	mapXmlErr[XMLERR_INCOM_ATTR_VAL_TMPL] = "inp string missing closing brace";
	mapXmlErr[XMLERR_NS_PREFIX_NOT_DECLARED] = "nsp prefix used but not declared";
	mapXmlErr[XMLERR_ATTRIBUTE_NOT_FOUND] = "expected attr node not found";
	mapXmlErr[XMLERR_CANNOT_INIT_XPATH] = "XPATH ctx could not be init'd";
	mapXmlErr[XMLERR_ELEMENT_NOT_FOUND] = "expected element not found.";
	mapXmlErr[XMLERR_FEATURE_NOT_SUPPORTED] = "feature not supported";
	mapXmlErr[XMLERR_CANNOT_CONS_PI] = "cont of PI node might be invalid";
	mapXmlErr[XMLERR_CANNOT_CONS_COMMENT] = "cont of XML comment might be inv";
	mapXmlErr[XMLERR_FAIL] = "internal error occurred";
	mapXmlErr[XMLERR_EXT_FUNC_NOT_SUPPORTED] = "extension function not supported";
	mapXmlErr[XMLERR_BAD_ATTR_VALUE] = "invalid value for attr";
	mapXmlErr[XMLERR_UNDEF_DECIMAL_FORMAT] = "undefined decimal-format";
	mapXmlErr[XMLERR_DUP_DEC_FORMAT] = "duplicate decimal-format";
	mapXmlErr[XMLERR_BAD_DATA] = "The data is not allowed";
	mapXmlErr[XMLERR_OUTOFORDERATTRIBUTE] = "Cant add more attributes";
	mapXmlErr[XMLERR_NULL_OUTPUT] = "No mechanism for output";
	mapXmlErr[XMLERR_DOCUMENTNOTFOUND] = "Could not open doc";
	mapXmlErr[XMLERR_APPLY_IMPORTS] = "Cant apply imports";
	mapXmlErr[XMLERR_INV_LANG] = "Invalid LANG for xsl:sort";
	mapXmlErr[XMLERR_RECUR_IMP_INCLUDE] = "recursive import/include";
	mapXmlErr[XMLERR_RECUR_ATTR_SET] = "recursive attribute sets";
	mapXmlErr[XMLERR_XPATH_INTERNAL] = "Internal error";
	mapXmlErr[XMLERR_XPATH_INVNAME] = "Invalid QName";
	mapXmlErr[XMLERR_XPATH_INVAXIS] = "Invalid axis name";
	mapXmlErr[XMLERR_XPATH_QTNOTMATCH] = "Unmatched quote";
	mapXmlErr[XMLERR_XPATH_NSERR] = "Unable to resolve namespace";
	mapXmlErr[XMLERR_XPATH_MEMERR] = "Unable to allocate memory";
	mapXmlErr[XMLERR_XPATH_INVOBJTYP] = "Incorrect object type";
	mapXmlErr[XMLERR_XPATH_NOTRSQB] = "Right square bracket missing";
	mapXmlErr[XMLERR_XPATH_NOTRPAREN] = "Right parenthesis missing";
	mapXmlErr[XMLERR_XPATH_INVTOK] = "Invalid token";
	mapXmlErr[XMLERR_XPATH_VARREF] = "Unable to resolve the variable";
	mapXmlErr[XMLERR_XPATH_UNKFUNC] = "Unknown function";
	mapXmlErr[XMLERR_ENCODING_MISMATCH] = "encoding mismatch in Inc/Import";
	mapXmlErr[XMLERR_XPATH_TOOBIGNUMBER] = "Too big numerical constant";
	mapXmlErr[XMLERR_XPATH_INVEXPRTREE] = "Invalid expression tree";
	mapXmlErr[XMLERR_XPATH_INVOP] = "Invalid operator";
	mapXmlErr[XMLERR_XPATH_INVCTX] = "Invalid context list/node";
	mapXmlErr[XMLERR_ITER_NULL] = "XMLERR_ITER_NULL";
	mapXmlErr[XMLERR_ITER_DETACHED] = "XMLERR_ITER_DETACHED";
	mapXmlErr[XMLERR_ITER_CUR_REMOVED] = "--- Errors 510-519 are TreeWalker";
	mapXmlErr[XMLERR_WALKER_NULL] = "XMLERR_WALKER_NULL";
	mapXmlErr[XMLERR_WALKER_NODE_PAR_NULL] = "XMLERR_WALKER_NODE_PAR_NULL";
	mapXmlErr[XMLERR_WALKER_BAD_NEW_CUR] = "XMLERR_WALKER_BAD_NEW_CUR";
	mapXmlErr[XMLERR_WALKER_BAD_NEW_ROOT] = "XMLERR_WALKER_BAD_NEW_ROOT";
	mapXmlErr[XMLERR_WALKER_NO_ROOT] = "--- Errors 520-539 are Range";
	mapXmlErr[XMLERR_RANGE_NULL] = "range pointer is NULL";
	mapXmlErr[XMLERR_RANGE_DETACHED] = "range is detached";
	mapXmlErr[XMLERR_RANGE_BAD_NODE] = "node parameter is invalid";
	mapXmlErr[XMLERR_RANGE_BAD_INDEX] = "offset parameter is invalid";
	mapXmlErr[XMLERR_RANGE_BAD_DOC] = "start/end node not from this doc";
	mapXmlErr[XMLERR_RANGE_START_AFTER_END] = "start after end";
	mapXmlErr[XMLERR_RANGE_NO_ROOT] = "new start/end point has no root";
	mapXmlErr[XMLERR_RANGE_DIFF_ROOTS] = "ranges cmp'd have dif roots";
	mapXmlErr[XMLERR_RANGE_NO_ANCESTOR] = "bad error, implementation error";
	mapXmlErr[XMLERR_RANGE_NONE] = "used by private functions";
	mapXmlErr[XMLERR_RANGE_COLLAPSE] = "used by private functions";
	mapXmlErr[XMLERR_RANGE_ERROR] = "consistency error";
	mapXmlErr[XMLERR_FILTER_REJECT] = "XMLERR_FILTER_REJECT";
	mapXmlErr[XMLERR_FILTER_SKIP] = "--- Errors 600-699 are XVM return codes";
	mapXmlErr[XMLERR_XVM_INVTOKEN] = "Invalid token";
	mapXmlErr[XMLERR_XVM_INVCHILDELEM] = "Invalid child element";
	mapXmlErr[XMLERR_XVM_INVATTRVALINELEM] = "Invalid attribute value in elem";
	mapXmlErr[XMLERR_XVM_INVATTRVAL] = "Invalid attribute value";
	mapXmlErr[XMLERR_XVM_INVATTR] = "Invalid attribute";
	mapXmlErr[XMLERR_XVM_MISSINGATTR] = "Missing attribute";
	mapXmlErr[XMLERR_XVM_INVREFERENCE] = "Invalid reference";
	mapXmlErr[XMLERR_XVM_DUPDECL] = "Repeated declaration";
	mapXmlErr[XMLERR_XVM_INVARGNUM] = "Invalid number of arguments";
	mapXmlErr[XMLERR_XVM_STACKOVERFLOW] = "VM Stack overflow";
	mapXmlErr[XMLERR_XVM_SAXRETURNERROR] = "SAX callback returns with error";
	mapXmlErr[XMLERR_XVM_INVRESULTATTR] = "Invalid result attribute node";
	mapXmlErr[XMLERR_XVM_INVRESULTNSATTR] = "Invalid result namespace node";
	mapXmlErr[XMLERR_XVM_INVRESCOMMENT] = "Invalid result comment";
	mapXmlErr[XMLERR_XVM_TERMINATE] = "XSLTVM terminate";
	mapXmlErr[XMLERR_XVM_INVRESPI] = "Invalid result PI";
	mapXmlErr[XMLERR_XVM_INVOBJTYPE] = "Invalid XSLT object type";
	mapXmlErr[XMLERR_XVM_WRITEFAILD] = "Output write failed";
	mapXmlErr[XMLERR_XVM_NOTWELLFORMED] = "Not a well-formed document";
	mapXmlErr[XMLERR_XVM_LOADFAILED] = "Failed to load";
	mapXmlErr[XMLERR_XVM_INVENCODING] = "Invalid encoding";
	mapXmlErr[XMLERR_XVM_STRSTACKOVERFLOW] = "VM String-Stack overflow";
	mapXmlErr[XMLERR_XVM_NODESTACKOVERFLOW] = "VM Node-Stack overflow";
	mapXmlErr[XMLERR_XVM_INVALIDARG] = "Invalid argument";
	mapXmlErr[XMLERR_SOAP_BAD_CTX] = "invalid SOAP context";
	mapXmlErr[XMLERR_SOAP_BAD_ROLE] = "invalid role";
	mapXmlErr[XMLERR_SOAP_BAD_BINDING] = "invalid connection binding";
	mapXmlErr[XMLERR_SOAP_CALL_FAILED] = "SOAP Call failed";
	mapXmlErr[XMLERR_SOAP_NO_MUST_UNDERSTAND] = "elem has no mustUnderstand";
	mapXmlErr[XMLERR_SOAP_NO_ROLE] = "elem has no role";
	mapXmlErr[XMLERR_SOAP_NO_FAULT] = "message has no fault";
	mapXmlErr[XMLERR_SOAP_NO_LANG] = "no Fault reason w/given language";
	mapXmlErr[XMLERR_SOAP_HTTP_CON] = "failed to make HTTP connection";
	mapXmlErr[XMLERR_SOAP_REPLY_NWF] = "reply to SOAP Call was NWF XML";
	mapXmlErr[XMLERR_SOAP_UNSUP_WEB_METHOD] = "unsupported Web Method";
	mapXmlErr[XMLERR_SOAP_BAD_VERSION] = "invalid SOAP version";
	mapXmlErr[XMLERR_SOAP_BAD_HEADER] = "failed to set HTTP header";
	mapXmlErr[XMLERR_SOAP_MULTI_FAULTS] = "body has more than one fault";
	mapXmlErr[XMLERR_SOAP_FAULT_NOT_SINGLE] = "fault is not a single child";
	mapXmlErr[XMLERR_SOAP_BAD_FAULT] = "badly formed fault element";
	mapXmlErr[XMLERR_SOAP_BAD_TEXT] = "badly formed Text subelement";
	mapXmlErr[XMLERR_SOAP_BAD_VALUE] = "badly formed Value subelement";
	mapXmlErr[XMLERR_SOAP_NO_ENV] = "message has no envelope";
	mapXmlErr[XMLERR_SOAP_PREF] = "prefix too long";
	mapXmlErr[XMLERR_SOAP_NO_HEADER] = "envelope has no header";
	mapXmlErr[XMLERR_SOAP_NO_BODY] = "envelope has no body";
	mapXmlErr[XMLERR_SOAP_NO_RELAY] = "elem has no relay";
	mapXmlErr[XMLERR_SOAP_NO_ELEMENT] = "no such element";
	mapXmlErr[XMLERR_SOAP_DUPL_LANG] = "duplicate language";
	mapXmlErr[XMLERR_DAV_NUL_PTR] = "NULL argument pointer";
	mapXmlErr[XMLERR_DAV_EXC_ARGS] = "exclusive arguments";
	mapXmlErr[XMLERR_DAV_INV_VAL] = "invalid value";
	mapXmlErr[XMLERR_DAV_INV_PRX] = "invalid proxy";
	mapXmlErr[XMLERR_DAV_INV_NO_PRX] = "invalid no-proxy";
	mapXmlErr[XMLERR_DAV_NO_REQ_ARG] = "missing required argument";
	mapXmlErr[XMLERR_DAV_NO_MIX_TAG] = "all tagged or all untagged";
	mapXmlErr[XMLERR_DAV_MAX_XML_SIZ] = "max xml size exceeded";
	mapXmlErr[XMLERR_DAV_CB_RET_NUL] = "callback resturns NULL";
	mapXmlErr[XMLERR_DAV_TCP_INIT] = "TCP/IP initialization failed";
	mapXmlErr[XMLERR_DAV_TCP_OPEN] = "failed to open TCP connection";
	mapXmlErr[XMLERR_DAV_TCP_SEND] = "failed to send TCP data";
	mapXmlErr[XMLERR_DAV_TCP_READ] = "failed to read TCP data";
	mapXmlErr[XMLERR_DAV_MAX_CONS] = "max connections exceeded";
	mapXmlErr[XMLERR_DAV_BAD_CONN] = "connection broken";
	mapXmlErr[XMLERR_DAV_HTTP_PROTO] = "malformed HTTP header";
	mapXmlErr[XMLERR_DAV_BAD_TRAN_ENC] = "bad transfer encoding";
	mapXmlErr[XMLERR_DAV_NOT_TEXT] = "not text media type";
	mapXmlErr[XMLERR_DAV_NO_BODY] = "no entity body";
	mapXmlErr[XMLERR_DAV_NOT_XML] = "not xml media type";
	mapXmlErr[XMLERR_DAV_NO_LOK_TOK] = "missing lock token in lock refresh";
	mapXmlErr[XMLERR_DAV_NO_LT_UNLOCK] = "missing lock token in UNLOCK";
	mapXmlErr[XMLERR_DAV_OBJ_TYPE] = "wrong object type";
	mapXmlErr[XMLERR_DAV_BAD_PROT] = "protocol violation";
	mapXmlErr[XMLERR_XQ_INVTOKEN] = "invalid XQuery token";
	mapXmlErr[XMLERR_XQ_SYNTAXERR] = "XQuery syntax error";
	mapXmlErr[XMLERR_DF_ILLEGAL_FLAGS] = "illegal flag bits for XmlDiff()";
	mapXmlErr[XMLERR_DF_ILLEGAL_INPUTS] = "illegal sources for XmlDiff()";
	mapXmlErr[XMLERR_DF_ILLEGAL_INSERT] = "illegal context while inserting";
	mapXmlErr[XMLERR_DF_ILLEGAL_OP] = "illegal context while inserting";
	mapXmlErr[XMLERR_DF_ILLEGAL_STATE] = "problem with FSM";
	mapXmlErr[XMLERR_DF_ILLEGAL_DMATRIX] = "inconsistency in distance matrix";
	mapXmlErr[XMLERR_DF_RENAME_FAIL] = "rename node failed in patch";
	mapXmlErr[XMLERR_DF_ROOT_MISMATCH] = "root nodes do not match";
	mapXmlErr[XMLERR_DF_DHASH_ERR] = "error in calculating domhash";
	mapXmlErr[XMLERR_DF_MANY_NODES] = "error in calculating domhash";
	mapXmlErr[XMLERR_PA_PI_FAIL] = "oracle-diff PI does not assert values correctly to be able to patch";
	mapXmlErr[XMLERR_PA_IMP_FAIL] = "dom copy/import failed";
	mapXmlErr[XMLERR_DF_UNKNOWN_NODE] = "node type not handled";
	mapXmlErr[XMLERR_DF_NSMAP_ERR] = "inconsistent NS maps";
	mapXmlErr[XMLERR_PA_XVM_ERR] = "error invoking xvm";
	mapXmlErr[XMLERR_PA_XPTRANS_ERR] = "cant translate xpath while patching";
	mapXmlErr[XMLERR_DF_INTERNAL] = "illegal context while inserting";
}

CSoapException::~CSoapException() throw() {}

std::string& CSoapException::getMessageCode(xmlerr ecode) throw() {
	if ( !mapXmlErr.count(ecode) ) {
		static std::string dcode;

		std::stringstream tmp;
		tmp << ecode;
		dcode = tmp.str();

		return dcode;
	}

	return mapXmlErr[ecode];
}

} /* namespace batch */
