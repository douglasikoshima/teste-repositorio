


#undef SQLCA
#define SQLCA_NONE
#include<sqlca.h>
#include<sqlda.h>

#include <string>
#include "../../commons/LerDados/include/Propriedade.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/CFile/include/CFile.h"


using namespace std;



#define CONVIND(O,I) \
{\
	if (I == -1) { \
		##O.arr[0]=0; \
	} else { \
		##O.arr[##O.len]=0; \
	} \
}

#define endOraStr(varstr)      varstr.arr[varstr.len]= '\0'
#define oraToStr(bstr,vchar)   if(!bstr) strncpy(bstr,vchar.arr,vchar.len)
#define strToOra(vchar,bstr)   vchar.len = strlen(bstr);strncpy((char *)vchar.arr,bstr,vchar.len);vchar.arr[vchar.len] = 0


void SqlError( sqlca * sqlca );



// ------------------------------------------------------------------------------
// Conecta ao Banco
// ------------------------------------------------------------------------------
void procInconsistencia( char * sArquivoConfiguracao, char * sArquivoTexto, int nrLinhasPrm )
{   
    struct sqlca sqlca;

    string szConnStr;
    char* szPws;
    char* szUsr;
    char* szInst;

    char buffer[64];
 

    EXEC SQL BEGIN DECLARE SECTION;
     char *pszConnStr;

     int nrLinhas = nrLinhasPrm;
     int idUsuario = 1;
     VARCHAR dtEnvio[64];
    EXEC SQL END DECLARE SECTION;

    sprintf( buffer, "%.15s",&sArquivoTexto[26] );
    //printf( "idUsuario [%s]\n", buffer );
    idUsuario = atoi(buffer);

    sprintf( buffer, "%.12s",&sArquivoTexto[13] );

    //printf( "Data [%s]\n", buffer );
    strToOra( dtEnvio, buffer );


    Propriedade prop( sArquivoConfiguracao );


    szPws = prop.getParametro("pwd");
    szUsr = prop.getParametro("usr");
    szInst= prop.getParametro("inst");

    szConnStr = (string)szUsr + "/" + (string)szPws + "@" + (string)szInst;
      
      
    pszConnStr = ( char *)szConnStr.c_str();

    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL CONNECT :pszConnStr;

    EXEC SQL
    INSERT INTO
    VOL.STATUSPONTOCONTATO
    (
        IDPESSOAUSUARIO ,
        DTENVIO ,
        DTPROCESSAMENTO ,
        STCARGA ,
        NRTOTALREGISTRO ,
        NRTOTALREJEITADOS 
    )
    VALUES
    (
        :idUsuario ,
        TO_DATE(:dtEnvio,'YYYYMMDDHH24MI') ,
        SYSDATE ,
        0 ,
        :nrLinhas ,
        :nrLinhas
    );


    EXEC SQL WHENEVER SQLERROR DO SqlError( &sqlca );
    EXEC SQL COMMIT WORK RELEASE;

}



void SqlError( sqlca * sqlca )
{
    char Msg[2048];


    sprintf( Msg, "%.*s", sqlca->sqlerrm.sqlerrml-1, sqlca->sqlerrm.sqlerrmc );
    
    printf( "SqlError [%s]\n",Msg );

    throw Msg;
}
