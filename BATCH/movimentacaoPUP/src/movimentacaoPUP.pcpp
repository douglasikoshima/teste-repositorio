
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/movimentacaoPUP.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[1024];
char szTemp[1024];
char szTempTrace[1024];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 2048

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#ifdef WIN32
#define MKDIR _mkdir
#define ACCESS _access
#else
#define MKDIR mkdir
#define ACCESS access
#endif

void NomeRelatorio( char * sNmRelatorio );

int main(void)
{
    TParamConf tParamConf;
    int retorno = 0;
    char sNmRelatorio[256];
	

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[512];
        VARCHAR strOraDataProcessamento[12];
        VARCHAR strOraHoraProcessamento[12];

        short ostLinha;
        short ostrOraDataProcessamento = -1;
        short ostrOraHoraProcessamento = -1;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>movimentacaoPUP");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<movimentacaoPUP");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<movimentacaoPUP");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE,'DDMMYYYY')||TO_CHAR(SYSDATE,'HH24MI')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

    sNmRelatorio[0] = 0x0;
    NomeRelatorio( sNmRelatorio );
    if( sNmRelatorio[0] == NULL )
    {
        oLog.logDebug( "*** NAO OBTEVE NOME DO RELATORIO, VERIFIQUE TABELA DE PARAMETRIZACAO ***" );
        oLog.logDebug( "<<<relatorioGestor" );
        return -1;
    }
	
	char szData[9];	memset(szData,'\0',sizeof(szData));
	// gerar arquivo OUT OK para a data de ontem.
	ObterData(1,szData);
	
	gerarArquivoOUT(szData, tParamConf, false);
	
	
	removerArquivosAntigos(tParamConf);
	
	for( int iDiasAnteriores = 1 ; iDiasAnteriores <= 5 ; ++iDiasAnteriores)
	{
		 ObterData(iDiasAnteriores, szData);
	 
		 int iGerouArquivoMovimentacaoPUP;
		 if ( verificaArquivoOK(szData,tParamConf)  == false)
		 {
			gerarArquivoOUT(szData, tParamConf, false);
			sprintf(szTempTrace, "Arquivo [%s] não tem conteudo OK, portanto é necessario fazer a geração de movimentações PUP para essa data.", szData ); oLog.logDebug(szTempTrace);		 
			iGerouArquivoMovimentacaoPUP = gerarArquivoMovimentacaoPUP(szData, tParamConf);
			if( iGerouArquivoMovimentacaoPUP == 0)
			{
				sprintf(szTempTrace, "Arquivo de MovimentacaoPUP data [%s] gerado com sucesso.", szData ); oLog.logDebug(szTempTrace);
				gerarArquivoOUT((const char*)szData, tParamConf, true);
			}
			else
			{
				sprintf(szTempTrace, "Erro ao gerar arquivo de MovimentacaoPUP data [%s]", szData ); oLog.logDebug(szTempTrace);		 
			}
		 }
		 else
		 {
			sprintf(szTempTrace, "Arquivo [%s] tem conteudo OK, portanto ja foi feita a geração de movimentações PUP para essa data.", szData ); oLog.logDebug(szTempTrace);		 
		 }
	}

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<movimentacaoPUP");

    return retorno;

    sqlError:
        sprintf(szTempTrace, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -1;
}

/************************************************************************************************************/

void removerArquivosAntigos(TParamConf &tParamConf)
{
	char szNomeArquivo[_MAX_PATH+9];
	char szData[9];	memset(szData,'\0',sizeof(szData));
	int iRemovidos = 0;
	sprintf(szTempTrace, "Verificando diretório [%s] para reaalizar Expurgo de arquivos.", tParamConf.szPathEnviados); oLog.logDebug(szTempTrace);
	for ( int iDiasAnteriores = 6; iDiasAnteriores <= 8; ++iDiasAnteriores )
	{
		ObterData(iDiasAnteriores,szData);
		sprintf( szNomeArquivo,"%s/movimentacaoPUP_%s.txt",tParamConf.szPathEnviados,szData);	
		
		if ( ACCESS(szNomeArquivo,0)==0 )
		{
			if(remove(szNomeArquivo) == -1)
			{
				sprintf(szTempTrace, "Não foi possivel remover o arquivo [%s]", szNomeArquivo); oLog.logDebug(szTempTrace);
			}
			else
			{
				sprintf(szTempTrace, "Arquivo [%s] removido com sucesso. Expurgo.", szNomeArquivo); oLog.logDebug(szTempTrace);
				++iRemovidos;
			}
		}
		else
		{
			sprintf(szTempTrace, "Arquivo [%s] não existe.", szNomeArquivo); oLog.logDebug(szTempTrace);		
		}
	}
	sprintf(szTempTrace, "Removido [%d] Arquivo(s) pelo criterio de Expurgo.", iRemovidos); oLog.logDebug(szTempTrace);

}

/************************************************************************************************************/
void ObterData(int iDiasAnteriores, char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
		short ostrDiasAnteriores = iDiasAnteriores;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE -:ostrDiasAnteriores,'YYYYMMDD')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[8] = '\0';
	
    return;
}

/************************************************************************************************************/
bool verificaArquivoOK(const char *ccData,TParamConf &tParamConf)
{
	char sTemp[256]; memset(sTemp,0,sizeof(sTemp));
	sprintf(szAux,"%s/%s.out",tParamConf.szPath,ccData);
    FILE *pFile=0;
	
    if( !(pFile = fopen(szAux, "r")))
    {
        sprintf(szTempTrace, "Não foi possivel abrir o arquivo[%s]", szAux); oLog.logDebug(szTempTrace);
        return false;
    }

	if(fgets(sTemp, sizeof(sTemp), pFile) > 0)
	{
		sTemp[strlen(sTemp)] = 0x00;
	}

	sprintf(szTempTrace, "Arquivo [%s] com conteudo [%s]", szAux, sTemp ); oLog.logDebug(szTempTrace);

	fclose(pFile);
	
	if( memcmp(sTemp,"OK.",3) == 0 )
	{
		return true;
	}

    return false;
}

/************************************************************************************************************/
bool gerarArquivoOUT(const char *ccData,TParamConf &tParamConf, bool bOK)
{
	sprintf(szAux,"%s/%s.out",tParamConf.szPath,ccData);
    FILE *pFile=0;
    if( !(pFile = fopen(szAux, "w")))
    {
        sprintf(szTempTrace, "Erro criando arquivo[%s]", szAux); oLog.logDebug(szTempTrace);
        return true;
    }
	
	if( !bOK )
	{
	    if(fputs("NOK", pFile) <= 0) 
		{
            sprintf(szTempTrace, "Erro gravando linha no arquivo[%s]", szAux); oLog.logDebug(szTempTrace);
            return -1;
        }
		sprintf(szTempTrace, "Arquivo [%s] atualizado com o conteudo[NOK]", szAux ); oLog.logDebug(szTempTrace);
	}
	else
	{
	    if(fputs("OK.", pFile) <= 0) 
		{
            sprintf(szTempTrace, "Erro gravando linha no arquivo[%s]", szAux); oLog.logDebug(szTempTrace);
            return -1;
        }	
		sprintf(szTempTrace, "Arquivo [%s] atualizado com o conteudo[OK.]", szAux ); oLog.logDebug(szTempTrace);
	}
	fclose(pFile);
	
    return true;
}


/************************************************************************************************************/
int gerarArquivoMovimentacaoPUP(const char *ccData,TParamConf &tParamConf)
{
    int iQtdRegistros=0;
	int retorno = 0;
	char szNomeArquivo[_MAX_PATH+9];
	char szRegistro[TAM_BUFFER+1];
	
    sprintf( szNomeArquivo,"%s/movimentacaoPUP_%s.txt",tParamConf.szPath,ccData);
    FILE *pFile=0;
    if( !(pFile = fopen(szNomeArquivo, "w")))
    {
        sprintf(szTempTrace, "Erro criando arquivo[%s]", szNomeArquivo); oLog.logDebug(szTempTrace);
        return -1;
    }	
	
	EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[512];
        short ostLinha;
		const char *oszdata=ccData;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    // declara cursor para busca dos xml´s a serem reprocessados
    sprintf(szTempTrace, "Declarando cursor..."); oLog.logDebug(szTempTrace);

	sprintf(szTempTrace, "Considerando data [%s]", oszdata); oLog.logDebug(szTempTrace);
	
    EXEC SQL DECLARE CursorPUP CURSOR FOR
	SELECT cdarearegistro||nrlinha||';'||
		   pp.CDPERMISSAOPUP||';'||
		   to_char(plp.dtultimaalteracao,'ddmmyyyy')||';'||
		   decode(plp.inativo,1,2,1)resgistro  
	FROM  linha.permissaolinhapup plp,
		  linha.permissaopup pp
	WHERE plp.SGPERMISSAOPUP=pp.SGPERMISSAOPUP
	AND   pp.CDPERMISSAOPUP <> -1
	AND   to_char(plp.DTULTIMAALTERACAO,'yyyymmdd')=:oszdata;	
	
    oLog.logDebug("Vai abrir o cursor");

    EXEC SQL OPEN CursorPUP;

    oLog.logDebug("Abriu o cursor");

    for ( ;; )
    {
        /* tratamento para interromper o processamento via sinal (complemento da saida acima) */
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }

        ostLinha = -1;

        EXEC SQL
            FETCH
                CursorPUP
            INTO
                :oszLinha:ostLinha;

        iQtdRegistros++;

        CONVIND(oszLinha,ostLinha);

        sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
        if(retorno = gravarRegistro(pFile,szRegistro),retorno)
        {
            oLog.logDebug("Erro de gravação (1)");
            break;
        }


    }// for ( ;; )


    sprintf(szTempTrace,"Gerou %d registro(s)",iQtdRegistros);oLog.logDebug(szTempTrace);

	fclose(pFile);

    // finaliza
    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE CursorPUP;
	
	return 0;
	
    sqlError:
        sprintf(szTempTrace, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -1;	
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{
    char szPog[1000];
 
    if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szTempTrace, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szTempTrace);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szTempTrace, "iSig(%d)", iSig); oLog.logInformation(szTempTrace);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("movimentacaoPUP.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "pathEnviados"))
        {
            strncpy(ptParamConf->szPathEnviados, szDivArq, _MAX_PATH);
        }
		
        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szTempTrace, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPathEnviados[%s]", ptParamConf->szPathEnviados); oLog.logDebug(szTempTrace);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szCltTux) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szPathEnviados) == 0 )
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}


/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);
}

void NomeRelatorio( char * sNmRelatorio )
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oraNmRelatorio[256];
        short   i_oraNmRelatorio = -1;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorNomeRelatorio;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       DSVALORPARAMETRO
    INTO
       :oraNmRelatorio:i_oraNmRelatorio
    FROM
       APOIO.PARAMETRO
    WHERE
       CDPARAMETRO = 'RELATDVOL';   // Constante para busca no banco do nome do relatorio a ser gerado
    
    CONVIND( oraNmRelatorio, i_oraNmRelatorio );
    
    if ( i_oraNmRelatorio != -1 )
    {
        sprintf( sNmRelatorio,"%.*s", oraNmRelatorio.len,(char*)oraNmRelatorio.arr );
    }
    
    return;
    
sqlErrorNomeRelatorio:
    sNmRelatorio[0] = 0x0;
}
