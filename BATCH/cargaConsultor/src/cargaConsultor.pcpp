/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio
 * @version $Revision: 1.1.2.6.22.11 $
 * @CVS     $Author: a5114878 $ - $Date: 2014/11/07 16:41:42 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <ctype.h>
#include <strings.h>
#include <extension.h>

#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>
#include <dirent.h>

#include "../include/cargaConsultor.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

extern errno;

EXEC SQL INCLUDE SQLCA;

//char szAux[512];
Log oLog;
//int iSignalProcessa=1;
//bool ObterQtRegistro(char *pszFile,char* szQt);

int OpenDir(char *pszDiretorio,char*pfile);
//int obtemRegistro(char*pszLinha,int qtParam, char *pLinha, char* pdtCadastro,char *pstatus,char *dtstatus);

int obtemRegistro(char*pszLinha ,int qtParam, char *pszLogin, char *pszCNPJ, char* pszTipo);
void TrataBuffer( char * buffer );

int main(void)
{
    //variaveis para controle
    TParamConf tParamConf;
    int retorno = 0;
    FILE *arquivo;
    char szAux[1024];
    char szBuffer[521];
	char szNomeArquivoFull[255];

    //struct sqlca sqlca;
    //variaveis oracle
    EXEC SQL BEGIN DECLARE SECTION;

         VARCHAR szNomeArquivo[101];
         VARCHAR szNomeArquivoBad[101];
         VARCHAR szDsObservacao[50];
         VARCHAR szDsStatus[50];
         VARCHAR szLoader[200];
         int     qtRegistros=0;
         int     qtlinhas=0;
         int     qtlinhasE=0;
		 VARCHAR idUsuarioAlteracao[21+1];
		 int	 qtdiasProcon=0;
		 int	 qtdiasOutros=0;
         char    szMvfile[512];

        // estrutura do banco
         VARCHAR szLogin[256];
         VARCHAR szCNPJ[256];
         VARCHAR szTipo[256];
        varchar idUsr[256];
		 varchar idTp[256]	;

         //estrutura do arquivo
         char sLogin[256];
         char sCNPJ[256];
         char sTipo[256];
         

    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>cargaConsultor");

    // parametros de configuração
    if ( ObtemParamConf( &tParamConf ) )
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<pupProcon");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<pupProcon");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");


    //EXEC SQL WHENEVER SQLERROR GOTO sqlError;

/**********************************************************************************/
/*                  CODIGO DE NEGOCIO                                             */
/**********************************************************************************/

        oLog.logDebug("Inicio da carga...\n");
    

    while(OpenDir(tParamConf.szPath,szNomeArquivoFull) != 0)
    {
        //oLog.logDebug("Inicio da carga...");

        char localArquivo[256] = {0};
        strcpy(localArquivo, tParamConf.szPath);
        //strcat(localArquivo, "/");
        strcat(localArquivo, szNomeArquivoFull);

        oLog.logDebug(localArquivo);
		arquivo=fopen(localArquivo,"r");
		
		if ( !arquivo ) {
            perror("fopen");
            continue;
        }
        
        //oLog.logDebug("Obtendo Parametros para o arquvio %s",szNomeArquivoFull);

			while(!feof(arquivo))
            {
				memset(&szBuffer,0,sizeof(szBuffer));
				if ( !fgets(szBuffer,500,arquivo) ) {
                    //perror("fgets");
                    continue;
                }

                //oLog.logDebug(szBuffer);
                
                                
				if(strlen(szBuffer)==0)
                {
                    break;
                }
                else
                {
					sprintf( szAux, "szBuffer [%s]", szBuffer ); oLog.logDebug( szAux );
                }
                
				memset(&sLogin,0,sizeof(sLogin));
				memset(&sCNPJ,0,sizeof(sCNPJ));
				memset(&sTipo,0,sizeof(sTipo));

                obtemRegistro(szBuffer,3,sLogin,sCNPJ,sTipo);
				for (int iCNPJ = 0 ; iCNPJ <strlen(sCNPJ); ++iCNPJ)
				{
					sCNPJ[iCNPJ] = toupper(sCNPJ[iCNPJ]);
				}
                
                if( !strcmp(sCNPJ,"CNPJ") || !strcmp(sCNPJ,"cnpj") )
                {
                    //oLog.logDebug("Pular Cabecalho...");              
                    continue; // PULAR O CABEÇALHO
                }
                TrataBuffer( sTipo );    // Retira CR/LF do registro
                
                sprintf( szAux, "sTipo [%s]", sTipo ); //oLog.logDebug( szAux );
                
                strToOra(szLogin,sLogin);
                sprintf( szAux, "szLogin [%s]", szLogin.arr ); //oLog.logDebug( szAux );
                strToOra(szCNPJ,sCNPJ);
                sprintf( szAux, "szCNPJ  [%s]", szCNPJ.arr ); //oLog.logDebug( szAux );
                strToOra(szTipo,sTipo);
                sprintf( szAux, "szTipo  [%s]", szTipo.arr ); //oLog.logDebug( szAux );
                
                qtlinhas++; 

                // EXEC SQL WHENEVER SQLERROR GOTO sqlError;

                EXEC SQL
                select  u.idpessoausuario
                into    :idUsr
                from    acesso.usuario u
                where   u.nmloginusuario=trim(:szLogin);
                
                endOraStr(idUsr);
                
                EXEC SQL
                select  tp.idtiporelacionamento
                into    :idTp
                from    customer.tiporelacionamento tp
                where   tp.SGTIPORELACIONAMENTO = trim(:szTipo) ;
                
                endOraStr(idTp);
                
                //código looser mas é pra ficar bonitinho...
                if(sqlca.sqlcode == 1403)
                {
                    qtlinhasE++;
					sprintf(szAux, "ERRO no processamento - [%s] - Mensagem [%s].", szBuffer, sqlca.sqlerrm.sqlerrmc);
					oLog.logDebug(szAux);
                }
            
                if (sqlca.sqlcode != 1403)
                {
			    	sprintf( szAux, "Atualizando registro IDPESSOA [%s], NRDOCUMENTO [%s], IDTIPORELACIONAMENTO [%s]\n",
                                     (char*)idUsr.arr, (char*)szCNPJ.arr, (char*)idTp.arr );
                    //oLog.logDebug( szAux );
                    
                    EXEC SQL WHENEVER SQLERROR GOTO errUpdate;                  
                    
                    EXEC SQL
                    UPDATE CUSTOMER.PESSOACONSULTOR
                    SET IDUSUARIOALTERACAO = 666 ,
                        DTULTIMAALTERACAO = SYSDATE ,
                        IDPESSOA = :idUsr
                    WHERE
                        /* IDPESSOA = :idUsr */
                        NRDOCUMENTO = :szCNPJ
                    AND IDTIPORELACIONAMENTO = :idTp;
                    
                    sprintf( szAux, "sqlca.sqlerrd[2] =  [%d]\n", sqlca.sqlerrd[2] );
                    //oLog.logDebug( szAux );
                    
                    if( sqlca.sqlerrd[2] == 0 )
                    {
                        //oLog.logDebug( "Nao encontrou registro, realizando insert de registro." );
                        
                        EXEC SQL WHENEVER SQLERROR GOTO errInsertInto;  
                        
                        EXEC SQL
                        Insert into CUSTOMER.PESSOACONSULTOR
                        (
                           IDPESSOA, 
                           NRDOCUMENTO, 
                           IDTIPORELACIONAMENTO, 
                           IDUSUARIOALTERACAO, 
                           DTULTIMAALTERACAO
                        ) 
                        values
                        (
                           :idUsr,
                           :szCNPJ,
                           :idTp,
                           666,
                           sysdate
                        );
                        
                        sprintf( szAux, "Inclusão do registro IDPESSOA [%s], NRDOCUMENTO [%s], IDTIPORELACIONAMENTO [%s] realizado com sucesso.\n",
                                         (char*)idUsr.arr, (char*)szCNPJ.arr, (char*)idTp.arr );
                        //oLog.logDebug( szAux );
                    }
                    else
                    {
                        sprintf( szAux, "Atualização do registro IDPESSOA [%s], NRDOCUMENTO [%s], IDTIPORELACIONAMENTO [%s] realizado com sucesso.\n",
                                         (char*)idUsr.arr, (char*)szCNPJ.arr, (char*)idTp.arr );
                        //oLog.logDebug( szAux );
                    }
                    
                    EXEC SQL COMMIT;
                    
                    if (sqlca.sqlcode < 0)
                    {
                        qtlinhasE++;
                        sprintf(szAux, "ERRO no processamento - [%s] - Mensagem [%s].\n", szBuffer, sqlca.sqlerrm.sqlerrmc);
                        oLog.logDebug(szAux);
                    }
                    continue;
                    
                    errUpdate:
                        qtlinhasE++;                    
                        sprintf(szAux, "ERRO na tentativa de UPDATE do registro - [%s] - Mensagem [%s].\n", szBuffer, sqlca.sqlerrm.sqlerrmc);
                        oLog.logDebug(szAux);
                        continue;

                    errInsertInto:
                        qtlinhasE++;
                        sprintf(szAux, "ERRO na tentativa de INSERT do registro - [%s] - Mensagem [%s].\n", szBuffer, sqlca.sqlerrm.sqlerrmc);
                        oLog.logDebug(szAux);
                        continue;
                }
            }
        
        sprintf(szAux, "Arquivo Processado - qtlinhas [%d] - qterros [%d].\n", qtlinhas, qtlinhasE);
        oLog.logDebug(szAux);

        sprintf(szMvfile,"mv %s/%s %s/%s.PRC", tParamConf.szPath, szNomeArquivoFull, tParamConf.szPath, szNomeArquivoFull);
        system(szMvfile);
    }

            

    /*********************************************************************************/
    // finaliza
    oLog.logDebug( "Fechando conexao com o banco" );
    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<cargaConsultor");

    return retorno;

    sqlError1:
        sprintf(szAux, "*** ERRO: Processo FINALIZADO com erro ORACLE (%s)", sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return -1;
}


/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];
    char szAux[1024];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    //oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); //oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); //oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); //oLog.logDebug(szAux);

    system(sComando);
}



/************************************************************************************************************/
int ObtemParamConf( TParamConf * ptParamConf )
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];
    char szAux[1024];

    //oLog.logDebug("Obtendo parametros de configuracao...");

    memset( ptParamConf, 0x00, sizeof(TParamConf) );
    memset( szLinha    , 0x00, sizeof(szLinha) );
    memset( szDivArq   , 0x00, sizeof(szDivArq) );
    memset( szDivPre   , 0x00, sizeof(szDivPre) );


    /* Define o arquivo de configuração */
    mfConfig.setPath("cargaConsultor.cfg");

    if( !mfConfig.abrir() )
    {
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv( '=' );
    while( mfConfig.getLine(szLinha) )
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); //oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); //oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }

    //oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}



/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    char szAux[1024];
    
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);
    //oLog.logInformation(connString);

    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    //oLog.logInformation("<<<DBConnect [ERROR]");
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
    return -1;
}



/************************************************************************************************************/
void DBDisconnect( void )
{
    char szAux[1024];
    
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}

int OpenDir(char *pszDiretorio,char*pfile)
{
    static DIR *pDir;
    static struct dirent *pDirent;
    static char szArq[512 + 1];
    static int iFlag=1;

    char szAux[1024];

    oLog.logDebug(">>> OpenDir");
    sprintf(szAux, "pszDiretorio[%s]", pszDiretorio); oLog.logDebug(szAux);

    if(iFlag == 1)
    {
        /* Abre diretorio e verifica sucesso */
        if( (pDir = opendir(pszDiretorio)) == NULL)
        {
            sprintf(szAux, "Erro abrindo diretorio [%s]. errno(%d) strerror[%s]", pszDiretorio, errno, strerror(errno)); oLog.logError(szAux);
            exit(-1);
        }

        iFlag=0;
    }

    /* Efetua a leitura dos nomes dos arquivos do diretorio */
    while((pDirent = readdir(pDir)) != NULL )
    {
        sprintf(szAux, "Arquivo obtido[%s]", pDirent->d_name); oLog.logDebug(szAux);

        /* valida arquivo */
        //if((!memcmp(pDirent->d_name+strlen(pDirent->d_name)-4, ".txt", 4)))
        if ( !stricmp((pDirent->d_name+(strlen(pDirent->d_name)-4)), ".txt") )
        {
            /* Monta path + nome do arquivo a ser processado */
            strcpy(szArq, pDirent->d_name);
            sprintf(szAux, "Arquivo validado [%s]", szArq); oLog.logDebug(szAux);

            oLog.logDebug("<<< OpenDir <NOT NULL>");
            strcpy(pfile,szArq);
            return 1;
        }
    }

    closedir(pDir);
    iFlag=1;
    oLog.logDebug("<<< OpenDir <NULL>");
    return 0;
}


int obtemRegistro(char*pszLinha ,int qtParam, char *pszLogin, char *pszCNPJ, char* pszTipo)
{
    int     iSeparador=0;
	//	printf("\n>>obtemRegistro");
	    //oLog.logDebug(">>>obtemRegistro");
	while(iSeparador<qtParam &&strlen(pszLinha)>qtParam)
    {
        
			/*memset(&szLogin,0,sizeof(szLogin));
				memset(&szCNPJ,0,sizeof(szCNPJ));
				memset(&szTipo,0,sizeof(szTipo));*/
			
			//printf("\n while.. qtParam=>%d",qtParam);
        switch(iSeparador)
        {
					case 0:
						strcpy(pszLogin,strtok(pszLinha,"|"));
					//printf("\n pszLogin=>%s",pszLogin);
                    break;
					case 1:
						strcpy(pszCNPJ,strtok(NULL,"|"));
						//printf("\n pszCNPJ=>%s",pszCNPJ);
                    break;
					case 2:
						strcpy(pszTipo,strtok(NULL,"|"));
						///printf("\n pszTipo=>%s",pszTipo);
                    break;

				}
        iSeparador++;
    }
	//oLog.logDebug("<<<obtemRegistro");
    return 1;

}



void TrataBuffer( char * buffer )
{
    char tmp[256];
    int len;
    
    memset( tmp, 0x0, sizeof(tmp) );
    strcpy( tmp, buffer );
    len = strlen(tmp);
    
    for(int i=0; i < len; i++ )
    {
        if (tmp[i] == 0x0)
           break;
           
        if ( tmp[i] == 0x0a || tmp[i] == 0x0d )
        {
            tmp[i] = 0x0;
            break;
        }
    }
    strcpy( buffer, tmp );
    
}
