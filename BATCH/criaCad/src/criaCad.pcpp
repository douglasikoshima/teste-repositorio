#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <ctype.h>
#include <dirent.h>

#include <tuxfw.h>

#include <criaCad.h>

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

extern errno;

EXEC SQL INCLUDE SQLCA;

char szAux[4096 + 1];
Log oLog;
int iSignalProcessa=1;
int iDeclaraCursor=1;
char szDataHoraGlobal[19 + 1];
long iErrorNumber=0;
char szErrorOut[255 + 1];

//inprocessado = 0 -> Carga Efetuada
//               1 -> Processado com sucesso
//               2 -> Erro enviando para o GRVNOVOPRE
//               10 -> Verificado para nao processar

int main(int argc, char **argv)
{
    int iQtdReg=1000;
    int iFlagEOF=0;
    int iRetSendXML;
    int iCountCommit=0;
    bool bArquivoProcessado=false;

    char *pArquivoEntrada=NULL;
    TDadosEntrada *ptDadosEntrada=NULL;

    char szXml[4000 + 1];

    char szStatusCode[255 + 1];
    char szStatusText[255 + 1];
    char szRetMsg[512 + 1];
    char *pPointer;

    char szIdCadPrepago[21 + 1];
    char szNmPessoa[255 + 1];
    char szDsSexo[1 + 1];
    char szDtNascimento[14 + 1];
    char szNrCpf[255 + 1];
    char szCdAreaRegistro[255 + 1];
    char szNrLinha[21 + 1];
    char szNmEndereco[255 + 1];
    char szNrEndereco[255 + 1];
    char szNmComplemento[255 + 1];
    char szNmBairro[255 + 1];
    char szNmMunicipio[255 + 1];
    char szNrCep[255 + 1];
    char szSgUf[255 + 1];
    char szInSmsProt[21 + 1];
    char szInSmsProm[21 + 1];
    char szInSmsProd[21 + 1];
    char szInSmsParc[21 + 1];

    TParamConf tParamConf;

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdCadPrepago[21];
        VARCHAR oszNmPessoa[255];
        VARCHAR oszDsSexo[1];
        VARCHAR oszDtNascimento[14];
        VARCHAR oszNrCpf[255];
        VARCHAR oszCdAreaRegistro[255];
        VARCHAR oszNrLinha[21];
        VARCHAR oszNmEndereco[255];
        VARCHAR oszNrEndereco[255];
        VARCHAR oszNmComplemento[255];
        VARCHAR oszNmBairro[255];
        VARCHAR oszNmMunicipio[255];
        VARCHAR oszNrCep[255];
        VARCHAR oszSgUf[255];
        VARCHAR oszInSmsProt[21];
        VARCHAR oszInSmsProm[21];
        VARCHAR oszInSmsProd[21];
        VARCHAR oszInSmsParc[21];
        
        short oiDsSexo = 0;
        short oiNmComplemento = 0;

        int oiRownum;
    EXEC SQL END DECLARE SECTION;


    // Acertando o nivel de logs
    oLog.setNivel(2);
    oLog.logDebug(">>>criaCad\n");

    ArmaSinal(SIGTERM);

    /* Obtem a data e hora atual e armazena em variavel global */
    strcpy(szDataHoraGlobal, ObtemDataHora());

    if(ObtemParamConf(&tParamConf, argv[0])) {
        oLog.logError("Erro obtendo parametros de configuracao\n");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    /* Conecta no banco de dados */
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst)) {
        oLog.logError("Erro conectando no banco de dados\n");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...\n");


    oLog.logDebug("Inicializando TUXEDO...\n");
    /* Inicializa o TUXEDO */
    if(TUXinit(&tParamConf)) {
        oLog.logError("Erro inicializando TUXEDO\n");
        return -2;
    }
    oLog.logDebug("Inicializado com sucesso...\n");

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    while((pArquivoEntrada = OpenDir(tParamConf.szPath)) != NULL)
    {
        oLog.logDebug("Inicio da carga...\n");
        while((ptDadosEntrada = leArquivo(tParamConf.szPath, pArquivoEntrada)) != NULL)
        {
            bArquivoProcessado=true;
            sprintf(szAux, "ptDadosEntrada->szNomeCliente[%s]", ptDadosEntrada->szNomeCliente);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szCpf[%s]", ptDadosEntrada->szCpf);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szDDD[%s]", ptDadosEntrada->szDDD);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szNrLinha[%s]", ptDadosEntrada->szNrLinha);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szDtNascimento[%s]", ptDadosEntrada->szDtNascimento);oLog.logDebug(szAux);
            if(strlen(ptDadosEntrada->szDtNascimento) == 1)
            {
                strcpy(ptDadosEntrada->szDtNascimento, "01011900");
                sprintf(szAux, "ptDadosEntrada->szDtNascimento[%s]", ptDadosEntrada->szDtNascimento);oLog.logDebug(szAux);
            }
            sprintf(szAux, "ptDadosEntrada->szCep[%s]", ptDadosEntrada->szCep);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szEndereco[%s]", ptDadosEntrada->szEndereco);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szNrEndereco[%s]", ptDadosEntrada->szNrEndereco);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szComplemento[%s]", ptDadosEntrada->szComplemento);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szBairro[%s]", ptDadosEntrada->szBairro);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szMunicipio[%s]", ptDadosEntrada->szMunicipio);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szUf[%s]", ptDadosEntrada->szUf);oLog.logDebug(szAux);
            sprintf(szAux, "ptDadosEntrada->szSexo[%s]", ptDadosEntrada->szSexo);oLog.logDebug(szAux);


            if(InsereRegistro(ptDadosEntrada) == false)
            {
                sprintf(szAux, "Erro no processo de insercao ERROR[%s]", szErrorOut);oLog.logDebug(szAux);
                goto finalizaProcess;
            }

            iCountCommit++;

            if(iCountCommit == iQtdReg)
            {
                oLog.logDebug("Efetuando commit na BD...");
                EXEC SQL COMMIT;
                oLog.logDebug("Commit efetuado com sucesso na BD...\n\n");
                iCountCommit=0;
            }
        }

        leArquivo(NULL, NULL); // Fecha Arquivo de Entrada

        if(renomeiaArquivo(tParamConf.szPath, pArquivoEntrada) != 0)
        {
            sprintf(szAux, "errno(%d)", errno);oLog.logDebug(szAux);
            sprintf(szAux, "Erro no processo de renomeio do arquivo processado[%s]", strerror(errno));oLog.logDebug(szAux);
            goto finalizaProcess;
        }
        oLog.logDebug("Final da carga...\n\n");
    }

    oLog.logDebug("Efetuando commit na BD...");
    EXEC SQL COMMIT;
    oLog.logDebug("Commit efetuado com sucesso na BD...\n\n");
    
    
    sprintf(szAux, "iSignalProcessa(%d)", iSignalProcessa);oLog.logDebug(szAux);    
    if(bArquivoProcessado == true)
    {
        oLog.logDebug("Inicio da verificacao das linhas que jah constam na BD...");
        while(iSignalProcessa == 1) {
            if(iDeclaraCursor == 1) {
                oiRownum=iQtdReg;
    
                /* declara cursor para busca dos xml´s a serem enviados */
                EXEC SQL DECLARE VerificaCadastro CURSOR FOR
                    SELECT
                        idcadprepago
                    FROM
                    (
                        SELECT /*+ FULL (llb) FULL(llt) FULL(cpl) */ DISTINCT
                            lcpp.idcadprepago
                        FROM
                            linha.linhabase llb,
                            apoio.arearegistro aar,
                            load.cadprepago lcpp,
                            linha.linhatelefonica llt,
                            customer.pessoalinha cpl
                        WHERE
                            llb.idarearegistro = aar.idarearegistro
                        AND aar.cdarearegistro = lcpp.cdarearegistro
                        AND llb.nrlinha = lcpp.nrlinha
                        AND llb.idlinhabase = llt.idlinhabase
                        AND llt.idlinhatelefonica = cpl.idlinhatelefonica
                        AND lcpp.inprocessado = 0
                    )
                    WHERE
                      ROWNUM <= :oiRownum;
    
    
                sprintf(szAux, "Declarando cursor de (%d) registros...\n\n", oiRownum);oLog.logDebug(szAux);
                iDeclaraCursor=0;
            } //if(iDeclaraCursor == 1)
    
            oLog.logDebug("Abrindo cursor...\n");
            EXEC SQL OPEN VerificaCadastro;
    
            for(;;) {
    
                if(iSignalProcessa == 0) {
                    oLog.logDebug("3.Tratamento de sinal de termino dentro do loop\n");
                    break;
                }
    
                EXEC SQL
                    FETCH VerificaCadastro
                    INTO    :oszIdCadPrepago;
    
                sprintf(szAux, "FETCH ->sqlca.sqlcode(%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
                if(sqlca.sqlcode == 1403) {
                    if(iFlagEOF == 0) {
                        oLog.logDebug("Finalizando...\n");
                        iSignalProcessa=0;
                        break;
                    }
    
                    iFlagEOF=0;
                    break;
                }
                iFlagEOF=1;
    
    
                STRCPY_FROM_ORA(szIdCadPrepago,    oszIdCadPrepago);    sprintf(szAux, "szIdCadPrepago[%s]\n",      szIdCadPrepago);    oLog.logDebug(szAux);
    
                EXEC SQL
                    UPDATE
                        load.cadprepago lcpp
                    SET
                        lcpp.inprocessado = 10,
                        lcpp.dtultimaalteracao = SYSDATE,
                        lcpp.cderro = '01',
                        lcpp.dserro = 'LINHA JA EXISTENTE',
                        lcpp.dterro = SYSDATE
                    WHERE
                        lcpp.idcadprepago = :oszIdCadPrepago;
    
            }
            
            oLog.logDebug("Efetuando commit na BD...");
            EXEC SQL COMMIT;
            oLog.logDebug("Commit efetuado com sucesso na BD...\n\n");
    
            oLog.logDebug("Fechando cursor...");
            EXEC SQL CLOSE VerificaCadastro;
            iDeclaraCursor=1;
        } // while(iSignalProcessa == 1)
        oLog.logDebug("Final da verificacao das linhas que jah constam na BD...\n\n");
        
        oLog.logDebug("Efetuando commit na BD...");
        EXEC SQL COMMIT;
        oLog.logDebug("Commit efetuado com sucesso na BD...\n\n");
        iSignalProcessa=0;
    } //if(bArquivoProcessado == true)



    iDeclaraCursor=1;
    sprintf(szAux, "iSignalProcessa(%d)", iSignalProcessa);oLog.logDebug(szAux);    
    while(iSignalProcessa == 1) {

        if(iDeclaraCursor == 1) {
            oiRownum=iQtdReg;

            /* declara cursor para busca dos xml´s a serem enviados */
            EXEC SQL DECLARE Cadastro CURSOR FOR
                SELECT
                    idcadprepago,
                    nmpessoa,
                    dssexo,
                    dtnascimento,
                    nrcpf,
                    cdarearegistro,
                    nrlinha,
                    nmendereco,
                    nrendereco,
                    nmcomplemento,
                    nmbairro,
                    nmmunicipio,
                    nrcep,
                    sguf,
                    insmsprot,
                    insmsprom,
                    insmsprod,
                    insmsparc
                FROM
                (
                    SELECT
                        lcp.idcadprepago,
                        lcp.nmpessoa,
                        lcp.dssexo,
                        TO_CHAR(lcp.dtnascimento, 'DDMMYYYY') as dtnascimento,
                        lcp.nrcpf,
                        lcp.cdarearegistro,
                        lcp.nrlinha,
                        lcp.nmendereco,
                        lcp.nrendereco,
                        lcp.nmcomplemento,
                        lcp.nmbairro,
                        lcp.nmmunicipio,
                        lcp.nrcep,
                        replace(lcp.sguf,chr(13)),
                        lcp.insmsprot,
                        lcp.insmsprom,
                        lcp.insmsprod,
                        lcp.insmsparc
                    FROM
                        load.cadprepago lcp
                    WHERE
                        lcp.inprocessado = 0
                    ORDER BY
                        lcp.idcadprepago
                )
                WHERE
                  ROWNUM <= :oiRownum;


            sprintf(szAux, "Declarando cursor de (%d) registros...", oiRownum);oLog.logDebug(szAux);
            iDeclaraCursor=0;
        } //if(iDeclaraCursor == 1)

        oLog.logDebug("Abrindo cursor...\n");
        EXEC SQL OPEN Cadastro;

        for(;;Sumariza(0, 0, 0, 0, 1)) {

            if(iSignalProcessa == 0) {
                oLog.logDebug("3.Tratamento de sinal de termino dentro do loop\n");
                break;
            }

            EXEC SQL
                FETCH Cadastro
                INTO    :oszIdCadPrepago,
                        :oszNmPessoa,
                        :oszDsSexo:oiDsSexo,
                        :oszDtNascimento,
                        :oszNrCpf,
                        :oszCdAreaRegistro,
                        :oszNrLinha,
                        :oszNmEndereco,
                        :oszNrEndereco,
                        :oszNmComplemento:oiNmComplemento,
                        :oszNmBairro,
                        :oszNmMunicipio,
                        :oszNrCep,
                        :oszSgUf,
                        :oszInSmsProt,
                        :oszInSmsProm,
                        :oszInSmsProd,
                        :oszInSmsParc;

            sprintf(szAux, "FETCH ->sqlca.sqlcode(%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
            if(sqlca.sqlcode == 1403) {
                if(iFlagEOF == 0) {
                    oLog.logDebug("Finalizando...\n");
                    iSignalProcessa=0;
                    break;
                }

                iFlagEOF=0;
                break;
            }
            iFlagEOF=1;


            STRCPY_FROM_ORA(szIdCadPrepago,    oszIdCadPrepago);    sprintf(szAux, "szIdCadPrepago[%s]\n",      szIdCadPrepago);    oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNmPessoa,        oszNmPessoa);        sprintf(szAux, "szNmPessoa[%s]\n",          szNmPessoa);        oLog.logDebug(szAux);
            if(oiDsSexo != -1)
            {
                STRCPY_FROM_ORA(szDsSexo,          oszDsSexo);          sprintf(szAux, "szDsSexo[%s]\n",            szDsSexo);          oLog.logDebug(szAux);
            }
            else
            {
                memset(szDsSexo, 0x00, sizeof(szDsSexo));
            }
            STRCPY_FROM_ORA(szDtNascimento,    oszDtNascimento);    sprintf(szAux, "szDtNascimento[%s]\n",      szDtNascimento);    oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNrCpf,           oszNrCpf);           sprintf(szAux, "szNrCpf[%s]\n",             szNrCpf);           oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szCdAreaRegistro,  oszCdAreaRegistro);  sprintf(szAux, "szCdAreaRegistro[%s]\n",    szCdAreaRegistro);  oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNrLinha,         oszNrLinha);         sprintf(szAux, "szNrLinha[%s]\n",           szNrLinha);         oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNmEndereco,      oszNmEndereco);      sprintf(szAux, "szNmEndereco[%s]\n",        szNmEndereco);      oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNrEndereco,      oszNrEndereco);      sprintf(szAux, "szNrEndereco[%s]\n",        szNrEndereco);      oLog.logDebug(szAux);
            if(oiNmComplemento != -1)
            {
               STRCPY_FROM_ORA(szNmComplemento,   oszNmComplemento);   sprintf(szAux, "szNmComplemento[%s]\n",     szNmComplemento);   oLog.logDebug(szAux);
            }
            else
            {
                memset(szNmComplemento, 0x00, sizeof(szNmComplemento));
            }
            STRCPY_FROM_ORA(szNmBairro,        oszNmBairro);        sprintf(szAux, "szNmBairro[%s]\n",          szNmBairro);        oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNmMunicipio,     oszNmMunicipio);     sprintf(szAux, "szNmMunicipio[%s]\n",       szNmMunicipio);     oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szNrCep,           oszNrCep);           sprintf(szAux, "szNrCep[%s]\n",             szNrCep);           oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szSgUf,            oszSgUf);            sprintf(szAux, "szSgUf[%s]\n",              szSgUf);            oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szInSmsProt,       oszInSmsProt);       sprintf(szAux, "szInSmsProt[%s]\n",         szInSmsProt);       oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szInSmsProm,       oszInSmsProm);       sprintf(szAux, "szInSmsProm[%s]\n",         szInSmsProm);       oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szInSmsProd,       oszInSmsProd);       sprintf(szAux, "szInSmsProd[%s]\n",         szInSmsProd);       oLog.logDebug(szAux);
            STRCPY_FROM_ORA(szInSmsParc,       oszInSmsParc);       sprintf(szAux, "szInSmsParc[%s]\n",         szInSmsParc);       oLog.logDebug(szAux);

            /* reformata o XML para envio */
            sprintf(szXml,
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
            "<msg>"
                "<msgHdr>"
                    "<user>1</user>"
                    "<service>GRVNOVOPRE</service>"
                "</msgHdr>"
                "<msgBody>"
                    "<URENPrePagoVO>"
                        "<cdTransacao>UREN</cdTransacao>" // validar
                        "<interceptacao>1</interceptacao>"
                        "<estadoLinha>1</estadoLinha>"
                        "<cdUsuario>1234</cdUsuario>" // validar
						"<idCanal>666</idCanal>"
                        "<cdDDD>%s</cdDDD>"
                        "<cdNumTelefone>%s</cdNumTelefone>"
                        "<nmCliente>%s</nmCliente>"
                        "<cdSexo>%s</cdSexo>"
                        "<dtNascimento>%s</dtNascimento>"
                        "<dsEndereco>%s</dsEndereco>"
                        "<nrEndereco>%s</nrEndereco>"
                        "<dsComplemento>%s</dsComplemento>"
                        "<dsBairro>%s</dsBairro>"
                        "<dsMunicipio>%s</dsMunicipio>"
                        "<nrCEP>%s</nrCEP>"
                        "<sgUF>%s</sgUF>"
                        "<nrCPF>%s</nrCPF>"
                        "<cdTipoPessoa>1</cdTipoPessoa>" // validar
                        "<operacao>1</operacao>"
                        "<SMSPROT>%s</SMSPROT>"
                        "<SMSPROM>%s</SMSPROM>"
                        "<SMSPROD>%s</SMSPROD>"
                        "<SMSPARC>%s</SMSPARC>"
                    "</URENPrePagoVO>"
                "</msgBody>"
            "</msg>",

            szCdAreaRegistro,
            szNrLinha,
            szNmPessoa,
            szDsSexo,
            szDtNascimento,
            szNmEndereco,
            szNrEndereco,
            szNmComplemento,
            szNmBairro,
            szNmMunicipio,
            szNrCep,
            szSgUf,
            szNrCpf,
            szInSmsProt,
            szInSmsProm,
            szInSmsProd,
            szInSmsParc);

            sprintf(szAux, "szXml[%s]", szXml); oLog.logDebug(szAux);

            memset(szRetMsg, 0x00, sizeof(szRetMsg));
            iRetSendXML = sendXML(szXml, szRetMsg);

            sprintf(szAux, "iRetSendXML(%d)iErrorNumber(%d)szRetMsg[%s]\n", iRetSendXML, iErrorNumber, szRetMsg); oLog.logDebug(szAux);

            /* Verifica status do envio do XML e retorno da conexao */
            if(iErrorNumber == TPESYSTEM) {
                sprintf(szAux, "Erro TUXEFO retornado(%d)\n", iErrorNumber); oLog.logDebug(szAux);
                goto finalizaProcess;
            }


            /* Obtem os valores das tags de retorno do XML */
            pPointer = ObtemValorTag(szRetMsg, "statusCode"); sprintf(szAux, "statusCode->pPointer[%s]\n", pPointer?pPointer:"...NULL..."); oLog.logDebug(szAux);
            strcpy(szStatusCode, pPointer?pPointer:"statusCode NULO");
            pPointer = ObtemValorTag(szRetMsg, "statusText"); sprintf(szAux, "statusText->pPointer[%s]\n", pPointer?pPointer:"...NULL..."); oLog.logDebug(szAux);
            strcpy(szStatusText, pPointer?pPointer:"statusText NULO");


            if(szStatusCode[2] == 'I') {
                sprintf(szAux, "Atualizando registro enviado com sucesso:\nidcadprepago[%s]\n[%s]\n", szIdCadPrepago, szXml); oLog.logDebug(szAux);

                if(AtualizaRegistroOK(szIdCadPrepago) == false) {
                    goto finalizaProcess;
                }

                Sumariza(0, 0, 1, 0, 0);
            }
            else /* Grava Codigo de erro e mensagem */
            {
                sprintf(szAux, "Atualizando registro com erro:\nidcadprepago[%s]\n[%s]\n", szIdCadPrepago, szXml); oLog.logDebug(szAux);

                if(AtualizaRegistroErro(szIdCadPrepago, szStatusCode, szStatusText) == false) {
                    goto finalizaProcess;
                }

                Sumariza(0, 0, 0, 1, 0);
            }

            Sumariza(1, 0, 0, 0, 0);

        }// for(;;Sumariza(0, 0, 0, 0, 1))
        
        oLog.logDebug("Efetuando commit na BD...");
        EXEC SQL COMMIT;
        oLog.logDebug("Commit efetuado com sucesso na BD...\n\n");

        Sumariza(0, 1, 0, 0, 0);
        Sumariza(0, 0, 0, 0, 0);

        oLog.logDebug("Fechando cursor...");
        EXEC SQL CLOSE Cadastro;
        iDeclaraCursor=1;
    } // while(iSignalProcessa == 1)

    oLog.logDebug("Finalizando conexao TUXEDO...\n");
    tpterm();

    oLog.logDebug("Desconectando da BD...\n");
    DBDesconect();

    oLog.logDebug("Processamento encerrado com sucesso...\n");
    oLog.logDebug("<<<criaCad\n");

    return 0;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;

    /* Tratamento de erro de processamento */
    finalizaProcess:
        oLog.logDebug("Finalizando processo...\n");
        oLog.logDebug("Fechando cursor...\n");
        EXEC SQL CLOSE Cadastro;

        oLog.logDebug("Finalizando conexao TUXEDO...\n");
        tpterm();

        oLog.logDebug("Desconectando da BD...\n");
        DBDesconect();

        oLog.logDebug("<<<criaCad\n");
        return -1;
}

/************************************************************************************************************/
void Sumariza(int iQtdRegCursor, int iQtdLoops, int iQtdTotalRegOK, int iQtdTotalRegErro, int iQtdTotalReg)
{
    static int _iQtdRegCursor=0;
    static int _iQtdLoops=0;
    static int _iQtdTotalRegOK=0;
    static int _iQtdTotalRegErro=0;
    static int _iQtdTotalReg=0;
    static char szDataHoraAux[19 + 1];
    static int iFlag=1;



    if(!iQtdRegCursor && !iQtdLoops && !iQtdTotalRegOK && !iQtdTotalRegErro && !iQtdTotalReg) {

        if(iFlag) {
            sprintf(szDataHoraAux, "%.2s/%.2s/%.4s %.2s:%.2s:%.2s",
                                    szDataHoraGlobal+6,
                                    szDataHoraGlobal+4,
                                    szDataHoraGlobal,
                                    szDataHoraGlobal+8,
                                    szDataHoraGlobal+10,
                                    szDataHoraGlobal+12);
            iFlag=0;
        }

        sprintf(szAux, "***************** START  %s  **********************\n", szDataHoraAux); oLog.logDebug(szAux);
        sprintf(szAux, "Total de verificacoes efetuadas...................(%06d)\n", _iQtdLoops); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados por cursor.........(%06d)\n", _iQtdRegCursor); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados com sucesso........(%06d)\n", _iQtdTotalRegOK); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados com erro...........(%06d)\n", _iQtdTotalRegErro); oLog.logDebug(szAux);
        sprintf(szAux, "Total de registros processados....................(%06d)\n", _iQtdTotalReg); oLog.logDebug(szAux);
        sprintf(szAux, "********************************************************************\n"); oLog.logDebug(szAux);

        _iQtdRegCursor=0;

        return;
    }

    if(iQtdRegCursor)       _iQtdRegCursor++;
    if(iQtdLoops)           _iQtdLoops++;
    if(iQtdTotalRegOK)      _iQtdTotalRegOK++;
    if(iQtdTotalRegErro)    _iQtdTotalRegErro++;
    if(iQtdTotalReg)        _iQtdTotalReg++;
}

/************************************************************************************************************/
char *ObtemDataHora(void)
{
    struct tm *ptTime;
    time_t tTimeNow;
    static char szDataHora[14 + 1];

    time(&tTimeNow);
    ptTime=localtime(&tTimeNow);
    sprintf(szDataHora, "%04d%02d%02d%02d%02d%02d",
                        ptTime->tm_year + 1900,
                        ptTime->tm_mon + 1,
                        ptTime->tm_mday,
                        ptTime->tm_hour,
                        ptTime->tm_min,
                        ptTime->tm_sec );

    return szDataHora;
}

/************************************************************************************************************/
char *obtemDado(char *pszString)
{
    static char szCampo[255 + 1];
    static int iCounter=0;
    register int iPosicao;
    int iLen;
    
    memset(szCampo, 0x00, sizeof(szCampo));
    iLen=strlen(pszString);
    // sprintf(szAux, "iLen(%d)", iLen); oLog.logDebug(szAux);
    
    for(iPosicao=0; pszString[iCounter]!= DIVISOR_DE_CAMPO && iCounter < iLen; iPosicao++, iCounter++)
    {
        szCampo[iPosicao] = pszString[iCounter];
    }

    // sprintf(szAux, "iPosicao(%d) iCounter(%d)", iPosicao, iCounter); oLog.logDebug(szAux);
    // sprintf(szAux, "szCampo[%s]", szCampo); oLog.logDebug(szAux);
    
    if(iCounter > iLen)
    {
        iCounter=0;
        return NULL;
    }
    else
    {
        iCounter++;
        return szCampo;    
    }        
}

/************************************************************************************************************/
char *ObtemValorTag(char *pXml, char *pTag)
{
    static char szValue[255 + 1];
    char szXmlAux[1024 + 1];
    char *pTok;
    int iFlag=0;

    /* copia string a ser analisada para buffer local (strtok altera o ponteiro de entrada) */
    strcpy(szXmlAux, pXml);

    for(pTok = strtok(szXmlAux, "<>"); pTok != NULL; pTok = strtok(NULL, "<>")) {
        if(iFlag) {
            strcpy(szValue, pTok);
            iFlag=0;

            return szValue;
        }

        if(!strcmp(pTag, pTok)) {
            iFlag=1;
        }
    }

    return NULL;
}

/************************************************************************************************************/
char *OpenDir(char *pszDiretorio)
{
    static DIR *pDir;
    static struct dirent *pDirent;
    static char szArq[512 + 1];
    static int iFlag=1;

    oLog.logDebug(">>> OpenDir");
    sprintf(szAux, "pszDiretorio[%s]", pszDiretorio); oLog.logDebug(szAux);

    if(iFlag == 1)
    {
        /* Abre diretorio e verifica sucesso */
        if( (pDir = opendir(pszDiretorio)) == NULL)
        {
            sprintf(szAux, "Erro abrindo diretorio [%s]. errno(%d) strerror[%s]", pszDiretorio, errno, strerror(errno)); oLog.logError(szAux);
            exit(-1);
        }

        iFlag=0;
    }

    /* Efetua a leitura dos nomes dos arquivos do diretorio */
    while((pDirent = readdir(pDir)) != NULL )
    {
        sprintf(szAux, "Arquivo obtido[%s]", pDirent->d_name); oLog.logDebug(szAux);

        /* valida arquivo */
        if((!memcmp(pDirent->d_name+strlen(pDirent->d_name)-4, ".TXT", 4)))
        {
            /* Monta path + nome do arquivo a ser processado */
            strcpy(szArq, pDirent->d_name);
            sprintf(szAux, "Arquivo validado [%s]", szArq); oLog.logDebug(szAux);

            oLog.logDebug("<<< OpenDir <NOT NULL>");
            return szArq;
        }
    }

    closedir(pDir);
    iFlag=1;
    oLog.logDebug("<<< OpenDir <NULL>");
    return NULL;
}

/************************************************************************************************************/
TDadosEntrada *leArquivo(char *pszPath, char *pszFileName)
{
    static FILE *pFileIn=NULL;
    static char szNomeArquivo[512 + 1];
    static TDadosEntrada tDadosEntrada;
    static char szStringOut[2048 + 1];

    memset(&tDadosEntrada, 0x00, sizeof(TDadosEntrada));

    if(pFileIn == NULL) {
        sprintf(szNomeArquivo, "%s/%s", pszPath, pszFileName);
        sprintf(szAux, "Abrindo arquivo[%s]", szNomeArquivo); oLog.logDebug(szAux);
        if((pFileIn = fopen(szNomeArquivo, "r")) == NULL) {
            sprintf(szAux, "Erro lendo arquivo[%s]", szNomeArquivo); oLog.logDebug(szAux);
            return NULL;
        }
    }

    if(pszPath != NULL) {
        if(fgets(szStringOut, sizeof(szStringOut), pFileIn) > 0) {
            szStringOut[strlen(szStringOut)-1] = 0x00;
            TrataDadosEntrada(szStringOut, &tDadosEntrada);
            return &tDadosEntrada;
        }
    }
    else {
        sprintf(szAux, "Fechando arquivo de entrada[%s]", szNomeArquivo); oLog.logDebug(szAux);
        fclose(pFileIn);
        pFileIn=NULL;
    }

    return NULL;
}

/************************************************************************************************************/
void TrataDadosEntrada(char *pszStringEntrada, TDadosEntrada *ptDadosEntrada)
{
    static long iLinha=0;
    char *pTok;
    int iCount;
    char szBuffer[255 + 1];
    int iValores[] = {255, 11, 2, 10, 8, 8, 255, 255, 255, 255, 255, 255, 1};

    iLinha++;
    sprintf(szAux, "(%05ld)Linha processada[%s]", iLinha, pszStringEntrada); oLog.logDebug(szAux);

    for(iCount=0; (pTok = obtemDado(pszStringEntrada)) != NULL; iCount++)
    {
        if(strlen(pTok) == 0)
            strcpy(szBuffer, " ");
        else
            strcpy(szBuffer, pTok);
        
        if(strlen(szBuffer) > iValores[iCount])
        {
            sprintf(szAux, "Campo (%d) maior que o definido", iCount+1); oLog.logDebug(szAux);
            exit(-1);
        }
        if(iCount == 0)
            strcpy(ptDadosEntrada->szNomeCliente, szBuffer);
        else if(iCount == 1)
            strcpy(ptDadosEntrada->szCpf, szBuffer);
        else if(iCount == 2)
            strcpy(ptDadosEntrada->szDDD, szBuffer);
        else if(iCount == 3)
            strcpy(ptDadosEntrada->szNrLinha, szBuffer);
        else if(iCount == 4)
            strcpy(ptDadosEntrada->szDtNascimento, szBuffer);
        else if(iCount == 5)
            strcpy(ptDadosEntrada->szCep, szBuffer);
        else if(iCount == 6)
            strcpy(ptDadosEntrada->szEndereco, szBuffer);
        else if(iCount == 7)
            strcpy(ptDadosEntrada->szNrEndereco, szBuffer);
        else if(iCount == 8)
            strcpy(ptDadosEntrada->szComplemento, szBuffer);
        else if(iCount == 9)
            strcpy(ptDadosEntrada->szBairro, szBuffer);
        else if(iCount == 10)
            strcpy(ptDadosEntrada->szMunicipio, szBuffer);
        else if(iCount == 11)
            strcpy(ptDadosEntrada->szUf, szBuffer);
        else if(iCount == 12)
            strcpy(ptDadosEntrada->szSexo, szBuffer);
        else
        {
            oLog.logDebug("Erro no padrao do arquivo de entrada");
            exit(-1);
        }
    }
}

/************************************************************************************************************/
int renomeiaArquivo(char *pszPath, char *pszArquivoEntrada)
{
    char szArquivoEntrada[255 + 1];
    char szArquivoSaida[255 + 1];
    int iRet;

    sprintf(szArquivoEntrada, "%s/%s", pszPath, pszArquivoEntrada);
    sprintf(szAux, "szArquivoEntrada[%s]", szArquivoEntrada); oLog.logInformation(szAux);

    strcpy(szArquivoSaida, szArquivoEntrada);
    strcat(szArquivoSaida, ".Processado");
    sprintf(szAux, "szArquivoSaida[%s]", szArquivoSaida); oLog.logInformation(szAux);

    iRet = rename(szArquivoEntrada, szArquivoSaida);
    sprintf(szAux, "iRet(%d)", iRet); oLog.logInformation(szAux);

    return iRet;
}

/************************************************************************************************************/
int TUXinit(TParamConf *ptParamConf)
{
    TPINIT *tpInitInfo;
    int i;

    oLog.logInformation(">>>TUXinit\n");

    if((tpInitInfo = (TPINIT *)tpalloc("TPINIT", (char *)NULL, TPINITNEED(strlen(VIVO_GENERIC_PASSWORD) - 1) )) == (TPINIT *)NULL)
    return tperrno;

    strcpy(tpInitInfo->usrname, ptParamConf->szUsrTux);
    strcpy(tpInitInfo->cltname, ptParamConf->szCltTux);
    strcpy(tpInitInfo->passwd, ptParamConf->szPwsTux);
    strcpy((char *)&tpInitInfo->data, ptParamConf->szPwsTuxGen);

    i = tpinit(tpInitInfo);
    sprintf(szAux, "TPINIT: %i, TPERRNO: %i\n", i, tperrno); oLog.logDebug(szAux);

    oLog.logInformation("<<<TUXinit\n");

//    printf("TUX_USRNAME[%s]\n", TUX_USRNAME);
//    printf("TUX_CLTNAME[%s]\n", TUX_CLTNAME);
//    printf("VIVO_APP_PASSWORD[%s]\n", VIVO_APP_PASSWORD);
//    printf("VIVO_GENERIC_PASSWORD[%s]\n", VIVO_GENERIC_PASSWORD);

    if (i == -1)
        return 1;
    else
        return 0;
}


/************************************************************************************************************/
int sendXML(char *pXmlSaida, char *pRetMsg) {

    char *sendbuf, *rcvbuf;
    long sendlen, rcvlen;

    sendlen = strlen(pXmlSaida);

    // sprintf(szAux, "Tamanho da msg = (%d)\n", sendlen); oLog.logInformation(szAux);

    if((sendbuf = (char *) tpalloc("STRING", NULL, sendlen+1)) == NULL) {
        oLog.logError("Error allocating send buffer\n");
        tpterm();

        return -1;
    }

    if((rcvbuf = (char *) tpalloc("STRING", NULL, sendlen+1)) == NULL) {
        oLog.logError("Error allocating receive buffer\n");
        tpfree(sendbuf);
        tpterm();

        return -1;
    }

    strcpy(sendbuf, pXmlSaida);

    if(tpcall("GRVNOVOPRE", (char *)sendbuf, sendlen, (char **)&rcvbuf, &rcvlen, (long)0) == -1) {
        sprintf(szAux, "Tperrno = %d\n", tperrno); oLog.logError(szAux);
        sprintf(szAux, "rcvbuf[%s]\n", rcvbuf); oLog.logError(szAux);

        iErrorNumber=tperrno;
        strcpy(pRetMsg, rcvbuf);

        tpfree(sendbuf);
        tpfree(rcvbuf);

        return 1;
    }

    iErrorNumber=0;
    strcpy(pRetMsg, rcvbuf);

    tpfree(sendbuf);
    tpfree(rcvbuf);

    return 0;
}

/************************************************************************************************************/
void ArmaSinal(int iSignal) {
    sprintf(szAux, "Armando tratamento para Signal(%d)\n", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR) {
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}

/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal\n");
    sprintf(szAux, "iSig(%d)\n", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM) {
        oLog.logInformation("Finalizando processamento via sinal....\n");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal\n");
}

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf, char *pszExecName)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[81];
    char szDivArq[256];
    char szDivPre[21];
    char szCfgName[256 + 1];

    oLog.logDebug("Obtendo parametros de configuracao...\n");

    /* Zera variáveis */
    memset(ptParamConf, 0, sizeof(TParamConf));
    memset(szLinha, 0, sizeof(szLinha));
    memset(szDivArq, 0, sizeof(szDivArq));
    memset(szDivPre, 0, sizeof(szDivPre));


    /* Monta o nome do arquivo cfg */
    sprintf(szCfgName, "%s.cfg", pszExecName);

    sprintf(szAux, "Arquivo de configuracao[%s]\n", szCfgName); oLog.logInformation(szAux);

    /* Define o arquivo de configuração */
    mfConfig.setPath(szCfgName);

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir()) {
        oLog.logError("Erro abrindo arquivo de configuração!\n");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, 20);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, 10);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, 10);
        }
        else if (strcmp(szDivPre, "clt_tux")==0)
        {
            strncpy(ptParamConf->szCltTux, szDivArq, 10);
        }
        else if (strcmp(szDivPre, "path")==0)
        {
            strncpy(ptParamConf->szPath, szDivArq, 255);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]\n", ptParamConf->szPws); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]\n", ptParamConf->szUsr); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]\n", ptParamConf->szInst); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]\n", ptParamConf->szPwsTux); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]\n", ptParamConf->szUsrTux); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]\n", ptParamConf->szPwsTuxGen); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]\n", ptParamConf->szCltTux); oLog.logInformation(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szCltTux) == 0 )
    {
        oLog.logError("Dados incompletos!\n");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...\n");
    return 0;
}

/************************************************************************************************************/
bool InsereRegistro(TDadosEntrada *ptDadosEntrada)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdCadPrepago[21];

        VARCHAR oszNomeCliente[255];
        VARCHAR oszCpf[11];
        VARCHAR oszDDD[2];
        VARCHAR oszNrLinha[12];
        VARCHAR oszDtNascimento[8];
        VARCHAR oszCep[8];
        VARCHAR oszEndereco[255];
        VARCHAR oszNrEndereco[255];
        VARCHAR oszComplemento[255];
        VARCHAR oszBairro[255];
        VARCHAR oszMunicipio[255];
        VARCHAR oszUf[255];
        VARCHAR oszSexo[1];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    sprintf(szAux, "Inicio InsereRegistro\n"); oLog.logDebug(szAux);

    EXEC SQL WHENEVER SQLERROR goto erro;

    EXEC SQL SELECT load.cadprepagosq.nextval INTO :oszIdCadPrepago FROM DUAL;

    STRCPY_TO_ORA(oszNomeCliente,   ptDadosEntrada->szNomeCliente);
    STRCPY_TO_ORA(oszCpf,           ptDadosEntrada->szCpf);
    STRCPY_TO_ORA(oszDDD,           ptDadosEntrada->szDDD);
    STRCPY_TO_ORA(oszNrLinha,       ptDadosEntrada->szNrLinha);
    STRCPY_TO_ORA(oszDtNascimento,  ptDadosEntrada->szDtNascimento);
    STRCPY_TO_ORA(oszCep,           ptDadosEntrada->szCep);
    STRCPY_TO_ORA(oszEndereco,      ptDadosEntrada->szEndereco);
    STRCPY_TO_ORA(oszNrEndereco,    ptDadosEntrada->szNrEndereco);
    STRCPY_TO_ORA(oszComplemento,   ptDadosEntrada->szComplemento);
    STRCPY_TO_ORA(oszBairro,        ptDadosEntrada->szBairro);
    STRCPY_TO_ORA(oszMunicipio,     ptDadosEntrada->szMunicipio);
    STRCPY_TO_ORA(oszUf,            ptDadosEntrada->szUf);
    STRCPY_TO_ORA(oszSexo,          ptDadosEntrada->szSexo);

    EXEC SQL
        INSERT INTO load.cadprepago
        (
            idcadprepago,
            nmpessoa,
            nrcpf,
            cdarearegistro,
            nrlinha,
            dtnascimento,
            nrcep,
            nmendereco,
            nrendereco,
            nmcomplemento,
            nmbairro,
            nmmunicipio,
            sguf,
            dssexo,
            inprocessado,
            dtultimaalteracao
        )
        VALUES
        (
            :oszIdCadPrepago,
            :oszNomeCliente,
            :oszCpf,
            :oszDDD,
            :oszNrLinha,
            TO_DATE(:oszDtNascimento, 'DDMMYYYY'),
            :oszCep,
            :oszEndereco,
            :oszNrEndereco,
            :oszComplemento,
            :oszBairro,
            :oszMunicipio,
            replace(:oszUf,chr(13)),
            :oszSexo,
            '0',
            SYSDATE
        );

    sprintf(szAux, "Finalizando InsereRegistro <OK>\n", sqlca.sqlcode); oLog.logDebug(szAux);
    return true;

    erro:
        sprintf(szAux, "Finalizando InsereRegistro <ERROR>\n"); oLog.logDebug(szAux);
        sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.*s",sqlca.sqlcode, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        strcpy(szErrorOut, sqlca.sqlerrm.sqlerrmc); szErrorOut[sqlca.sqlerrm.sqlerrml-1]=0x00;
        return false;
}

/************************************************************************************************************/
bool AtualizaRegistroErro(char *pszIdCadPrepago, char *pszStatusCode, char *pszStatusText)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdCadPrepago[21];
        VARCHAR oszCdErro[255];
        VARCHAR oszDsErro[255];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    oLog.logDebug("Inicio AtualizaRegistroErro\n");

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdCadPrepago, pszIdCadPrepago);
    STRCPY_TO_ORA(oszCdErro, pszStatusCode);
    STRCPY_TO_ORA(oszDsErro, pszStatusText);

    EXEC SQL
        UPDATE
            load.cadprepago
        SET
            cderro = :oszCdErro,
            dserro = :oszDsErro,
            dterro = SYSDATE,
            dtultimaalteracao = SYSDATE,
            inprocessado = 2
        WHERE
            idcadprepago = :oszIdCadPrepago;

    oLog.logDebug("Final AtualizaRegistroErro\n");
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
        return false;

    naoexiste:
        sprintf(szAux, "idcadprepago nao encontrado[%s]\n", pszIdCadPrepago); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
bool AtualizaRegistroOK(char *pszIdCadPrepago)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszIdCadPrepago[21];
    EXEC SQL END DECLARE SECTION;

    struct sqlca sqlca;

    oLog.logDebug("Inicio AtualizaRegistroOK\n");

    EXEC SQL WHENEVER SQLERROR goto erro;
    EXEC SQL WHENEVER NOT FOUND goto naoexiste;

    STRCPY_TO_ORA(oszIdCadPrepago, pszIdCadPrepago);

    EXEC SQL
        UPDATE
            load.cadprepago
        SET
            inprocessado = 1,
            cderro = NULL,
            dserro = NULL,
            dterro = NULL,
            dtultimaalteracao = SYSDATE
        WHERE
            idcadprepago = :oszIdCadPrepago;

    oLog.logDebug("Final AtualizaRegistroOK\n");
    return true;

    erro:
        sprintf(szAux, "Finalizando com erro sqlca.sqlcode(%d)\n", sqlca.sqlcode); oLog.logDebug(szAux);
        return false;

    naoexiste:
        sprintf(szAux, "idcadprepago nao encontrado[%s]\n", pszIdCadPrepago); oLog.logDebug(szAux);
        return false;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect\n");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect\n");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]\n");
    return -1;
}

/************************************************************************************************************/
void DBDesconect(void)
{
    oLog.logInformation(">>>DBDesconect\n");

    EXEC SQL WHENEVER SQLERROR GOTO Error;
    // EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDesconect\n");
    return;

Error:
    sprintf(szAux, "Erro! sqlca.sqlcode = %i\n", sqlca.sqlcode); oLog.logError(szAux);
    return;
}
