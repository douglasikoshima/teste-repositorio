/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio
 * @version $Revision: 1.1.2.12.78.1 $
 * @CVS     $Author: a5114878 $ - $Date: 2012/07/12 15:37:57 $
 **/

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#ifdef WIN32
#include <io.h>
#include <direct.h>
#endif
#ifndef WIN32
#include <dirent.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#endif
#include <ctype.h>
#include <errno.h>
#include <time.h>

#include <string>
#include <iostream>
#include <fstream>

#include "../include/cartaoVivoItauCardPC.h"
#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

using namespace std;

EXEC SQL INCLUDE SQLCA;

/************************************************************************************************************/
char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define MAX_RETRIES     10

#define LOCK            1
#define UNLOCK          0
#define KILL            2

#define SAFE_STRNCPY(dst,src) strncpy(dst,src?src:"",sizeof(dst)-1);dst[sizeof(dst)-1]=0;
#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

EXEC SQL BEGIN DECLARE SECTION;
#define TAM_CPO_CPF             11
#define POS_COP_CPF             0
#define TAM_CPO_CDAREAREGISTRO  3
#define POS_COP_CDAREAREGISTRO  POS_COP_CPF + TAM_CPO_CPF
#define TAM_CPO_NRLINHA         9
#define POS_COP_NRLINHA         POS_COP_CDAREAREGISTRO + TAM_CPO_CDAREAREGISTRO
#define TAM_CPO_CODPRODUTO      4
#define POS_COP_CODPRODUTO      POS_COP_NRLINHA + TAM_CPO_NRLINHA
#define TAM_CPO_CODOPERACAO     3
#define POS_COP_CODOPERACAO     POS_COP_CODPRODUTO + TAM_CPO_CODPRODUTO
#define TAM_LINHA               TAM_CPO_CPF+TAM_CPO_CDAREAREGISTRO+\
                                TAM_CPO_NRLINHA+TAM_CPO_CODPRODUTO+\
                                TAM_CPO_CODOPERACAO
EXEC SQL END DECLARE SECTION;

/************************************************************************************************************/

void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino);

// Protótipos
#ifndef WIN32
int Process(char *pszFileName, int iFlagLock);
void UnLockSemaphore(int semid);
void LockSemaphore(int semid);
int InitSemaphore(key_t key, int nsems);
void ArmaSinal(int iSignal);
void _splitpath(const char* path,char* drive,char* dir,char* fname,char* ext);
#endif

/************************************************************************************************************/
int main(int argc, char* argv[])
{
    TParamConf tParamConf;
    char streamBuf[1025];

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR varOraDataAtual[32];
        short statOraDataAtual = -1;

        char varOraCdAreaRegistro[TAM_CPO_CDAREAREGISTRO+1];
        char varOraCodProduto[TAM_CPO_CODPRODUTO+1];

        struct AddLinhaItauCard
        {
            VARCHAR idAreaRegistro[3];
            VARCHAR nrLinha[TAM_CPO_NRLINHA+1];
            VARCHAR idTipoCartaoVivoItauCard[TAM_CPO_CODPRODUTO+1];
            VARCHAR nrCpf[TAM_CPO_CPF+1];
        } varOraLinhaItauCardAdd;

        struct AddLinhaItauCardStat
        {
            short idAreaRegistro;
            short nrLinha;
            short idTipoCartaoVivoItauCard;
            short nrCpf;
        } statOraLinhaItauCardAdd;

        struct RemLinhaItauCard
        {
            VARCHAR idAreaRegistro[3];
            VARCHAR nrLinha[TAM_CPO_NRLINHA+1];
        } varOraLinhaItauCardRem;

        int varOraCount;

    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);

#ifndef WIN32
    ArmaSinal(SIGTERM);

    //==========================================================================
    // Lock"a"
    oLog.logDebug("Vai lockar fila de processamento...\n");
    int iRet = Process(argv[0],LOCK);

    if(iRet)
    {
        oLog.logInformation("Saida por TIMEOUT\n");
        return -1;
    }
    oLog.logDebug("Locou fila de processamento\n");
#endif // #ifndef WIN32

    //==========================================================================
    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        return -1;
    }

    //==========================================================================
    // Verifica existencia de diretórios de processamento
#ifndef WIN32    
    // char *curDir = getcwd(0,2048);
    // sprintf(szAux,"curDir=%s",curDir); oLog.logError(szAux);

    // if ( chdir(tParamConf.szPathIn) != 0 )
    // {
    //     sprintf(szAux,"Diretório %s não existe",tParamConf.szPathIn); oLog.logError(szAux);
// #ifndef WIN32
    //     Process(argv[0], UNLOCK);
    //     oLog.logDebug("unlock executado\n");
// #endif // #ifndef WIN32
    //     return -1;
    // }

    if ( chdir(tParamConf.szPathErr) != 0 )
    {
        sprintf(szAux,"Diretório de erros '%s' não existe",tParamConf.szPathErr); oLog.logError(szAux);
#ifndef WIN32
        Process(argv[0], UNLOCK);
        oLog.logDebug("unlock executado\n");
#endif // #ifndef WIN32
        oLog.logDebug("Fim anormal de processamento.");
        return -1;
    }

    if ( chdir(tParamConf.szPathProcessados) != 0 )
    {
        sprintf(szAux,"Diretório de processamento '%s' não existe",tParamConf.szPathProcessados); oLog.logError(szAux);
#ifndef WIN32
        Process(argv[0], UNLOCK);
        oLog.logDebug("unlock executado\n");
#endif // #ifndef WIN32
        oLog.logDebug("Fim anormal de processamento.");
        return -1;
    }

    // if ( chdir(curDir) != 0 )
    // {
    //     free(curDir);
    //     sprintf(szAux,"Diretório %s não existe",curDir); oLog.logError(szAux);
// #ifndef WIN32
    //     Process(argv[0], UNLOCK);
    //     oLog.logDebug("unlock executado\n");
// #endif // #ifndef WIN32
    //     return -1;
    // }
    // free(curDir);
#endif

    //==========================================================================
    // Conecta
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
#ifndef WIN32
        Process(argv[0], UNLOCK);
        oLog.logDebug("unlock executado\n");
#endif // #ifndef WIN32
        oLog.logDebug("Fim anormal de processamento.");
        return -1;
    }

    //==========================================================================
    // Data do processamento

    EXEC SQL SELECT TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') INTO :varOraDataAtual:statOraDataAtual FROM DUAL;

    if ( sqlca.sqlcode )
    {
        sprintf(szAux,"erro oracle crítico! %s",sqlca.sqlerrm.sqlerrmc); oLog.logError(szAux);

#ifndef WIN32
        Process(argv[0], UNLOCK);
        oLog.logDebug("unlock executado\n");
#endif // #ifndef WIN32
        oLog.logDebug("Fim anormal de processamento.");
        return -1;
    }

    CONVIND(varOraDataAtual,statOraDataAtual);

    //==========================================================================
    // Define os nomes dos arquivos
    char fname[_MAX_FNAME+1];
    char ext[256];

    string inputFileName = (string)tParamConf.szPathIn + (string)tParamConf.szFileNameIn;

    _splitpath(inputFileName.c_str(),0,0,fname,ext);

    string inputFileNameProcessado = (string)tParamConf.szPathProcessados + (string)fname
                           + "_" + (char*)varOraDataAtual.arr + ext;
    string outputFileNameErr = (string)tParamConf.szPathErr + (string)fname +
                           "_" + (char*)varOraDataAtual.arr + ext;

    ifstream inputFile(inputFileName.c_str(), ios::in);

    if( !inputFile.is_open() )
    {
        string errMsg = "Arquivo '"+inputFileName+"' não encontrado para ser processado.\n";
        ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary);
        outputFileErr.write(errMsg.c_str(),errMsg.length());
        outputFileErr.close();

        sprintf(szAux,"arquivo '%s' a ser processado não foi encontrado!",inputFileName.c_str()); oLog.logDebug(szAux);

#ifndef WIN32
        Process(argv[0], UNLOCK);
        oLog.logDebug("unlock executado\n");
#endif // #ifndef WIN32
        oLog.logDebug("Fim de processamento.");
        return -1;
    }

    //==========================================================================
    // Processa
    sprintf(szAux," IN '%s'",inputFileName.c_str()); oLog.logDebug(szAux);
    sprintf(szAux,"PRC '%s'",inputFileNameProcessado.c_str()); oLog.logDebug(szAux);
    sprintf(szAux,"ERR '%s'",outputFileNameErr.c_str()); oLog.logDebug(szAux);

    oLog.logDebug("Processando...");

    //EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    //==========================================================================
    // Inicializa
    varOraCdAreaRegistro[sizeof(varOraCdAreaRegistro)-1] = 0;
    varOraCodProduto[sizeof(varOraCodProduto)-1] = 0;

    memset(&varOraLinhaItauCardAdd,0,sizeof(varOraLinhaItauCardAdd));
    memset(&statOraLinhaItauCardAdd,0,sizeof(statOraLinhaItauCardAdd));
    memset(&varOraLinhaItauCardRem,0,sizeof(varOraLinhaItauCardRem));

    int itRegAdd = 0; // total de registros inseridos
    int itRegUpd = 0; // total de registros atualizados
    int itRegRem = 0; // total de registros removidos com sucesso
    int itRegRee = 0; // total de registros não removidos por erro
    int itRegErr = 0; // total de registros com erro
    int itRegNpr = 0; // total de registros ignorados (não processados)

    //==========================================================================
    // Processa arquivo texto
    while ( inputFile.getline(streamBuf,sizeof(streamBuf)) )
    {
        // tratamento para interromper o processamento via sinal
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }

        //======================================================================
        // Validação do registro de detalhe
        if ( memcmp(streamBuf,"TOTAL",5) == 0 ||
             memcmp(streamBuf,"total",5) == 0 ||
             inputFile.gcount() <= (TAM_LINHA/2) )
        {
            itRegNpr++;
            continue;
        }

        if ( TAM_LINHA != (inputFile.gcount() - 1) )
        {
            strcat(streamBuf,"Registro de detalhe inválido\n");
            ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
            outputFileErr.write(streamBuf,strlen(streamBuf));
            outputFileErr.close();
            itRegErr++;
            continue;
        }

        memcpy(varOraCodProduto,streamBuf+POS_COP_CODPRODUTO,TAM_CPO_CODPRODUTO);

        EXEC SQL
            SELECT
                COUNT(1)
            INTO
                :varOraCount
            FROM
                APOIO.TIPOCARTAOVIVOITAUCARD
            WHERE
                IDTIPOCARTAOVIVOITAUCARD = :varOraCodProduto;

        if ( 0 == varOraCount )
        {
            strcat(streamBuf,"Código do Produto da Conta não cadastrado\n");
            ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
            outputFileErr.write(streamBuf,strlen(streamBuf));
            outputFileErr.close();
            itRegErr++;
            continue;
        }

        memcpy(varOraCdAreaRegistro,streamBuf+POS_COP_CDAREAREGISTRO,TAM_CPO_CDAREAREGISTRO);
        if ( varOraCdAreaRegistro[0] == ' ' ) varOraCdAreaRegistro[0] = '0';

        char *varOraCodOperacao = streamBuf+POS_COP_CODOPERACAO;

        EXEC SQL
            SELECT
                IDAREAREGISTRO
            INTO
                :varOraLinhaItauCardAdd.idAreaRegistro
            FROM
                APOIO.AREAREGISTRO
            WHERE
                CDAREAREGISTRO = TO_NUMBER(:varOraCdAreaRegistro);

        if ( sqlca.sqlcode )
        {
            sprintf(szAux,"ERRO ORACLE [%s]",sqlca.sqlerrm.sqlerrmc);oLog.logDebug(szAux);
            strcat(streamBuf,"Código de área não existe na base Vivo.\n");
            ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
            outputFileErr.write(streamBuf,strlen(streamBuf));
            outputFileErr.close();
            itRegErr++;
            continue;
        }

        //======================================================================
        // Persistência
        memcpy(varOraLinhaItauCardAdd.nrLinha.arr,streamBuf+POS_COP_NRLINHA,TAM_CPO_NRLINHA);
        varOraLinhaItauCardAdd.nrLinha.arr[TAM_CPO_NRLINHA] = 0;
        varOraLinhaItauCardAdd.nrLinha.len = TAM_CPO_NRLINHA;

        if (memcmp(varOraCodOperacao,"ADD",3) == 0 )
        {
            memcpy(varOraLinhaItauCardAdd.idTipoCartaoVivoItauCard.arr,varOraCodProduto,TAM_CPO_CODPRODUTO);
            varOraLinhaItauCardAdd.idTipoCartaoVivoItauCard.arr[TAM_CPO_CODPRODUTO] = 0;
            varOraLinhaItauCardAdd.idTipoCartaoVivoItauCard.len = TAM_CPO_CODPRODUTO;

            memcpy(varOraLinhaItauCardAdd.nrCpf.arr,streamBuf+POS_COP_CPF,TAM_CPO_CPF);
            varOraLinhaItauCardAdd.nrCpf.arr[TAM_CPO_CPF] = 0;
            varOraLinhaItauCardAdd.nrCpf.len = TAM_CPO_CPF;

            EXEC SQL
                SELECT
                    COUNT(1)
                INTO
                    :varOraCount
                FROM
                    LINHA.LINHAITAUCARD
                WHERE
                    IDAREAREGISTRO = :varOraLinhaItauCardAdd.idAreaRegistro
                AND NRLINHA = :varOraLinhaItauCardAdd.nrLinha;

            if ( varOraCount == 0 )
            {
                EXEC SQL
                    INSERT INTO LINHA.LINHAITAUCARD(IDAREAREGISTRO,NRLINHA,IDTIPOCARTAOVIVOITAUCARD
                                                   ,NRCPF,IDUSUARIOALTERACAO,DTULTIMAALTERACAO)
                    VALUES(:varOraLinhaItauCardAdd.idAreaRegistro:statOraLinhaItauCardAdd.idAreaRegistro,
                           :varOraLinhaItauCardAdd.nrLinha:statOraLinhaItauCardAdd.nrLinha,
                           :varOraLinhaItauCardAdd.idTipoCartaoVivoItauCard:statOraLinhaItauCardAdd.idTipoCartaoVivoItauCard,
                           :varOraLinhaItauCardAdd.nrCpf:statOraLinhaItauCardAdd.nrCpf,
                           -99,
                           SYSDATE);

                if ( sqlca.sqlcode )
                {
                    sprintf(szAux,"ERRO ORACLE [%s]",sqlca.sqlerrm.sqlerrmc);oLog.logDebug(szAux);
                    EXEC SQL ROLLBACK;
                    strcat(streamBuf,sqlca.sqlerrm.sqlerrmc);
                    strcat(streamBuf," (erro na inserção)\n");
                    ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
                    outputFileErr.write(streamBuf,strlen(streamBuf));
                    outputFileErr.close();
                    itRegErr++;
                    continue;
                }

                EXEC SQL COMMIT;
                itRegAdd++;
            }
            else
            {
                EXEC SQL
                    UPDATE
                        LINHA.LINHAITAUCARD
                    SET
                        IDTIPOCARTAOVIVOITAUCARD = :varOraLinhaItauCardAdd.idTipoCartaoVivoItauCard,
                        NRCPF = :varOraLinhaItauCardAdd.nrCpf,
                        IDUSUARIOALTERACAO = -98,
                        DTULTIMAALTERACAO = SYSDATE
                    WHERE
                        IDAREAREGISTRO = :varOraLinhaItauCardAdd.idAreaRegistro
                    AND NRLINHA = :varOraLinhaItauCardAdd.nrLinha;

                if ( sqlca.sqlcode )
                {
                    EXEC SQL ROLLBACK;
                    strcat(streamBuf,sqlca.sqlerrm.sqlerrmc);
                    strcat(streamBuf," (erro na atualização)\n");
                    ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
                    outputFileErr.write(streamBuf,strlen(streamBuf));
                    outputFileErr.close();
                    itRegErr++;
                    continue;
                }

                EXEC SQL COMMIT;
                itRegUpd++;
            }
        }
        else if (memcmp(varOraCodOperacao,"REM",3) == 0 )
        {
            EXEC SQL
                DELETE FROM LINHA.LINHAITAUCARD
                WHERE IDAREAREGISTRO = :varOraLinhaItauCardAdd.idAreaRegistro
                AND NRLINHA = :varOraLinhaItauCardAdd.nrLinha;

            if ( sqlca.sqlcode == 0 )
            {
                EXEC SQL COMMIT;

                itRegRem++;
            }
            else
            {
                itRegRee++;
            }
        }
        else
        {
            strcat(streamBuf,"Operação inválida.\n");
            ofstream outputFileErr(outputFileNameErr.c_str(), ios::out|ios::binary|ios::app);
            outputFileErr.write(streamBuf,strlen(streamBuf));
            outputFileErr.close();
            itRegErr++;
            continue;
        }

    } // while ( inputFile.getline(streamBuf,sizeof(streamBuf)) )

    inputFile.close();

#ifndef WIN32
    Process(argv[0], UNLOCK);
#endif // #ifndef WIN32

    DBDisconnect();

    //==========================================================================
    // Move para o diretório de processados
    moverArquivo(inputFileName.c_str(),inputFileNameProcessado.c_str());

    //==========================================================================
    // Exibe estatística
    sprintf(szAux,"  Registros inseridos: %d",itRegAdd);oLog.logDebug(szAux);
    sprintf(szAux,"          atualizados: %d",itRegUpd);oLog.logDebug(szAux);
    sprintf(szAux,"            ignorados: %d",itRegNpr);oLog.logDebug(szAux);
    sprintf(szAux,"            removidos: %d",itRegRem);oLog.logDebug(szAux);
    sprintf(szAux,"        não removidos: %d",itRegRee);oLog.logDebug(szAux);
    sprintf(szAux,"             com erro: %d",itRegErr);oLog.logDebug(szAux);

    //==========================================================================
    // Fim
    oLog.logDebug("Processamento encerrado com sucesso.");

    return 0; // SUCESSO
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    //sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[1024 + 1];
    char szDivArq[256];
    char szDivPre[21];

    /* Zera variáveis */
    memset(ptParamConf,0, sizeof(TParamConf));
    memset(szLinha,0, sizeof(szLinha));
    memset(szDivArq,0, sizeof(szDivArq));
    memset(szDivPre,0, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("cartaoVivoItauCard.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
    {
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            SAFE_STRNCPY(ptParamConf->szPws, szDivArq);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            SAFE_STRNCPY(ptParamConf->szUsr, szDivArq);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            SAFE_STRNCPY(ptParamConf->szInst, szDivArq);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            SAFE_STRNCPY(ptParamConf->szPwsTux, szDivArq);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            SAFE_STRNCPY(ptParamConf->szUsrTux, szDivArq);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            SAFE_STRNCPY(ptParamConf->szPwsTuxGen, szDivArq);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            SAFE_STRNCPY(ptParamConf->szCltTux, szDivArq);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            SAFE_STRNCPY(ptParamConf->szPathIn, szDivArq);
            
            if ( *(ptParamConf->szPathIn+strlen(ptParamConf->szPathIn)-1) != '/' )
            {
                *(ptParamConf->szPathIn+strlen(ptParamConf->szPathIn)-1) = '/';
                *(ptParamConf->szPathIn+strlen(ptParamConf->szPathIn)) = 0;
            }

            SAFE_STRNCPY(ptParamConf->szPathErr,ptParamConf->szPathIn);
            char *pathErros = "processados/erros/";
            int tamPathErros = strlen(pathErros);

            if ( *(ptParamConf->szPathErr+sizeof(ptParamConf->szPathErr)-tamPathErros-1) == 0 )
            { // cabe?
                strcat(ptParamConf->szPathErr,pathErros);
            }
            else
            {
                fprintf(stderr, "TAMANHO DO PATH MUITO GRANDE (1) !!!\n");
                exit(-2);
            }

            SAFE_STRNCPY(ptParamConf->szPathProcessados,ptParamConf->szPathIn);
            char *pathProcessados = "processados/";
            int tamPathProcessados = strlen(pathProcessados);

            if ( *(ptParamConf->szPathProcessados+sizeof(ptParamConf->szPathProcessados)-tamPathProcessados-1) == 0 )
            { // cabe?
                strcat(ptParamConf->szPathProcessados,pathProcessados);
            }
            else
            {
                fprintf(stderr, "TAMANHO DO PATH MUITO GRANDE (2)!!!\n");
                exit(-2);
            }
        }
        else if (!strcmp(szDivPre, "filename"))
        {
            SAFE_STRNCPY(ptParamConf->szFileNameIn, szDivArq);
        }

        memset(szLinha, 0, sizeof(szLinha));
        memset(szDivPre,0, sizeof(szDivPre));
        memset(szDivArq,0, sizeof(szDivArq));
    }

    mfConfig.fechar();

    oLog.logDebug("Parametros de execução :");
    sprintf(szAux, "     Usuário BD='%s'", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "   Instância BD='%s'", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, " Arq.Importação='%s'", ptParamConf->szFileNameIn); oLog.logDebug(szAux);
    sprintf(szAux, " Dir.Importação='%s'", ptParamConf->szPathIn); oLog.logDebug(szAux);
    sprintf(szAux, "Dir.Processados='%s'", ptParamConf->szPathProcessados); oLog.logDebug(szAux);
    sprintf(szAux, "      Dir.Erros='%s'", ptParamConf->szPathErr); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    oLog.logDebug("Conectando na BD...");

    EXEC SQL CONNECT :connString;

    oLog.logDebug("Conectou na BD");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;
    oLog.logDebug("Desconectou da BD com sucesso");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}


/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
    {
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
    {
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}

/********************************************************************************************/
int Process(char *pszFileName, int iFlagLock)
{
    static int semid;
    time_t tStart, tEnd;
    double tDiff;
    key_t key;

    if(iFlagLock == UNLOCK)
    {
        UnLockSemaphore(semid);
    }
    else if(iFlagLock == LOCK)
    {

        if((key = ftok(pszFileName, 'a')) == (key_t) -1)
        {
            perror("IPC error: ftok");
            exit(-1);
        }

        if((semid = InitSemaphore(key, 1)) == -1)
        {
            perror("InitSemaphore");
            exit(-1);
        }

        time(&tStart);
        LockSemaphore(semid);
        time(&tEnd);

        tDiff = difftime(tEnd, tStart);

        /* tempo limite para espera de processamento */
        if(tDiff > (double)0)
            return -1;
    }
    else if(iFlagLock == KILL)
    {
        semctl(semid, 0, IPC_RMID); /* deleta o semaforo */
    }
    else
    {
        exit(-1);
    }

    return 0;
}

/********************************************************************************************/
void UnLockSemaphore(int semid)
{
    struct sembuf sb;

    sb.sem_num = 0;
    sb.sem_op = 1; /* free resource */
    sb.sem_flg = SEM_UNDO;

    if (semop(semid, &sb, 1) == -1)
    {
        perror("semop");
        exit(1);
    }
}

/********************************************************************************************/
void LockSemaphore(int semid)
{
    struct sembuf sb;

    sb.sem_num = 0;
    sb.sem_op = -1;  /* set to allocate resource */
    sb.sem_flg = SEM_UNDO;

    if (semop(semid, &sb, 1) == -1)
    {
        perror("semop");
        exit(1);
    }
}

/********************************************************************************************/
/*
** InitSemaphore() -- more-than-inspired by W. Richard Stevens' UNIX Network
** Programming 2nd edition, volume 2, lockvsem.c, page 295.
*/
int InitSemaphore(key_t key, int nsems)
{
    union semun
    {
        int val;
        struct semid_ds *buf;
        ushort *array;
    } arg;

    struct semid_ds buf;
    struct sembuf sb;
    int semid;

    semid = semget(key, nsems, IPC_CREAT | IPC_EXCL | 0666);
    if (semid >= 0)
    { /* we got it first */
        sb.sem_op = 1;
        sb.sem_flg = 0;
        arg.val = 1;

        for(sb.sem_num = 0; sb.sem_num < nsems; sb.sem_num++)
        {
            /* do a semop() to "free" the semaphores. */
            /* this sets the sem_otime field, as needed below. */
            if (semop(semid, &sb, 1) == -1)
            {
                int e = errno;
                semctl(semid, 0, IPC_RMID); /* clean up */
                errno = e;
                return -1; /* error, check errno */
            }
        }
    }
    else if (errno == EEXIST)
    {
        int ready = 0;

        semid = semget(key, nsems, 0); /* get the id */
        if (semid < 0)
            return semid; /* error, check errno */

        /* wait for other process to initialize the semaphore: */
        arg.buf = &buf;

        for(int i = 0; i < MAX_RETRIES && !ready; i++)
        {
            semctl(semid, nsems-1, IPC_STAT, arg);

            if (arg.buf->sem_otime != 0)
            {
                ready = 1;
            }
            else
            {
                sleep(1);
            }
        }
        if(!ready)
        {
            errno = ETIME;
            return -1;
        }
    }
    else
    {
        return semid; /* error, check errno */
    }

    return semid;
}

/*
Copyright (C) 2003 Matthias Braun <matze@braunis.de>
                                                                                
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
                                                                                
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
                                                                                
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  From: http://www.koders.com
  When: Dec 24, 2008
*/

static inline void strcpypart(char* dest, const char* src, size_t size)
{
    memcpy(dest, src, size);
    dest[size] = 0;
}

void _splitpath(const char* path, char* drive, char* dir,char* fname, char* ext)
{
    // Step1: Fill in driver ("" on unix systems since we don't have drives)
    if(drive)
        strcpy(drive, "");

    // Step1: find the last slash in the path
    const char* lastslash = 0;
    for(const char* p = path; *p != '\0'; p++) {
        if(*p == '/')
            lastslash = p;
    }
    // now fill in directory
    if(dir) {
        if(lastslash == 0)
            strcpy(dir, "");
        else
            strcpypart(dir, path, lastslash - path + 1);
    }

    // Step2: Get the (last) dot in the filename
    const char* lastdot = 0;
    const char* begin = (lastslash != 0) ? lastslash+1 : path;
    for(const char* p = begin; *p != '\0'; p++) {
        if(*p == '.')
            lastdot = p;
    }
    // now we can fill in filename and extension
    if(lastdot==0) {
        if(fname)
            strcpy(fname, begin);
        if(ext)
            strcpy(ext, "");
    } else {
        if(fname)
            strcpypart(fname, begin, lastdot - begin);
        if(ext)
            strcpy(ext, lastdot);
    }

    //printf ("Splitted Path : %s => %s - %s - %s - %s.\n", path,
    //		drive, dir, fname, ext);
}

#endif // #ifndef WIN32
