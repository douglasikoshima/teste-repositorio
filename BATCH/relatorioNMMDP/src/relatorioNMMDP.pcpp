#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/relatorioNMMDP.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 1024*20

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

int main(void)
{
    TParamConf tParamConf;

    int ctDescargaPeriodica = 0;
    int lenSzRegistro = 0;
    int iQtdRegistros=0;
    int retorno = 0;

    char szNomeArquivo[_MAX_PATH+9];
    char szNomeArquivoZip[_MAX_PATH+9];
    char szNomeArquivoDestino[_MAX_PATH+9];
    char szRegistro[TAM_BUFFER+1];
	char buffer[TAM_BUFFER+1];
	FILE *pFile=0;

    EXEC SQL BEGIN DECLARE SECTION;        
		int parametroData;
        VARCHAR nomeArquivo[256];        
        short i_nomeArquivo = -1;
		
		struct dados {
			VARCHAR dtEnvio[256];
			VARCHAR loginDAC[256];
			VARCHAR siteDAC[256];
			VARCHAR dsTipoMidia[256];
			VARCHAR idPerguntaNotaAtd[256]; 
			VARCHAR dsPerguntaNotaAtd[256];
			VARCHAR qtdNotasTotal[256];  
			VARCHAR qtdNotasValidas[256]; 
			VARCHAR soma[256];
			VARCHAR notaZero[256]; 
			VARCHAR notaUm[256];
			VARCHAR notaDois[256];
			VARCHAR notaTres[256];
			VARCHAR notaQuatro[256];
			VARCHAR notaCinco[256];
			VARCHAR notaSeis[256];
			VARCHAR notaSete[256];
			VARCHAR notaOito[256];
			VARCHAR notaNove[256];
			VARCHAR notaDez[256];
		} m_dados;
		
		struct idados {
			short i_dtEnvio;
			short i_loginDAC;
			short i_siteDAC;
			short i_dsTipoMidia;
			short i_idPerguntaNotaAtd; 
			short i_dsPerguntaNotaAtd;
			short i_qtdNotasTotal;
			short i_qtdNotasValidas;
			short i_soma;
			short i_notaZero;
			short i_notaUm;
			short i_notaDois;
			short i_notaTres;
			short i_notaQuatro;
			short i_notaCinco;
			short i_notaSeis;
			short i_notaSete;
			short i_notaOito;
			short i_notaNove;
			short i_notaDez;	
		} m_idados;
		
    EXEC SQL END DECLARE SECTION;
	parametroData = 0;
	memset(&nomeArquivo,0,sizeof(nomeArquivo));
	memset(szNomeArquivo,0,sizeof(szNomeArquivo));
	memset(szNomeArquivoZip,0,sizeof(szNomeArquivoZip));
    oLog.setNivel(2);
    oLog.logDebug(">>>relatorioNMMDP");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<relatorioNMMDP");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<relatorioNMMDP");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");
    		

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
            '../data/VIVONET_NOTASMIDIAS_' || TO_CHAR(SYSDATE,'YYYYMMDD') || '.txt'
        INTO
            :nomeArquivo:i_nomeArquivo
        FROM
            DUAL;
			
	strcpy(szNomeArquivo,(char*)nomeArquivo.arr);
	sprintf(szNomeArquivoZip,"%s.gz",szNomeArquivo);
	
    EXEC SQL 
        SELECT TO_NUMBER(DSVALORPARAMETRO) into :parametroData FROM APOIO.PARAMETRO WHERE CDPARAMETRO = 'PARAMETRO_MNMDP_DATA_RELATORIO';
	    
    if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
    {
        oLog.logDebug("<<<relatorioURA");
        return -1;
    }	


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    // declara cursor para busca dos xml´s a serem reprocessados
    sprintf(szAux, "Declarando cursor..."); oLog.logDebug(szAux);

    EXEC SQL DECLARE Cursor CURSOR FOR
	 SELECT DTENVIO,LOGINDAC,SITEDAC,DSTIPOMIDIA,IDPERGUNTANOTAATD,DSPERGUNTANOTAATD,
	 COUNT(NOTA_TOTAL) AS QTD_NOTAS_TOTAL, COUNT(NOTA) AS QTD_NOTAS_VALIDAS, 
	 SUM (NOTA) AS SOMA, COUNT(NOTA_ZERO) AS NOTA_ZERO, COUNT(NOTA_UM) AS NOTA_UM,
	  COUNT(NOTA_DOIS) AS NOTA_DOIS , COUNT(NOTA_TRES) AS NOTA_TRES, COUNT(NOTA_QUATRO) AS NOTA_QUATRO,
	  COUNT(NOTA_CINCO) AS NOTA_CINCO  , COUNT(NOTA_SEIS) AS NOTA_SEIS, COUNT(NOTA_SETE) AS NOTA_SETE,
	  COUNT(NOTA_OITO) AS NOTA_OITO, COUNT(NOTA_NOVE) AS NOTA_NOVE , COUNT(NOTA_DEZ) AS NOTA_DEZ
	  from 
		 (SELECT TO_CHAR (RP.DTENVIO, 'DD/MM/YYYY HH24:MI:SS') AS DTENVIO,
		   RP.LOGINDAC,
		   RP.SITEDAC,
		   TM.DSTIPOMIDIA,
		   RN.IDPERGUNTANOTAATD,
		   PN.DSPERGUNTANOTAATD,
		   RN.NOTA NOTA_TOTAL,
		  TO_NUMBER(decode(RN.NOTA,'0',0,'1',1,'2',2,'3',3,'4',4,'5',5,'6',6,'7',7,'8',8,'9',9,'10',10)) NOTA,
		   TO_NUMBER(decode(RN.NOTA,'0',0)) NOTA_ZERO,
		   TO_NUMBER(decode(RN.NOTA,'1',1)) NOTA_UM,
			TO_NUMBER(decode(RN.NOTA,'2',2)) NOTA_DOIS,
		   TO_NUMBER(decode(RN.NOTA,'3',3)) NOTA_TRES,
			TO_NUMBER(decode(RN.NOTA,'4',4)) NOTA_QUATRO,
			 TO_NUMBER(decode(RN.NOTA,'5',5)) NOTA_CINCO,
			  TO_NUMBER(decode(RN.NOTA,'6',6)) NOTA_SEIS,
			   TO_NUMBER(decode(RN.NOTA,'7',7)) NOTA_SETE,
				TO_NUMBER(decode(RN.NOTA,'8',8)) NOTA_OITO,
				 TO_NUMBER(decode(RN.NOTA,'9',9)) NOTA_NOVE,
				  TO_NUMBER(decode(RN.NOTA,'10',10)) NOTA_DEZ              
	  FROM CUSTOMER.PESQUISAATD P,
		   CUSTOMER.RESPOSTAPESQUISAATD RP,
		   APOIO.TIPOMIDIA TM,
		   CUSTOMER.MATRIZPESQUISAATD MP,
		   CUSTOMER.RESPOSTANOTASATD RN,
		   CUSTOMER.PERGUNTANOTASATD PN   ,
		   APOIO.SISTEMAORIGEM SO     
	 WHERE 
				P.IDSISTEMAORIGEM = SO.IDSISTEMAORIGEM       
		 AND P.IDPESQUISAATD = RP.IDPESQUISAATD     
		 AND P.IDTIPOMIDIA = TM.IDTIPOMIDIA
		 AND MP.IDPESQUISAATD = P.IDPESQUISAATD
		 AND MP.IDPERGUNTANOTAATD = PN.IDPERGUNTANOTAATD     
		 AND RN.IDPERGUNTANOTAATD = PN.IDPERGUNTANOTAATD 
		 AND RP.IDATENDIMENTOPROTOCOLO = RN.IDATENDIMENTOPROTOCOLO
		 AND RP.LOGINDAC IS NOT NULL
		 AND RN.DTULTIMAALTERACAO >= SYSDATE - :parametroData) tabela            
		 GROUP BY DTENVIO, LOGINDAC,SITEDAC,DSTIPOMIDIA,IDPERGUNTANOTAATD,DSPERGUNTANOTAATD;
     


    oLog.logDebug("Vai abrir o cursor");

    EXEC SQL OPEN Cursor;

    oLog.logDebug("Abriu o cursor");	
	//Gravando Cabecalho	
    while (1)
    {
        /* tratamento para interromper o processamento via sinal (complemento da saida acima) */
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }
		
		memset(&m_dados,0,sizeof(dados));
		memset(&m_idados,0,sizeof(idados));
		memset(buffer,0,sizeof(buffer));

        EXEC SQL
            FETCH
                Cursor
            INTO
                :m_dados:m_idados;
				
		sprintf(buffer,"%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
						(char*)m_dados.dtEnvio.arr,
						(char*)m_dados.loginDAC.arr,
						(char*)m_dados.siteDAC.arr,
						(char*)m_dados.dsTipoMidia.arr,
						(char*)m_dados.idPerguntaNotaAtd.arr,
						(char*)m_dados.dsPerguntaNotaAtd.arr,
						(char*)m_dados.qtdNotasTotal.arr,
						(char*)m_dados.qtdNotasValidas.arr,
						(char*)m_dados.soma.arr,
						(char*)m_dados.notaZero.arr,
						(char*)m_dados.notaUm.arr,
						(char*)m_dados.notaDois.arr,
						(char*)m_dados.notaTres.arr,
						(char*)m_dados.notaQuatro.arr,
						(char*)m_dados.notaCinco.arr,
						(char*)m_dados.notaSeis.arr,
						(char*)m_dados.notaSete.arr,
						(char*)m_dados.notaOito.arr,
						(char*)m_dados.notaNove.arr,
						(char*)m_dados.notaDez.arr);
						
		oLog.logDebug(buffer);

		gravarRegistro(pFile,buffer);

    }// while (1)

	
    fecharArquivo(pFile); // Fecha o Arquivo
	
	oLog.logDebug("compactarArquivo...");
	
	//compactarArquivo(szNomeArquivo);

    // finaliza
    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE Cursor;

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<relatorioNMMDP");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}


/************************************************************************************************************/
void removerArquivo(char *pszNomeArquivo)
{
    sprintf(szAux, "Vai remover o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);
    remove(pszNomeArquivo);
}

/************************************************************************************************************/

/************************************************************************************************************/
void compactarArquivo(const char *pszNomeArquivo)
{
	oLog.logDebug("inicio compactarArquivo");
	
    char sComando[512];

    strcpy(sComando,"gzip -f ");
    strcat(sComando,pszNomeArquivo);

    sprintf(szAux,"Comando [%s]", sComando); oLog.logDebug(szAux);
	
    system(sComando);

	//sprintf(sComando,"mv relatorioURA.txt.gz relatorioURA.zip");

	//system(sComando);
	
	oLog.logDebug("fim compactarArquivo");
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int abrirArquivo(FILE **pFile,const char *pszNomeArquivo)
{
    sprintf(szAux, "Vai criar e abrir o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);

    *pFile = fopen(pszNomeArquivo, "w");

    if( pFile == NULL )
    {
        sprintf(szAux, "Erro criando arquivo[%s]", pszNomeArquivo); oLog.logDebug(szAux);
        return -1;
    }

    sprintf(szAux, "Arquivo [%s] disponível", pszNomeArquivo); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{
  char szPog[1000];
 
  //sprintf (szPog,"%s\n",pszRegistro);
	if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {            
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
void fecharArquivo(FILE *pFile)
{
    fclose(pFile);    
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("relatorioNMMDP.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}
