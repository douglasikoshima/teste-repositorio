/**
 * @modulo  Batch
 * @usecase Batch
 * @author
 * @version $Revision: 1.1.2.8 $
 * @CVS     $Author: a5114878 $ - $Date: 2016/11/17 17:51:43 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <ctype.h>

#include <errno.h>
#include <time.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <dirent.h>

#ifndef WIN32
#include <unistd.h>
#endif


#include "../include/cancelamentoProdutoPF.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

#include <string>
using namespace std;


EXEC SQL INCLUDE SQLCA;



//==============================================================================
// Globais
char szAux[1024 + 1];
Log oLog;


//==============================================================================
// Run
int main( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    
    time(&start_t);
    TParamConf tParamConf;
    
    oLog.setNivel(2);
    oLog.logDebug(">>> cancelamentoProdutoPF");

    //==========================================================================
    // Parâmetros de configuração
    memset( &tParamConf, 0x0, sizeof(tParamConf) );
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        exit( EXIT_FAILURE );
    }

    //==========================================================================
    // Conecta ao banco
    //oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        exit( EXIT_FAILURE );
    }
    
    oLog.logDebug("Conexao com BD bem sucedida.");

    if ( BandaLargaSpeedy() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }


    if ( BandaLargaFibra() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }
    
    if ( LinhaBandaLargaFibra() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }
    
            
    if ( BandaLargaPopular() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }

    if ( BandaLargaSpeedyBLPOP() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }

    if ( SomenteBandaLargaFibra() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }

    if ( Relat_TV_DTH() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }
 

    if ( OnlyBandaLargaSpeedy() < 0 )
    {
        DBDisconnect();
        oLog.logDebug("%%% PROCESSAMENTO ABORTADO POR FALHA!!! %%%");
        time(&end_t);
        diff_t = difftime(end_t, start_t);
        hour = diff_t / 3600; 
        diff_t = diff_t % 3600; 
        min = diff_t / 60; 
        diff_t = diff_t % 60; 
        sec = diff_t; 
        sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
        exit( EXIT_FAILURE );
    }

    ExpurgoRelatorio( "../data" );
    DBDisconnect();

    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo total de execucao: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);
    
    oLog.logDebug("<<< cancelamentoProdutoPF");

    exit( EXIT_SUCCESS );
        
}



/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[101];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    // Zera variáveis
    memset(szLinha, 0, sizeof(szLinha));
    memset(szDivArq, 0, sizeof(szDivArq));
    memset(szDivPre, 0, sizeof(szDivPre));

    // Define o arquivo de configuração
    mfConfig.setPath("cancelamentoProdutoPF.cfg");

    // Verificar se conseguiu abrir o arquivo
    if(!mfConfig.abrir())
    {
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    // Capturando usuario, senha, path e instance de banco do arquivo
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        // Verifica qual parâmetro foi encontrado.
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }

        memset(szLinha,  0x0, sizeof(szLinha));
        memset(szDivPre, 0x0, sizeof(szDivPre));
        memset(szDivArq, 0x0, sizeof(szDivArq));
    }

    // Fechando o arquivo de configuracao aberto
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);

    // Verifica se todos os dados foram recuperados do arquivo de configuração.
    if ( strlen(ptParamConf->szInst) == 0 )
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }

    //oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    // String de conexao
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);
    
    sprintf(szAux, "Connect [%s]", connString ); oLog.logDebug(szAux);

    // Marca ponto de erro
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    // Conecta
    EXEC SQL CONNECT :connString;

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_Disconnect;
    EXEC SQL COMMIT WORK RELEASE;
    return;

SqlError_Disconnect:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
}



void ExpurgoRelatorio( char * sDiretorio )
{
    EXEC SQL BEGIN DECLARE SECTION;

        int DiaSemana;
        VARCHAR   dtLimite[10];
        short     i_dtLimite = -1;
        int       iDiasHistorico;
        VARCHAR   oraDiasHist[5];
        short     i_oraDiasHist = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    size_t pos;
    int DataLimite;
    int DataArquivo;
    char buffer[10];
    char bfTmp[16];
    char sArquivoRemover[256];
    DIR *dirp;
    struct dirent *dp;

    memset( &oraDiasHist, 0x0, sizeof(oraDiasHist) );
    
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_ExpurgoRelat;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    memset( &dtLimite, 0x0, sizeof(dtLimite) );
    memset( buffer   , 0x0, sizeof(buffer) );
    
    oLog.logDebug ( "*** Analisando Relatorios que podem ser removidos ***" );
    
    EXEC SQL
    SELECT DSVALORPARAMETRO INTO :oraDiasHist:i_oraDiasHist FROM APOIO.PARAMETRO WHERE CDPARAMETRO = 'DIAS_EXP_REL_CANCELAUTOM' ;
    if ( i_oraDiasHist != -1 )
    {
        CONVIND( oraDiasHist, i_oraDiasHist );
        iDiasHistorico = atoi( (char*)oraDiasHist.arr );
    }
    else
    {
        iDiasHistorico = 15;
    }

    EXEC SQL 
    SELECT TO_CHAR( TRUNC( SYSDATE - :iDiasHistorico ),'RRRRMMDD' ) INTO :dtLimite:i_dtLimite FROM DUAL;
    
    CONVIND( dtLimite,i_dtLimite );
    DataLimite = atoi((char*)&dtLimite.arr);
    sprintf( szAux, "DataLimite [%d]", DataLimite ); oLog.logDebug(szAux);
    
    dirp = opendir( sDiretorio );
    while( dp = readdir(dirp) )
    {
        memset ( bfTmp, 0x0, sizeof(bfTmp) );
        //sprintf( szAux, "Leu [%s]", (char*)&dp->d_name ); oLog.logDebug(szAux);
        pos = dp->d_namlen - 12;
        if ( pos > 0 )
           sprintf (bfTmp, "%s", (char*)&dp->d_name[pos] );
        else
           continue;
        
        if ( !memcmp(&bfTmp[9], "csv", 3) ) // Identifica que eh arquivo relatorio
        {
            bfTmp[8] = 0x0;
            
            //sprintf( buffer,"%.8s", (char*)&dp->d_name[13] );

            //sprintf( szAux, "Data Arquivo [%s]", bfTmp ); oLog.logDebug(szAux);
    
            DataArquivo = atoi(bfTmp);
            if ( DataArquivo < DataLimite )  // Verifica se arquivo deve ser removido
            {
                sprintf( sArquivoRemover, "%s/%s", sDiretorio, (char*)&dp->d_name );
                sprintf( szAux, "Removendo Arquivo: [%s]", sArquivoRemover ); oLog.logDebug(szAux);
                unlink( sArquivoRemover );
            }
        }
    }
    closedir(dirp);
    return;

SqlError_ExpurgoRelat:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
    DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
}



int BandaLargaSpeedy( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    string bf;
    char s_ddd_contato[3];
    char s_nrLinha_contato[11];
    char aux[512];
    

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR idLinhaSistemaOrigem[256];
        VARCHAR sgTipoPessoa[256];
        VARCHAR sgTipoDoc[256];
        VARCHAR nrDocumento[256];
        VARCHAR sgProdutoCancelado[256];
        VARCHAR nmPessoa[256];
        VARCHAR nmTipoLogradouro[256];
        VARCHAR nmLogradouro[256];
        VARCHAR nrEndereco[256];
        VARCHAR dsEnderecoComplemento[256];
        VARCHAR nmBairro[256];
        VARCHAR nrCep[256];
        VARCHAR nmMunicipio[256];
        VARCHAR cdAreaRegistro[256];
        VARCHAR nrLinha[256];
        VARCHAR nrTelefoneOrigem[256];
        VARCHAR nrTelefoneContato[256];
        VARCHAR dsMotivo[256];
        VARCHAR dtCancelamento[256];
        VARCHAR nmOrigemCancelamento[256];
        VARCHAR nrProtocolo[256];

        short i_idLinhaSistemaOrigem = -1;
        short i_sgTipoPessoa = -1;
        short i_sgTipoDoc = -1;
        short i_nrDocumento = -1;
        short i_sgProdutoCancelado = -1;
        short i_nmPessoa = -1;
        short i_nmTipoLogradouro = -1;
        short i_nmLogradouro = -1;
        short i_nrEndereco = -1;
        short i_dsEnderecoComplemento = -1;
        short i_nmBairro = -1;
        short i_nrCep = -1;
        short i_nmMunicipio = -1;
        short i_cdAreaRegistro = -1;
        short i_nrLinha = -1;
        short i_nrTelefoneOrigem = -1;
        short i_nrTelefoneContato = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_nmOrigemCancelamento = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );

    oLog.logDebug(">>> BandaLargaSpeedy");
   
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_BandaLargaSpeedy;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    bf =
    "SELECT DISTINCT (SELECT lt.idlinhasistemaorigem "
              "FROM linha.linhatelefonica lt, "
                   "linha.linhabase lb, "
                   "apoio.arearegistro ar "
             "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lt.idlinhabase = lb.idlinhabase "
               "AND ROWNUM < 2) AS idlinhasistemaorigem, "
           "decode(cancelautomatico.sgtipopessoa,'PF','CPF','PJ','CNPJ'), "
           "cancelautomatico.nrdocumento, "
           "produtocancelado.sgprodutocancelado, "
           "cancelautomatico.nmpessoa, "
            "(SELECT pe.nmtipologradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmtipologradouro, "
           "(SELECT pe.nmlogradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmlogradouro, "
           "(SELECT pe.nrendereco "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrendereco, "
           "(SELECT pe.dsenderecocomplemento "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS dsenderecocomplemento, "
           "(SELECT pe.nmbairro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmbairro, "
           "(SELECT pe.nrcep "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrcep, "
           "(SELECT pe.nmmunicipio "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmmunicipio, "
           "cancelautomatico.cdarearegistro, "
           "cancelautomatico.nrlinha, "
           "cancelautomatico.nrtelefonecontato, "
           "cancelautomatico.dsmotivo, "
           "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS'), "
           "cancelautomatico.sgtipopessoa, "
           "cancelautomatico.nmorigemcancelamento, "
           "cancelautomatico.nrprotocolo "
      "FROM atendimento.cancelautomatico cancelautomatico, "
           "apoio.produtocancelado produtocancelado "
     "WHERE cancelautomatico.idprodutocancelado = "
                                               "produtocancelado.idprodutocancelado "
       "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
       /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
       "AND cancelautomatico.sgtipopessoa = 'PF' "
       "AND produtocancelado.sgprodutocancelado IN "
                                              "('FIXO_BNDA_LRGA_ADSL', 'FIXO_VOZ')";
              
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StatementSQL FROM :queryChar;
    EXEC SQL DECLARE curBandaLargaSpeedy CURSOR FOR StatementSQL;

    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_CNC_ADSL_LNHA_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "COD_EPS;CO_CAMPANHA;CO_ACCION_COMERCIAL;NU_ENVIO;ID_PC_PRODUTO_COMERCIAL;ID_TP_DOCUMENTO;NR_DOCUMENTO;NR_DIGITO_CONTROLE;SUBSEG_RES;ID_PRODUTO_OFERTA;ID_PRODUTO1;ID_PRODUTO2;" );
    fprintf( fpOut, "%s", "ID_PRODUTO3;ID_PRODUTO4;ID_PRODUTO5;NOME;TIPOLOGR;LOGRADOURO;NUMERO;COMPLEMENTO;BAIRRO;CEP;CIDADE;DDD;TELEFONE;DDD_CONTATO_FIXO;TELEFONE_CONTATO_FIXO;" );
    fprintf( fpOut, "%s", "DDD_MOVEL;TELEFONE_MOVEL;MHC;CORINGA1;CORINGA2;CORINGA3;CORINGA4;CORINGA5;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;" );
    fprintf( fpOut, "%s\n", "CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );

    EXEC SQL OPEN curBandaLargaSpeedy;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &sgTipoDoc, 0x0, sizeof(sgTipoDoc) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &nmTipoLogradouro, 0x0, sizeof(nmTipoLogradouro) );
        memset( &nmLogradouro, 0x0, sizeof(nmLogradouro) );
        memset( &nrEndereco, 0x0, sizeof(nrEndereco) );
        memset( &dsEnderecoComplemento, 0x0, sizeof(dsEnderecoComplemento) );
        memset( &nmBairro, 0x0, sizeof(nmBairro) );
        memset( &nrCep, 0x0, sizeof(nrCep) );
        memset( &nmMunicipio, 0x0, sizeof(nmMunicipio) );
        memset( &cdAreaRegistro, 0x0, sizeof(cdAreaRegistro) );
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneOrigem, 0x0, sizeof(nrTelefoneOrigem) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );

        i_idLinhaSistemaOrigem = -1;
        i_sgTipoPessoa = -1;
        i_sgTipoDoc = -1;
        i_nrDocumento = -1;
        i_sgProdutoCancelado = -1;
        i_nmPessoa = -1;
        i_nmTipoLogradouro = -1;
        i_nmLogradouro = -1;
        i_nrEndereco = -1;
        i_dsEnderecoComplemento = -1;
        i_nmBairro = -1;
        i_nrCep = -1;
        i_nmMunicipio = -1;
        i_cdAreaRegistro = -1;
        i_nrLinha = -1;
        i_nrTelefoneOrigem = -1;
        i_nrTelefoneContato = -1;
        i_dsMotivo = -1;
        i_dtCancelamento = -1;
        i_nmOrigemCancelamento = -1;
        i_nrProtocolo = -1;
        

        EXEC SQL FETCH curBandaLargaSpeedy 
        INTO 
            :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
            :sgTipoDoc:i_sgTipoDoc ,
            :nrDocumento:i_nrDocumento ,
            :sgProdutoCancelado:i_sgProdutoCancelado ,
            :nmPessoa:i_nmPessoa ,
            :nmTipoLogradouro:i_nmTipoLogradouro ,
            :nmLogradouro:i_nmLogradouro ,
            :nrEndereco:i_nrEndereco ,
            :dsEnderecoComplemento:i_dsEnderecoComplemento ,
            :nmBairro:i_nmBairro ,
            :nrCep:i_nrCep ,
            :nmMunicipio:i_nmMunicipio ,
            :cdAreaRegistro:i_cdAreaRegistro ,
            :nrLinha:i_nrLinha ,
            :nrTelefoneContato:i_nrTelefoneContato ,
            :dsMotivo:i_dsMotivo ,
            :dtCancelamento:i_dtCancelamento ,
            :sgTipoPessoa:i_sgTipoPessoa ,
            :nmOrigemCancelamento:i_nmOrigemCancelamento ,
            :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( idLinhaSistemaOrigem,i_idLinhaSistemaOrigem );
        CONVIND( sgTipoPessoa,i_sgTipoPessoa );
        CONVIND( sgTipoDoc,i_sgTipoDoc );
        CONVIND( nrDocumento,i_nrDocumento );
        CONVIND( sgProdutoCancelado,i_sgProdutoCancelado );
        CONVIND( nmPessoa,i_nmPessoa );
        CONVIND( nmTipoLogradouro,i_nmTipoLogradouro );
        CONVIND( nmLogradouro,i_nmLogradouro );
        CONVIND( nrEndereco,i_nrEndereco );
        CONVIND( dsEnderecoComplemento,i_dsEnderecoComplemento );
        CONVIND( nmBairro,i_nmBairro );
        CONVIND( nrCep,i_nrCep );
        CONVIND( nmMunicipio,i_nmMunicipio );
        CONVIND( cdAreaRegistro,i_cdAreaRegistro );
        CONVIND( nrLinha,i_nrLinha );
        CONVIND( nrTelefoneOrigem,i_nrTelefoneOrigem );
        
        CONVIND( nrTelefoneContato,i_nrTelefoneContato );
        sprintf( s_ddd_contato, "%.2s", (char*)&nrTelefoneContato.arr );
        sprintf( s_nrLinha_contato, "%s", (char*)&nrTelefoneContato.arr[2] );
        
        
        CONVIND( dsMotivo,i_dsMotivo );
        CONVIND( dtCancelamento,i_dtCancelamento );
        CONVIND( nmOrigemCancelamento,i_nmOrigemCancelamento );
        CONVIND( nrProtocolo,i_nrProtocolo );
        
        fprintf( fpOut, ";;;;%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoDoc.arr );
        fprintf( fpOut, "%s;;;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;;;;;;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmTipoLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nmLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nrEndereco.arr );
        fprintf( fpOut, "%s;", (char*)dsEnderecoComplemento.arr );
        fprintf( fpOut, "%s;", (char*)nmBairro.arr );
        fprintf( fpOut, "%s;", (char*)nrCep.arr );
        fprintf( fpOut, "%s;", (char*)nmMunicipio.arr );
        fprintf( fpOut, "%s;", (char*)cdAreaRegistro.arr );
        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;", s_ddd_contato );
        fprintf( fpOut, "%s;;;;", s_nrLinha_contato );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );
        
        ctLinhas++;
    }
    EXEC SQL CLOSE curBandaLargaSpeedy;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Banda Larga Speedy, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Banda Larga Speedy: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< BandaLargaSpeedy");

    return 0;

SqlError_BandaLargaSpeedy:
        sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
        DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;
}
        
        

int LinhaBandaLargaFibra( void )
{
    time_t start_t, end_t;

    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;

    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    string bf;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR nrLinha[16];
        VARCHAR nrTelefoneContato[16];
        VARCHAR nrDocumento[32];
        VARCHAR nmPessoa[128];
        VARCHAR dsMotivo[100];
        VARCHAR dtCancelamento[32];
        VARCHAR sgTipoPessoa[3];
        VARCHAR nmOrigemCancelamento[100];
        VARCHAR idLinhaSistemaOrigem[32];
        VARCHAR sgProdutoCancelado[32];
        VARCHAR nrProtocolo[64];


        short i_nrLinha = -1;
        short i_nrTelefoneContato = -1;
        short i_nrDocumento = -1;
        short i_nmPessoa = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_sgTipoPessoa = -1;
        short i_nmOrigemCancelamento = -1;
        short i_idLinhaSistemaOrigem = -1;
        short i_sgProdutoCancelado = -1;
        short i_nrProtocolo = -1;



        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );
    
    oLog.logDebug(">>> LinhaBandaLargaFibra");
    
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_LinhaBandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
   
    bf = 
    "SELECT DISTINCT cancelautomatico.cdarearegistro || cancelautomatico.nrlinha AS nrtelefone, "
       "cancelautomatico.nrtelefonecontato, "
       "cancelautomatico.nrdocumento, "
       "cancelautomatico.nmpessoa, "
       "cancelautomatico.dsmotivo, "
       "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS') AS dtcancelamento, "
       "cancelautomatico.sgtipopessoa, "
       "cancelautomatico.nmorigemcancelamento, "
       "(SELECT lt.idlinhasistemaorigem "
          "FROM linha.linhatelefonica lt, "
               "linha.linhabase lb, "
               "apoio.arearegistro ar "
         "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
           "AND lb.nrlinha = cancelautomatico.nrlinha "
           "AND ar.idarearegistro = lb.idarearegistro "
           "AND lt.idlinhabase = lb.idlinhabase "
           "AND ROWNUM < 2) AS idlinhasistemaorigem, "
       "produtocancelado.sgprodutocancelado, "
       "cancelautomatico.nrprotocolo "
  "FROM atendimento.cancelautomatico cancelautomatico, "
       "apoio.produtocancelado produtocancelado "
 "WHERE cancelautomatico.idprodutocancelado = "
                                           "produtocancelado.idprodutocancelado "
   "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
   /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
   "AND cancelautomatico.sgtipopessoa = 'PF' "
   "AND produtocancelado.sgprodutocancelado IN "
                                          "('FIXO_VOZ', 'FIXO_BNDA_LRGA_FBRA') ";
    
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StmtSQL FROM :queryChar;
    EXEC SQL DECLARE curLinhaBandaLargaFibra CURSOR FOR StmtSQL;
    
    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_CNC_FIBRA_LNHA_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "TELEFONE;TELEFONE_CONTATO_FIXO;TELEFONE_MOVEL;NR_DOCUMENTO;NOME;MOTIVOCANCELAMENTO;DATACANCELAMENTO;TIPOCLIENTE;NOMECANAL;" );
    fprintf( fpOut, "%s", "COD_EPS;CO_ACCION_COMERCIAL;ID_PC_PRODUTO_COMERCIAL;ID_PRODUTO_OFERTA;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;" );
    fprintf( fpOut, "%s\n", "CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );
    
    EXEC SQL OPEN curLinhaBandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );
        
        EXEC SQL FETCH curLinhaBandaLargaFibra 
             INTO :nrLinha:i_nrLinha ,
                  :nrTelefoneContato:i_nrTelefoneContato ,
                  :nrDocumento:i_nrDocumento ,
                  :nmPessoa:i_nmPessoa ,
                  :dsMotivo:i_dsMotivo ,
                  :dtCancelamento:i_dtCancelamento ,
                  :sgTipoPessoa:i_sgTipoPessoa ,
                  :nmOrigemCancelamento:i_nmOrigemCancelamento ,
                  :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
                  :sgProdutoCancelado:i_sgProdutoCancelado ,
                  :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( nrLinha, i_nrLinha );
        CONVIND( nrTelefoneContato, i_nrTelefoneContato );
        CONVIND( nrDocumento, i_nrDocumento );
        CONVIND( nmPessoa, i_nmPessoa );
        CONVIND( dsMotivo, i_dsMotivo );
        CONVIND( dtCancelamento, i_dtCancelamento );
        CONVIND( sgTipoPessoa, i_sgTipoPessoa );
        CONVIND( nmOrigemCancelamento, i_nmOrigemCancelamento );
        CONVIND( idLinhaSistemaOrigem, i_idLinhaSistemaOrigem );
        CONVIND( sgProdutoCancelado, i_sgProdutoCancelado );
        CONVIND( nrProtocolo, i_nrProtocolo );

        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;;", (char*)nrTelefoneContato.arr );
        fprintf( fpOut, "%s;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;;;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );

        ctLinhas++;
    }
    EXEC SQL CLOSE curLinhaBandaLargaFibra;
    fclose( fpOut );
    
    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
            {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
            }
        }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Linha e Banda Larga Fibra, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Linha e Banda Larga Fibra: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< LinhaBandaLargaFibra");
    return 0;
    
SqlError_LinhaBandaLargaFibra:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux
);
    DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );
    return -1;

}



int BandaLargaPopular( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    char s_ddd_contato[3];
    char s_nrLinha_contato[11];
    
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    std::string bf;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR idLinhaSistemaOrigem[32];
        VARCHAR sgTipoPessoa[32];
        VARCHAR sgTipoDoc[32];
        VARCHAR nrDocumento[32];
        VARCHAR sgProdutoCancelado[32];
        VARCHAR nmPessoa[128];
        VARCHAR nmTipoLogradouro[16];
        VARCHAR nmLogradouro[128];
        VARCHAR nrEndereco[16];
        VARCHAR dsEnderecoComplemento[64];
        VARCHAR nmBairro[64];
        VARCHAR nrCep[16];
        VARCHAR nmMunicipio[64];
        VARCHAR cdAreaRegistro[3];
        VARCHAR nrLinha[16];
        VARCHAR nrTelefoneOrigem[32];
        VARCHAR nrTelefoneContato[32];
        VARCHAR dsMotivo[100];
        VARCHAR dtCancelamento[32];
        VARCHAR nmOrigemCancelamento[100];
        VARCHAR nrProtocolo[64];

        short i_idLinhaSistemaOrigem = -1;
        short i_sgTipoPessoa = -1;
        short i_sgTipoDoc = -1;
        short i_nrDocumento = -1;
        short i_sgProdutoCancelado = -1;
        short i_nmPessoa = -1;
        short i_nmTipoLogradouro = -1;
        short i_nmLogradouro = -1;
        short i_nrEndereco = -1;
        short i_dsEnderecoComplemento = -1;
        short i_nmBairro = -1;
        short i_nrCep = -1;
        short i_nmMunicipio = -1;
        short i_cdAreaRegistro = -1;
        short i_nrLinha = -1;
        short i_nrTelefoneOrigem = -1;
        short i_nrTelefoneContato = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_nmOrigemCancelamento = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );

    oLog.logDebug(">>> BandaLargaPopular");
   
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_BandaLargaPopular;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
   
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    bf =
    "SELECT DISTINCT (SELECT lt.idlinhasistemaorigem "
              "FROM linha.linhatelefonica lt, "
                   "linha.linhabase lb, "
                   "apoio.arearegistro ar "
             "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lt.idlinhabase = lb.idlinhabase "
               "AND ROWNUM < 2) AS idlinhasistemaorigem, "
           "decode(cancelautomatico.sgtipopessoa,'PF','CPF','PJ','CNPJ'), "
           "cancelautomatico.nrdocumento, "
           "produtocancelado.sgprodutocancelado, "
           "cancelautomatico.nmpessoa, "
           "(SELECT pe.nmtipologradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmtipologradouro, "
           "(SELECT pe.nmlogradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmlogradouro, "
           "(SELECT pe.nrendereco "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrendereco, "
           "(SELECT pe.dsenderecocomplemento "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS dsenderecocomplemento, "
           "(SELECT pe.nmbairro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmbairro, "
           "(SELECT pe.nrcep "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrcep, "
           "(SELECT pe.nmmunicipio "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmmunicipio, "
           "cancelautomatico.cdarearegistro, "
           "cancelautomatico.nrlinha, "
           "cancelautomatico.nrtelefonecontato, "
           "cancelautomatico.dsmotivo, "
           "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS'), "
           "cancelautomatico.sgtipopessoa, "
           "cancelautomatico.nmorigemcancelamento, "
           "cancelautomatico.nrprotocolo "
      "FROM atendimento.cancelautomatico cancelautomatico, "
           "apoio.produtocancelado produtocancelado "
     "WHERE cancelautomatico.idprodutocancelado = "
                                               "produtocancelado.idprodutocancelado "
       "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
       /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
       "AND cancelautomatico.sgtipopessoa = 'PF' "
       "AND produtocancelado.sgprodutocancelado = 'FIXO_BNDA_LRGA_PPLR'";
              
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StatementSQL FROM :queryChar;
    EXEC SQL DECLARE curBandaLargaPopular CURSOR FOR StatementSQL;

    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_ADSL_CNC_LNHA_BLPOP_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
        exit( EXIT_FAILURE );
    }

    fprintf( fpOut, "%s", "COD_EPS;CO_CAMPANHA;CO_ACCION_COMERCIAL;NU_ENVIO;ID_PC_PRODUTO_COMERCIAL;ID_TP_DOCUMENTO;NR_DOCUMENTO;NR_DIGITO_CONTROLE;SUBSEG_RES;ID_PRODUTO_OFERTA;ID_PRODUTO1;ID_PRODUTO2;" );
    fprintf( fpOut, "%s", "ID_PRODUTO3;ID_PRODUTO4;ID_PRODUTO5;NOME;TIPOLOGR;LOGRADOURO;NUMERO;COMPLEMENTO;BAIRRO;CEP;CIDADE;DDD;TELEFONE;DDD_CONTATO_FIXO;TELEFONE_CONTATO_FIXO;" );
    fprintf( fpOut, "%s", "DDD_MOVEL;TELEFONE_MOVEL;MHC;CORINGA1;CORINGA2;CORINGA3;CORINGA4;CORINGA5;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;" );
    fprintf( fpOut, "%s\n", "CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );

    EXEC SQL OPEN curBandaLargaPopular;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &sgTipoDoc, 0x0, sizeof(sgTipoDoc) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &nmTipoLogradouro, 0x0, sizeof(nmTipoLogradouro) );
        memset( &nmLogradouro, 0x0, sizeof(nmLogradouro) );
        memset( &nrEndereco, 0x0, sizeof(nrEndereco) );
        memset( &dsEnderecoComplemento, 0x0, sizeof(dsEnderecoComplemento) );
        memset( &nmBairro, 0x0, sizeof(nmBairro) );
        memset( &nrCep, 0x0, sizeof(nrCep) );
        memset( &nmMunicipio, 0x0, sizeof(nmMunicipio) );
        memset( &cdAreaRegistro, 0x0, sizeof(cdAreaRegistro) );
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneOrigem, 0x0, sizeof(nrTelefoneOrigem) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );

        i_idLinhaSistemaOrigem = -1;
        i_sgTipoPessoa = -1;
        i_nrDocumento = -1;
        i_sgProdutoCancelado = -1;
        i_nmPessoa = -1;
        i_nmTipoLogradouro = -1;
        i_nmLogradouro = -1;
        i_nrEndereco = -1;
        i_dsEnderecoComplemento = -1;
        i_nmBairro = -1;
        i_nrCep = -1;
        i_nmMunicipio = -1;
        i_cdAreaRegistro = -1;
        i_nrLinha = -1;
        i_nrTelefoneOrigem = -1;
        i_nrTelefoneContato = -1;
        i_dsMotivo = -1;
        i_dtCancelamento = -1;
        i_nmOrigemCancelamento = -1;
        i_nrProtocolo = -1;
        

        EXEC SQL FETCH curBandaLargaPopular 
        INTO 
            :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
            :sgTipoDoc:i_sgTipoDoc ,
            :nrDocumento:i_nrDocumento ,
            :sgProdutoCancelado:i_sgProdutoCancelado ,
            :nmPessoa:i_nmPessoa ,
            :nmTipoLogradouro:i_nmTipoLogradouro ,
            :nmLogradouro:i_nmLogradouro ,
            :nrEndereco:i_nrEndereco ,
            :dsEnderecoComplemento:i_dsEnderecoComplemento ,
            :nmBairro:i_nmBairro ,
            :nrCep:i_nrCep ,
            :nmMunicipio:i_nmMunicipio ,
            :cdAreaRegistro:i_cdAreaRegistro ,
            :nrLinha:i_nrLinha ,
            :nrTelefoneContato:i_nrTelefoneContato ,
            :dsMotivo:i_dsMotivo ,
            :dtCancelamento:i_dtCancelamento ,
            :sgTipoPessoa:i_sgTipoPessoa ,
            :nmOrigemCancelamento:i_nmOrigemCancelamento ,
            :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( idLinhaSistemaOrigem,i_idLinhaSistemaOrigem );
        CONVIND( sgTipoPessoa,i_sgTipoPessoa );
        CONVIND( sgTipoDoc,i_sgTipoDoc );
        CONVIND( nrDocumento,i_nrDocumento );
        CONVIND( sgProdutoCancelado,i_sgProdutoCancelado );
        CONVIND( nmPessoa,i_nmPessoa );
        CONVIND( nmTipoLogradouro,i_nmTipoLogradouro );
        CONVIND( nmLogradouro,i_nmLogradouro );
        CONVIND( nrEndereco,i_nrEndereco );
        CONVIND( dsEnderecoComplemento,i_dsEnderecoComplemento );
        CONVIND( nmBairro,i_nmBairro );
        CONVIND( nrCep,i_nrCep );
        CONVIND( nmMunicipio,i_nmMunicipio );
        CONVIND( cdAreaRegistro,i_cdAreaRegistro );
        CONVIND( nrLinha,i_nrLinha );
        CONVIND( nrTelefoneOrigem,i_nrTelefoneOrigem );

        CONVIND( nrTelefoneContato,i_nrTelefoneContato );
        sprintf( s_ddd_contato, "%.2s", (char*)&nrTelefoneContato.arr );
        sprintf( s_nrLinha_contato, "%s", (char*)&nrTelefoneContato.arr[2] );

        CONVIND( dsMotivo,i_dsMotivo );
        CONVIND( dtCancelamento,i_dtCancelamento );
        CONVIND( nmOrigemCancelamento,i_nmOrigemCancelamento );
        CONVIND( nrProtocolo,i_nrProtocolo );
                  
        fprintf( fpOut, ";;;;%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoDoc.arr );
        fprintf( fpOut, "%s;;;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;;;;;;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmTipoLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nmLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nrEndereco.arr );
        fprintf( fpOut, "%s;", (char*)dsEnderecoComplemento.arr );
        fprintf( fpOut, "%s;", (char*)nmBairro.arr );
        fprintf( fpOut, "%s;", (char*)nrCep.arr );
        fprintf( fpOut, "%s;", (char*)nmMunicipio.arr );
        fprintf( fpOut, "%s;", (char*)cdAreaRegistro.arr );
        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;", s_ddd_contato );
        fprintf( fpOut, "%s;;;;", s_nrLinha_contato );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );
        
        ctLinhas++;
    }
    EXEC SQL CLOSE curBandaLargaPopular;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Banda Larga Popular, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Banda Larga Popular: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< BandaLargaPopular");

    return 0;

SqlError_BandaLargaPopular:
        sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
        DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;
}



int BandaLargaSpeedyBLPOP( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    char s_ddd_contato[3];
    char s_nrLinha_contato[11];
    string bf;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR idLinhaSistemaOrigem[32];
        VARCHAR sgTipoPessoa[64];
        VARCHAR sgTipoDoc[64];
        VARCHAR nrDocumento[32];
        VARCHAR sgProdutoCancelado[32];
        VARCHAR nmPessoa[128];
        VARCHAR nmTipoLogradouro[16];
        VARCHAR nmLogradouro[128];
        VARCHAR nrEndereco[16];
        VARCHAR dsEnderecoComplemento[64];
        VARCHAR nmBairro[64];
        VARCHAR nrCep[16];
        VARCHAR nmMunicipio[64];
        VARCHAR cdAreaRegistro[3];
        VARCHAR nrLinha[16];
        VARCHAR nrTelefoneOrigem[32];
        VARCHAR nrTelefoneContato[32];
        VARCHAR dsMotivo[100];
        VARCHAR dtCancelamento[32];
        VARCHAR nmOrigemCancelamento[100];
        VARCHAR nrProtocolo[64];

        short i_idLinhaSistemaOrigem = -1;
        short i_sgTipoPessoa = -1;
        short i_sgTipoDoc = -1;
        short i_nrDocumento = -1;
        short i_sgProdutoCancelado = -1;
        short i_nmPessoa = -1;
        short i_nmTipoLogradouro = -1;
        short i_nmLogradouro = -1;
        short i_nrEndereco = -1;
        short i_dsEnderecoComplemento = -1;
        short i_nmBairro = -1;
        short i_nrCep = -1;
        short i_nmMunicipio = -1;
        short i_cdAreaRegistro = -1;
        short i_nrLinha = -1;
        short i_nrTelefoneOrigem = -1;
        short i_nrTelefoneContato = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_nmOrigemCancelamento = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );

    oLog.logDebug(">>> BandaLargaSpeedyBLPOP");
   
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_BandaLargaSpeedyBLPOP;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    bf =
    "SELECT DISTINCT (SELECT lt.idlinhasistemaorigem "
              "FROM linha.linhatelefonica lt, "
                   "linha.linhabase lb, "
                   "apoio.arearegistro ar "
             "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lt.idlinhabase = lb.idlinhabase "
               "AND ROWNUM < 2) AS idlinhasistemaorigem, "
           "decode(cancelautomatico.sgtipopessoa,'PF','CPF','PJ','CNPJ'), "
           "cancelautomatico.nrdocumento, "
           "produtocancelado.sgprodutocancelado, "
           "cancelautomatico.nmpessoa, "
           "(SELECT pe.nmtipologradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmtipologradouro, "
           "(SELECT pe.nmlogradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmlogradouro, "
           "(SELECT pe.nrendereco "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrendereco, "
           "(SELECT pe.dsenderecocomplemento "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS dsenderecocomplemento, "
           "(SELECT pe.nmbairro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmbairro, "
           "(SELECT pe.nrcep "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrcep, "
           "(SELECT pe.nmmunicipio "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmmunicipio, "
           "cancelautomatico.cdarearegistro, "
           "cancelautomatico.nrlinha, "
           "cancelautomatico.nrtelefonecontato, "
           "cancelautomatico.dsmotivo, "
           "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS'), "
           "cancelautomatico.sgtipopessoa, "
           "cancelautomatico.nmorigemcancelamento, "
           "cancelautomatico.nrprotocolo "
      "FROM atendimento.cancelautomatico cancelautomatico, "
           "apoio.produtocancelado produtocancelado "
     "WHERE cancelautomatico.idprodutocancelado = "
                                               "produtocancelado.idprodutocancelado "
       "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
       /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
       "AND cancelautomatico.sgtipopessoa = 'PF' "
       "AND produtocancelado.sgprodutocancelado IN "
                                              "('FIXO_BNDA_LRGA_PPLR', 'FIXO_VOZ')";
              
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StatementSQL FROM :queryChar;
    EXEC SQL DECLARE curBandaLargaSpeedyBLPOP CURSOR FOR StatementSQL;

    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_CNC_ADSL_LNHA_BLPOP_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "COD_EPS;CO_CAMPANHA;CO_ACCION_COMERCIAL;NU_ENVIO;ID_PC_PRODUTO_COMERCIAL;ID_TP_DOCUMENTO;NR_DOCUMENTO;NR_DIGITO_CONTROLE;SUBSEG_RES;ID_PRODUTO_OFERTA;ID_PRODUTO1;ID_PRODUTO2;" );
    fprintf( fpOut, "%s", "ID_PRODUTO3;ID_PRODUTO4;ID_PRODUTO5;NOME;TIPOLOGR;LOGRADOURO;NUMERO;COMPLEMENTO;BAIRRO;CEP;CIDADE;DDD;TELEFONE;DDD_CONTATO_FIXO;TELEFONE_CONTATO_FIXO;" );
    fprintf( fpOut, "%s", "DDD_MOVEL;TELEFONE_MOVEL;MHC;CORINGA1;CORINGA2;CORINGA3;CORINGA4;CORINGA5;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;" );
    fprintf( fpOut, "%s\n", "CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );

    EXEC SQL OPEN curBandaLargaSpeedyBLPOP;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &sgTipoDoc, 0x0, sizeof(sgTipoDoc) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &nmTipoLogradouro, 0x0, sizeof(nmTipoLogradouro) );
        memset( &nmLogradouro, 0x0, sizeof(nmLogradouro) );
        memset( &nrEndereco, 0x0, sizeof(nrEndereco) );
        memset( &dsEnderecoComplemento, 0x0, sizeof(dsEnderecoComplemento) );
        memset( &nmBairro, 0x0, sizeof(nmBairro) );
        memset( &nrCep, 0x0, sizeof(nrCep) );
        memset( &nmMunicipio, 0x0, sizeof(nmMunicipio) );
        memset( &cdAreaRegistro, 0x0, sizeof(cdAreaRegistro) );
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneOrigem, 0x0, sizeof(nrTelefoneOrigem) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );

        i_idLinhaSistemaOrigem = -1;
        i_sgTipoPessoa = -1;
        i_sgTipoDoc = -1;
        i_nrDocumento = -1;
        i_sgProdutoCancelado = -1;
        i_nmPessoa = -1;
        i_nmTipoLogradouro = -1;
        i_nmLogradouro = -1;
        i_nrEndereco = -1;
        i_dsEnderecoComplemento = -1;
        i_nmBairro = -1;
        i_nrCep = -1;
        i_nmMunicipio = -1;
        i_cdAreaRegistro = -1;
        i_nrLinha = -1;
        i_nrTelefoneOrigem = -1;
        i_nrTelefoneContato = -1;
        i_dsMotivo = -1;
        i_dtCancelamento = -1;
        i_nmOrigemCancelamento = -1;
        i_nrProtocolo = -1;
        

        EXEC SQL FETCH curBandaLargaSpeedyBLPOP 
        INTO 
            :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
            :sgTipoDoc:i_sgTipoDoc ,
            :nrDocumento:i_nrDocumento ,
            :sgProdutoCancelado:i_sgProdutoCancelado ,
            :nmPessoa:i_nmPessoa ,
            :nmTipoLogradouro:i_nmTipoLogradouro ,
            :nmLogradouro:i_nmLogradouro ,
            :nrEndereco:i_nrEndereco ,
            :dsEnderecoComplemento:i_dsEnderecoComplemento ,
            :nmBairro:i_nmBairro ,
            :nrCep:i_nrCep ,
            :nmMunicipio:i_nmMunicipio ,
            :cdAreaRegistro:i_cdAreaRegistro ,
            :nrLinha:i_nrLinha ,
            :nrTelefoneContato:i_nrTelefoneContato ,
            :dsMotivo:i_dsMotivo ,
            :dtCancelamento:i_dtCancelamento ,
            :sgTipoPessoa:i_sgTipoPessoa ,
            :nmOrigemCancelamento:i_nmOrigemCancelamento ,
            :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( idLinhaSistemaOrigem,i_idLinhaSistemaOrigem );
        CONVIND( sgTipoPessoa,i_sgTipoPessoa );
        CONVIND( sgTipoDoc,i_sgTipoDoc );
        CONVIND( nrDocumento,i_nrDocumento );
        CONVIND( sgProdutoCancelado,i_sgProdutoCancelado );
        CONVIND( nmPessoa,i_nmPessoa );
        CONVIND( nmTipoLogradouro,i_nmTipoLogradouro );
        CONVIND( nmLogradouro,i_nmLogradouro );
        CONVIND( nrEndereco,i_nrEndereco );
        CONVIND( dsEnderecoComplemento,i_dsEnderecoComplemento );
        CONVIND( nmBairro,i_nmBairro );
        CONVIND( nrCep,i_nrCep );
        CONVIND( nmMunicipio,i_nmMunicipio );
        CONVIND( cdAreaRegistro,i_cdAreaRegistro );
        CONVIND( nrLinha,i_nrLinha );
        CONVIND( nrTelefoneOrigem,i_nrTelefoneOrigem );
        
        CONVIND( nrTelefoneContato,i_nrTelefoneContato );
        sprintf( s_ddd_contato, "%.2s", (char*)&nrTelefoneContato.arr );
        sprintf( s_nrLinha_contato, "%s", (char*)&nrTelefoneContato.arr[2] );

        CONVIND( dsMotivo,i_dsMotivo );
        CONVIND( dtCancelamento,i_dtCancelamento );
        CONVIND( nmOrigemCancelamento,i_nmOrigemCancelamento );
        CONVIND( nrProtocolo,i_nrProtocolo );
                  
        fprintf( fpOut, ";;;;%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoDoc.arr );
        fprintf( fpOut, "%s;;;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;;;;;;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmTipoLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nmLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nrEndereco.arr );
        fprintf( fpOut, "%s;", (char*)dsEnderecoComplemento.arr );
        fprintf( fpOut, "%s;", (char*)nmBairro.arr );
        fprintf( fpOut, "%s;", (char*)nrCep.arr );
        fprintf( fpOut, "%s;", (char*)nmMunicipio.arr );
        fprintf( fpOut, "%s;", (char*)cdAreaRegistro.arr );
        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;", s_ddd_contato );
        fprintf( fpOut, "%s;;;;", s_nrLinha_contato );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );
                  
        ctLinhas++;
    }
    EXEC SQL CLOSE curBandaLargaSpeedyBLPOP;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para o produto Linha e Banda Larga Speedy, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Linha e Banda Larga Speedy: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< BandaLargaSpeedyBLPOP");

    return 0;

SqlError_BandaLargaSpeedyBLPOP:
        sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
        DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;
}



int BandaLargaFibra( void )
{
    time_t start_t, end_t;

    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;

    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    string bf;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR nrLinha[16];
        VARCHAR nrTelefoneContato[16];
        VARCHAR nrDocumento[32];
        VARCHAR nmPessoa[128];
        VARCHAR dsMotivo[100];
        VARCHAR dtCancelamento[32];
        VARCHAR sgTipoPessoa[3];
        VARCHAR nmOrigemCancelamento[100];
        VARCHAR idLinhaSistemaOrigem[32];
        VARCHAR sgProdutoCancelado[32];
        VARCHAR nrProtocolo[64];

        short i_nrLinha = -1;
        short i_nrTelefoneContato = -1;
        short i_nrDocumento = -1;
        short i_nmPessoa = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_sgTipoPessoa = -1;
        short i_nmOrigemCancelamento = -1;
        short i_idLinhaSistemaOrigem = -1;
        short i_sgProdutoCancelado = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );
    
    oLog.logDebug(">>> BandaLargaFibra");
    
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_BandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
   
    bf = 
    "SELECT DISTINCT cancelautomatico.cdarearegistro || cancelautomatico.nrlinha AS nrtelefone, "
       "cancelautomatico.nrtelefonecontato, cancelautomatico.nrdocumento, "
       "cancelautomatico.nmpessoa, cancelautomatico.dsmotivo, "
       "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS') AS dtcancelamento, "
       "cancelautomatico.sgtipopessoa, cancelautomatico.nmorigemcancelamento, "
       "(SELECT lt.idlinhasistemaorigem "
          "FROM linha.linhatelefonica lt, "
               "linha.linhabase lb, "
               "apoio.arearegistro ar "
         "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
           "AND lb.nrlinha = cancelautomatico.nrlinha "
           "AND ar.idarearegistro = lb.idarearegistro "
           "AND lt.idlinhabase = lb.idlinhabase "
           "AND ROWNUM < 2) AS idlinhasistemaorigem, "
       "produtocancelado.sgprodutocancelado, cancelautomatico.nrprotocolo "
  "FROM atendimento.cancelautomatico cancelautomatico, "
       "apoio.produtocancelado produtocancelado "
 "WHERE cancelautomatico.idprodutocancelado = "
                                           "produtocancelado.idprodutocancelado "
   "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
   /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
   "AND cancelautomatico.sgtipopessoa = 'PF' "
   "AND produtocancelado.sgprodutocancelado = 'FIXO_BNDA_LRGA_FBRA'";
    
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StmtSQL FROM :queryChar;
    EXEC SQL DECLARE curBandaLargaFibra CURSOR FOR StmtSQL;
    
    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_CNC_FIBRA_%s.csv",(char*)sHrArq.arr);
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "TELEFONE;TELEFONE_CONTATO_FIXO;TELEFONE_MOVEL;NR_DOCUMENTO;NOME;MOTIVOCANCELAMENTO;DATACANCELAMENTO;TIPOCLIENTE;NOMECANAL;" );
    fprintf( fpOut, "%s", "COD_EPS;CO_ACCION_COMERCIAL;ID_PC_PRODUTO_COMERCIAL;ID_PRODUTO_OFERTA;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;" );
    fprintf( fpOut, "%s\n", "CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );
    
    EXEC SQL OPEN curBandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );
        
        EXEC SQL FETCH curBandaLargaFibra 
             INTO :nrLinha:i_nrLinha ,
                  :nrTelefoneContato:i_nrTelefoneContato ,
                  :nrDocumento:i_nrDocumento ,
                  :nmPessoa:i_nmPessoa ,
                  :dsMotivo:i_dsMotivo ,
                  :dtCancelamento:i_dtCancelamento ,
                  :sgTipoPessoa:i_sgTipoPessoa ,
                  :nmOrigemCancelamento:i_nmOrigemCancelamento ,
                  :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
                  :sgProdutoCancelado:i_sgProdutoCancelado ,
                  :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( nrLinha, i_nrLinha );
        CONVIND( nrTelefoneContato, i_nrTelefoneContato );
        CONVIND( nrDocumento, i_nrDocumento );
        CONVIND( nmPessoa, i_nmPessoa );
        CONVIND( dsMotivo, i_dsMotivo );
        CONVIND( dtCancelamento, i_dtCancelamento );
        CONVIND( sgTipoPessoa, i_sgTipoPessoa );
        CONVIND( nmOrigemCancelamento, i_nmOrigemCancelamento );
        CONVIND( idLinhaSistemaOrigem, i_idLinhaSistemaOrigem );
        CONVIND( sgProdutoCancelado, i_sgProdutoCancelado );
        CONVIND( nrProtocolo, i_nrProtocolo );

        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;;", (char*)nrTelefoneContato.arr );
        fprintf( fpOut, "%s;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;;;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );

        ctLinhas++;
    }
    EXEC SQL CLOSE curBandaLargaFibra;
    fclose( fpOut );
    
    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
            {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
            }
        }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Linha e Banda Larga Fibra, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Linha e Banda Larga Fibra: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< BandaLargaFibra");
    return 0;
    
SqlError_BandaLargaFibra:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux
);
    DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );
    return -1;

}



int SomenteBandaLargaFibra( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    char s_ddd_contato[3];
    char s_nrLinha_contato[11];
    string bf;

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR idLinhaSistemaOrigem[32];
        VARCHAR sgTipoPessoa[64];
        VARCHAR sgTipoDoc[64];
        VARCHAR nrDocumento[32];
        VARCHAR sgProdutoCancelado[32];
        VARCHAR nmPessoa[128];
        VARCHAR nmTipoLogradouro[16];
        VARCHAR nmLogradouro[128];
        VARCHAR nrEndereco[16];
        VARCHAR dsEnderecoComplemento[64];
        VARCHAR nmBairro[64];
        VARCHAR nrCep[16];
        VARCHAR nmMunicipio[64];
        VARCHAR cdAreaRegistro[3];
        VARCHAR nrLinha[16];
        VARCHAR nrTelefoneOrigem[32];
        VARCHAR nrTelefoneContato[32];
        VARCHAR dsMotivo[100];
        VARCHAR dtCancelamento[32];
        VARCHAR nmOrigemCancelamento[100];
        VARCHAR nrProtocolo[64];

        short i_idLinhaSistemaOrigem = -1;
        short i_sgTipoPessoa = -1;
        short i_sgTipoDoc = -1;
        short i_nrDocumento = -1;
        short i_sgProdutoCancelado = -1;
        short i_nmPessoa = -1;
        short i_nmTipoLogradouro = -1;
        short i_nmLogradouro = -1;
        short i_nrEndereco = -1;
        short i_dsEnderecoComplemento = -1;
        short i_nmBairro = -1;
        short i_nrCep = -1;
        short i_nmMunicipio = -1;
        short i_cdAreaRegistro = -1;
        short i_nrLinha = -1;
        short i_nrTelefoneOrigem = -1;
        short i_nrTelefoneContato = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_nmOrigemCancelamento = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );

    oLog.logDebug(">>> SomenteBandaLargaFibra");
   
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_SomenteBandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    bf =
    "SELECT DISTINCT (SELECT lt.idlinhasistemaorigem "
              "FROM linha.linhatelefonica lt, "
                   "linha.linhabase lb, "
                   "apoio.arearegistro ar "
             "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lt.idlinhabase = lb.idlinhabase "
               "AND ROWNUM < 2) AS idlinhasistemaorigem, "
           "decode(cancelautomatico.sgtipopessoa,'PF','CPF','PJ','CNPJ'), "
           "cancelautomatico.nrdocumento, "
           "produtocancelado.sgprodutocancelado, "
           "cancelautomatico.nmpessoa, "
           "(SELECT pe.nmtipologradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmtipologradouro, "
           "(SELECT pe.nmlogradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmlogradouro, "
           "(SELECT pe.nrendereco "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrendereco, "
           "(SELECT pe.dsenderecocomplemento "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS dsenderecocomplemento, "
           "(SELECT pe.nmbairro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmbairro, "
           "(SELECT pe.nrcep "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrcep, "
           "(SELECT pe.nmmunicipio "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmmunicipio, "
           "cancelautomatico.cdarearegistro, "
           "cancelautomatico.nrlinha, "
           "cancelautomatico.nrtelefonecontato, "
           "cancelautomatico.dsmotivo, "
           "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS'), "
           "cancelautomatico.sgtipopessoa, "
           "cancelautomatico.nmorigemcancelamento, "
           "cancelautomatico.nrprotocolo "
      "FROM atendimento.cancelautomatico cancelautomatico, "
           "apoio.produtocancelado produtocancelado "
     "WHERE cancelautomatico.idprodutocancelado = "
                                               "produtocancelado.idprodutocancelado "
       "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
       /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
       "AND cancelautomatico.sgtipopessoa = 'PF' "
       "AND produtocancelado.sgprodutocancelado = 'FIXO_BNDA_LRGA_FBRA'";
              
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StatementSQL FROM :queryChar;
    EXEC SQL DECLARE curSomenteBandaLargaFibra CURSOR FOR StatementSQL;

    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_FIBRA_CNC_LNHA_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "COD_EPS;CO_CAMPANHA;CO_ACCION_COMERCIAL;NU_ENVIO;ID_PC_PRODUTO_COMERCIAL;ID_TP_DOCUMENTO;NR_DOCUMENTO;NR_DIGITO_CONTROLE;SUBSEG_RES;ID_PRODUTO_OFERTA;ID_PRODUTO1;ID_PRODUTO2;" );
    fprintf( fpOut, "%s", "ID_PRODUTO3;ID_PRODUTO4;ID_PRODUTO5;NOME;TIPOLOGR;LOGRADOURO;NUMERO;COMPLEMENTO;BAIRRO;CEP;CIDADE;DDD;TELEFONE;DDD_CONTATO_FIXO;TELEFONE_CONTATO_FIXO;" );
    fprintf( fpOut, "%s", "DDD_MOVEL;TELEFONE_MOVEL;MHC;CORINGA1;CORINGA2;CORINGA3;CORINGA4;CORINGA5;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;" );
    fprintf( fpOut, "%s\n", "CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );

    EXEC SQL OPEN curSomenteBandaLargaFibra;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &sgTipoDoc, 0x0, sizeof(sgTipoDoc) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &nmTipoLogradouro, 0x0, sizeof(nmTipoLogradouro) );
        memset( &nmLogradouro, 0x0, sizeof(nmLogradouro) );
        memset( &nrEndereco, 0x0, sizeof(nrEndereco) );
        memset( &dsEnderecoComplemento, 0x0, sizeof(dsEnderecoComplemento) );
        memset( &nmBairro, 0x0, sizeof(nmBairro) );
        memset( &nrCep, 0x0, sizeof(nrCep) );
        memset( &nmMunicipio, 0x0, sizeof(nmMunicipio) );
        memset( &cdAreaRegistro, 0x0, sizeof(cdAreaRegistro) );
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneOrigem, 0x0, sizeof(nrTelefoneOrigem) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );

        i_idLinhaSistemaOrigem = -1;
        i_sgTipoPessoa = -1;
        i_sgTipoDoc = -1;
        i_nrDocumento = -1;
        i_sgProdutoCancelado = -1;
        i_nmPessoa = -1;
        i_nmTipoLogradouro = -1;
        i_nmLogradouro = -1;
        i_nrEndereco = -1;
        i_dsEnderecoComplemento = -1;
        i_nmBairro = -1;
        i_nrCep = -1;
        i_nmMunicipio = -1;
        i_cdAreaRegistro = -1;
        i_nrLinha = -1;
        i_nrTelefoneOrigem = -1;
        i_nrTelefoneContato = -1;
        i_dsMotivo = -1;
        i_dtCancelamento = -1;
        i_nmOrigemCancelamento = -1;
        i_nrProtocolo = -1;
        

        EXEC SQL FETCH curSomenteBandaLargaFibra 
        INTO 
            :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
            :sgTipoDoc:i_sgTipoDoc ,
            :nrDocumento:i_nrDocumento ,
            :sgProdutoCancelado:i_sgProdutoCancelado ,
            :nmPessoa:i_nmPessoa ,
            :nmTipoLogradouro:i_nmTipoLogradouro ,
            :nmLogradouro:i_nmLogradouro ,
            :nrEndereco:i_nrEndereco ,
            :dsEnderecoComplemento:i_dsEnderecoComplemento ,
            :nmBairro:i_nmBairro ,
            :nrCep:i_nrCep ,
            :nmMunicipio:i_nmMunicipio ,
            :cdAreaRegistro:i_cdAreaRegistro ,
            :nrLinha:i_nrLinha ,
            :nrTelefoneContato:i_nrTelefoneContato ,
            :dsMotivo:i_dsMotivo ,
            :dtCancelamento:i_dtCancelamento ,
            :sgTipoPessoa:i_sgTipoPessoa ,
            :nmOrigemCancelamento:i_nmOrigemCancelamento ,
            :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( idLinhaSistemaOrigem,i_idLinhaSistemaOrigem );
        CONVIND( sgTipoPessoa,i_sgTipoPessoa );
        CONVIND( sgTipoDoc,i_sgTipoDoc );
        CONVIND( nrDocumento,i_nrDocumento );
        CONVIND( sgProdutoCancelado,i_sgProdutoCancelado );
        CONVIND( nmPessoa,i_nmPessoa );
        CONVIND( nmTipoLogradouro,i_nmTipoLogradouro );
        CONVIND( nmLogradouro,i_nmLogradouro );
        CONVIND( nrEndereco,i_nrEndereco );
        CONVIND( dsEnderecoComplemento,i_dsEnderecoComplemento );
        CONVIND( nmBairro,i_nmBairro );
        CONVIND( nrCep,i_nrCep );
        CONVIND( nmMunicipio,i_nmMunicipio );
        CONVIND( cdAreaRegistro,i_cdAreaRegistro );
        CONVIND( nrLinha,i_nrLinha );
        CONVIND( nrTelefoneOrigem,i_nrTelefoneOrigem );
        
        CONVIND( nrTelefoneContato,i_nrTelefoneContato );
        sprintf( s_ddd_contato, "%.2s", (char*)&nrTelefoneContato.arr );
        sprintf( s_nrLinha_contato, "%s", (char*)&nrTelefoneContato.arr[2] );

        CONVIND( dsMotivo,i_dsMotivo );
        CONVIND( dtCancelamento,i_dtCancelamento );
        CONVIND( nmOrigemCancelamento,i_nmOrigemCancelamento );
        CONVIND( nrProtocolo,i_nrProtocolo );
                  
        fprintf( fpOut, ";;;;%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoDoc.arr );
        fprintf( fpOut, "%s;;;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;;;;;;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmTipoLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nmLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nrEndereco.arr );
        fprintf( fpOut, "%s;", (char*)dsEnderecoComplemento.arr );
        fprintf( fpOut, "%s;", (char*)nmBairro.arr );
        fprintf( fpOut, "%s;", (char*)nrCep.arr );
        fprintf( fpOut, "%s;", (char*)nmMunicipio.arr );
        fprintf( fpOut, "%s;", (char*)cdAreaRegistro.arr );
        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;", s_ddd_contato );
        fprintf( fpOut, "%s;;;;", s_nrLinha_contato );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );
                  
        ctLinhas++;
    }
    EXEC SQL CLOSE curSomenteBandaLargaFibra;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Somente Banda Larga Fibra, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio de Cancelamento Somente Banda Larga Fibra: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< SomenteBandaLargaFibra");

    return 0;

SqlError_SomenteBandaLargaFibra:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
    DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;
}



int Relat_TV_DTH( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];

    EXEC SQL BEGIN DECLARE SECTION;

        VARCHAR sRegistro[256];
        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sRegistro = -1;
        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq       , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa   , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );
    
    oLog.logDebug(">>> Relat_TV_DTH");

    EXEC SQL WHENEVER SQLERROR GOTO SqlError_Relat_TV_DTH;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    EXEC SQL DECLARE curRelat_TV_DTH CURSOR FOR
    SELECT    ca.cdarearegistro
           || ca.nrlinha
           || ';'
           || ca.nmorigemcancelamento
           || ';'
           || DECODE (ca.nmorigemcancelamento,
                      'URA_FIXA', 'FIXA',
                      'URA_FIBRA', 'FIBRA_DTH',
                      'URA_TV_CABO', 'CABO',
                      'URA_DTH', 'CABO',
                      'URA_MOVEL', 'MOVEL',
                      'MEUVIVO_PF', 'MEUVIVO',
                      'MEUVIVO_PJ', 'MEUVIVOCORP',
                      ''
                     )
           || ';'
           || pc.sgprodutocancelado
           || ';'
           || TO_CHAR (SYSDATE, 'dd/mm/rrrr')
           || ';'
           || '1'
           || ';'
           || TO_CHAR (ca.dtcancelamento, 'dd/mm/rrrr')
           || ';'
           || ';'
           || ca.nrdocumento
           || ';'
           || ca.sgtipopessoa
           || ';'
           || pc.sgprodutocancelado
           || ';'
           || ';'
           || ';'
           || ';'
           || ';'
           || ';'
           || ca.cdassinatura
           || ';'
           || ';'
           || ';'
           || ';'
           || ';' AS registro
      FROM atendimento.cancelautomatico ca, apoio.produtocancelado pc
     WHERE ca.idprodutocancelado = pc.idprodutocancelado
       AND TRUNC (ca.dtcancelamento) >= TRUNC ((SYSDATE) - 1) 
       /* AND TRUNC (ca.dtcancelamento) >= TO_DATE ('27/09/2016','DD/MM/RRRR') */
       AND ca.sgtipopessoa = 'PF'
       AND pc.sgprodutocancelado = 'FIXO_TV_DTH';

              
    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/RACO_DTH_%s.csv",(char*)sHrArq.arr );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        exit( EXIT_FAILURE );
    }
    
    
    fprintf( fpOut, "%s", "NR_TLFN;NOMECANAL;CANAL;NOMEPRODUTO;DT_CARGA;QTDE;DATACANCELAMENTO;TP_PERFIL;NUMERODOCUMENTO;" ); 
    fprintf( fpOut, "%s", "TIPOCLIENTE;PROD;STATUS_ATIVO;STATUS_CANCELADO;STATUS_SUSPENSO;STATUS_OUTROS;STATUS_FINAL;CODIGOASSINATURA;" ); 
    fprintf( fpOut, "%s\n", "DATA_RETENCAO;DS_STATUS_RETENCAO;DS_MOTIVO_RETENCAO;DS_SITUACAO_PROTOCOLO_RETENCAO" ); 
    
    EXEC SQL OPEN curRelat_TV_DTH;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &sRegistro, 0x0, sizeof(sRegistro) );
        EXEC SQL FETCH curRelat_TV_DTH 
             INTO :sRegistro:i_sRegistro ;
                  
        CONVIND( sRegistro, i_sRegistro );
        fprintf( fpOut, "%s\n", (char*)sRegistro.arr );
        ctLinhas++;
    }
    EXEC SQL CLOSE curRelat_TV_DTH;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para RACO_DTH, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio de Cancelamento Movel: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< Relat_TV_DTH");
    return 0;

SqlError_Relat_TV_DTH:
    sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux
);
    DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;

}



int OnlyBandaLargaSpeedy( void )
{
    time_t start_t, end_t;
    
    int diff_t;
    int hour,min,sec; 
    int ctLinhas = 0;
    
    time(&start_t);

    FILE *fpOut;
    char sNomeArqSaida[256];
    string bf;
    char s_ddd_contato[3];
    char s_nrLinha_contato[11];
    char aux[512];
    

    EXEC SQL BEGIN DECLARE SECTION;

        const char *queryChar;

        VARCHAR idLinhaSistemaOrigem[256];
        VARCHAR sgTipoPessoa[256];
        VARCHAR sgTipoDoc[256];
        VARCHAR nrDocumento[256];
        VARCHAR sgProdutoCancelado[256];
        VARCHAR nmPessoa[256];
        VARCHAR nmTipoLogradouro[256];
        VARCHAR nmLogradouro[256];
        VARCHAR nrEndereco[256];
        VARCHAR dsEnderecoComplemento[256];
        VARCHAR nmBairro[256];
        VARCHAR nrCep[256];
        VARCHAR nmMunicipio[256];
        VARCHAR cdAreaRegistro[256];
        VARCHAR nrLinha[256];
        VARCHAR nrTelefoneOrigem[256];
        VARCHAR nrTelefoneContato[256];
        VARCHAR dsMotivo[256];
        VARCHAR dtCancelamento[256];
        VARCHAR nmOrigemCancelamento[256];
        VARCHAR nrProtocolo[256];

        short i_idLinhaSistemaOrigem = -1;
        short i_sgTipoPessoa = -1;
        short i_sgTipoDoc = -1;
        short i_nrDocumento = -1;
        short i_sgProdutoCancelado = -1;
        short i_nmPessoa = -1;
        short i_nmTipoLogradouro = -1;
        short i_nmLogradouro = -1;
        short i_nrEndereco = -1;
        short i_dsEnderecoComplemento = -1;
        short i_nmBairro = -1;
        short i_nrCep = -1;
        short i_nmMunicipio = -1;
        short i_cdAreaRegistro = -1;
        short i_nrLinha = -1;
        short i_nrTelefoneOrigem = -1;
        short i_nrTelefoneContato = -1;
        short i_dsMotivo = -1;
        short i_dtCancelamento = -1;
        short i_nmOrigemCancelamento = -1;
        short i_nrProtocolo = -1;

        VARCHAR sHrArq[16];
        VARCHAR dtPesquisa[11];

        short   i_sHrArq = -1;
        short   i_dtPesquisa = -1;
        
    EXEC SQL END DECLARE SECTION;
    
    memset( &sHrArq     , 0x0, sizeof(sHrArq) );
    memset( &dtPesquisa , 0x0, sizeof(dtPesquisa) );
    memset( sNomeArqSaida , 0x0, sizeof(sNomeArqSaida) );

    oLog.logDebug(">>> OnlyBandaLargaSpeedy");
   
    EXEC SQL WHENEVER SQLERROR GOTO SqlError_OnlyBandaLargaSpeedy;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    
    EXEC SQL
    SELECT TRUNC (SYSDATE - 1)
    INTO :dtPesquisa:i_dtPesquisa
      FROM DUAL;
    
    CONVIND( dtPesquisa, i_dtPesquisa );
    
    bf =
    "SELECT DISTINCT (SELECT lt.idlinhasistemaorigem "
              "FROM linha.linhatelefonica lt, "
                   "linha.linhabase lb, "
                   "apoio.arearegistro ar "
             "WHERE ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lt.idlinhabase = lb.idlinhabase "
               "AND ROWNUM < 2) AS idlinhasistemaorigem, "
           "decode(cancelautomatico.sgtipopessoa,'PF','CPF','PJ','CNPJ'), "
           "cancelautomatico.nrdocumento, "
           "produtocancelado.sgprodutocancelado, "
           "cancelautomatico.nmpessoa, "
           "(SELECT pe.nmtipologradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmtipologradouro, "
           "(SELECT pe.nmlogradouro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmlogradouro, "
           "(SELECT pe.nrendereco "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrendereco, "
           "(SELECT pe.dsenderecocomplemento "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS dsenderecocomplemento, "
           "(SELECT pe.nmbairro "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmbairro, "
           "(SELECT pe.nrcep "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nrcep, "
           "(SELECT pe.nmmunicipio "
              "FROM linha.linhabase lb, "
                   "apoio.arearegistro ar, "
                   "linha.linhatelefonica lt, "
                   "customer.pessoalinha pl, "
                   "customer.pessoaendereco pe, "
                   "customer.contaendereco ce, "
                   "customer.linhaconta lc "
             "WHERE lb.nrlinha = cancelautomatico.nrlinha "
               "AND ar.cdarearegistro = cancelautomatico.cdarearegistro "
               "AND ar.idarearegistro = lb.idarearegistro "
               "AND lb.idlinhabase = lt.idlinhabase "
               "AND lt.idlinhatelefonica = pl.idlinhatelefonica "
               "AND lc.idlinhatelefonica = lt.idlinhatelefonica "
               "AND lc.idconta = ce.idconta "
               "AND ce.idpessoaendereco = pe.idpessoaendereco "
               "AND ROWNUM < 2) AS nmmunicipio, "
           "cancelautomatico.cdarearegistro, "
           "cancelautomatico.nrlinha, "
           "cancelautomatico.nrtelefonecontato, "
           "cancelautomatico.dsmotivo, "
           "TO_CHAR (cancelautomatico.dtcancelamento, 'DD/MM/RRRR HH24:MI:SS'), "
           "cancelautomatico.sgtipopessoa, "
           "cancelautomatico.nmorigemcancelamento, "
           "cancelautomatico.nrprotocolo "
      "FROM atendimento.cancelautomatico cancelautomatico, "
           "apoio.produtocancelado produtocancelado "
     "WHERE cancelautomatico.idprodutocancelado = "
                                               "produtocancelado.idprodutocancelado "
       "AND TRUNC (cancelautomatico.dtcancelamento) >= TRUNC (SYSDATE - 1) "
       /* "AND TRUNC (cancelautomatico.dtcancelamento) >= TO_DATE ( '27/09/2016','DD/MM/RRRR') " */
       "AND cancelautomatico.sgtipopessoa = 'PF' "
       "AND produtocancelado.sgprodutocancelado = 'FIXO_BNDA_LRGA_ADSL'";

       
    queryChar = bf.c_str();
    sprintf( szAux, "queryChar [%s]", queryChar ); oLog.logDebug(szAux);

    EXEC SQL PREPARE StatementSQL FROM :queryChar;
    EXEC SQL DECLARE curOnlyBandaLargaSpeedy CURSOR FOR StatementSQL;

    EXEC SQL
    SELECT TO_CHAR(SYSDATE,'RRRRMMDD') INTO :sHrArq:i_sHrArq FROM DUAL;
    CONVIND( sHrArq, i_sHrArq );

    sprintf( sNomeArqSaida, "../data/PF_RACO_ADSL_CNC_LNHA_%s.csv",(char*)sHrArq.arr    );
    oLog.logDebug(sNomeArqSaida);

    if( (fpOut = fopen( sNomeArqSaida, "w" )) == NULL)
    {
        sprintf(szAux, "@@@ ERRO ABRINDO ARQUIVO [%s]. errno(%d) strerror[%s]", sNomeArqSaida, errno, strerror(errno)); oLog.logError(szAux);
        oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
        exit( EXIT_FAILURE );
    }
    
    fprintf( fpOut, "%s", "COD_EPS;CO_CAMPANHA;CO_ACCION_COMERCIAL;NU_ENVIO;ID_PC_PRODUTO_COMERCIAL;ID_TP_DOCUMENTO;NR_DOCUMENTO;NR_DIGITO_CONTROLE;SUBSEG_RES;ID_PRODUTO_OFERTA;ID_PRODUTO1;ID_PRODUTO2;" );
    fprintf( fpOut, "%s", "ID_PRODUTO3;ID_PRODUTO4;ID_PRODUTO5;NOME;TIPOLOGR;LOGRADOURO;NUMERO;COMPLEMENTO;BAIRRO;CEP;CIDADE;DDD;TELEFONE;DDD_CONTATO_FIXO;TELEFONE_CONTATO_FIXO;" );
    fprintf( fpOut, "%s", "DDD_MOVEL;TELEFONE_MOVEL;MHC;CORINGA1;CORINGA2;CORINGA3;CORINGA4;CORINGA5;CORINGA6;CORINGA7;CORINGA8;CORINGA9;CORINGA10;CORINGA11;CORINGA12;CORINGA13;CORINGA14;CORINGA15;" );
    fprintf( fpOut, "%s\n", "CORINGA16;CORINGA17;CORINGA18;CORINGA19;CORINGA20;ID_QUESTIONARIO" );

    EXEC SQL OPEN curOnlyBandaLargaSpeedy;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for ( ;; )
    {
        memset( &idLinhaSistemaOrigem, 0x0, sizeof(idLinhaSistemaOrigem) );
        memset( &sgTipoPessoa, 0x0, sizeof(sgTipoPessoa) );
        memset( &sgTipoDoc, 0x0, sizeof(sgTipoDoc) );
        memset( &nrDocumento, 0x0, sizeof(nrDocumento) );
        memset( &sgProdutoCancelado, 0x0, sizeof(sgProdutoCancelado) );
        memset( &nmPessoa, 0x0, sizeof(nmPessoa) );
        memset( &nmTipoLogradouro, 0x0, sizeof(nmTipoLogradouro) );
        memset( &nmLogradouro, 0x0, sizeof(nmLogradouro) );
        memset( &nrEndereco, 0x0, sizeof(nrEndereco) );
        memset( &dsEnderecoComplemento, 0x0, sizeof(dsEnderecoComplemento) );
        memset( &nmBairro, 0x0, sizeof(nmBairro) );
        memset( &nrCep, 0x0, sizeof(nrCep) );
        memset( &nmMunicipio, 0x0, sizeof(nmMunicipio) );
        memset( &cdAreaRegistro, 0x0, sizeof(cdAreaRegistro) );
        memset( &nrLinha, 0x0, sizeof(nrLinha) );
        memset( &nrTelefoneOrigem, 0x0, sizeof(nrTelefoneOrigem) );
        memset( &nrTelefoneContato, 0x0, sizeof(nrTelefoneContato) );
        memset( &dsMotivo, 0x0, sizeof(dsMotivo) );
        memset( &dtCancelamento, 0x0, sizeof(dtCancelamento) );
        memset( &nmOrigemCancelamento, 0x0, sizeof(nmOrigemCancelamento) );
        memset( &nrProtocolo, 0x0, sizeof(nrProtocolo) );

        i_idLinhaSistemaOrigem = -1;
        i_sgTipoPessoa = -1;
        i_nrDocumento = -1;
        i_sgProdutoCancelado = -1;
        i_nmPessoa = -1;
        i_nmTipoLogradouro = -1;
        i_nmLogradouro = -1;
        i_nrEndereco = -1;
        i_dsEnderecoComplemento = -1;
        i_nmBairro = -1;
        i_nrCep = -1;
        i_nmMunicipio = -1;
        i_cdAreaRegistro = -1;
        i_nrLinha = -1;
        i_nrTelefoneOrigem = -1;
        i_nrTelefoneContato = -1;
        i_dsMotivo = -1;
        i_dtCancelamento = -1;
        i_nmOrigemCancelamento = -1;
        i_nrProtocolo = -1;
        

        EXEC SQL FETCH curOnlyBandaLargaSpeedy 
        INTO 
            :idLinhaSistemaOrigem:i_idLinhaSistemaOrigem ,
            :sgTipoDoc:i_sgTipoDoc ,
            :nrDocumento:i_nrDocumento ,
            :sgProdutoCancelado:i_sgProdutoCancelado ,
            :nmPessoa:i_nmPessoa ,
            :nmTipoLogradouro:i_nmTipoLogradouro ,
            :nmLogradouro:i_nmLogradouro ,
            :nrEndereco:i_nrEndereco ,
            :dsEnderecoComplemento:i_dsEnderecoComplemento ,
            :nmBairro:i_nmBairro ,
            :nrCep:i_nrCep ,
            :nmMunicipio:i_nmMunicipio ,
            :cdAreaRegistro:i_cdAreaRegistro ,
            :nrLinha:i_nrLinha ,
            :nrTelefoneContato:i_nrTelefoneContato ,
            :dsMotivo:i_dsMotivo ,
            :dtCancelamento:i_dtCancelamento ,
            :sgTipoPessoa:i_sgTipoPessoa ,
            :nmOrigemCancelamento:i_nmOrigemCancelamento ,
            :nrProtocolo:i_nrProtocolo ;
             
        CONVIND( idLinhaSistemaOrigem,i_idLinhaSistemaOrigem );
        CONVIND( sgTipoPessoa,i_sgTipoPessoa );
        CONVIND( sgTipoDoc,i_sgTipoDoc );
        CONVIND( nrDocumento,i_nrDocumento );
        CONVIND( sgProdutoCancelado,i_sgProdutoCancelado );
        CONVIND( nmPessoa,i_nmPessoa );
        CONVIND( nmTipoLogradouro,i_nmTipoLogradouro );
        CONVIND( nmLogradouro,i_nmLogradouro );
        CONVIND( nrEndereco,i_nrEndereco );
        CONVIND( dsEnderecoComplemento,i_dsEnderecoComplemento );
        CONVIND( nmBairro,i_nmBairro );
        CONVIND( nrCep,i_nrCep );
        CONVIND( nmMunicipio,i_nmMunicipio );
        CONVIND( cdAreaRegistro,i_cdAreaRegistro );
        CONVIND( nrLinha,i_nrLinha );
        CONVIND( nrTelefoneOrigem,i_nrTelefoneOrigem );
        
        CONVIND( nrTelefoneContato,i_nrTelefoneContato );
        sprintf( s_ddd_contato, "%.2s", (char*)&nrTelefoneContato.arr );
        sprintf( s_nrLinha_contato, "%s", (char*)&nrTelefoneContato.arr[2] );
        
        
        CONVIND( dsMotivo,i_dsMotivo );
        CONVIND( dtCancelamento,i_dtCancelamento );
        CONVIND( nmOrigemCancelamento,i_nmOrigemCancelamento );
        CONVIND( nrProtocolo,i_nrProtocolo );
        
        fprintf( fpOut, ";;;;%s;", (char*)idLinhaSistemaOrigem.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoDoc.arr );
        fprintf( fpOut, "%s;;;", (char*)nrDocumento.arr );
        fprintf( fpOut, "%s;;;;;;", (char*)sgProdutoCancelado.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmTipoLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nmLogradouro.arr );
        fprintf( fpOut, "%s;", (char*)nrEndereco.arr );
        fprintf( fpOut, "%s;", (char*)dsEnderecoComplemento.arr );
        fprintf( fpOut, "%s;", (char*)nmBairro.arr );
        fprintf( fpOut, "%s;", (char*)nrCep.arr );
        fprintf( fpOut, "%s;", (char*)nmMunicipio.arr );
        fprintf( fpOut, "%s;", (char*)cdAreaRegistro.arr );
        fprintf( fpOut, "%s;", (char*)nrLinha.arr );
        fprintf( fpOut, "%s;", s_ddd_contato );
        fprintf( fpOut, "%s;;;;", s_nrLinha_contato );
        fprintf( fpOut, "%s;", (char*)dsMotivo.arr );
        fprintf( fpOut, "%s;", (char*)nmPessoa.arr );
        fprintf( fpOut, "%s;", (char*)dtCancelamento.arr );
        fprintf( fpOut, "%s;", (char*)sgTipoPessoa.arr );
        fprintf( fpOut, "%s;", (char*)nmOrigemCancelamento.arr );
        fprintf( fpOut, "%s;;;;;;;;;;;;;;;\n", (char*)nrProtocolo.arr );
        
        ctLinhas++;
    }
    EXEC SQL CLOSE curOnlyBandaLargaSpeedy;
    fclose( fpOut );

    sprintf( szAux,    "======================== Sintese do Relatorio ========================\n" ); oLog.logDebug(szAux);
    if ( ctLinhas > 0 )
    {
        if ( ctLinhas > 1 )
        {
           sprintf(szAux, "*** [%d] Registros gravados em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
        else
        {
           sprintf(szAux, "*** [%d] Registro gravado em [%s] ***\n", ctLinhas, &sNomeArqSaida[8] ); oLog.logDebug(szAux);
        }
    }
    else
    {
        sprintf(szAux, "### !!! Nenhum registro encontrado para Somente Banda Larga Speedy, data de pesquisa [%s] ###", 
                      (char*)dtPesquisa.arr ); oLog.logDebug(szAux);
    }
    sprintf( szAux,    "======================================================================\n" ); oLog.logDebug(szAux);
    
    time(&end_t);
    diff_t = difftime(end_t, start_t);
    hour = diff_t / 3600; 
    diff_t = diff_t % 3600; 
    min = diff_t / 60; 
    diff_t = diff_t % 60; 
    sec = diff_t; 
    
    sprintf( szAux, "---> Tempo de Geracao Relatorio Somente Banda Larga Speedy: %02d:%02d:%02d", hour, min, sec ); oLog.logDebug(szAux);

    oLog.logDebug("<<< OnlyBandaLargaSpeedy");

    return 0;

SqlError_OnlyBandaLargaSpeedy:
        sprintf(szAux, "####### ERRO ORACLE [%d] MSG: [%s] #######\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc ); oLog.logDebug(szAux);
        DBDisconnect();
    oLog.logDebug("!!! PROCESSAMENTO ABORTADO ###");
    exit( EXIT_FAILURE );    
    return -1;
}
