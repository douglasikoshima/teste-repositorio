#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <list>
#include <dirent.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/cargaPlanoDados.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"
#include "../../commons/CLeitorArquivo/CLeitorArquivo.h"
#include "../../commons/CFile/include/CFile.h"

EXEC SQL INCLUDE SQLCA;

char szAux[1024];
char szTemp[1024];
char szTempTrace[2048];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 2048

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#ifdef WIN32
#define MKDIR _mkdir
#define ACCESS _access
#else
#define MKDIR mkdir
#define ACCESS access
#endif

int InserirRegistros(char *buffer);
void listarArquivos( char *path, list<CFile> &arquivos, char *type);

int main(void)
{
    TParamConf tParamConf;
    int retorno = 0;
    char sNmRelatorio[256];
	list<CFile> arquivos;
	

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[512];
        VARCHAR strOraDataProcessamento[12];
        VARCHAR strOraHoraProcessamento[12];

        short ostLinha;
        short ostrOraDataProcessamento = -1;
        short ostrOraHoraProcessamento = -1;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>cargaPlanoDados");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<cargaPlanoDados");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<cargaPlanoDados");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

	char szData[256];	memset(szData,'\0',sizeof(szData));
	char szHora[256];	memset(szHora,'\0',sizeof(szHora));
	ObterData(1,szData);
	ObterHora(szHora);


	sprintf(szTempTrace, "Inicio do processo de cargaPlanoDados..."); oLog.logDebug(szTempTrace);
	
	// listar os arquivos para serem carregados
	listarArquivos( tParamConf.szPath, arquivos, szData);
	char buffer[1024];
	while ( 0 < arquivos.size() ) {
		CFile cfile = arquivos.front();
		sprintf(szTempTrace, "arquivo %s",cfile.getPath()); oLog.logDebug(szTempTrace);
		cfile.open("r");
		memset(buffer,0,sizeof(buffer));
		while (cfile.readLine(buffer, 1024)) {
			sprintf(szTempTrace, "%s",buffer); oLog.logDebug(szTempTrace);
			// gravar o conteúdo
			InserirRegistros(buffer);
			memset(buffer,0,sizeof(buffer));
		}
		cfile.close();
		arquivos.pop_front();
	}

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<cargaPlanoDados");

    return retorno;

    sqlError:
        sprintf(szTempTrace, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -1;
}

/************************************************************************************************************/
void listarArquivos( char *path, list<CFile> &arquivos, char *date)
{
	oLog.logDebug("inicio listar arquivos");	
    DIR *dirp;
    struct dirent *dp;	
	CFile arquivo;
	char nomeArquivo[256];
	
    if ((dirp = opendir(path)) == NULL) {        
		oLog.logDebug("Erro ao abrir diretório");	
        return;
    }

    do {
        if ((dp = readdir(dirp)) != NULL) {
			if(strstr(dp->d_name,date)) {		
				memset(nomeArquivo,0,sizeof(nomeArquivo));
				sprintf(nomeArquivo,"%s/%s", path, dp->d_name);
				arquivo.setPath(nomeArquivo);				
				arquivos.push_back(arquivo);							
			 }	
            // printf("encontrado %s size = %d\n", dp->d_name, sizeof(dp->d_name));    
			sprintf(szTempTrace, "encontrado (%s/%s)", path, dp->d_name); oLog.logDebug(szTempTrace);			
        }
    } while (dp != NULL);

    closedir(dirp);
}

/************************************************************************************************************/

int InserirRegistros(char *buffer)
{    
	char idPlano[256];
	char sgCategorizacao[256];
	char dsCategorizacao[256];
	
	memset(idPlano,0,sizeof(idPlano));
	memset(sgCategorizacao,0,sizeof(sgCategorizacao));
	memset(dsCategorizacao,0,sizeof(dsCategorizacao));
	
	if (buffer != NULL) {
		int len = strlen(buffer);
		int j = 0, k = 0, l = 0, m = 0;
		for(int i = 0; i < len; i++) {
			if (buffer[i] == '|') {
				k++;
			} else {
				if (k == 0) {
					idPlano[j++] = buffer[i];
				} else if (k == 1) {
					sgCategorizacao[l++] = buffer[i];
				} else if (k == 2) {
					dsCategorizacao[m++] = buffer[i];
				}
			}
		}
	}
	
	EXEC SQL BEGIN DECLARE SECTION;
		const char* ccOraIDPLANO = idPlano;
		const char* ccOraSGCATEGORIZACAO = sgCategorizacao;
		const char* ccOraDSCATEGORIZACAO = dsCategorizacao;
		VARCHAR idServico[256];
		int inExisteRegistro;
	EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;	
	memset(&idServico,0,sizeof(idServico));
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;	
		
	EXEC SQL
	SELECT IDSERVICO INTO :idServico
	  FROM LINHA.PLANOSERVICO
	 WHERE IDSERVICOSISTEMAORIGEM = :ccOraIDPLANO
	   AND ROWNUM <= 1;
	   
	EXEC SQL
	SELECT COUNT(1) INTO :inExisteRegistro
	  FROM APOIO.PLANODADOS
	 WHERE IDSERVICO = :idServico;	 

	if (inExisteRegistro) {
		EXEC SQL
		UPDATE APOIO.PLANODADOS 
		   SET SGCATEGORIZACAO = :ccOraSGCATEGORIZACAO, 
		       DSCATEGORIZACAO = :ccOraDSCATEGORIZACAO,
			   DTALTERACAO = SYSDATE
	     WHERE IDSERVICO = :idServico;
	} else {
		EXEC SQL
		INSERT INTO APOIO.PLANODADOS (IDSERVICO,SGCATEGORIZACAO,DSCATEGORIZACAO,DTALTERACAO)
		VALUES (:idServico,:ccOraSGCATEGORIZACAO,:ccOraDSCATEGORIZACAO,sysdate);		
	}
	
	 EXEC SQL COMMIT;
	

	return 1;

sqlError:
		string sRegistroError;
		sRegistroError = "Erro no processamento do registro";
		oLog.logDebug((char *)sRegistroError.data());
		
	    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);		
        return 0;	
}
/************************************************************************************************************/
void ObterData(int iDiasAnteriores, char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
		short ostrDiasAnteriores = iDiasAnteriores;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE -:ostrDiasAnteriores,'DDMMYYYY')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[8] = '\0';
	
    return;
	
sqlError:
        return;		
}

void ObterHora(char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE,'HH24MISS')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[6] = '\0';
    return;
sqlError:
        return;		
	
}


/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szTempTrace, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szTempTrace);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szTempTrace, "iSig(%d)", iSig); oLog.logInformation(szTempTrace);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("cargaPlanoDados.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_log_erros"))
        {
            strncpy(ptParamConf->szPathLogErros, szDivArq, _MAX_PATH);
        }
		
        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szTempTrace, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPathLogErros[%s]", ptParamConf->szPathLogErros); oLog.logDebug(szTempTrace);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szCltTux) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szPathLogErros) == 0 )
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}


/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);
}

