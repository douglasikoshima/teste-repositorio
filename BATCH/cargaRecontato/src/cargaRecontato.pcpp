/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio
 * @version $Revision: 1.1.2.4 $
 * @CVS     $Author: a5114878 $ - $Date: 2011/07/22 17:01:25 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <ctype.h>

#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>
#include <dirent.h>

#include "../include/cargaRecontato.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

extern int errno;

EXEC SQL INCLUDE SQLCA;

Log oLog;

int main( void )
{
	TParamConf tParamConf;

    char szAux[1024];
	char szBuffer[521];
	char szNomeArquivoFull[255];

    EXEC SQL BEGIN DECLARE SECTION;

         VARCHAR nrProtocolo[41];
		 short   i_nrProtocolo = -1;
		 
         VARCHAR idCanal[41];
		 short   i_idCanal = -1;
		 
         VARCHAR nrProtocoloAnt[41];
		 short   i_nrProtocoloAnt = -1;
		 
         VARCHAR idFornecedorConsultor[41];
		 short   i_idFornecedorConsultor = -1;
		 
         VARCHAR idSiteConsultor[41];
		 short   i_idSiteConsultor = -1;
		 
         VARCHAR idGrupoAbertura[41];
		 short   i_idGrupoAbertura = -1;

    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>cargaRecontato");

    // parametros de configuração
    if ( ObtemParamConf( &tParamConf ) )
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<pupProcon");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<pupProcon");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");
    oLog.logDebug("Inicio da carga...\n");

    EXEC SQL DECLARE CR_PROTOCOLO CURSOR FOR
		SELECT IDATENDIMENTOPROTOCOLO, IDCANAL FROM ATENDIMENTO.DADOSRECONTATO;
	
	EXEC SQL WHENEVER SQLERROR GOTO sqlError1;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	EXEC SQL OPEN CR_PROTOCOLO;
	for(;;)
	{
		memset(&nrProtocolo,0x0,sizeof(nrProtocolo));
		memset(&idCanal,0x0,sizeof(idCanal));
		
		EXEC SQL FETCH CR_PROTOCOLO INTO :nrProtocolo:i_nrProtocolo ,
		                                 :idCanal:i_idCanal ;
		
		CONVIND( nrProtocolo,i_nrProtocolo );
		CONVIND( idCanal,    i_idCanal );
		
		sprintf( szAux, "*** nrProtocolo (%s)\n", (char*)nrProtocolo.arr ); oLog.logDebug(szAux);
		sprintf( szAux, "*** idCanal     (%s)\n", (char*)idCanal.arr ); oLog.logDebug(szAux);
		
		memset(&nrProtocoloAnt,0x0,sizeof(nrProtocoloAnt));
		
		EXEC SQL WHENEVER NOT FOUND CONTINUE;

		EXEC SQL
		select 
		    nrprotocolo 
		INTO
		   :nrProtocoloAnt:i_nrProtocoloAnt 
		from (
		       select
 			      a.nrprotocolo 
				from
				(
					SELECT 
					   attp.IDATENDIMENTOPROTOCOLO as nrProtocolo ,
					   attp.IDUSUARIOCRIACAO as idusuarioabertura,
					   attp.DTABERTURA as dtabertura
					FROM
					   ATENDIMENTO.ATENDIMENTOPROTOCOLO ATTP,
							 (select idpessoadepara, 
										   idlinhatelefonica, 
										  cdarearegistro,
										  nrtelefone,
										   idatendimentoprotocolo
								from atendimento.atendimentoprotocolo
							 where idatendimentoprotocolo = :nrProtocolo ) pp
					WHERE attp.DTABERTURA > (SYSDATE - 1)
						  and attp.IDPESSOADEPARA= pp.IDPESSOADEPARA
						  and attp.IDLINHATELEFONICA=pp.IDLINHATELEFONICA
						  and attp.CDAREAREGISTRO=pp.CDAREAREGISTRO
						  and attp.NRTELEFONE=pp.NRTELEFONE
						  and attp.idatendimentoprotocolo <> pp.IDATENDIMENTOPROTOCOLO )a
		order by dtabertura desc ) b
		where rownum < 2 ;   
		

		CONVIND( nrProtocoloAnt,i_nrProtocoloAnt );
		sprintf( szAux, "*** nrProtocoloAnt (%s)\n", (char*)nrProtocoloAnt.arr ); oLog.logDebug(szAux);
		
		memset(&idFornecedorConsultor,0x0,sizeof(idFornecedorConsultor));
		memset(&idSiteConsultor,0x0,sizeof(idSiteConsultor));
		memset(&idGrupoAbertura,0x0,sizeof(idGrupoAbertura));

		EXEC SQL
		SELECT
			ATD.IDFORNECEDORCONSULTORATD ,
			ATD.IDSITECONSULTORATD ,
			ATD.IDGRUPOABERTURA
		INTO
			:idFornecedorConsultor:i_idFornecedorConsultor ,
			:idSiteConsultor:i_idSiteConsultor ,
			:idGrupoAbertura:i_idGrupoAbertura
		FROM
		   ATENDIMENTO.ATENDIMENTO ATD
		WHERE
		   ( ATD.IDCANAL = :idCanal OR :idCanal IS NULL )
		AND
		   ATD.IDATENDIMENTOPROTOCOLO = :nrProtocoloAnt
		AND ROWNUM < 2;
		
		CONVIND( idFornecedorConsultor,i_idFornecedorConsultor );
		CONVIND( idSiteConsultor,i_idSiteConsultor );
		CONVIND( idGrupoAbertura,i_idGrupoAbertura );
		
		sprintf( szAux, "*** idFornecedorConsultor (%s)\n", (char*)idFornecedorConsultor.arr ); oLog.logDebug(szAux);
		sprintf( szAux, "*** idSiteConsultor       (%s)\n", (char*)idSiteConsultor.arr ); oLog.logDebug(szAux);
		sprintf( szAux, "*** idGrupoAbertura       (%s)\n", (char*)idGrupoAbertura.arr ); oLog.logDebug(szAux);
		
		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		
		EXEC SQL
		UPDATE ATENDIMENTO.DADOSRECONTATO
		SET IDATDPROTOCOLOANTERIOR = :nrProtocoloAnt ,
			IDFORNECEDORCONSULTORATD = :idFornecedorConsultor ,
			IDSITECONSULTORATD = :idSiteConsultor ,
			IDGRUPOATUAL = :idGrupoAbertura ,
		    DTULTIMAALTERACAO = SYSDATE
        WHERE
		    IDATENDIMENTOPROTOCOLO = :nrProtocolo ;
		
	}
	EXEC SQL CLOSE CR_PROTOCOLO;
	
    oLog.logDebug( "Fechando conexao com o banco" );
    DBDisconnect();

    oLog.logDebug("<<<cargaRecontato");
	
	return 0;

    sqlError1:
        sprintf(szAux, "*** ERRO: Processo FINALIZADO com erro ORACLE (%s)", sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
        return -1;
}



/************************************************************************************************************/
int ObtemParamConf( TParamConf * ptParamConf )
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];
    char szAux[1024];

    oLog.logDebug("Obtendo parametros de configuracao...");

    memset( ptParamConf, 0x00, sizeof(TParamConf) );
    memset( szLinha    , 0x00, sizeof(szLinha) );
    memset( szDivArq   , 0x00, sizeof(szDivArq) );
    memset( szDivPre   , 0x00, sizeof(szDivPre) );


    /* Define o arquivo de configuração */
    mfConfig.setPath("cargaRecontato.cfg");

    if( !mfConfig.abrir() )
    {
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv( '=' );
    while( mfConfig.getLine(szLinha) )
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }

    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}



/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    char szAux[1024];
    
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);
    oLog.logInformation(connString);

    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    //oLog.logInformation("<<<DBConnect [ERROR]");
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
    return -1;
}



/************************************************************************************************************/
void DBDisconnect( void )
{
    char szAux[1024];
    
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}
