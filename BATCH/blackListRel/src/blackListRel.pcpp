#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/blackListRel.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 4096

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}
extern int errno ;

int main(void)
{
    TParamConf tParamConf;

    int ctDescarga = 0;
    int lenSzRegistro = 0;
    int iQtdRegistros=0;
    int retorno = 0;

    char szNomeArquivo[_MAX_PATH+9];
    char szNomeArquivoDestino[_MAX_PATH+9];
    char szRegistro[TAM_BUFFER+1];

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszDtUltimaAlteracao[9];
        VARCHAR oszCdPermissaopup[4];
        VARCHAR oszNrTelefone[22];

        short ostDtUltimaAlteracao;
        short ostCdPermissaopup;
        short ostNrTelefone;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>blackListRel");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<blackListRel");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<blackListRel");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

    montarNomeArquivo(szNomeArquivo,tParamConf.szPath);

    FILE *pFile=0;
    if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
    {
        oLog.logDebug("<<<blackListRel");
        return -1;
    }

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    /* declara cursor para busca dos xml´s a serem reprocessados */
    sprintf(szAux, "Declarando cursor..."); oLog.logDebug(szAux);

    // EXEC SQL DECLARE Cursor CURSOR FOR
        // SELECT   /*+ no_cpu_costing parallel(lt,4) parallel(lb,4) parallel(pup,4) */
            // TO_CHAR(PUP.DTULTIMAALTERACAO,'DDMMYYYY') AS DTULTIMAALTERACAO,
            // PEPUP.CDPERMISSAOPUP,
            // AR.CDAREAREGISTRO||LB.NRLINHA AS NRTELEFONE
        // FROM
            // LINHA.PERMISSAOLINHAPUP PUP,
            // LINHA.PERMISSAOPUP PEPUP,
            // LINHA.LINHATELEFONICA LT,
            // LINHA.LINHABASE LB,
            // APOIO.AREAREGISTRO AR
        // WHERE
            // PUP.SGPERMISSAOPUP = PEPUP.SGPERMISSAOPUP
        // AND
            // PEPUP.CDPERMISSAOPUP != '-1'
        // AND
            // PUP.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
        // AND
            // LT.IDLINHABASE = LB.IDLINHABASE
        // AND
            // LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
		// AND
		    // PUP.INATIVO=0;

    EXEC SQL DECLARE Cursor CURSOR FOR
        SELECT   /*+ no_cpu_costing parallel(lt,16) parallel(lb,16) */
            TO_CHAR(PUP.DTULTIMAALTERACAO,'DDMMYYYY') AS DTULTIMAALTERACAO,
            PEPUP.CDPERMISSAOPUP,
            AR.CDAREAREGISTRO||LB.NRLINHA AS NRTELEFONE
        FROM
            LINHA.PERMISSAOLINHAPUP PUP,
            LINHA.PERMISSAOPUP PEPUP,
            LINHA.LINHATELEFONICA LT,
            LINHA.LINHABASE LB,
            APOIO.AREAREGISTRO AR
        WHERE
            PUP.SGPERMISSAOPUP = PEPUP.SGPERMISSAOPUP
        AND PEPUP.CDPERMISSAOPUP != '-1'
        AND PUP.IDLINHATELEFONICA = LT.IDLINHATELEFONICA
        AND LT.IDLINHABASE = LB.IDLINHABASE
        AND LB.IDAREAREGISTRO = AR.IDAREAREGISTRO
        AND LT.IDSISTEMAORIGEM IN (1,2,3,11)
        AND LB.NRDIGITOLINHA IS NULL
        AND LT.DTEXPIRACAO IS NULL
        AND PUP.INATIVO = 0;


    oLog.logDebug("Vai abrir o cursor");

    EXEC SQL OPEN Cursor;

    oLog.logDebug("Abriu o cursor");

    szRegistro[0] = 0;

    while (1)
    {
        /* tratamento para interromper o processamento via sinal (complemento da saida acima) */
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }

        ostCdPermissaopup = ostDtUltimaAlteracao = ostNrTelefone = -1;

        EXEC SQL
            FETCH
                Cursor
            INTO
                :oszDtUltimaAlteracao:ostDtUltimaAlteracao,
                :oszCdPermissaopup:ostCdPermissaopup,
                :oszNrTelefone:ostNrTelefone;

        iQtdRegistros++;

        CONVIND(oszDtUltimaAlteracao,ostDtUltimaAlteracao);
        CONVIND(oszCdPermissaopup,ostCdPermissaopup);
        CONVIND(oszNrTelefone,ostNrTelefone);

        lenSzRegistro += oszNrTelefone.len
                       + oszCdPermissaopup.len
                       + oszDtUltimaAlteracao.len
                       + 3;

        if ( lenSzRegistro >= TAM_BUFFER )
        {
            // isso esta enchendo o log consideravelmente
            //sprintf(szAux,"Descarga periódica %d de buffer com %d bytes",++ctDescarga,strlen(szRegistro));
            //oLog.logDebug(szAux);

            if(retorno = gravarRegistro(pFile,szRegistro),retorno)
            {
                oLog.logDebug("Erro de gravação (1)");
                break;
            }
            szRegistro[0] = 0;
            lenSzRegistro = oszNrTelefone.len
                          + oszCdPermissaopup.len
                          + oszDtUltimaAlteracao.len
                          + 3;
        }

        // bufferiza o registro lido
        strcat(szRegistro,(char*)oszNrTelefone.arr);
        strcat(szRegistro,";");
        strcat(szRegistro,(char*)oszCdPermissaopup.arr);
        strcat(szRegistro,";");
        strcat(szRegistro,(char*)oszDtUltimaAlteracao.arr);
        strcat(szRegistro,"\n");

    }// while (1)

    // se sobrou algo no buffer, descarrega no disco
    if ( szRegistro[0] )
    {
        sprintf(szAux,"Descarga final de buffer com %d bytes",strlen(szRegistro));
        oLog.logDebug(szAux);
        if(retorno = gravarRegistro(pFile,szRegistro),retorno)
        {
            oLog.logDebug("Erro de gravação (2)");
        }
    }

    sprintf(szAux,"Gerou %d registro(s)",iQtdRegistros);oLog.logDebug(szAux);

    fecharArquivo(pFile); // Fecha o Arquivo

    // monta nome do arquivo de destino
    montarNomeArquivo(szNomeArquivoDestino,tParamConf.szPathToGo);
    
    // Move o arquivo para o seu destino
    moverArquivo(szNomeArquivo,szNomeArquivoDestino);

    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE Cursor;

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<blackListRel");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}

/************************************************************************************************************/
void montarNomeArquivo(char *pszNomeArquivo,const char *pszPath)
{
    strcpy(pszNomeArquivo, pszPath);
    strcat(pszNomeArquivo, "/PUP.TXT");

    sprintf(szAux, "Nome do arquivo = [%s]", pszNomeArquivo); oLog.logDebug(szAux);
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int abrirArquivo(FILE **pFile,const char *pszNomeArquivo)
{
    sprintf(szAux, "Vai criar e abrir o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);

    *pFile = fopen(pszNomeArquivo, "w");

    if( pFile == NULL )
    {
        sprintf(szAux, "Erro criando arquivo[%s]", pszNomeArquivo); oLog.logDebug(szAux);
        sprintf( szAux,"*** ERRO: [%s]", strerror(errno) );
        oLog.logDebug( szAux );
        return -1;
    }

    sprintf(szAux, "Arquivo [%s] disponível", pszNomeArquivo); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{
    if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {
            oLog.logDebug("Erro na gravação de registro no arquivo PUP");
            sprintf( szAux,"*** ERRO: [%s]", strerror(errno) );
            oLog.logDebug( szAux );
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
void fecharArquivo(FILE *pFile)
{
    fclose(pFile);
    oLog.logDebug("Fechou o arquivo PUP.");
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("blackListRel.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}
