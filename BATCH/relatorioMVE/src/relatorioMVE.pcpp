/**
 * 
 * @modulo  Batch
 * @usecase Batch
 * @author  Cassio
 * @version $Revision: 1.1.4.1.8.2 $
 * @CVS     $Author: a5116174 $ - $Date: 2012/01/20 17:02:23 $
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#include <unistd.h>
#include <string>

#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>
#include <dirent.h>

#include "../include/relatorioMVE.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 1024*20
#define NOME_ARQUIVO_SAIDA "relatorioMVE"
#define EXTENSAO_ARQUIVO_SAIDA "txt"

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#ifdef WIN32
	#define MKDIR _mkdir
	#define ACCESS _access
#else
	#define MKDIR mkdir
	#define ACCESS access
#endif

int main(void)
{
    TParamConf tParamConf;

    int ctDescargaPeriodica = 0;
    int lenSzRegistro = 0;
    int iQtdRegistros=0;
    int retorno = 0;


    char szNomeArquivo[_MAX_PATH+9];
    char szNomeArquivoZip[_MAX_PATH+9];
    char szNomeArquivoDestino[_MAX_PATH+9];
    char szRegistro[TAM_BUFFER+1];
	char pszData[TAM_BUFFER+1];
	char pszDataAtual[TAM_BUFFER+1];
	
	

    EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR oszLinha[512];
	
		int iqtdDiasExpurgo = 0;
        int oiID;		
        VARCHAR ostrTpRelatorio[512];
        VARCHAR ostrNMArquivo[512];	
        VARCHAR ostrDTInicialRel[512];
        VARCHAR ostrDTFinalRel[512];
		
		short inqtdDiasExpurgo = -1;
		short ostLinha;
        short oinID;
        short oinTpRelatorio;
        short oinNMArquivo;
        short oinDTInicialRel;
        short oinDTFinalRel;
		
		char strNMArquivoFinal[512];

    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>relatorioMVE");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif




    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<relatorioMVE");
        return -1;
    }

    // endereços de e-mail para envio do arquivo
    char szListaEnderecos[10000]; // ~200 pessoas na lista?

   /* if(false == ObterListaEmail(szListaEnderecos,sizeof(szListaEnderecos)) )
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<relatorioMVE");
        return -1;
    }*/

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<relatorioMVE");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

    //montarNomeArquivo(szNomeArquivo,szNomeArquivoZip,tParamConf.szPath);

	
	oLog.logDebug("Obtendo a quantidade de dias de expurgo dos relatorios Meu Vivo Empresa.");

	EXEC SQL
		SELECT dsvalorparametro  
			into   :iqtdDiasExpurgo:inqtdDiasExpurgo
		FROM   APOIO.PARAMETRO
			WHERE CDPARAMETRO LIKE 'QTD_DIAS_EXPURGO_RELATORIOMVE';
	/*
	if( inqtdDiasExpurgo = -1 )
	{
		sprintf(szAux, "Expurgo de [%d] dias para relatorios Meu Vivo Empresa.", iqtdDiasExpurgo ); oLog.logDebug(szAux);
		oLog.logDebug("Não foi possivel encontrar a variavel QTD_DIAS_EXPURGO_RELATORIOMVE em APOIO.PARAMENTRO");
	}
	else
	{*/
		sprintf(szAux, "Expurgo de [%d] dias para relatorios Meu Vivo Empresa.", iqtdDiasExpurgo ); oLog.logDebug(szAux);
		ObterData(iqtdDiasExpurgo, pszData);
		DeletarRelatoriosAntigos(tParamConf.szPath,(const char*)pszData);
	//}
	
	ObterData(0, pszDataAtual);

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	sprintf(szAux, "Obtendo Solicitações com status S (Solicitado) de VOLE.STATUSRELMVE"); oLog.logDebug(szAux);
	EXEC SQL DECLARE CursorSolicitacao CURSOR FOR
		SELECT 
			IDSTATUSRELMVE, TPRELATORIO, NMARQUIVO, TO_CHAR(DTINICIALREL), TO_CHAR(DTFINALREL) 
			FROM VOLE.STATUSRELMVE 
			WHERE INSTATUS = 'S';
	
	EXEC SQL OPEN CursorSolicitacao;
	sprintf(szAux, "Solicitações obtidas de VOLE.STATUSRELMVE"); oLog.logDebug(szAux);

	
	//Gravando Cabecalho
	//gravarRegistro(pFile,"MVE|NRPROTOCOLO|NRPROCESSO|UF|DTABERTURA\n");

	
	
    while (1)
    {
        // tratamento para interromper o processamento via sinal (complemento da saida acima) 
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }

        //ostLinha = -1;
        //oinStatus = -1;
        oinID = -1;
        oinTpRelatorio = -1;
        oinNMArquivo = -1;
        oinDTInicialRel = -1;
        oinDTFinalRel = -1;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
        EXEC SQL
            FETCH
                CursorSolicitacao
            INTO
                :oiID:oinID,
                :ostrTpRelatorio:oinTpRelatorio,
                :ostrNMArquivo:oinNMArquivo,
                :ostrDTInicialRel:oinDTInicialRel,
                :ostrDTFinalRel:oinDTFinalRel;

        iQtdRegistros++;

        //CONVIND(oszLinha,ostLinha);
		
		//CONVIND(oiID,oinID);
		CONVIND(ostrTpRelatorio,oinTpRelatorio);
		CONVIND(ostrNMArquivo,oinNMArquivo);
		CONVIND(ostrDTInicialRel,oinDTInicialRel);
		CONVIND(ostrDTFinalRel,oinDTFinalRel);
		
		
		if(strcmp((const char*)ostrTpRelatorio.arr,"RELGMGC_PORGESTOR") == 0) // RF 10.1 - Total de acessos únicos no canal por tipo de relacionamento (RELGMGC_PORGESTOR)
		{
				sprintf(szAux, "Identificado relatório RELGMGC_PORGESTOR"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					
					sprintf(szAux, "Consultando relatório RELGMGC_PORGESTOR "); oLog.logDebug(szAux);
					
					EXEC SQL DECLARE CursorRELGMGC_PORGESTOR CURSOR FOR
					SELECT 
						  'GESTOR DE CONTAS' ||'|'||	COUNT(1) 
						FROM
							(
							SELECT COUNT(1) AS TOTALGC FROM VOLE.LOGINGESTORLOG LGL
								WHERE
								LGL.SGTIPORELACIONAMENTO = 'GC' AND
								LGL.DATALOGIN >= (TO_DATE(:ostrDTInicialRel) -1) AND LGL.DATALOGIN <= (TO_DATE(:ostrDTFinalRel))
						GROUP BY
								LGL.IDPESSOAGESTOR , LGL.SGTIPORELACIONAMENTO 
						  
							)GC
					UNION
					SELECT 
						  'GESTOR MASTER' ||'|'|| COUNT(1) 
						FROM
							(
							SELECT COUNT(1) AS TOTALGM FROM VOLE.LOGINGESTORLOG LGL
								WHERE
								LGL.SGTIPORELACIONAMENTO = 'GM' AND
								LGL.DATALOGIN >= (TO_DATE(:ostrDTInicialRel) -1) AND LGL.DATALOGIN <= (TO_DATE(:ostrDTFinalRel))
							GROUP BY
								LGL.IDPESSOAGESTOR
							)GM; 
							
					sprintf(szAux, "Abrindo Cursor do relatório RELGMGC_PORGESTOR"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELGMGC_PORGESTOR;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por tipo de relacionamento\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tp.Relacionamento|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELGMGC_PORGESTOR
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELGMGC_PORGESTOR;
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELGMGC_TOTAL") == 0) // RF 10.1 - Total de acessos no canal (RELGMGC_TOTAL)
		{
			sprintf(szAux, "Identificado relatório RELGMGC_TOTAL"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELGMGC_TOTAL"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					
					sprintf(szAux, "Consultando relatório RELGMGC_TOTAL "); oLog.logDebug(szAux);
					
					EXEC SQL DECLARE CursorRELGMGC_TOTAL CURSOR FOR
					SELECT 
						  'GESTOR DE CONTAS' ||'|'||	COUNT(1) 
						FROM
							(
								SELECT COUNT(1) AS TOTALGC FROM VOLE.LOGINGESTORLOG LGL
									WHERE
									LGL.SGTIPORELACIONAMENTO = 'GC' AND
									LGL.DATALOGIN >= (TO_DATE(:ostrDTInicialRel) -1) AND LGL.DATALOGIN <= (TO_DATE(:ostrDTFinalRel))
							)GC
					UNION
					SELECT 
						  'GESTOR MASTER' ||'|'|| COUNT(1) 
						FROM
							(
							SELECT COUNT(1) AS TOTALGM FROM VOLE.LOGINGESTORLOG LGL
								WHERE
								LGL.SGTIPORELACIONAMENTO = 'GM' AND
								LGL.DATALOGIN >= (TO_DATE(:ostrDTInicialRel) -1) AND LGL.DATALOGIN <= (TO_DATE(:ostrDTFinalRel))
							)GM; 
							
					sprintf(szAux, "Abrindo Cursor do relatório RELGMGC_TOTAL"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELGMGC_TOTAL;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por tipo de relacionamento\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tp.Relacionamento|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELGMGC_TOTAL
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELGMGC_TOTAL;
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELATORIO_PRIMEIROACESSO") == 0) //RF 10.5 - Gestores que realizaram acesso pela primeira vez  (RELATORIO_PRIMEIROACESSO)
		{
			sprintf(szAux, "Identificado relatório RELATORIO_PRIMEIROACESSO"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELATORIO_PRIMEIROACESSO"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					sprintf(szAux, "Consultando relatório RELATORIO_PRIMEIROACESSO "); oLog.logDebug(szAux);
					EXEC SQL DECLARE CursorRELATORIO_PRIMEIROACESSO CURSOR FOR
					SELECT 
						PG.NMPESSOAGESTOR ||'|'|| PG.NRDOCUMENTO ||'|'||  PG.NRTELEFONEFIXO ||'|'|| PG.NRTELEFONECELULARVIVO ||'|'|| PG.EMAIL
					FROM CUSTOMER.PESSOAGESTOR PG
					WHERE
						PG.INPRIMEIROACESSO = 0 AND
						PG.DTPRIMEIROACESSO >= TO_DATE(:ostrDTInicialRel) AND PG.DTPRIMEIROACESSO <= (TO_DATE(:ostrDTFinalRel)+1);
					
						//LGL.DATALOGIN >= (TO_DATE(:ostrDTInicialRel) -1) AND LGL.DATALOGIN <= (TO_DATE(:ostrDTFinalRel));
						
					sprintf(szAux, "Abrindo Cursor do relatório RELATORIO_PRIMEIROACESSO"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELATORIO_PRIMEIROACESSO;
					
					//Gravando Cabecalho
					
					//gravarRegistro(pFile,"Relatório de acompanhamento do canal por tipo de relacionamento\n");
					//sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					//gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Nome|CPF|Telefone Fixo|Celular|e-mail\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELATORIO_PRIMEIROACESSO
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELATORIO_PRIMEIROACESSO;			
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELCONTA_PORCONTA") == 0) //RF 10.2 - Relatório de acessos por conta ao canal  (RELCONTA_PORCONTA)
		{
			sprintf(szAux, "Identificado relatório RELCONTA_PORCONTA"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELCONTA_PORCONTA"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					sprintf(szAux, "Consultando relatório RELCONTA_PORCONTA "); oLog.logDebug(szAux);
					EXEC SQL DECLARE CursorRELCONTA_PORCONTA CURSOR FOR
					
					SELECT 
					  'Acesso por conta' ||'|'|| COUNT(1)
					FROM
						(
						SELECT COUNT(1) AS TOTAL FROM VOLE.ADMCONTASLOG ACL
						WHERE
							ACL.DATAALTERACAO >= (TO_DATE(:ostrDTInicialRel) -1) AND ACL.DATAALTERACAO <= (TO_DATE(:ostrDTFinalRel))
						GROUP BY
							ACL.CDCONTA 
						);
						
					sprintf(szAux, "Abrindo Cursor do relatório RELCONTA_PORCONTA"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELCONTA_PORCONTA;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por Conta\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tipo de Acesso|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELCONTA_PORCONTA
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELCONTA_PORCONTA;
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELCONTA_TOTAL") == 0) //RF 10.2 - Relatório de acessos por conta ao canal  (RELCONTA_TOTAL)
		{
			sprintf(szAux, "Identificado relatório RELCONTA_TOTAL"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELCONTA_TOTAL"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					sprintf(szAux, "Consultando relatório RELCONTA_TOTAL "); oLog.logDebug(szAux);
					EXEC SQL DECLARE CursorRELCONTA_TOTAL CURSOR FOR
					
					SELECT 
					  'Acesso por conta' ||'|'|| COUNT(1) 
					FROM VOLE.ADMCONTASLOG ACL
					WHERE
						ACL.DATAALTERACAO >= (TO_DATE(:ostrDTInicialRel) -1) AND ACL.DATAALTERACAO <= (TO_DATE(:ostrDTFinalRel));
						
					sprintf(szAux, "Abrindo Cursor do relatório RELCONTA_TOTAL"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELCONTA_TOTAL;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por Conta\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tipo de Acesso|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELCONTA_TOTAL
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELCONTA_TOTAL;
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELCNPJ_PORCNPJ") == 0) // RF 10.4 - Relatório de acessos por CNPJ (RELCNPJ_PORCNPJ)
		{
			sprintf(szAux, "Identificado relatório RELCNPJ_PORCNPJ"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELCNPJ_PORCNPJ"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					sprintf(szAux, "Consultando relatório RELCNPJ_PORCNPJ "); oLog.logDebug(szAux);
					EXEC SQL DECLARE CursorRELCNPJ_PORCNPJ CURSOR FOR
					SELECT 
					  'Acesso por CNPJ' ||'|'|| COUNT(1)
					FROM
						(
						SELECT COUNT(1) AS TOTAL FROM VOLE.ADMCONTASLOG ACL
							WHERE
						ACL.DATAALTERACAO >= (TO_DATE(:ostrDTInicialRel) -1) AND ACL.DATAALTERACAO <= (TO_DATE(:ostrDTFinalRel))
					GROUP BY
							ACL.NRCNPJ 
						);
						
					sprintf(szAux, "Abrindo Cursor do relatório RELCNPJ_PORCNPJ"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELCNPJ_PORCNPJ;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por CNPJ\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tipo de Acesso|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELCNPJ_PORCNPJ
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELCNPJ_PORCNPJ;			
		}
		else if(strcmp((const char*)ostrTpRelatorio.arr,"RELCNPJ_TOTAL") == 0) //RF 10.4 - Relatório de acessos por CNPJ (RELCNPJ_TOTAL)
		{ 
			sprintf(szAux, "Identificado relatório RELCNPJ_TOTAL"); oLog.logDebug(szAux);
				sprintf(szAux, "Identificado relatório RELCNPJ_TOTAL"); oLog.logDebug(szAux);
				sprintf(szNomeArquivo,"%s_%s_%d.csv",(char*)pszDataAtual, (char*)ostrTpRelatorio.arr, oiID);
				FILE *pFile=0;
				if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
				{
					sprintf(szAux, "Erro tentando abrir o arquivo [%s]", szNomeArquivo); oLog.logDebug(szAux);
					oLog.logDebug("<<<relatorioMVE");
					return -1;
				}
					
					sprintf(szAux, "Mudando status para Aguardando "); oLog.logDebug(szAux);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'A' WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					
					sprintf(szAux, "Consultando relatório RELCNPJ_TOTAL "); oLog.logDebug(szAux);
					EXEC SQL DECLARE CursorRELCNPJ_TOTAL CURSOR FOR
					SELECT 
						'Acesso por CNPJ' ||'|'|| COUNT(1)
					FROM VOLE.ADMCONTASLOG ACL
					WHERE
					ACL.DATAALTERACAO >= (TO_DATE(:ostrDTInicialRel) -1) AND ACL.DATAALTERACAO <= (TO_DATE(:ostrDTFinalRel));
						
					sprintf(szAux, "Abrindo Cursor do relatório RELCNPJ_TOTAL"); oLog.logDebug(szAux);
					EXEC SQL OPEN CursorRELCNPJ_TOTAL;
					
					//Gravando Cabecalho
					
					gravarRegistro(pFile,"Relatório de acompanhamento do canal por CNPJ\n");
					sprintf(szAux, "Periodo de %s até %s\n",ostrDTInicialRel.arr, ostrDTFinalRel.arr);
					gravarRegistro(pFile,szAux);
					gravarRegistro(pFile,"Tipo de Acesso|Quantidade\n");
					int lQtdRegistros = 0;
					while (1)
					{
						// tratamento para interromper o processamento via sinal (complemento da saida acima) 
						if(iSignalProcessa == 0)
						{
							oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
							break;
						}

						ostLinha = -1;

						EXEC SQL
							FETCH
								CursorRELCNPJ_TOTAL
							INTO
								:oszLinha:ostLinha;

						++lQtdRegistros;
						CONVIND(oszLinha,ostLinha);

						sprintf( szRegistro,"%.*s\n", oszLinha.len, (char*)oszLinha.arr );
						if(retorno = gravarRegistro(pFile,szRegistro),retorno)
						{
							oLog.logDebug("Erro de gravação (1)");
							break;
						}

					}// while (1)
					//gravarRegistro(pFile,"FINAL - RELATORIO \n");
					sprintf(szAux, "Relatório Processado "); oLog.logDebug(szAux);
					strcpy(strNMArquivoFinal, szNomeArquivo);
					EXEC SQL UPDATE VOLE.STATUSRELMVE SET INSTATUS = 'P', NMARQUIVO = :strNMArquivoFinal, DTPROCES = SYSDATE  WHERE IDSTATUSRELMVE = :oiID;
					EXEC SQL COMMIT;
					fclose(pFile);
					EXEC SQL CLOSE CursorRELCNPJ_TOTAL;
		}
		else
		{
			sprintf(szAux, "Relatório [%s]não Identificado.", (const char*)ostrTpRelatorio.arr); oLog.logDebug(szAux);
		}

    }// while (1)	

	
	sprintf(szAux, "Final"); oLog.logDebug(szAux);

    EXEC SQL CLOSE CursorSolicitacao;
	
    DBDisconnect();

    oLog.logDebug("<<<relatorioMVE");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}
/************************************************************************************************************/
void ObterData(int iDiasAnteriores, char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
		short ostrDiasAnteriores = iDiasAnteriores;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE -:ostrDiasAnteriores,'YYYYMMDD')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[8] = '\0';
	
    return;
	
    sqlError:
        sprintf(szAux, "ObterData() finalizando com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return;
}

/************************************************************************************************************/
int DeletarRelatoriosAntigos(const char *pszDiretorio,const char*pData)
{
    static DIR *pDir;
    static struct dirent *pDirent;
    static char szArq[512 + 1];
	int iRemovidos = 0;

	char szAux[1024];

    oLog.logDebug(">>> DeletarRelatoriosAntigos");
    sprintf(szAux, "pszDiretorio[%s]", pszDiretorio); oLog.logDebug(szAux);
	sprintf(szAux, "pData[%s]", pData); oLog.logDebug(szAux);
	
	/* Abre diretorio e verifica sucesso */
	if( (pDir = opendir(pszDiretorio)) == NULL)
	{
		sprintf(szAux, "Erro abrindo diretorio [%s]. errno(%d) strerror[%s]", pszDiretorio, errno, strerror(errno)); oLog.logError(szAux);
		exit(-1);
	}
	
	try
	{
		/* Efetua a leitura dos nomes dos arquivos do diretorio */
		while((pDirent = readdir(pDir)) != NULL )
		{
			sprintf(szAux, "Arquivo obtido[%s]", pDirent->d_name); oLog.logDebug(szAux);

			/* valida arquivo */
			if((!memcmp(pDirent->d_name+strlen(pDirent->d_name)-4, ".csv", 4)))
			{
				oLog.logDebug("Arquivo tem extensão .csv");
				if(strlen(pDirent->d_name) > 8 )
				{
					oLog.logDebug("Arquivo tem mais de 8 caracteres");
					if((!memcmp(pDirent->d_name, pData, 8)))
					{
						oLog.logDebug("Arquivo confere com a Data comparada");
						strcpy(szArq, pDirent->d_name);
						if ( ACCESS(szArq,0)==0 )
						{
							if(remove(szArq) == -1)
							{
								sprintf(szAux, "Não foi possivel remover o arquivo [%s]", szArq); oLog.logDebug(szAux);
							}
							else
							{
								sprintf(szAux, "Arquivo [%s] removido com sucesso. Expurgo.", szArq); oLog.logDebug(szAux);
								++iRemovidos;
							}
						}
					}
				}
			}
		}
	}
	catch(...)
	{
		sprintf(szAux, "Foram removidos [%d] arquivos", iRemovidos); oLog.logDebug(szAux);
		oLog.logDebug("<<< DeletarRelatoriosAntigos() (exception).");
	}

	sprintf(szAux, "Foram removidos [%d] arquivos", iRemovidos); oLog.logDebug(szAux);
    closedir(pDir);
    oLog.logDebug("<<< DeletarRelatoriosAntigos()");
    return 0;
}

/************************************************************************************************************/
void enviarEmail(int acao,char *pszNomeArquivo,char *pszNomeArquivoZip,const char *mensagem,const char *listaEnderecos,const char *szDataProcessamento,const char *szHoraProcessamento)
{
    oLog.logDebug("enviando e-mail ...");

    char comando[12000];
    char subject[] = "Relatorio MVE - DIARIO";
    char texto[2048];
    char dataHoraProcessamento[64];

    // compacta o arquivo antes de enviar
   // compactarArquivo(pszNomeArquivo);

    sprintf(dataHoraProcessamento,"%s as %s",szDataProcessamento,szHoraProcessamento);

    if ( STATUS_SUCESSO == acao )
    {
        strcpy(texto,"Srs,\n\n\tPrezados segue o relatório de processos do VIVONET com os MVES para bloqueios no sistema SICS");
        //strcat(texto,dataHoraProcessamento);

        sprintf(comando,"(echo \"%s\";uuencode %s \"relatorioMVE.txt\")|mailx -s \"%s\" %.11800s"
                    ,texto,pszNomeArquivoZip,subject,listaEnderecos);
    }
    else if ( STATUS_VAZIO == acao )
    {
        strcpy(texto,"Srs,\n\n\tNão foram encontrados MVES para desbloqueio nesta data. ");
        strcat(texto,dataHoraProcessamento);

        sprintf(comando,"echo \"%s\"|mailx -s \"%s\" %.11800s"
                    ,texto,subject,listaEnderecos);
    }
    else if ( STATUS_ERRO == acao )
    {
        strcpy(texto,"Srs,\n\n\tErro no processamento dos MVES de ");
        strcat(texto,dataHoraProcessamento);
        strcat(texto," ");
        strcat(texto,"\n\tO erro foi \"");
        strcat(texto,mensagem?mensagem:"**ERRO DESCONHECIDO**");
        strcat(texto,"\"");

        sprintf(comando,"echo \"%s\"|mailx -s \"%s\" %.11400s"
                    ,texto,subject,listaEnderecos);
    }

    oLog.logDebug(comando);
    system(comando);

}

/************************************************************************************************************/
void removerArquivo(char *pszNomeArquivo)
{
    sprintf(szAux, "Vai remover o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);
    remove(pszNomeArquivo);
}

/************************************************************************************************************/
void montarNomeArquivo(char *pszNomeArquivo,char *pszNomeArquivoZip,const char *pszPath)
{
    strcpy(pszNomeArquivo, pszPath);
    strcat(pszNomeArquivo, "/"NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA);

    strcpy(pszNomeArquivoZip, pszPath);
    strcat(pszNomeArquivoZip, "/"NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA".gz");

    sprintf(szAux, "    Nome do arquivo = [%s]", pszNomeArquivo); oLog.logDebug(szAux);
    sprintf(szAux, "Nome do arquivo zip = [%s]", pszNomeArquivoZip); oLog.logDebug(szAux);
}

/************************************************************************************************************/
void compactarArquivo(const char *pszNomeArquivo)
{
    char sComando[512];

    strcpy(sComando,"gzip -f ");
    strcat(sComando,pszNomeArquivo);

    sprintf(szAux,"Comando [%s]", sComando); oLog.logDebug(szAux);
	
    system(sComando);

	sprintf(sComando,"mv relatorioMVE.txt.gz relatorioMVE.zip");

	system(sComando);
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int abrirArquivo(FILE **pFile,const char *pszNomeArquivo)
{
    sprintf(szAux, "Vai criar e abrir o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);

	char stempnamefile[_MAX_PATH*2+16];
	memset(stempnamefile, 0, sizeof(stempnamefile));
	
	sprintf(stempnamefile, "../data/%s", pszNomeArquivo); 
	
    *pFile = fopen(stempnamefile, "w");

    if( pFile == NULL )
    {
        sprintf(szAux, "Erro criando arquivo[%s]", stempnamefile); oLog.logDebug(szAux);
        return -1;
    }

    sprintf(szAux, "Arquivo [%s] disponível", stempnamefile); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{
  char szPog[1000];
 
  //sprintf (szPog,"%s\n",pszRegistro);
	if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {
            oLog.logDebug("Erro na gravação de registro no arquivo "NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA);
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
void fecharArquivo(FILE *pFile)
{
    fclose(pFile);
    oLog.logDebug("Fechou o arquivo "NOME_ARQUIVO_SAIDA"."EXTENSAO_ARQUIVO_SAIDA".");
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("relatorioMVE.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}

/************************************************************************************************************/
bool ObterListaEmail(char *pszListaEnderecos,int sizeofszListaEnderecos)
{
    oLog.logDebug("Obtendo lista de endereços...");

    FILE *file = fopen(".//ListaEnderecos.txt","r");

    if( 0==file )
	{
        oLog.logError("Erro abrindo arquivo de endereços");
        return false;
    }

    fgets(pszListaEnderecos,sizeofszListaEnderecos-1,file);

    fclose(file);

    oLog.logDebug("lista de endereços obtida com sucesso...");

    return true;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}
