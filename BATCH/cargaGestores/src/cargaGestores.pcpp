#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/cargaGestores.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"
#include "../../commons/CLeitorArquivo/CLeitorArquivo.h"

EXEC SQL INCLUDE SQLCA;

char szAux[1024];
char szTemp[1024];
char szTempTrace[2048];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 2048

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

#ifdef WIN32
#define MKDIR _mkdir
#define ACCESS _access
#else
#define MKDIR mkdir
#define ACCESS access
#endif

void NomeRelatorio( char * sNmRelatorio );
void ObterHora(char *pszData);
int InserirRegistros(CLeitorArquivo &leitorArq, int iIndex, string &sStatusRegistro);

//void sqlTratamentoErro(sqlca*sqlca);

int main(void)
{
    TParamConf tParamConf;
    int retorno = 0;
    char sNmRelatorio[256];
	

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oszLinha[512];
        VARCHAR strOraDataProcessamento[12];
        VARCHAR strOraHoraProcessamento[12];

        short ostLinha;
        short ostrOraDataProcessamento = -1;
        short ostrOraHoraProcessamento = -1;
    EXEC SQL END DECLARE SECTION;

    oLog.setNivel(2);
    oLog.logDebug(">>>cargaGestores");

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<cargaGestores");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<cargaGestores");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");

	char szData[256];	memset(szData,'\0',sizeof(szData));
	char szHora[256];	memset(szHora,'\0',sizeof(szHora));
	ObterData(0,szData);
	ObterHora(szHora);
	FILE *pFileRegErros=0;
	string sArquivoRegErros;
	sArquivoRegErros = tParamConf.szPathLogErros;
	sArquivoRegErros += "/";	
	sArquivoRegErros += szData;
	sArquivoRegErros += "-";
	sArquivoRegErros += szHora;
	sArquivoRegErros += "-cargaGestores_reg_erros.txt";
	
    if( !(pFileRegErros = fopen(sArquivoRegErros.data(), "w")))
    {
        sprintf(szTempTrace, "Erro criando arquivo[%s]", sArquivoRegErros.data()); oLog.logDebug(szTempTrace);
        return -1;
    }
	

	sprintf(szTempTrace, "Inicio do processo de cargaGestores..."); oLog.logDebug(szTempTrace);
	
	// 1 - CRIA UM VETOR COM O NOME DAS COLUNAS:
	VEC_STRING vecString;
	vecString.push_back(string("CONTACTID"));
	vecString.push_back(string("PRIMEIRO_NOME"));
	vecString.push_back(string("NOME_MEIO"));
	vecString.push_back(string("SOBRENOME"));
	vecString.push_back(string("CPF"));
	vecString.push_back(string("EMAIL"));
	vecString.push_back(string("TELEFONE1"));
	vecString.push_back(string("TELEFONE2"));
	vecString.push_back(string("TIPO_CONTATO"));
	vecString.push_back(string("NUMERO_CONTA"));
	vecString.push_back(string("CUSTOMERID"));
	vecString.push_back(string("CNPJ"));

	
	// 2 - DEFINE O CAMINHO EM QUE ESTA O ARQUIVO A SER LIDO
	string sCaminho;
	sCaminho = tParamConf.szPath;
					   
	// 3 - DEFINE O NOME DO ARQUIVO A SER LIDO
	
	string sArquivo;
	sArquivo = "/cadastro_gestorcontasMG_";
	sArquivo += szData;
	sArquivo += ".txt";
	
	// 4 - DEFINE QUAL O TIPO DE SEPARADOR DE DADOS ESPERADO
	string sSeparador = ";";

	
	sprintf(szTempTrace, "Caminho[%s] e nome de arquivo[%s] utilizados para o ler as informaçoes de carga.",sCaminho.data() ,sArquivo.data()  ); oLog.logDebug(szTempTrace);
	// 5 - INSTANCIA O OBJETO CLEITORARQUIVO
	CLeitorArquivo leitorArq(vecString,sCaminho,sArquivo,sSeparador);
	
	int iNumeroLinhasLido = 0;
	// 6 - DEFINE UM TAMANHO DO BLOCO DE LINHAS QUE DEVE SER LIDO POR VEZ.
	int iTamanhoDoBloco = 500;

	int iCountLine=0;
	int iInseridosSucesso = 0;
	int iErrosOcorridos = 0;
	

	string sStatusRegistro;
	// 6 - DEFINE UM LOOP DE TAMANHO J, ONDE J REPRESENTA QUANTAS VEZES SERA LIDO UM BLOCO DE TAMANHO 'iTAMANHODOBLOCO'
	for( int j=0;; ++j)
	{
		ErrosLeitorArquivo eErrorLeitor;
		eErrorLeitor = leitorArq.LerArquivo(iNumeroLinhasLido, iTamanhoDoBloco);
		/*switch(eErrorLeitor)
		{
			case ERRO_ABRIR_ARQUIVO:
			{
				oLog.logDebug("Retorno[ERRO_ABRIR_ARQUIVO] ao ler o arquivo.");					
				break;
			}
			case ERRO_QTD_DE_COLUNAS_INCOMPATIVEL:
			{
				oLog.logDebug("Retorno[ERRO_QTD_DE_COLUNAS_INCOMPATIVEL] ao ler o arquivo.");					
				break;
			}
			case OK_SUCESSO:
			{
				oLog.logDebug("Retorno[OK_SUCESSO] ao ler o arquivo.");					
				break;
			}
			default:
				break;
		}*/
		if( iNumeroLinhasLido > 0)
		{
			sprintf(szTempTrace, "Quantidade de registros lidos[%d] do arquivo[%s].",iNumeroLinhasLido,sArquivo.data()  ); oLog.logDebug(szTempTrace);		
			// 7 - EXIBE O CONTEUDO DE CADA LINHA LIDO NO BLOCO CORRENTE
			for( int iIndex=0; iIndex< iNumeroLinhasLido ; ++iIndex)
			{
				int iReturn = 0;
				if ( iReturn = InserirRegistros(leitorArq, iIndex, sStatusRegistro) == 0 )
				{
					iInseridosSucesso++;
					// Registro inserido com sucesso.
					
				}
				else
				{
					iErrosOcorridos++;
					// Ocorreu algum problema e o Registro nao foi inserido. Gravar no arquivo de log de erros.
					string sRegistroError;
					sRegistroError = leitorArq.ObterLinha(iIndex) + ";" + sStatusRegistro;
					gravarRegistro( pFileRegErros, sRegistroError.data());
				}
				/*cout<<leitorArq["Telefone"][i]<<"|";
				cout<<leitorArq["CodigoA"][i]<<"|";
				cout<<leitorArq["Data"][i]<<"|";
				cout<<leitorArq["CodigoB"][i];*/
			}
		}
		else
		{
			if( iCountLine == 0 )
			{
				sprintf(szTempTrace, "Nenhum registro lido do arquivo[%s].",sArquivo.data()  ); oLog.logDebug(szTempTrace);					
			}
			break;
		}
		iCountLine +=iNumeroLinhasLido;
	}
	//cout<<"\n Numero de Linhas Lidas = "<<iCountLine<<"\n";
	//system("pause");
	
	fclose(pFileRegErros);
	
	// 8 - QUANDO TERMINAR O ESCOPO O OBJETO 'CLEITORARQUIVO' CHAMA O DESTRUTOR QUE FECHA O ARQUIVO LIDO.

	sprintf(szTempTrace, "Foram inseridos [%d] registros com sucesso.", iInseridosSucesso ); oLog.logDebug(szTempTrace);
	sprintf(szTempTrace, "Foram identificados [%d] registros com erro.", iErrosOcorridos ); oLog.logDebug(szTempTrace);
	sprintf(szTempTrace, "Fim do processo de cargaGestores..."); oLog.logDebug(szTempTrace);

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<cargaGestores");

    return retorno;

    sqlError:
        sprintf(szTempTrace, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -1;
}

/************************************************************************************************************/
int InserirRegistros(CLeitorArquivo &leitorArq, int iIndex, string &sStatusRegistro)
{
    int iQtdRegistros=0;
	int retorno = 0;
	char szNomeArquivo[_MAX_PATH+9];
	char szNRDOCUMENTO[TAM_BUFFER+1];
	
	EXEC SQL BEGIN DECLARE SECTION;
		const char* ccOraNRDOCUMENTO = leitorArq["CNPJ"][iIndex].data();
		const char* ccOraContactID = leitorArq["CONTACTID"][iIndex].data();
		const char* ccOraPrimeiroNome = leitorArq["PRIMEIRO_NOME"][iIndex].data();
		const char* ccOraNomeMeio = leitorArq["NOME_MEIO"][iIndex].data();
		const char* ccOraSobrenome = leitorArq["SOBRENOME"][iIndex].data();
		const char* ccOraNomeInteiro = NULL;
		const char* ccOraCPF = leitorArq["CPF"][iIndex].data();
		const char* ccOraEmail = leitorArq["EMAIL"][iIndex].data();
		const char* ccOraTelefone1 = leitorArq["TELEFONE1"][iIndex].data();
		const char* ccOraTelefone2 = leitorArq["TELEFONE2"][iIndex].data();
		const char* ccOraTipoContato = leitorArq["TIPO_CONTATO"][iIndex].data();
		const char* ccOraNumeroConta = leitorArq["NUMERO_CONTA"][iIndex].data();
		const char* ccOraCustomerID = leitorArq["CUSTOMERID"][iIndex].data();
		VARCHAR szCONTA[20];
		short iszCONTA=-1;
        VARCHAR ostrIDPessoa[21+1];
	EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
	string sNomeInteiro = leitorArq["PRIMEIRO_NOME"][iIndex] + " " + leitorArq["NOME_MEIO"][iIndex] + " " + leitorArq["SOBRENOME"][iIndex];
	ccOraNomeInteiro = sNomeInteiro.data();
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	//EXEC SQL WHENEVER SQLERROR  DO sqlTratamentoErro(&sqlca);		



    EXEC SQL 
	
	 update  CUSTOMER.PESSOAGESTOR
		set IDPESSOASISTEMAORIGEM=:ccOraContactID,
			NMPESSOAGESTOR=:ccOraNomeInteiro,
			NMGESTOR=:ccOraPrimeiroNome,
			NMSOBRENOMEGESTOR=:ccOraSobrenome,
			NRTELEFONECELULARVIVO=:ccOraTelefone1,
			NRTELEFONEFIXO=:ccOraTelefone2,
			EMAIL=:ccOraEmail,
			IDUSUARIOALTERACAO=666,
			DTULTIMAALTERACAO=SYSDATE,
			DTNASCIMENTO=SYSDATE
		where NRDOCUMENTO= :ccOraCPF;


	
	sprintf(szTempTrace, "sqlca.sqlerrd[2] => [%d] update com sucesso...",sqlca.sqlerrd[2]); oLog.logDebug(szTempTrace);		
		
	if(sqlca.sqlerrd[2] == 0)
	{    EXEC SQL 
				SELECT
				   CUSTOMER.PESSOAGESTORSQ.nextval
				INTO
					:ostrIDPessoa
				FROM
					DUAL;
			
			EXEC SQL INSERT INTO CUSTOMER.PESSOAGESTOR
				(
					IDPESSOASISTEMAORIGEM,
					NMPESSOAGESTOR,
					NMGESTOR,
					NMMEIOGESTOR,
					NMSOBRENOMEGESTOR,
					NRTELEFONECELULARVIVO,
					NRTELEFONEFIXO,
					EMAIL,
					NRDOCUMENTO,
					IDUSUARIOALTERACAO,
					DTULTIMAALTERACAO,
					DTNASCIMENTO,
					INPRIMEIROACESSO,
					IDPESSOAGESTOR
				)
				VALUES
				(
					:ccOraContactID,
					:ccOraNomeInteiro,
					:ccOraPrimeiroNome,
					:ccOraNomeMeio,
					:ccOraSobrenome,
					:ccOraTelefone1,
					:ccOraTelefone2,
					:ccOraEmail,
					:ccOraCPF,
					1,
					SYSDATE,
					SYSDATE,
					1,
					:ostrIDPessoa
				);
	}
	else
	{
		 EXEC SQL 
			SELECT
				idpessoagestor
			INTO
				:ostrIDPessoa
			FROM
				CUSTOMER.PESSOAGESTOR
				where NRDOCUMENTO= :ccOraCPF
				and rownum<=1;

		 sprintf(szTempTrace, "ostrIDPessoa => [%s] update com sucesso...",(char*)ostrIDPessoa.arr); oLog.logDebug(szTempTrace);	
	}

	
	if ( leitorArq["TIPO_CONTATO"][iIndex].compare("GE") == 0 )
	{
		EXEC SQL
			select idconta
			into :szCONTA:iszCONTA
			from customer.conta
			where CDCONTA=:ccOraNumeroConta;
			
		EXEC SQL INSERT INTO CUSTOMER.PESSOAGESTORCONTA
			(
				NRDOCUMENTO,
				IDCONTA,
				IDTIPORELACIONAMENTO,				
				IDUSUARIOALTERACAO,
				DTULTIMAALTERACAO,
				IDPESSOAGESTOR
			)
			VALUES
			(
				:ccOraCPF,
				:szCONTA,
				5,
				1,
				SYSDATE,
				:ostrIDPessoa
			);	
			
			sprintf(szTempTrace, "Registro [%s] Inserido com sucesso...", leitorArq.ObterLinha(iIndex).data()); oLog.logDebug(szTempTrace);
			leitorArq.ObterLinha(iIndex);
			EXEC SQL COMMIT;			
	}
	else if ( leitorArq["TIPO_CONTATO"][iIndex].compare("GEM") == 0 )
	{
		EXEC SQL INSERT INTO CUSTOMER.PESSOAGESTORMASTER
			(
				NRDOCUMENTOGESTOR,
				NRDOCUMENTOEMPRESA,
				DTULTIMAALTERACAO
			)
			VALUES
			(
				:ccOraCPF,
                SUBSTR(:ccOraNRDOCUMENTO,1,14),
				SYSDATE
			);		
			sprintf(szTempTrace, "Registro [%s] Inserido com sucesso...", leitorArq.ObterLinha(iIndex).data()); oLog.logDebug(szTempTrace);
			leitorArq.ObterLinha(iIndex);
			EXEC SQL COMMIT;			
	}
	else
	{
		sprintf(szTempTrace, "TIPO_CONTATO valor[%s] desconhecido...", leitorArq["TIPO_CONTATO"][iIndex].data()); oLog.logDebug(szTempTrace);
		sStatusRegistro = szTempTrace;
		leitorArq.ObterLinha(iIndex);
		return -1;
	}
	return 0;

sqlError:
		string sRegistroError;
		sRegistroError = "Erro no processamento do registro: " + leitorArq.ObterLinha(iIndex) + ";" + sStatusRegistro;
		oLog.logDebug((char *)sRegistroError.data());
		
	    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);		
		sStatusRegistro = szTempTrace;
        return -2;	

/*sqlInsertPG:
		sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
        sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTOR. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -2;	
		
sqlInsertPGC:
		sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
        sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTORCONTA. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -3;	
		
sqlInsertPGM:
        sStatusRegistro = sqlca.sqlerrm.sqlerrmc;
		sprintf(szTempTrace, "Ocorreu um erro ao tentar inserir um registro em CUSTOMER.PESSOAGESTORMASTER. Erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szTempTrace);
        return -4;	
		*/
}


/************************************************************************************************************/
void ObterData(int iDiasAnteriores, char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
		short ostrDiasAnteriores = iDiasAnteriores;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE -:ostrDiasAnteriores,'DDMMYYYY')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[8] = '\0';
	
    return;
	
sqlError:
        return;		
}

void ObterHora(char *pszData)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR strOraDataProcessamento[12];
        short ostrOraDataProcessamento = -1;
    EXEC SQL END DECLARE SECTION;
	struct sqlca sqlca;
	
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR GOTO sqlError;
	
    EXEC SQL 
        SELECT
           TO_CHAR(SYSDATE,'HH24MISS')
        INTO
            :strOraDataProcessamento:ostrOraDataProcessamento
        FROM
            DUAL;

    CONVIND( strOraDataProcessamento,ostrOraDataProcessamento );

	sprintf( pszData,"%s", (char*)strOraDataProcessamento.arr );
	pszData[6] = '\0';
    return;
sqlError:
        return;		
	
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile, const char *spzRegistro)
{
    char szPog[1000];
 
    if( spzRegistro )
    {
        if(fputs(spzRegistro, pFile) <= 0)
        {
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/

/*void sqlTratamentoErro(sqlca*sqlca)
{

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    ULOGE("sql_error_WFAtendimento:sqlcode=%d,sqlerrmc=%.70s"
                            ,sqlca->sqlcode
                            ,sqlca->sqlerrm.sqlerrmc);

    throw new TuxBasicOraException(sqlca->sqlcode
                                  ,sqlca->sqlerrm.sqlerrmc
                                  ,sqlca->sqlerrm.sqlerrml);
	return 0;
}
*/

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szTempTrace, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szTempTrace);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szTempTrace, "iSig(%d)", iSig); oLog.logInformation(szTempTrace);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("cargaGestores.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_log_erros"))
        {
            strncpy(ptParamConf->szPathLogErros, szDivArq, _MAX_PATH);
        }
		
        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szTempTrace, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szTempTrace);
    sprintf(szTempTrace, "ptParamConf->szPathLogErros[%s]", ptParamConf->szPathLogErros); oLog.logDebug(szTempTrace);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szCltTux) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        strlen(ptParamConf->szPathLogErros) == 0 )
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}


/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szTempTrace, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szTempTrace);
}

void NomeRelatorio( char * sNmRelatorio )
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR oraNmRelatorio[256];
        short   i_oraNmRelatorio = -1;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL WHENEVER SQLERROR GOTO sqlErrorNomeRelatorio;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL
    SELECT
       DSVALORPARAMETRO
    INTO
       :oraNmRelatorio:i_oraNmRelatorio
    FROM
       APOIO.PARAMETRO
    WHERE
       CDPARAMETRO = 'RELATDVOL';   // Constante para busca no banco do nome do relatorio a ser gerado
    
    CONVIND( oraNmRelatorio, i_oraNmRelatorio );
    
    if ( i_oraNmRelatorio != -1 )
    {
        sprintf( sNmRelatorio,"%.*s", oraNmRelatorio.len,(char*)oraNmRelatorio.arr );
    }
    
    return;
    
sqlErrorNomeRelatorio:
    sNmRelatorio[0] = 0x0;
}
