#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream.h>
#ifndef WIN32
#include <unistd.h>
#endif
#include <ctype.h>

#include "../include/relatorioMCMDP_DT.h"

#include "../../commons/Propriedade/include/MFile.h"
#include "../../commons/Log/include/Log.h"
#include "../../commons/SplitLine.h"

EXEC SQL INCLUDE SQLCA;

char szAux[512];
Log oLog;
int iSignalProcessa=1;

#define TAM_BUFFER 1024*20

#define CONVIND(O,I) \
{\
    if (I == -1) { \
        ##O.arr[0]=0; \
    } else { \
        ##O.arr[##O.len]=0; \
    } \
}

int main( int argc, char *argv[] )
{
    TParamConf tParamConf;

    int ctDescargaPeriodica = 0;
    int lenSzRegistro = 0;
    int iQtdRegistros=0;
    int retorno = 0;

    char szNomeArquivo[_MAX_PATH+9];
    char szNomeArquivoZip[_MAX_PATH+9];
    char szNomeArquivoDestino[_MAX_PATH+9];
    char szRegistro[TAM_BUFFER+1];
	char buffer[TAM_BUFFER+1];
	FILE *pFile=0;

    EXEC SQL BEGIN DECLARE SECTION;        
		int parametroData;
		int parametroDia;
        char dtGeraRelatorio[64];
        VARCHAR dtFormata[64];
        
        VARCHAR nomeArquivo[256];        
        short i_nomeArquivo = -1;
		
		struct dados {
			VARCHAR dtFechamento[256];
			VARCHAR nmLoginUsuario[256];
			VARCHAR cpf[256];
			VARCHAR qtFechados[256];
			VARCHAR qtFechadosDentro[256];
			VARCHAR qtFechadosFora[256];
			VARCHAR qtPendentesFora[256];
			VARCHAR qtPendentesForaDias[256];
			VARCHAR qtFechadosMc1Mc2[256];
			VARCHAR qtTotalMc1Mc2[256];
		} m_dados;
		
		struct idados {
			short i_dtFechamento;	
			short i_nmLoginUsuario;
			short i_cpf;
			short i_qtFechados;
			short i_qtFechadosDentro;
			short i_qtFechadosFora;
			short i_qtPendentesFora;
			short i_qtPendentesForaDias;
			short i_qtFechadosMc1Mc2;
			short i_qtTotalMc1Mc2;
		} m_idados;
				  
		
    EXEC SQL END DECLARE SECTION;
	parametroData = 0;
	parametroDia = 0;
	memset(&nomeArquivo,0,sizeof(nomeArquivo));
	memset(szNomeArquivo,0,sizeof(szNomeArquivo));
	memset(szNomeArquivoZip,0,sizeof(szNomeArquivoZip));
    oLog.setNivel(2);
    oLog.logDebug(">>>relatorioMCMDP_DT");
    
    if ( !argc )
    {
        oLog.logDebug( "*** ERRO: INFORME UM ARGUMENTO PARA EXECUCAO." );
        oLog.logDebug( "<<< relatorioMCMDP_DT" );
        return -1;
    }

    if ( argc > 2 )
    {
        oLog.logDebug( "*** ERRO: PERMITIDO SOMENTE UM ARGUMENTO POR EXECUCAO." );
        oLog.logDebug( "<<< relatorioMCMDP_DT" );
        return -1;
    }
    
    strcpy(dtGeraRelatorio,argv[1]);

#ifndef WIN32
    ArmaSinal(SIGTERM);
#endif

    // parametros de configuração
    if(ObtemParamConf(&tParamConf))
    {
        oLog.logError("Erro obtendo parametros de configuracao");
        oLog.logDebug("<<<relatorioMCMDP_DT");
        return -1;
    }

    oLog.logDebug("Conectando na BD...");
    if (DBConnect(tParamConf.szUsr, tParamConf.szPws, tParamConf.szInst))
    {
        oLog.logError("Erro conectando no banco de dados");
        oLog.logDebug("<<<relatorioMCMDP_DT");
        return -1;
    }
    oLog.logDebug("Conectado na BD com sucesso...");
    		

    EXEC SQL WHENEVER SQLERROR GOTO sqlError;
    
    EXEC SQL SELECT TO_CHAR( TRUNC(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY')),'DD/MM/YYYY') INTO :dtFormata FROM DUAL;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL 
        SELECT
            '../data/VIVONET_MEUCLIENTE_' || TO_CHAR(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY'),'YYYYMMDD') || '.txt'
        INTO
            :nomeArquivo:i_nomeArquivo
        FROM
            DUAL;
			
	strcpy(szNomeArquivo,(char*)nomeArquivo.arr);
	sprintf(szNomeArquivoZip,"%s.gz",szNomeArquivo);
	
    EXEC SQL 
        SELECT TO_NUMBER(DSVALORPARAMETRO) into :parametroData FROM APOIO.PARAMETRO WHERE CDPARAMETRO = 'PARAMETRO_MCMDP_DATA_RELATORIO';
		
	EXEC SQL 
        SELECT TO_NUMBER(DSVALORPARAMETRO) into :parametroDia FROM APOIO.PARAMETRO WHERE CDPARAMETRO = 'PARAMETRO_MCMDP_DIA_RELATORIO';
	    
    if( abrirArquivo(&pFile,szNomeArquivo) < 0 )
    {
        oLog.logDebug("<<<relatorioMCMDP_DT");
        return -1;
    }	


    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    // declara cursor para busca dos xml´s a serem reprocessados
    sprintf(szAux, "Declarando cursor..."); oLog.logDebug(szAux);

    EXEC SQL DECLARE Cursor CURSOR FOR
	SELECT 
        TO_CHAR(DT_ATUAL,'DD/MM/YYYY'), NMLOGINUSUARIO, CPF, QT_FECHADOS,QT_FECHADOS_DENTRO,QT_FECHADOS_FORA,QT_PENDENTES_FORA, QT_PENDENTES_FORA_DIAS, QT_FECHADOS_MC1_MC2, QT_TOTAL_MC1_MC2
      FROM
      (SELECT  DT_ATUAL, NMLOGINUSUARIO, CPF, COUNT(FECHADOS) AS QT_FECHADOS ,COUNT(FECHADOS_DENTRO) AS QT_FECHADOS_DENTRO,
       COUNT(FECHADOS_FORA) AS QT_FECHADOS_FORA, COUNT(PENDENTES_FORA) AS QT_PENDENTES_FORA, COUNT(PENDENTES_FORA_DIAS) AS QT_PENDENTES_FORA_DIAS,
       COUNT(FECHADOS_MC1_MC2) AS QT_FECHADOS_MC1_MC2, COUNT(TOTAL_MC1_MC2) AS QT_TOTAL_MC1_MC2
      FROM
      (SELECT  trunc(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY')-1) AS DT_ATUAL,
             U.NMLOGINUSUARIO,
             DOCUMENTO.NRDOCUMENTO as CPF,
                   EST.IDESTADO ,
                   (CASE 
                     WHEN  EST.IDESTADO = 4 THEN 1  ELSE NULL              
                   END) AS FECHADOS,
                   (CASE 
                    WHEN TRUNC(ATENDIMENTO.DTFECHAMENTO) <= TRUNC(ATENDIMENTO.DTPRAZOFINALINTERNO) AND EST.IDESTADO = 4  THEN
                        1  ELSE NULL          
                   END) AS FECHADOS_DENTRO,
                   (CASE 
                    WHEN TRUNC(ATENDIMENTO.DTFECHAMENTO) > TRUNC(ATENDIMENTO.DTPRAZOFINALINTERNO) AND EST.IDESTADO = 4  THEN
                        1  ELSE NULL          
                   END) AS FECHADOS_FORA,
                   (CASE 
                    WHEN TRUNC(ATENDIMENTO.DTPRAZOFINALINTERNO) < TRUNC(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY')-1) AND ATENDIMENTO.DTFECHAMENTO IS NULL THEN
                        1  ELSE NULL          
                   END) AS PENDENTES_FORA,
                   (CASE 
                    WHEN  TRUNC(SOA_OW.DIAUTIL_DATE(ATENDIMENTO.DTPRAZOFINALINTERNO,:parametroDia))  <=  TRUNC(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY'))  AND ATENDIMENTO.DTFECHAMENTO IS NULL  THEN
                        1  ELSE NULL          
                   END) AS PENDENTES_FORA_DIAS,
                   (CASE 
                    WHEN (ATENDIMENTO.SGFLUXOATENDIMENTO = 'MC1' OR ATENDIMENTO.SGFLUXOATENDIMENTO = 'MC2') AND EST.IDESTADO = 4 THEN
                        1  ELSE NULL          
                   END) AS FECHADOS_MC1_MC2,
                   (CASE 
                    WHEN (ATENDIMENTO.SGFLUXOATENDIMENTO = 'MC1' OR ATENDIMENTO.SGFLUXOATENDIMENTO = 'MC2') AND EST.IDESTADO = 4 THEN
                        1  ELSE NULL          
                   END) AS TOTAL_MC1_MC2
      FROM (
                SELECT  /*+ PARALLEL(ATD,default) */
				       ATD.IDATENDIMENTO,
                       ATD.IDAGRUPAMENTOESTADOTPPROC,
                       ATD.DTABERTURA,
                       ATD.SGREGRAENCAMINHAMENTO,
                       ATD.SGFLUXOATENDIMENTO,
                       ATD.DTPRAZOFINALINTERNO,
                       ATD.DTFECHAMENTO,
                       ATD.IDPESSOAUSUARIOATUAL
                  FROM ATENDIMENTO.ATENDIMENTO ATD
                 WHERE (ATD.DTFECHAMENTO >= TRUNC(TO_DATE(:dtGeraRelatorio,'DD/MM/YYYY') -1) OR ATD.DTFECHAMENTO IS NULL)
                     AND ATD.SGREGRAENCAMINHAMENTO = 'MC'
                     AND ATD.SGFLUXOATENDIMENTO IN ('MC1','MC2','MC3')) ATENDIMENTO,
           ACESSO.USUARIO U,
           WORKFLOW.AGRUPAMENTOESTADOTPPROC AGRTPR,
           WORKFLOW.AGRUPAMENTOESTADO AGREST,
           WORKFLOW.ESTADO EST,
           WORKFLOW.SUBESTADO SEST,
           CUSTOMER.DOCUMENTO DOCUMENTO, 
           CUSTOMER.PESSOADOCUMENTO PESSOADOCUMENTO,
           APOIO.TIPODOCUMENTO TIPODOCUMENTO           
     WHERE ATENDIMENTO.IDAGRUPAMENTOESTADOTPPROC =
              AGRTPR.IDAGRUPAMENTOESTADOTPPROC
           AND AGRTPR.IDAGRUPAMENTOESTADO = AGREST.IDAGRUPAMENTOESTADO
           AND AGREST.IDESTADO = EST.IDESTADO
           AND AGREST.IDSUBESTADO = SEST.IDSUBESTADO
           AND ATENDIMENTO.IDPESSOAUSUARIOATUAL = U.IDPESSOAUSUARIO    
           AND TIPODOCUMENTO.SGCLASSIFICACAO = 'CPF'
           AND DOCUMENTO.IDDOCUMENTO = PESSOADOCUMENTO.IDDOCUMENTO                   
           AND U.IDPESSOAUSUARIO = PESSOADOCUMENTO.IDPESSOA
           AND DOCUMENTO.IDTIPODOCUMENTO = TIPODOCUMENTO.IDTIPODOCUMENTO                 
            )
           GROUP BY  DT_ATUAL, NMLOGINUSUARIO, CPF);	
	
    oLog.logDebug("Vai abrir o cursor");

    EXEC SQL OPEN Cursor;

    oLog.logDebug("Abriu o cursor");	
	//Gravando Cabecalho	
    while (1)
    {
        /* tratamento para interromper o processamento via sinal (complemento da saida acima) */
        if(iSignalProcessa == 0)
        {
            oLog.logDebug("2.Tratamento de sinal de termino dentro do loop recebeu interrupção");
            break;
        }
		
		memset(&m_dados,0,sizeof(dados));
		memset(&m_idados,0,sizeof(idados));
		memset(buffer,0,sizeof(buffer));

        EXEC SQL
            FETCH
                Cursor
            INTO
                :m_dados:m_idados;
				
		sprintf(buffer,"%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
			(char*)m_dados.dtFechamento.arr,
			(char*)m_dados.nmLoginUsuario.arr,
			(char*)m_dados.cpf.arr,
			(char*)m_dados.qtFechados.arr,
			(char*)m_dados.qtFechadosDentro.arr,
			(char*)m_dados.qtFechadosFora.arr,
			(char*)m_dados.qtPendentesFora.arr,
			(char*)m_dados.qtPendentesForaDias.arr,
			(char*)m_dados.qtFechadosMc1Mc2.arr,
			(char*)m_dados.qtTotalMc1Mc2.arr);				
						
		oLog.logDebug(buffer);

		gravarRegistro(pFile,buffer);

    }// while (1)

	
    fecharArquivo(pFile); // Fecha o Arquivo
	
	oLog.logDebug("compactarArquivo...");
	
	//compactarArquivo(szNomeArquivo);

    // finaliza
    oLog.logDebug("Fechando cursor...");
    EXEC SQL CLOSE Cursor;

    DBDisconnect();

    if ( 0 == retorno )
    {
        oLog.logDebug("Processamento encerrado com sucesso...");
    }
    else
    {
        oLog.logDebug("Processamento encerrado com ERRO!");
    }

    oLog.logDebug("<<<relatorioMCMDP_DT");

    return retorno;

    sqlError:
        sprintf(szAux, "Finalizando processo com erro ORACLE (%d)", sqlca.sqlcode); oLog.logDebug(szAux);
        return -1;
}


/************************************************************************************************************/
void removerArquivo(char *pszNomeArquivo)
{
    sprintf(szAux, "Vai remover o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);
    remove(pszNomeArquivo);
}

/************************************************************************************************************/

/************************************************************************************************************/
void compactarArquivo(const char *pszNomeArquivo)
{
	oLog.logDebug("inicio compactarArquivo");
	
    char sComando[512];

    strcpy(sComando,"gzip -f ");
    strcat(sComando,pszNomeArquivo);

    sprintf(szAux,"Comando [%s]", sComando); oLog.logDebug(szAux);
	
    system(sComando);

	//sprintf(sComando,"mv relatorioURA.txt.gz relatorioURA.zip");

	//system(sComando);
	
	oLog.logDebug("fim compactarArquivo");
}

/************************************************************************************************************/
void moverArquivo(const char *pszNomeArquivoOrigem,const char *pszNomeArquivoDestino)
{
    char sComando[_MAX_PATH*2+16];

    sprintf(sComando,"/usr/bin/mv -f %s %s", pszNomeArquivoOrigem, pszNomeArquivoDestino);

    oLog.logDebug(" Vai mover o arquivo");
    sprintf(szAux," Arquivo Origem [%s]", pszNomeArquivoOrigem); oLog.logDebug(szAux);
    sprintf(szAux,"Arquivo Destino [%s]", pszNomeArquivoDestino); oLog.logDebug(szAux);
    sprintf(szAux,"        Comando [%s]", sComando); oLog.logDebug(szAux);

    system(sComando);
}

/************************************************************************************************************/
int abrirArquivo(FILE **pFile,const char *pszNomeArquivo)
{
    sprintf(szAux, "Vai criar e abrir o arquivo [%s]", pszNomeArquivo); oLog.logDebug(szAux);

    *pFile = fopen(pszNomeArquivo, "w");

    if( pFile == NULL )
    {
        sprintf(szAux, "Erro criando arquivo[%s]", pszNomeArquivo); oLog.logDebug(szAux);
        return -1;
    }

    sprintf(szAux, "Arquivo [%s] disponível", pszNomeArquivo); oLog.logDebug(szAux);

    return 0;
}

/************************************************************************************************************/
int gravarRegistro(FILE *pFile,char *pszRegistro)
{
  char szPog[1000];
 
  //sprintf (szPog,"%s\n",pszRegistro);
	if( pszRegistro )
    {
        if(fputs(pszRegistro, pFile) <= 0)
        {            
            return -1;
        }
    }

    return 0;
}

/************************************************************************************************************/
void fecharArquivo(FILE *pFile)
{
    fclose(pFile);    
}

/************************************************************************************************************/
#ifndef WIN32
void ArmaSinal(int iSignal)
{
    sprintf(szAux, "Armando tratamento para Signal(%d)", iSignal); oLog.logInformation(szAux);

    if(signal((iSignal), ProcessaSignal) == SIG_ERR)
	{
        fprintf(stderr, "ERRO ARMANDO SINAL!!!\n");
        exit(-1);
    }
}
/************************************************************************************************************/
void ProcessaSignal(int iSig)
{
    oLog.logInformation(">>>ProcessaSignal");
    sprintf(szAux, "iSig(%d)", iSig); oLog.logInformation(szAux);

    /* rearma o mesmo sinal lancado */
    ArmaSinal(iSig);

    if(iSig == SIGTERM)
	{
        oLog.logInformation("Finalizando processamento via sinal....");
        iSignalProcessa=0;
    }

    oLog.logInformation(">>>ProcessaSignal");
}
#endif

/************************************************************************************************************/
int ObtemParamConf(TParamConf *ptParamConf)
{
    MFile mfConfig;
    SplitLine NewLinha;
    char szLinha[100 + 1];
    char szDivArq[256];
    char szDivPre[21];

    oLog.logDebug("Obtendo parametros de configuracao...");

    /* Zera variáveis */
    memset(ptParamConf, 0x00, sizeof(TParamConf));
    memset(szLinha, 0x00, sizeof(szLinha));
    memset(szDivArq, 0x00, sizeof(szDivArq));
    memset(szDivPre, 0x00, sizeof(szDivPre));


    /* Define o arquivo de configuração */
    mfConfig.setPath("relatorioMCMDP_DT.cfg");

    /* Verificar se conseguiu abrir o arquivo */
    if(!mfConfig.abrir())
	{
        oLog.logError("Erro abrindo arquivo de configuração!");
        return -1;
    }

    /* Capturando usuario, senha, path e instance de banco do arquivo */
    NewLinha.SetDiv('=');
    while(mfConfig.getLine(szLinha) != 0)
    {
        NewLinha.SetLine(szLinha);
        NewLinha.GetBeforeDiv(szDivPre);
        NewLinha.GetAfterDiv(szDivArq);

        /* Verifica qual parâmetro foi encontrado. */
        if (!strcmp(szDivPre, "pwd_db"))
        {
            strncpy(ptParamConf->szPws, szDivArq, TAM_BD_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_db"))
        {
            strncpy(ptParamConf->szUsr, szDivArq, TAM_BD_USRNAME);
        }
        else if (!strcmp(szDivPre, "inst_db"))
        {
            strncpy(ptParamConf->szInst, szDivArq, TAM_BD_INST);
        }
        else if (!strcmp(szDivPre, "pwd_tux"))
        {
            strncpy(ptParamConf->szPwsTux, szDivArq, TAM_TX_PASSWD);
        }
        else if (!strcmp(szDivPre, "usr_tux"))
        {
            strncpy(ptParamConf->szUsrTux, szDivArq, TAM_TX_USRNAME);
        }
        else if (!strcmp(szDivPre, "pwd_tux_gen"))
        {
            strncpy(ptParamConf->szPwsTuxGen, szDivArq, TAM_TX_GEN);
        }
        else if (!strcmp(szDivPre, "clt_tux"))
        {
            strncpy(ptParamConf->szCltTux, szDivArq, TAM_TX_CLT);
        }
        else if (!strcmp(szDivPre, "path"))
        {
            strncpy(ptParamConf->szPath, szDivArq, _MAX_PATH);
        }
        else if (!strcmp(szDivPre, "path_togo"))
        {
            strncpy(ptParamConf->szPathToGo, szDivArq, _MAX_PATH);
        }

        memset(szLinha,  0x00, sizeof(szLinha));
        memset(szDivPre, 0x00, sizeof(szDivPre));
        memset(szDivArq, 0x00, sizeof(szDivArq));
    }

    /* Fechando o arquivo de configuracao aberto */
    mfConfig.fechar();

    sprintf(szAux, "ptParamConf->szPws[%s]", ptParamConf->szPws); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsr[%s]", ptParamConf->szUsr); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szInst[%s]", ptParamConf->szInst); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTux[%s]", ptParamConf->szPwsTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szUsrTux[%s]", ptParamConf->szUsrTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPwsTuxGen[%s]", ptParamConf->szPwsTuxGen); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szCltTux[%s]", ptParamConf->szCltTux); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPath[%s]", ptParamConf->szPath); oLog.logDebug(szAux);
    sprintf(szAux, "ptParamConf->szPathToGo[%s]", ptParamConf->szPathToGo); oLog.logDebug(szAux);

    /* Verifica se todos os dados foram recuperados do arquivo de configuração. */
    if (strlen(ptParamConf->szInst) == 0 ||
        strlen(ptParamConf->szPwsTux) == 0 ||
        strlen(ptParamConf->szUsrTux) == 0 ||
        strlen(ptParamConf->szPwsTuxGen) == 0 ||
        strlen(ptParamConf->szPath) == 0 ||
        //strlen(ptParamConf->szPathToGo) == 0 ||
        strlen(ptParamConf->szCltTux) == 0)
    {
        oLog.logError("Dados incompletos!");
        return -1;
    }


    oLog.logDebug("Parametros de configuracao obtidos com sucesso...");
    return 0;
}

/************************************************************************************************************/
int DBConnect(char *pUsr, char *pPwd, char *pInst)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char connString[256];
    EXEC SQL END DECLARE SECTION;

    oLog.logInformation(">>>DBConnect");

    /* String de conexao */
    sprintf(connString, "%s/%s@%s", pUsr, pPwd, pInst);

    /* Marca ponto de erro */
    EXEC SQL WHENEVER SQLERROR GOTO errConn;

    /* Conecta */
    EXEC SQL CONNECT :connString;

    oLog.logInformation("<<<DBConnect");

    return (sqlca.sqlcode);

errConn:
    oLog.logInformation("<<<DBConnect [ERROR]");
    return -1;
}

/************************************************************************************************************/
void DBDisconnect(void)
{
    oLog.logInformation(">>>DBDisconnect");

    EXEC SQL WHENEVER SQLERROR GOTO DBDisconnectError;
    EXEC SQL COMMIT WORK RELEASE;

    oLog.logInformation("<<<DBDisconnect");
    return;

DBDisconnectError:
    sprintf(szAux, "ERRO ORACLE -> sqlcode=%d,sqlerrmc=%.70s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc); oLog.logDebug(szAux);
}
